from dsl import *
from constants import *


def solve_007bbfb7(I):
    x1 = palette(I)
    x2 = other(x1, ZERO)
    x3 = shape(I)
    x4 = multiply(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = ofcolor(I, x2)
    x7 = lbind(shift, x6)
    x8 = shape(I)
    x9 = rbind(multiply, x8)
    x10 = apply(x9, x6)
    x11 = mapply(x7, x10)
    O = fill(x5, x2, x11)
    return O


def solve_00d62c1b(I):
    x1 = objects(I, T, F, F)
    x2 = mostcolor(I)
    x3 = colorfilter(x1, x2)
    x4 = rbind(bordering, I)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = fill(I, FOUR, x6)
    return O


def solve_017c7c7b(I):
    x1 = palette(I)
    x2 = other(x1, ZERO)
    x3 = ofcolor(I, x2)
    x4 = asobject(I)
    x5 = vperiod(x4)
    x6 = height(I)
    x7 = halve(x6)
    x8 = add(x6, x7)
    x9 = width(I)
    x10 = astuple(x8, x9)
    x11 = canvas(ZERO, x10)
    x12 = increment(x8)
    x13 = interval(ZERO, x12, x5)
    x14 = lbind(shift, x3)
    x15 = apply(toivec, x13)
    x16 = mapply(x14, x15)
    O = fill(x11, TWO, x16)
    return O


def solve_025d127b(I):
    x1 = mostcolor(I)
    x2 = objects(I, T, T, T)
    x3 = rbind(objects, F)
    x4 = rbind(x3, F)
    x5 = rbind(x4, T)
    x6 = lbind(canvas, x1)
    x7 = compose(x6, shape)
    x8 = fork(paint, x7, normalize)
    x9 = compose(x5, x8)
    x10 = fork(colorfilter, x9, color)
    x11 = rbind(shift, RIGHT)
    x12 = rbind(argmax, rightmost)
    x13 = compose(x12, x10)
    x14 = fork(remove, x13, x10)
    x15 = chain(x11, merge, x14)
    x16 = rbind(argmax, rightmost)
    x17 = compose(x16, x10)
    x18 = fork(combine, x17, x15)
    x19 = fork(shift, x18, ulcorner)
    x20 = merge(x2)
    x21 = fill(I, x1, x20)
    x22 = mapply(x19, x2)
    O = paint(x21, x22)
    return O


def solve_045e512c(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = height(x2)
    x4 = width(x2)
    x5 = neighbors(ORIGIN)
    x6 = toindices(x2)
    x7 = lbind(shift, x6)
    x8 = height(I)
    x9 = divide(x8, x3)
    x10 = width(I)
    x11 = divide(x10, x4)
    x12 = astuple(x9, x11)
    x13 = maximum(x12)
    x14 = increment(x13)
    x15 = interval(ONE, x14, ONE)
    x16 = astuple(x3, x4)
    x17 = lbind(multiply, x16)
    x18 = compose(crement, x17)
    x19 = lbind(mapply, x7)
    x20 = rbind(apply, x15)
    x21 = lbind(rbind, multiply)
    x22 = compose(x21, x18)
    x23 = chain(x19, x20, x22)
    x24 = rbind(toobject, I)
    x25 = compose(x7, x18)
    x26 = chain(palette, x24, x25)
    x27 = mostcolor(I)
    x28 = rbind(equality, x27)
    x29 = rbind(argmin, x28)
    x30 = compose(x29, x26)
    x31 = fork(recolor, x30, x23)
    x32 = mapply(x31, x5)
    O = paint(I, x32)
    return O


def solve_0520fde7(I):
    x1 = width(I)
    x2 = halve(x1)
    x3 = tojvec(x2)
    x4 = height(I)
    x5 = decrement(x4)
    x6 = astuple(x5, x2)
    x7 = connect(x3, x6)
    x8 = toobject(x7, I)
    x9 = numcolors(x8)
    x10 = equality(x9, ONE)
    x11 = branch(x10, lefthalf, tophalf)
    x12 = branch(x10, righthalf, bottomhalf)
    x13 = x11(I)
    x14 = x12(I)
    x15 = palette(x13)
    x16 = other(x15, ZERO)
    x17 = palette(x14)
    x18 = other(x17, ZERO)
    x19 = shape(x13)
    x20 = canvas(ZERO, x19)
    x21 = ofcolor(x13, x16)
    x22 = ofcolor(x14, x18)
    x23 = intersection(x21, x22)
    O = fill(x20, TWO, x23)
    return O


def solve_05269061(I):
    x1 = shape(I)
    x2 = maximum(x1)
    x3 = interval(ZERO, x2, ONE)
    x4 = interval(ONE, x2, ONE)
    x5 = rbind(toobject, I)
    x6 = rbind(shoot, RIGHT)
    x7 = chain(x5, x6, toivec)
    x8 = rbind(shoot, DOWN)
    x9 = chain(x5, x8, tojvec)
    x10 = apply(x7, x3)
    x11 = apply(x9, x3)
    x12 = rbind(shoot, UP_RIGHT)
    x13 = chain(x5, x12, toivec)
    x14 = rbind(shoot, UP_RIGHT)
    x15 = decrement(x2)
    x16 = lbind(astuple, x15)
    x17 = chain(x5, x14, x16)
    x18 = apply(x13, x3)
    x19 = apply(x17, x4)
    x20 = combine(x18, x19)
    x21 = rbind(shoot, NEG_UNITY)
    x22 = decrement(x2)
    x23 = lbind(astuple, x22)
    x24 = chain(x5, x21, x23)
    x25 = rbind(shoot, NEG_UNITY)
    x26 = decrement(x2)
    x27 = rbind(astuple, x26)
    x28 = lbind(subtract, x26)
    x29 = compose(x27, x28)
    x30 = chain(x5, x25, x29)
    x31 = apply(x24, x3)
    x32 = apply(x30, x4)
    x33 = combine(x31, x32)
    x34 = rbind(valmax, numcolors)
    x35 = matcher(x34, ONE)
    x36 = x35(x10)
    x37 = x35(x11)
    x38 = x35(x20)
    x39 = branch(x38, x20, x33)
    x40 = branch(x37, x11, x39)
    x41 = branch(x36, x10, x40)
    x42 = apply(mostcolor, x41)
    x43 = matcher(identity, ZERO)
    x44 = compose(flip, x43)
    x45 = sfilter(x42, x44)
    x46 = size(x45)
    x47 = double(x2)
    x48 = divide(x47, x46)
    x49 = increment(x48)
    x50 = interval(ZERO, x49, ONE)
    x51 = matcher(first, ZERO)
    x52 = compose(flip, x51)
    x53 = fork(recolor, first, last)
    x54 = size(x41)
    x55 = interval(ZERO, x54, ONE)
    x56 = rbind(compose, first)
    x57 = lbind(rbind, greater)
    x58 = chain(x56, x57, decrement)
    x59 = lbind(apply, last)
    x60 = lbind(chain, x59)
    x61 = rbind(x60, x58)
    x62 = lbind(lbind, sfilter)
    x63 = lbind(pair, x55)
    x64 = chain(x61, x62, x63)
    x65 = x64(x41)
    x66 = x64(x42)
    x67 = rbind(multiply, x46)
    x68 = compose(x65, x67)
    x69 = rbind(multiply, x46)
    x70 = compose(x66, x69)
    x71 = lbind(mapply, x53)
    x72 = rbind(sfilter, x52)
    x73 = lbind(pair, x42)
    x74 = compose(x73, x68)
    x75 = chain(x71, x72, x74)
    x76 = lbind(mapply, x53)
    x77 = rbind(sfilter, x52)
    x78 = rbind(pair, x41)
    x79 = compose(x78, x70)
    x80 = chain(x76, x77, x79)
    x81 = fork(combine, x75, x80)
    x82 = mapply(x81, x50)
    O = paint(I, x82)
    return O


def solve_05f2a901(I):
    x1 = objects(I, T, T, T)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = extract(x1, x3)
    x5 = other(x1, x4)
    x6 = gravitate(x5, x4)
    O = move(I, x5, x6)
    return O


def solve_06df4c85(I):
    x1 = asobject(I)
    x2 = frontiers(I)
    x3 = merge(x2)
    x4 = difference(x1, x3)
    x5 = mostcolor(x4)
    x6 = objects(I, T, F, F)
    x7 = color(x3)
    x8 = matcher(color, x7)
    x9 = matcher(color, x5)
    x10 = fork(either, x8, x9)
    x11 = compose(flip, x10)
    x12 = sfilter(x6, x11)
    x13 = merge(x12)
    x14 = palette(x13)
    x15 = lbind(mfilter, x12)
    x16 = lbind(matcher, color)
    x17 = compose(x15, x16)
    x18 = apply(x17, x14)
    x19 = fork(either, vline, hline)
    x20 = lbind(prapply, connect)
    x21 = fork(x20, identity, identity)
    x22 = compose(x21, toindices)
    x23 = rbind(sfilter, x19)
    x24 = chain(merge, x23, x22)
    x25 = fork(recolor, color, x24)
    x26 = mapply(x25, x18)
    x27 = paint(I, x26)
    O = paint(x27, x3)
    return O


def solve_08ed6ac7(I):
    x1 = first(I)
    x2 = mostcommon(x1)
    x3 = dmirror(I)
    x4 = matcher(identity, x2)
    x5 = rbind(sfilter, x4)
    x6 = compose(size, x5)
    x7 = apply(x6, x3)
    x8 = dedupe(x7)
    x9 = order(x8, identity)
    x10 = size(x9)
    x11 = increment(x10)
    x12 = increment(x11)
    x13 = interval(ONE, x12, ONE)
    x14 = pair(x9, x13)
    x15 = height(I)
    x16 = astuple(x15, x2)
    x17 = repeat(x16, ONE)
    x18 = combine(x17, x14)
    x19 = lbind(extract, x18)
    x20 = lbind(matcher, first)
    x21 = chain(last, x19, x20)
    x22 = compose(x21, x6)
    x23 = fork(subtract, height, x6)
    x24 = fork(repeat, x22, x23)
    x25 = lbind(repeat, x2)
    x26 = compose(x25, x6)
    x27 = fork(combine, x26, x24)
    x28 = apply(x27, x3)
    O = dmirror(x28)
    return O


def solve_09629e4f(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = sfilter(x1, vline)
    x4 = size(x2)
    x5 = size(x3)
    x6 = merge(x1)
    x7 = color(x6)
    x8 = shape(I)
    x9 = canvas(x7, x8)
    x10 = hconcat(I, x9)
    x11 = objects(x10, F, T, T)
    x12 = argmin(x11, numcolors)
    x13 = normalize(x12)
    x14 = toindices(x13)
    x15 = increment(x4)
    x16 = increment(x15)
    x17 = increment(x5)
    x18 = increment(x17)
    x19 = astuple(x16, x18)
    x20 = lbind(shift, x14)
    x21 = rbind(multiply, x19)
    x22 = chain(x20, x21, last)
    x23 = fork(recolor, first, x22)
    x24 = normalize(x12)
    x25 = mapply(x23, x24)
    O = paint(x9, x25)
    return O


def solve_0962bcdd(I):
    x1 = objects(I, F, T, T)
    x2 = lbind(mapply, dneighbors)
    x3 = compose(x2, toindices)
    x4 = fork(recolor, mostcolor, x3)
    x5 = compose(decrement, ulcorner)
    x6 = compose(increment, lrcorner)
    x7 = fork(connect, x5, x6)
    x8 = compose(hmirror, x7)
    x9 = fork(combine, x7, x8)
    x10 = fork(recolor, leastcolor, x9)
    x11 = mapply(x4, x1)
    x12 = paint(I, x11)
    x13 = mapply(x10, x1)
    O = paint(x12, x13)
    return O


def solve_0a938d79(I):
    x1 = portrait(I)
    x2 = branch(x1, dmirror, identity)
    x3 = x2(I)
    x4 = objects(x3, T, F, T)
    x5 = argmin(x4, leftmost)
    x6 = argmax(x4, leftmost)
    x7 = color(x5)
    x8 = color(x6)
    x9 = leftmost(x5)
    x10 = leftmost(x6)
    x11 = subtract(x10, x9)
    x12 = double(x11)
    x13 = multiply(THREE, TEN)
    x14 = interval(x9, x13, x12)
    x15 = interval(x10, x13, x12)
    x16 = compose(vfrontier, tojvec)
    x17 = mapply(x16, x14)
    x18 = mapply(x16, x15)
    x19 = recolor(x7, x17)
    x20 = recolor(x8, x18)
    x21 = combine(x19, x20)
    x22 = paint(x3, x21)
    O = x2(x22)
    return O


def solve_0b148d64(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmin(x1, x2)
    O = subgrid(x3, I)
    return O


def solve_0ca9ddb6(I):
    x1 = ofcolor(I, ONE)
    x2 = ofcolor(I, TWO)
    x3 = mapply(dneighbors, x1)
    x4 = mapply(ineighbors, x2)
    x5 = fill(I, SEVEN, x3)
    O = fill(x5, FOUR, x4)
    return O


def solve_0d3d703e(I):
    x1 = switch(I, THREE, FOUR)
    x2 = switch(x1, EIGHT, NINE)
    x3 = switch(x2, TWO, SIX)
    O = switch(x3, ONE, FIVE)
    return O


def solve_0dfd9992(I):
    x1 = palette(I)
    x2 = objects(I, T, F, F)
    x3 = lbind(colorfilter, x2)
    x4 = compose(size, x3)
    x5 = valmin(x1, x4)
    x6 = matcher(x4, x5)
    x7 = sfilter(x1, x6)
    x8 = lbind(colorcount, I)
    x9 = argmin(x7, x8)
    x10 = asobject(I)
    x11 = matcher(first, x9)
    x12 = compose(flip, x11)
    x13 = sfilter(x10, x12)
    x14 = lbind(contained, x9)
    x15 = compose(flip, x14)
    x16 = sfilter(I, x15)
    x17 = asobject(x16)
    x18 = hperiod(x17)
    x19 = dmirror(I)
    x20 = sfilter(x19, x15)
    x21 = asobject(x20)
    x22 = hperiod(x21)
    x23 = astuple(x22, x18)
    x24 = lbind(multiply, x23)
    x25 = neighbors(ORIGIN)
    x26 = mapply(neighbors, x25)
    x27 = apply(x24, x26)
    x28 = lbind(shift, x13)
    x29 = mapply(x28, x27)
    O = paint(I, x29)
    return O


def solve_0e206a2e(I):
    x1 = objects(I, F, F, T)
    x2 = matcher(numcolors, FOUR)
    x3 = sfilter(x1, x2)
    x4 = apply(normalize, x3)
    x5 = merge(x3)
    x6 = cover(I, x5)
    x7 = lbind(compose, flip)
    x8 = lbind(matcher, first)
    x9 = chain(x7, x8, mostcolor)
    x10 = fork(sfilter, identity, x9)
    x11 = chain(invert, ulcorner, x10)
    x12 = lbind(lbind, shift)
    x13 = fork(shift, identity, x11)
    x14 = compose(x12, x13)
    x15 = lbind(fork, mapply)
    x16 = lbind(x15, x14)
    x17 = rbind(compose, x10)
    x18 = lbind(lbind, occurrences)
    x19 = chain(x16, x17, x18)
    x20 = rbind(mapply, x4)
    x21 = compose(x20, x19)
    x22 = fork(paint, identity, x21)
    x23 = chain(identity, x22, identity)
    x24 = chain(dmirror, x22, dmirror)
    x25 = chain(cmirror, x22, cmirror)
    x26 = chain(hmirror, x22, hmirror)
    x27 = chain(vmirror, x22, vmirror)
    x28 = chain(rot90, x22, rot270)
    x29 = chain(rot180, x22, rot180)
    x30 = chain(rot270, x22, rot90)
    x31 = chain(x30, x29, x28)
    x32 = chain(x27, x26, x25)
    x33 = compose(x24, x23)
    x34 = chain(x31, x32, x33)
    O = x34(x6)
    return O


def solve_10fcaaa3(I):
    x1 = hconcat(I, I)
    x2 = vconcat(x1, x1)
    x3 = asindices(x2)
    x4 = mostcolor(I)
    x5 = ofcolor(x2, x4)
    x6 = difference(x3, x5)
    x7 = mapply(ineighbors, x6)
    O = underfill(x2, EIGHT, x7)
    return O


def solve_11852cab(I):
    x1 = mostcolor(I)
    x2 = lbind(remove, x1)
    x3 = chain(positive, size, x2)
    x4 = compose(x3, palette)
    x5 = multiply(FIVE, UNITY)
    x6 = canvas(ZERO, x5)
    x7 = asindices(x6)
    x8 = fork(add, first, last)
    x9 = chain(flip, even, x8)
    x10 = sfilter(x7, x9)
    x11 = initset(x1)
    x12 = box(x7)
    x13 = inbox(x7)
    x14 = center(x7)
    x15 = initset(x14)
    x16 = lbind(toobject, x12)
    x17 = compose(x4, x16)
    x18 = lbind(toobject, x13)
    x19 = compose(x4, x18)
    x20 = lbind(toobject, x15)
    x21 = compose(x4, x20)
    x22 = fork(both, x19, x21)
    x23 = fork(both, x17, x22)
    x24 = compose(x23, trim)
    x25 = compose(box, asindices)
    x26 = fork(toobject, x25, identity)
    x27 = compose(palette, x26)
    x28 = matcher(x27, x11)
    x29 = lbind(toobject, x10)
    x30 = chain(palette, x29, trim)
    x31 = matcher(x30, x11)
    x32 = compose(minimum, shape)
    x33 = chain(x32, merge, fgpartition)
    x34 = matcher(x33, FIVE)
    x35 = fork(both, x24, x28)
    x36 = fork(both, x31, x34)
    x37 = fork(both, x35, x36)
    x38 = height(I)
    x39 = subtract(x38, THREE)
    x40 = interval(ONE, x39, ONE)
    x41 = width(I)
    x42 = subtract(x41, THREE)
    x43 = interval(ONE, x42, ONE)
    x44 = multiply(SEVEN, UNITY)
    x45 = lbind(crop, I)
    x46 = rbind(x45, x44)
    x47 = chain(x37, x46, decrement)
    x48 = product(x40, x43)
    x49 = sfilter(x48, x47)
    x50 = matcher(first, x1)
    x51 = compose(flip, x50)
    x52 = rbind(sfilter, x51)
    x53 = compose(x52, dmirror)
    x54 = fork(combine, x52, x53)
    x55 = compose(x52, cmirror)
    x56 = compose(x52, hmirror)
    x57 = compose(x52, vmirror)
    x58 = fork(combine, x56, x57)
    x59 = fork(combine, x55, x58)
    x60 = fork(combine, x54, x59)
    x61 = multiply(FOUR, UNITY)
    x62 = rbind(add, x61)
    x63 = fork(insert, x62, initset)
    x64 = compose(backdrop, x63)
    x65 = rbind(toobject, I)
    x66 = chain(x60, x65, x64)
    x67 = mapply(x66, x49)
    O = paint(I, x67)
    return O


def solve_1190e5a7(I):
    x1 = asindices(I)
    x2 = corners(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = palette(I)
    x6 = rbind(equality, x4)
    x7 = argmin(x5, x6)
    x8 = asindices(I)
    x9 = ofcolor(I, x4)
    x10 = difference(x8, x9)
    x11 = fill(I, x7, x10)
    x12 = frontiers(x11)
    x13 = sfilter(x12, vline)
    x14 = difference(x12, x13)
    x15 = astuple(x14, x13)
    x16 = apply(size, x15)
    x17 = increment(x16)
    O = canvas(x4, x17)
    return O


def solve_137eaa0f(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = palette(x2)
    x4 = objects(I, T, F, T)
    x5 = totuple(x4)
    x6 = apply(color, x5)
    x7 = lbind(sfilter, x6)
    x8 = lbind(matcher, identity)
    x9 = chain(size, x7, x8)
    x10 = valmax(x3, x9)
    x11 = matcher(x9, x10)
    x12 = sfilter(x3, x11)
    x13 = lbind(colorcount, I)
    x14 = argmin(x12, x13)
    x15 = ofcolor(I, x14)
    x16 = recolor(x14, x15)
    x17 = apply(initset, x16)
    x18 = remove(x16, x1)
    x19 = lbind(argmin, x17)
    x20 = lbind(rbind, manhattan)
    x21 = compose(x19, x20)
    x22 = fork(combine, identity, x21)
    x23 = apply(x22, x18)
    x24 = matcher(first, x14)
    x25 = rbind(sfilter, x24)
    x26 = chain(invert, ulcorner, x25)
    x27 = fork(shift, identity, x26)
    x28 = mapply(x27, x23)
    x29 = normalize(x28)
    x30 = shape(x29)
    x31 = canvas(ZERO, x30)
    O = paint(x31, x29)
    return O


def solve_150deff5(I):
    x1 = mostcolor(I)
    x2 = leastcolor(I)
    x3 = shape(I)
    x4 = add(TWO, x3)
    x5 = canvas(x1, x4)
    x6 = asobject(I)
    x7 = shift(x6, UNITY)
    x8 = paint(x5, x7)
    x9 = astuple(TWO, ONE)
    x10 = dneighbors(UNITY)
    x11 = remove(x9, x10)
    x12 = recolor(x1, x11)
    x13 = initset(UNITY)
    x14 = recolor(x2, x13)
    x15 = combine(x12, x14)
    x16 = astuple(THREE, ONE)
    x17 = connect(UNITY, x16)
    x18 = recolor(TWO, x17)
    x19 = initset(TWO_BY_TWO)
    x20 = insert(UNITY, x19)
    x21 = backdrop(x20)
    x22 = astuple(TWO, THREE)
    x23 = astuple(THREE, TWO)
    x24 = initset(x23)
    x25 = insert(x22, x24)
    x26 = insert(THREE_BY_THREE, x25)
    x27 = recolor(x2, x21)
    x28 = outbox(x21)
    x29 = difference(x28, x26)
    x30 = recolor(x1, x29)
    x31 = combine(x27, x30)
    x32 = recolor(EIGHT, x21)
    x33 = lbind(lbind, shift)
    x34 = compose(x33, last)
    x35 = lbind(fork, paint)
    x36 = lbind(x35, identity)
    x37 = lbind(lbind, mapply)
    x38 = compose(x37, x34)
    x39 = lbind(rbind, occurrences)
    x40 = compose(x39, first)
    x41 = fork(compose, x38, x40)
    x42 = compose(x36, x41)
    x43 = astuple(x15, x18)
    x44 = x42(x43)
    x45 = compose(rot90, x44)
    x46 = power(x45, FOUR)
    x47 = astuple(x31, x32)
    x48 = x42(x47)
    x49 = compose(rot90, x48)
    x50 = power(x49, FOUR)
    x51 = compose(x46, x50)
    x52 = initset(ORIGIN)
    x53 = difference(x52, x52)
    x54 = lbind(recolor, TWO)
    x55 = rbind(ofcolor, TWO)
    x56 = compose(x54, x55)
    x57 = lbind(recolor, EIGHT)
    x58 = rbind(ofcolor, EIGHT)
    x59 = compose(x57, x58)
    x60 = fork(combine, x56, x59)
    x61 = lbind(recolor, x1)
    x62 = compose(x61, x60)
    x63 = fork(paint, identity, x62)
    x64 = chain(x63, x51, first)
    x65 = chain(x60, x51, first)
    x66 = fork(combine, last, x65)
    x67 = fork(astuple, x64, x66)
    x68 = astuple(x8, x53)
    x69 = power(x67, FIVE)
    x70 = x69(x68)
    x71 = first(x70)
    x72 = last(x70)
    x73 = paint(x71, x72)
    O = trim(x73)
    return O


def solve_178fcbfb(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, THREE)
    x3 = ofcolor(I, ONE)
    x4 = mapply(vfrontier, x1)
    x5 = mapply(hfrontier, x2)
    x6 = mapply(hfrontier, x3)
    x7 = fill(I, TWO, x4)
    x8 = fill(x7, THREE, x5)
    O = fill(x8, ONE, x6)
    return O


def solve_1a07d186(I):
    x1 = frontiers(I)
    x2 = mostcolor(I)
    x3 = asindices(I)
    x4 = ofcolor(I, x2)
    x5 = difference(x3, x4)
    x6 = mapply(toindices, x1)
    x7 = difference(x5, x6)
    x8 = toobject(x7, I)
    x9 = apply(initset, x8)
    x10 = fill(I, x2, x7)
    x11 = lbind(fork, shift)
    x12 = lbind(x11, identity)
    x13 = lbind(rbind, gravitate)
    x14 = compose(x12, x13)
    x15 = lbind(colorfilter, x9)
    x16 = compose(x15, color)
    x17 = fork(mapply, x14, x16)
    x18 = mapply(x17, x1)
    O = paint(x10, x18)
    return O


def solve_1b2d62fb(I):
    x1 = width(I)
    x2 = halve(x1)
    x3 = tojvec(x2)
    x4 = height(I)
    x5 = decrement(x4)
    x6 = astuple(x5, x2)
    x7 = connect(x3, x6)
    x8 = toobject(x7, I)
    x9 = numcolors(x8)
    x10 = equality(x9, ONE)
    x11 = branch(x10, lefthalf, tophalf)
    x12 = branch(x10, righthalf, bottomhalf)
    x13 = x11(I)
    x14 = x12(I)
    x15 = shape(x13)
    x16 = canvas(ZERO, x15)
    x17 = ofcolor(x13, ZERO)
    x18 = ofcolor(x14, ZERO)
    x19 = intersection(x17, x18)
    O = fill(x16, EIGHT, x19)
    return O


def solve_1b60fb0c(I):
    x1 = fgpartition(I)
    x2 = mapply(toindices, x1)
    x3 = rot90(I)
    x4 = fgpartition(x3)
    x5 = mapply(toindices, x4)
    x6 = normalize(x5)
    x7 = ulcorner(x2)
    x8 = shift(x6, x7)
    x9 = shape(x2)
    x10 = maximum(x9)
    x11 = minimum(x9)
    x12 = subtract(x10, x11)
    x13 = increment(x12)
    x14 = power(outbox, x13)
    x15 = center(x8)
    x16 = x14(x8)
    x17 = backdrop(x16)
    x18 = invert(x15)
    x19 = shift(x17, x18)
    x20 = lbind(combine, x2)
    x21 = lbind(shift, x8)
    x22 = compose(x20, x21)
    x23 = rbind(ofcolor, ONE)
    x24 = lbind(canvas, ZERO)
    x25 = chain(x24, shape, x22)
    x26 = lbind(recolor, ONE)
    x27 = chain(x26, normalize, x22)
    x28 = fork(paint, x25, x27)
    x29 = chain(x23, rot90, x28)
    x30 = compose(normalize, x22)
    x31 = fork(equality, x30, x29)
    x32 = sfilter(x19, x31)
    x33 = lbind(intersection, x2)
    x34 = lbind(shift, x8)
    x35 = chain(size, x33, x34)
    x36 = argmax(x32, x35)
    x37 = shift(x8, x36)
    x38 = difference(x37, x2)
    O = fill(I, TWO, x38)
    return O


def solve_1bfc4729(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = leastcolor(x1)
    x4 = leastcolor(x2)
    x5 = ofcolor(I, x3)
    x6 = center(x5)
    x7 = ofcolor(I, x4)
    x8 = center(x7)
    x9 = height(I)
    x10 = width(I)
    x11 = hfrontier(x6)
    x12 = fill(I, x3, x11)
    x13 = hfrontier(x8)
    x14 = fill(x12, x4, x13)
    x15 = decrement(x10)
    x16 = decrement(x9)
    x17 = halve(x9)
    x18 = tojvec(x15)
    x19 = connect(ORIGIN, x18)
    x20 = fill(x14, x3, x19)
    x21 = toivec(x16)
    x22 = astuple(x16, x15)
    x23 = connect(x21, x22)
    x24 = fill(x20, x4, x23)
    x25 = decrement(x17)
    x26 = toivec(x25)
    x27 = connect(ORIGIN, x26)
    x28 = fill(x24, x3, x27)
    x29 = tojvec(x15)
    x30 = decrement(x17)
    x31 = astuple(x30, x15)
    x32 = connect(x29, x31)
    x33 = fill(x28, x3, x32)
    x34 = toivec(x17)
    x35 = toivec(x16)
    x36 = connect(x34, x35)
    x37 = fill(x33, x4, x36)
    x38 = astuple(x17, x15)
    x39 = astuple(x16, x15)
    x40 = connect(x38, x39)
    O = fill(x37, x4, x40)
    return O


def solve_1c786137(I):
    x1 = objects(I, T, F, F)
    x2 = lbind(colorfilter, x1)
    x3 = compose(size, x2)
    x4 = matcher(x3, ONE)
    x5 = palette(I)
    x6 = sfilter(x5, x4)
    x7 = fork(equality, toindices, box)
    x8 = rbind(contained, x6)
    x9 = compose(x8, color)
    x10 = sfilter(x1, x9)
    x11 = rbind(greater, SEVEN)
    x12 = compose(x11, size)
    x13 = sfilter(x10, x12)
    x14 = extract(x13, x7)
    x15 = subgrid(x14, I)
    O = trim(x15)
    return O


def solve_1caeab9d(I):
    x1 = objects(I, T, T, T)
    x2 = ofcolor(I, ONE)
    x3 = lowermost(x2)
    x4 = lbind(subtract, x3)
    x5 = chain(toivec, x4, lowermost)
    x6 = fork(shift, identity, x5)
    x7 = merge(x1)
    x8 = cover(I, x7)
    x9 = mapply(x6, x1)
    O = paint(x8, x9)
    return O


def solve_1cf80156(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = palette(I)
    x5 = other(x4, x3)
    x6 = objects(I, T, T, F)
    x7 = matcher(color, x5)
    x8 = extract(x6, x7)
    O = subgrid(x8, I)
    return O


def solve_1e0a9b12(I):
    x1 = mostcolor(I)
    x2 = rot270(I)
    x3 = matcher(identity, x1)
    x4 = rbind(sfilter, x3)
    x5 = compose(flip, x3)
    x6 = rbind(sfilter, x5)
    x7 = fork(combine, x4, x6)
    x8 = apply(x7, x2)
    O = rot90(x8)
    return O


def solve_1e32b0e9(I):
    x1 = frontiers(I)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = leastcommon(x3)
    x5 = matcher(color, x4)
    x6 = sfilter(x1, x5)
    x7 = merge(x6)
    x8 = color(x7)
    x9 = shape(I)
    x10 = canvas(x8, x9)
    x11 = hconcat(I, x10)
    x12 = objects(x11, F, T, T)
    x13 = first(x12)
    x14 = box(x13)
    x15 = rbind(contained, x14)
    x16 = compose(x15, last)
    x17 = sfilter(x13, x16)
    x18 = color(x17)
    x19 = palette(I)
    x20 = remove(x8, x19)
    x21 = other(x20, x18)
    x22 = rbind(colorcount, x18)
    x23 = argmin(x12, x22)
    x24 = apply(ulcorner, x12)
    x25 = normalize(x23)
    x26 = matcher(first, x21)
    x27 = sfilter(x25, x26)
    x28 = toindices(x27)
    x29 = lbind(shift, x28)
    x30 = mapply(x29, x24)
    x31 = ofcolor(I, x21)
    x32 = difference(x30, x31)
    O = fill(I, x8, x32)
    return O


def solve_1f0c79e5(I):
    x1 = objects(I, F, F, T)
    x2 = rbind(other, TWO)
    x3 = compose(x2, palette)
    x4 = matcher(first, TWO)
    x5 = rbind(sfilter, x4)
    x6 = compose(x5, normalize)
    x7 = lbind(apply, double)
    x8 = chain(x7, toindices, x6)
    x9 = rbind(add, NEG_ONE)
    x10 = lbind(apply, x9)
    x11 = compose(x10, x8)
    x12 = lbind(rbind, shoot)
    x13 = rbind(compose, x12)
    x14 = lbind(rbind, mapply)
    x15 = chain(x13, x14, toindices)
    x16 = fork(mapply, x15, x11)
    x17 = fork(recolor, x3, x16)
    x18 = mapply(x17, x1)
    O = paint(I, x18)
    return O


def solve_1f642eb9(I):
    x1 = objects(I, T, F, F)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = sfilter(x1, x3)
    x5 = argmax(x4, size)
    x6 = outbox(x5)
    x7 = corners(x6)
    x8 = toobject(x7, I)
    x9 = color(x8)
    x10 = asindices(I)
    x11 = ofcolor(I, x9)
    x12 = toindices(x5)
    x13 = combine(x11, x12)
    x14 = difference(x10, x13)
    x15 = toobject(x14, I)
    x16 = apply(initset, x15)
    x17 = rbind(gravitate, x5)
    x18 = compose(crement, x17)
    x19 = fork(shift, identity, x18)
    x20 = mapply(x19, x16)
    O = paint(I, x20)
    return O


def solve_1f85a75f(I):
    x1 = objects(I, T, F, T)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = lbind(sfilter, x3)
    x5 = lbind(matcher, identity)
    x6 = chain(size, x4, x5)
    x7 = matcher(x6, ONE)
    x8 = sfilter(x3, x7)
    x9 = lbind(colorcount, I)
    x10 = argmax(x8, x9)
    x11 = matcher(color, x10)
    x12 = extract(x1, x11)
    O = subgrid(x12, I)
    return O


def solve_1f876c06(I):
    x1 = fgpartition(I)
    x2 = compose(last, first)
    x3 = power(last, TWO)
    x4 = fork(connect, x2, x3)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x1)
    O = paint(I, x6)
    return O


def solve_1fad071e(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, ONE)
    x3 = sizefilter(x2, FOUR)
    x4 = fork(equality, height, width)
    x5 = sfilter(x3, x4)
    x6 = size(x5)
    x7 = subtract(FIVE, x6)
    x8 = astuple(ONE, x6)
    x9 = canvas(ONE, x8)
    x10 = astuple(ONE, x7)
    x11 = mostcolor(I)
    x12 = canvas(x11, x10)
    O = hconcat(x9, x12)
    return O


def solve_2013d3e2(I):
    x1 = lbind(apply, last)
    x2 = compose(positive, first)
    x3 = lbind(interval, ZERO)
    x4 = rbind(x3, ONE)
    x5 = rbind(sfilter, x2)
    x6 = compose(x4, size)
    x7 = fork(pair, x6, identity)
    x8 = chain(x1, x5, x7)
    x9 = rbind(branch, identity)
    x10 = rbind(x9, x8)
    x11 = chain(size, dedupe, first)
    x12 = lbind(equality, ONE)
    x13 = chain(x10, x12, x11)
    x14 = compose(initset, x13)
    x15 = fork(rapply, x14, identity)
    x16 = compose(first, x15)
    x17 = rbind(branch, identity)
    x18 = rbind(x17, x16)
    x19 = chain(x18, positive, size)
    x20 = compose(initset, x19)
    x21 = fork(rapply, x20, identity)
    x22 = compose(first, x21)
    x23 = multiply(TEN, THREE)
    x24 = power(x22, x23)
    x25 = compose(rot90, x24)
    x26 = power(x25, FOUR)
    x27 = x26(I)
    x28 = lefthalf(x27)
    O = tophalf(x28)
    return O


def solve_2204b7a8(I):
    x1 = first(I)
    x2 = dedupe(x1)
    x3 = size(x2)
    x4 = equality(x3, ONE)
    x5 = flip(x4)
    x6 = branch(x5, lefthalf, tophalf)
    x7 = branch(x5, righthalf, bottomhalf)
    x8 = branch(x5, hconcat, vconcat)
    x9 = x6(I)
    x10 = x7(I)
    x11 = index(x9, ORIGIN)
    x12 = shape(x10)
    x13 = decrement(x12)
    x14 = index(x10, x13)
    x15 = mostcolor(I)
    x16 = mostcolor(I)
    x17 = palette(I)
    x18 = remove(x11, x17)
    x19 = remove(x14, x18)
    x20 = remove(x16, x19)
    x21 = first(x20)
    x22 = replace(x9, x21, x11)
    x23 = branch(x5, dmirror, identity)
    x24 = branch(x5, height, width)
    x25 = x24(I)
    x26 = astuple(ONE, x25)
    x27 = canvas(x15, x26)
    x28 = x23(x27)
    x29 = replace(x10, x21, x14)
    x30 = x8(x22, x28)
    x31 = branch(x5, width, height)
    x32 = x31(I)
    x33 = even(x32)
    x34 = branch(x33, x22, x30)
    O = x8(x34, x29)
    return O


def solve_22168020(I):
    x1 = palette(I)
    x2 = mostcolor(I)
    x3 = remove(x2, x1)
    x4 = lbind(ofcolor, I)
    x5 = lbind(prapply, connect)
    x6 = fork(x5, x4, x4)
    x7 = compose(merge, x6)
    x8 = fork(recolor, identity, x7)
    x9 = mapply(x8, x3)
    O = paint(I, x9)
    return O


def solve_22233c11(I):
    x1 = objects(I, T, T, T)
    x2 = rbind(upscale, TWO)
    x3 = chain(invert, halve, shape)
    x4 = fork(combine, hfrontier, vfrontier)
    x5 = compose(x2, vmirror)
    x6 = fork(shift, x5, x3)
    x7 = compose(toindices, x6)
    x8 = lbind(mapply, x4)
    x9 = compose(x8, toindices)
    x10 = fork(difference, x7, x9)
    x11 = mapply(x10, x1)
    O = fill(I, EIGHT, x11)
    return O


def solve_2281f1f4(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = apply(first, x2)
    x4 = apply(last, x2)
    x5 = product(x3, x4)
    x6 = difference(x5, x2)
    x7 = fill(I, TWO, x6)
    x8 = lbind(fork, either)
    x9 = lbind(matcher, first)
    x10 = compose(x9, first)
    x11 = lbind(matcher, last)
    x12 = compose(x11, last)
    x13 = fork(x8, x10, x12)
    x14 = lbind(sfilter, x2)
    x15 = chain(size, x14, x13)
    x16 = asindices(I)
    x17 = corners(x16)
    x18 = argmax(x17, x15)
    x19 = mostcolor(I)
    x20 = initset(x18)
    O = fill(x7, x19, x20)
    return O


def solve_228f6490(I):
    x1 = mostcolor(I)
    x2 = objects(I, T, T, F)
    x3 = colorfilter(x2, x1)
    x4 = compose(normalize, toindices)
    x5 = difference(x2, x3)
    x6 = rbind(bordering, I)
    x7 = compose(flip, x6)
    x8 = sfilter(x3, x7)
    x9 = rbind(toobject, I)
    x10 = lbind(mapply, neighbors)
    x11 = compose(x10, toindices)
    x12 = fork(difference, x11, identity)
    x13 = chain(mostcolor, x9, x12)
    x14 = totuple(x8)
    x15 = apply(x13, x14)
    x16 = mostcommon(x15)
    x17 = matcher(x13, x16)
    x18 = sfilter(x8, x17)
    x19 = lbind(argmax, x5)
    x20 = lbind(matcher, x4)
    x21 = chain(x19, x20, x4)
    x22 = compose(color, x21)
    x23 = fork(recolor, x22, identity)
    x24 = mapply(x21, x18)
    x25 = cover(I, x24)
    x26 = mapply(x23, x18)
    O = paint(x25, x26)
    return O


def solve_22eb0ac0(I):
    x1 = mostcolor(I)
    x2 = asobject(I)
    x3 = matcher(first, x1)
    x4 = compose(flip, x3)
    x5 = sfilter(x2, x4)
    x6 = apply(initset, x5)
    x7 = product(x6, x6)
    x8 = compose(color, first)
    x9 = compose(color, last)
    x10 = fork(equality, x8, x9)
    x11 = sfilter(x7, x10)
    x12 = compose(leftmost, first)
    x13 = compose(leftmost, last)
    x14 = fork(equality, x12, x13)
    x15 = compose(uppermost, first)
    x16 = compose(uppermost, last)
    x17 = fork(equality, x15, x16)
    x18 = fork(either, x14, x17)
    x19 = sfilter(x11, x18)
    x20 = compose(color, first)
    x21 = compose(center, first)
    x22 = compose(center, last)
    x23 = fork(connect, x21, x22)
    x24 = fork(recolor, x20, x23)
    x25 = height(I)
    x26 = width(I)
    x27 = matcher(last, ZERO)
    x28 = decrement(x26)
    x29 = matcher(last, x28)
    x30 = fork(either, x27, x29)
    x31 = matcher(first, ZERO)
    x32 = decrement(x25)
    x33 = matcher(first, x32)
    x34 = fork(either, x31, x33)
    x35 = toindices(x5)
    x36 = sfilter(x35, x30)
    x37 = equality(x35, x36)
    x38 = mapply(x24, x19)
    x39 = paint(I, x38)
    x40 = branch(x37, x30, x34)
    x41 = asindices(I)
    x42 = sfilter(x41, x40)
    x43 = toobject(x42, I)
    O = paint(x39, x43)
    return O


def solve_234bbc79(I):
    x1 = objects(I, F, F, T)
    x2 = order(x1, leftmost)
    x3 = astuple(ONE, TWO)
    x4 = rbind(contained, x3)
    x5 = lbind(compose, x4)
    x6 = lbind(rbind, colorcount)
    x7 = compose(x5, x6)
    x8 = lbind(sfilter, x1)
    x9 = chain(size, x8, x7)
    x10 = size(x1)
    x11 = matcher(x9, x10)
    x12 = palette(I)
    x13 = sfilter(x12, x11)
    x14 = lbind(colorcount, I)
    x15 = argmin(x13, x14)
    x16 = matcher(first, x15)
    x17 = rbind(extract, x16)
    x18 = compose(x17, first)
    x19 = fork(remove, x18, first)
    x20 = rbind(compose, initset)
    x21 = lbind(rbind, manhattan)
    x22 = compose(initset, x18)
    x23 = chain(x20, x21, x22)
    x24 = fork(argmin, x19, x23)
    x25 = compose(last, x18)
    x26 = compose(first, x24)
    x27 = fork(astuple, x26, x25)
    x28 = fork(insert, x27, x19)
    x29 = compose(last, last)
    x30 = rbind(argmin, x29)
    x31 = rbind(sfilter, x16)
    x32 = compose(first, last)
    x33 = chain(x30, x31, x32)
    x34 = compose(flip, x16)
    x35 = rbind(sfilter, x34)
    x36 = compose(first, last)
    x37 = fork(remove, x33, x36)
    x38 = compose(x35, x37)
    x39 = rbind(compose, initset)
    x40 = lbind(rbind, manhattan)
    x41 = compose(initset, x33)
    x42 = chain(x39, x40, x41)
    x43 = fork(argmin, x38, x42)
    x44 = compose(first, x43)
    x45 = compose(last, x33)
    x46 = fork(astuple, x44, x45)
    x47 = compose(first, last)
    x48 = fork(remove, x33, x47)
    x49 = fork(insert, x46, x48)
    x50 = rbind(shift, RIGHT)
    x51 = compose(last, x33)
    x52 = fork(subtract, x25, x51)
    x53 = fork(shift, x49, x52)
    x54 = compose(x50, x53)
    x55 = fork(combine, x28, x54)
    x56 = compose(first, last)
    x57 = fork(remove, x56, last)
    x58 = fork(astuple, x55, x57)
    x59 = size(x1)
    x60 = decrement(x59)
    x61 = power(x58, x60)
    x62 = first(x2)
    x63 = remove(x62, x2)
    x64 = astuple(x62, x63)
    x65 = x61(x64)
    x66 = first(x65)
    x67 = merge(x1)
    x68 = cover(I, x67)
    x69 = paint(x68, x66)
    x70 = height(I)
    x71 = width(x66)
    x72 = astuple(x70, x71)
    x73 = crop(x69, ORIGIN, x72)
    x74 = ofcolor(x73, x15)
    x75 = mostcolor(I)
    x76 = palette(x73)
    x77 = contained(x15, x76)
    x78 = matcher(first, x75)
    x79 = compose(flip, x78)
    x80 = rbind(sfilter, x79)
    x81 = mapply(dneighbors, x74)
    x82 = lbind(toobject, x81)
    x83 = compose(x80, x82)
    x84 = rbind(recolor, x74)
    x85 = chain(x84, mostcolor, x83)
    x86 = fork(paint, identity, x85)
    x87 = branch(x77, x86, identity)
    O = x87(x73)
    return O


def solve_23581191(I):
    x1 = mostcolor(I)
    x2 = palette(I)
    x3 = remove(x1, x2)
    x4 = totuple(x3)
    x5 = fork(combine, hfrontier, vfrontier)
    x6 = lbind(mapply, x5)
    x7 = lbind(ofcolor, I)
    x8 = compose(x6, x7)
    x9 = first(x4)
    x10 = last(x4)
    x11 = x8(x9)
    x12 = x8(x10)
    x13 = ofcolor(I, x1)
    x14 = intersection(x13, x11)
    x15 = intersection(x13, x12)
    x16 = intersection(x11, x12)
    x17 = intersection(x13, x16)
    x18 = fill(I, x9, x14)
    x19 = fill(x18, x10, x15)
    O = fill(x19, TWO, x17)
    return O


def solve_239be575(I):
    x1 = objects(I, T, F, F)
    x2 = lbind(apply, normalize)
    x3 = lbind(colorfilter, x1)
    x4 = chain(size, x2, x3)
    x5 = matcher(x4, ONE)
    x6 = lbind(colorcount, I)
    x7 = matcher(x6, EIGHT)
    x8 = lbind(colorfilter, x1)
    x9 = compose(size, x8)
    x10 = matcher(x9, TWO)
    x11 = fork(both, x7, x10)
    x12 = fork(both, x11, x5)
    x13 = palette(I)
    x14 = extract(x13, x12)
    x15 = colorfilter(x1, x14)
    x16 = totuple(x15)
    x17 = first(x16)
    x18 = last(x16)
    x19 = palette(I)
    x20 = remove(ZERO, x19)
    x21 = remove(x14, x20)
    x22 = first(x21)
    x23 = colorfilter(x1, x22)
    x24 = rbind(adjacent, x17)
    x25 = rbind(adjacent, x18)
    x26 = fork(both, x24, x25)
    x27 = sfilter(x23, x26)
    x28 = size(x27)
    x29 = positive(x28)
    x30 = branch(x29, x22, ZERO)
    O = canvas(x30, UNITY)
    return O


def solve_23b5c85d(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = sfilter(x1, x3)
    x5 = argmin(x4, x2)
    O = subgrid(x5, I)
    return O


def solve_253bf280(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, size)
    x6 = sfilter(x3, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    x9 = fill(I, THREE, x8)
    x10 = leastcolor(I)
    O = fill(x9, x10, x2)
    return O


def solve_25d487eb(I):
    x1 = objects(I, F, F, T)
    x2 = lbind(matcher, first)
    x3 = compose(x2, leastcolor)
    x4 = lbind(matcher, first)
    x5 = compose(x4, mostcolor)
    x6 = fork(extract, identity, x3)
    x7 = compose(last, x6)
    x8 = compose(dneighbors, x7)
    x9 = lbind(apply, last)
    x10 = fork(sfilter, identity, x5)
    x11 = compose(x9, x10)
    x12 = fork(difference, x8, x11)
    x13 = compose(first, x12)
    x14 = fork(subtract, x7, x13)
    x15 = fork(shoot, x7, x14)
    x16 = fork(recolor, leastcolor, x15)
    x17 = mapply(x16, x1)
    O = underpaint(I, x17)
    return O


def solve_25d8a9c8(I):
    x1 = width(I)
    x2 = rbind(branch, ZERO)
    x3 = rbind(x2, FIVE)
    x4 = compose(size, dedupe)
    x5 = matcher(x4, ONE)
    x6 = compose(x3, x5)
    x7 = rbind(repeat, x1)
    x8 = compose(x7, x6)
    O = apply(x8, I)
    return O


def solve_25ff71a9(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    O = move(I, x2, DOWN)
    return O


def solve_264363fd(I):
    x1 = objects(I, T, F, F)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = mostcolor(x3)
    x5 = shape(I)
    x6 = canvas(x4, x5)
    x7 = hconcat(I, x6)
    x8 = objects(x7, F, F, T)
    x9 = argmin(x8, size)
    x10 = cover(I, x9)
    x11 = normalize(x9)
    x12 = remove(x9, x8)
    x13 = toindices(x11)
    x14 = lbind(intersection, x13)
    x15 = chain(x14, dneighbors, last)
    x16 = rbind(greater, ONE)
    x17 = chain(x16, size, x15)
    x18 = sfilter(x11, x17)
    x19 = center(x18)
    x20 = matcher(last, x19)
    x21 = extract(x18, x20)
    x22 = first(x21)
    x23 = difference(x11, x18)
    x24 = color(x23)
    x25 = center(x18)
    x26 = invert(x25)
    x27 = shift(x11, x26)
    x28 = invert(x25)
    x29 = shift(x23, x28)
    x30 = toindices(x29)
    x31 = rbind(mapply, x30)
    x32 = lbind(lbind, shoot)
    x33 = compose(x31, x32)
    x34 = power(outbox, TWO)
    x35 = chain(backdrop, x34, initset)
    x36 = fork(difference, x33, x35)
    x37 = lbind(recolor, x24)
    x38 = compose(x37, x36)
    x39 = lbind(shift, x27)
    x40 = fork(combine, x38, x39)
    x41 = lbind(mapply, x40)
    x42 = rbind(ofcolor, x22)
    x43 = compose(x41, x42)
    x44 = fork(paint, identity, x43)
    x45 = rbind(subgrid, I)
    x46 = chain(asobject, x44, x45)
    x47 = fork(shift, x46, ulcorner)
    x48 = mapply(x47, x12)
    O = paint(x10, x48)
    return O


def solve_272f95fa(I):
    x1 = objects(I, T, F, F)
    x2 = index(I, ORIGIN)
    x3 = colorfilter(x1, x2)
    x4 = apply(toindices, x3)
    x5 = rbind(bordering, I)
    x6 = compose(flip, x5)
    x7 = extract(x4, x6)
    x8 = remove(x7, x4)
    x9 = lbind(vmatching, x7)
    x10 = lbind(hmatching, x7)
    x11 = sfilter(x8, x9)
    x12 = sfilter(x8, x10)
    x13 = argmin(x11, uppermost)
    x14 = argmax(x11, uppermost)
    x15 = argmin(x12, leftmost)
    x16 = argmax(x12, leftmost)
    x17 = fill(I, SIX, x7)
    x18 = fill(x17, TWO, x13)
    x19 = fill(x18, ONE, x14)
    x20 = fill(x19, FOUR, x15)
    O = fill(x20, THREE, x16)
    return O


def solve_27a28665(I):
    x1 = lbind(apply, last)
    x2 = compose(positive, first)
    x3 = lbind(interval, ZERO)
    x4 = rbind(x3, ONE)
    x5 = rbind(sfilter, x2)
    x6 = compose(x4, size)
    x7 = fork(pair, x6, identity)
    x8 = chain(x1, x5, x7)
    x9 = rbind(branch, identity)
    x10 = rbind(x9, x8)
    x11 = chain(size, dedupe, first)
    x12 = lbind(equality, ONE)
    x13 = chain(x10, x12, x11)
    x14 = compose(initset, x13)
    x15 = fork(rapply, x14, identity)
    x16 = compose(first, x15)
    x17 = rbind(branch, identity)
    x18 = rbind(x17, x16)
    x19 = chain(x18, positive, size)
    x20 = compose(initset, x19)
    x21 = fork(rapply, x20, identity)
    x22 = compose(first, x21)
    x23 = multiply(TEN, THREE)
    x24 = power(x22, x23)
    x25 = compose(rot90, x24)
    x26 = power(x25, FOUR)
    x27 = x26(I)
    x28 = width(x27)
    x29 = divide(x28, THREE)
    x30 = downscale(x27, x29)
    x31 = objects(x30, T, F, F)
    x32 = valmax(x31, size)
    x33 = equality(x32, ONE)
    x34 = equality(x32, FOUR)
    x35 = equality(x32, FIVE)
    x36 = branch(x33, TWO, ONE)
    x37 = branch(x34, THREE, x36)
    x38 = branch(x35, SIX, x37)
    O = canvas(x38, UNITY)
    return O


def solve_28bf18c6(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    O = hconcat(x3, x3)
    return O


def solve_28e73c20(I):
    x1 = astuple(RIGHT, DOWN)
    x2 = astuple(DOWN, LEFT)
    x3 = astuple(x1, x2)
    x4 = astuple(LEFT, UP)
    x5 = astuple(UP, RIGHT)
    x6 = astuple(x4, x5)
    x7 = combine(x3, x6)
    x8 = height(I)
    x9 = astuple(x8, ONE)
    x10 = canvas(THREE, x9)
    x11 = hconcat(x10, I)
    x12 = height(x11)
    x13 = width(x11)
    x14 = decrement(x13)
    x15 = tojvec(x14)
    x16 = identity(DOWN)
    x17 = connect(ORIGIN, x15)
    x18 = fill(x11, THREE, x17)
    x19 = identity(x13)
    x20 = identity(x12)
    x21 = identity(x12)
    x22 = identity(F)
    x23 = identity(ZERO)
    x24 = compose(first, first)
    x25 = chain(first, last, x24)
    x26 = compose(first, first)
    x27 = chain(last, last, x26)
    x28 = chain(first, first, first)
    x29 = chain(first, last, last)
    x30 = chain(first, first, last)
    x31 = chain(last, first, last)
    x32 = compose(decrement, x25)
    x33 = compose(decrement, x27)
    x34 = fork(astuple, x32, x33)
    x35 = compose(decrement, x27)
    x36 = fork(multiply, x30, x35)
    x37 = fork(add, x29, x36)
    x38 = compose(decrement, x28)
    x39 = fork(multiply, x30, x38)
    x40 = fork(add, x29, x39)
    x41 = fork(astuple, x40, x37)
    x42 = lbind(extract, x7)
    x43 = lbind(matcher, first)
    x44 = compose(x43, x30)
    x45 = chain(last, x42, x44)
    x46 = compose(last, first)
    x47 = lbind(recolor, THREE)
    x48 = compose(decrement, x28)
    x49 = fork(multiply, x30, x48)
    x50 = fork(add, x29, x49)
    x51 = fork(connect, x29, x50)
    x52 = compose(x47, x51)
    x53 = fork(paint, x46, x52)
    x54 = compose(decrement, x27)
    x55 = fork(multiply, x31, x54)
    x56 = compose(flip, x31)
    x57 = compose(decrement, x25)
    x58 = fork(multiply, x56, x57)
    x59 = fork(add, x55, x58)
    x60 = power(first, THREE)
    x61 = chain(flip, positive, x60)
    x62 = fork(astuple, x59, x34)
    x63 = compose(flip, x31)
    x64 = fork(astuple, x45, x63)
    x65 = fork(astuple, x62, x53)
    x66 = fork(astuple, x64, x41)
    x67 = fork(astuple, x65, x66)
    x68 = rbind(branch, x67)
    x69 = rbind(x68, identity)
    x70 = chain(initset, x69, x61)
    x71 = fork(rapply, x70, identity)
    x72 = compose(first, x71)
    x73 = multiply(TEN, THREE)
    x74 = power(x72, x73)
    x75 = astuple(x19, x20)
    x76 = astuple(x16, x22)
    x77 = astuple(x15, x23)
    x78 = astuple(x21, x75)
    x79 = astuple(x76, x77)
    x80 = astuple(x78, x18)
    x81 = astuple(x80, x79)
    x82 = x74(x81)
    x83 = first(x82)
    x84 = last(x83)
    x85 = dmirror(x84)
    x86 = shape(x85)
    x87 = add(x86, UP)
    x88 = crop(x85, DOWN, x87)
    O = dmirror(x88)
    return O


def solve_29623171(I):
    x1 = compress(I)
    x2 = leastcolor(x1)
    x3 = mostcolor(x1)
    x4 = frontiers(I)
    x5 = sfilter(x4, hline)
    x6 = size(x5)
    x7 = increment(x6)
    x8 = sfilter(x4, vline)
    x9 = size(x8)
    x10 = increment(x9)
    x11 = height(I)
    x12 = decrement(x7)
    x13 = subtract(x11, x12)
    x14 = divide(x13, x7)
    x15 = width(I)
    x16 = decrement(x10)
    x17 = subtract(x15, x16)
    x18 = divide(x17, x10)
    x19 = astuple(x14, x18)
    x20 = canvas(ZERO, x19)
    x21 = asindices(x20)
    x22 = astuple(x7, x10)
    x23 = canvas(ZERO, x22)
    x24 = asindices(x23)
    x25 = astuple(x14, x18)
    x26 = increment(x25)
    x27 = rbind(multiply, x26)
    x28 = apply(x27, x24)
    x29 = rbind(toobject, I)
    x30 = lbind(shift, x21)
    x31 = compose(x29, x30)
    x32 = apply(x31, x28)
    x33 = rbind(colorcount, x2)
    x34 = valmax(x32, x33)
    x35 = rbind(colorcount, x2)
    x36 = matcher(x35, x34)
    x37 = mfilter(x32, x36)
    x38 = replace(I, x2, x3)
    O = fill(x38, x2, x37)
    return O


def solve_29c11459(I):
    x1 = objects(I, T, F, T)
    x2 = product(x1, x1)
    x3 = fork(hmatching, first, last)
    x4 = fork(vmatching, first, last)
    x5 = fork(either, x3, x4)
    x6 = sfilter(x2, x5)
    x7 = mostcolor(I)
    x8 = rbind(toobject, I)
    x9 = compose(delta, merge)
    x10 = chain(palette, x8, x9)
    x11 = initset(x7)
    x12 = matcher(x10, x11)
    x13 = sfilter(x6, x12)
    x14 = shape(I)
    x15 = subtract(x14, TWO_BY_ZERO)
    x16 = crop(I, DOWN, x15)
    x17 = numcolors(x16)
    x18 = equality(ONE, x17)
    x19 = branch(x18, vline, hline)
    x20 = compose(center, first)
    x21 = compose(center, last)
    x22 = fork(add, x20, x21)
    x23 = compose(halve, x22)
    x24 = compose(color, first)
    x25 = compose(color, last)
    x26 = fork(connect, x20, x23)
    x27 = fork(remove, x23, x26)
    x28 = fork(recolor, x24, x27)
    x29 = fork(connect, x21, x23)
    x30 = fork(remove, x23, x29)
    x31 = fork(recolor, x25, x30)
    x32 = lbind(recolor, FIVE)
    x33 = chain(x32, initset, x23)
    x34 = fork(combine, x28, x31)
    x35 = fork(combine, x34, x33)
    x36 = apply(x35, x13)
    x37 = mfilter(x36, x19)
    x38 = paint(I, x37)
    x39 = merge(x1)
    O = paint(x38, x39)
    return O


def solve_29ec7d0e(I):
    x1 = palette(I)
    x2 = objects(I, T, F, F)
    x3 = lbind(colorfilter, x2)
    x4 = compose(size, x3)
    x5 = valmin(x1, x4)
    x6 = matcher(x4, x5)
    x7 = sfilter(x1, x6)
    x8 = lbind(colorcount, I)
    x9 = argmin(x7, x8)
    x10 = asobject(I)
    x11 = matcher(first, x9)
    x12 = compose(flip, x11)
    x13 = sfilter(x10, x12)
    x14 = lbind(contained, x9)
    x15 = compose(flip, x14)
    x16 = sfilter(I, x15)
    x17 = asobject(x16)
    x18 = hperiod(x17)
    x19 = dmirror(I)
    x20 = sfilter(x19, x15)
    x21 = asobject(x20)
    x22 = hperiod(x21)
    x23 = astuple(x22, x18)
    x24 = lbind(multiply, x23)
    x25 = neighbors(ORIGIN)
    x26 = mapply(neighbors, x25)
    x27 = apply(x24, x26)
    x28 = lbind(shift, x13)
    x29 = mapply(x28, x27)
    O = paint(I, x29)
    return O


def solve_2bcee788(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = remove(x3, x1)
    x5 = argmin(x4, size)
    x6 = argmax(x4, size)
    x7 = hmatching(x5, x6)
    x8 = branch(x7, vmirror, hmirror)
    x9 = x8(x6)
    x10 = branch(x7, leftmost, uppermost)
    x11 = branch(x7, tojvec, toivec)
    x12 = x10(x5)
    x13 = x10(x6)
    x14 = greater(x12, x13)
    x15 = double(x14)
    x16 = decrement(x15)
    x17 = x11(x16)
    x18 = shape(x6)
    x19 = multiply(x17, x18)
    x20 = shift(x9, x19)
    x21 = fill(I, THREE, x3)
    O = paint(x21, x20)
    return O


def solve_2bee17df(I):
    x1 = trim(I)
    x2 = mostcolor(x1)
    x3 = repeat(x2, ONE)
    x4 = lbind(repeat, THREE)
    x5 = compose(x4, size)
    x6 = matcher(dedupe, x3)
    x7 = rbind(branch, identity)
    x8 = rbind(x7, x5)
    x9 = compose(x8, x6)
    x10 = compose(initset, x9)
    x11 = fork(rapply, x10, identity)
    x12 = compose(first, x11)
    x13 = apply(x12, x1)
    x14 = dmirror(x1)
    x15 = apply(x12, x14)
    x16 = dmirror(x15)
    x17 = ofcolor(x13, THREE)
    x18 = ofcolor(x16, THREE)
    x19 = combine(x17, x18)
    x20 = shift(x19, UNITY)
    O = fill(I, THREE, x20)
    return O


def solve_2c608aff(I):
    x1 = partition(I)
    x2 = fork(equality, toindices, backdrop)
    x3 = sfilter(x1, x2)
    x4 = argmax(x3, size)
    x5 = color(x4)
    x6 = palette(I)
    x7 = remove(x5, x6)
    x8 = lbind(colorcount, I)
    x9 = argmin(x7, x8)
    x10 = toindices(x4)
    x11 = apply(first, x10)
    x12 = toindices(x4)
    x13 = apply(last, x12)
    x14 = rbind(contained, x11)
    x15 = compose(x14, first)
    x16 = rbind(contained, x13)
    x17 = compose(x16, last)
    x18 = fork(either, x15, x17)
    x19 = ofcolor(I, x9)
    x20 = sfilter(x19, x18)
    x21 = rbind(gravitate, x4)
    x22 = compose(x21, initset)
    x23 = fork(add, identity, x22)
    x24 = fork(connect, identity, x23)
    x25 = mapply(x24, x20)
    O = fill(I, x9, x25)
    return O


def solve_2dc579da(I):
    x1 = frontiers(I)
    x2 = mfilter(x1, hline)
    x3 = mfilter(x1, vline)
    x4 = uppermost(x2)
    x5 = leftmost(x3)
    x6 = astuple(x4, x5)
    x7 = add(x6, NEG_UNITY)
    x8 = uppermost(x2)
    x9 = rightmost(x3)
    x10 = astuple(x8, x9)
    x11 = add(x10, UP_RIGHT)
    x12 = lowermost(x2)
    x13 = leftmost(x3)
    x14 = astuple(x12, x13)
    x15 = add(x14, DOWN_LEFT)
    x16 = lowermost(x2)
    x17 = rightmost(x3)
    x18 = astuple(x16, x17)
    x19 = add(x18, UNITY)
    x20 = initset(ORIGIN)
    x21 = insert(x7, x20)
    x22 = width(I)
    x23 = decrement(x22)
    x24 = tojvec(x23)
    x25 = initset(x24)
    x26 = insert(x11, x25)
    x27 = height(I)
    x28 = decrement(x27)
    x29 = toivec(x28)
    x30 = initset(x29)
    x31 = insert(x15, x30)
    x32 = shape(I)
    x33 = decrement(x32)
    x34 = initset(x33)
    x35 = insert(x19, x34)
    x36 = astuple(x21, x26)
    x37 = astuple(x31, x35)
    x38 = combine(x36, x37)
    x39 = rbind(toobject, I)
    x40 = compose(x39, backdrop)
    x41 = apply(x40, x38)
    x42 = matcher(numcolors, ONE)
    x43 = sfilter(x41, x42)
    x44 = apply(color, x43)
    x45 = mostcommon(x44)
    x46 = initset(x45)
    x47 = matcher(palette, x46)
    x48 = compose(flip, x47)
    x49 = extract(x41, x48)
    O = subgrid(x49, I)
    return O


def solve_2dd70a9a(I):
    x1 = ofcolor(I, TWO)
    x2 = vline(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(I)
    x5 = ofcolor(x4, THREE)
    x6 = ofcolor(x4, TWO)
    x7 = center(x5)
    x8 = hfrontier(x7)
    x9 = center(x6)
    x10 = hfrontier(x9)
    x11 = mostcolor(I)
    x12 = palette(I)
    x13 = remove(THREE, x12)
    x14 = remove(TWO, x13)
    x15 = other(x14, x11)
    x16 = replace(x4, THREE, x11)
    x17 = difference(x8, x5)
    x18 = underfill(x16, THREE, x17)
    x19 = replace(x4, TWO, x11)
    x20 = difference(x10, x6)
    x21 = underfill(x19, TWO, x20)
    x22 = objects(x18, T, F, F)
    x23 = colorfilter(x22, THREE)
    x24 = rbind(adjacent, x5)
    x25 = sfilter(x23, x24)
    x26 = objects(x21, T, F, F)
    x27 = colorfilter(x26, TWO)
    x28 = rbind(adjacent, x6)
    x29 = sfilter(x27, x28)
    x30 = mapply(toindices, x25)
    x31 = rbind(equality, x15)
    x32 = lbind(index, x4)
    x33 = compose(x31, x32)
    x34 = rbind(add, LEFT)
    x35 = compose(x33, x34)
    x36 = rbind(add, RIGHT)
    x37 = compose(x33, x36)
    x38 = fork(either, x35, x37)
    x39 = rbind(add, UP)
    x40 = compose(x33, x39)
    x41 = rbind(add, DOWN)
    x42 = compose(x33, x41)
    x43 = fork(either, x40, x42)
    x44 = sfilter(x30, x38)
    x45 = mapply(toindices, x29)
    x46 = sfilter(x45, x43)
    x47 = fork(connect, first, last)
    x48 = product(x44, x46)
    x49 = compose(vline, x47)
    x50 = rbind(toobject, x4)
    x51 = chain(numcolors, x50, x47)
    x52 = matcher(x51, ONE)
    x53 = fork(both, x49, x52)
    x54 = extract(x48, x53)
    x55 = x47(x54)
    x56 = center(x5)
    x57 = center(x6)
    x58 = fork(either, hline, vline)
    x59 = lbind(connect, x56)
    x60 = corners(x55)
    x61 = apply(x59, x60)
    x62 = mfilter(x61, x58)
    x63 = lbind(connect, x57)
    x64 = corners(x55)
    x65 = apply(x63, x64)
    x66 = mfilter(x65, x58)
    x67 = combine(x62, x66)
    x68 = combine(x55, x67)
    x69 = fill(x4, THREE, x68)
    x70 = fill(x69, TWO, x6)
    O = x3(x70)
    return O


def solve_2dee498d(I):
    x1 = hsplit(I, THREE)
    O = first(x1)
    return O


def solve_31aa019c(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = first(x2)
    x4 = neighbors(x3)
    x5 = mostcolor(I)
    x6 = shape(I)
    x7 = canvas(x5, x6)
    x8 = initset(x3)
    x9 = fill(x7, x1, x8)
    O = fill(x9, TWO, x4)
    return O


def solve_321b1fc6(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, numcolors)
    x3 = remove(x2, x1)
    x4 = normalize(x2)
    x5 = apply(ulcorner, x3)
    x6 = lbind(shift, x4)
    x7 = mapply(x6, x5)
    x8 = paint(I, x7)
    O = cover(x8, x2)
    return O


def solve_32597951(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmin(x1, x2)
    x4 = delta(x3)
    O = fill(I, THREE, x4)
    return O


def solve_3345333e(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = partition(I)
    x6 = fork(multiply, height, width)
    x7 = fork(equality, size, x6)
    x8 = extract(x5, x7)
    x9 = color(x8)
    x10 = palette(I)
    x11 = remove(x4, x10)
    x12 = other(x11, x9)
    x13 = ofcolor(I, x12)
    x14 = vmirror(x13)
    x15 = hmirror(x13)
    x16 = toindices(x8)
    x17 = combine(x16, x13)
    x18 = height(x17)
    x19 = halve(x18)
    x20 = increment(x19)
    x21 = width(x17)
    x22 = halve(x21)
    x23 = increment(x22)
    x24 = astuple(x20, x23)
    x25 = maximum(x24)
    x26 = invert(x25)
    x27 = increment(x25)
    x28 = interval(x26, x27, ONE)
    x29 = product(x28, x28)
    x30 = initset(x15)
    x31 = insert(x14, x30)
    x32 = product(x29, x31)
    x33 = ofcolor(I, x4)
    x34 = rbind(intersection, x33)
    x35 = fork(shift, last, first)
    x36 = chain(size, x34, x35)
    x37 = matcher(x36, ZERO)
    x38 = sfilter(x32, x37)
    x39 = rbind(intersection, x13)
    x40 = fork(shift, last, first)
    x41 = chain(size, x39, x40)
    x42 = argmax(x38, x41)
    x43 = first(x42)
    x44 = last(x42)
    x45 = fill(I, x4, x8)
    x46 = shift(x44, x43)
    O = fill(x45, x12, x46)
    return O


def solve_3428a4f5(I):
    x1 = width(I)
    x2 = halve(x1)
    x3 = tojvec(x2)
    x4 = height(I)
    x5 = decrement(x4)
    x6 = astuple(x5, x2)
    x7 = connect(x3, x6)
    x8 = toobject(x7, I)
    x9 = numcolors(x8)
    x10 = equality(x9, ONE)
    x11 = branch(x10, lefthalf, tophalf)
    x12 = branch(x10, righthalf, bottomhalf)
    x13 = x11(I)
    x14 = x12(I)
    x15 = palette(x13)
    x16 = other(x15, ZERO)
    x17 = palette(x14)
    x18 = other(x17, ZERO)
    x19 = shape(x13)
    x20 = canvas(ZERO, x19)
    x21 = ofcolor(x13, x16)
    x22 = ofcolor(x14, x18)
    x23 = combine(x21, x22)
    x24 = intersection(x21, x22)
    x25 = difference(x23, x24)
    O = fill(x20, THREE, x25)
    return O


def solve_3618c87e(I):
    x1 = mostcolor(I)
    x2 = objects(I, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = totuple(x3)
    x5 = apply(color, x4)
    x6 = mostcommon(x5)
    x7 = palette(I)
    x8 = remove(x6, x7)
    x9 = other(x8, x1)
    x10 = replace(I, x6, x1)
    x11 = ofcolor(I, x6)
    x12 = repeat(x9, ONE)
    x13 = rbind(equality, x12)
    x14 = first(I)
    x15 = dedupe(x14)
    x16 = x13(x15)
    x17 = last(I)
    x18 = dedupe(x17)
    x19 = x13(x18)
    x20 = dmirror(I)
    x21 = first(x20)
    x22 = dedupe(x21)
    x23 = x13(x22)
    x24 = dmirror(I)
    x25 = last(x24)
    x26 = dedupe(x25)
    x27 = x13(x26)
    x28 = apply(last, x11)
    x29 = apply(first, x11)
    x30 = either(x16, x19)
    x31 = branch(x30, x28, x29)
    x32 = branch(x30, lbind, rbind)
    x33 = lbind(x32, astuple)
    x34 = branch(x30, height, width)
    x35 = x34(I)
    x36 = decrement(x35)
    x37 = either(x16, x23)
    x38 = branch(x37, ZERO, x36)
    x39 = x33(x38)
    x40 = apply(x39, x31)
    O = fill(x10, x6, x40)
    return O


def solve_3631a71a(I):
    x1 = lbind(compose, flip)
    x2 = lbind(matcher, first)
    x3 = compose(x1, x2)
    x4 = rbind(compose, asobject)
    x5 = lbind(rbind, sfilter)
    x6 = chain(x4, x5, x3)
    x7 = rbind(shift, ORIGIN)
    x8 = compose(x7, dmirror)
    x9 = rbind(shift, TWO_BY_TWO)
    x10 = compose(x9, cmirror)
    x11 = rbind(shift, TWO_BY_ZERO)
    x12 = compose(x11, hmirror)
    x13 = rbind(shift, ZERO_BY_TWO)
    x14 = compose(x13, vmirror)
    x15 = lbind(fork, paint)
    x16 = lbind(x15, identity)
    x17 = lbind(compose, x8)
    x18 = chain(x16, x17, x6)
    x19 = lbind(compose, x10)
    x20 = chain(x16, x19, x6)
    x21 = lbind(compose, x12)
    x22 = chain(x16, x21, x6)
    x23 = lbind(compose, x14)
    x24 = chain(x16, x23, x6)
    x25 = rbind(rapply, I)
    x26 = chain(first, x25, initset)
    x27 = fork(compose, x24, x22)
    x28 = fork(compose, x20, x18)
    x29 = fork(compose, x27, x28)
    x30 = compose(x26, x29)
    x31 = palette(I)
    x32 = fork(equality, identity, dmirror)
    x33 = compose(x32, x30)
    x34 = argmax(x31, x33)
    O = x30(x34)
    return O


def solve_363442ee(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = mostcolor(I)
    x4 = fill(I, x3, x2)
    x5 = objects(x4, F, F, T)
    x6 = argmax(x5, size)
    x7 = remove(x6, x5)
    x8 = apply(center, x7)
    x9 = normalize(x6)
    x10 = shape(x6)
    x11 = halve(x10)
    x12 = invert(x11)
    x13 = shift(x9, x12)
    x14 = lbind(shift, x13)
    x15 = mapply(x14, x8)
    O = paint(I, x15)
    return O


def solve_36d67576(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = merge(x3)
    x5 = palette(x4)
    x6 = repeat(identity, ONE)
    x7 = astuple(cmirror, dmirror)
    x8 = astuple(vmirror, hmirror)
    x9 = combine(x7, x8)
    x10 = combine(x6, x9)
    x11 = fork(compose, first, last)
    x12 = product(x10, x10)
    x13 = apply(x11, x12)
    x14 = rbind(contained, x5)
    x15 = compose(x14, first)
    x16 = rbind(sfilter, x15)
    x17 = lbind(chain, ulcorner)
    x18 = lbind(x17, x16)
    x19 = lbind(fork, shift)
    x20 = lbind(lbind, shift)
    x21 = lbind(occurrences, I)
    x22 = rbind(rapply, x2)
    x23 = chain(first, x22, initset)
    x24 = lbind(compose, invert)
    x25 = compose(x24, x18)
    x26 = lbind(compose, x16)
    x27 = fork(x19, x26, x25)
    x28 = compose(x23, x27)
    x29 = rbind(rapply, x2)
    x30 = chain(first, x29, initset)
    x31 = rbind(rapply, x2)
    x32 = compose(initset, x18)
    x33 = chain(first, x31, x32)
    x34 = compose(invert, x33)
    x35 = fork(shift, x30, x34)
    x36 = compose(x20, x35)
    x37 = compose(x21, x28)
    x38 = fork(mapply, x36, x37)
    x39 = rbind(astuple, x38)
    x40 = compose(last, x39)
    x41 = rbind(astuple, x13)
    x42 = compose(last, x41)
    x43 = fork(mapply, x40, x42)
    x44 = fork(paint, identity, x43)
    x45 = rbind(contained, x5)
    x46 = compose(x45, first)
    x47 = sfilter(x2, x46)
    x48 = size(x47)
    x49 = equality(x48, ZERO)
    x50 = branch(x49, identity, x44)
    O = x50(I)
    return O


def solve_36fdfd69(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = fork(subtract, first, last)
    x4 = fork(multiply, sign, identity)
    x5 = compose(x4, x3)
    x6 = lbind(greater, THREE)
    x7 = chain(x6, maximum, x5)
    x8 = lbind(lbind, astuple)
    x9 = rbind(chain, x8)
    x10 = lbind(compose, x7)
    x11 = rbind(x9, x10)
    x12 = lbind(lbind, sfilter)
    x13 = compose(x11, x12)
    x14 = lbind(mapply, backdrop)
    x15 = fork(apply, x13, identity)
    x16 = compose(x14, x15)
    x17 = power(x16, TWO)
    x18 = x17(x2)
    x19 = fill(I, FOUR, x18)
    O = fill(x19, x1, x2)
    return O


def solve_3906de3d(I):
    x1 = first(I)
    x2 = dedupe(x1)
    x3 = size(x2)
    x4 = equality(ONE, x3)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(I)
    x7 = first(x6)
    x8 = first(x7)
    x9 = first(x6)
    x10 = matcher(identity, x8)
    x11 = sfilter(x9, x10)
    x12 = size(x11)
    x13 = last(x6)
    x14 = sfilter(x13, x10)
    x15 = size(x14)
    x16 = greater(x12, x15)
    x17 = branch(x16, hmirror, identity)
    x18 = x17(x6)
    x19 = partition(x18)
    x20 = matcher(color, x8)
    x21 = extract(x19, x20)
    x22 = remove(x21, x19)
    x23 = argmin(x22, uppermost)
    x24 = other(x22, x23)
    x25 = color(x23)
    x26 = color(x24)
    x27 = fill(x18, TWO, x21)
    x28 = fill(x27, ONE, x24)
    x29 = fill(x28, ZERO, x23)
    x30 = rbind(order, identity)
    x31 = dmirror(x29)
    x32 = apply(x30, x31)
    x33 = dmirror(x32)
    x34 = x17(x33)
    x35 = x5(x34)
    x36 = ofcolor(x35, TWO)
    x37 = fill(x35, x8, x36)
    x38 = ofcolor(x35, ONE)
    x39 = fill(x37, x26, x38)
    x40 = ofcolor(x35, ZERO)
    O = fill(x39, x25, x40)
    return O


def solve_39a8645d(I):
    x1 = objects(I, T, T, T)
    x2 = totuple(x1)
    x3 = apply(normalize, x2)
    x4 = mostcommon(x3)
    x5 = mostcolor(I)
    x6 = shape(x4)
    x7 = canvas(x5, x6)
    O = paint(x7, x4)
    return O


def solve_39e1d7f9(I):
    x1 = compress(I)
    x2 = objects(x1, F, F, T)
    x3 = argmax(x2, numcolors)
    x4 = remove(x3, x2)
    x5 = merge(x4)
    x6 = size(x5)
    x7 = positive(x6)
    x8 = astuple(color, x5)
    x9 = astuple(leastcolor, x3)
    x10 = branch(x7, x8, x9)
    x11 = compose(initset, first)
    x12 = fork(rapply, x11, last)
    x13 = compose(first, x12)
    x14 = x13(x10)
    x15 = normalize(x3)
    x16 = matcher(first, x14)
    x17 = sfilter(x15, x16)
    x18 = ulcorner(x17)
    x19 = invert(x18)
    x20 = shift(x15, x19)
    x21 = lbind(shift, x20)
    x22 = objects(x1, T, F, T)
    x23 = colorfilter(x22, x14)
    x24 = apply(ulcorner, x23)
    x25 = mapply(x21, x24)
    x26 = paint(x1, x25)
    x27 = height(x1)
    x28 = frontiers(I)
    x29 = sfilter(x28, hline)
    x30 = size(x29)
    x31 = increment(x30)
    x32 = divide(x27, x31)
    x33 = width(x1)
    x34 = frontiers(I)
    x35 = sfilter(x34, vline)
    x36 = size(x35)
    x37 = increment(x36)
    x38 = divide(x33, x37)
    x39 = rbind(multiply, x38)
    x40 = rbind(divide, x38)
    x41 = compose(x39, x40)
    x42 = fork(equality, x41, identity)
    x43 = compose(x42, first)
    x44 = rbind(multiply, x32)
    x45 = rbind(divide, x32)
    x46 = compose(x44, x45)
    x47 = fork(equality, x46, identity)
    x48 = compose(x47, first)
    x49 = lbind(interval, ZERO)
    x50 = rbind(x49, ONE)
    x51 = compose(x50, size)
    x52 = fork(pair, x51, identity)
    x53 = lbind(apply, last)
    x54 = rbind(sfilter, x43)
    x55 = chain(x53, x54, x52)
    x56 = compose(x55, last)
    x57 = height(x26)
    x58 = interval(ZERO, x57, ONE)
    x59 = pair(x58, x26)
    x60 = sfilter(x59, x48)
    x61 = apply(x56, x60)
    x62 = increment(x38)
    x63 = hupscale(x61, x62)
    x64 = increment(x32)
    x65 = vupscale(x63, x64)
    x66 = frontiers(I)
    x67 = merge(x66)
    x68 = paint(x65, x67)
    x69 = shape(I)
    O = crop(x68, ORIGIN, x69)
    return O


def solve_3aa6fb7a(I):
    x1 = objects(I, T, F, T)
    x2 = mapply(corners, x1)
    O = underfill(I, ONE, x2)
    return O


def solve_3ac3eb23(I):
    x1 = astuple(identity, dmirror)
    x2 = astuple(cmirror, hmirror)
    x3 = combine(x1, x2)
    x4 = chain(lowermost, merge, fgpartition)
    x5 = rbind(rapply, I)
    x6 = lbind(compose, x4)
    x7 = compose(initset, x6)
    x8 = chain(first, x5, x7)
    x9 = matcher(x8, ZERO)
    x10 = extract(x3, x9)
    x11 = x10(I)
    x12 = objects(x11, T, F, T)
    x13 = height(x11)
    x14 = interval(ZERO, x13, TWO)
    x15 = height(x11)
    x16 = interval(ONE, x15, TWO)
    x17 = rbind(apply, x14)
    x18 = lbind(rbind, astuple)
    x19 = chain(x17, x18, last)
    x20 = rbind(apply, x16)
    x21 = lbind(rbind, astuple)
    x22 = compose(increment, last)
    x23 = chain(x20, x21, x22)
    x24 = rbind(apply, x16)
    x25 = lbind(rbind, astuple)
    x26 = compose(decrement, last)
    x27 = chain(x24, x25, x26)
    x28 = fork(combine, x19, x23)
    x29 = fork(combine, x28, x27)
    x30 = compose(x29, center)
    x31 = fork(recolor, color, x30)
    x32 = mapply(x31, x12)
    x33 = paint(x11, x32)
    O = x10(x33)
    return O


def solve_3af2c5a8(I):
    x1 = vmirror(I)
    x2 = hconcat(I, x1)
    x3 = hmirror(x2)
    O = vconcat(x2, x3)
    return O


def solve_3bd67248(I):
    x1 = astuple(identity, identity)
    x2 = astuple(rot90, rot270)
    x3 = astuple(x1, x2)
    x4 = astuple(rot180, rot180)
    x5 = astuple(rot270, rot90)
    x6 = astuple(x4, x5)
    x7 = combine(x3, x6)
    x8 = leastcolor(I)
    x9 = repeat(x8, ONE)
    x10 = rbind(rapply, I)
    x11 = chain(x10, initset, first)
    x12 = compose(first, x11)
    x13 = chain(dedupe, first, x12)
    x14 = matcher(x13, x9)
    x15 = extract(x7, x14)
    x16 = first(x15)
    x17 = last(x15)
    x18 = x16(I)
    x19 = ofcolor(x18, x8)
    x20 = height(x19)
    x21 = interval(ZERO, x20, ONE)
    x22 = lbind(astuple, x20)
    x23 = apply(x22, x21)
    x24 = rbind(shoot, DOWN)
    x25 = mapply(x24, x23)
    x26 = fill(x18, FOUR, x25)
    x27 = astuple(x20, x20)
    x28 = canvas(ZERO, x27)
    x29 = asindices(x28)
    x30 = shift(x29, x27)
    x31 = shape(I)
    x32 = maximum(x31)
    x33 = lbind(shift, x30)
    x34 = interval(ZERO, x32, x20)
    x35 = pair(x34, x34)
    x36 = mapply(x33, x35)
    x37 = fill(x26, TWO, x36)
    O = x17(x37)
    return O


def solve_3bdb4ada(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = compose(flip, x3)
    x5 = extract(x1, x4)
    x6 = remove(x5, x1)
    x7 = compose(flip, even)
    x8 = rbind(chain, first)
    x9 = rbind(chain, last)
    x10 = lbind(rbind, subtract)
    x11 = lbind(x8, x7)
    x12 = lbind(x9, x7)
    x13 = chain(x11, x10, uppermost)
    x14 = chain(x12, x10, leftmost)
    x15 = lbind(fork, both)
    x16 = fork(x15, x13, x14)
    x17 = fork(sfilter, toindices, x16)
    x18 = mapply(x17, x6)
    x19 = color(x5)
    O = fill(I, x19, x18)
    return O


def solve_3befdf3e(I):
    x1 = objects(I, F, F, T)
    x2 = rbind(compose, last)
    x3 = lbind(rbind, contained)
    x4 = chain(x2, x3, box)
    x5 = fork(sfilter, identity, x4)
    x6 = compose(color, x5)
    x7 = fork(other, palette, x6)
    x8 = chain(decrement, decrement, height)
    x9 = chain(decrement, decrement, width)
    x10 = compose(toivec, x8)
    x11 = fork(shift, toindices, x10)
    x12 = chain(toivec, invert, x8)
    x13 = fork(shift, toindices, x12)
    x14 = compose(tojvec, x9)
    x15 = fork(shift, toindices, x14)
    x16 = chain(tojvec, invert, x9)
    x17 = fork(shift, toindices, x16)
    x18 = fork(combine, x11, x13)
    x19 = fork(combine, x15, x17)
    x20 = fork(combine, x18, x19)
    x21 = fork(combine, backdrop, x20)
    x22 = fork(difference, x21, box)
    x23 = fork(recolor, x6, x22)
    x24 = fork(recolor, x7, box)
    x25 = fork(combine, x23, x24)
    x26 = mapply(x25, x1)
    O = paint(I, x26)
    return O


def solve_3c9b0459(I):
    O = rot180(I)
    return O


def solve_3de23699(I):
    x1 = asindices(I)
    x2 = corners(x1)
    x3 = mapply(dneighbors, x2)
    x4 = toobject(x3, I)
    x5 = mostcolor(x4)
    x6 = palette(I)
    x7 = remove(x5, x6)
    x8 = order(x7, identity)
    x9 = first(x8)
    x10 = last(x8)
    x11 = ofcolor(I, x9)
    x12 = ofcolor(I, x10)
    x13 = switch(I, x10, x9)
    x14 = combine(x11, x12)
    x15 = subgrid(x14, x13)
    O = trim(x15)
    return O


def solve_3e980e27(I):
    x1 = ofcolor(I, THREE)
    x2 = ofcolor(I, TWO)
    x3 = matcher(first, THREE)
    x4 = matcher(first, TWO)
    x5 = rbind(objects, T)
    x6 = rbind(x5, T)
    x7 = rbind(x6, F)
    x8 = lbind(contained, THREE)
    x9 = compose(x8, palette)
    x10 = lbind(contained, TWO)
    x11 = compose(x10, palette)
    x12 = rbind(sfilter, x9)
    x13 = compose(x12, x7)
    x14 = rbind(sfilter, x11)
    x15 = compose(x14, x7)
    x16 = rbind(argmax, numcolors)
    x17 = chain(normalize, x16, x13)
    x18 = rbind(argmax, numcolors)
    x19 = compose(x18, x15)
    x20 = chain(normalize, vmirror, x19)
    x21 = rbind(sfilter, x3)
    x22 = chain(ulcorner, x21, x17)
    x23 = rbind(sfilter, x4)
    x24 = chain(ulcorner, x23, x20)
    x25 = rbind(sfilter, x4)
    x26 = chain(center, x25, x19)
    x27 = lbind(lbind, shift)
    x28 = compose(x27, x17)
    x29 = lbind(lbind, shift)
    x30 = compose(x29, x20)
    x31 = rbind(apply, x1)
    x32 = lbind(lbind, add)
    x33 = compose(invert, x22)
    x34 = chain(x31, x32, x33)
    x35 = rbind(remove, x2)
    x36 = compose(x35, x26)
    x37 = lbind(lbind, add)
    x38 = chain(x37, invert, x24)
    x39 = fork(apply, x38, x36)
    x40 = fork(mapply, x28, x34)
    x41 = fork(mapply, x30, x39)
    x42 = fork(paint, identity, x40)
    x43 = fork(paint, identity, x41)
    x44 = size(x1)
    x45 = positive(x44)
    x46 = size(x2)
    x47 = positive(x46)
    x48 = branch(x45, x42, identity)
    x49 = branch(x47, x43, identity)
    x50 = compose(x48, x49)
    O = x50(I)
    return O


def solve_3eda0437(I):
    x1 = matcher(identity, ZERO)
    x2 = rbind(sfilter, x1)
    x3 = compose(size, x2)
    x4 = apply(x3, I)
    x5 = maximum(x4)
    x6 = dmirror(I)
    x7 = apply(x3, x6)
    x8 = maximum(x7)
    x9 = increment(x8)
    x10 = interval(TWO, x9, ONE)
    x11 = increment(x5)
    x12 = interval(TWO, x11, ONE)
    x13 = product(x10, x12)
    x14 = fork(multiply, first, last)
    x15 = apply(x14, x13)
    x16 = lbind(sfilter, x13)
    x17 = lbind(matcher, x14)
    x18 = compose(x16, x17)
    x19 = apply(x18, x15)
    x20 = lbind(occurrences, I)
    x21 = lbind(recolor, ZERO)
    x22 = lbind(canvas, NEG_ONE)
    x23 = compose(asindices, x22)
    x24 = chain(x20, x21, x23)
    x25 = lbind(mapply, x24)
    x26 = chain(positive, size, x25)
    x27 = sfilter(x19, x26)
    x28 = compose(x14, first)
    x29 = rbind(argmax, x28)
    x30 = lbind(recolor, ZERO)
    x31 = lbind(canvas, NEG_ONE)
    x32 = chain(x30, asindices, x31)
    x33 = lbind(lbind, shift)
    x34 = lbind(occurrences, I)
    x35 = fork(mapply, x33, x34)
    x36 = compose(x35, x32)
    x37 = size(x27)
    x38 = positive(x37)
    x39 = lbind(recolor, SIX)
    x40 = lbind(mapply, x36)
    x41 = chain(x39, x40, x29)
    x42 = fork(difference, identity, identity)
    x43 = branch(x38, x41, x42)
    x44 = x43(x27)
    O = paint(I, x44)
    return O


def solve_3f7978a0(I):
    x1 = partition(I)
    x2 = objects(I, T, F, F)
    x3 = compose(double, height)
    x4 = fork(equality, x3, size)
    x5 = compose(double, width)
    x6 = fork(equality, x5, size)
    x7 = fork(either, x4, x6)
    x8 = rbind(equality, TWO)
    x9 = lbind(colorfilter, x2)
    x10 = rbind(sfilter, vline)
    x11 = rbind(sfilter, hline)
    x12 = chain(x10, x9, color)
    x13 = chain(x8, size, x12)
    x14 = chain(x11, x9, color)
    x15 = chain(x8, size, x14)
    x16 = fork(either, x13, x15)
    x17 = fork(both, x7, x16)
    x18 = extract(x1, x17)
    x19 = color(x18)
    x20 = colorfilter(x2, x19)
    x21 = first(x20)
    x22 = vline(x21)
    x23 = ulcorner(x18)
    x24 = lrcorner(x18)
    x25 = branch(x22, UP, LEFT)
    x26 = add(x23, x25)
    x27 = branch(x22, DOWN, RIGHT)
    x28 = add(x24, x27)
    x29 = initset(x28)
    x30 = insert(x26, x29)
    O = subgrid(x30, I)
    return O


def solve_40853293(I):
    x1 = partition(I)
    x2 = fork(recolor, color, backdrop)
    x3 = apply(x2, x1)
    x4 = mfilter(x3, hline)
    x5 = mfilter(x3, vline)
    x6 = paint(I, x4)
    O = paint(x6, x5)
    return O


def solve_4093f84a(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = palette(x2)
    x4 = fork(multiply, height, width)
    x5 = lbind(ofcolor, I)
    x6 = compose(x4, x5)
    x7 = argmin(x3, x6)
    x8 = palette(I)
    x9 = remove(x7, x8)
    x10 = lbind(colorcount, I)
    x11 = argmin(x9, x10)
    x12 = ofcolor(I, x7)
    x13 = leftmost(x12)
    x14 = positive(x13)
    x15 = branch(x14, identity, dmirror)
    x16 = x15(I)
    x17 = ofcolor(x16, x7)
    x18 = subgrid(x17, x16)
    x19 = leftmost(x17)
    x20 = rightmost(x17)
    x21 = lbind(greater, x19)
    x22 = compose(x21, last)
    x23 = rbind(greater, x20)
    x24 = compose(x23, last)
    x25 = asindices(x16)
    x26 = sfilter(x25, x22)
    x27 = subgrid(x26, x16)
    x28 = asindices(x16)
    x29 = sfilter(x28, x24)
    x30 = subgrid(x29, x16)
    x31 = rbind(equality, x11)
    x32 = rbind(order, x31)
    x33 = apply(x32, x27)
    x34 = vmirror(x30)
    x35 = apply(x32, x34)
    x36 = vmirror(x35)
    x37 = hconcat(x33, x18)
    x38 = hconcat(x37, x36)
    x39 = x15(x38)
    O = replace(x39, x11, x7)
    return O


def solve_41e4d17e(I):
    x1 = lbind(equality, NINE)
    x2 = compose(x1, size)
    x3 = fork(equality, height, width)
    x4 = fork(both, x2, x3)
    x5 = objects(I, T, F, F)
    x6 = sfilter(x5, x4)
    x7 = fork(combine, vfrontier, hfrontier)
    x8 = compose(x7, center)
    x9 = mapply(x8, x6)
    O = underfill(I, SIX, x9)
    return O


def solve_4258a5f9(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = mapply(neighbors, x2)
    x4 = difference(x3, x2)
    O = fill(I, ONE, x4)
    return O


def solve_4290ef0e(I):
    x1 = mostcolor(I)
    x2 = fgpartition(I)
    x3 = objects(I, T, F, T)
    x4 = rbind(valmax, width)
    x5 = lbind(colorfilter, x3)
    x6 = chain(x4, x5, color)
    x7 = compose(maximum, shape)
    x8 = fork(add, x7, x6)
    x9 = compose(invert, x8)
    x10 = order(x2, x9)
    x11 = rbind(add, DOWN)
    x12 = compose(x11, ulcorner)
    x13 = fork(contained, x12, toindices)
    x14 = rbind(add, RIGHT)
    x15 = compose(x14, ulcorner)
    x16 = fork(contained, x15, toindices)
    x17 = fork(add, x13, x16)
    x18 = rbind(argmax, x17)
    x19 = compose(initset, identity)
    x20 = fork(insert, vmirror, x19)
    x21 = fork(insert, cmirror, x20)
    x22 = fork(insert, hmirror, x21)
    x23 = compose(x18, x22)
    x24 = apply(x23, x10)
    x25 = size(x2)
    x26 = apply(size, x2)
    x27 = contained(ONE, x26)
    x28 = increment(x25)
    x29 = branch(x27, x25, x28)
    x30 = double(x29)
    x31 = decrement(x30)
    x32 = apply(normalize, x24)
    x33 = interval(ZERO, x29, ONE)
    x34 = pair(x33, x33)
    x35 = mpapply(shift, x32, x34)
    x36 = astuple(x31, x31)
    x37 = canvas(x1, x36)
    x38 = paint(x37, x35)
    x39 = rot90(x38)
    x40 = paint(x39, x35)
    x41 = rot90(x40)
    x42 = paint(x41, x35)
    x43 = rot90(x42)
    O = paint(x43, x35)
    return O


def solve_42a50994(I):
    x1 = objects(I, F, T, T)
    x2 = sizefilter(x1, ONE)
    x3 = merge(x2)
    O = cover(I, x3)
    return O


def solve_4347f46a(I):
    x1 = objects(I, T, F, T)
    x2 = fork(difference, toindices, box)
    x3 = mapply(x2, x1)
    x4 = mostcolor(I)
    O = fill(I, x4, x3)
    return O


def solve_444801d8(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = rbind(toobject, I)
    x5 = chain(leastcolor, x4, delta)
    x6 = rbind(shift, UP)
    x7 = fork(connect, ulcorner, urcorner)
    x8 = compose(x6, x7)
    x9 = rbind(shift, DOWN)
    x10 = fork(connect, llcorner, lrcorner)
    x11 = compose(x9, x10)
    x12 = fork(astuple, x8, x11)
    x13 = lbind(rbind, manhattan)
    x14 = compose(x13, delta)
    x15 = fork(argmin, x12, x14)
    x16 = fork(combine, delta, x15)
    x17 = fork(recolor, x5, x16)
    x18 = mapply(x17, x3)
    O = paint(I, x18)
    return O


def solve_445eab21(I):
    x1 = objects(I, T, F, T)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = color(x3)
    O = canvas(x4, TWO_BY_TWO)
    return O


def solve_447fd412(I):
    x1 = asobject(I)
    x2 = shape(I)
    x3 = shift(x1, x2)
    x4 = mostcolor(I)
    x5 = shape(I)
    x6 = multiply(x5, THREE)
    x7 = canvas(x4, x6)
    x8 = paint(x7, x3)
    x9 = objects(x8, F, T, T)
    x10 = argmax(x9, numcolors)
    x11 = normalize(x10)
    x12 = remove(x11, x9)
    x13 = merge(x12)
    x14 = mostcolor(x13)
    x15 = palette(x11)
    x16 = matcher(identity, x14)
    x17 = argmin(x15, x16)
    x18 = matcher(first, x14)
    x19 = sfilter(x11, x18)
    x20 = matcher(first, x17)
    x21 = sfilter(x11, x20)
    x22 = recolor(x4, x21)
    x23 = combine(x19, x22)
    x24 = lbind(mfilter, x9)
    x25 = lbind(occurrences, x8)
    x26 = lbind(upscale, x23)
    x27 = compose(x25, x26)
    x28 = lbind(lbind, shift)
    x29 = lbind(upscale, x11)
    x30 = compose(x28, x29)
    x31 = fork(apply, x30, x27)
    x32 = compose(positive, size)
    x33 = lbind(chain, x32)
    x34 = rbind(x33, toindices)
    x35 = lbind(rbind, intersection)
    x36 = chain(x24, x34, x35)
    x37 = chain(size, x36, toindices)
    x38 = rbind(colorcount, x14)
    x39 = fork(equality, x37, x38)
    x40 = rbind(sfilter, x39)
    x41 = chain(merge, x40, x31)
    x42 = interval(ONE, SIX, ONE)
    x43 = mapply(x41, x42)
    x44 = paint(x8, x43)
    O = subgrid(x3, x44)
    return O


def solve_44d8ac46(I):
    x1 = objects(I, T, F, T)
    x2 = apply(delta, x1)
    x3 = mfilter(x2, square)
    O = fill(I, TWO, x3)
    return O


def solve_44f52bb0(I):
    x1 = vmirror(I)
    x2 = equality(x1, I)
    x3 = hmirror(I)
    x4 = equality(x3, I)
    x5 = either(x2, x4)
    x6 = branch(x5, ONE, SEVEN)
    O = canvas(x6, UNITY)
    return O


def solve_4522001f(I):
    x1 = shape(I)
    x2 = multiply(THREE, x1)
    x3 = mostcolor(I)
    x4 = canvas(x3, x2)
    x5 = objects(I, F, F, T)
    x6 = merge(x5)
    x7 = mostcolor(x6)
    x8 = first(x5)
    x9 = matcher(first, x7)
    x10 = sfilter(x8, x9)
    x11 = normalize(x10)
    x12 = delta(x11)
    x13 = first(x12)
    x14 = subtract(ONE, x13)
    x15 = asobject(I)
    x16 = shape(I)
    x17 = double(x16)
    x18 = multiply(x14, x17)
    x19 = shift(x15, x18)
    x20 = paint(x4, x19)
    x21 = objects(x20, F, F, T)
    x22 = lbind(mapply, dneighbors)
    x23 = matcher(first, x7)
    x24 = rbind(sfilter, x23)
    x25 = chain(x22, delta, x24)
    x26 = ineighbors(ORIGIN)
    x27 = apply(double, x26)
    x28 = rbind(apply, x27)
    x29 = lbind(lbind, shift)
    x30 = compose(x28, x29)
    x31 = lbind(rbind, adjacent)
    x32 = compose(x31, x25)
    x33 = fork(extract, x30, x32)
    x34 = fork(combine, identity, x33)
    x35 = compose(backdrop, x34)
    x36 = double(x13)
    x37 = decrement(x36)
    x38 = multiply(x37, FOUR)
    x39 = rbind(shift, x38)
    x40 = compose(x39, x35)
    x41 = fork(combine, x35, x40)
    x42 = mapply(x41, x21)
    O = fill(x20, x7, x42)
    return O


def solve_4612dd53(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = box(x2)
    x4 = fill(I, TWO, x3)
    x5 = subgrid(x2, x4)
    x6 = ofcolor(x5, x1)
    x7 = mapply(vfrontier, x6)
    x8 = mapply(hfrontier, x6)
    x9 = size(x7)
    x10 = size(x8)
    x11 = greater(x9, x10)
    x12 = branch(x11, x8, x7)
    x13 = fill(x5, TWO, x12)
    x14 = ofcolor(x13, TWO)
    x15 = ulcorner(x2)
    x16 = shift(x14, x15)
    O = underfill(I, TWO, x16)
    return O


def solve_46442a0e(I):
    x1 = rot90(I)
    x2 = rot180(I)
    x3 = rot270(I)
    x4 = hconcat(I, x1)
    x5 = hconcat(x3, x2)
    O = vconcat(x4, x5)
    return O


def solve_469497ad(I):
    x1 = numcolors(I)
    x2 = decrement(x1)
    x3 = upscale(I, x2)
    x4 = rbind(toobject, I)
    x5 = lbind(ofcolor, I)
    x6 = compose(outbox, x5)
    x7 = chain(numcolors, x4, x6)
    x8 = matcher(x7, ONE)
    x9 = palette(I)
    x10 = sfilter(x9, x8)
    x11 = fork(multiply, height, width)
    x12 = lbind(ofcolor, I)
    x13 = compose(x11, x12)
    x14 = argmin(x10, x13)
    x15 = ofcolor(x3, x14)
    x16 = outbox(x15)
    x17 = toobject(x16, x3)
    x18 = mostcolor(x17)
    x19 = ulcorner(x15)
    x20 = shoot(x19, NEG_UNITY)
    x21 = lrcorner(x15)
    x22 = shoot(x21, UNITY)
    x23 = urcorner(x15)
    x24 = shoot(x23, UP_RIGHT)
    x25 = llcorner(x15)
    x26 = shoot(x25, DOWN_LEFT)
    x27 = combine(x20, x22)
    x28 = combine(x24, x26)
    x29 = combine(x27, x28)
    x30 = ofcolor(x3, x18)
    x31 = intersection(x29, x30)
    O = fill(x3, TWO, x31)
    return O


def solve_46f33fce(I):
    x1 = rot180(I)
    x2 = downscale(x1, TWO)
    x3 = rot180(x2)
    O = upscale(x3, FOUR)
    return O


def solve_47c1f68c(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = compress(I)
    x5 = mostcolor(x4)
    x6 = tophalf(I)
    x7 = lefthalf(x6)
    x8 = vmirror(x7)
    x9 = hconcat(x7, x8)
    x10 = hmirror(x9)
    x11 = vconcat(x9, x10)
    x12 = tophalf(I)
    x13 = righthalf(x12)
    x14 = vmirror(x13)
    x15 = hconcat(x14, x13)
    x16 = hmirror(x15)
    x17 = vconcat(x15, x16)
    x18 = bottomhalf(I)
    x19 = lefthalf(x18)
    x20 = vmirror(x19)
    x21 = hconcat(x19, x20)
    x22 = hmirror(x21)
    x23 = vconcat(x22, x21)
    x24 = bottomhalf(I)
    x25 = righthalf(x24)
    x26 = vmirror(x25)
    x27 = hconcat(x26, x25)
    x28 = hmirror(x27)
    x29 = vconcat(x28, x27)
    x30 = astuple(x11, x17)
    x31 = astuple(x23, x29)
    x32 = combine(x30, x31)
    x33 = argmax(x32, numcolors)
    x34 = asindices(x33)
    x35 = ofcolor(x33, x5)
    x36 = difference(x34, x35)
    O = fill(x33, x3, x36)
    return O


def solve_484b58aa(I):
    x1 = palette(I)
    x2 = objects(I, T, F, F)
    x3 = lbind(colorfilter, x2)
    x4 = compose(size, x3)
    x5 = valmin(x1, x4)
    x6 = matcher(x4, x5)
    x7 = sfilter(x1, x6)
    x8 = lbind(colorcount, I)
    x9 = argmin(x7, x8)
    x10 = asobject(I)
    x11 = matcher(first, x9)
    x12 = compose(flip, x11)
    x13 = sfilter(x10, x12)
    x14 = lbind(contained, x9)
    x15 = compose(flip, x14)
    x16 = sfilter(I, x15)
    x17 = asobject(x16)
    x18 = hperiod(x17)
    x19 = dmirror(I)
    x20 = sfilter(x19, x15)
    x21 = asobject(x20)
    x22 = hperiod(x21)
    x23 = astuple(x22, x18)
    x24 = lbind(multiply, x23)
    x25 = neighbors(ORIGIN)
    x26 = mapply(neighbors, x25)
    x27 = apply(x24, x26)
    x28 = lbind(shift, x13)
    x29 = mapply(x28, x27)
    O = paint(I, x29)
    return O


def solve_48d8fb45(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = mostcolor(x2)
    x4 = matcher(first, x3)
    x5 = sfilter(x2, x4)
    x6 = shape(x5)
    x7 = normalize(x5)
    x8 = mostcolor(I)
    x9 = canvas(x8, x6)
    O = paint(x9, x7)
    return O


def solve_4938f0c2(I):
    x1 = fgpartition(I)
    x2 = matcher(size, FOUR)
    x3 = fork(both, square, x2)
    x4 = extract(x1, x3)
    x5 = color(x4)
    x6 = merge(x1)
    x7 = compose(hmirror, vmirror)
    x8 = initset(x7)
    x9 = insert(vmirror, x8)
    x10 = insert(hmirror, x9)
    x11 = rapply(x10, x6)
    x12 = ulcorner(x4)
    x13 = lbind(subtract, x12)
    x14 = matcher(first, x5)
    x15 = rbind(sfilter, x14)
    x16 = chain(x13, ulcorner, x15)
    x17 = fork(shift, identity, x16)
    x18 = mapply(x17, x11)
    O = paint(I, x18)
    return O


def solve_496994bd(I):
    x1 = mostcolor(I)
    x2 = vsplit(I, TWO)
    x3 = apply(numcolors, x2)
    x4 = contained(ONE, x3)
    x5 = branch(x4, hmirror, vmirror)
    x6 = x5(I)
    x7 = asobject(x6)
    x8 = matcher(first, x1)
    x9 = compose(flip, x8)
    x10 = sfilter(x7, x9)
    O = paint(I, x10)
    return O


def solve_49d1d64f(I):
    x1 = shape(I)
    x2 = increment(x1)
    x3 = increment(x2)
    x4 = canvas(ZERO, x3)
    x5 = asobject(I)
    x6 = shift(x5, UNITY)
    x7 = shift(x6, LEFT)
    x8 = paint(x4, x7)
    x9 = shift(x6, RIGHT)
    x10 = paint(x8, x9)
    x11 = shift(x6, UP)
    x12 = paint(x10, x11)
    x13 = shift(x6, DOWN)
    x14 = paint(x12, x13)
    O = paint(x14, x6)
    return O


def solve_4be741c5(I):
    x1 = first(I)
    x2 = dedupe(x1)
    x3 = size(x2)
    x4 = equality(x3, ONE)
    x5 = branch(x4, dmirror, identity)
    x6 = branch(x4, height, width)
    x7 = x6(I)
    x8 = astuple(ONE, x7)
    x9 = x5(I)
    x10 = crop(x9, ORIGIN, x8)
    x11 = apply(dedupe, x10)
    O = x5(x11)
    return O


def solve_4c4377d9(I):
    x1 = hmirror(I)
    O = vconcat(x1, I)
    return O


def solve_4c5c2cf0(I):
    x1 = fgpartition(I)
    x2 = compose(dneighbors, center)
    x3 = fork(difference, backdrop, x2)
    x4 = fork(equality, toindices, x3)
    x5 = matcher(size, FIVE)
    x6 = fork(both, x4, x5)
    x7 = extract(x1, x6)
    x8 = color(x7)
    x9 = merge(x1)
    x10 = compose(hmirror, vmirror)
    x11 = initset(x10)
    x12 = insert(vmirror, x11)
    x13 = insert(hmirror, x12)
    x14 = rapply(x13, x9)
    x15 = ulcorner(x7)
    x16 = lbind(subtract, x15)
    x17 = matcher(first, x8)
    x18 = rbind(sfilter, x17)
    x19 = chain(x16, ulcorner, x18)
    x20 = fork(shift, identity, x19)
    x21 = mapply(x20, x14)
    O = paint(I, x21)
    return O


def solve_50846271(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = interval(TWO, FIVE, ONE)
    x4 = rbind(shift, RIGHT)
    x5 = rbind(shift, LEFT)
    x6 = rbind(shift, UP)
    x7 = rbind(shift, DOWN)
    x8 = lbind(fork, intersection)
    x9 = lbind(x8, identity)
    x10 = lbind(rbind, shift)
    x11 = compose(x9, x10)
    x12 = compose(x11, tojvec)
    x13 = chain(x11, tojvec, invert)
    x14 = compose(x11, toivec)
    x15 = chain(x11, toivec, invert)
    x16 = lbind(compose, initset)
    x17 = lbind(rbind, rapply)
    x18 = lbind(chain, first)
    x19 = lbind(compose, x5)
    x20 = x16(x12)
    x21 = rbind(x18, x20)
    x22 = chain(x19, x21, x17)
    x23 = lbind(compose, x4)
    x24 = x16(x13)
    x25 = rbind(x18, x24)
    x26 = chain(x23, x25, x17)
    x27 = lbind(compose, x6)
    x28 = x16(x14)
    x29 = rbind(x18, x28)
    x30 = chain(x27, x29, x17)
    x31 = lbind(compose, x7)
    x32 = x16(x15)
    x33 = rbind(x18, x32)
    x34 = chain(x31, x33, x17)
    x35 = rbind(ofcolor, x1)
    x36 = compose(x22, x35)
    x37 = compose(x26, x35)
    x38 = compose(x30, x35)
    x39 = compose(x34, x35)
    x40 = lbind(fork, combine)
    x41 = fork(x40, x36, x37)
    x42 = fork(x40, x38, x39)
    x43 = fork(x40, x41, x42)
    x44 = lbind(recolor, x1)
    x45 = rbind(mapply, x3)
    x46 = chain(x44, x45, x43)
    x47 = fork(paint, identity, x46)
    x48 = power(x47, FOUR)
    x49 = x48(I)
    x50 = objects(x49, T, T, T)
    x51 = colorfilter(x50, x1)
    x52 = compose(maximum, shape)
    x53 = apply(x52, x51)
    x54 = maximum(x53)
    x55 = ofcolor(x49, x1)
    x56 = rbind(contained, x55)
    x57 = rbind(add, RIGHT)
    x58 = compose(x56, x57)
    x59 = rbind(add, LEFT)
    x60 = compose(x56, x59)
    x61 = fork(either, x58, x60)
    x62 = rbind(add, DOWN)
    x63 = compose(x56, x62)
    x64 = rbind(add, UP)
    x65 = compose(x56, x64)
    x66 = fork(either, x63, x65)
    x67 = fork(both, x61, x66)
    x68 = matcher(size, x54)
    x69 = fork(either, vline, hline)
    x70 = fork(both, x68, x69)
    x71 = sfilter(x51, x70)
    x72 = apply(center, x71)
    x73 = sfilter(x55, x67)
    x74 = combine(x73, x72)
    x75 = halve(x54)
    x76 = invert(x75)
    x77 = toivec(x76)
    x78 = rbind(add, x77)
    x79 = toivec(x75)
    x80 = rbind(add, x79)
    x81 = fork(connect, x78, x80)
    x82 = invert(x75)
    x83 = tojvec(x82)
    x84 = rbind(add, x83)
    x85 = tojvec(x75)
    x86 = rbind(add, x85)
    x87 = fork(connect, x84, x86)
    x88 = fork(combine, x81, x87)
    x89 = mapply(x88, x74)
    x90 = fill(x49, x1, x89)
    x91 = replace(x90, x1, EIGHT)
    O = fill(x91, x1, x2)
    return O


def solve_508bd3b6(I):
    x1 = objects(I, T, F, F)
    x2 = palette(I)
    x3 = compose(maximum, shape)
    x4 = lbind(apply, x3)
    x5 = lbind(colorfilter, x1)
    x6 = chain(maximum, x4, x5)
    x7 = matcher(x6, ONE)
    x8 = extract(x2, x7)
    x9 = lbind(ofcolor, I)
    x10 = compose(backdrop, x9)
    x11 = fork(equality, x9, x10)
    x12 = extract(x2, x11)
    x13 = ofcolor(I, x12)
    x14 = ofcolor(I, x8)
    x15 = rbind(manhattan, x13)
    x16 = compose(x15, initset)
    x17 = argmin(x14, x16)
    x18 = ulcorner(x14)
    x19 = contained(x18, x14)
    x20 = shoot(x17, UNITY)
    x21 = shoot(x17, NEG_UNITY)
    x22 = combine(x20, x21)
    x23 = shoot(x17, UP_RIGHT)
    x24 = shoot(x17, DOWN_LEFT)
    x25 = combine(x23, x24)
    x26 = branch(x19, x22, x25)
    x27 = asindices(I)
    x28 = outbox(x13)
    x29 = intersection(x27, x28)
    x30 = intersection(x29, x26)
    x31 = initset(x17)
    x32 = rbind(manhattan, x31)
    x33 = compose(x32, initset)
    x34 = argmin(x30, x33)
    x35 = height(x13)
    x36 = height(I)
    x37 = equality(x35, x36)
    x38 = leftmost(x14)
    x39 = leftmost(x13)
    x40 = greater(x38, x39)
    x41 = uppermost(x14)
    x42 = uppermost(x13)
    x43 = greater(x41, x42)
    x44 = lbind(shoot, x34)
    x45 = branch(x40, UNITY, NEG_UNITY)
    x46 = branch(x40, UP_RIGHT, DOWN_LEFT)
    x47 = branch(x43, UNITY, NEG_UNITY)
    x48 = branch(x43, DOWN_LEFT, UP_RIGHT)
    x49 = branch(x37, x45, x47)
    x50 = branch(x37, x46, x48)
    x51 = x44(x49)
    x52 = x44(x50)
    x53 = combine(x51, x52)
    x54 = difference(x53, x14)
    O = fill(I, THREE, x54)
    return O


def solve_50cb2852(I):
    x1 = objects(I, T, F, T)
    x2 = compose(backdrop, inbox)
    x3 = mapply(x2, x1)
    O = fill(I, EIGHT, x3)
    return O


def solve_5117e062(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = mostcolor(x2)
    x4 = normalize(x2)
    x5 = mostcolor(I)
    x6 = shape(x2)
    x7 = canvas(x5, x6)
    O = fill(x7, x3, x4)
    return O


def solve_5168d44c(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = valmax(x1, x2)
    x4 = matcher(x2, x3)
    x5 = sfilter(x1, x4)
    x6 = argmax(x5, size)
    x7 = color(x6)
    x8 = remove(x6, x1)
    x9 = objects(I, T, F, F)
    x10 = lbind(colorfilter, x9)
    x11 = chain(size, x10, color)
    x12 = argmin(x8, x11)
    x13 = other(x8, x12)
    x14 = color(x13)
    x15 = colorfilter(x9, x14)
    x16 = apply(leftmost, x15)
    x17 = size(x16)
    x18 = equality(ONE, x17)
    x19 = apply(uppermost, x15)
    x20 = size(x19)
    x21 = equality(ONE, x20)
    x22 = fork(add, first, last)
    x23 = compose(x22, ulcorner)
    x24 = argmin(x15, x23)
    x25 = remove(x24, x15)
    x26 = lbind(manhattan, x24)
    x27 = argmin(x25, x26)
    x28 = lowermost(x27)
    x29 = lowermost(x24)
    x30 = subtract(x28, x29)
    x31 = uppermost(x27)
    x32 = uppermost(x24)
    x33 = subtract(x31, x32)
    x34 = astuple(x30, x33)
    x35 = maximum(x34)
    x36 = branch(x21, ZERO, x35)
    x37 = rightmost(x27)
    x38 = rightmost(x24)
    x39 = subtract(x37, x38)
    x40 = leftmost(x27)
    x41 = leftmost(x24)
    x42 = subtract(x40, x41)
    x43 = astuple(x39, x42)
    x44 = maximum(x43)
    x45 = branch(x18, ZERO, x44)
    x46 = astuple(x36, x45)
    x47 = shift(x12, x46)
    x48 = delta(x47)
    x49 = hmirror(x47)
    x50 = ulcorner(x48)
    x51 = delta(x49)
    x52 = ulcorner(x51)
    x53 = subtract(x50, x52)
    x54 = shift(x49, x53)
    x55 = combine(x47, x54)
    x56 = vmirror(x55)
    x57 = ulcorner(x48)
    x58 = delta(x56)
    x59 = ulcorner(x58)
    x60 = subtract(x57, x59)
    x61 = shift(x56, x60)
    x62 = combine(x61, x55)
    x63 = color(x12)
    x64 = replace(I, x63, x7)
    O = paint(x64, x62)
    return O


def solve_539a4f51(I):
    x1 = astuple(identity, cmirror)
    x2 = astuple(hmirror, vmirror)
    x3 = combine(x1, x2)
    x4 = fork(multiply, height, width)
    x5 = rbind(objects, F)
    x6 = rbind(x5, F)
    x7 = rbind(x6, T)
    x8 = rbind(argmin, x4)
    x9 = lbind(contained, ORIGIN)
    x10 = chain(x9, toindices, x8)
    x11 = compose(x10, x7)
    x12 = lbind(compose, x11)
    x13 = rbind(rapply, I)
    x14 = compose(initset, x12)
    x15 = chain(first, x13, x14)
    x16 = extract(x3, x15)
    x17 = x16(I)
    x18 = height(I)
    x19 = first(x17)
    x20 = matcher(identity, ZERO)
    x21 = compose(flip, x20)
    x22 = sfilter(x19, x21)
    x23 = size(x22)
    x24 = divide(x18, x23)
    x25 = increment(x24)
    x26 = double(x25)
    x27 = repeat(x22, x26)
    x28 = merge(x27)
    x29 = double(x18)
    x30 = repeat(x28, x29)
    x31 = asobject(x30)
    x32 = chain(increment, last, last)
    x33 = compose(first, last)
    x34 = fork(greater, x32, x33)
    x35 = sfilter(x31, x34)
    x36 = upscale(x17, TWO)
    x37 = dmirror(x35)
    x38 = combine(x35, x37)
    x39 = paint(x36, x38)
    O = x16(x39)
    return O


def solve_53b68214(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = mostcolor(I)
    x4 = width(I)
    x5 = astuple(TEN, x4)
    x6 = canvas(x3, x5)
    x7 = interval(ONE, SIX, ONE)
    x8 = invert(TEN)
    x9 = interval(x8, TEN, ONE)
    x10 = product(x7, x9)
    x11 = remove(ORIGIN, x10)
    x12 = lbind(intersection, x2)
    x13 = lbind(shift, x2)
    x14 = compose(x12, x13)
    x15 = toindices(x2)
    x16 = lbind(intersection, x15)
    x17 = lbind(shift, x15)
    x18 = compose(x16, x17)
    x19 = compose(size, x14)
    x20 = compose(size, x18)
    x21 = fork(equality, x19, x20)
    x22 = chain(positive, size, x14)
    x23 = fork(both, x21, x22)
    x24 = sfilter(x11, x23)
    x25 = compose(size, x14)
    x26 = valmax(x24, x25)
    x27 = compose(size, x14)
    x28 = matcher(x27, x26)
    x29 = sfilter(x24, x28)
    x30 = fork(multiply, first, last)
    x31 = argmax(x29, x30)
    x32 = interval(ZERO, TEN, ONE)
    x33 = lbind(shift, x2)
    x34 = lbind(multiply, x31)
    x35 = compose(x33, x34)
    x36 = mapply(x35, x32)
    O = paint(x6, x36)
    return O


def solve_543a7ed5(I):
    x1 = objects(I, T, F, T)
    x2 = mapply(outbox, x1)
    x3 = fill(I, THREE, x2)
    x4 = mapply(delta, x1)
    O = fill(x3, FOUR, x4)
    return O


def solve_54d82841(I):
    x1 = objects(I, T, F, T)
    x2 = mapply(delta, x1)
    x3 = first(x1)
    x4 = toindices(x3)
    x5 = rbind(contained, x4)
    x6 = portrait(x3)
    x7 = apply(first, x2)
    x8 = apply(last, x2)
    x9 = branch(x6, x7, x8)
    x10 = branch(x6, RIGHT, DOWN)
    x11 = delta(x3)
    x12 = center(x11)
    x13 = add(x12, x10)
    x14 = x5(x13)
    x15 = branch(x6, width, height)
    x16 = branch(x6, rbind, lbind)
    x17 = x15(I)
    x18 = decrement(x17)
    x19 = x16(astuple, x18)
    x20 = branch(x6, toivec, tojvec)
    x21 = branch(x14, x20, x19)
    x22 = apply(x21, x9)
    O = fill(I, FOUR, x22)
    return O


def solve_54d9e175(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = leastcolor(x2)
    x4 = shape(I)
    x5 = canvas(x3, x4)
    x6 = hconcat(I, x5)
    x7 = objects(x6, F, F, T)
    x8 = power(increment, FIVE)
    x9 = lbind(remove, FIVE)
    x10 = lbind(remove, ZERO)
    x11 = chain(x9, x10, palette)
    x12 = chain(x8, first, x11)
    x13 = fork(recolor, x12, toindices)
    x14 = mapply(x13, x7)
    O = paint(I, x14)
    return O


def solve_5521c0d9(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = rbind(objects, T)
    x6 = rbind(x5, F)
    x7 = rbind(x6, T)
    x8 = lbind(canvas, x4)
    x9 = compose(x8, shape)
    x10 = fork(hconcat, identity, x9)
    x11 = compose(x7, x10)
    x12 = lbind(apply, uppermost)
    x13 = chain(maximum, x12, x11)
    x14 = matcher(x13, ZERO)
    x15 = astuple(identity, dmirror)
    x16 = astuple(cmirror, hmirror)
    x17 = combine(x15, x16)
    x18 = rbind(rapply, I)
    x19 = chain(first, x18, initset)
    x20 = compose(x14, x19)
    x21 = extract(x17, x20)
    x22 = x21(I)
    x23 = shape(x22)
    x24 = canvas(x4, x23)
    x25 = hconcat(x22, x24)
    x26 = objects(x25, T, F, T)
    x27 = compose(toivec, height)
    x28 = fork(shift, identity, x27)
    x29 = mapply(x28, x26)
    x30 = mostcolor(I)
    x31 = merge(x26)
    x32 = fill(x22, x30, x31)
    x33 = paint(x32, x29)
    O = x21(x33)
    return O


def solve_5582e5ca(I):
    x1 = mostcolor(I)
    x2 = shape(I)
    O = canvas(x1, x2)
    return O


def solve_5614dbcf(I):
    x1 = canvas(ZERO, THREE_BY_THREE)
    x2 = asindices(x1)
    x3 = shape(I)
    x4 = divide(x3, THREE)
    x5 = first(x4)
    x6 = last(x4)
    x7 = interval(ZERO, x5, ONE)
    x8 = interval(ZERO, x6, ONE)
    x9 = product(x7, x8)
    x10 = rbind(multiply, THREE)
    x11 = apply(x10, x9)
    x12 = matcher(first, FIVE)
    x13 = compose(flip, x12)
    x14 = rbind(sfilter, x13)
    x15 = rbind(toobject, I)
    x16 = lbind(shift, x2)
    x17 = chain(x14, x15, x16)
    x18 = compose(color, x17)
    x19 = lbind(shift, x2)
    x20 = fork(recolor, x18, x19)
    x21 = mapply(x20, x11)
    x22 = paint(I, x21)
    O = downscale(x22, THREE)
    return O


def solve_56dc2b01(I):
    x1 = ofcolor(I, TWO)
    x2 = hline(x1)
    x3 = branch(x2, dmirror, identity)
    x4 = x3(I)
    x5 = fgpartition(x4)
    x6 = matcher(color, TWO)
    x7 = compose(flip, x6)
    x8 = extract(x5, x7)
    x9 = ofcolor(x4, TWO)
    x10 = leftmost(x9)
    x11 = leftmost(x8)
    x12 = greater(x10, x11)
    x13 = manhattan(x8, x9)
    x14 = decrement(x13)
    x15 = branch(x12, identity, invert)
    x16 = branch(x12, decrement, increment)
    x17 = branch(x12, leftmost, rightmost)
    x18 = x15(x14)
    x19 = tojvec(x18)
    x20 = shift(x8, x19)
    x21 = x17(x20)
    x22 = x16(x21)
    x23 = tojvec(x22)
    x24 = vfrontier(x23)
    x25 = cover(x4, x8)
    x26 = paint(x25, x20)
    x27 = fill(x26, EIGHT, x24)
    O = x3(x27)
    return O


def solve_56ff96f3(I):
    x1 = fgpartition(I)
    x2 = fork(recolor, color, backdrop)
    x3 = mapply(x2, x1)
    O = paint(I, x3)
    return O


def solve_57aa92db(I):
    x1 = objects(I, F, T, T)
    x2 = palette(I)
    x3 = lbind(sfilter, x1)
    x4 = rbind(compose, palette)
    x5 = lbind(lbind, contained)
    x6 = chain(x3, x4, x5)
    x7 = compose(size, x6)
    x8 = argmax(x2, x7)
    x9 = rbind(colorcount, x8)
    x10 = apply(x9, x1)
    x11 = minimum(x10)
    x12 = rbind(colorcount, x8)
    x13 = matcher(x12, x11)
    x14 = sfilter(x1, x13)
    x15 = argmax(x14, size)
    x16 = matcher(first, x8)
    x17 = rbind(sfilter, x16)
    x18 = lbind(upscale, x15)
    x19 = chain(x18, width, x17)
    x20 = compose(ulcorner, x17)
    x21 = chain(ulcorner, x17, x19)
    x22 = fork(subtract, x20, x21)
    x23 = fork(shift, x19, x22)
    x24 = rbind(other, x8)
    x25 = compose(x24, palette)
    x26 = compose(x17, x23)
    x27 = fork(difference, x23, x26)
    x28 = fork(recolor, x25, x27)
    x29 = compose(x17, x23)
    x30 = fork(combine, x29, x28)
    x31 = remove(x15, x1)
    x32 = mapply(x30, x31)
    O = paint(I, x32)
    return O


def solve_5ad4f10b(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = palette(I)
    x6 = remove(x4, x5)
    x7 = lbind(chain, size)
    x8 = rbind(x7, dneighbors)
    x9 = lbind(lbind, intersection)
    x10 = lbind(ofcolor, I)
    x11 = chain(x8, x9, x10)
    x12 = rbind(matcher, ZERO)
    x13 = compose(x12, x11)
    x14 = chain(flip, positive, size)
    x15 = lbind(ofcolor, I)
    x16 = fork(sfilter, x15, x13)
    x17 = compose(x14, x16)
    x18 = argmax(x6, x17)
    x19 = other(x6, x18)
    x20 = ofcolor(I, x18)
    x21 = subgrid(x20, I)
    x22 = switch(x21, x18, x19)
    x23 = replace(x22, x18, x4)
    x24 = lbind(downscale, x23)
    x25 = fork(upscale, x24, identity)
    x26 = matcher(x25, x23)
    x27 = shape(x23)
    x28 = maximum(x27)
    x29 = interval(ONE, x28, ONE)
    x30 = sfilter(x29, x26)
    x31 = maximum(x30)
    O = downscale(x23, x31)
    return O


def solve_5bd6f4ac(I):
    x1 = rot270(I)
    x2 = crop(x1, ORIGIN, THREE_BY_THREE)
    O = rot90(x2)
    return O


def solve_5c0a986e(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, TWO)
    x3 = colorfilter(x1, ONE)
    x4 = lbind(recolor, TWO)
    x5 = rbind(shoot, UNITY)
    x6 = chain(x4, x5, lrcorner)
    x7 = lbind(recolor, ONE)
    x8 = rbind(shoot, NEG_UNITY)
    x9 = chain(x7, x8, ulcorner)
    x10 = mapply(x6, x2)
    x11 = mapply(x9, x3)
    x12 = combine(x10, x11)
    O = paint(I, x12)
    return O


def solve_5c2c9af4(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = height(x2)
    x4 = halve(x3)
    x5 = width(x2)
    x6 = halve(x5)
    x7 = ulcorner(x2)
    x8 = lrcorner(x2)
    x9 = shape(I)
    x10 = maximum(x9)
    x11 = multiply(THREE, TEN)
    x12 = interval(ZERO, x11, ONE)
    x13 = rbind(multiply, x4)
    x14 = apply(x13, x12)
    x15 = rbind(multiply, x6)
    x16 = apply(x15, x12)
    x17 = pair(x14, x16)
    x18 = rbind(add, x7)
    x19 = apply(invert, x17)
    x20 = apply(x18, x19)
    x21 = rbind(add, x8)
    x22 = apply(x21, x17)
    x23 = pair(x20, x22)
    x24 = mapply(box, x23)
    O = fill(I, x1, x24)
    return O


def solve_5daaa586(I):
    x1 = mostcolor(I)
    x2 = objects(I, T, F, F)
    x3 = colorfilter(x2, x1)
    x4 = rbind(bordering, I)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    x7 = outbox(x6)
    x8 = subgrid(x7, I)
    x9 = trim(x8)
    x10 = palette(x9)
    x11 = matcher(identity, x1)
    x12 = argmin(x10, x11)
    x13 = trim(x8)
    x14 = ofcolor(x13, x12)
    x15 = shift(x14, UNITY)
    x16 = ofcolor(x8, x12)
    x17 = difference(x16, x15)
    x18 = compose(first, first)
    x19 = compose(first, last)
    x20 = fork(equality, x18, x19)
    x21 = compose(last, first)
    x22 = compose(last, last)
    x23 = fork(equality, x21, x22)
    x24 = fork(either, x20, x23)
    x25 = product(x15, x17)
    x26 = sfilter(x25, x24)
    x27 = fork(connect, first, last)
    x28 = mapply(x27, x26)
    O = fill(x8, x12, x28)
    return O


def solve_60b61512(I):
    x1 = objects(I, T, T, T)
    x2 = mapply(delta, x1)
    O = fill(I, SEVEN, x2)
    return O


def solve_6150a2bd(I):
    O = rot180(I)
    return O


def solve_623ea044(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = rbind(shoot, UNITY)
    x4 = rbind(shoot, NEG_UNITY)
    x5 = fork(combine, x3, x4)
    x6 = rbind(shoot, UP_RIGHT)
    x7 = rbind(shoot, DOWN_LEFT)
    x8 = fork(combine, x6, x7)
    x9 = fork(combine, x5, x8)
    x10 = mapply(x9, x2)
    O = fill(I, x1, x10)
    return O


def solve_62c24649(I):
    x1 = vmirror(I)
    x2 = hconcat(I, x1)
    x3 = hmirror(x2)
    O = vconcat(x2, x3)
    return O


def solve_63613498(I):
    x1 = objects(I, T, F, T)
    x2 = mostcolor(I)
    x3 = fork(add, height, width)
    x4 = compose(decrement, x3)
    x5 = fork(equality, x4, size)
    x6 = rbind(bordering, I)
    x7 = fork(both, x5, x6)
    x8 = rbind(toobject, I)
    x9 = chain(numcolors, x8, delta)
    x10 = matcher(x9, TWO)
    x11 = fork(both, x7, x10)
    x12 = sfilter(x1, x11)
    x13 = argmax(x12, size)
    x14 = delta(x13)
    x15 = toobject(x14, I)
    x16 = matcher(first, x2)
    x17 = compose(flip, x16)
    x18 = sfilter(x15, x17)
    x19 = normalize(x18)
    x20 = toindices(x19)
    x21 = compose(toindices, normalize)
    x22 = matcher(x21, x20)
    x23 = remove(x18, x1)
    x24 = argmax(x23, x22)
    x25 = color(x13)
    O = fill(I, x25, x24)
    return O


def solve_6430c8c4(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = size(x2)
    x4 = positive(x3)
    x5 = branch(x4, tophalf, lefthalf)
    x6 = branch(x4, bottomhalf, righthalf)
    x7 = x5(I)
    x8 = x6(I)
    x9 = shape(x7)
    x10 = palette(x7)
    x11 = palette(x8)
    x12 = intersection(x10, x11)
    x13 = first(x12)
    x14 = ofcolor(x7, x13)
    x15 = ofcolor(x8, x13)
    x16 = intersection(x14, x15)
    x17 = canvas(x13, x9)
    O = fill(x17, THREE, x16)
    return O


def solve_6455b5f5(I):
    x1 = objects(I, T, F, F)
    x2 = asindices(I)
    x3 = corners(x2)
    x4 = toobject(x3, I)
    x5 = mostcolor(x4)
    x6 = colorfilter(x1, x5)
    x7 = valmax(x6, size)
    x8 = valmin(x6, size)
    x9 = sizefilter(x6, x7)
    x10 = sizefilter(x6, x8)
    x11 = merge(x9)
    x12 = fill(I, ONE, x11)
    x13 = merge(x10)
    O = fill(x12, EIGHT, x13)
    return O


def solve_662c240a(I):
    x1 = portrait(I)
    x2 = branch(x1, vsplit, hsplit)
    x3 = shape(I)
    x4 = maximum(x3)
    x5 = minimum(x3)
    x6 = divide(x4, x5)
    x7 = x2(I, x6)
    x8 = fork(equality, identity, dmirror)
    x9 = compose(flip, x8)
    O = extract(x7, x9)
    return O


def solve_67385a82(I):
    x1 = objects(I, T, F, F)
    x2 = palette(I)
    x3 = other(x2, ZERO)
    x4 = colorfilter(x1, x3)
    x5 = sizefilter(x4, ONE)
    x6 = difference(x4, x5)
    x7 = merge(x6)
    O = fill(I, EIGHT, x7)
    return O


def solve_673ef223(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = palette(x2)
    x4 = lbind(colorfilter, x1)
    x5 = compose(size, x4)
    x6 = matcher(x5, TWO)
    x7 = asindices(I)
    x8 = box(x7)
    x9 = rbind(difference, x8)
    x10 = lbind(ofcolor, I)
    x11 = chain(size, x9, x10)
    x12 = matcher(x11, ZERO)
    x13 = rbind(greater, ONE)
    x14 = lbind(apply, size)
    x15 = lbind(colorfilter, x1)
    x16 = compose(x14, x15)
    x17 = chain(x13, minimum, x16)
    x18 = fork(both, x12, x17)
    x19 = fork(both, x6, x18)
    x20 = extract(x3, x19)
    x21 = other(x3, x20)
    x22 = ofcolor(I, x21)
    x23 = colorfilter(x1, x20)
    x24 = rbind(vmatching, x22)
    x25 = rbind(hmatching, x22)
    x26 = fork(either, x24, x25)
    x27 = extract(x23, x26)
    x28 = other(x23, x27)
    x29 = rbind(gravitate, x27)
    x30 = compose(x29, initset)
    x31 = fork(add, identity, x30)
    x32 = fork(connect, identity, x31)
    x33 = mapply(x32, x22)
    x34 = fill(I, x21, x33)
    x35 = fill(x34, FOUR, x22)
    x36 = ofcolor(I, x20)
    x37 = apply(first, x36)
    x38 = size(x37)
    x39 = apply(last, x36)
    x40 = size(x39)
    x41 = greater(x38, x40)
    x42 = compose(toivec, first)
    x43 = compose(tojvec, last)
    x44 = branch(x41, x42, x43)
    x45 = branch(x41, hfrontier, vfrontier)
    x46 = ulcorner(x27)
    x47 = ulcorner(x28)
    x48 = subtract(x47, x46)
    x49 = x44(x48)
    x50 = shift(x22, x49)
    x51 = mapply(x45, x50)
    x52 = fill(x35, x21, x51)
    O = fill(x52, x20, x36)
    return O


def solve_6773b310(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = shape(I)
    x5 = canvas(x3, x4)
    x6 = hconcat(I, x5)
    x7 = palette(I)
    x8 = remove(x3, x7)
    x9 = lbind(colorcount, I)
    x10 = argmin(x8, x9)
    x11 = other(x8, x10)
    x12 = objects(x6, F, T, T)
    x13 = rbind(colorcount, x10)
    x14 = valmax(x12, x13)
    x15 = rbind(colorcount, x10)
    x16 = matcher(x15, x14)
    x17 = sfilter(x12, x16)
    x18 = apply(ulcorner, x17)
    x19 = first(x12)
    x20 = shape(x19)
    x21 = increment(x20)
    x22 = rbind(divide, x21)
    x23 = apply(x22, x18)
    x24 = sfilter(x1, hline)
    x25 = size(x24)
    x26 = sfilter(x1, vline)
    x27 = size(x26)
    x28 = astuple(x25, x27)
    x29 = increment(x28)
    x30 = canvas(x11, x29)
    O = fill(x30, ONE, x23)
    return O


def solve_67a3c6ac(I):
    O = vmirror(I)
    return O


def solve_67a423a3(I):
    x1 = mostcolor(I)
    x2 = palette(I)
    x3 = remove(x1, x2)
    x4 = totuple(x3)
    x5 = first(x4)
    x6 = last(x4)
    x7 = ofcolor(I, x5)
    x8 = backdrop(x7)
    x9 = ofcolor(I, x6)
    x10 = backdrop(x9)
    x11 = intersection(x8, x10)
    x12 = outbox(x11)
    O = fill(I, FOUR, x12)
    return O


def solve_67e8384a(I):
    x1 = vmirror(I)
    x2 = hconcat(I, x1)
    x3 = hmirror(x2)
    O = vconcat(x2, x3)
    return O


def solve_681b3aeb(I):
    x1 = objects(I, T, T, T)
    x2 = totuple(x1)
    x3 = first(x2)
    x4 = normalize(x3)
    x5 = last(x2)
    x6 = normalize(x5)
    x7 = color(x4)
    x8 = color(x6)
    x9 = toindices(x4)
    x10 = toindices(x6)
    x11 = fork(multiply, height, width)
    x12 = fork(equality, size, x11)
    x13 = lbind(shift, x9)
    x14 = lbind(shift, x10)
    x15 = compose(x13, first)
    x16 = compose(x14, last)
    x17 = fork(intersection, x15, x16)
    x18 = compose(size, x17)
    x19 = compose(x13, first)
    x20 = compose(x14, last)
    x21 = fork(combine, x19, x20)
    x22 = compose(x12, x21)
    x23 = matcher(x18, ZERO)
    x24 = fork(both, x23, x22)
    x25 = valmax(x2, height)
    x26 = valmax(x2, width)
    x27 = interval(ZERO, x25, ONE)
    x28 = interval(ZERO, x26, ONE)
    x29 = product(x27, x28)
    x30 = product(x29, x29)
    x31 = argmax(x30, x24)
    x32 = first(x31)
    x33 = shift(x9, x32)
    x34 = last(x31)
    x35 = shift(x10, x34)
    x36 = combine(x33, x35)
    x37 = shape(x36)
    x38 = canvas(x8, x37)
    x39 = ulcorner(x36)
    x40 = invert(x39)
    x41 = shift(x33, x40)
    O = fill(x38, x7, x41)
    return O


def solve_6855a6e4(I):
    x1 = partition(I)
    x2 = fork(difference, toindices, box)
    x3 = compose(size, x2)
    x4 = matcher(x3, ZERO)
    x5 = rbind(add, FOUR)
    x6 = chain(x5, double, width)
    x7 = fork(equality, size, x6)
    x8 = chain(x5, double, height)
    x9 = fork(equality, size, x8)
    x10 = fork(either, x7, x9)
    x11 = fork(both, x4, x10)
    x12 = extract(x1, x11)
    x13 = toindices(x12)
    x14 = center(x12)
    x15 = vfrontier(x14)
    x16 = intersection(x13, x15)
    x17 = size(x16)
    x18 = positive(x17)
    x19 = branch(x18, dmirror, identity)
    x20 = x19(I)
    x21 = color(x12)
    x22 = palette(I)
    x23 = remove(x21, x22)
    x24 = lbind(colorcount, I)
    x25 = argmin(x23, x24)
    x26 = other(x23, x25)
    x27 = ofcolor(x20, x25)
    x28 = ofcolor(x20, x21)
    x29 = leftmost(x28)
    x30 = lbind(greater, x29)
    x31 = compose(x30, last)
    x32 = sfilter(x27, x31)
    x33 = difference(x27, x32)
    x34 = vmirror(x32)
    x35 = leftmost(x28)
    x36 = leftmost(x32)
    x37 = subtract(x35, x36)
    x38 = add(TWO, x37)
    x39 = tojvec(x38)
    x40 = shift(x34, x39)
    x41 = vmirror(x33)
    x42 = rightmost(x33)
    x43 = rightmost(x28)
    x44 = subtract(x42, x43)
    x45 = add(TWO, x44)
    x46 = tojvec(x45)
    x47 = invert(x46)
    x48 = shift(x41, x47)
    x49 = fill(x20, x26, x27)
    x50 = combine(x40, x48)
    x51 = fill(x49, x25, x50)
    O = x19(x51)
    return O


def solve_68b16354(I):
    O = hmirror(I)
    return O


def solve_694f12f3(I):
    x1 = objects(I, T, F, F)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = sfilter(x1, x3)
    x5 = compose(backdrop, inbox)
    x6 = argmin(x4, size)
    x7 = argmax(x4, size)
    x8 = x5(x6)
    x9 = x5(x7)
    x10 = fill(I, ONE, x8)
    O = fill(x10, TWO, x9)
    return O


def solve_6a1e5592(I):
    x1 = astuple(identity, dmirror)
    x2 = astuple(cmirror, hmirror)
    x3 = combine(x1, x2)
    x4 = fork(vsplit, identity, height)
    x5 = chain(asobject, first, x4)
    x6 = mostcolor(I)
    x7 = lbind(chain, numcolors)
    x8 = lbind(x7, x5)
    x9 = lbind(chain, color)
    x10 = lbind(x9, x5)
    x11 = rbind(rapply, I)
    x12 = compose(initset, x8)
    x13 = chain(first, x11, x12)
    x14 = rbind(rapply, I)
    x15 = compose(initset, x10)
    x16 = chain(first, x14, x15)
    x17 = matcher(x13, ONE)
    x18 = matcher(x16, x6)
    x19 = compose(flip, x18)
    x20 = fork(both, x17, x19)
    x21 = argmax(x3, x20)
    x22 = x21(I)
    x23 = x5(x22)
    x24 = color(x23)
    x25 = palette(x22)
    x26 = remove(x24, x25)
    x27 = other(x26, x6)
    x28 = objects(x22, T, T, T)
    x29 = colorfilter(x28, x27)
    x30 = ofcolor(x22, x24)
    x31 = ofcolor(x22, x6)
    x32 = mapply(neighbors, x31)
    x33 = mapply(neighbors, x32)
    x34 = lowermost(x30)
    x35 = dneighbors(ORIGIN)
    x36 = remove(DOWN, x35)
    x37 = rbind(mapply, x36)
    x38 = lbind(chain, x37)
    x39 = lbind(lbind, add)
    x40 = rbind(x38, x39)
    x41 = lbind(lbind, compose)
    x42 = lbind(lbind, shift)
    x43 = chain(x40, x41, x42)
    x44 = lbind(chain, size)
    x45 = rbind(intersection, x30)
    x46 = lbind(x44, x45)
    x47 = rbind(matcher, ZERO)
    x48 = lbind(lbind, shift)
    x49 = chain(x47, x46, x48)
    x50 = rbind(chain, first)
    x51 = rbind(x50, decrement)
    x52 = lbind(greater, x34)
    x53 = x51(x52)
    x54 = rbind(sfilter, x53)
    x55 = lbind(compose, x54)
    x56 = lbind(chain, size)
    x57 = rbind(difference, x31)
    x58 = lbind(x56, x57)
    x59 = rbind(matcher, ZERO)
    x60 = lbind(lbind, shift)
    x61 = chain(x59, x58, x60)
    x62 = lbind(chain, size)
    x63 = rbind(intersection, x31)
    x64 = lbind(x62, x63)
    x65 = lbind(fork, difference)
    x66 = compose(x55, x43)
    x67 = lbind(lbind, shift)
    x68 = fork(x65, x66, x67)
    x69 = compose(x64, x68)
    x70 = rbind(matcher, ZERO)
    x71 = compose(x70, x69)
    x72 = lbind(fork, both)
    x73 = fork(x72, x71, x61)
    x74 = lbind(fork, both)
    x75 = fork(x74, x49, x73)
    x76 = compose(normalize, toindices)
    x77 = lbind(sfilter, x33)
    x78 = chain(x77, x75, x76)
    x79 = rbind(argmin, first)
    x80 = compose(x79, x78)
    x81 = fork(shift, x76, x80)
    x82 = mapply(x81, x29)
    x83 = merge(x29)
    x84 = cover(x22, x83)
    x85 = fill(x84, ONE, x82)
    O = x21(x85)
    return O


def solve_6aa20dc0(I):
    x1 = objects(I, F, T, T)
    x2 = mostcolor(I)
    x3 = valmax(x1, numcolors)
    x4 = matcher(numcolors, x3)
    x5 = mfilter(x1, x4)
    x6 = backdrop(x5)
    x7 = toobject(x6, I)
    x8 = matcher(first, x2)
    x9 = compose(flip, x8)
    x10 = sfilter(x7, x9)
    x11 = mostcolor(x10)
    x12 = initset(identity)
    x13 = insert(dmirror, x12)
    x14 = insert(cmirror, x13)
    x15 = insert(hmirror, x14)
    x16 = insert(vmirror, x15)
    x17 = shape(I)
    x18 = add(TWO, x17)
    x19 = canvas(x2, x18)
    x20 = asobject(I)
    x21 = shift(x20, UNITY)
    x22 = paint(x19, x21)
    x23 = interval(ONE, FIVE, ONE)
    x24 = matcher(first, x11)
    x25 = compose(flip, x24)
    x26 = rbind(sfilter, x25)
    x27 = compose(normalize, x26)
    x28 = chain(normalize, toindices, x27)
    x29 = lbind(upscale, x10)
    x30 = compose(initset, last)
    x31 = compose(x29, first)
    x32 = fork(rapply, x30, x31)
    x33 = chain(normalize, first, x32)
    x34 = compose(normalize, x27)
    x35 = lbind(recolor, x2)
    x36 = lbind(mapply, dneighbors)
    x37 = compose(x36, x28)
    x38 = fork(difference, x37, x28)
    x39 = compose(x35, x38)
    x40 = fork(combine, x34, x39)
    x41 = compose(x40, x33)
    x42 = lbind(lbind, shift)
    x43 = chain(ulcorner, x27, x33)
    x44 = fork(shift, x33, x43)
    x45 = compose(x42, x44)
    x46 = lbind(occurrences, x22)
    x47 = compose(x46, x41)
    x48 = fork(mapply, x45, x47)
    x49 = product(x23, x16)
    x50 = mapply(x48, x49)
    O = paint(I, x50)
    return O


def solve_6b9890af(I):
    x1 = objects(I, T, T, T)
    x2 = fork(equality, toindices, box)
    x3 = sfilter(x1, x2)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = fgpartition(I)
    x7 = merge(x6)
    x8 = difference(x7, x5)
    x9 = subgrid(x5, I)
    x10 = subgrid(x8, I)
    x11 = height(x9)
    x12 = subtract(x11, TWO)
    x13 = height(x10)
    x14 = divide(x12, x13)
    x15 = width(x9)
    x16 = subtract(x15, TWO)
    x17 = width(x10)
    x18 = divide(x16, x17)
    x19 = hupscale(x10, x18)
    x20 = vupscale(x19, x14)
    x21 = asobject(x20)
    x22 = shift(x21, UNITY)
    O = paint(x9, x22)
    return O


def solve_6c434453(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(greater, TWO)
    x3 = chain(x2, minimum, shape)
    x4 = sfilter(x1, x3)
    x5 = fork(equality, toindices, box)
    x6 = sfilter(x4, x5)
    x7 = mostcolor(I)
    x8 = merge(x6)
    x9 = fill(I, x7, x8)
    x10 = compose(hfrontier, center)
    x11 = compose(vfrontier, center)
    x12 = fork(combine, x10, x11)
    x13 = fork(intersection, x12, backdrop)
    x14 = mapply(x13, x6)
    O = fill(x9, TWO, x14)
    return O


def solve_6cdd2623(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = rbind(difference, x2)
    x4 = chain(size, x3, toindices)
    x5 = matcher(x4, ZERO)
    x6 = partition(I)
    x7 = sfilter(x6, x5)
    x8 = argmax(x7, size)
    x9 = color(x8)
    x10 = toindices(x8)
    x11 = fork(either, hline, vline)
    x12 = prapply(connect, x10, x10)
    x13 = compose(flip, x5)
    x14 = fork(both, x13, x11)
    x15 = mfilter(x12, x14)
    x16 = mostcolor(I)
    x17 = shape(I)
    x18 = canvas(x16, x17)
    O = fill(x18, x9, x15)
    return O


def solve_6cf79266(I):
    x1 = canvas(ZERO, THREE_BY_THREE)
    x2 = asobject(x1)
    x3 = occurrences(I, x2)
    x4 = lbind(shift, x2)
    x5 = mapply(x4, x3)
    O = fill(I, ONE, x5)
    return O


def solve_6d0160f0(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = mostcolor(x2)
    x4 = shape(I)
    x5 = canvas(NEG_ONE, x4)
    x6 = hconcat(I, x5)
    x7 = fill(x6, NEG_ONE, x2)
    x8 = objects(x7, F, F, T)
    x9 = lbind(contained, FOUR)
    x10 = compose(x9, palette)
    x11 = extract(x8, x10)
    x12 = lbind(sfilter, x8)
    x13 = compose(size, x12)
    x14 = rbind(compose, palette)
    x15 = lbind(lbind, contained)
    x16 = chain(x13, x14, x15)
    x17 = merge(x8)
    x18 = palette(I)
    x19 = remove(x3, x18)
    x20 = valmax(x19, x16)
    x21 = matcher(x16, x20)
    x22 = sfilter(x19, x21)
    x23 = lbind(colorcount, x17)
    x24 = argmax(x22, x23)
    x25 = shape(I)
    x26 = canvas(x24, x25)
    x27 = paint(x26, x2)
    x28 = normalize(x11)
    x29 = matcher(first, x3)
    x30 = compose(flip, x29)
    x31 = sfilter(x28, x30)
    x32 = shape(x28)
    x33 = increment(x32)
    x34 = matcher(first, FOUR)
    x35 = sfilter(x28, x34)
    x36 = center(x35)
    x37 = multiply(x33, x36)
    x38 = shift(x31, x37)
    O = paint(x27, x38)
    return O


def solve_6d0aefbc(I):
    x1 = vmirror(I)
    O = hconcat(I, x1)
    return O


def solve_6d58a25d(I):
    x1 = astuple(ONE, THREE)
    x2 = astuple(TWO, FOUR)
    x3 = initset(x2)
    x4 = insert(TWO_BY_TWO, x3)
    x5 = insert(x1, x4)
    x6 = tojvec(THREE)
    x7 = toivec(THREE)
    x8 = connect(x6, x7)
    x9 = astuple(THREE, SIX)
    x10 = connect(x6, x9)
    x11 = combine(x8, x10)
    x12 = combine(x5, x11)
    x13 = lbind(contained, x12)
    x14 = compose(normalize, toindices)
    x15 = lbind(apply, x14)
    x16 = chain(x13, x15, partition)
    x17 = astuple(identity, identity)
    x18 = astuple(rot90, rot270)
    x19 = astuple(x17, x18)
    x20 = astuple(rot180, rot180)
    x21 = astuple(rot270, rot90)
    x22 = astuple(x20, x21)
    x23 = combine(x19, x22)
    x24 = rbind(rapply, I)
    x25 = compose(initset, first)
    x26 = chain(first, x24, x25)
    x27 = compose(x16, x26)
    x28 = extract(x23, x27)
    x29 = first(x28)
    x30 = last(x28)
    x31 = x29(I)
    x32 = palette(I)
    x33 = lbind(ofcolor, x31)
    x34 = compose(normalize, x33)
    x35 = matcher(x34, x12)
    x36 = extract(x32, x35)
    x37 = remove(x36, x32)
    x38 = lbind(colorcount, x31)
    x39 = argmin(x37, x38)
    x40 = ofcolor(x31, x39)
    x41 = ofcolor(x31, x36)
    x42 = compose(positive, size)
    x43 = rbind(intersection, x41)
    x44 = rbind(shoot, UP)
    x45 = chain(x42, x43, x44)
    x46 = sfilter(x40, x45)
    x47 = height(x31)
    x48 = rbind(valmax, first)
    x49 = lbind(sfilter, x41)
    x50 = lbind(matcher, last)
    x51 = chain(x49, x50, last)
    x52 = chain(increment, x48, x51)
    x53 = fork(astuple, x52, last)
    x54 = decrement(x47)
    x55 = lbind(astuple, x54)
    x56 = compose(x55, last)
    x57 = fork(connect, x53, x56)
    x58 = mapply(x57, x46)
    x59 = fill(x31, x39, x58)
    O = x30(x59)
    return O


def solve_6d75e8bb(I):
    x1 = partition(I)
    x2 = argmin(x1, size)
    x3 = delta(x2)
    O = fill(I, TWO, x3)
    return O


def solve_6e02f1e3(I):
    x1 = numcolors(I)
    x2 = equality(x1, THREE)
    x3 = height(I)
    x4 = decrement(x3)
    x5 = toivec(x4)
    x6 = branch(x2, x5, ORIGIN)
    x7 = equality(x1, TWO)
    x8 = shape(I)
    x9 = decrement(x8)
    x10 = width(I)
    x11 = decrement(x10)
    x12 = tojvec(x11)
    x13 = branch(x7, x9, x12)
    x14 = shape(I)
    x15 = canvas(ZERO, x14)
    x16 = connect(x6, x13)
    O = fill(x15, FIVE, x16)
    return O


def solve_6e19193c(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(shoot, UNITY)
    x3 = rbind(add, UNITY)
    x4 = chain(x2, x3, lrcorner)
    x5 = fork(recolor, color, x4)
    x6 = rbind(shoot, UP_RIGHT)
    x7 = rbind(add, UP_RIGHT)
    x8 = chain(x6, x7, urcorner)
    x9 = fork(recolor, color, x8)
    x10 = rbind(shoot, NEG_UNITY)
    x11 = rbind(add, NEG_UNITY)
    x12 = chain(x10, x11, ulcorner)
    x13 = fork(recolor, color, x12)
    x14 = rbind(shoot, DOWN_LEFT)
    x15 = rbind(add, DOWN_LEFT)
    x16 = chain(x14, x15, llcorner)
    x17 = fork(recolor, color, x16)
    x18 = fork(remove, lrcorner, toindices)
    x19 = fork(equality, toindices, x18)
    x20 = sfilter(x1, x19)
    x21 = fork(remove, urcorner, toindices)
    x22 = fork(equality, toindices, x21)
    x23 = sfilter(x1, x22)
    x24 = fork(remove, ulcorner, toindices)
    x25 = fork(equality, toindices, x24)
    x26 = sfilter(x1, x25)
    x27 = fork(remove, llcorner, toindices)
    x28 = fork(equality, toindices, x27)
    x29 = sfilter(x1, x28)
    x30 = mapply(x5, x20)
    x31 = mapply(x9, x23)
    x32 = combine(x30, x31)
    x33 = mapply(x13, x26)
    x34 = mapply(x17, x29)
    x35 = combine(x33, x34)
    x36 = combine(x32, x35)
    O = paint(I, x36)
    return O


def solve_6e82a1ae(I):
    x1 = objects(I, T, F, T)
    x2 = matcher(size, TWO)
    x3 = mfilter(x1, x2)
    x4 = matcher(size, THREE)
    x5 = mfilter(x1, x4)
    x6 = matcher(size, FOUR)
    x7 = mfilter(x1, x6)
    x8 = fill(I, THREE, x3)
    x9 = fill(x8, TWO, x5)
    O = fill(x9, ONE, x7)
    return O


def solve_6ecd11f4(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = argmin(x1, numcolors)
    x4 = mostcolor(I)
    x5 = shape(x3)
    x6 = canvas(x4, x5)
    x7 = normalize(x3)
    x8 = paint(x6, x7)
    x9 = height(x2)
    x10 = width(x2)
    x11 = height(x3)
    x12 = width(x3)
    x13 = normalize(x2)
    x14 = divide(x11, x9)
    x15 = divide(x12, x10)
    x16 = width(x8)
    x17 = interval(ZERO, x16, ONE)
    x18 = height(x8)
    x19 = interval(ZERO, x18, ONE)
    x20 = rbind(multiply, x15)
    x21 = rbind(divide, x15)
    x22 = compose(x20, x21)
    x23 = fork(equality, identity, x22)
    x24 = rbind(multiply, x14)
    x25 = rbind(divide, x14)
    x26 = compose(x24, x25)
    x27 = fork(equality, identity, x26)
    x28 = lbind(apply, last)
    x29 = compose(x23, first)
    x30 = rbind(sfilter, x29)
    x31 = lbind(pair, x17)
    x32 = chain(x28, x30, x31)
    x33 = compose(x32, last)
    x34 = pair(x19, x8)
    x35 = compose(x27, first)
    x36 = sfilter(x34, x35)
    x37 = apply(x33, x36)
    x38 = color(x3)
    x39 = ofcolor(x37, x38)
    x40 = rbind(contained, x39)
    x41 = compose(x40, last)
    x42 = sfilter(x13, x41)
    O = paint(x37, x42)
    return O


def solve_6f8cd79b(I):
    x1 = asindices(I)
    x2 = box(x1)
    O = fill(I, EIGHT, x2)
    return O


def solve_6fa7a44f(I):
    x1 = hmirror(I)
    O = vconcat(I, x1)
    return O


def solve_72322fa7(I):
    x1 = objects(I, F, T, T)
    x2 = matcher(numcolors, TWO)
    x3 = sfilter(x1, x2)
    x4 = apply(normalize, x3)
    x5 = chain(first, totuple, palette)
    x6 = chain(last, totuple, palette)
    x7 = lbind(matcher, first)
    x8 = compose(x7, x5)
    x9 = lbind(matcher, first)
    x10 = compose(x9, x6)
    x11 = fork(sfilter, identity, x8)
    x12 = fork(sfilter, identity, x10)
    x13 = lbind(occurrences, I)
    x14 = chain(invert, ulcorner, x11)
    x15 = chain(invert, ulcorner, x12)
    x16 = lbind(lbind, shift)
    x17 = fork(shift, identity, x14)
    x18 = fork(shift, identity, x15)
    x19 = compose(x16, x17)
    x20 = compose(x13, x11)
    x21 = fork(mapply, x19, x20)
    x22 = compose(x16, x18)
    x23 = compose(x13, x12)
    x24 = fork(mapply, x22, x23)
    x25 = fork(combine, x21, x24)
    x26 = mapply(x25, x4)
    O = paint(I, x26)
    return O


def solve_72ca375d(I):
    x1 = objects(I, T, T, T)
    x2 = fork(equality, identity, vmirror)
    x3 = extract(x1, x2)
    O = subgrid(x3, I)
    return O


def solve_73251a56(I):
    x1 = palette(I)
    x2 = asindices(I)
    x3 = urcorner(x2)
    x4 = index(I, ORIGIN)
    x5 = shoot(ORIGIN, UNITY)
    x6 = recolor(x4, x5)
    x7 = index(I, x3)
    x8 = shoot(x3, DOWN_LEFT)
    x9 = recolor(x7, x8)
    x10 = astuple(dmirror, x6)
    x11 = astuple(cmirror, x9)
    x12 = initset(x11)
    x13 = insert(x10, x12)
    x14 = product(x1, x13)
    x15 = asobject(I)
    x16 = lbind(sfilter, x15)
    x17 = lbind(compose, flip)
    x18 = lbind(matcher, first)
    x19 = chain(x16, x17, x18)
    x20 = lbind(paint, I)
    x21 = compose(last, last)
    x22 = compose(first, last)
    x23 = lbind(fork, equality)
    x24 = rbind(x23, identity)
    x25 = compose(x19, first)
    x26 = compose(x24, x22)
    x27 = compose(initset, x22)
    x28 = fork(rapply, x27, x25)
    x29 = compose(first, x28)
    x30 = compose(x20, x29)
    x31 = fork(paint, x30, x21)
    x32 = compose(initset, x26)
    x33 = fork(rapply, x32, x31)
    x34 = compose(first, x33)
    x35 = sfilter(x14, x34)
    x36 = lbind(colorcount, I)
    x37 = compose(x36, first)
    x38 = argmin(x35, x37)
    x39 = first(x38)
    x40 = last(x38)
    x41 = first(x40)
    x42 = last(x38)
    x43 = last(x42)
    x44 = x19(x39)
    x45 = x41(x44)
    x46 = paint(I, x45)
    x47 = paint(x46, x43)
    x48 = ofcolor(x47, x39)
    x49 = mapply(dneighbors, x48)
    x50 = difference(x49, x48)
    x51 = toobject(x50, x47)
    x52 = size(x51)
    x53 = positive(x52)
    x54 = rbind(astuple, x39)
    x55 = compose(last, x54)
    x56 = branch(x53, mostcolor, x55)
    x57 = x56(x51)
    O = replace(x47, x39, x57)
    return O


def solve_7447852a(I):
    x1 = index(I, ORIGIN)
    x2 = shape(I)
    x3 = canvas(x1, x2)
    x4 = hconcat(I, x3)
    x5 = objects(x4, F, F, T)
    x6 = compose(last, centerofmass)
    x7 = order(x5, x6)
    x8 = size(x7)
    x9 = interval(ZERO, x8, ONE)
    x10 = pair(x7, x9)
    x11 = rbind(multiply, THREE)
    x12 = rbind(divide, THREE)
    x13 = chain(x11, x12, last)
    x14 = fork(equality, last, x13)
    x15 = sfilter(x10, x14)
    x16 = mapply(first, x15)
    O = fill(I, FOUR, x16)
    return O


def solve_7468f01a(I):
    x1 = compress(I)
    O = vmirror(x1)
    return O


def solve_746b3537(I):
    x1 = first(I)
    x2 = dedupe(x1)
    x3 = size(x2)
    x4 = equality(ONE, x3)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(I)
    x7 = objects(x6, T, F, F)
    x8 = order(x7, leftmost)
    x9 = apply(color, x8)
    x10 = repeat(x9, ONE)
    O = x5(x10)
    return O


def solve_74dd1130(I):
    O = dmirror(I)
    return O


def solve_75b8110e(I):
    x1 = tophalf(I)
    x2 = lefthalf(x1)
    x3 = tophalf(I)
    x4 = righthalf(x3)
    x5 = bottomhalf(I)
    x6 = righthalf(x5)
    x7 = bottomhalf(I)
    x8 = lefthalf(x7)
    x9 = palette(x2)
    x10 = palette(x4)
    x11 = intersection(x9, x10)
    x12 = palette(x6)
    x13 = palette(x8)
    x14 = intersection(x12, x13)
    x15 = intersection(x11, x14)
    x16 = first(x15)
    x17 = shape(x2)
    x18 = canvas(x16, x17)
    x19 = matcher(first, x16)
    x20 = compose(flip, x19)
    x21 = rbind(sfilter, x20)
    x22 = compose(x21, asobject)
    x23 = x22(x2)
    x24 = x22(x6)
    x25 = x22(x8)
    x26 = x22(x4)
    x27 = paint(x18, x23)
    x28 = paint(x27, x24)
    x29 = paint(x28, x25)
    O = paint(x29, x26)
    return O


def solve_760b3cac(I):
    x1 = fgpartition(I)
    x2 = matcher(shape, THREE_BY_THREE)
    x3 = matcher(size, FIVE)
    x4 = fork(intersection, toindices, box)
    x5 = compose(size, x4)
    x6 = matcher(x5, FOUR)
    x7 = fork(intersection, toindices, corners)
    x8 = compose(size, x7)
    x9 = matcher(x8, ONE)
    x10 = fork(both, x2, x3)
    x11 = fork(both, x6, x9)
    x12 = fork(both, x10, x11)
    x13 = extract(x1, x12)
    x14 = toindices(x13)
    x15 = lowermost(x13)
    x16 = matcher(first, x15)
    x17 = uppermost(x13)
    x18 = matcher(first, x17)
    x19 = rightmost(x13)
    x20 = matcher(last, x19)
    x21 = leftmost(x13)
    x22 = matcher(last, x21)
    x23 = sfilter(x14, x16)
    x24 = size(x23)
    x25 = equality(x24, TWO)
    x26 = sfilter(x14, x18)
    x27 = size(x26)
    x28 = equality(x27, TWO)
    x29 = sfilter(x14, x20)
    x30 = size(x29)
    x31 = equality(x30, TWO)
    x32 = sfilter(x14, x22)
    x33 = size(x32)
    x34 = equality(x33, TWO)
    x35 = either(x25, x28)
    x36 = branch(x35, hmirror, vmirror)
    x37 = multiply(x25, DOWN)
    x38 = multiply(x28, UP)
    x39 = add(x37, x38)
    x40 = multiply(x31, RIGHT)
    x41 = multiply(x34, LEFT)
    x42 = add(x40, x41)
    x43 = add(x39, x42)
    x44 = other(x1, x13)
    x45 = x36(x44)
    x46 = shape(x44)
    x47 = multiply(x46, x43)
    x48 = shift(x45, x47)
    O = paint(I, x48)
    return O


def solve_776ffc46(I):
    x1 = objects(I, T, F, T)
    x2 = fork(equality, toindices, box)
    x3 = sfilter(x1, x2)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = mostcolor(I)
    x7 = inbox(x5)
    x8 = backdrop(x7)
    x9 = toobject(x8, I)
    x10 = matcher(first, x6)
    x11 = compose(flip, x10)
    x12 = sfilter(x9, x11)
    x13 = normalize(x12)
    x14 = color(x13)
    x15 = toindices(x13)
    x16 = compose(toindices, normalize)
    x17 = matcher(x16, x15)
    x18 = mfilter(x1, x17)
    O = fill(I, x14, x18)
    return O


def solve_77fdfe62(I):
    x1 = trim(I)
    x2 = trim(x1)
    x3 = tophalf(x2)
    x4 = lefthalf(x3)
    x5 = tophalf(x2)
    x6 = righthalf(x5)
    x7 = bottomhalf(x2)
    x8 = lefthalf(x7)
    x9 = bottomhalf(x2)
    x10 = righthalf(x9)
    x11 = index(I, ORIGIN)
    x12 = width(I)
    x13 = decrement(x12)
    x14 = tojvec(x13)
    x15 = index(I, x14)
    x16 = height(I)
    x17 = decrement(x16)
    x18 = toivec(x17)
    x19 = index(I, x18)
    x20 = shape(I)
    x21 = decrement(x20)
    x22 = index(I, x21)
    x23 = compress(I)
    x24 = asindices(x23)
    x25 = box(x24)
    x26 = corners(x24)
    x27 = difference(x25, x26)
    x28 = toobject(x27, x23)
    x29 = color(x28)
    x30 = palette(x2)
    x31 = other(x30, x29)
    x32 = replace(x4, x31, x11)
    x33 = replace(x6, x31, x15)
    x34 = replace(x8, x31, x19)
    x35 = replace(x10, x31, x22)
    x36 = hconcat(x32, x33)
    x37 = hconcat(x34, x35)
    O = vconcat(x36, x37)
    return O


def solve_780d0b14(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = merge(x1)
    x5 = fill(I, NEG_ONE, x4)
    x6 = shape(I)
    x7 = canvas(NEG_ONE, x6)
    x8 = hconcat(x5, x7)
    x9 = objects(x8, F, F, T)
    x10 = rbind(other, x3)
    x11 = compose(x10, palette)
    x12 = fork(astuple, x11, ulcorner)
    x13 = apply(x12, x9)
    x14 = merge(x9)
    x15 = fill(I, x3, x14)
    x16 = paint(x15, x13)
    O = compress(x16)
    return O


def solve_7837ac64(I):
    x1 = objects(I, T, F, F)
    x2 = fork(equality, toindices, backdrop)
    x3 = sfilter(x1, x2)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = color(x5)
    x7 = palette(I)
    x8 = remove(x6, x7)
    x9 = lbind(colorcount, I)
    x10 = argmax(x8, x9)
    x11 = remove(x10, x8)
    x12 = lbind(ofcolor, I)
    x13 = mapply(x12, x11)
    x14 = subgrid(x13, I)
    x15 = objects(x14, T, F, F)
    x16 = colorfilter(x15, x6)
    x17 = initset(x10)
    x18 = insert(x6, x17)
    x19 = lbind(intersection, x18)
    x20 = chain(positive, size, x19)
    x21 = chain(positive, decrement, size)
    x22 = fork(either, x20, x21)
    x23 = rbind(toobject, x14)
    x24 = compose(corners, outbox)
    x25 = chain(palette, x23, x24)
    x26 = rbind(branch, x6)
    x27 = chain(flip, x22, x25)
    x28 = compose(first, x25)
    x29 = fork(x26, x27, x28)
    x30 = apply(uppermost, x16)
    x31 = order(x30, identity)
    x32 = lbind(apply, x29)
    x33 = rbind(order, leftmost)
    x34 = lbind(sfilter, x16)
    x35 = lbind(matcher, uppermost)
    x36 = compose(x34, x35)
    x37 = chain(x32, x33, x36)
    O = apply(x37, x31)
    return O


def solve_794b24be(I):
    x1 = palette(I)
    x2 = remove(ONE, x1)
    x3 = lbind(colorcount, I)
    x4 = argmax(x2, x3)
    x5 = canvas(x4, THREE_BY_THREE)
    x6 = colorcount(I, ONE)
    x7 = decrement(x6)
    x8 = tojvec(x7)
    x9 = connect(ORIGIN, x8)
    x10 = fill(x5, TWO, x9)
    x11 = initset(UNITY)
    x12 = equality(x6, FOUR)
    x13 = branch(x12, x11, x9)
    O = fill(x10, TWO, x13)
    return O


def solve_7b6016b9(I):
    x1 = objects(I, T, F, F)
    x2 = asindices(I)
    x3 = box(x2)
    x4 = toobject(x3, I)
    x5 = mostcolor(x4)
    x6 = colorfilter(x1, x5)
    x7 = rbind(bordering, I)
    x8 = compose(flip, x7)
    x9 = mfilter(x6, x8)
    x10 = fill(I, TWO, x9)
    O = replace(x10, x5, THREE)
    return O


def solve_7b7f7511(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = equality(x1, x2)
    x4 = branch(x3, lefthalf, tophalf)
    O = x4(I)
    return O


def solve_7c008303(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = shape(I)
    x5 = canvas(x3, x4)
    x6 = hconcat(I, x5)
    x7 = objects(x6, F, F, T)
    x8 = argmin(x7, size)
    x9 = argmax(x7, size)
    x10 = remove(x9, x7)
    x11 = remove(x8, x10)
    x12 = merge(x11)
    x13 = color(x12)
    x14 = subgrid(x9, I)
    x15 = subgrid(x8, I)
    x16 = width(x9)
    x17 = halve(x16)
    x18 = hupscale(x15, x17)
    x19 = height(x9)
    x20 = halve(x19)
    x21 = vupscale(x18, x20)
    x22 = asobject(x21)
    x23 = asindices(x14)
    x24 = ofcolor(x14, x13)
    x25 = difference(x23, x24)
    x26 = rbind(contained, x25)
    x27 = compose(x26, last)
    x28 = sfilter(x22, x27)
    O = paint(x14, x28)
    return O


def solve_7ddcd7ec(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = lbind(position, x2)
    x5 = fork(shoot, center, x4)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x3)
    O = paint(I, x7)
    return O


def solve_7df24a62(I):
    x1 = partition(I)
    x2 = compose(maximum, shape)
    x3 = argmin(x1, x2)
    x4 = color(x3)
    x5 = palette(I)
    x6 = remove(x4, x5)
    x7 = lbind(colorcount, I)
    x8 = argmin(x6, x7)
    x9 = mostcolor(I)
    x10 = shape(I)
    x11 = increment(x10)
    x12 = increment(x11)
    x13 = canvas(x9, x12)
    x14 = asobject(I)
    x15 = shift(x14, UNITY)
    x16 = paint(x13, x15)
    x17 = repeat(identity, ONE)
    x18 = astuple(cmirror, dmirror)
    x19 = astuple(hmirror, vmirror)
    x20 = combine(x18, x19)
    x21 = combine(x17, x20)
    x22 = fork(compose, first, last)
    x23 = product(x21, x21)
    x24 = apply(x22, x23)
    x25 = ofcolor(x16, x4)
    x26 = backdrop(x25)
    x27 = toobject(x26, x16)
    x28 = matcher(first, x8)
    x29 = rbind(sfilter, x28)
    x30 = matcher(first, x4)
    x31 = rbind(sfilter, x30)
    x32 = lbind(recolor, x9)
    x33 = compose(x32, x31)
    x34 = fork(combine, x29, x33)
    x35 = lbind(lbind, shift)
    x36 = lbind(occurrences, x16)
    x37 = compose(x36, x34)
    x38 = fork(mapply, x35, x37)
    x39 = lbind(chain, x38)
    x40 = lbind(x39, normalize)
    x41 = rbind(rapply, x27)
    x42 = initset(x40)
    x43 = lbind(rapply, x42)
    x44 = chain(first, x41, x43)
    x45 = mapply(x44, x24)
    x46 = paint(x16, x45)
    O = trim(x46)
    return O


def solve_7e0986d6(I):
    x1 = mostcolor(I)
    x2 = objects(I, T, F, T)
    x3 = lbind(greater, THREE)
    x4 = compose(x3, size)
    x5 = sfilter(x2, x4)
    x6 = mapply(toindices, x5)
    x7 = fill(I, x1, x6)
    x8 = objects(x7, T, F, T)
    x9 = fork(recolor, color, backdrop)
    x10 = mapply(x9, x8)
    O = paint(x7, x10)
    return O


def solve_7f4411dc(I):
    x1 = objects(I, T, F, F)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = mostcommon(x3)
    x5 = canvas(x4, TWO_BY_TWO)
    x6 = asobject(x5)
    x7 = palette(I)
    x8 = matcher(identity, x4)
    x9 = argmin(x7, x8)
    x10 = shape(I)
    x11 = canvas(x9, x10)
    x12 = lbind(shift, x6)
    x13 = occurrences(I, x6)
    x14 = mapply(x12, x13)
    O = paint(x11, x14)
    return O


def solve_7fe24cdd(I):
    x1 = rot90(I)
    x2 = rot180(I)
    x3 = rot270(I)
    x4 = hconcat(I, x1)
    x5 = hconcat(x3, x2)
    O = vconcat(x4, x5)
    return O


def solve_80af3007(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmin(x1, x2)
    x4 = color(x3)
    x5 = palette(I)
    x6 = other(x5, x4)
    x7 = subgrid(x3, I)
    x8 = fork(multiply, identity, identity)
    x9 = width(x7)
    x10 = matcher(x8, x9)
    x11 = fork(multiply, identity, identity)
    x12 = height(x7)
    x13 = matcher(x11, x12)
    x14 = width(x7)
    x15 = interval(ONE, x14, ONE)
    x16 = extract(x15, x10)
    x17 = height(x7)
    x18 = interval(ONE, x17, ONE)
    x19 = extract(x18, x13)
    x20 = width(x7)
    x21 = interval(ZERO, x20, ONE)
    x22 = height(x7)
    x23 = interval(ZERO, x22, ONE)
    x24 = rbind(multiply, x16)
    x25 = rbind(divide, x16)
    x26 = compose(x24, x25)
    x27 = fork(equality, identity, x26)
    x28 = compose(x27, last)
    x29 = rbind(multiply, x19)
    x30 = rbind(divide, x19)
    x31 = compose(x29, x30)
    x32 = fork(equality, identity, x31)
    x33 = compose(x32, last)
    x34 = lbind(apply, first)
    x35 = rbind(sfilter, x28)
    x36 = rbind(pair, x21)
    x37 = chain(x34, x35, x36)
    x38 = pair(x7, x23)
    x39 = sfilter(x38, x33)
    x40 = apply(first, x39)
    x41 = apply(x37, x40)
    x42 = shape(x41)
    x43 = multiply(x42, x42)
    x44 = canvas(x6, x43)
    x45 = ofcolor(x41, x4)
    x46 = rbind(multiply, x42)
    x47 = apply(x46, x45)
    x48 = lbind(shift, x45)
    x49 = mapply(x48, x47)
    O = fill(x44, x4, x49)
    return O


def solve_810b9b61(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(greater, TWO)
    x3 = chain(x2, minimum, shape)
    x4 = fork(equality, toindices, box)
    x5 = fork(both, x3, x4)
    x6 = mfilter(x1, x5)
    O = fill(I, THREE, x6)
    return O


def solve_82819916(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = size(x2)
    x4 = positive(x3)
    x5 = branch(x4, identity, dmirror)
    x6 = x5(I)
    x7 = frontiers(I)
    x8 = merge(x7)
    x9 = mostcolor(x8)
    x10 = matcher(identity, x9)
    x11 = rbind(sfilter, x10)
    x12 = compose(size, x11)
    x13 = argmin(x6, x12)
    x14 = repeat(x13, ONE)
    x15 = asobject(x14)
    x16 = palette(x15)
    x17 = totuple(x16)
    x18 = first(x17)
    x19 = last(x17)
    x20 = fgpartition(x6)
    x21 = merge(x20)
    x22 = toindices(x21)
    x23 = apply(first, x22)
    x24 = lbind(sfilter, x21)
    x25 = compose(first, last)
    x26 = lbind(matcher, x25)
    x27 = compose(x24, x26)
    x28 = apply(x27, x23)
    x29 = lbind(shift, x15)
    x30 = chain(x29, toivec, uppermost)
    x31 = matcher(first, x18)
    x32 = rbind(sfilter, x31)
    x33 = rbind(compose, last)
    x34 = lbind(rbind, contained)
    x35 = chain(toindices, x32, x30)
    x36 = chain(x33, x34, x35)
    x37 = fork(sfilter, identity, x36)
    x38 = compose(color, x37)
    x39 = compose(x32, x30)
    x40 = fork(recolor, x38, x39)
    x41 = fork(other, palette, x38)
    x42 = compose(x32, x30)
    x43 = fork(difference, x30, x42)
    x44 = fork(recolor, x41, x43)
    x45 = fork(combine, x40, x44)
    x46 = mapply(x45, x28)
    x47 = paint(x6, x46)
    O = x5(x47)
    return O


def solve_83302e8f(I):
    x1 = index(I, ORIGIN)
    x2 = objects(I, T, F, F)
    x3 = fork(multiply, height, width)
    x4 = fork(equality, size, x3)
    x5 = chain(positive, decrement, size)
    x6 = colorfilter(x2, x1)
    x7 = fork(both, x4, x5)
    x8 = sfilter(x6, x7)
    x9 = merge(x8)
    x10 = ofcolor(I, x1)
    x11 = fill(I, FOUR, x10)
    O = fill(x11, THREE, x9)
    return O


def solve_834ec97d(I):
    x1 = partition(I)
    x2 = argmin(x1, size)
    x3 = cover(I, x2)
    x4 = shift(x2, DOWN)
    x5 = paint(x3, x4)
    x6 = leftmost(x2)
    x7 = width(I)
    x8 = interval(x6, x7, TWO)
    x9 = leftmost(x2)
    x10 = interval(x9, NEG_ONE, NEG_TWO)
    x11 = combine(x8, x10)
    x12 = rbind(shoot, UP)
    x13 = uppermost(x2)
    x14 = lbind(astuple, x13)
    x15 = apply(x14, x11)
    x16 = mapply(x12, x15)
    O = fill(x5, FOUR, x16)
    return O


def solve_8403a5d5(I):
    x1 = fgpartition(I)
    x2 = argmin(x1, size)
    x3 = color(x2)
    x4 = leftmost(x2)
    x5 = width(I)
    x6 = interval(x4, x5, TWO)
    x7 = apply(tojvec, x6)
    x8 = mapply(vfrontier, x7)
    x9 = fill(I, x3, x8)
    x10 = increment(x4)
    x11 = width(I)
    x12 = interval(x10, x11, FOUR)
    x13 = add(x4, THREE)
    x14 = width(I)
    x15 = interval(x13, x14, FOUR)
    x16 = apply(tojvec, x12)
    x17 = height(I)
    x18 = decrement(x17)
    x19 = lbind(astuple, x18)
    x20 = apply(x19, x15)
    x21 = combine(x16, x20)
    O = fill(x9, FIVE, x21)
    return O


def solve_846bdb03(I):
    x1 = partition(I)
    x2 = fork(equality, corners, toindices)
    x3 = extract(x1, x2)
    x4 = subgrid(x3, I)
    x5 = backdrop(x3)
    x6 = cover(I, x5)
    x7 = frontiers(x4)
    x8 = sfilter(x7, hline)
    x9 = size(x8)
    x10 = positive(x9)
    x11 = branch(x10, dmirror, identity)
    x12 = x11(x4)
    x13 = x11(x6)
    x14 = fgpartition(x13)
    x15 = merge(x14)
    x16 = normalize(x15)
    x17 = mostcolor(x13)
    x18 = color(x3)
    x19 = palette(x12)
    x20 = remove(x18, x19)
    x21 = remove(x17, x20)
    x22 = first(x21)
    x23 = last(x21)
    x24 = ofcolor(x12, x23)
    x25 = leftmost(x24)
    x26 = ofcolor(x12, x22)
    x27 = leftmost(x26)
    x28 = greater(x25, x27)
    x29 = ofcolor(x13, x23)
    x30 = leftmost(x29)
    x31 = ofcolor(x13, x22)
    x32 = leftmost(x31)
    x33 = greater(x30, x32)
    x34 = equality(x28, x33)
    x35 = branch(x34, identity, vmirror)
    x36 = x35(x16)
    x37 = shift(x36, UNITY)
    x38 = paint(x12, x37)
    O = x11(x38)
    return O


def solve_855e0971(I):
    x1 = lbind(greater, THREE)
    x2 = chain(x1, size, dedupe)
    x3 = apply(x2, I)
    x4 = contained(F, x3)
    x5 = flip(x4)
    x6 = branch(x5, identity, dmirror)
    x7 = x6(I)
    x8 = rbind(toobject, I)
    x9 = chain(palette, x8, neighbors)
    x10 = lbind(chain, flip)
    x11 = rbind(x10, x9)
    x12 = lbind(lbind, contained)
    x13 = compose(x11, x12)
    x14 = lbind(ofcolor, I)
    x15 = fork(sfilter, x14, x13)
    x16 = compose(size, x15)
    x17 = palette(I)
    x18 = argmax(x17, x16)
    x19 = objects(x7, T, T, F)
    x20 = colorfilter(x19, x18)
    x21 = difference(x19, x20)
    x22 = rbind(subgrid, x7)
    x23 = order(x21, uppermost)
    x24 = apply(x22, x23)
    x25 = lbind(recolor, x18)
    x26 = lbind(mapply, vfrontier)
    x27 = rbind(ofcolor, x18)
    x28 = chain(x25, x26, x27)
    x29 = fork(paint, identity, x28)
    x30 = mapply(x29, x24)
    O = x6(x30)
    return O


def solve_85c4e7cd(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = shape(I)
    x4 = minimum(x3)
    x5 = halve(x4)
    x6 = interval(ONE, x5, ONE)
    x7 = lbind(power, inbox)
    x8 = rbind(rapply, x2)
    x9 = compose(initset, x7)
    x10 = chain(first, x8, x9)
    x11 = apply(x10, x6)
    x12 = repeat(x2, ONE)
    x13 = combine(x12, x11)
    x14 = rbind(toobject, I)
    x15 = compose(color, x14)
    x16 = apply(x15, x13)
    x17 = interval(ZERO, x5, ONE)
    x18 = pair(x17, x16)
    x19 = compose(invert, first)
    x20 = order(x18, x19)
    x21 = apply(last, x20)
    x22 = mpapply(recolor, x21, x13)
    O = paint(I, x22)
    return O


def solve_868de0fa(I):
    x1 = objects(I, T, F, F)
    x2 = sfilter(x1, square)
    x3 = compose(even, height)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = merge(x4)
    x7 = merge(x5)
    x8 = fill(I, TWO, x6)
    O = fill(x8, SEVEN, x7)
    return O


def solve_8731374e(I):
    x1 = objects(I, T, F, F)
    x2 = argmax(x1, size)
    x3 = color(x2)
    x4 = subgrid(x2, I)
    x5 = lbind(insert, DOWN)
    x6 = compose(lrcorner, asindices)
    x7 = chain(x5, initset, x6)
    x8 = fork(subgrid, x7, identity)
    x9 = matcher(identity, x3)
    x10 = rbind(subtract, TWO)
    x11 = rbind(sfilter, x9)
    x12 = compose(x10, width)
    x13 = chain(size, x11, first)
    x14 = fork(greater, x12, x13)
    x15 = rbind(branch, identity)
    x16 = rbind(x15, x8)
    x17 = chain(initset, x16, x14)
    x18 = fork(rapply, x17, identity)
    x19 = compose(first, x18)
    x20 = compose(x19, rot90)
    x21 = double(EIGHT)
    x22 = double(x21)
    x23 = power(x20, x22)
    x24 = x23(x4)
    x25 = leastcolor(x24)
    x26 = ofcolor(x24, x25)
    x27 = fork(combine, vfrontier, hfrontier)
    x28 = mapply(x27, x26)
    O = fill(x24, x25, x28)
    return O


def solve_88a10436(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, size)
    x3 = normalize(x2)
    x4 = shape(x2)
    x5 = halve(x4)
    x6 = invert(x5)
    x7 = shift(x3, x6)
    x8 = sizefilter(x1, ONE)
    x9 = apply(center, x8)
    x10 = lbind(shift, x7)
    x11 = mapply(x10, x9)
    O = paint(I, x11)
    return O


def solve_88a62173(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = tophalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x1)
    x6 = bottomhalf(x2)
    x7 = astuple(x3, x4)
    x8 = astuple(x5, x6)
    x9 = combine(x7, x8)
    O = leastcommon(x9)
    return O


def solve_890034e9(I):
    x1 = rbind(greater, TWO)
    x2 = chain(x1, minimum, shape)
    x3 = objects(I, T, F, F)
    x4 = sfilter(x3, x2)
    x5 = fork(equality, toindices, box)
    x6 = sfilter(x4, x5)
    x7 = totuple(x6)
    x8 = apply(color, x7)
    x9 = leastcommon(x8)
    x10 = ofcolor(I, x9)
    x11 = inbox(x10)
    x12 = recolor(ZERO, x11)
    x13 = occurrences(I, x12)
    x14 = normalize(x10)
    x15 = shift(x14, NEG_UNITY)
    x16 = lbind(shift, x15)
    x17 = mapply(x16, x13)
    O = fill(I, x9, x17)
    return O


def solve_8a004b2b(I):
    x1 = partition(I)
    x2 = fork(equality, toindices, corners)
    x3 = sfilter(x1, x2)
    x4 = argmax(x3, size)
    x5 = fgpartition(I)
    x6 = merge(x5)
    x7 = backdrop(x4)
    x8 = toobject(x7, I)
    x9 = difference(x6, x8)
    x10 = mostcolor(I)
    x11 = inbox(x4)
    x12 = backdrop(x11)
    x13 = toobject(x12, I)
    x14 = matcher(first, x10)
    x15 = compose(flip, x14)
    x16 = sfilter(x13, x15)
    x17 = subgrid(x9, I)
    x18 = palette(x16)
    x19 = order(x18, identity)
    x20 = lbind(colorcount, x16)
    x21 = apply(x20, x19)
    x22 = lbind(colorcount, x9)
    x23 = apply(x22, x19)
    x24 = pair(x21, x23)
    x25 = fork(divide, first, last)
    x26 = apply(x25, x24)
    x27 = mostcommon(x26)
    x28 = lbind(colorcount, x16)
    x29 = lbind(colorcount, x9)
    x30 = fork(divide, x28, x29)
    x31 = matcher(x30, x27)
    x32 = palette(x9)
    x33 = sfilter(x32, x31)
    x34 = rbind(contained, x33)
    x35 = compose(x34, first)
    x36 = sfilter(x16, x35)
    x37 = sfilter(x9, x35)
    x38 = height(x36)
    x39 = height(x37)
    x40 = divide(x38, x39)
    x41 = width(x36)
    x42 = width(x37)
    x43 = divide(x41, x42)
    x44 = vupscale(x17, x40)
    x45 = hupscale(x44, x43)
    x46 = asobject(x45)
    x47 = matcher(first, x10)
    x48 = compose(flip, x47)
    x49 = sfilter(x46, x48)
    x50 = ulcorner(x16)
    x51 = sfilter(x49, x35)
    x52 = ulcorner(x51)
    x53 = subtract(x50, x52)
    x54 = shift(x49, x53)
    x55 = paint(I, x54)
    O = subgrid(x4, x55)
    return O


def solve_8be77c9e(I):
    x1 = hmirror(I)
    O = vconcat(I, x1)
    return O


def solve_8d5021e8(I):
    x1 = vmirror(I)
    x2 = hconcat(x1, I)
    x3 = hmirror(x2)
    x4 = vconcat(x2, x3)
    x5 = vconcat(x4, x2)
    O = hmirror(x5)
    return O


def solve_8d510a79(I):
    x1 = frontiers(I)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = leastcommon(x3)
    x5 = frontiers(I)
    x6 = colorfilter(x5, x4)
    x7 = size(x6)
    x8 = positive(x7)
    x9 = branch(x8, dmirror, identity)
    x10 = ofcolor(I, x4)
    x11 = ofcolor(I, TWO)
    x12 = ofcolor(I, ONE)
    x13 = rbind(gravitate, x10)
    x14 = compose(x13, initset)
    x15 = fork(add, identity, x14)
    x16 = fork(connect, identity, x15)
    x17 = shape(I)
    x18 = maximum(x17)
    x19 = lbind(multiply, x18)
    x20 = lbind(gravitate, x10)
    x21 = chain(x19, sign, x20)
    x22 = compose(x21, initset)
    x23 = fork(add, identity, x22)
    x24 = fork(connect, identity, x23)
    x25 = mapply(x16, x11)
    x26 = mapply(x24, x12)
    x27 = fill(I, TWO, x25)
    O = fill(x27, ONE, x26)
    return O


def solve_8e1813be(I):
    x1 = partition(I)
    x2 = matcher(height, ONE)
    x3 = matcher(width, ONE)
    x4 = fork(either, x2, x3)
    x5 = sfilter(x1, x4)
    x6 = matcher(height, ONE)
    x7 = sfilter(x5, x6)
    x8 = size(x7)
    x9 = matcher(width, ONE)
    x10 = sfilter(x5, x9)
    x11 = size(x10)
    x12 = greater(x8, x11)
    x13 = branch(x12, dmirror, identity)
    x14 = branch(x12, uppermost, leftmost)
    x15 = order(x5, x14)
    x16 = apply(color, x15)
    x17 = size(x5)
    x18 = repeat(x16, x17)
    O = x13(x18)
    return O


def solve_8e5a5113(I):
    x1 = portrait(I)
    x2 = branch(x1, identity, rot90)
    x3 = branch(x1, identity, rot270)
    x4 = x2(I)
    x5 = width(x4)
    x6 = toivec(x5)
    x7 = index(x4, x6)
    x8 = shape(x4)
    x9 = canvas(x7, x8)
    x10 = hconcat(x4, x9)
    x11 = objects(x10, F, T, T)
    x12 = argmax(x11, numcolors)
    x13 = subgrid(x12, x4)
    x14 = interval(ONE, FOUR, ONE)
    x15 = lbind(power, rot90)
    x16 = lbind(power, rot270)
    x17 = rbind(rapply, x13)
    x18 = compose(initset, x15)
    x19 = chain(first, x17, x18)
    x20 = rbind(rapply, x13)
    x21 = compose(initset, x16)
    x22 = chain(first, x20, x21)
    x23 = compose(asobject, x19)
    x24 = uppermost(x12)
    x25 = lbind(add, x24)
    x26 = height(x12)
    x27 = increment(x26)
    x28 = lbind(multiply, x27)
    x29 = chain(toivec, x25, x28)
    x30 = fork(shift, x23, x29)
    x31 = compose(asobject, x22)
    x32 = uppermost(x12)
    x33 = lbind(subtract, x32)
    x34 = height(x12)
    x35 = increment(x34)
    x36 = lbind(multiply, x35)
    x37 = chain(toivec, x33, x36)
    x38 = fork(shift, x31, x37)
    x39 = fork(combine, x30, x38)
    x40 = mapply(x39, x14)
    x41 = paint(x4, x40)
    O = x3(x41)
    return O


def solve_8eb1be9a(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = height(x2)
    x4 = height(I)
    x5 = interval(ZERO, x4, x3)
    x6 = lbind(shift, x2)
    x7 = compose(x6, toivec)
    x8 = compose(x7, invert)
    x9 = fork(combine, x7, x8)
    x10 = mapply(x9, x5)
    O = paint(I, x10)
    return O


def solve_8efcae92(I):
    x1 = objects(I, T, F, F)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = remove(x3, x1)
    x5 = lbind(chain, positive)
    x6 = lbind(x5, size)
    x7 = rbind(compose, backdrop)
    x8 = lbind(lbind, intersection)
    x9 = chain(x6, x7, x8)
    x10 = chain(x9, backdrop, outbox)
    x11 = lbind(sfilter, x4)
    x12 = compose(x11, x10)
    x13 = chain(positive, size, x12)
    x14 = sfilter(x4, x13)
    x15 = compose(merge, x12)
    x16 = apply(x15, x14)
    x17 = rbind(subgrid, I)
    x18 = apply(x17, x16)
    x19 = merge(x16)
    x20 = palette(x19)
    x21 = lbind(colorcount, x19)
    x22 = argmin(x20, x21)
    x23 = rbind(colorcount, x22)
    O = argmax(x18, x23)
    return O


def solve_8f2ea7aa(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = normalize(x2)
    x4 = mostcolor(I)
    x5 = shape(x3)
    x6 = multiply(x5, x5)
    x7 = canvas(x4, x6)
    x8 = shape(x3)
    x9 = rbind(multiply, x8)
    x10 = toindices(x3)
    x11 = apply(x9, x10)
    x12 = lbind(shift, x3)
    x13 = mapply(x12, x11)
    O = paint(x7, x13)
    return O


def solve_90c28cc7(I):
    x1 = matcher(identity, ZERO)
    x2 = compose(flip, x1)
    x3 = rbind(sfilter, x2)
    x4 = chain(positive, size, x3)
    x5 = rbind(sfilter, x4)
    x6 = compose(dmirror, x5)
    x7 = power(x6, FOUR)
    x8 = x7(I)
    x9 = dedupe(x8)
    x10 = dmirror(x9)
    x11 = dedupe(x10)
    O = dmirror(x11)
    return O


def solve_90f3ed37(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = apply(first, x2)
    x4 = asindices(I)
    x5 = apply(first, x4)
    x6 = difference(x5, x3)
    x7 = ofcolor(I, x1)
    x8 = rbind(interval, ONE)
    x9 = lbind(rbind, contained)
    x10 = lbind(sfilter, x6)
    x11 = rbind(matcher, ZERO)
    x12 = chain(size, x10, x9)
    x13 = lbind(sfilter, x7)
    x14 = lbind(compose, x12)
    x15 = chain(x13, x11, x14)
    x16 = lbind(fork, x8)
    x17 = compose(increment, minimum)
    x18 = lbind(lbind, astuple)
    x19 = lbind(chain, x17)
    x20 = rbind(x19, first)
    x21 = chain(x20, x18, first)
    x22 = lbind(chain, maximum)
    x23 = rbind(x22, first)
    x24 = chain(x23, x18, first)
    x25 = fork(x16, x21, x24)
    x26 = compose(x15, x25)
    x27 = apply(toivec, x3)
    x28 = apply(x26, x27)
    x29 = argmax(x28, width)
    x30 = remove(x29, x28)
    x31 = ulcorner(x29)
    x32 = invert(x31)
    x33 = shift(x29, x32)
    x34 = asindices(I)
    x35 = center(x34)
    x36 = invert(x35)
    x37 = shift(x34, x36)
    x38 = width(I)
    x39 = double(x38)
    x40 = tojvec(x39)
    x41 = rbind(apply, x37)
    x42 = lbind(rbind, add)
    x43 = chain(x41, x42, center)
    x44 = compose(positive, size)
    x45 = lbind(compose, size)
    x46 = lbind(shift, x33)
    x47 = rbind(compose, x46)
    x48 = lbind(rbind, intersection)
    x49 = compose(x47, x48)
    x50 = lbind(compose, x44)
    x51 = compose(x50, x49)
    x52 = fork(sfilter, x43, x51)
    x53 = compose(x45, x49)
    x54 = fork(valmax, x52, x53)
    x55 = compose(x45, x49)
    x56 = fork(matcher, x55, x54)
    x57 = fork(sfilter, x52, x56)
    x58 = lbind(shift, x33)
    x59 = lbind(insert, x40)
    x60 = lbind(rbind, greater)
    x61 = compose(x60, rightmost)
    x62 = compose(leftmost, x59)
    x63 = rbind(compose, x58)
    x64 = lbind(rbind, difference)
    x65 = compose(x63, x64)
    x66 = lbind(compose, x62)
    x67 = compose(x66, x65)
    x68 = fork(compose, x61, x67)
    x69 = fork(argmax, x57, x68)
    x70 = lbind(shift, x33)
    x71 = compose(x70, x69)
    x72 = fork(difference, x71, identity)
    x73 = mapply(x72, x30)
    O = fill(I, ONE, x73)
    return O


def solve_913fb3ed(I):
    x1 = lbind(ofcolor, I)
    x2 = lbind(mapply, neighbors)
    x3 = chain(x2, x1, last)
    x4 = fork(recolor, first, x3)
    x5 = astuple(SIX, THREE)
    x6 = astuple(FOUR, EIGHT)
    x7 = astuple(ONE, TWO)
    x8 = initset(x5)
    x9 = insert(x6, x8)
    x10 = insert(x7, x9)
    x11 = mapply(x4, x10)
    O = paint(I, x11)
    return O


def solve_91413438(I):
    x1 = palette(I)
    x2 = other(x1, ZERO)
    x3 = colorcount(I, x2)
    x4 = colorcount(I, ZERO)
    x5 = dmirror(I)
    x6 = repeat(x5, x3)
    x7 = dmirror(I)
    x8 = shape(x7)
    x9 = canvas(ZERO, x8)
    x10 = multiply(x4, x4)
    x11 = subtract(x10, x3)
    x12 = repeat(x9, x11)
    x13 = combine(x6, x12)
    x14 = merge(x13)
    x15 = dmirror(x14)
    x16 = hsplit(x15, x4)
    O = merge(x16)
    return O


def solve_91714a58(I):
    x1 = shape(I)
    x2 = asindices(I)
    x3 = objects(I, T, F, T)
    x4 = argmax(x3, size)
    x5 = mostcolor(x4)
    x6 = mostcolor(I)
    x7 = canvas(x6, x1)
    x8 = paint(x7, x4)
    x9 = mostcolor(I)
    x10 = color(x4)
    x11 = astuple(x9, ORIGIN)
    x12 = astuple(x10, RIGHT)
    x13 = astuple(x9, ZERO_BY_TWO)
    x14 = initset(x13)
    x15 = insert(x12, x14)
    x16 = insert(x11, x15)
    x17 = dmirror(x16)
    x18 = toindices(x16)
    x19 = lbind(shift, x18)
    x20 = occurrences(x8, x16)
    x21 = mapply(x19, x20)
    x22 = toindices(x17)
    x23 = lbind(shift, x22)
    x24 = occurrences(x8, x17)
    x25 = mapply(x23, x24)
    x26 = combine(x21, x25)
    O = fill(x8, x9, x26)
    return O


def solve_9172f3a0(I):
    O = upscale(I, THREE)
    return O


def solve_928ad970(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = leastcolor(I)
    x4 = palette(I)
    x5 = remove(x3, x4)
    x6 = mostcolor(I)
    x7 = other(x5, x6)
    x8 = inbox(x2)
    O = fill(I, x7, x8)
    return O


def solve_93b581b8(I):
    x1 = objects(I, F, F, T)
    x2 = apply(toindices, x1)
    x3 = lbind(index, I)
    x4 = compose(x3, lrcorner)
    x5 = astuple(NEG_TWO, NEG_TWO)
    x6 = rbind(shift, x5)
    x7 = fork(recolor, x4, x6)
    x8 = compose(x3, ulcorner)
    x9 = rbind(shift, TWO_BY_TWO)
    x10 = fork(recolor, x8, x9)
    x11 = compose(x3, llcorner)
    x12 = astuple(NEG_TWO, TWO)
    x13 = rbind(shift, x12)
    x14 = fork(recolor, x11, x13)
    x15 = compose(x3, urcorner)
    x16 = astuple(TWO, NEG_TWO)
    x17 = rbind(shift, x16)
    x18 = fork(recolor, x15, x17)
    x19 = fork(combine, x7, x10)
    x20 = fork(combine, x14, x18)
    x21 = fork(combine, x19, x20)
    x22 = mapply(x21, x2)
    O = paint(I, x22)
    return O


def solve_941d9a10(I):
    x1 = asindices(I)
    x2 = corners(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = objects(I, T, T, F)
    x6 = colorfilter(x5, x4)
    x7 = fork(add, leftmost, uppermost)
    x8 = argmin(x6, x7)
    x9 = argmax(x6, x7)
    x10 = lbind(sfilter, x6)
    x11 = rbind(compose, leftmost)
    x12 = chain(size, x10, x11)
    x13 = lbind(sfilter, x6)
    x14 = rbind(compose, uppermost)
    x15 = chain(size, x13, x14)
    x16 = lbind(lbind, greater)
    x17 = chain(x12, x16, leftmost)
    x18 = lbind(rbind, greater)
    x19 = chain(x12, x18, leftmost)
    x20 = lbind(lbind, greater)
    x21 = chain(x15, x20, uppermost)
    x22 = lbind(rbind, greater)
    x23 = chain(x15, x22, uppermost)
    x24 = fork(equality, x17, x19)
    x25 = fork(equality, x21, x23)
    x26 = fork(both, x24, x25)
    x27 = extract(x6, x26)
    x28 = fill(I, ONE, x8)
    x29 = fill(x28, THREE, x9)
    O = fill(x29, TWO, x27)
    return O


def solve_94f9d214(I):
    x1 = astuple(vsplit, hsplit)
    x2 = rbind(rbind, TWO)
    x3 = rbind(rapply, I)
    x4 = initset(x2)
    x5 = lbind(rapply, x4)
    x6 = chain(first, x3, x5)
    x7 = lbind(apply, numcolors)
    x8 = compose(x7, x6)
    x9 = matcher(x8, TWO_BY_TWO)
    x10 = extract(x1, x9)
    x11 = x10(I, TWO)
    x12 = first(x11)
    x13 = last(x11)
    x14 = palette(x12)
    x15 = palette(x13)
    x16 = intersection(x14, x15)
    x17 = first(x16)
    x18 = shape(x12)
    x19 = canvas(x17, x18)
    x20 = ofcolor(x12, x17)
    x21 = ofcolor(x13, x17)
    x22 = intersection(x20, x21)
    O = fill(x19, TWO, x22)
    return O


def solve_952a094c(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = inbox(x2)
    x4 = cover(I, x3)
    x5 = ulcorner(x3)
    x6 = index(I, x5)
    x7 = lrcorner(x2)
    x8 = add(UNITY, x7)
    x9 = initset(x8)
    x10 = fill(x4, x6, x9)
    x11 = lrcorner(x3)
    x12 = index(I, x11)
    x13 = ulcorner(x2)
    x14 = add(NEG_UNITY, x13)
    x15 = initset(x14)
    x16 = fill(x10, x12, x15)
    x17 = urcorner(x3)
    x18 = index(I, x17)
    x19 = llcorner(x2)
    x20 = add(DOWN_LEFT, x19)
    x21 = initset(x20)
    x22 = fill(x16, x18, x21)
    x23 = llcorner(x3)
    x24 = index(I, x23)
    x25 = urcorner(x2)
    x26 = add(UP_RIGHT, x25)
    x27 = initset(x26)
    O = fill(x22, x24, x27)
    return O


def solve_9565186b(I):
    x1 = shape(I)
    x2 = partition(I)
    x3 = argmax(x2, size)
    x4 = canvas(FIVE, x1)
    O = paint(x4, x3)
    return O


def solve_95990924(I):
    x1 = objects(I, T, F, T)
    x2 = apply(ulcorner, x1)
    x3 = apply(urcorner, x1)
    x4 = apply(llcorner, x1)
    x5 = apply(lrcorner, x1)
    x6 = shift(x2, NEG_UNITY)
    x7 = shift(x3, UP_RIGHT)
    x8 = shift(x4, DOWN_LEFT)
    x9 = shift(x5, UNITY)
    x10 = fill(I, ONE, x6)
    x11 = fill(x10, TWO, x7)
    x12 = fill(x11, THREE, x8)
    O = fill(x12, FOUR, x9)
    return O


def solve_963e52fc(I):
    x1 = width(I)
    x2 = asobject(I)
    x3 = hperiod(x2)
    x4 = height(x2)
    x5 = astuple(x4, x3)
    x6 = ulcorner(x2)
    x7 = crop(I, x6, x5)
    x8 = rot90(x7)
    x9 = double(x1)
    x10 = divide(x9, x3)
    x11 = increment(x10)
    x12 = repeat(x8, x11)
    x13 = merge(x12)
    x14 = rot270(x13)
    x15 = astuple(x4, x9)
    O = crop(x14, ORIGIN, x15)
    return O


def solve_97999447(I):
    x1 = mostcolor(I)
    x2 = asobject(I)
    x3 = matcher(first, x1)
    x4 = compose(flip, x3)
    x5 = sfilter(x2, x4)
    x6 = apply(initset, x5)
    x7 = apply(toindices, x6)
    x8 = rbind(shoot, RIGHT)
    x9 = compose(x8, center)
    x10 = fork(recolor, color, x9)
    x11 = mapply(x10, x6)
    x12 = paint(I, x11)
    x13 = width(I)
    x14 = interval(ZERO, x13, ONE)
    x15 = apply(double, x14)
    x16 = apply(increment, x15)
    x17 = apply(tojvec, x16)
    x18 = prapply(shift, x7, x17)
    x19 = merge(x18)
    O = fill(x12, FIVE, x19)
    return O


def solve_97a05b5b(I):
    x1 = objects(I, F, F, T)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = matcher(numcolors, TWO)
    x5 = fork(both, x3, x4)
    x6 = sfilter(x1, x5)
    x7 = difference(x1, x6)
    x8 = merge(x7)
    x9 = color(x8)
    x10 = mostcolor(I)
    x11 = subgrid(x8, I)
    x12 = astuple(hmirror, vmirror)
    x13 = astuple(cmirror, dmirror)
    x14 = combine(x12, x13)
    x15 = astuple(identity, rot180)
    x16 = astuple(rot90, rot270)
    x17 = combine(x15, x16)
    x18 = combine(x17, x14)
    x19 = lbind(canvas, NEG_ONE)
    x20 = compose(x19, shape)
    x21 = fork(paint, x20, normalize)
    x22 = rbind(other, x9)
    x23 = compose(x22, palette)
    x24 = lbind(occurrences, x11)
    x25 = chain(positive, size, x24)
    x26 = compose(x25, asobject)
    x27 = rbind(replace, x9)
    x28 = rbind(replace, x10)
    x29 = rbind(x28, x9)
    x30 = compose(x29, x21)
    x31 = fork(x27, x30, x23)
    x32 = rbind(chain, initset)
    x33 = compose(x26, first)
    x34 = lbind(x32, x33)
    x35 = lbind(rbind, rapply)
    x36 = chain(x34, x35, x31)
    x37 = lbind(occurrences, x11)
    x38 = chain(first, x37, asobject)
    x39 = lbind(argmax, x18)
    x40 = compose(x39, x36)
    x41 = compose(initset, x40)
    x42 = fork(rapply, x41, x21)
    x43 = compose(first, x42)
    x44 = compose(initset, x40)
    x45 = fork(rapply, x44, x31)
    x46 = compose(first, x45)
    x47 = compose(asobject, x43)
    x48 = compose(x38, x46)
    x49 = fork(shift, x47, x48)
    x50 = mapply(x49, x6)
    O = paint(x11, x50)
    return O


def solve_98cf29f8(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = shape(I)
    x6 = add(TWO, x5)
    x7 = canvas(x4, x6)
    x8 = asobject(I)
    x9 = shift(x8, UNITY)
    x10 = paint(x7, x9)
    x11 = palette(x10)
    x12 = remove(x4, x11)
    x13 = lbind(ofcolor, x10)
    x14 = fork(recolor, identity, x13)
    x15 = apply(x14, x12)
    x16 = fork(equality, toindices, backdrop)
    x17 = extract(x15, x16)
    x18 = other(x15, x17)
    x19 = color(x18)
    x20 = astuple(x19, RIGHT)
    x21 = initset(ZERO_BY_TWO)
    x22 = insert(ORIGIN, x21)
    x23 = recolor(x4, x22)
    x24 = insert(x20, x23)
    x25 = dmirror(x24)
    x26 = lbind(shift, x24)
    x27 = occurrences(x10, x24)
    x28 = mapply(x26, x27)
    x29 = lbind(shift, x25)
    x30 = occurrences(x10, x25)
    x31 = mapply(x29, x30)
    x32 = combine(x28, x31)
    x33 = fill(x10, x4, x32)
    x34 = ofcolor(x33, x19)
    x35 = gravitate(x34, x17)
    x36 = replace(x10, x19, x4)
    x37 = shift(x34, x35)
    x38 = fill(x36, x19, x37)
    O = trim(x38)
    return O


def solve_995c5fa3(I):
    x1 = width(I)
    x2 = increment(x1)
    x3 = divide(x2, FIVE)
    x4 = astuple(FOUR, FOUR)
    x5 = canvas(NEG_ONE, x4)
    x6 = asindices(x5)
    x7 = rbind(toobject, I)
    x8 = lbind(shift, x6)
    x9 = compose(x7, x8)
    x10 = multiply(x3, FIVE)
    x11 = interval(ZERO, x10, FIVE)
    x12 = apply(tojvec, x11)
    x13 = apply(x9, x12)
    x14 = matcher(numcolors, ONE)
    x15 = fork(equality, identity, hmirror)
    x16 = compose(flip, x15)
    x17 = lbind(index, I)
    x18 = compose(x17, ulcorner)
    x19 = lbind(add, DOWN)
    x20 = chain(x17, x19, ulcorner)
    x21 = fork(equality, x18, x20)
    x22 = compose(flip, x21)
    x23 = fork(either, x14, x16)
    x24 = fork(either, x23, x22)
    x25 = compose(flip, x24)
    x26 = lbind(multiply, TWO)
    x27 = compose(x26, x14)
    x28 = lbind(multiply, FOUR)
    x29 = compose(x28, x16)
    x30 = fork(add, x27, x29)
    x31 = lbind(multiply, THREE)
    x32 = compose(x31, x22)
    x33 = lbind(multiply, EIGHT)
    x34 = compose(x33, x25)
    x35 = fork(add, x32, x34)
    x36 = fork(add, x30, x35)
    x37 = apply(x36, x13)
    x38 = rbind(repeat, x3)
    O = apply(x38, x37)
    return O


def solve_99b1bc43(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, vline)
    x3 = size(x2)
    x4 = positive(x3)
    x5 = branch(x4, hsplit, vsplit)
    x6 = x5(I, TWO)
    x7 = first(x6)
    x8 = last(x6)
    x9 = palette(x7)
    x10 = palette(x8)
    x11 = intersection(x9, x10)
    x12 = first(x11)
    x13 = shape(x7)
    x14 = canvas(x12, x13)
    x15 = ofcolor(x7, x12)
    x16 = ofcolor(x8, x12)
    x17 = combine(x15, x16)
    x18 = intersection(x15, x16)
    x19 = difference(x17, x18)
    O = fill(x14, THREE, x19)
    return O


def solve_99fa7670(I):
    x1 = shape(I)
    x2 = objects(I, T, F, T)
    x3 = rbind(shoot, RIGHT)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(I, x6)
    x8 = add(x1, DOWN_LEFT)
    x9 = initset(x8)
    x10 = mostcolor(I)
    x11 = recolor(x10, x9)
    x12 = objects(x7, T, F, T)
    x13 = insert(x11, x12)
    x14 = order(x13, uppermost)
    x15 = first(x14)
    x16 = remove(x11, x14)
    x17 = remove(x15, x14)
    x18 = compose(lrcorner, first)
    x19 = compose(lrcorner, last)
    x20 = fork(connect, x18, x19)
    x21 = compose(color, first)
    x22 = fork(recolor, x21, x20)
    x23 = pair(x16, x17)
    x24 = mapply(x22, x23)
    O = underpaint(x7, x24)
    return O


def solve_9aec4887(I):
    x1 = objects(I, T, F, F)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = sfilter(x1, x3)
    x5 = mostcolor(I)
    x6 = colorfilter(x4, x5)
    x7 = argmax(x6, size)
    x8 = outbox(x7)
    x9 = backdrop(x8)
    x10 = subgrid(x9, I)
    x11 = cover(I, x9)
    x12 = fgpartition(x11)
    x13 = merge(x12)
    x14 = normalize(x13)
    x15 = shift(x14, UNITY)
    x16 = paint(x10, x15)
    x17 = toindices(x15)
    x18 = fgpartition(x10)
    x19 = rbind(remove, x18)
    x20 = lbind(lbind, manhattan)
    x21 = compose(x20, initset)
    x22 = lbind(fork, greater)
    x23 = lbind(sfilter, x17)
    x24 = rbind(compose, x21)
    x25 = lbind(lbind, valmin)
    x26 = chain(x24, x25, x19)
    x27 = rbind(compose, initset)
    x28 = lbind(rbind, manhattan)
    x29 = compose(x27, x28)
    x30 = fork(x22, x26, x29)
    x31 = compose(x23, x30)
    x32 = fork(recolor, color, x31)
    x33 = mapply(x32, x18)
    O = paint(x16, x33)
    return O


def solve_9af7a82c(I):
    x1 = partition(I)
    x2 = order(x1, size)
    x3 = valmax(x1, size)
    x4 = rbind(astuple, ONE)
    x5 = lbind(subtract, x3)
    x6 = compose(x4, size)
    x7 = chain(x4, x5, size)
    x8 = fork(canvas, color, x6)
    x9 = lbind(canvas, ZERO)
    x10 = compose(x9, x7)
    x11 = fork(vconcat, x8, x10)
    x12 = compose(cmirror, x11)
    x13 = apply(x12, x2)
    x14 = merge(x13)
    O = cmirror(x14)
    return O


def solve_9d9215db(I):
    x1 = hmirror(I)
    x2 = fgpartition(x1)
    x3 = merge(x2)
    x4 = vmirror(I)
    x5 = fgpartition(x4)
    x6 = merge(x5)
    x7 = hmirror(I)
    x8 = vmirror(x7)
    x9 = fgpartition(x8)
    x10 = merge(x9)
    x11 = mostcolor(I)
    x12 = combine(x3, x6)
    x13 = combine(x12, x10)
    x14 = paint(I, x13)
    x15 = compose(increment, first)
    x16 = fork(greater, last, x15)
    x17 = tojvec(NEG_TWO)
    x18 = rbind(shift, x17)
    x19 = compose(x18, vmirror)
    x20 = rbind(sfilter, x16)
    x21 = compose(x20, asindices)
    x22 = compose(x19, x21)
    x23 = fork(intersection, x21, x22)
    x24 = rbind(shoot, RIGHT)
    x25 = compose(x24, last)
    x26 = matcher(first, x11)
    x27 = compose(flip, x26)
    x28 = rbind(sfilter, x27)
    x29 = compose(double, halve)
    x30 = fork(equality, x29, identity)
    x31 = chain(flip, x30, last)
    x32 = lbind(fork, both)
    x33 = rbind(x32, x31)
    x34 = lbind(fork, recolor)
    x35 = lbind(x34, first)
    x36 = rbind(compose, x25)
    x37 = lbind(rbind, contained)
    x38 = lbind(rbind, sfilter)
    x39 = chain(x35, x36, x38)
    x40 = chain(x39, x33, x37)
    x41 = fork(toobject, x23, identity)
    x42 = compose(x28, x41)
    x43 = compose(x40, x23)
    x44 = fork(mapply, x43, x42)
    x45 = fork(paint, identity, x44)
    x46 = compose(rot90, x45)
    x47 = power(x46, FOUR)
    O = x47(x14)
    return O


def solve_9dfd6313(I):
    x1 = shape(I)
    x2 = decrement(x1)
    x3 = connect(ORIGIN, x2)
    x4 = height(I)
    x5 = decrement(x4)
    x6 = toivec(x5)
    x7 = width(I)
    x8 = decrement(x7)
    x9 = tojvec(x8)
    x10 = connect(x6, x9)
    x11 = height(I)
    x12 = halve(x11)
    x13 = toivec(x12)
    x14 = width(I)
    x15 = decrement(x14)
    x16 = astuple(x12, x15)
    x17 = connect(x13, x16)
    x18 = width(I)
    x19 = halve(x18)
    x20 = tojvec(x19)
    x21 = height(I)
    x22 = decrement(x21)
    x23 = astuple(x22, x19)
    x24 = connect(x20, x23)
    x25 = astuple(x3, dmirror)
    x26 = astuple(x10, cmirror)
    x27 = astuple(x25, x26)
    x28 = astuple(x24, vmirror)
    x29 = astuple(x17, hmirror)
    x30 = astuple(x28, x29)
    x31 = combine(x27, x30)
    x32 = lbind(colorcount, I)
    x33 = rbind(toobject, I)
    x34 = compose(x33, first)
    x35 = chain(x32, color, x34)
    x36 = compose(size, first)
    x37 = fork(equality, x35, x36)
    x38 = rbind(toobject, I)
    x39 = chain(numcolors, x38, first)
    x40 = matcher(x39, ONE)
    x41 = fork(both, x40, x37)
    x42 = extract(x31, x41)
    x43 = last(x42)
    O = x43(I)
    return O


def solve_9ecd008a(I):
    x1 = ofcolor(I, ZERO)
    x2 = rbind(colorcount, ZERO)
    x3 = lbind(toobject, x1)
    x4 = compose(x2, x3)
    x5 = vmirror(I)
    x6 = hmirror(I)
    x7 = astuple(x5, x6)
    x8 = argmin(x7, x4)
    O = subgrid(x1, x8)
    return O


def solve_9edfc990(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = ofcolor(I, ONE)
    x4 = rbind(adjacent, x3)
    x5 = mfilter(x2, x4)
    x6 = recolor(ONE, x5)
    O = paint(I, x6)
    return O


def solve_9f236235(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = shape(I)
    x5 = canvas(x3, x4)
    x6 = hconcat(I, x5)
    x7 = objects(x6, T, F, T)
    x8 = apply(uppermost, x7)
    x9 = order(x8, identity)
    x10 = lbind(sfilter, x7)
    x11 = lbind(matcher, uppermost)
    x12 = compose(x10, x11)
    x13 = lbind(apply, color)
    x14 = rbind(order, leftmost)
    x15 = chain(x13, x14, x12)
    x16 = apply(x15, x9)
    O = vmirror(x16)
    return O


def solve_a1570a43(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = fork(equality, toindices, corners)
    x4 = fork(multiply, height, width)
    x5 = sfilter(x1, x3)
    x6 = argmax(x5, x4)
    x7 = difference(x2, x6)
    x8 = mostcolor(I)
    x9 = fill(I, x8, x7)
    x10 = normalize(x7)
    x11 = ulcorner(x6)
    x12 = increment(x11)
    x13 = shift(x10, x12)
    O = paint(x9, x13)
    return O


def solve_a2fd1cf0(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, THREE)
    x3 = uppermost(x1)
    x4 = leftmost(x1)
    x5 = uppermost(x2)
    x6 = leftmost(x2)
    x7 = astuple(x3, x5)
    x8 = minimum(x7)
    x9 = maximum(x7)
    x10 = astuple(x8, x6)
    x11 = astuple(x9, x6)
    x12 = connect(x10, x11)
    x13 = astuple(x4, x6)
    x14 = minimum(x13)
    x15 = maximum(x13)
    x16 = astuple(x3, x14)
    x17 = astuple(x3, x15)
    x18 = connect(x16, x17)
    x19 = combine(x12, x18)
    O = underfill(I, EIGHT, x19)
    return O


def solve_a3325580(I):
    x1 = objects(I, T, F, T)
    x2 = valmax(x1, size)
    x3 = sizefilter(x1, x2)
    x4 = order(x3, leftmost)
    x5 = apply(color, x4)
    x6 = astuple(ONE, x2)
    x7 = rbind(canvas, x6)
    x8 = apply(x7, x5)
    x9 = merge(x8)
    O = dmirror(x9)
    return O


def solve_a3df8b1e(I):
    x1 = portrait(I)
    x2 = branch(x1, identity, dmirror)
    x3 = x2(I)
    x4 = asindices(x3)
    x5 = shoot(ORIGIN, UNITY)
    x6 = intersection(x5, x4)
    x7 = lrcorner(x6)
    x8 = shoot(x7, DOWN_LEFT)
    x9 = intersection(x8, x4)
    x10 = combine(x6, x9)
    x11 = llcorner(x10)
    x12 = remove(x11, x10)
    x13 = lbind(shift, x12)
    x14 = height(x12)
    x15 = lbind(multiply, x14)
    x16 = chain(x13, toivec, x15)
    x17 = height(x3)
    x18 = height(x12)
    x19 = divide(x17, x18)
    x20 = increment(x19)
    x21 = interval(ZERO, x20, ONE)
    x22 = mapply(x16, x21)
    x23 = rbind(contained, x22)
    x24 = sfilter(x4, x23)
    x25 = asindices(I)
    x26 = corners(x25)
    x27 = difference(x25, x26)
    x28 = toobject(x27, I)
    x29 = mostcolor(x28)
    x30 = palette(I)
    x31 = other(x30, x29)
    x32 = ulcorner(x4)
    x33 = index(x3, x32)
    x34 = equality(x33, x31)
    x35 = urcorner(x4)
    x36 = index(x3, x35)
    x37 = equality(x36, x31)
    x38 = llcorner(x4)
    x39 = index(x3, x38)
    x40 = equality(x39, x31)
    x41 = lrcorner(x4)
    x42 = index(x3, x41)
    x43 = equality(x42, x31)
    x44 = astuple(x34, x37)
    x45 = astuple(x40, x43)
    x46 = combine(x44, x45)
    x47 = vmirror(x24)
    x48 = astuple(x24, x47)
    x49 = hmirror(x24)
    x50 = hmirror(x47)
    x51 = astuple(x49, x50)
    x52 = combine(x48, x51)
    x53 = pair(x46, x52)
    x54 = sfilter(x53, first)
    x55 = mapply(last, x54)
    x56 = fill(x3, x31, x55)
    O = x2(x56)
    return O


def solve_a416b8f3(I):
    O = hconcat(I, I)
    return O


def solve_a48eeaf7(I):
    x1 = fgpartition(I)
    x2 = fork(equality, toindices, backdrop)
    x3 = sfilter(x1, x2)
    x4 = argmax(x3, size)
    x5 = other(x1, x4)
    x6 = color(x5)
    x7 = toindices(x5)
    x8 = outbox(x4)
    x9 = lbind(argmin, x8)
    x10 = lbind(lbind, manhattan)
    x11 = rbind(compose, initset)
    x12 = chain(x9, x11, x10)
    x13 = compose(x12, initset)
    x14 = apply(x13, x7)
    x15 = cover(I, x5)
    O = fill(x15, x6, x14)
    return O


def solve_a5313dff(I):
    x1 = objects(I, T, F, F)
    x2 = rbind(bordering, I)
    x3 = compose(flip, x2)
    x4 = sfilter(x1, x3)
    x5 = totuple(x4)
    x6 = apply(color, x5)
    x7 = mostcommon(x6)
    x8 = mostcolor(I)
    x9 = colorfilter(x1, x8)
    x10 = rbind(bordering, I)
    x11 = compose(flip, x10)
    x12 = mfilter(x9, x11)
    O = fill(I, ONE, x12)
    return O


def solve_a5f85a15(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = compose(increment, double)
    x4 = shoot(ORIGIN, UNITY)
    x5 = apply(x3, x4)
    x6 = order(x5, identity)
    x7 = lbind(contained, ZERO)
    x8 = sfilter(x2, x7)
    x9 = lbind(shift, x6)
    x10 = mapply(x9, x8)
    O = fill(I, FOUR, x10)
    return O


def solve_a61ba2ce(I):
    x1 = fgpartition(I)
    x2 = fork(contained, lrcorner, toindices)
    x3 = compose(flip, x2)
    x4 = extract(x1, x3)
    x5 = fork(contained, llcorner, toindices)
    x6 = compose(flip, x5)
    x7 = extract(x1, x6)
    x8 = fork(contained, urcorner, toindices)
    x9 = compose(flip, x8)
    x10 = extract(x1, x9)
    x11 = fork(contained, ulcorner, toindices)
    x12 = compose(flip, x11)
    x13 = extract(x1, x12)
    x14 = height(x4)
    x15 = height(x10)
    x16 = add(x14, x15)
    x17 = width(x4)
    x18 = width(x7)
    x19 = add(x17, x18)
    x20 = astuple(x16, x19)
    x21 = mostcolor(I)
    x22 = canvas(x21, x20)
    x23 = normalize(x4)
    x24 = paint(x22, x23)
    x25 = normalize(x7)
    x26 = width(x7)
    x27 = subtract(x19, x26)
    x28 = tojvec(x27)
    x29 = shift(x25, x28)
    x30 = paint(x24, x29)
    x31 = normalize(x10)
    x32 = height(x10)
    x33 = subtract(x16, x32)
    x34 = toivec(x33)
    x35 = shift(x31, x34)
    x36 = paint(x30, x35)
    x37 = normalize(x13)
    x38 = shape(x13)
    x39 = subtract(x20, x38)
    x40 = shift(x37, x39)
    O = paint(x36, x40)
    return O


def solve_a61f2674(I):
    x1 = objects(I, T, F, T)
    x2 = argmax(x1, size)
    x3 = argmin(x1, size)
    x4 = merge(x1)
    x5 = cover(I, x4)
    x6 = fill(x5, ONE, x2)
    O = fill(x6, TWO, x3)
    return O


def solve_a64e4611(I):
    x1 = mostcolor(I)
    x2 = shape(I)
    x3 = add(TWO, x2)
    x4 = canvas(x1, x3)
    x5 = asobject(I)
    x6 = shift(x5, UNITY)
    x7 = paint(x4, x6)
    x8 = double(SIX)
    x9 = astuple(ONE, x8)
    x10 = connect(UNITY, x9)
    x11 = outbox(x10)
    x12 = backdrop(x11)
    x13 = recolor(x1, x12)
    x14 = recolor(THREE, x10)
    x15 = lbind(shift, x14)
    x16 = lbind(mapply, x15)
    x17 = rbind(occurrences, x13)
    x18 = compose(x16, x17)
    x19 = fork(paint, identity, x18)
    x20 = x19(x7)
    x21 = ofcolor(x20, THREE)
    x22 = dmirror(x7)
    x23 = x19(x22)
    x24 = dmirror(x23)
    x25 = ofcolor(x24, THREE)
    x26 = combine(x21, x25)
    x27 = fill(x7, THREE, x26)
    x28 = astuple(TWO, ONE)
    x29 = dneighbors(UNITY)
    x30 = remove(x28, x29)
    x31 = recolor(x1, x30)
    x32 = initset(UNITY)
    x33 = recolor(THREE, x32)
    x34 = combine(x31, x33)
    x35 = recolor(x1, x34)
    x36 = astuple(ONE, THREE)
    x37 = initset(x36)
    x38 = insert(ZERO_BY_TWO, x37)
    x39 = insert(RIGHT, x38)
    x40 = insert(DOWN, x39)
    x41 = recolor(x1, x40)
    x42 = astuple(ONE, TWO)
    x43 = initset(x42)
    x44 = insert(UNITY, x43)
    x45 = recolor(THREE, x44)
    x46 = combine(x41, x45)
    x47 = recolor(x1, x46)
    x48 = lbind(shift, x35)
    x49 = lbind(mapply, x48)
    x50 = rbind(occurrences, x34)
    x51 = compose(x49, x50)
    x52 = fork(paint, identity, x51)
    x53 = lbind(shift, x47)
    x54 = lbind(mapply, x53)
    x55 = rbind(occurrences, x46)
    x56 = compose(x54, x55)
    x57 = fork(paint, identity, x56)
    x58 = compose(x52, x57)
    x59 = compose(rot90, x58)
    x60 = power(x59, FOUR)
    x61 = power(x60, TWO)
    x62 = asindices(x27)
    x63 = box(x62)
    x64 = fill(x27, THREE, x63)
    x65 = x61(x64)
    O = trim(x65)
    return O


def solve_a65b410d(I):
    x1 = astuple(identity, rot90)
    x2 = astuple(rot180, rot270)
    x3 = combine(x1, x2)
    x4 = astuple(identity, rot270)
    x5 = astuple(rot180, rot90)
    x6 = combine(x4, x5)
    x7 = pair(x3, x6)
    x8 = leastcolor(I)
    x9 = rbind(ofcolor, x8)
    x10 = rbind(rapply, I)
    x11 = chain(first, x10, initset)
    x12 = chain(hline, x9, x11)
    x13 = rbind(ofcolor, x8)
    x14 = rbind(rapply, I)
    x15 = chain(first, x14, initset)
    x16 = chain(leftmost, x13, x15)
    x17 = matcher(x16, ZERO)
    x18 = fork(both, x12, x17)
    x19 = compose(x18, first)
    x20 = extract(x7, x19)
    x21 = first(x20)
    x22 = last(x20)
    x23 = x21(I)
    x24 = ofcolor(x23, x8)
    x25 = argmax(x24, last)
    x26 = add(x25, UP_RIGHT)
    x27 = shoot(x26, UP_RIGHT)
    x28 = add(x25, DOWN_LEFT)
    x29 = shoot(x28, DOWN_LEFT)
    x30 = rbind(shoot, LEFT)
    x31 = mapply(x30, x27)
    x32 = rbind(shoot, LEFT)
    x33 = mapply(x32, x29)
    x34 = width(x23)
    x35 = invert(x34)
    x36 = tojvec(x35)
    x37 = shift(x31, x36)
    x38 = combine(x31, x37)
    x39 = fill(x23, THREE, x38)
    x40 = shift(x33, x36)
    x41 = combine(x33, x40)
    x42 = fill(x39, ONE, x41)
    O = x22(x42)
    return O


def solve_a68b268e(I):
    x1 = tophalf(I)
    x2 = lefthalf(x1)
    x3 = tophalf(I)
    x4 = righthalf(x3)
    x5 = bottomhalf(I)
    x6 = lefthalf(x5)
    x7 = bottomhalf(I)
    x8 = righthalf(x7)
    x9 = palette(x2)
    x10 = palette(x4)
    x11 = intersection(x9, x10)
    x12 = palette(x6)
    x13 = palette(x8)
    x14 = intersection(x12, x13)
    x15 = intersection(x11, x14)
    x16 = first(x15)
    x17 = shape(I)
    x18 = halve(x17)
    x19 = canvas(x16, x18)
    x20 = matcher(first, x16)
    x21 = compose(flip, x20)
    x22 = rbind(sfilter, x21)
    x23 = compose(x22, asobject)
    x24 = x23(x2)
    x25 = x23(x4)
    x26 = x23(x6)
    x27 = x23(x8)
    x28 = paint(x19, x27)
    x29 = paint(x28, x26)
    x30 = paint(x29, x25)
    O = paint(x30, x24)
    return O


def solve_a699fb00(I):
    x1 = leastcolor(I)
    x2 = height(I)
    x3 = vsplit(I, x2)
    x4 = lbind(recolor, TWO)
    x5 = rbind(ofcolor, x1)
    x6 = chain(x4, delta, x5)
    x7 = fork(paint, identity, x6)
    x8 = apply(x7, x3)
    O = merge(x8)
    return O


def solve_a740d043(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = subgrid(x2, I)
    x4 = mostcolor(I)
    O = replace(x3, x4, ZERO)
    return O


def solve_a78176bb(I):
    x1 = mostcolor(I)
    x2 = objects(I, T, T, F)
    x3 = fork(connect, ulcorner, lrcorner)
    x4 = fork(equality, toindices, x3)
    x5 = sfilter(x2, x4)
    x6 = size(x5)
    x7 = positive(x6)
    x8 = branch(x7, identity, hmirror)
    x9 = x8(I)
    x10 = objects(x9, T, F, T)
    x11 = compose(flip, x4)
    x12 = sfilter(x10, x11)
    x13 = rbind(shoot, UNITY)
    x14 = rbind(shoot, NEG_UNITY)
    x15 = fork(combine, x13, x14)
    x16 = rbind(branch, llcorner)
    x17 = rbind(x16, urcorner)
    x18 = rbind(branch, DOWN_LEFT)
    x19 = rbind(x18, UP_RIGHT)
    x20 = rbind(branch, RIGHT)
    x21 = rbind(x20, DOWN)
    x22 = fork(contained, urcorner, toindices)
    x23 = lbind(index, x9)
    x24 = compose(x21, x22)
    x25 = fork(add, ulcorner, x24)
    x26 = compose(x23, x25)
    x27 = chain(initset, x17, x22)
    x28 = fork(rapply, x27, identity)
    x29 = compose(first, x28)
    x30 = compose(x19, x22)
    x31 = fork(add, x29, x30)
    x32 = compose(x15, x31)
    x33 = fork(recolor, x26, x32)
    x34 = mapply(x33, x12)
    x35 = merge(x12)
    x36 = cover(x9, x35)
    x37 = paint(x36, x34)
    O = x8(x37)
    return O


def solve_a79310a0(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = mostcolor(I)
    x4 = fill(I, x3, x2)
    x5 = shift(x2, DOWN)
    O = fill(x4, TWO, x5)
    return O


def solve_a85d4709(I):
    x1 = leastcolor(I)
    x2 = height(I)
    x3 = vsplit(I, x2)
    x4 = rbind(ofcolor, x1)
    x5 = compose(leftmost, x4)
    x6 = width(I)
    x7 = divide(x6, THREE)
    x8 = multiply(x7, TWO)
    x9 = lbind(greater, x7)
    x10 = compose(x9, x5)
    x11 = lbind(greater, x8)
    x12 = compose(x11, x5)
    x13 = compose(flip, x10)
    x14 = fork(both, x12, x13)
    x15 = fork(either, x10, x14)
    x16 = compose(flip, x15)
    x17 = rbind(multiply, TWO)
    x18 = compose(x17, x10)
    x19 = rbind(multiply, FOUR)
    x20 = compose(x19, x14)
    x21 = rbind(multiply, THREE)
    x22 = compose(x21, x16)
    x23 = fork(add, x18, x20)
    x24 = fork(add, x23, x22)
    x25 = width(I)
    x26 = rbind(repeat, x25)
    x27 = compose(x26, x24)
    O = apply(x27, x3)
    return O


def solve_a87f7484(I):
    x1 = height(I)
    x2 = halve(x1)
    x3 = increment(x2)
    x4 = interval(THREE, x3, ONE)
    x5 = width(I)
    x6 = halve(x5)
    x7 = increment(x6)
    x8 = interval(THREE, x7, ONE)
    x9 = palette(I)
    x10 = lbind(apply, toindices)
    x11 = compose(x10, partition)
    x12 = rbind(compose, palette)
    x13 = lbind(lbind, contained)
    x14 = compose(x12, x13)
    x15 = lbind(chain, size)
    x16 = rbind(x15, x14)
    x17 = lbind(lbind, sfilter)
    x18 = compose(x16, x17)
    x19 = compose(positive, size)
    x20 = lbind(sfilter, x9)
    x21 = fork(matcher, x18, size)
    x22 = chain(x19, x20, x21)
    x23 = lbind(apply, shape)
    x24 = chain(size, dedupe, x23)
    x25 = matcher(x24, ONE)
    x26 = lbind(apply, x11)
    x27 = chain(size, dedupe, x26)
    x28 = matcher(x27, TWO)
    x29 = compose(size, dedupe)
    x30 = fork(equality, size, x29)
    x31 = fork(add, x22, x25)
    x32 = fork(add, x28, x30)
    x33 = fork(add, x31, x32)
    x34 = multiply(TEN, TEN)
    x35 = lbind(multiply, x34)
    x36 = compose(x35, x33)
    x37 = fork(add, x36, size)
    x38 = lbind(vsplit, I)
    x39 = apply(x38, x4)
    x40 = lbind(hsplit, I)
    x41 = apply(x40, x8)
    x42 = combine(x39, x41)
    x43 = argmax(x42, x37)
    x44 = apply(x11, x43)
    x45 = mostcommon(x44)
    x46 = matcher(x11, x45)
    O = argmin(x43, x46)
    return O


def solve_a8c38be5(I):
    x1 = objects(I, T, F, F)
    x2 = mostcolor(I)
    x3 = palette(I)
    x4 = remove(x2, x3)
    x5 = lbind(colorcount, I)
    x6 = argmax(x4, x5)
    x7 = astuple(x2, x6)
    x8 = rbind(contained, x7)
    x9 = chain(flip, x8, color)
    x10 = sfilter(x1, x9)
    x11 = fork(connect, ulcorner, urcorner)
    x12 = fork(connect, ulcorner, llcorner)
    x13 = fork(combine, x11, x12)
    x14 = fork(equality, toindices, x13)
    x15 = fork(connect, urcorner, ulcorner)
    x16 = fork(connect, urcorner, lrcorner)
    x17 = fork(combine, x15, x16)
    x18 = fork(equality, toindices, x17)
    x19 = fork(connect, llcorner, ulcorner)
    x20 = fork(connect, llcorner, lrcorner)
    x21 = fork(combine, x19, x20)
    x22 = fork(equality, toindices, x21)
    x23 = fork(connect, lrcorner, llcorner)
    x24 = fork(connect, lrcorner, urcorner)
    x25 = fork(combine, x23, x24)
    x26 = fork(equality, toindices, x25)
    x27 = fork(contained, lrcorner, toindices)
    x28 = compose(flip, x27)
    x29 = fork(contained, llcorner, toindices)
    x30 = compose(flip, x29)
    x31 = fork(contained, urcorner, toindices)
    x32 = compose(flip, x31)
    x33 = fork(contained, ulcorner, toindices)
    x34 = compose(flip, x33)
    x35 = fork(both, x28, x30)
    x36 = fork(both, x32, x34)
    x37 = fork(both, x32, x28)
    x38 = fork(both, x34, x30)
    x39 = lbind(matcher, first)
    x40 = compose(x39, lowermost)
    x41 = fork(sfilter, toindices, x40)
    x42 = compose(size, x41)
    x43 = matcher(x42, ONE)
    x44 = lbind(matcher, first)
    x45 = compose(x44, uppermost)
    x46 = fork(sfilter, toindices, x45)
    x47 = compose(size, x46)
    x48 = matcher(x47, ONE)
    x49 = lbind(matcher, last)
    x50 = compose(x49, rightmost)
    x51 = fork(sfilter, toindices, x50)
    x52 = compose(size, x51)
    x53 = matcher(x52, ONE)
    x54 = lbind(matcher, last)
    x55 = compose(x54, leftmost)
    x56 = fork(sfilter, toindices, x55)
    x57 = compose(size, x56)
    x58 = matcher(x57, ONE)
    x59 = fork(both, x35, x43)
    x60 = fork(both, x36, x48)
    x61 = fork(both, x37, x53)
    x62 = fork(both, x38, x58)
    x63 = fork(connect, ulcorner, urcorner)
    x64 = fork(difference, x63, toindices)
    x65 = compose(size, x64)
    x66 = matcher(x65, ZERO)
    x67 = fork(connect, llcorner, lrcorner)
    x68 = fork(difference, x67, toindices)
    x69 = compose(size, x68)
    x70 = matcher(x69, ZERO)
    x71 = fork(connect, ulcorner, llcorner)
    x72 = fork(difference, x71, toindices)
    x73 = compose(size, x72)
    x74 = matcher(x73, ZERO)
    x75 = fork(connect, urcorner, lrcorner)
    x76 = fork(difference, x75, toindices)
    x77 = compose(size, x76)
    x78 = matcher(x77, ZERO)
    x79 = fork(both, x66, x59)
    x80 = fork(both, x70, x60)
    x81 = fork(both, x74, x61)
    x82 = fork(both, x78, x62)
    x83 = argmax(x10, x14)
    x84 = argmax(x10, x18)
    x85 = argmax(x10, x22)
    x86 = argmax(x10, x26)
    x87 = argmax(x10, x79)
    x88 = argmax(x10, x80)
    x89 = argmax(x10, x81)
    x90 = argmax(x10, x82)
    x91 = height(x83)
    x92 = height(x85)
    x93 = add(x91, x92)
    x94 = height(x89)
    x95 = add(x94, TWO)
    x96 = add(x93, x95)
    x97 = width(x83)
    x98 = width(x84)
    x99 = add(x97, x98)
    x100 = width(x87)
    x101 = add(x100, TWO)
    x102 = add(x99, x101)
    x103 = ulcorner(x83)
    x104 = increment(x103)
    x105 = index(I, x104)
    x106 = astuple(x96, x102)
    x107 = canvas(x105, x106)
    x108 = normalize(x83)
    x109 = paint(x107, x108)
    x110 = normalize(x84)
    x111 = width(x84)
    x112 = subtract(x102, x111)
    x113 = tojvec(x112)
    x114 = shift(x110, x113)
    x115 = paint(x109, x114)
    x116 = normalize(x85)
    x117 = height(x85)
    x118 = subtract(x96, x117)
    x119 = toivec(x118)
    x120 = shift(x116, x119)
    x121 = paint(x115, x120)
    x122 = normalize(x86)
    x123 = height(x86)
    x124 = subtract(x96, x123)
    x125 = width(x86)
    x126 = subtract(x102, x125)
    x127 = astuple(x124, x126)
    x128 = shift(x122, x127)
    x129 = paint(x121, x128)
    x130 = normalize(x89)
    x131 = height(x83)
    x132 = increment(x131)
    x133 = toivec(x132)
    x134 = shift(x130, x133)
    x135 = paint(x129, x134)
    x136 = normalize(x87)
    x137 = width(x83)
    x138 = increment(x137)
    x139 = tojvec(x138)
    x140 = shift(x136, x139)
    x141 = paint(x135, x140)
    x142 = normalize(x90)
    x143 = height(x84)
    x144 = increment(x143)
    x145 = width(x90)
    x146 = subtract(x102, x145)
    x147 = astuple(x144, x146)
    x148 = shift(x142, x147)
    x149 = paint(x141, x148)
    x150 = normalize(x88)
    x151 = height(x88)
    x152 = subtract(x96, x151)
    x153 = width(x85)
    x154 = increment(x153)
    x155 = astuple(x152, x154)
    x156 = shift(x150, x155)
    O = paint(x149, x156)
    return O


def solve_a8d7556c(I):
    x1 = initset(ORIGIN)
    x2 = recolor(ZERO, x1)
    x3 = upscale(x2, TWO)
    x4 = occurrences(I, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    O = fill(I, TWO, x6)
    return O


def solve_a9f96cdd(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = shift(x2, NEG_UNITY)
    x4 = recolor(THREE, x3)
    x5 = shift(x2, UNITY)
    x6 = recolor(SEVEN, x5)
    x7 = shift(x2, DOWN_LEFT)
    x8 = recolor(EIGHT, x7)
    x9 = shift(x2, UP_RIGHT)
    x10 = recolor(SIX, x9)
    x11 = mostcolor(I)
    x12 = fill(I, x11, x2)
    x13 = combine(x4, x6)
    x14 = combine(x8, x10)
    x15 = combine(x13, x14)
    O = paint(x12, x15)
    return O


def solve_aabf363d(I):
    x1 = fork(multiply, height, width)
    x2 = lbind(ofcolor, I)
    x3 = palette(I)
    x4 = compose(x1, x2)
    x5 = argmax(x3, x4)
    x6 = leastcolor(I)
    x7 = palette(I)
    x8 = remove(x5, x7)
    x9 = other(x8, x6)
    x10 = replace(I, x6, x5)
    O = replace(x10, x9, x6)
    return O


def solve_aba27056(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = delta(x2)
    x4 = fill(I, FOUR, x3)
    x5 = delta(x2)
    x6 = box(x2)
    x7 = intersection(x5, x6)
    x8 = uppermost(x7)
    x9 = uppermost(x2)
    x10 = equality(x8, x9)
    x11 = leftmost(x7)
    x12 = leftmost(x2)
    x13 = equality(x11, x12)
    x14 = lowermost(x7)
    x15 = lowermost(x2)
    x16 = equality(x14, x15)
    x17 = rightmost(x7)
    x18 = rightmost(x2)
    x19 = equality(x17, x18)
    x20 = urcorner(x7)
    x21 = ulcorner(x7)
    x22 = llcorner(x7)
    x23 = lrcorner(x7)
    x24 = branch(x16, x22, x23)
    x25 = branch(x13, x21, x24)
    x26 = branch(x10, x20, x25)
    x27 = branch(x16, x23, x20)
    x28 = branch(x13, x22, x27)
    x29 = branch(x10, x21, x28)
    x30 = branch(x16, DOWN_LEFT, UNITY)
    x31 = branch(x13, NEG_UNITY, x30)
    x32 = branch(x10, UP_RIGHT, x31)
    x33 = branch(x16, UNITY, UP_RIGHT)
    x34 = branch(x13, DOWN_LEFT, x33)
    x35 = branch(x10, NEG_UNITY, x34)
    x36 = branch(x16, DOWN, RIGHT)
    x37 = branch(x13, LEFT, x36)
    x38 = branch(x10, UP, x37)
    x39 = shoot(x26, x32)
    x40 = shoot(x29, x35)
    x41 = combine(x39, x40)
    x42 = rbind(shoot, x38)
    x43 = mapply(x42, x7)
    x44 = combine(x43, x41)
    O = fill(x4, FOUR, x44)
    return O


def solve_ac0a08a4(I):
    x1 = mostcolor(I)
    x2 = colorcount(I, x1)
    x3 = height(I)
    x4 = width(I)
    x5 = multiply(x3, x4)
    x6 = subtract(x5, x2)
    O = upscale(I, x6)
    return O


def solve_ae3edfdc(I):
    x1 = ofcolor(I, ONE)
    x2 = center(x1)
    x3 = ofcolor(I, TWO)
    x4 = center(x3)
    x5 = ofcolor(I, THREE)
    x6 = ofcolor(I, SEVEN)
    x7 = lbind(add, x2)
    x8 = initset(x2)
    x9 = rbind(position, x8)
    x10 = compose(invert, x9)
    x11 = chain(x7, x10, initset)
    x12 = lbind(add, x4)
    x13 = initset(x4)
    x14 = rbind(position, x13)
    x15 = compose(invert, x14)
    x16 = chain(x12, x15, initset)
    x17 = apply(x11, x6)
    x18 = apply(x16, x5)
    x19 = combine(x5, x6)
    x20 = cover(I, x19)
    x21 = fill(x20, SEVEN, x17)
    O = fill(x21, THREE, x18)
    return O


def solve_ae4f1146(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = objects(I, F, F, T)
    x6 = rbind(colorcount, ONE)
    x7 = argmax(x5, x6)
    O = subgrid(x7, I)
    return O


def solve_aedd82e4(I):
    x1 = shape(I)
    x2 = canvas(ZERO, x1)
    x3 = hconcat(I, x2)
    x4 = objects(x3, F, F, T)
    x5 = matcher(color, ZERO)
    x6 = compose(flip, x5)
    x7 = sfilter(x4, x6)
    x8 = sizefilter(x7, ONE)
    x9 = merge(x8)
    O = fill(I, ONE, x9)
    return O


def solve_af902bf9(I):
    x1 = mostcolor(I)
    x2 = palette(I)
    x3 = remove(x1, x2)
    x4 = interval(THREE, SEVEN, ONE)
    x5 = product(x4, x4)
    x6 = fork(multiply, first, last)
    x7 = order(x5, x6)
    x8 = lbind(canvas, NEG_ONE)
    x9 = chain(x8, first, first)
    x10 = chain(corners, asindices, x9)
    x11 = lbind(recolor, x1)
    x12 = compose(asindices, x9)
    x13 = fork(difference, x12, x10)
    x14 = lbind(recolor, TWO)
    x15 = compose(inbox, x10)
    x16 = chain(x14, backdrop, x15)
    x17 = compose(x11, x13)
    x18 = lbind(lbind, combine)
    x19 = compose(x18, x17)
    x20 = lbind(rbind, recolor)
    x21 = compose(x20, x10)
    x22 = fork(compose, x19, x21)
    x23 = lbind(lbind, mapply)
    x24 = lbind(lbind, shift)
    x25 = chain(x23, x24, x16)
    x26 = lbind(lbind, occurrences)
    x27 = compose(x26, last)
    x28 = fork(compose, x27, x22)
    x29 = fork(compose, x25, x28)
    x30 = rbind(mapply, x3)
    x31 = compose(x30, x29)
    x32 = fork(paint, last, x31)
    x33 = compose(first, first)
    x34 = fork(remove, x33, first)
    x35 = fork(astuple, x34, x32)
    x36 = size(x7)
    x37 = power(x35, x36)
    x38 = astuple(x7, I)
    x39 = x37(x38)
    O = last(x39)
    return O


def solve_b0c4d837(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = remove(x3, x1)
    x5 = argmin(x4, x2)
    x6 = argmax(x4, x2)
    x7 = ulcorner(x6)
    x8 = llcorner(x6)
    x9 = connect(x7, x8)
    x10 = urcorner(x6)
    x11 = lrcorner(x6)
    x12 = connect(x10, x11)
    x13 = combine(x9, x12)
    x14 = toindices(x6)
    x15 = difference(x13, x14)
    x16 = size(x15)
    x17 = equality(x16, ZERO)
    x18 = branch(x17, height, width)
    x19 = x18(x6)
    x20 = x18(x5)
    x21 = subtract(x19, x20)
    x22 = decrement(x21)
    x23 = color(x5)
    x24 = color(x3)
    x25 = repeat(x23, x22)
    x26 = subtract(NINE, x22)
    x27 = repeat(x24, x26)
    x28 = combine(x25, x27)
    x29 = repeat(x28, ONE)
    x30 = hsplit(x29, THREE)
    x31 = interval(ZERO, THREE, ONE)
    x32 = pair(x31, x30)
    x33 = matcher(first, ZERO)
    x34 = extract(x32, x33)
    x35 = last(x34)
    x36 = matcher(first, ONE)
    x37 = extract(x32, x36)
    x38 = last(x37)
    x39 = matcher(first, TWO)
    x40 = extract(x32, x39)
    x41 = last(x40)
    x42 = vmirror(x38)
    x43 = vconcat(x35, x42)
    O = vconcat(x43, x41)
    return O


def solve_b190f7f5(I):
    x1 = lbind(contained, TWO)
    x2 = lbind(apply, numcolors)
    x3 = compose(x1, x2)
    x4 = lbind(apply, shape)
    x5 = chain(size, dedupe, x4)
    x6 = matcher(x5, ONE)
    x7 = compose(palette, first)
    x8 = compose(palette, last)
    x9 = fork(intersection, x7, x8)
    x10 = compose(size, x9)
    x11 = matcher(x10, ONE)
    x12 = lbind(contained, ONE)
    x13 = compose(minimum, shape)
    x14 = lbind(apply, x13)
    x15 = chain(flip, x12, x14)
    x16 = fork(add, x3, x6)
    x17 = fork(add, x11, x15)
    x18 = fork(add, x16, x17)
    x19 = vsplit(I, TWO)
    x20 = hsplit(I, TWO)
    x21 = astuple(x19, x20)
    x22 = argmax(x21, x18)
    x23 = argmin(x22, numcolors)
    x24 = argmax(x22, numcolors)
    x25 = palette(x23)
    x26 = palette(x24)
    x27 = intersection(x25, x26)
    x28 = first(x27)
    x29 = asindices(x23)
    x30 = ofcolor(x23, x28)
    x31 = difference(x29, x30)
    x32 = asobject(x24)
    x33 = matcher(first, x28)
    x34 = sfilter(x32, x33)
    x35 = difference(x32, x34)
    x36 = shape(x23)
    x37 = multiply(x36, x36)
    x38 = canvas(x28, x37)
    x39 = lbind(shift, x31)
    x40 = lbind(multiply, x36)
    x41 = chain(x39, x40, last)
    x42 = fork(recolor, first, x41)
    x43 = mapply(x42, x35)
    O = paint(x38, x43)
    return O


def solve_b1948b0a(I):
    O = replace(I, SIX, TWO)
    return O


def solve_b230c067(I):
    x1 = objects(I, T, T, T)
    x2 = lbind(sfilter, x1)
    x3 = lbind(matcher, normalize)
    x4 = compose(x3, normalize)
    x5 = chain(size, x2, x4)
    x6 = argmin(x1, x5)
    x7 = remove(x6, x1)
    x8 = merge(x7)
    x9 = fill(I, TWO, x6)
    O = fill(x9, ONE, x8)
    return O


def solve_b27ca6d3(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, TWO)
    x3 = mapply(outbox, x2)
    O = fill(I, THREE, x3)
    return O


def solve_b2862040(I):
    x1 = objects(I, T, F, F)
    x2 = mostcolor(I)
    x3 = colorfilter(x1, x2)
    x4 = rbind(bordering, I)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    x7 = difference(x1, x3)
    x8 = apply(toindices, x7)
    x9 = rbind(adjacent, x6)
    x10 = mfilter(x8, x9)
    O = fill(I, EIGHT, x10)
    return O


def solve_b527c5c6(I):
    x1 = objects(I, F, F, T)
    x2 = lbind(matcher, first)
    x3 = compose(x2, leastcolor)
    x4 = fork(sfilter, identity, x3)
    x5 = compose(center, x4)
    x6 = compose(dneighbors, x5)
    x7 = fork(difference, x6, toindices)
    x8 = compose(first, x7)
    x9 = fork(subtract, x8, x5)
    x10 = compose(invert, x9)
    x11 = fork(shoot, x5, x10)
    x12 = fork(intersection, toindices, x11)
    x13 = chain(decrement, size, x12)
    x14 = fork(shoot, x5, x9)
    x15 = lbind(power, outbox)
    x16 = compose(x15, x13)
    x17 = compose(initset, x16)
    x18 = fork(rapply, x17, x14)
    x19 = chain(backdrop, first, x18)
    x20 = fork(recolor, leastcolor, x14)
    x21 = fork(difference, x19, x14)
    x22 = fork(recolor, mostcolor, x21)
    x23 = fork(combine, x20, x22)
    x24 = mapply(x23, x1)
    O = paint(I, x24)
    return O


def solve_b548a754(I):
    x1 = partition(I)
    x2 = fork(equality, toindices, box)
    x3 = fork(multiply, height, width)
    x4 = fork(equality, size, x3)
    x5 = compose(flip, x4)
    x6 = fork(both, x2, x5)
    x7 = extract(x1, x6)
    x8 = inbox(x7)
    x9 = backdrop(x8)
    x10 = toobject(x9, I)
    x11 = remove(x10, x1)
    x12 = remove(x7, x11)
    x13 = argmin(x12, size)
    x14 = combine(x13, x7)
    x15 = backdrop(x14)
    x16 = color(x10)
    x17 = fill(I, x16, x15)
    x18 = color(x7)
    x19 = box(x15)
    O = fill(x17, x18, x19)
    return O


def solve_b60334d2(I):
    x1 = leastcolor(I)
    x2 = mostcolor(I)
    x3 = ofcolor(I, x1)
    x4 = replace(I, x1, x2)
    x5 = mapply(dneighbors, x3)
    x6 = mapply(ineighbors, x3)
    x7 = fill(x4, ONE, x5)
    O = fill(x7, x1, x6)
    return O


def solve_b6afb2da(I):
    x1 = objects(I, T, F, F)
    x2 = fork(equality, toindices, backdrop)
    x3 = compose(flip, x2)
    x4 = extract(x1, x3)
    x5 = color(x4)
    x6 = matcher(color, x5)
    x7 = compose(flip, x6)
    x8 = sfilter(x1, x7)
    x9 = merge(x8)
    x10 = fill(I, TWO, x9)
    x11 = mapply(box, x8)
    x12 = fill(x10, FOUR, x11)
    x13 = mapply(corners, x8)
    O = fill(x12, ONE, x13)
    return O


def solve_b7249182(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = portrait(x2)
    x4 = branch(x3, identity, dmirror)
    x5 = x4(I)
    x6 = objects(x5, T, F, T)
    x7 = order(x6, uppermost)
    x8 = first(x7)
    x9 = last(x7)
    x10 = color(x8)
    x11 = color(x9)
    x12 = compose(first, toindices)
    x13 = x12(x8)
    x14 = x12(x9)
    x15 = connect(x13, x14)
    x16 = centerofmass(x15)
    x17 = connect(x13, x16)
    x18 = fill(x5, x11, x15)
    x19 = fill(x18, x10, x17)
    x20 = add(x16, DOWN)
    x21 = initset(x16)
    x22 = insert(x20, x21)
    x23 = toobject(x22, x19)
    x24 = astuple(ZERO, NEG_TWO)
    x25 = shift(x23, ZERO_BY_TWO)
    x26 = shift(x23, x24)
    x27 = combine(x25, x26)
    x28 = ulcorner(x27)
    x29 = urcorner(x27)
    x30 = connect(x28, x29)
    x31 = shift(x30, UP)
    x32 = llcorner(x27)
    x33 = lrcorner(x27)
    x34 = connect(x32, x33)
    x35 = shift(x34, DOWN)
    x36 = paint(x19, x27)
    x37 = fill(x36, x10, x31)
    x38 = fill(x37, x11, x35)
    x39 = cover(x38, x22)
    O = x4(x39)
    return O


def solve_b775ac94(I):
    x1 = objects(I, F, T, T)
    x2 = neighbors(ORIGIN)
    x3 = lbind(extract, x2)
    x4 = matcher(first, ZERO)
    x5 = matcher(last, ZERO)
    x6 = rbind(branch, hmirror)
    x7 = rbind(x6, identity)
    x8 = rbind(branch, vmirror)
    x9 = rbind(x8, identity)
    x10 = compose(x7, x4)
    x11 = compose(x9, x5)
    x12 = fork(compose, x10, x11)
    x13 = lbind(matcher, first)
    x14 = compose(x13, mostcolor)
    x15 = fork(sfilter, identity, x14)
    x16 = fork(difference, identity, x15)
    x17 = lbind(rbind, multiply)
    x18 = chain(x17, shape, x15)
    x19 = lbind(lbind, shift)
    x20 = chain(x19, backdrop, x15)
    x21 = fork(compose, x20, x18)
    x22 = lbind(lbind, contained)
    x23 = compose(x22, last)
    x24 = rbind(compose, x23)
    x25 = lbind(rbind, compose)
    x26 = chain(x24, x25, x21)
    x27 = lbind(fork, recolor)
    x28 = lbind(x27, first)
    x29 = lbind(fork, shift)
    x30 = lbind(chain, x12)
    x31 = lbind(x30, x3)
    x32 = rbind(compose, x3)
    x33 = compose(x32, x18)
    x34 = fork(compose, x33, x26)
    x35 = compose(x31, x26)
    x36 = lbind(chain, first)
    x37 = lbind(rbind, rapply)
    x38 = compose(x37, x15)
    x39 = lbind(compose, initset)
    x40 = compose(x39, x35)
    x41 = fork(x36, x38, x40)
    x42 = compose(x28, x41)
    x43 = fork(x29, x42, x34)
    x44 = fork(mapply, x43, x16)
    x45 = mapply(x44, x1)
    O = paint(I, x45)
    return O


def solve_b782dc8a(I):
    x1 = leastcolor(I)
    x2 = palette(I)
    x3 = remove(x1, x2)
    x4 = lbind(colorcount, I)
    x5 = argmin(x3, x4)
    x6 = ofcolor(I, x1)
    x7 = ofcolor(I, x5)
    x8 = combine(x6, x7)
    x9 = mapply(neighbors, x8)
    x10 = difference(x9, x8)
    x11 = toobject(x10, I)
    x12 = leastcolor(x11)
    x13 = ofcolor(I, x1)
    x14 = first(x13)
    x15 = initset(x14)
    x16 = objects(I, T, F, F)
    x17 = colorfilter(x16, x12)
    x18 = lbind(adjacent, x8)
    x19 = mfilter(x17, x18)
    x20 = toindices(x19)
    x21 = rbind(manhattan, x15)
    x22 = chain(even, x21, initset)
    x23 = sfilter(x20, x22)
    x24 = fill(I, x5, x20)
    O = fill(x24, x1, x23)
    return O


def solve_b8825c91(I):
    x1 = replace(I, FOUR, NEG_ONE)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = cmirror(x5)
    x7 = papply(pair, x5, x6)
    x8 = apply(x4, x7)
    x9 = hmirror(x8)
    x10 = papply(pair, x8, x9)
    x11 = apply(x4, x10)
    x12 = vmirror(x11)
    x13 = papply(pair, x12, x11)
    O = apply(x4, x13)
    return O


def solve_b8cdaf2b(I):
    x1 = leastcolor(I)
    x2 = astuple(dmirror, cmirror)
    x3 = astuple(hmirror, identity)
    x4 = combine(x2, x3)
    x5 = rbind(rapply, I)
    x6 = chain(first, x5, initset)
    x7 = rbind(ofcolor, x1)
    x8 = chain(lowermost, x7, x6)
    x9 = chain(decrement, height, x6)
    x10 = fork(equality, x8, x9)
    x11 = extract(x4, x10)
    x12 = x11(I)
    x13 = ofcolor(x12, x1)
    x14 = shift(x13, UP)
    x15 = ulcorner(x14)
    x16 = urcorner(x14)
    x17 = shoot(x15, NEG_UNITY)
    x18 = shoot(x16, UP_RIGHT)
    x19 = combine(x17, x18)
    x20 = underfill(x12, x1, x19)
    O = x11(x20)
    return O


def solve_b91ae062(I):
    x1 = numcolors(I)
    x2 = decrement(x1)
    O = upscale(I, x2)
    return O


def solve_b94a9452(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = remove(x3, x1)
    x5 = merge(x4)
    x6 = subgrid(x5, I)
    x7 = mostcolor(x6)
    x8 = leastcolor(x6)
    O = switch(x6, x7, x8)
    return O


def solve_b9b7f026(I):
    x1 = fgpartition(I)
    x2 = fork(equality, toindices, backdrop)
    x3 = compose(flip, x2)
    x4 = extract(x1, x3)
    x5 = color(x4)
    O = canvas(x5, UNITY)
    return O


def solve_ba26e723(I):
    x1 = asobject(I)
    x2 = matcher(first, ZERO)
    x3 = compose(flip, x2)
    x4 = sfilter(x1, x3)
    x5 = rbind(multiply, THREE)
    x6 = rbind(divide, THREE)
    x7 = compose(x5, x6)
    x8 = fork(equality, identity, x7)
    x9 = toindices(x4)
    x10 = compose(x8, last)
    x11 = sfilter(x9, x10)
    O = fill(I, SIX, x11)
    return O


def solve_ba97ae07(I):
    x1 = objects(I, T, F, T)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = mostcommon(x3)
    x5 = ofcolor(I, x4)
    x6 = backdrop(x5)
    O = fill(I, x4, x6)
    return O


def solve_bb43febb(I):
    x1 = objects(I, T, F, F)
    x2 = fork(equality, toindices, backdrop)
    x3 = rbind(greater, ONE)
    x4 = chain(x3, minimum, shape)
    x5 = fork(both, x2, x4)
    x6 = sfilter(x1, x5)
    x7 = compose(backdrop, inbox)
    x8 = mapply(x7, x6)
    O = fill(I, TWO, x8)
    return O


def solve_bbc9ae5d(I):
    x1 = index(I, ORIGIN)
    x2 = width(I)
    x3 = halve(x2)
    x4 = astuple(x3, x2)
    x5 = canvas(x1, x4)
    x6 = rbind(shoot, UNITY)
    x7 = compose(x6, last)
    x8 = fork(recolor, first, x7)
    x9 = asobject(I)
    x10 = mapply(x8, x9)
    O = paint(x5, x10)
    return O


def solve_bc1d5164(I):
    x1 = height(I)
    x2 = halve(x1)
    x3 = increment(x2)
    x4 = width(I)
    x5 = halve(x4)
    x6 = frontiers(I)
    x7 = merge(x6)
    x8 = mostcolor(x7)
    x9 = astuple(x3, x5)
    x10 = canvas(x8, x9)
    x11 = asindices(x10)
    x12 = toobject(x11, I)
    x13 = increment(x5)
    x14 = tojvec(x13)
    x15 = shift(x11, x14)
    x16 = toobject(x15, I)
    x17 = decrement(x3)
    x18 = toivec(x17)
    x19 = shift(x11, x18)
    x20 = toobject(x19, I)
    x21 = decrement(x3)
    x22 = increment(x5)
    x23 = astuple(x21, x22)
    x24 = shift(x11, x23)
    x25 = toobject(x24, I)
    x26 = palette(I)
    x27 = other(x26, x8)
    x28 = matcher(first, x27)
    x29 = rbind(sfilter, x28)
    x30 = chain(toindices, x29, normalize)
    x31 = x30(x12)
    x32 = x30(x16)
    x33 = x30(x20)
    x34 = x30(x25)
    x35 = combine(x31, x32)
    x36 = combine(x33, x34)
    x37 = combine(x35, x36)
    O = fill(x10, x27, x37)
    return O


def solve_bd4472b8(I):
    x1 = compose(positive, size)
    x2 = rbind(sfilter, hline)
    x3 = chain(x1, x2, frontiers)
    x4 = chain(size, dedupe, first)
    x5 = chain(size, dedupe, last)
    x6 = fork(greater, x4, x5)
    x7 = fork(both, x3, x6)
    x8 = astuple(identity, rot90)
    x9 = astuple(rot180, rot270)
    x10 = combine(x8, x9)
    x11 = astuple(identity, rot270)
    x12 = astuple(rot180, rot90)
    x13 = combine(x11, x12)
    x14 = pair(x10, x13)
    x15 = rbind(rapply, I)
    x16 = compose(initset, first)
    x17 = chain(first, x15, x16)
    x18 = compose(x7, x17)
    x19 = extract(x14, x18)
    x20 = first(x19)
    x21 = last(x19)
    x22 = x20(I)
    x23 = first(x22)
    x24 = repeat(x23, ONE)
    x25 = dmirror(x24)
    x26 = width(x22)
    x27 = hupscale(x25, x26)
    x28 = asobject(x27)
    x29 = height(x22)
    x30 = height(x28)
    x31 = interval(ZERO, x29, x30)
    x32 = lbind(shift, x28)
    x33 = apply(toivec, x31)
    x34 = mapply(x32, x33)
    x35 = shift(x34, TWO_BY_ZERO)
    x36 = paint(x22, x35)
    O = x21(x36)
    return O


def solve_bda2d7a6(I):
    x1 = objects(I, T, F, F)
    x2 = compose(maximum, shape)
    x3 = order(x1, x2)
    x4 = first(x3)
    x5 = last(x3)
    x6 = color(x4)
    x7 = color(x5)
    x8 = equality(x6, x7)
    x9 = combine(x4, x5)
    x10 = repeat(x9, ONE)
    x11 = remove(x4, x3)
    x12 = remove(x5, x11)
    x13 = combine(x10, x12)
    x14 = branch(x8, x13, x3)
    x15 = apply(color, x14)
    x16 = last(x14)
    x17 = remove(x16, x14)
    x18 = repeat(x16, ONE)
    x19 = combine(x18, x17)
    x20 = mpapply(recolor, x15, x19)
    O = paint(I, x20)
    return O


def solve_bdad9b1f(I):
    x1 = objects(I, T, F, T)
    x2 = sfilter(x1, hline)
    x3 = sfilter(x1, vline)
    x4 = compose(hfrontier, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = compose(vfrontier, center)
    x8 = fork(recolor, color, x7)
    x9 = mapply(x8, x3)
    x10 = combine(x6, x9)
    x11 = paint(I, x10)
    x12 = toindices(x6)
    x13 = toindices(x9)
    x14 = intersection(x12, x13)
    O = fill(x11, FOUR, x14)
    return O


def solve_be94b721(I):
    x1 = objects(I, T, F, F)
    x2 = argmax(x1, size)
    x3 = color(x2)
    x4 = remove(x2, x1)
    x5 = argmax(x4, size)
    x6 = shape(x5)
    x7 = canvas(x3, x6)
    x8 = normalize(x5)
    O = paint(x7, x8)
    return O


def solve_beb8660c(I):
    x1 = astuple(identity, rot90)
    x2 = astuple(rot180, rot270)
    x3 = combine(x1, x2)
    x4 = astuple(identity, rot270)
    x5 = astuple(rot180, rot90)
    x6 = combine(x4, x5)
    x7 = pair(x3, x6)
    x8 = rbind(rapply, I)
    x9 = compose(initset, first)
    x10 = chain(first, x8, x9)
    x11 = rbind(ofcolor, EIGHT)
    x12 = chain(lowermost, x11, x10)
    x13 = matcher(x12, ZERO)
    x14 = extract(x7, x13)
    x15 = first(x14)
    x16 = last(x14)
    x17 = x15(I)
    x18 = rot180(x17)
    x19 = shape(x18)
    x20 = lbind(apply, first)
    x21 = lbind(ofcolor, x18)
    x22 = chain(size, x20, x21)
    x23 = palette(I)
    x24 = argmax(x23, x22)
    x25 = partition(x18)
    x26 = matcher(color, x24)
    x27 = compose(flip, x26)
    x28 = sfilter(x25, x27)
    x29 = compose(invert, size)
    x30 = order(x28, x29)
    x31 = apply(normalize, x30)
    x32 = size(x31)
    x33 = interval(ZERO, x32, ONE)
    x34 = apply(toivec, x33)
    x35 = mpapply(shift, x31, x34)
    x36 = canvas(x24, x19)
    x37 = paint(x36, x35)
    O = x16(x37)
    return O


def solve_c0f76784(I):
    x1 = objects(I, T, F, F)
    x2 = mostcolor(I)
    x3 = colorfilter(x1, x2)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    x6 = sizefilter(x3, FOUR)
    x7 = merge(x6)
    x8 = sizefilter(x3, NINE)
    x9 = merge(x8)
    x10 = fill(I, SIX, x5)
    x11 = fill(x10, SEVEN, x7)
    O = fill(x11, EIGHT, x9)
    return O


def solve_c1d99e64(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    O = fill(I, TWO, x2)
    return O


def solve_c3e719e8(I):
    x1 = shape(I)
    x2 = multiply(x1, x1)
    x3 = canvas(ZERO, x2)
    x4 = mostcolor(I)
    x5 = ofcolor(I, x4)
    x6 = lbind(multiply, x1)
    x7 = apply(x6, x5)
    x8 = asobject(I)
    x9 = lbind(shift, x8)
    x10 = mapply(x9, x7)
    O = paint(x3, x10)
    return O


def solve_c3f564a4(I):
    x1 = height(I)
    x2 = vsplit(I, x1)
    x3 = apply(asobject, x2)
    x4 = apply(hperiod, x3)
    x5 = minimum(x4)
    x6 = width(I)
    x7 = hsplit(I, x6)
    x8 = apply(asobject, x7)
    x9 = apply(vperiod, x8)
    x10 = minimum(x9)
    x11 = matcher(hperiod, x5)
    x12 = sfilter(x3, x11)
    x13 = mapply(palette, x12)
    x14 = matcher(vperiod, x10)
    x15 = sfilter(x8, x14)
    x16 = mapply(palette, x15)
    x17 = palette(I)
    x18 = combine(x13, x16)
    x19 = rbind(contained, x18)
    x20 = argmin(x17, x19)
    x21 = asobject(I)
    x22 = matcher(first, x20)
    x23 = compose(flip, x22)
    x24 = sfilter(x21, x23)
    x25 = height(I)
    x26 = divide(x25, x10)
    x27 = increment(x26)
    x28 = width(I)
    x29 = divide(x28, x5)
    x30 = increment(x29)
    x31 = invert(x27)
    x32 = interval(x31, x27, ONE)
    x33 = invert(x30)
    x34 = interval(x33, x30, ONE)
    x35 = product(x32, x34)
    x36 = astuple(x10, x5)
    x37 = lbind(multiply, x36)
    x38 = apply(x37, x35)
    x39 = lbind(shift, x24)
    x40 = mapply(x39, x38)
    O = paint(I, x40)
    return O


def solve_c444b776(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = leastcolor(x2)
    x4 = shape(I)
    x5 = canvas(x3, x4)
    x6 = hconcat(I, x5)
    x7 = objects(x6, F, F, T)
    x8 = argmax(x7, numcolors)
    x9 = apply(ulcorner, x7)
    x10 = normalize(x8)
    x11 = lbind(shift, x10)
    x12 = mapply(x11, x9)
    O = paint(I, x12)
    return O


def solve_c59eb873(I):
    O = upscale(I, TWO)
    return O


def solve_c8cbb738(I):
    x1 = fgpartition(I)
    x2 = valmax(x1, height)
    x3 = valmax(x1, width)
    x4 = astuple(x2, x3)
    x5 = mostcolor(I)
    x6 = canvas(x5, x4)
    x7 = asindices(x6)
    x8 = apply(normalize, x1)
    x9 = box(x7)
    x10 = maximum(x4)
    x11 = double(x10)
    x12 = asindices(x6)
    x13 = center(x12)
    x14 = initset(x13)
    x15 = lbind(manhattan, x14)
    x16 = lbind(multiply, x11)
    x17 = lbind(intersection, x9)
    x18 = chain(x16, size, x17)
    x19 = lbind(fork, subtract)
    x20 = lbind(chain, x18)
    x21 = lbind(x20, toindices)
    x22 = lbind(lbind, shift)
    x23 = compose(x21, x22)
    x24 = lbind(chain, x15)
    x25 = compose(initset, center)
    x26 = lbind(x24, x25)
    x27 = lbind(lbind, shift)
    x28 = compose(x26, x27)
    x29 = lbind(argmax, x7)
    x30 = fork(x19, x23, x28)
    x31 = compose(x29, x30)
    x32 = fork(shift, identity, x31)
    x33 = mapply(x32, x8)
    O = paint(x6, x33)
    return O


def solve_c8f0f002(I):
    O = replace(I, SEVEN, FIVE)
    return O


def solve_c909285e(I):
    x1 = partition(I)
    x2 = lbind(contained, ONE)
    x3 = chain(flip, x2, shape)
    x4 = sfilter(x1, x3)
    x5 = fork(equality, toindices, box)
    x6 = sfilter(x4, x5)
    x7 = fork(multiply, height, width)
    x8 = argmin(x6, x7)
    O = subgrid(x8, I)
    return O


def solve_c9e6f938(I):
    x1 = vmirror(I)
    O = hconcat(I, x1)
    return O


def solve_c9f8e694(I):
    x1 = astuple(identity, dmirror)
    x2 = astuple(cmirror, vmirror)
    x3 = combine(x1, x2)
    x4 = compose(first, dmirror)
    x5 = chain(size, dedupe, x4)
    x6 = rbind(rapply, I)
    x7 = compose(first, x6)
    x8 = chain(x5, x7, initset)
    x9 = argmax(x3, x8)
    x10 = x9(I)
    x11 = height(x10)
    x12 = width(x10)
    x13 = ofcolor(x10, ZERO)
    x14 = astuple(x11, ONE)
    x15 = crop(x10, ORIGIN, x14)
    x16 = hupscale(x15, x12)
    x17 = fill(x16, ZERO, x13)
    O = x9(x17)
    return O


def solve_caa06a1f(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = asobject(I)
    x6 = matcher(first, x4)
    x7 = compose(flip, x6)
    x8 = sfilter(x5, x7)
    x9 = hperiod(x8)
    x10 = vperiod(x8)
    x11 = width(I)
    x12 = width(x8)
    x13 = subtract(x11, x12)
    x14 = add(x13, TWO)
    x15 = height(I)
    x16 = height(x8)
    x17 = subtract(x15, x16)
    x18 = add(x17, TWO)
    x19 = rbind(multiply, x9)
    x20 = invert(x14)
    x21 = interval(x20, x14, ONE)
    x22 = apply(x19, x21)
    x23 = rbind(multiply, x10)
    x24 = invert(x18)
    x25 = interval(x24, x18, ONE)
    x26 = apply(x23, x25)
    x27 = product(x26, x22)
    x28 = lbind(shift, x8)
    x29 = mapply(x28, x27)
    x30 = index(I, ORIGIN)
    x31 = equality(x30, x4)
    x32 = flip(x31)
    x33 = asindices(I)
    x34 = urcorner(x33)
    x35 = index(I, x34)
    x36 = equality(x35, x4)
    x37 = flip(x36)
    x38 = asindices(I)
    x39 = lrcorner(x38)
    x40 = index(I, x39)
    x41 = equality(x40, x4)
    x42 = flip(x41)
    x43 = asindices(I)
    x44 = llcorner(x43)
    x45 = index(I, x44)
    x46 = equality(x45, x4)
    x47 = flip(x46)
    x48 = multiply(x32, LEFT)
    x49 = multiply(x37, UP)
    x50 = add(x48, x49)
    x51 = multiply(x42, RIGHT)
    x52 = multiply(x47, DOWN)
    x53 = add(x51, x52)
    x54 = add(x50, x53)
    x55 = shift(x29, x54)
    O = paint(I, x55)
    return O


def solve_cbded52d(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = palette(I)
    x5 = remove(x3, x4)
    x6 = lbind(colorcount, I)
    x7 = argmax(x5, x6)
    x8 = remove(x7, x5)
    x9 = height(I)
    x10 = increment(x9)
    x11 = frontiers(I)
    x12 = sfilter(x11, hline)
    x13 = size(x12)
    x14 = increment(x13)
    x15 = divide(x10, x14)
    x16 = width(I)
    x17 = increment(x16)
    x18 = frontiers(I)
    x19 = sfilter(x18, vline)
    x20 = size(x19)
    x21 = increment(x20)
    x22 = divide(x17, x21)
    x23 = rbind(multiply, x15)
    x24 = rbind(divide, x15)
    x25 = compose(x23, x24)
    x26 = fork(equality, identity, x25)
    x27 = rbind(multiply, x22)
    x28 = rbind(divide, x22)
    x29 = compose(x27, x28)
    x30 = fork(equality, identity, x29)
    x31 = lbind(fork, both)
    x32 = rbind(compose, first)
    x33 = lbind(compose, x26)
    x34 = lbind(rbind, subtract)
    x35 = compose(x34, uppermost)
    x36 = chain(x32, x33, x35)
    x37 = rbind(compose, last)
    x38 = lbind(compose, x30)
    x39 = lbind(rbind, subtract)
    x40 = compose(x39, leftmost)
    x41 = chain(x37, x38, x40)
    x42 = fork(x31, x36, x41)
    x43 = fork(sfilter, identity, x42)
    x44 = fork(connect, first, last)
    x45 = lbind(apply, x44)
    x46 = lbind(ofcolor, I)
    x47 = fork(product, x46, x46)
    x48 = fork(either, vline, hline)
    x49 = rbind(sfilter, x48)
    x50 = chain(x49, x45, x47)
    x51 = lbind(mapply, x43)
    x52 = compose(x51, x50)
    x53 = fork(recolor, identity, x52)
    x54 = mapply(x53, x8)
    O = paint(I, x54)
    return O


def solve_cce03e0d(I):
    x1 = ofcolor(I, TWO)
    x2 = shape(I)
    x3 = multiply(x2, x2)
    x4 = canvas(ZERO, x3)
    x5 = rbind(multiply, x2)
    x6 = apply(x5, x1)
    x7 = asobject(I)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    O = paint(x4, x9)
    return O


def solve_cdecee7f(I):
    x1 = asobject(I)
    x2 = mostcolor(I)
    x3 = matcher(first, x2)
    x4 = compose(flip, x3)
    x5 = sfilter(x1, x4)
    x6 = apply(initset, x5)
    x7 = astuple(ONE, THREE)
    x8 = size(x6)
    x9 = order(x6, leftmost)
    x10 = apply(color, x9)
    x11 = rbind(canvas, UNITY)
    x12 = apply(x11, x10)
    x13 = merge(x12)
    x14 = dmirror(x13)
    x15 = subtract(NINE, x8)
    x16 = astuple(ONE, x15)
    x17 = mostcolor(I)
    x18 = canvas(x17, x16)
    x19 = hconcat(x14, x18)
    x20 = hsplit(x19, THREE)
    x21 = merge(x20)
    x22 = crop(x21, ORIGIN, x7)
    x23 = crop(x21, DOWN, x7)
    x24 = crop(x21, TWO_BY_ZERO, x7)
    x25 = vmirror(x23)
    x26 = vconcat(x22, x25)
    O = vconcat(x26, x24)
    return O


def solve_ce22a75a(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = apply(initset, x2)
    x4 = apply(outbox, x3)
    x5 = mapply(backdrop, x4)
    O = fill(I, ONE, x5)
    return O


def solve_ce4f8723(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = size(x2)
    x4 = positive(x3)
    x5 = branch(x4, tophalf, lefthalf)
    x6 = branch(x4, bottomhalf, righthalf)
    x7 = x5(I)
    x8 = x6(I)
    x9 = palette(x7)
    x10 = palette(x8)
    x11 = intersection(x9, x10)
    x12 = first(x11)
    x13 = shape(x7)
    x14 = canvas(x12, x13)
    x15 = palette(x7)
    x16 = other(x15, x12)
    x17 = palette(x8)
    x18 = other(x17, x12)
    x19 = ofcolor(x7, x16)
    x20 = ofcolor(x8, x18)
    x21 = combine(x19, x20)
    O = fill(x14, THREE, x21)
    return O


def solve_ce602527(I):
    x1 = fgpartition(I)
    x2 = rbind(bordering, I)
    x3 = extract(x1, x2)
    x4 = remove(x3, x1)
    x5 = totuple(x4)
    x6 = first(x5)
    x7 = last(x5)
    x8 = color(x6)
    x9 = mostcolor(I)
    x10 = shape(x6)
    x11 = canvas(x9, x10)
    x12 = normalize(x6)
    x13 = paint(x11, x12)
    x14 = upscale(x13, TWO)
    x15 = shape(x7)
    x16 = canvas(x9, x15)
    x17 = normalize(x7)
    x18 = paint(x16, x17)
    x19 = upscale(x18, TWO)
    x20 = shape(x3)
    x21 = canvas(x9, x20)
    x22 = normalize(x3)
    x23 = paint(x21, x22)
    x24 = color(x3)
    x25 = replace(x23, x24, x8)
    x26 = asobject(x25)
    x27 = occurrences(x14, x26)
    x28 = size(x27)
    x29 = positive(x28)
    x30 = downscale(x14, TWO)
    x31 = downscale(x19, TWO)
    O = branch(x29, x30, x31)
    return O


def solve_ce9e57f2(I):
    x1 = objects(I, T, F, T)
    x2 = asindices(I)
    x3 = outbox(x2)
    x4 = lbind(adjacent, x3)
    x5 = compose(x4, initset)
    x6 = rbind(extract, x5)
    x7 = compose(x6, toindices)
    x8 = rbind(compose, initset)
    x9 = lbind(rbind, manhattan)
    x10 = chain(x8, x9, initset)
    x11 = lbind(lbind, greater)
    x12 = chain(x11, halve, size)
    x13 = compose(x10, x7)
    x14 = fork(compose, x12, x13)
    x15 = fork(sfilter, toindices, x14)
    x16 = mapply(x15, x1)
    O = fill(I, EIGHT, x16)
    return O


def solve_cf98881b(I):
    x1 = width(I)
    x2 = increment(x1)
    x3 = divide(x2, THREE)
    x4 = decrement(x3)
    x5 = height(I)
    x6 = astuple(x5, x4)
    x7 = crop(I, ORIGIN, x6)
    x8 = add(x4, ONE)
    x9 = tojvec(x8)
    x10 = crop(I, x9, x6)
    x11 = double(x4)
    x12 = add(x11, TWO)
    x13 = tojvec(x12)
    x14 = crop(I, x13, x6)
    x15 = palette(x7)
    x16 = palette(x10)
    x17 = palette(x14)
    x18 = intersection(x15, x16)
    x19 = intersection(x18, x17)
    x20 = first(x19)
    x21 = other(x15, x20)
    x22 = other(x16, x20)
    x23 = other(x17, x20)
    x24 = canvas(x20, x6)
    x25 = ofcolor(x7, x21)
    x26 = ofcolor(x10, x22)
    x27 = ofcolor(x14, x23)
    x28 = fill(x24, x23, x27)
    x29 = fill(x28, x22, x26)
    O = fill(x29, x21, x25)
    return O


def solve_d037b0a7(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = rbind(shoot, DOWN)
    x4 = compose(x3, last)
    x5 = fork(recolor, first, x4)
    x6 = mapply(x5, x2)
    O = paint(I, x6)
    return O


def solve_d06dbe63(I):
    x1 = double(TEN)
    x2 = interval(ZERO, x1, ONE)
    x3 = connect(ORIGIN, DOWN)
    x4 = connect(ORIGIN, ZERO_BY_TWO)
    x5 = combine(x3, x4)
    x6 = astuple(NEG_TWO, TWO)
    x7 = lbind(multiply, x6)
    x8 = toivec(NEG_TWO)
    x9 = apply(x7, x2)
    x10 = rbind(subtract, TWO_BY_ZERO)
    x11 = fork(ofcolor, identity, leastcolor)
    x12 = chain(x10, center, x11)
    x13 = rbind(mapply, x9)
    x14 = lbind(lbind, shift)
    x15 = lbind(shift, x5)
    x16 = compose(x15, x12)
    x17 = chain(x13, x14, x16)
    x18 = lbind(recolor, FIVE)
    x19 = compose(x18, x17)
    x20 = fork(paint, identity, x19)
    x21 = compose(rot180, x20)
    x22 = fork(ofcolor, x21, leastcolor)
    x23 = compose(center, x22)
    x24 = fork(subtract, x23, x12)
    x25 = fork(shift, x17, x24)
    x26 = lbind(recolor, FIVE)
    x27 = rbind(shift, x8)
    x28 = chain(x26, x27, x25)
    x29 = fork(paint, x21, x28)
    x30 = compose(rot180, x29)
    x31 = rbind(ofcolor, FIVE)
    x32 = compose(x31, x30)
    x33 = leastcolor(I)
    x34 = ofcolor(I, x33)
    x35 = mostcolor(I)
    x36 = shape(I)
    x37 = canvas(x35, x36)
    x38 = lbind(paint, x37)
    x39 = lbind(recolor, x33)
    x40 = chain(x38, x39, initset)
    x41 = compose(x32, x40)
    x42 = mapply(x41, x34)
    x43 = fill(I, FIVE, x42)
    O = fill(x43, x33, x34)
    return O


def solve_d07ae81c(I):
    x1 = lbind(ofcolor, I)
    x2 = lbind(mapply, neighbors)
    x3 = compose(x2, x1)
    x4 = fork(intersection, x1, x3)
    x5 = compose(size, x4)
    x6 = palette(I)
    x7 = matcher(x5, ZERO)
    x8 = sfilter(x6, x7)
    x9 = totuple(x8)
    x10 = first(x9)
    x11 = last(x9)
    x12 = ofcolor(I, x10)
    x13 = mapply(neighbors, x12)
    x14 = toobject(x13, I)
    x15 = mostcolor(x14)
    x16 = ofcolor(I, x11)
    x17 = mapply(neighbors, x16)
    x18 = toobject(x17, I)
    x19 = mostcolor(x18)
    x20 = rbind(shoot, UNITY)
    x21 = rbind(shoot, NEG_UNITY)
    x22 = fork(combine, x20, x21)
    x23 = rbind(shoot, UP_RIGHT)
    x24 = rbind(shoot, DOWN_LEFT)
    x25 = fork(combine, x23, x24)
    x26 = fork(combine, x22, x25)
    x27 = ofcolor(I, x11)
    x28 = ofcolor(I, x10)
    x29 = combine(x27, x28)
    x30 = mapply(x26, x29)
    x31 = ofcolor(I, x15)
    x32 = intersection(x31, x30)
    x33 = ofcolor(I, x19)
    x34 = intersection(x33, x30)
    x35 = fill(I, x10, x32)
    O = fill(x35, x11, x34)
    return O


def solve_d0f5fe59(I):
    x1 = objects(I, T, F, T)
    x2 = size(x1)
    x3 = astuple(x2, x2)
    x4 = mostcolor(I)
    x5 = canvas(x4, x3)
    x6 = shoot(ORIGIN, UNITY)
    x7 = leastcolor(I)
    O = fill(x5, x7, x6)
    return O


def solve_d10ecb37(I):
    O = crop(I, ORIGIN, TWO_BY_TWO)
    return O


def solve_d13f3404(I):
    x1 = asobject(I)
    x2 = mostcolor(I)
    x3 = matcher(first, x2)
    x4 = compose(flip, x3)
    x5 = sfilter(x1, x4)
    x6 = apply(initset, x5)
    x7 = rbind(shoot, UNITY)
    x8 = compose(x7, center)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x6)
    x11 = shape(I)
    x12 = double(x11)
    x13 = mostcolor(I)
    x14 = canvas(x13, x12)
    O = paint(x14, x10)
    return O


def solve_d22278a0(I):
    x1 = objects(I, T, F, T)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = repeat(NEG_ONE, ONE)
    x5 = combine(x3, x4)
    x6 = multiply(TEN, TEN)
    x7 = apply(center, x2)
    x8 = astuple(x6, x6)
    x9 = repeat(x8, ONE)
    x10 = combine(x7, x9)
    x11 = identity(I)
    x12 = asindices(I)
    x13 = shape(I)
    x14 = maximum(x13)
    x15 = halve(x14)
    x16 = add(TWO, x15)
    x17 = interval(ONE, x16, ONE)
    x18 = compose(outbox, outbox)
    x19 = lbind(power, x18)
    x20 = apply(x19, x17)
    x21 = lbind(rapply, x20)
    x22 = chain(merge, x21, initset)
    x23 = fork(combine, initset, x22)
    x24 = lbind(rbind, manhattan)
    x25 = rbind(chain, initset)
    x26 = rbind(x25, x24)
    x27 = lbind(rbind, apply)
    x28 = lbind(apply, initset)
    x29 = rbind(remove, x10)
    x30 = chain(x26, x27, x28)
    x31 = chain(x30, x29, last)
    x32 = lbind(sfilter, x12)
    x33 = rbind(compose, initset)
    x34 = lbind(compose, minimum)
    x35 = lbind(fork, greater)
    x36 = compose(x34, x31)
    x37 = compose(initset, last)
    x38 = chain(x33, x24, x37)
    x39 = fork(x35, x36, x38)
    x40 = compose(x32, x39)
    x41 = compose(x23, last)
    x42 = fork(intersection, x40, x41)
    x43 = fork(recolor, first, x42)
    x44 = pair(x5, x10)
    x45 = mapply(x43, x44)
    O = paint(x11, x45)
    return O


def solve_d23f8c26(I):
    x1 = mostcolor(I)
    x2 = matcher(first, x1)
    x3 = compose(flip, x2)
    x4 = width(I)
    x5 = halve(x4)
    x6 = compose(last, last)
    x7 = matcher(x6, x5)
    x8 = compose(flip, x7)
    x9 = asobject(I)
    x10 = fork(both, x3, x8)
    x11 = sfilter(x9, x10)
    O = fill(I, x1, x11)
    return O


def solve_d2abd087(I):
    x1 = objects(I, T, F, T)
    x2 = matcher(size, SIX)
    x3 = compose(flip, x2)
    x4 = mfilter(x1, x2)
    x5 = mfilter(x1, x3)
    x6 = fill(I, TWO, x4)
    O = fill(x6, ONE, x5)
    return O


def solve_d364b489(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = toindices(x2)
    x4 = shift(x3, DOWN)
    x5 = fill(I, EIGHT, x4)
    x6 = shift(x3, UP)
    x7 = fill(x5, TWO, x6)
    x8 = shift(x3, RIGHT)
    x9 = fill(x7, SIX, x8)
    x10 = shift(x3, LEFT)
    O = fill(x9, SEVEN, x10)
    return O


def solve_d406998b(I):
    x1 = vmirror(I)
    x2 = fgpartition(x1)
    x3 = merge(x2)
    x4 = toindices(x3)
    x5 = compose(double, halve)
    x6 = fork(equality, identity, x5)
    x7 = compose(x6, last)
    x8 = sfilter(x4, x7)
    x9 = fill(x1, THREE, x8)
    O = vmirror(x9)
    return O


def solve_d43fd935(I):
    x1 = mostcolor(I)
    x2 = asobject(I)
    x3 = matcher(first, x1)
    x4 = compose(flip, x3)
    x5 = sfilter(x2, x4)
    x6 = partition(I)
    x7 = fork(multiply, height, width)
    x8 = fork(equality, size, x7)
    x9 = sfilter(x6, x8)
    x10 = argmax(x9, size)
    x11 = difference(x5, x10)
    x12 = apply(initset, x11)
    x13 = rbind(hmatching, x10)
    x14 = rbind(vmatching, x10)
    x15 = fork(either, x13, x14)
    x16 = sfilter(x12, x15)
    x17 = rbind(gravitate, x10)
    x18 = fork(add, center, x17)
    x19 = fork(connect, center, x18)
    x20 = fork(recolor, color, x19)
    x21 = mapply(x20, x16)
    O = paint(I, x21)
    return O


def solve_d4469b4b(I):
    x1 = palette(I)
    x2 = contained(ONE, x1)
    x3 = contained(TWO, x1)
    x4 = branch(x2, UNITY, TWO_BY_TWO)
    x5 = branch(x3, RIGHT, x4)
    x6 = fork(combine, vfrontier, hfrontier)
    x7 = x6(x5)
    x8 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x8, FIVE, x7)
    return O


def solve_d4a91cb9(I):
    x1 = ofcolor(I, EIGHT)
    x2 = ofcolor(I, TWO)
    x3 = first(x1)
    x4 = first(x2)
    x5 = last(x3)
    x6 = first(x4)
    x7 = astuple(x6, x5)
    x8 = connect(x7, x3)
    x9 = connect(x7, x4)
    x10 = combine(x8, x9)
    O = underfill(I, FOUR, x10)
    return O


def solve_d4f3cd78(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = toindices(x2)
    x4 = box(x3)
    x5 = difference(x4, x3)
    x6 = inbox(x3)
    x7 = backdrop(x6)
    x8 = lbind(position, x7)
    x9 = compose(x8, initset)
    x10 = lowermost(x7)
    x11 = rightmost(x7)
    x12 = uppermost(x7)
    x13 = leftmost(x7)
    x14 = rbind(greater, x10)
    x15 = compose(x14, first)
    x16 = lbind(greater, x12)
    x17 = compose(x16, first)
    x18 = rbind(greater, x11)
    x19 = compose(x18, last)
    x20 = lbind(greater, x13)
    x21 = compose(x20, last)
    x22 = compose(invert, x17)
    x23 = fork(add, x15, x22)
    x24 = compose(invert, x21)
    x25 = fork(add, x19, x24)
    x26 = fork(astuple, x23, x25)
    x27 = fork(shoot, identity, x26)
    x28 = mapply(x27, x5)
    x29 = combine(x28, x7)
    O = fill(I, EIGHT, x29)
    return O


def solve_d511f180(I):
    O = switch(I, FIVE, EIGHT)
    return O


def solve_d5d6de2d(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = cover(I, x2)
    x4 = mapply(delta, x1)
    O = fill(x3, THREE, x4)
    return O


def solve_d631b094(I):
    x1 = palette(I)
    x2 = other(x1, ZERO)
    x3 = colorcount(I, x2)
    x4 = astuple(ONE, x3)
    O = canvas(x2, x4)
    return O


def solve_d687bc17(I):
    x1 = trim(I)
    x2 = asobject(x1)
    x3 = shift(x2, UNITY)
    x4 = apply(initset, x3)
    x5 = toindices(x3)
    x6 = asindices(I)
    x7 = corners(x6)
    x8 = combine(x5, x7)
    x9 = fill(I, NEG_ONE, x8)
    x10 = fgpartition(x9)
    x11 = asindices(I)
    x12 = corners(x11)
    x13 = toobject(x12, I)
    x14 = combine(x3, x13)
    x15 = mostcolor(x14)
    x16 = fill(x9, x15, x8)
    x17 = apply(color, x10)
    x18 = rbind(contained, x17)
    x19 = compose(x18, color)
    x20 = sfilter(x4, x19)
    x21 = lbind(colorfilter, x10)
    x22 = chain(first, x21, color)
    x23 = fork(gravitate, identity, x22)
    x24 = fork(shift, identity, x23)
    x25 = mapply(x24, x20)
    O = paint(x16, x25)
    return O


def solve_d6ad076f(I):
    x1 = partition(I)
    x2 = product(x1, x1)
    x3 = fork(equality, first, last)
    x4 = compose(flip, x3)
    x5 = sfilter(x2, x4)
    x6 = fork(adjacent, first, last)
    x7 = compose(flip, x6)
    x8 = extract(x5, x7)
    x9 = totuple(x8)
    x10 = first(x9)
    x11 = last(x9)
    x12 = combine(x10, x11)
    x13 = leftmost(x12)
    x14 = increment(x13)
    x15 = rightmost(x12)
    x16 = decrement(x15)
    x17 = apply(uppermost, x9)
    x18 = maximum(x17)
    x19 = increment(x18)
    x20 = apply(lowermost, x9)
    x21 = minimum(x20)
    x22 = decrement(x21)
    x23 = apply(leftmost, x9)
    x24 = maximum(x23)
    x25 = increment(x24)
    x26 = apply(rightmost, x9)
    x27 = minimum(x26)
    x28 = decrement(x27)
    x29 = uppermost(x12)
    x30 = increment(x29)
    x31 = lowermost(x12)
    x32 = decrement(x31)
    x33 = hmatching(x10, x11)
    x34 = branch(x33, x14, x25)
    x35 = branch(x33, x16, x28)
    x36 = branch(x33, x22, x32)
    x37 = branch(x33, x19, x30)
    x38 = astuple(x36, x35)
    x39 = astuple(x37, x34)
    x40 = initset(x39)
    x41 = insert(x38, x40)
    x42 = backdrop(x41)
    x43 = merge(x8)
    x44 = toindices(x43)
    x45 = rbind(contained, x44)
    x46 = compose(flip, x45)
    x47 = sfilter(x42, x46)
    O = fill(I, EIGHT, x47)
    return O


def solve_d89b689b(I):
    x1 = objects(I, T, F, F)
    x2 = sfilter(x1, square)
    x3 = argmax(x2, size)
    x4 = toindices(x3)
    x5 = sizefilter(x2, ONE)
    x6 = apply(initset, x4)
    x7 = lbind(argmin, x6)
    x8 = lbind(rbind, manhattan)
    x9 = compose(x7, x8)
    x10 = fork(recolor, color, x9)
    x11 = mapply(x10, x5)
    x12 = merge(x5)
    x13 = cover(I, x12)
    O = paint(x13, x11)
    return O


def solve_d8c310e9(I):
    x1 = astuple(identity, rot90)
    x2 = astuple(rot180, rot270)
    x3 = combine(x1, x2)
    x4 = astuple(identity, rot270)
    x5 = astuple(rot180, rot90)
    x6 = combine(x4, x5)
    x7 = pair(x3, x6)
    x8 = chain(size, dedupe, first)
    x9 = matcher(x8, ONE)
    x10 = compose(first, cmirror)
    x11 = chain(size, dedupe, x10)
    x12 = matcher(x11, ONE)
    x13 = fork(both, x9, x12)
    x14 = rbind(rapply, I)
    x15 = compose(initset, first)
    x16 = chain(first, x14, x15)
    x17 = compose(x13, x16)
    x18 = extract(x7, x17)
    x19 = first(x18)
    x20 = last(x18)
    x21 = x19(I)
    x22 = width(x21)
    x23 = decrement(x22)
    x24 = tojvec(x23)
    x25 = index(x21, x24)
    x26 = asobject(x21)
    x27 = matcher(first, x25)
    x28 = compose(flip, x27)
    x29 = sfilter(x26, x28)
    x30 = hperiod(x29)
    x31 = width(x21)
    x32 = increment(x31)
    x33 = interval(ZERO, x32, x30)
    x34 = apply(tojvec, x33)
    x35 = lbind(shift, x29)
    x36 = mapply(x35, x34)
    x37 = paint(x21, x36)
    O = x20(x37)
    return O


def solve_d90796e8(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, THREE)
    x3 = compose(positive, size)
    x4 = lbind(intersection, x2)
    x5 = chain(x3, x4, dneighbors)
    x6 = compose(positive, size)
    x7 = lbind(intersection, x1)
    x8 = chain(x6, x7, dneighbors)
    x9 = sfilter(x1, x5)
    x10 = sfilter(x2, x8)
    x11 = cover(I, x9)
    O = fill(x11, EIGHT, x10)
    return O


def solve_d9f24cd1(I):
    x1 = astuple(identity, identity)
    x2 = astuple(rot90, rot270)
    x3 = astuple(x1, x2)
    x4 = astuple(rot180, rot180)
    x5 = astuple(rot270, rot90)
    x6 = astuple(x4, x5)
    x7 = combine(x3, x6)
    x8 = rbind(greater, ONE)
    x9 = chain(size, dedupe, last)
    x10 = compose(x8, x9)
    x11 = rbind(rapply, I)
    x12 = compose(initset, first)
    x13 = chain(first, x11, x12)
    x14 = compose(x10, x13)
    x15 = extract(x7, x14)
    x16 = first(x15)
    x17 = last(x15)
    x18 = x16(I)
    x19 = mostcolor(I)
    x20 = trim(I)
    x21 = palette(x20)
    x22 = other(x21, x19)
    x23 = asindices(I)
    x24 = box(x23)
    x25 = toobject(x24, I)
    x26 = palette(x25)
    x27 = other(x26, x19)
    x28 = ofcolor(x18, x27)
    x29 = ofcolor(x18, x22)
    x30 = prapply(connect, x28, x29)
    x31 = mfilter(x30, vline)
    x32 = underfill(x18, x27, x31)
    x33 = matcher(numcolors, TWO)
    x34 = objects(x32, F, F, T)
    x35 = sfilter(x34, x33)
    x36 = difference(x34, x35)
    x37 = colorfilter(x36, x27)
    x38 = mapply(toindices, x37)
    x39 = apply(urcorner, x35)
    x40 = shift(x39, UNITY)
    x41 = rbind(shoot, UP)
    x42 = mapply(x41, x40)
    x43 = fill(x32, x27, x42)
    x44 = mapply(vfrontier, x38)
    x45 = fill(x43, x27, x44)
    O = x17(x45)
    return O


def solve_d9fac9be(I):
    x1 = mostcolor(I)
    x2 = palette(I)
    x3 = remove(x1, x2)
    x4 = totuple(x3)
    x5 = first(x4)
    x6 = last(x4)
    x7 = neighbors(UNITY)
    x8 = initset(UNITY)
    x9 = recolor(x5, x7)
    x10 = recolor(x6, x8)
    x11 = combine(x9, x10)
    x12 = occurrences(I, x11)
    x13 = size(x12)
    x14 = positive(x13)
    x15 = branch(x14, x6, x5)
    O = canvas(x15, UNITY)
    return O


def solve_dae9d2b5(I):
    x1 = hsplit(I, TWO)
    x2 = apply(numcolors, x1)
    x3 = equality(x2, TWO_BY_TWO)
    x4 = branch(x3, hsplit, vsplit)
    x5 = x4(I, TWO)
    x6 = first(x5)
    x7 = last(x5)
    x8 = palette(x6)
    x9 = palette(x7)
    x10 = intersection(x8, x9)
    x11 = first(x10)
    x12 = palette(x6)
    x13 = other(x12, x11)
    x14 = palette(x7)
    x15 = other(x14, x11)
    x16 = shape(x6)
    x17 = canvas(x11, x16)
    x18 = ofcolor(x6, x13)
    x19 = ofcolor(x7, x15)
    x20 = combine(x18, x19)
    O = fill(x17, SIX, x20)
    return O


def solve_db3e9e38(I):
    x1 = astuple(identity, dmirror)
    x2 = astuple(cmirror, hmirror)
    x3 = combine(x1, x2)
    x4 = chain(uppermost, merge, fgpartition)
    x5 = rbind(rapply, I)
    x6 = chain(first, x5, initset)
    x7 = compose(x4, x6)
    x8 = matcher(x7, ZERO)
    x9 = extract(x3, x8)
    x10 = x9(I)
    x11 = fgpartition(x10)
    x12 = merge(x11)
    x13 = width(x12)
    x14 = astuple(NEG_ONE, x13)
    x15 = invert(x13)
    x16 = astuple(NEG_ONE, x15)
    x17 = double(x13)
    x18 = astuple(NEG_TWO, x17)
    x19 = double(x13)
    x20 = invert(x19)
    x21 = astuple(NEG_TWO, x20)
    x22 = multiply(THREE, TEN)
    x23 = interval(ZERO, x22, ONE)
    x24 = lbind(multiply, x14)
    x25 = apply(x24, x23)
    x26 = lbind(multiply, x16)
    x27 = apply(x26, x23)
    x28 = lbind(multiply, x18)
    x29 = apply(x28, x23)
    x30 = lbind(multiply, x21)
    x31 = apply(x30, x23)
    x32 = lbind(shift, x12)
    x33 = mapply(x32, x25)
    x34 = lbind(shift, x12)
    x35 = mapply(x34, x27)
    x36 = lbind(shift, x12)
    x37 = mapply(x36, x29)
    x38 = lbind(shift, x12)
    x39 = mapply(x38, x31)
    x40 = combine(x33, x35)
    x41 = fill(x10, EIGHT, x40)
    x42 = combine(x37, x39)
    x43 = paint(x41, x42)
    O = x9(x43)
    return O


def solve_db93a21d(I):
    x1 = objects(I, T, T, T)
    x2 = merge(x1)
    x3 = toindices(x2)
    x4 = rbind(shoot, DOWN)
    x5 = mapply(x4, x3)
    x6 = underfill(I, ONE, x5)
    x7 = lbind(power, outbox)
    x8 = chain(x7, halve, width)
    x9 = initset(x8)
    x10 = lbind(rapply, x9)
    x11 = fork(rapply, x10, identity)
    x12 = compose(first, x11)
    x13 = compose(backdrop, x12)
    x14 = fork(difference, x13, toindices)
    x15 = mapply(x14, x1)
    x16 = mostcolor(I)
    x17 = ofcolor(I, x16)
    x18 = intersection(x15, x17)
    O = fill(x6, THREE, x18)
    return O


def solve_dbc1a6ce(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = lbind(recolor, EIGHT)
    x4 = rbind(ofcolor, x1)
    x5 = chain(x3, backdrop, x4)
    x6 = fork(paint, identity, x5)
    x7 = height(I)
    x8 = vsplit(I, x7)
    x9 = mapply(x6, x8)
    x10 = ofcolor(x9, EIGHT)
    x11 = dmirror(I)
    x12 = width(I)
    x13 = vsplit(x11, x12)
    x14 = mapply(x6, x13)
    x15 = dmirror(x14)
    x16 = ofcolor(x15, EIGHT)
    x17 = combine(x10, x16)
    x18 = difference(x17, x2)
    O = fill(I, EIGHT, x18)
    return O


def solve_dc0a314f(I):
    x1 = replace(I, THREE, NEG_ONE)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = cmirror(x5)
    x7 = papply(pair, x5, x6)
    x8 = apply(x4, x7)
    x9 = hmirror(x8)
    x10 = papply(pair, x8, x9)
    x11 = apply(x4, x10)
    x12 = vmirror(x11)
    x13 = papply(pair, x12, x11)
    x14 = apply(x4, x13)
    x15 = ofcolor(I, THREE)
    O = subgrid(x15, x14)
    return O


def solve_dc1df850(I):
    x1 = ofcolor(I, TWO)
    x2 = mapply(neighbors, x1)
    O = underfill(I, ONE, x2)
    return O


def solve_dc433765(I):
    x1 = mostcolor(I)
    x2 = palette(I)
    x3 = remove(x1, x2)
    x4 = other(x3, FOUR)
    x5 = ofcolor(I, x4)
    x6 = ofcolor(I, FOUR)
    x7 = center(x5)
    x8 = center(x6)
    x9 = subtract(x8, x7)
    x10 = sign(x9)
    x11 = recolor(x4, x5)
    O = move(I, x11, x10)
    return O


def solve_ddf7fa4f(I):
    x1 = width(I)
    x2 = decrement(x1)
    x3 = tojvec(x2)
    x4 = connect(ORIGIN, x3)
    x5 = height(I)
    x6 = decrement(x5)
    x7 = toivec(x6)
    x8 = connect(ORIGIN, x7)
    x9 = width(I)
    x10 = decrement(x9)
    x11 = tojvec(x10)
    x12 = shape(I)
    x13 = decrement(x12)
    x14 = connect(x11, x13)
    x15 = height(I)
    x16 = decrement(x15)
    x17 = toivec(x16)
    x18 = shape(I)
    x19 = decrement(x18)
    x20 = connect(x17, x19)
    x21 = asindices(I)
    x22 = box(x21)
    x23 = toobject(x22, I)
    x24 = mostcolor(x23)
    x25 = matcher(color, x24)
    x26 = compose(flip, x25)
    x27 = rbind(sfilter, x26)
    x28 = rbind(sizefilter, ONE)
    x29 = rbind(objects, F)
    x30 = rbind(x29, F)
    x31 = rbind(x30, T)
    x32 = rbind(subgrid, I)
    x33 = chain(x27, x31, x32)
    x34 = chain(size, x28, x33)
    x35 = astuple(x4, x8)
    x36 = astuple(x14, x20)
    x37 = combine(x35, x36)
    x38 = argmax(x37, x34)
    x39 = rbind(toobject, I)
    x40 = compose(x39, initset)
    x41 = ofcolor(I, x24)
    x42 = difference(x38, x41)
    x43 = apply(x40, x42)
    x44 = rbind(intersection, x38)
    x45 = chain(size, x44, toindices)
    x46 = matcher(x45, ZERO)
    x47 = objects(I, T, F, T)
    x48 = sfilter(x47, x46)
    x49 = lbind(fork, either)
    x50 = lbind(lbind, hmatching)
    x51 = lbind(lbind, vmatching)
    x52 = fork(x49, x50, x51)
    x53 = lbind(chain, size)
    x54 = rbind(x53, x52)
    x55 = lbind(lbind, sfilter)
    x56 = compose(last, last)
    x57 = chain(x54, x55, x56)
    x58 = rbind(compose, x52)
    x59 = lbind(lbind, extract)
    x60 = compose(last, last)
    x61 = chain(x58, x59, x60)
    x62 = compose(first, last)
    x63 = rbind(matcher, ONE)
    x64 = compose(x63, x57)
    x65 = fork(sfilter, x62, x64)
    x66 = lbind(fork, recolor)
    x67 = lbind(x66, color)
    x68 = compose(x67, x61)
    x69 = fork(mapply, x68, x65)
    x70 = fork(combine, first, x69)
    x71 = compose(first, last)
    x72 = fork(difference, x71, x65)
    x73 = compose(last, last)
    x74 = fork(apply, x61, x65)
    x75 = fork(difference, x73, x74)
    x76 = fork(astuple, x72, x75)
    x77 = fork(astuple, x70, x76)
    x78 = difference(x43, x43)
    x79 = power(x77, TEN)
    x80 = astuple(x43, x48)
    x81 = astuple(x78, x80)
    x82 = x79(x81)
    x83 = first(x82)
    O = paint(I, x83)
    return O


def solve_de1cd16c(I):
    x1 = objects(I, T, F, F)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = size(x3)
    x5 = dedupe(x3)
    x6 = size(x5)
    x7 = equality(x4, x6)
    x8 = compose(leastcolor, merge)
    x9 = lbind(apply, color)
    x10 = chain(mostcommon, x9, totuple)
    x11 = branch(x7, x8, x10)
    x12 = x11(x1)
    x13 = objects(I, T, F, F)
    x14 = colorfilter(x13, x12)
    x15 = difference(x13, x14)
    x16 = rbind(subgrid, I)
    x17 = apply(x16, x15)
    x18 = rbind(colorcount, x12)
    x19 = argmax(x17, x18)
    x20 = mostcolor(x19)
    O = canvas(x20, UNITY)
    return O


def solve_ded97339(I):
    x1 = leastcolor(I)
    x2 = lbind(recolor, NEG_ONE)
    x3 = rbind(ofcolor, x1)
    x4 = chain(x2, backdrop, x3)
    x5 = fork(paint, identity, x4)
    x6 = height(I)
    x7 = vsplit(I, x6)
    x8 = mapply(x5, x7)
    x9 = ofcolor(x8, NEG_ONE)
    x10 = dmirror(I)
    x11 = width(I)
    x12 = vsplit(x10, x11)
    x13 = mapply(x5, x12)
    x14 = dmirror(x13)
    x15 = ofcolor(x14, NEG_ONE)
    x16 = combine(x9, x15)
    O = fill(I, x1, x16)
    return O


def solve_e179c5f4(I):
    x1 = portrait(I)
    x2 = branch(x1, identity, dmirror)
    x3 = x2(I)
    x4 = asindices(x3)
    x5 = shoot(ORIGIN, UNITY)
    x6 = intersection(x5, x4)
    x7 = lrcorner(x6)
    x8 = shoot(x7, DOWN_LEFT)
    x9 = intersection(x8, x4)
    x10 = combine(x6, x9)
    x11 = llcorner(x10)
    x12 = remove(x11, x10)
    x13 = lbind(shift, x12)
    x14 = height(x12)
    x15 = lbind(multiply, x14)
    x16 = chain(x13, toivec, x15)
    x17 = height(x3)
    x18 = height(x12)
    x19 = divide(x17, x18)
    x20 = increment(x19)
    x21 = interval(ZERO, x20, ONE)
    x22 = mapply(x16, x21)
    x23 = rbind(contained, x22)
    x24 = sfilter(x4, x23)
    x25 = asindices(I)
    x26 = corners(x25)
    x27 = difference(x25, x26)
    x28 = toobject(x27, I)
    x29 = mostcolor(x28)
    x30 = palette(I)
    x31 = other(x30, x29)
    x32 = ulcorner(x4)
    x33 = index(x3, x32)
    x34 = equality(x33, x31)
    x35 = urcorner(x4)
    x36 = index(x3, x35)
    x37 = equality(x36, x31)
    x38 = llcorner(x4)
    x39 = index(x3, x38)
    x40 = equality(x39, x31)
    x41 = lrcorner(x4)
    x42 = index(x3, x41)
    x43 = equality(x42, x31)
    x44 = astuple(x34, x37)
    x45 = astuple(x40, x43)
    x46 = combine(x44, x45)
    x47 = vmirror(x24)
    x48 = astuple(x24, x47)
    x49 = hmirror(x24)
    x50 = hmirror(x47)
    x51 = astuple(x49, x50)
    x52 = combine(x48, x51)
    x53 = pair(x46, x52)
    x54 = sfilter(x53, first)
    x55 = mapply(last, x54)
    x56 = fill(x3, x31, x55)
    x57 = x2(x56)
    O = replace(x57, x29, EIGHT)
    return O


def solve_e21d9049(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = compose(first, last)
    x4 = totuple(x2)
    x5 = apply(x3, x4)
    x6 = mostcommon(x5)
    x7 = compose(last, last)
    x8 = totuple(x2)
    x9 = apply(x7, x8)
    x10 = mostcommon(x9)
    x11 = compose(first, last)
    x12 = matcher(x11, x6)
    x13 = sfilter(x2, x12)
    x14 = compose(last, last)
    x15 = matcher(x14, x10)
    x16 = sfilter(x2, x15)
    x17 = objects(I, F, T, T)
    x18 = size(x17)
    x19 = equality(x18, TWO)
    x20 = mfilter(x17, hline)
    x21 = mfilter(x17, vline)
    x22 = branch(x19, x20, x13)
    x23 = branch(x19, x21, x16)
    x24 = width(x22)
    x25 = lbind(multiply, x24)
    x26 = width(I)
    x27 = divide(x26, x24)
    x28 = increment(x27)
    x29 = interval(ZERO, x28, ONE)
    x30 = apply(x25, x29)
    x31 = apply(invert, x30)
    x32 = combine(x30, x31)
    x33 = apply(tojvec, x32)
    x34 = lbind(shift, x22)
    x35 = mapply(x34, x33)
    x36 = height(x23)
    x37 = lbind(multiply, x36)
    x38 = height(I)
    x39 = height(x22)
    x40 = divide(x38, x39)
    x41 = increment(x40)
    x42 = interval(ZERO, x41, ONE)
    x43 = apply(x37, x42)
    x44 = apply(invert, x43)
    x45 = combine(x43, x44)
    x46 = apply(toivec, x45)
    x47 = lbind(shift, x23)
    x48 = mapply(x47, x46)
    x49 = combine(x35, x48)
    O = paint(I, x49)
    return O


def solve_e26a3af2(I):
    x1 = rot90(I)
    x2 = apply(mostcommon, I)
    x3 = apply(mostcommon, x1)
    x4 = repeat(x2, ONE)
    x5 = repeat(x3, ONE)
    x6 = compose(size, dedupe)
    x7 = x6(x2)
    x8 = x6(x3)
    x9 = greater(x8, x7)
    x10 = branch(x9, height, width)
    x11 = x10(I)
    x12 = rot90(x4)
    x13 = branch(x9, x5, x12)
    x14 = branch(x9, vupscale, hupscale)
    O = x14(x13, x11)
    return O


def solve_e3497940(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = vmirror(x2)
    x4 = width(I)
    x5 = hsplit(I, x4)
    x6 = first(x5)
    x7 = mostcolor(x6)
    x8 = objects(x3, T, F, F)
    x9 = matcher(color, x7)
    x10 = compose(flip, x9)
    x11 = sfilter(x8, x10)
    x12 = merge(x11)
    O = paint(x1, x12)
    return O


def solve_e40b9e2f(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = mostcolor(I)
    x4 = uppermost(x2)
    x5 = leftmost(x2)
    x6 = height(x2)
    x7 = width(x2)
    x8 = interval(SEVEN, ONE, NEG_ONE)
    x9 = add(x4, x6)
    x10 = increment(x9)
    x11 = lbind(subtract, x10)
    x12 = add(x5, x7)
    x13 = increment(x12)
    x14 = lbind(subtract, x13)
    x15 = lbind(interval, x4)
    x16 = rbind(x15, ONE)
    x17 = compose(x16, x11)
    x18 = lbind(interval, x5)
    x19 = rbind(x18, ONE)
    x20 = compose(x19, x14)
    x21 = fork(product, x17, x20)
    x22 = fork(equality, identity, rot90)
    x23 = fork(equality, identity, rot180)
    x24 = fork(equality, identity, rot270)
    x25 = fork(both, x23, x24)
    x26 = fork(both, x22, x25)
    x27 = fork(astuple, identity, identity)
    x28 = fork(multiply, identity, identity)
    x29 = compose(decrement, x28)
    x30 = initset(ORIGIN)
    x31 = difference(x30, x30)
    x32 = rbind(branch, x31)
    x33 = rbind(colorcount, x3)
    x34 = rbind(subgrid, I)
    x35 = lbind(compose, backdrop)
    x36 = lbind(fork, insert)
    x37 = lbind(x36, identity)
    x38 = lbind(compose, initset)
    x39 = chain(x35, x37, x38)
    x40 = lbind(rbind, add)
    x41 = chain(x39, x40, decrement)
    x42 = lbind(fork, x32)
    x43 = lbind(fork, both)
    x44 = lbind(x43, x26)
    x45 = rbind(compose, shape)
    x46 = compose(x44, x45)
    x47 = rbind(compose, x33)
    x48 = lbind(lbind, greater)
    x49 = chain(x47, x48, x29)
    x50 = lbind(rbind, equality)
    x51 = chain(x46, x50, x27)
    x52 = fork(x43, x49, x51)
    x53 = lbind(compose, x34)
    x54 = compose(x53, x41)
    x55 = fork(compose, x52, x54)
    x56 = lbind(compose, initset)
    x57 = lbind(rbind, astuple)
    x58 = compose(x56, x57)
    x59 = fork(x42, x55, x58)
    x60 = fork(mapply, x59, x21)
    x61 = center(x2)
    x62 = astuple(x61, ONE)
    x63 = repeat(x62, ONE)
    x64 = mapply(x60, x8)
    x65 = combine(x63, x64)
    x66 = valmax(x65, last)
    x67 = matcher(last, x66)
    x68 = sfilter(x65, x67)
    x69 = center(x2)
    x70 = initset(x69)
    x71 = rbind(manhattan, x70)
    x72 = compose(halve, last)
    x73 = fork(add, first, x72)
    x74 = compose(initset, x73)
    x75 = compose(x71, x74)
    x76 = argmin(x68, x75)
    x77 = first(x76)
    x78 = last(x76)
    x79 = decrement(x78)
    x80 = add(x77, x79)
    x81 = initset(x80)
    x82 = insert(x77, x81)
    x83 = backdrop(x82)
    x84 = subgrid(x83, I)
    x85 = asobject(x84)
    x86 = rot90(I)
    x87 = fgpartition(x86)
    x88 = merge(x87)
    x89 = rot180(I)
    x90 = fgpartition(x89)
    x91 = merge(x90)
    x92 = rot270(I)
    x93 = fgpartition(x92)
    x94 = merge(x93)
    x95 = rot90(I)
    x96 = occurrences(x95, x85)
    x97 = first(x96)
    x98 = invert(x97)
    x99 = shift(x88, x98)
    x100 = shift(x99, x77)
    x101 = rot180(I)
    x102 = occurrences(x101, x85)
    x103 = first(x102)
    x104 = invert(x103)
    x105 = shift(x91, x104)
    x106 = shift(x105, x77)
    x107 = rot270(I)
    x108 = occurrences(x107, x85)
    x109 = first(x108)
    x110 = invert(x109)
    x111 = shift(x94, x110)
    x112 = shift(x111, x77)
    x113 = combine(x100, x106)
    x114 = combine(x113, x112)
    O = paint(I, x114)
    return O


def solve_e48d4e1a(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    x4 = asobject(I)
    x5 = difference(x4, x2)
    x6 = leastcolor(x5)
    x7 = colorcount(I, x6)
    x8 = mostcolor(x5)
    x9 = ofcolor(I, x6)
    x10 = toindices(x2)
    x11 = combine(x10, x9)
    x12 = fill(I, x8, x11)
    x13 = argmax(x1, width)
    x14 = uppermost(x13)
    x15 = argmax(x1, height)
    x16 = leftmost(x15)
    x17 = astuple(x14, x16)
    x18 = initset(x17)
    x19 = position(x9, x18)
    x20 = multiply(x19, x7)
    x21 = add(x17, x20)
    x22 = hfrontier(x21)
    x23 = vfrontier(x21)
    x24 = combine(x22, x23)
    O = fill(x12, x3, x24)
    return O


def solve_e5062a87(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = recolor(ZERO, x2)
    x4 = normalize(x3)
    x5 = occurrences(I, x4)
    x6 = toindices(x4)
    x7 = lbind(shift, x6)
    x8 = mapply(x7, x5)
    O = fill(I, x1, x8)
    return O


def solve_e509e548(I):
    x1 = objects(I, T, F, T)
    x2 = fork(add, height, width)
    x3 = compose(decrement, x2)
    x4 = fork(equality, size, x3)
    x5 = fork(difference, toindices, box)
    x6 = compose(size, x5)
    x7 = matcher(x6, ZERO)
    x8 = sfilter(x1, x4)
    x9 = difference(x1, x8)
    x10 = sfilter(x9, x7)
    x11 = merge(x1)
    x12 = fill(I, TWO, x11)
    x13 = merge(x8)
    x14 = fill(x12, ONE, x13)
    x15 = merge(x10)
    O = fill(x14, SIX, x15)
    return O


def solve_e50d258f(I):
    x1 = asindices(I)
    x2 = box(x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    x5 = shape(I)
    x6 = canvas(x4, x5)
    x7 = hconcat(I, x6)
    x8 = objects(x7, F, F, T)
    x9 = rbind(colorcount, TWO)
    x10 = argmax(x8, x9)
    O = subgrid(x10, I)
    return O


def solve_e6721834(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = size(x2)
    x4 = sfilter(x1, vline)
    x5 = size(x4)
    x6 = greater(x3, x5)
    x7 = branch(x6, vsplit, hsplit)
    x8 = x7(I, TWO)
    x9 = order(x8, numcolors)
    x10 = first(x9)
    x11 = last(x9)
    x12 = objects(x11, F, F, T)
    x13 = merge(x12)
    x14 = mostcolor(x13)
    x15 = matcher(first, x14)
    x16 = compose(flip, x15)
    x17 = rbind(sfilter, x16)
    x18 = mostcolor(x10)
    x19 = lbind(recolor, x18)
    x20 = rbind(sfilter, x15)
    x21 = compose(toindices, x20)
    x22 = fork(combine, x21, outbox)
    x23 = compose(x19, x22)
    x24 = fork(combine, x17, x23)
    x25 = shape(x10)
    x26 = add(TWO, x25)
    x27 = canvas(x18, x26)
    x28 = asobject(x10)
    x29 = shift(x28, UNITY)
    x30 = paint(x27, x29)
    x31 = rbind(shift, NEG_UNITY)
    x32 = lbind(occurrences, x30)
    x33 = compose(x31, x32)
    x34 = compose(x33, x24)
    x35 = chain(positive, size, x34)
    x36 = sfilter(x12, x35)
    x37 = chain(first, x33, x24)
    x38 = compose(ulcorner, x24)
    x39 = fork(subtract, x37, x38)
    x40 = fork(shift, identity, x39)
    x41 = mapply(x40, x36)
    O = paint(x10, x41)
    return O


def solve_e73095fd(I):
    x1 = objects(I, T, F, F)
    x2 = mostcolor(I)
    x3 = colorfilter(x1, x2)
    x4 = fork(equality, toindices, backdrop)
    x5 = sfilter(x3, x4)
    x6 = lbind(mapply, dneighbors)
    x7 = chain(x6, corners, outbox)
    x8 = fork(difference, x7, outbox)
    x9 = leastcolor(I)
    x10 = ofcolor(I, x9)
    x11 = rbind(intersection, x10)
    x12 = matcher(size, ZERO)
    x13 = chain(x12, x11, x8)
    x14 = mfilter(x5, x13)
    O = fill(I, FOUR, x14)
    return O


def solve_e76a88a6(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, numcolors)
    x3 = normalize(x2)
    x4 = remove(x2, x1)
    x5 = apply(ulcorner, x4)
    x6 = lbind(shift, x3)
    x7 = mapply(x6, x5)
    O = paint(I, x7)
    return O


def solve_e8593010(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = sizefilter(x1, TWO)
    x4 = sizefilter(x1, THREE)
    x5 = merge(x2)
    x6 = fill(I, THREE, x5)
    x7 = merge(x3)
    x8 = fill(x6, TWO, x7)
    x9 = merge(x4)
    O = fill(x8, ONE, x9)
    return O


def solve_e8dc4411(I):
    x1 = fgpartition(I)
    x2 = argmax(x1, size)
    x3 = other(x1, x2)
    x4 = ineighbors(ORIGIN)
    x5 = height(x2)
    x6 = increment(x5)
    x7 = interval(ZERO, x6, ONE)
    x8 = lbind(intersection, x2)
    x9 = chain(positive, size, x8)
    x10 = lbind(shift, x2)
    x11 = rbind(multiply, UNITY)
    x12 = chain(x9, x10, x11)
    x13 = sfilter(x7, x12)
    x14 = maximum(x13)
    x15 = increment(x14)
    x16 = toindices(x3)
    x17 = lbind(intersection, x16)
    x18 = lbind(shift, x2)
    x19 = rbind(multiply, x15)
    x20 = chain(toindices, x18, x19)
    x21 = chain(size, x17, x20)
    x22 = argmax(x4, x21)
    x23 = shape(I)
    x24 = maximum(x23)
    x25 = increment(x24)
    x26 = interval(ONE, x25, ONE)
    x27 = lbind(shift, x2)
    x28 = multiply(x15, x22)
    x29 = lbind(multiply, x28)
    x30 = pair(x26, x26)
    x31 = apply(x29, x30)
    x32 = mapply(x27, x31)
    x33 = color(x3)
    x34 = recolor(x33, x32)
    O = paint(I, x34)
    return O


def solve_e9614598(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = center(x2)
    x4 = dneighbors(x3)
    x5 = insert(x3, x4)
    O = fill(I, THREE, x5)
    return O


def solve_e98196ab(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = size(x2)
    x4 = positive(x3)
    x5 = branch(x4, vsplit, hsplit)
    x6 = x5(I, TWO)
    x7 = first(x6)
    x8 = last(x6)
    x9 = fgpartition(x8)
    x10 = merge(x9)
    O = paint(x7, x10)
    return O


def solve_e9afcf9a(I):
    x1 = asobject(I)
    x2 = height(I)
    x3 = decrement(x2)
    x4 = lbind(subtract, x3)
    x5 = compose(double, halve)
    x6 = fork(equality, identity, x5)
    x7 = compose(last, last)
    x8 = chain(flip, x6, x7)
    x9 = sfilter(x1, x8)
    x10 = chain(x4, first, last)
    x11 = compose(last, last)
    x12 = fork(astuple, x10, x11)
    x13 = fork(astuple, first, x12)
    x14 = apply(x13, x9)
    O = paint(I, x14)
    return O


def solve_ea32f347(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = fill(I, FOUR, x2)
    x4 = argmin(x1, size)
    x5 = argmax(x1, size)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x4)
    return O


def solve_ea786f4a(I):
    x1 = shape(I)
    x2 = halve(x1)
    x3 = rbind(shoot, UP_RIGHT)
    x4 = rbind(shoot, DOWN_LEFT)
    x5 = fork(combine, x3, x4)
    x6 = rbind(shoot, UNITY)
    x7 = rbind(shoot, NEG_UNITY)
    x8 = fork(combine, x6, x7)
    x9 = fork(combine, x5, x8)
    x10 = index(I, x2)
    x11 = x9(x2)
    O = fill(I, x10, x11)
    return O


def solve_eb281b96(I):
    x1 = height(I)
    x2 = width(I)
    x3 = decrement(x1)
    x4 = astuple(x3, x2)
    x5 = crop(I, ORIGIN, x4)
    x6 = hmirror(x5)
    x7 = vconcat(I, x6)
    x8 = double(x3)
    x9 = astuple(x8, x2)
    x10 = crop(x7, DOWN, x9)
    O = vconcat(x7, x10)
    return O


def solve_eb5a1d5d(I):
    x1 = compose(dmirror, dedupe)
    x2 = x1(I)
    x3 = x1(x2)
    x4 = fork(remove, last, identity)
    x5 = compose(hmirror, x4)
    x6 = fork(vconcat, identity, x5)
    x7 = x6(x3)
    x8 = dmirror(x7)
    O = x6(x8)
    return O


def solve_ec883f72(I):
    x1 = fork(multiply, height, width)
    x2 = partition(I)
    x3 = argmax(x2, x1)
    x4 = remove(x3, x2)
    x5 = argmax(x4, x1)
    x6 = other(x4, x5)
    x7 = palette(I)
    x8 = lrcorner(x5)
    x9 = add(x8, UNITY)
    x10 = llcorner(x5)
    x11 = add(x10, DOWN_LEFT)
    x12 = urcorner(x5)
    x13 = add(x12, UP_RIGHT)
    x14 = ulcorner(x5)
    x15 = add(x14, NEG_UNITY)
    x16 = shoot(x9, UNITY)
    x17 = shoot(x11, DOWN_LEFT)
    x18 = shoot(x13, UP_RIGHT)
    x19 = shoot(x15, NEG_UNITY)
    x20 = combine(x16, x17)
    x21 = combine(x18, x19)
    x22 = combine(x20, x21)
    x23 = color(x6)
    O = fill(I, x23, x22)
    return O


def solve_ecdecbb3(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, T)
    x3 = merge(x2)
    x4 = palette(x3)
    x5 = other(x4, x1)
    x6 = ofcolor(I, x1)
    x7 = frontiers(I)
    x8 = colorfilter(x7, x5)
    x9 = sfilter(x8, hline)
    x10 = size(x9)
    x11 = positive(x10)
    x12 = height(I)
    x13 = toivec(x12)
    x14 = hfrontier(x13)
    x15 = toivec(NEG_ONE)
    x16 = hfrontier(x15)
    x17 = insert(x16, x8)
    x18 = insert(x14, x17)
    x19 = width(I)
    x20 = tojvec(x19)
    x21 = vfrontier(x20)
    x22 = tojvec(NEG_ONE)
    x23 = vfrontier(x22)
    x24 = insert(x23, x8)
    x25 = insert(x21, x24)
    x26 = branch(x11, x18, x25)
    x27 = lbind(argmin, x26)
    x28 = lbind(rbind, manhattan)
    x29 = compose(x28, initset)
    x30 = compose(x27, x29)
    x31 = rbind(remove, x26)
    x32 = compose(x31, x30)
    x33 = fork(argmin, x32, x29)
    x34 = fork(gravitate, initset, x30)
    x35 = compose(crement, x34)
    x36 = fork(add, identity, x35)
    x37 = fork(gravitate, initset, x33)
    x38 = compose(crement, x37)
    x39 = fork(add, identity, x38)
    x40 = ofcolor(I, x5)
    x41 = backdrop(x40)
    x42 = fork(connect, x36, x39)
    x43 = rbind(contained, x41)
    x44 = rbind(extract, x43)
    x45 = fork(astuple, x36, x39)
    x46 = compose(x44, x45)
    x47 = fork(connect, identity, x46)
    x48 = rbind(branch, x47)
    x49 = rbind(x48, x42)
    x50 = rbind(contained, x41)
    x51 = compose(x49, x50)
    x52 = compose(initset, x51)
    x53 = fork(rapply, x52, identity)
    x54 = compose(first, x53)
    x55 = mapply(x54, x6)
    x56 = fill(I, x1, x55)
    x57 = intersection(x40, x55)
    x58 = mapply(neighbors, x57)
    O = fill(x56, x5, x58)
    return O


def solve_ed36ccf7(I):
    O = rot270(I)
    return O


def solve_ef135b50(I):
    x1 = objects(I, T, F, F)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = compose(flip, x3)
    x5 = sfilter(x1, x4)
    x6 = argmax(x5, x2)
    x7 = color(x6)
    x8 = ofcolor(I, x7)
    x9 = asindices(I)
    x10 = difference(x9, x8)
    x11 = fill(I, NEG_ONE, x10)
    x12 = lbind(recolor, NEG_ONE)
    x13 = rbind(ofcolor, NEG_ONE)
    x14 = chain(x12, backdrop, x13)
    x15 = fork(paint, identity, x14)
    x16 = height(x11)
    x17 = vsplit(x11, x16)
    x18 = mapply(x15, x17)
    x19 = ofcolor(x18, NEG_ONE)
    x20 = asindices(I)
    x21 = box(x20)
    x22 = difference(x19, x21)
    x23 = intersection(x22, x8)
    O = fill(I, NINE, x23)
    return O


def solve_f15e1fac(I):
    x1 = rbind(ofcolor, TWO)
    x2 = compose(lowermost, x1)
    x3 = matcher(x2, ZERO)
    x4 = astuple(identity, dmirror)
    x5 = astuple(cmirror, hmirror)
    x6 = combine(x4, x5)
    x7 = rbind(rapply, I)
    x8 = compose(first, x7)
    x9 = chain(x3, x8, initset)
    x10 = extract(x6, x9)
    x11 = x10(I)
    x12 = mostcolor(I)
    x13 = palette(I)
    x14 = remove(x12, x13)
    x15 = other(x14, TWO)
    x16 = ofcolor(x11, x15)
    x17 = rightmost(x16)
    x18 = equality(x17, ZERO)
    x19 = branch(x18, identity, vmirror)
    x20 = x19(x11)
    x21 = ofcolor(x20, x15)
    x22 = ofcolor(x20, TWO)
    x23 = apply(last, x22)
    x24 = insert(ZERO, x23)
    x25 = width(x20)
    x26 = insert(x25, x24)
    x27 = order(x26, identity)
    x28 = last(x27)
    x29 = remove(x28, x27)
    x30 = first(x27)
    x31 = remove(x30, x27)
    x32 = pair(x29, x31)
    x33 = size(x29)
    x34 = interval(ZERO, x33, ONE)
    x35 = pair(x34, x32)
    x36 = lbind(fork, connect)
    x37 = compose(first, last)
    x38 = chain(decrement, last, last)
    x39 = lbind(lbind, add)
    x40 = compose(x39, first)
    x41 = lbind(rbind, astuple)
    x42 = rbind(chain, first)
    x43 = compose(x41, x37)
    x44 = compose(x41, x38)
    x45 = fork(x42, x43, x40)
    x46 = fork(x42, x44, x40)
    x47 = fork(x36, x45, x46)
    x48 = rbind(mapply, x21)
    x49 = compose(x48, x47)
    x50 = mapply(x49, x35)
    x51 = fill(x20, x15, x50)
    x52 = x19(x51)
    O = x10(x52)
    return O


def solve_f1cefba8(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = argmin(x1, x2)
    x5 = remove(x3, x1)
    x6 = other(x5, x4)
    x7 = color(x4)
    x8 = color(x6)
    x9 = toindices(x4)
    x10 = inbox(x6)
    x11 = intersection(x9, x10)
    x12 = fork(combine, hfrontier, vfrontier)
    x13 = mapply(x12, x11)
    x14 = corners(x6)
    x15 = inbox(x6)
    x16 = corners(x15)
    x17 = combine(x14, x16)
    x18 = mapply(x12, x17)
    x19 = difference(x13, x18)
    x20 = toindices(x3)
    x21 = intersection(x19, x20)
    x22 = fill(I, x7, x21)
    x23 = difference(x19, x21)
    x24 = fill(x22, x8, x23)
    x25 = inbox(x6)
    O = fill(x24, x8, x25)
    return O


def solve_f25fbde4(I):
    x1 = compress(I)
    O = upscale(x1, TWO)
    return O


def solve_f25ffba3(I):
    x1 = tophalf(I)
    x2 = numcolors(x1)
    x3 = equality(x2, ONE)
    x4 = bottomhalf(I)
    x5 = numcolors(x4)
    x6 = equality(x5, ONE)
    x7 = either(x3, x6)
    x8 = branch(x7, identity, dmirror)
    x9 = x8(I)
    x10 = asobject(x9)
    x11 = hmirror(x10)
    x12 = mostcolor(I)
    x13 = matcher(first, x12)
    x14 = compose(flip, x13)
    x15 = sfilter(x11, x14)
    x16 = paint(x9, x15)
    O = x8(x16)
    return O


def solve_f2829549(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = size(x2)
    x4 = positive(x3)
    x5 = branch(x4, vsplit, hsplit)
    x6 = x5(I, TWO)
    x7 = first(x6)
    x8 = last(x6)
    x9 = palette(x7)
    x10 = palette(x8)
    x11 = intersection(x9, x10)
    x12 = first(x11)
    x13 = shape(x7)
    x14 = canvas(x12, x13)
    x15 = ofcolor(x7, x12)
    x16 = ofcolor(x8, x12)
    x17 = intersection(x15, x16)
    O = fill(x14, THREE, x17)
    return O


def solve_f35d900a(I):
    x1 = objects(I, T, F, T)
    x2 = palette(I)
    x3 = mostcolor(I)
    x4 = remove(x3, x2)
    x5 = lbind(other, x4)
    x6 = compose(x5, color)
    x7 = fork(recolor, x6, outbox)
    x8 = mapply(x7, x1)
    x9 = mapply(toindices, x1)
    x10 = box(x9)
    x11 = difference(x10, x9)
    x12 = lbind(argmin, x9)
    x13 = rbind(compose, initset)
    x14 = lbind(rbind, manhattan)
    x15 = chain(x13, x14, initset)
    x16 = chain(initset, x12, x15)
    x17 = fork(manhattan, initset, x16)
    x18 = compose(even, x17)
    x19 = sfilter(x11, x18)
    x20 = paint(I, x8)
    O = fill(x20, FIVE, x19)
    return O


def solve_f5b8619d(I):
    x1 = fgpartition(I)
    x2 = mapply(toindices, x1)
    x3 = mapply(vfrontier, x2)
    x4 = underfill(I, EIGHT, x3)
    x5 = hconcat(x4, x4)
    O = vconcat(x5, x5)
    return O


def solve_f76d97a5(I):
    x1 = palette(I)
    x2 = remove(FIVE, x1)
    x3 = first(x2)
    x4 = ofcolor(I, x3)
    x5 = fill(I, ZERO, x4)
    x6 = ofcolor(I, FIVE)
    O = fill(x5, x3, x6)
    return O


def solve_f8a8fe49(I):
    x1 = partition(I)
    x2 = fork(multiply, height, width)
    x3 = argmin(x1, x2)
    x4 = argmax(x1, x2)
    x5 = remove(x3, x1)
    x6 = other(x5, x4)
    x7 = subgrid(x6, I)
    x8 = frontiers(x7)
    x9 = sfilter(x8, hline)
    x10 = size(x9)
    x11 = positive(x10)
    x12 = branch(x11, dmirror, identity)
    x13 = x12(I)
    x14 = color(x6)
    x15 = ofcolor(x13, x14)
    x16 = subgrid(x15, x13)
    x17 = trim(x16)
    x18 = lefthalf(x17)
    x19 = vmirror(x18)
    x20 = asobject(x19)
    x21 = righthalf(x17)
    x22 = vmirror(x21)
    x23 = asobject(x22)
    x24 = color(x4)
    x25 = inbox(x15)
    x26 = backdrop(x25)
    x27 = fill(x13, x24, x26)
    x28 = urcorner(x15)
    x29 = add(x28, UNITY)
    x30 = shift(x23, x29)
    x31 = ulcorner(x15)
    x32 = width(x20)
    x33 = invert(x32)
    x34 = tojvec(x33)
    x35 = add(DOWN, x34)
    x36 = add(x31, x35)
    x37 = shift(x20, x36)
    x38 = combine(x30, x37)
    x39 = paint(x27, x38)
    O = x12(x39)
    return O


def solve_f8b3ba0a(I):
    x1 = compress(I)
    x2 = astuple(THREE, ONE)
    x3 = palette(x1)
    x4 = lbind(colorcount, x1)
    x5 = compose(invert, x4)
    x6 = order(x3, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    x10 = size(x3)
    x11 = decrement(x10)
    x12 = astuple(x11, ONE)
    O = crop(x9, DOWN, x12)
    return O


def solve_f8c80d96(I):
    x1 = objects(I, T, F, F)
    x2 = compose(maximum, shape)
    x3 = argmin(x1, x2)
    x4 = color(x3)
    x5 = palette(I)
    x6 = other(x5, x4)
    x7 = colorfilter(x1, x6)
    x8 = argmin(x7, x2)
    x9 = remove(x8, x7)
    x10 = rbind(manhattan, x8)
    x11 = argmin(x9, x10)
    x12 = rightmost(x11)
    x13 = rightmost(x8)
    x14 = subtract(x12, x13)
    x15 = leftmost(x8)
    x16 = leftmost(x11)
    x17 = subtract(x15, x16)
    x18 = astuple(x14, x17)
    x19 = maximum(x18)
    x20 = lowermost(x11)
    x21 = lowermost(x8)
    x22 = subtract(x20, x21)
    x23 = uppermost(x8)
    x24 = uppermost(x11)
    x25 = subtract(x23, x24)
    x26 = astuple(x22, x25)
    x27 = maximum(x26)
    x28 = ulcorner(x8)
    x29 = lrcorner(x8)
    x30 = astuple(x27, x19)
    x31 = double(EIGHT)
    x32 = interval(ONE, x31, ONE)
    x33 = lbind(subtract, x28)
    x34 = rbind(multiply, x30)
    x35 = compose(x33, x34)
    x36 = lbind(add, x29)
    x37 = rbind(multiply, x30)
    x38 = chain(initset, x36, x37)
    x39 = fork(insert, x35, x38)
    x40 = compose(box, x39)
    x41 = mapply(x40, x32)
    x42 = fill(I, x6, x41)
    O = replace(x42, x4, FIVE)
    return O


def solve_f8ff0b80(I):
    x1 = objects(I, T, T, T)
    x2 = order(x1, size)
    x3 = apply(color, x2)
    x4 = rbind(canvas, UNITY)
    x5 = apply(x4, x3)
    x6 = merge(x5)
    O = hmirror(x6)
    return O


def solve_f9012d9b(I):
    x1 = lbind(contained, ZERO)
    x2 = compose(flip, x1)
    x3 = sfilter(I, x2)
    x4 = dmirror(I)
    x5 = lbind(contained, ZERO)
    x6 = compose(flip, x5)
    x7 = sfilter(x4, x6)
    x8 = compose(hperiod, asobject)
    x9 = height(x3)
    x10 = vsplit(x3, x9)
    x11 = apply(x8, x10)
    x12 = maximum(x11)
    x13 = compose(hperiod, asobject)
    x14 = height(x7)
    x15 = vsplit(x7, x14)
    x16 = apply(x13, x15)
    x17 = maximum(x16)
    x18 = ofcolor(I, ZERO)
    x19 = asobject(I)
    x20 = matcher(first, ZERO)
    x21 = compose(flip, x20)
    x22 = sfilter(x19, x21)
    x23 = lbind(shift, x22)
    x24 = height(I)
    x25 = divide(x24, x17)
    x26 = increment(x25)
    x27 = width(I)
    x28 = divide(x27, x12)
    x29 = increment(x28)
    x30 = invert(x26)
    x31 = increment(x26)
    x32 = interval(x30, x31, ONE)
    x33 = invert(x29)
    x34 = increment(x29)
    x35 = interval(x33, x34, ONE)
    x36 = product(x32, x35)
    x37 = astuple(x17, x12)
    x38 = lbind(multiply, x37)
    x39 = apply(x38, x36)
    x40 = mapply(x23, x39)
    x41 = paint(I, x40)
    O = subgrid(x18, x41)
    return O


def solve_fafffa47(I):
    x1 = tophalf(I)
    x2 = numcolors(x1)
    x3 = equality(x2, TWO)
    x4 = bottomhalf(I)
    x5 = numcolors(x4)
    x6 = equality(x5, TWO)
    x7 = both(x3, x6)
    x8 = lefthalf(I)
    x9 = numcolors(x8)
    x10 = equality(x9, TWO)
    x11 = righthalf(I)
    x12 = numcolors(x11)
    x13 = equality(x12, TWO)
    x14 = both(x10, x13)
    x15 = flip(x14)
    x16 = both(x7, x15)
    x17 = branch(x16, vsplit, hsplit)
    x18 = x17(I, TWO)
    x19 = first(x18)
    x20 = last(x18)
    x21 = palette(x19)
    x22 = palette(x20)
    x23 = intersection(x21, x22)
    x24 = first(x23)
    x25 = shape(x19)
    x26 = canvas(x24, x25)
    x27 = ofcolor(x19, x24)
    x28 = ofcolor(x20, x24)
    x29 = intersection(x27, x28)
    O = fill(x26, TWO, x29)
    return O


def solve_fcb5c309(I):
    x1 = objects(I, T, F, F)
    x2 = lbind(contained, F)
    x3 = compose(flip, x2)
    x4 = fork(equality, toindices, box)
    x5 = lbind(apply, x4)
    x6 = lbind(colorfilter, x1)
    x7 = chain(x3, x5, x6)
    x8 = rbind(greater, TWO)
    x9 = compose(minimum, shape)
    x10 = lbind(apply, x9)
    x11 = chain(x8, minimum, x10)
    x12 = lbind(colorfilter, x1)
    x13 = compose(x11, x12)
    x14 = fork(both, x7, x13)
    x15 = palette(I)
    x16 = extract(x15, x14)
    x17 = palette(I)
    x18 = remove(x16, x17)
    x19 = lbind(colorcount, I)
    x20 = argmin(x18, x19)
    x21 = rbind(colorcount, x20)
    x22 = rbind(toobject, I)
    x23 = chain(x21, x22, backdrop)
    x24 = colorfilter(x1, x16)
    x25 = argmax(x24, x23)
    x26 = subgrid(x25, I)
    O = replace(x26, x16, x20)
    return O


def solve_fcc82909(I):
    x1 = objects(I, F, F, T)
    x2 = lbind(add, DOWN)
    x3 = compose(x2, llcorner)
    x4 = rbind(add, RIGHT)
    x5 = compose(x4, x3)
    x6 = chain(toivec, decrement, numcolors)
    x7 = fork(add, x5, x6)
    x8 = compose(initset, x7)
    x9 = fork(insert, x3, x8)
    x10 = compose(backdrop, x9)
    x11 = mapply(x10, x1)
    O = fill(I, THREE, x11)
    return O


def solve_feca6190(I):
    x1 = asobject(I)
    x2 = matcher(first, ZERO)
    x3 = compose(flip, x2)
    x4 = sfilter(x1, x3)
    x5 = size(x4)
    x6 = width(I)
    x7 = multiply(x6, x5)
    x8 = multiply(UNITY, x7)
    x9 = canvas(ZERO, x8)
    x10 = multiply(x6, x5)
    x11 = decrement(x10)
    x12 = lbind(astuple, x11)
    x13 = rbind(shoot, UP_RIGHT)
    x14 = compose(last, last)
    x15 = chain(x13, x12, x14)
    x16 = fork(recolor, first, x15)
    x17 = mapply(x16, x4)
    O = paint(x9, x17)
    return O


def solve_ff28f65a(I):
    x1 = palette(I)
    x2 = remove(TWO, x1)
    x3 = lbind(colorcount, I)
    x4 = argmax(x2, x3)
    x5 = shape(I)
    x6 = canvas(x4, x5)
    x7 = hconcat(I, x6)
    x8 = objects(x7, T, F, T)
    x9 = colorfilter(x8, TWO)
    x10 = size(x9)
    x11 = double(x10)
    x12 = interval(ZERO, x11, TWO)
    x13 = apply(tojvec, x12)
    x14 = astuple(ONE, NINE)
    x15 = canvas(x4, x14)
    x16 = fill(x15, ONE, x13)
    x17 = hsplit(x16, THREE)
    O = merge(x17)
    return O


def solve_ff805c23(I):
    x1 = palette(I)
    x2 = lbind(rbind, sfilter)
    x3 = lbind(compose, flip)
    x4 = lbind(matcher, first)
    x5 = chain(x2, x3, x4)
    x6 = lbind(paint, I)
    x7 = rbind(compose, asobject)
    x8 = dmirror(I)
    x9 = rbind(rapply, x8)
    x10 = chain(first, x9, initset)
    x11 = chain(x10, x7, x5)
    x12 = compose(x6, x11)
    x13 = compose(x7, x5)
    x14 = compose(cmirror, x12)
    x15 = compose(initset, x13)
    x16 = fork(rapply, x15, x14)
    x17 = compose(first, x16)
    x18 = fork(paint, x12, x17)
    x19 = chain(initset, x7, x5)
    x20 = compose(hmirror, x18)
    x21 = fork(rapply, x19, x20)
    x22 = compose(first, x21)
    x23 = fork(paint, x18, x22)
    x24 = chain(initset, x7, x5)
    x25 = compose(vmirror, x23)
    x26 = fork(rapply, x24, x25)
    x27 = compose(first, x26)
    x28 = fork(paint, x23, x27)
    x29 = fork(equality, identity, hmirror)
    x30 = fork(equality, identity, vmirror)
    x31 = fork(equality, identity, cmirror)
    x32 = fork(equality, identity, dmirror)
    x33 = fork(both, x29, x30)
    x34 = fork(both, x31, x32)
    x35 = fork(both, x33, x34)
    x36 = compose(x35, x28)
    x37 = sfilter(x1, x36)
    x38 = lbind(colorcount, I)
    x39 = argmin(x37, x38)
    x40 = x28(x39)
    x41 = ofcolor(I, x39)
    O = subgrid(x41, x40)
    return O