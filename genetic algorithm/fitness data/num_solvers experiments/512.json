{"d56f2372": [[0.2676483980232106, "def solve_0be53b15(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(subgrid, I)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.273995593168007, "def solve_0e5b448a(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.273995593168007, "def solve_b920bfbd(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.2743476810143477, "def solve_1d5f340c(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_32b2c6c0(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_2acea60c(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_0ee78345(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_1be35f4f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_80f18b0d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_e338aee1(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_60d812ef(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.2743476810143477, "def solve_4ab41dd5(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.2743476810143477, "def solve_61559e8b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.27870924126181607, "def solve_7f2e44a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.29037478188052895, "def solve_14de348c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_d9ed0171(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29706172839506173, "def solve_8d614196(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.29706172839506173, "def solve_e1c6ffb9(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.29706172839506173, "def solve_b7c74175(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.29706172839506173, "def solve_d8c15142(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.29706172839506173, "def solve_b6ce3c93(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.29706172839506173, "def solve_065706d5(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.29706172839506173, "def solve_061c2613(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.31036002669336005, "def solve_33125261(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3700056407469819, "def solve_fed53637(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_102d9dde(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.3700056407469819, "def solve_7f1f92e7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.370790560948482, "def solve_203f15a0(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [0.370790560948482, "def solve_b3da08ae(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [0.3940173653506987, "def solve_8bd7ad3f(I):\n    x1 = hmirror(I)\n    x2 = fgpartition(x1)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(toindices, normalize)\n    x7 = rbind(upscale, TWO)\n    x8 = chain(toindices, x7, normalize)\n    x9 = x6(x4)\n    x10 = rbind(intersection, x9)\n    x11 = chain(size, x10, x8)\n    x12 = argmax(x5, x11)\n    x13 = subgrid(x12, x1)\n    O = vmirror(x13)\n    return O"], [0.39591901174509864, "def solve_be48f201(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_0fa41645(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_63e6d02b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_abe6b860(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_1d490af0(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_6c13b880(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_4e33ca1d(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_d1b340fb(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_781924cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_db8d8c39(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.39591901174509864, "def solve_5d2ee7ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.40983193979008575, "def solve_f9476cc5(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 =4044000004444\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(ZERO, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.41617597321745253, "def solve_43a73eac(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_9401d894(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_4c638a14(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.41617597321745253, "def solve_5d426782(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_431132a8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_aa77e1ca(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_a11e1022(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_9a1f5cc9(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_73a0f348(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_9c059e7e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_5d4c794f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_60689ef4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_04b03517(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.41617597321745253, "def solve_e406944c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41617597321745253, "def solve_6a50e294(I):\n    x1 = objects(I, F, T, T)\n    x2 = vmirror(I)\n    x3 = argmin(x1, numcolors)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x3)\n    x6 = width(x4)\n    x7 = subtract(x6, x6)\n    x8 = upscale(x5, x7)\n    x9 = height(x4)\n    x10 = subtract(x9, x6)\n    x11 = toivec(x10)\n    x12 = invert(x11)\n    x13 = shift(x8, x12)\n    x14 = combine(x3, x13)\n    x15 = toindices(x14)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x15)\n    O = fill(x4, EIGHT, x17)\n    return O"], [0.41617597321745253, "def solve_6776ed7f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41699831998382725, "def solve_ab8a28c0(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.41699831998382725, "def solve_4c025117(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(colorcount, TWO)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.41699831998382725, "def solve_984c9a63(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.4204508671590131, "def solve_bdb63ee9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_1f9dcee5(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_7d659d33(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_00b1a9d8(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_901f0e5e(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_1a785588(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_0bed41a0(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4204508671590131, "def solve_683d13c9(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.4245388866968078, "def solve_59ab7c9d(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4245388866968078, "def solve_3a618b7b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_103475d6(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_b737dcba(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_6baba6b3(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_1b5c9666(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_838ef1b4(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_669143a3(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4388128958543751, "def solve_52ae4732(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.45081110243456496, "def solve_7c4240be(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.4519109258964331, "def solve_b94eefee(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4519109258964331, "def solve_079bea07(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4519109258964331, "def solve_59c032d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4519109258964331, "def solve_a672cb30(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4519109258964331, "def solve_25ddb06f(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4519109258964331, "def solve_c02cdf94(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.45420349399449317, "def solve_31be0d02(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_3607ed0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_1a3b8836(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.45420349399449317, "def solve_3f8ed4f1(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4557081334207771, "def solve_bed7afba(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.45853661315671806, "def solve_ca1c92f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(TWO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.4592676912459521, "def solve_fe2b006e(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.4592676912459521, "def solve_fe479112(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.4608305049754325, "def solve_a0ba1291(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.46626613107772524, "def solve_06eae60f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.46626613107772524, "def solve_fe30e5aa(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.46924601939094696, "def solve_50bc776d(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.46924601939094696, "def solve_bccdbeb5(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.4780512509934251, "def solve_64856f77(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4780512509934251, "def solve_2bc8adc5(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4780512509934251, "def solve_c888aaad(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.48123445415925586, "def solve_4be47cf4(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [0.4826994012265918, "def solve_b2c6522a(I):\n    x1 = objects(I, T, F, F)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = order(x7, identity)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = ofcolor(I, x9)\n    x12 = ofcolor(I, x10)\n    x13 = switch(I, x10, x9)\n    x14 = combine(x11, x12)\n    x15 = subgrid(x14, x13)\n    O = trim(x15)\n    return O"], [0.4828905908059226, "def solve_3196dc5a(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.4838495551165023, "def solve_89bf3520(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.4838495551165023, "def solve_4eb1a014(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.48563359065544853, "def solve_04534685(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(ZERO, x1)\n    x5 = other(x4, x3)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x2)\n    O = paint(x7, x8)\n    return O"], [0.49611068641503425, "def solve_16681f5d(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [0.49611068641503425, "def solve_8b56e751(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [0.49680581361740783, "def solve_56e14712(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_0151242d(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_9adba361(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_6947b964(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_879d4b1a(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49680581361740783, "def solve_29cdd2bb(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.49704719435154215, "def solve_fbd3be64(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5135153382270797, "def solve_ad7e394c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5135153382270797, "def solve_81d46978(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5285228126677403, "def solve_586e7c5e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = leastcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5296244860882541, "def solve_7d9fc343(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5502516534918191, "def solve_ebf16c51(I):\n    x1 = compose(size, dedupe)\n    x2 = x1(I)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, F)\n    x7 = order(x6, leftmost)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    O = x4(x9)\n    return O"], [0.5603234709466594, "def solve_7f65d6f3(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, F)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.5652441058672942, "def solve_f9b6c671(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.5728936785168669, "def solve_393b8221(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5728936785168669, "def solve_fb66c6cd(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5766800033031917, "def solve_40b4964b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.5766800033031917, "def solve_7899e873(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(ONE, x11)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(TWO, x15)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.5766800033031917, "def solve_a937130d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.5985774392006277, "def solve_64f23806(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = branch(x2, ONE, SEVEN)\n    O = canvas(x3, UNITY)\n    return O"], [0.5985774392006277, "def solve_7a544698(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = rbind(subgrid, I)\n    x4 = chain(palette, trim, x3)\n    x5 = lbind(remove, x2)\n    x6 = compose(x5, x4)\n    x7 = fork(subtract, height, width)\n    x8 = fork(equality, x6, x7)\n    x9 = both(x2, x8)\n    x10 = branch(x9, x3, x5)\n    O = canvas(x10, UNITY)\n    return O"], [0.6065436642070495, "def solve_a3e37244(I):\n    x1 = width(I)\n    x2 = astuple(ONE, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x1)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [0.6181018953185965, "def solve_67df4902(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6281080752846014, "def solve_92890e19(I):\n    x1 = bottomhalf(I)\n    x2 = ofcolor(x1, ZERO)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(x1,ZERO, x10)\n    return O"], [0.6291436647232063, "def solve_30db8dc5(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6577899317169728, "def solve_9db5ad72(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(I)\n    O = replace(x4, x5, ZERO)\n    return O"], [0.6624893203432826, "def solve_74f3f99f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    O = replace(x3, ONE, ZERO)\n    return O"], [0.6674861298852472, "def solve_6a887aab(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6682601752430127, "def solve_77cd8d9d(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [0.6682601752430127, "def solve_d6caea39(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = sizefilter(x1, x2)\n    x4 = order(x3, leftmost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, x2)\n    x7 = rbind(canvas, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    O = dmirror(x9)\n    return O"], [0.6955752018051657, "def solve_7fcd0470(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6955752018051657, "def solve_4d62acfc(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6973545657685918, "def solve_c7b098f9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, ONE, x4)\n    return O"], [0.701314980779116, "def solve_5abd8a94(I):\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.701630810943428, "def solve_d91c45a4(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = color(x2)\n    x5 = color(x3)\n    x6 = merge(x1)\n    x7 = fill(I, x4, x6)\n    x8 = merge(x1)\n    x9 = fill(x7, x5, x8)\n    O = replace(x9, NEG_ONE, ZERO)\n    return O"], [0.7052501974196685, "def solve_83a3c9f9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7052501974196685, "def solve_cfa7ffc9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7068705363346716, "def solve_2abd1b7a(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.7174237451014522, "def solve_0c3f0295(I):\n    x1 = width(I)\n    x2 = astuple(ONE, TWO)\n    x3 = astuple(TWO, TWO)\n    x4 = astuple(TWO, ONE)\n    x5 = astuple(THREE, ONE)\n    x6 = canvas(THREE, UNITY)\n    x7 = upscale(x6, FOUR)\n    x8 = initset(DOWN)\n    x9 = insert(UNITY, x8)\n    x10 = insert(x2, x9)\n    x11 = insert(x3, x10)\n    x12 = fill(x7, ZERO, x11)\n    x13 = vupscale(x6, FIVE)\n    x14 = hupscale(x13, THREE)\n    x15 = insert(x4, x9)\n    x16 = insert(x5, x15)\n    x17 = fill(x14, ZERO, x16)\n    x18 = even(x1)\n    x19 = branch(x18, x12, x17)\n    x20 = canvas(ZERO, UNITY)\n    x21 = lbind(hupscale, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = rbind(hconcat, x6)\n    x24 = compose(x23, x22)\n    x25 = lbind(hupscale, x6)\n    x26 = compose(x25, height)\n    x27 = fork(vconcat, x24, rot90)\n    x28 = fork(vconcat, x26, x27)\n    x29 = subtract(x1, FOUR)\n    x30 = power(x28, x29)\n    O = x30(x19)\n    return O"], [0.7209610573661548, "def solve_9418df6e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(x3)\n    x5 = ofcolor(x3, x4)\n    x6 = neighbors(ORIGIN)\n    x7 = mapply(neighbors, x6)\n    x8 = vmirror(x5)\n    x9 = lbind(shift, x8)\n    x10 = apply(x9, x7)\n    x11 = rbind(intersection, x5)\n    x12 = compose(size, x11)\n    x13 = argmax(x10, x12)\n    O = fill(x3, x4, x13)\n    return O"], [0.7209610573661548, "def solve_d1aaf0d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, ZERO, x4)\n    return O"], [0.7220296100651739, "def solve_e9add61c(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7226167626040653, "def solve_f99abf0f(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7226167626040653, "def solve_616a0c72(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.7288791011418665, "def solve_878d9108(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = add(x12, UNITY)\n    x14 = canvas(x5, x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    O = paint(x14, x16)\n    return O"], [0.7292779869601377, "def solve_b4067168(I):\n    x1 = leastcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = leastcolor(x2)\n    O = replace(x2, x3, x1)\n    return O"], [0.7296396743144168, "def solve_a553c808(I):\n    x1 = objects(I, T, F, F)\n    x2 = switch(I, EIGHT, TWO)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, ONE, x6)\n    return O"], [0.7298396518450313, "def solve_af1b6c58(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, TWO)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, TWO, ZERO)\n    x12 = fill(x11, ONE, x9)\n    O = fill(x12, FOUR, x10)\n    return O"], [0.7305542811310891, "def solve_0ad4afff(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_12d0d27b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_74f9756a(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_538c6fd5(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_00b25f34(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_1a0121f5(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_7b93fb59(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7305542811310891, "def solve_72a1838d(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [0.7325765258226967, "def solve_c2fc64ab(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.7346483141124492, "def solve_130e830d(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.7358683159313282, "def solve_ddb2e244(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.736354560514456, "def solve_dc4e88af(I):\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, TWO, ZERO)\n    x3 = leastcolor(x2)\n    x4 = ofcolor(x2, x3)\n    x5 = combine(x1, x4)\n    x6 = recolor(x3, x5)\n    x7 = compose(decrement, double)\n    x8 = ulcorner(x5)\n    x9 = invert(x8)\n    x10 = shift(x1, x9)\n    x11 = apply(x7, x10)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = prapply(multiply, x11, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    O = paint(I, x15)\n    return O"], [0.7369330250036485, "def solve_dba1a228(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = switch(x3, ONE, THREE)\n    O = switch(x4, EIGHT, ZERO)\n    return O"], [0.7370209702671412, "def solve_c4286e35(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.7370209702671412, "def solve_faf86174(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7370209702671412, "def solve_8dd8c8ea(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, THREE)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7370209702671412, "def solve_6fd229a4(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.7371295138136601, "def solve_b73826bb(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = shape(x2)\n    x5 = halve(x4)\n    x6 = invert(x5)\n    x7 = shift(x3, x6)\n    x8 = sizefilter(x1, ONE)\n    x9 = apply(center, x8)\n    x10 = lbind(shift, x7)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [0.7373387922984307, "def solve_4cdd6bff(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7375405577460977, "def solve_2cbcd586(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7385945945967314, "def solve_7afd1b40(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.7392725757358751, "def solve_83c671c8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7392725757358751, "def solve_ac6c40ba(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7392725757358751, "def solve_4d7ff6e8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7392725757358751, "def solve_fecf94ee(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7392725757358751, "def solve_1207c5ab(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7392725757358751, "def solve_e72e9d0a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7392725757358751, "def solve_27ac19db(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7394705989789309, "def solve_20a6f67a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.7400226558178445, "def solve_e04ccbe0(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400226558178445, "def solve_f46922ff(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7401341986925902, "def solve_a090b1ff(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = corners(x2)\n    O = underfill(I, x3, x4)\n    return O"], [0.7401828246155336, "def solve_bdf1c436(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7401828246155336, "def solve_dbb5dfa9(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7402857765811778, "def solve_e323b4bc(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_d63a844a(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_b55dbadc(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_a5a6c483(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_46d139d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_a0ea46f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_c87feb95(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_50dea711(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7402857765811778, "def solve_52d2aedb(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7403016058295065, "def solve_3629d531(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_108972fa(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_c1e46011(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_f49eea2b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_eea7e0f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_2d7def7f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_ce0797ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_996ff3b4(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_7a074d04(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7403016058295065, "def solve_d8638427(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.7410606318002912, "def solve_6ebb7ed0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7410974414427098, "def solve_8ac94a7f(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7411341780448716, "def solve_e666c68e(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7412711803727685, "def solve_509817a2(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [0.7414217191724711, "def solve_721009e3(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414217191724711, "def solve_16f08f4a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414345790655789, "def solve_41d95892(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.7414345790655789, "def solve_211ae5d8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.7414355847808533, "def solve_8595794c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414355847808533, "def solve_666e8531(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414355847808533, "def solve_e854d13f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7414654147115858, "def solve_5e4a3ba3(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_6e9d3e6a(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_0c881630(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = rbind(adjacent, x3)\n    x5 = mfilter(x2, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [0.7414654147115858, "def solve_fb8055f0(I):\n    x1 = objects(I, T, T, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [0.7414654147115858, "def solve_40141efb(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = compose(size, x12)\n    x14 = matcher(x13, ONE)\n    x15 = fork(both, x14, x7)\n    x16 = mfilter(x3, x15)\n    O = fill(I, EIGHT, x16)\n    return O"], [0.7414654147115858, "def solve_2ea331ef(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_3bdf359e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7414654147115858, "def solve_7006e793(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = astuple(FIVE, x1)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = colorfilter(x2, FIVE)\n    x6 = merge(x5)\n    x7 = cover(I, x6)\n    x8 = compose(toindices, normalize)\n    x9 = apply(x8, x5)\n    x10 = asindices(x4)\n    x11 = ofcolor(x4, ZERO)\n    x12 = ofcolor(x4, ONE)\n    x13 = rbind(multiply, TEN)\n    x14 = rbind(multiply, FIVE)\n    x15 = rbind(intersection, x12)\n    x16 = rbind(intersection, x11)\n    x17 = rbind(intersection, x10)\n    x18 = chain(x13, size, x15)\n    x19 = chain(size, x16, delta)\n    x20 = compose(x14, uppermost)\n    x21 = chain(size, x16, outbox)\n    x22 = chain(x13, size, x17)\n    x23 = compose(invert, x18)\n    x24 = fork(add, x22, x23)\n    x25 = fork(subtract, x24, x21)\n    x26 = fork(subtract, x25, x20)\n    x27 = fork(subtract, x26, x19)\n    x28 = rbind(apply, x10)\n    x29 = lbind(lbind, shift)\n    x30 = rbind(argmax, x27)\n    x31 = chain(x30, x28, x29)\n    x32 = mapply(x31, x9)\n    O = fill(x7, ONE, x32)\n    return O"], [0.7414654147115858, "def solve_45b99762(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_ddf987a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = colorfilter(x1, FIVE)\n    x4 = product(x2, x3)\n    x5 = fork(vmatching, first, last)\n    x6 = sfilter(x4, x5)\n    x7 = compose(color, first)\n    x8 = fork(recolor, x7, last)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [0.7414654147115858, "def solve_08f97fd8(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_091430e5(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_4661e808(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.7414654147115858, "def solve_52c0510b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = center(x5)\n    x8 = invert(x7)\n    x9 = shift(x3, x8)\n    O = paint(I, x9)\n    return O"], [0.7414654147115858, "def solve_bdeb3d7d(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.7415156912324505, "def solve_9753c876(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.7415156912324505, "def solve_94bdea23(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.7415156912324505, "def solve_79fccece(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.7415472383693925, "def solve_97ebbe73(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(NEG_UNITY, x13)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [0.7416022713190306, "def solve_cd2d50f9(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.7416506506126929, "def solve_439f716f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7416506506126929, "def solve_314b0174(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7416506506126929, "def solve_e3057ac7(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7417406125100033, "def solve_48a4d83a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7417406125100033, "def solve_2875befa(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7417406125100033, "def solve_224b0614(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7417579528548929, "def solve_c9cfafaf(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    x9 = fill(I, THREE, x8)\n    x10 = leastcolor(I)\n    x11 = fill(x9, x10, x2)\n    O = fill(x11, x10, x8)\n    return O"], [0.7418219435553522, "def solve_ec51d352(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(hmatching, first, last)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = compose(center, first)\n    x9 = compose(center, last)\n    x10 = fork(connect, x8, x9)\n    x11 = chain(initset, center, x10)\n    x12 = compose(color, first)\n    x13 = fork(recolor, x12, x11)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7419599992729449, "def solve_fb9d91cb(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, TWO, x3)\n    return O"], [0.7419718656880402, "def solve_996ee05a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = difference(x1, x2)\n    x6 = first(x5)\n    x7 = normalize(x6)\n    x8 = shift(x7, x4)\n    x9 = shift(x8, NEG_UNITY)\n    O = paint(I, x9)\n    return O"], [0.7419971090288048, "def solve_5464f99b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = paint(x5, x9)\n    return O"], [0.7419971090288048, "def solve_b8542caa(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = paint(x5, x9)\n    return O"], [0.7420260064287781, "def solve_7c6f08f4(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.7420260064287781, "def solve_0f0c3889(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.7420260064287781, "def solve_8726555e(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.742135207480476, "def solve_b544a04b(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = compose(increment, ulcorner)\n    x4 = compose(decrement, lrcorner)\n    x5 = apply(x3, x2)\n    x6 = apply(x4, x2)\n    x7 = papply(connect, x5, x6)\n    x8 = apply(last, x5)\n    x9 = compose(last, first)\n    x10 = power(last, TWO)\n    x11 = fork(subtract, x9, x10)\n    x12 = compose(even, x11)\n    x13 = lbind(rbind, astuple)\n    x14 = lbind(compose, x12)\n    x15 = compose(x14, x13)\n    x16 = fork(sfilter, first, x15)\n    x17 = pair(x7, x8)\n    x18 = mapply(x16, x17)\n    O = fill(I, ZERO, x18)\n    return O"], [0.7424392989833423, "def solve_8d2dda29(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, THREE)\n    x3 = sizefilter(x1, ONE)\n    x4 = rbind(vmatching, x2)\n    x5 = rbind(hmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O"], [0.7425480010711071, "def solve_bdfe4730(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7425480010711071, "def solve_a1d1b96d(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7427043838829858, "def solve_4391370b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.7427043838829858, "def solve_dd9a300b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.7427992666033717, "def solve_3594364b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.7428573090030669, "def solve_ea764df1(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = switch(x3, EIGHT, NINE)\n    x6 = switch(x5, TWO, SIX)\n    x7 = switch(x6, ONE, FOUR)\n    x8 = switch(x7, ZERO, THREE)\n    O = switch(x8, ONE, FOUR)\n    return O"], [0.7429519914166027, "def solve_5210194d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x12 = chain(x7, x8, ulcorner)\n    x13 = mapply(x6, x2)\n    x14 = mapply(x12, x3)\n    x15 = combine(x13, x14)\n    O = paint(I, x15)\n    return O"], [0.7429519914166027, "def solve_5c5f8fc7(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, ulcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [0.7430657029791417, "def solve_d1d210d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.7430657029791417, "def solve_f6ec299b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.7430735847922042, "def solve_2bae01bf(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7430735847922042, "def solve_411dea80(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7431714033758151, "def solve_e751c7ca(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(mostcolor, x1)\n    x3 = merge(x1)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O"], [0.7431832795883769, "def solve_4a1f4473(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7433881601257383, "def solve_59bd7d9a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7436200311998801, "def solve_ec04f30c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = lrcorner(x4)\n    x9 = llcorner(x4)\n    x10 = urcorner(x4)\n    x11 = ulcorner(x4)\n    x12 = shoot(x8, UNITY)\n    x13 = shoot(x9, DOWN_LEFT)\n    x14 = shoot(x10, UP_RIGHT)\n    x15 = shoot(x11, NEG_UNITY)\n    x16 = combine(x12, x13)\n    x17 = combine(x14, x15)\n    x18 = combine(x16, x17)\n    O = underfill(I, x7, x18)\n    return O"], [0.7436200311998801, "def solve_960f794b(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = lrcorner(x4)\n    x9 = llcorner(x4)\n    x10 = urcorner(x4)\n    x11 = ulcorner(x4)\n    x12 = shoot(x8, UNITY)\n    x13 = shoot(x9, DOWN_LEFT)\n    x14 = shoot(x10, UP_RIGHT)\n    x15 = shoot(x11, NEG_UNITY)\n    x16 = combine(x12, x13)\n    x17 = combine(x14, x15)\n    x18 = combine(x16, x17)\n    O = underfill(I, x7, x18)\n    return O"], [0.7438671741299498, "def solve_f8a37d18(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, uppermost)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(TWO, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(apply, x9)\n    x11 = lbind(compose, size)\n    x12 = lbind(lbind, intersection)\n    x13 = compose(x11, x12)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x10, x14, x7)\n    x16 = fork(argmax, x15, x13)\n    x17 = mapply(x16, x4)\n    O = underfill(I, ONE, x17)\n    return O"], [0.7442178622324938, "def solve_4935e30c(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, uppermost)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(THREE, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(apply, x9)\n    x11 = lbind(compose, size)\n    x12 = lbind(lbind, intersection)\n    x13 = compose(x11, x12)\n    x14 = lbind(lbind, shift)\n    x15 = chain(x10, x14, x7)\n    x16 = fork(argmax, x15, x13)\n    x17 = mapply(x16, x4)\n    O = underfill(I, ONE, x17)\n    return O"], [0.7446400178861889, "def solve_eaf903d9(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.7446400178861889, "def solve_30cc5322(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = replace(x4, ONE, TWO)\n    x6 = asobject(x5)\n    x7 = shift(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.7448548046147191, "def solve_8782c019(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(max, shape)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7452006096033813, "def solve_2aedd316(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.7453226770852263, "def solve_55ab3fdf(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_84e448a1(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_ea8bb25d(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7454216969955122, "def solve_72b5c676(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7454216969955122, "def solve_cb638abb(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7454216969955122, "def solve_7c8e6d0a(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7457368744237748, "def solve_9d8f5f3c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    O = fill(I, TWO, x4)\n    return O"], [0.7458837637426737, "def solve_cb881de9(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(backdrop, x1)\n    O = fill(I, THREE, x2)\n    return O"], [0.7458837637426737, "def solve_301fbf0d(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(backdrop, x1)\n    O = fill(I, THREE, x2)\n    return O"], [0.7461098366866447, "def solve_15463e7d(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.7462543122718497, "def solve_86de74a7(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.7462559082099559, "def solve_185a3166(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval( EIGHT, SEVEN, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O"], [0.7470153090299405, "def solve_8d963ab5(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I,11, x3)\n    return O"], [0.7473234534622014, "def solve_af4cc542(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7473234534622014, "def solve_d4a62a5e(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.7474926942005157, "def solve_53581933(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    O = fill(I, THREE, x2)\n    return O"], [0.747502766479666, "def solve_07774d63(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.7478682141878891, "def solve_c317252f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x6)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7480057468975833, "def solve_c55a27e2(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7480983828045926, "def solve_ba6069a8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7487022635082722, "def solve_414b968b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7488659023144327, "def solve_af987f98(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.7489475772396457, "def solve_edf59a87(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, THREE, x3)\n    return O"], [0.7491210583733974, "def solve_8b73c40b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.7495634975814484, "def solve_724f3b83(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = fill(I, EIGHT, x4)\n    x6 = lbind(position, x2)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x1)\n    O = fill(x5, EIGHT, x8)\n    return O"], [0.7498499462550435, "def solve_cae12ac5(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [0.7498499462550435, "def solve_5cf85a12(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7498948998515579, "def solve_3ca7a634(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7498948998515579, "def solve_503405bc(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7498948998515579, "def solve_826a6615(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7498948998515579, "def solve_aa085182(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7498948998515579, "def solve_4cea31e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7502934600072129, "def solve_414d180f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, FOUR, x4)\n    return O"], [0.7508609019620739, "def solve_41e59744(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(either, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.751298918490794, "def solve_95ebb544(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = apply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = apply(lrcorner, x1)\n    x6 = shift(x2, NEG_UNITY)\n    x7 = shift(x3, UP_RIGHT)\n    x8 = shift(x4, DOWN_LEFT)\n    x9 = shift(x5, UNITY)\n    x10 = fill(I, ONE, x6)\n    x11 = fill(x10, TWO, x7)\n    x12 = fill(x11, THREE, x8)\n    O = fill(x12, FOUR, x9)\n    return O"], [0.7513616932305588, "def solve_c3c26ef3(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7525765258226969, "def solve_ea3d4708(I):\n    x1 = rbind(divide, THREE)\n    x2 = rbind(multiply, THREE)\n    x3 = compose(x2, x1)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(x4, last)\n    x6 = ofcolor(I, ONE)\n    x7 = sfilter(x6, x5)\n    x8 = fill(I, THREE, x7)\n    O = fill(x8, EIGHT, x6)\n    return O"], [0.7529753249444425, "def solve_857cfda3(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7572794043556649, "def solve_a603c468(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.7582273697592505, "def solve_ca79b80e(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O"], [0.7640864360555537, "def solve_0bfe04ba(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(normalize, x4)\n    x6 = extract(x1, x5)\n    x7 = replace(I, EIGHT, ONE)\n    O = fill(x7, TWO, x6)\n    return O"], [0.7700284366461739, "def solve_a9f974e2(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = merge(x1)\n    x7 = backdrop(x6)\n    x8 = box(x6)\n    x9 = fill(I, x3, x7)\n    O = fill(x9, x5, x8)\n    return O"], [1.0, "def solve_14e71e93(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmin(x4, size)\n    x6 = normalize(x5)\n    x7 = width(ulcorner)\n    x8 = lbind(shift, x7)\n    x9 = toindices(x6)\n    x10 = compose(x8, x9)\n    x11 = double(x17)\n    x12 = double(x11)\n    x13 = interval(x11, x12, ONE)\n    x14 = lbind(multiply, x5)\n    x15 = apply(x14, x13)\n    x16 = mapply(x12, x15)\n    x17 = mostcolor(I)\n    x18 = shape(x6)\n    x19 = canvas(x17, x18)\n    x20 = lbind(shift, x6)\n    x21 = mapply(x20, x15)\n    O = paint(x19, x21)\n    return O"], [1.0, "def solve_796ca4c5(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_207d07ed(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorge, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [1.0, "def solve_bc5fc6d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, order)\n    x13 = mapply(x12, x10)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [1.0, "def solve_29d9db46(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x1)\n    O = fill(x1, ONE, x10)\n    return O"], [1.0, "def solve_095f5415(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, compress, frontiers)\n    x7 = x6(I)\n    x8 = sfilter(x7, x7)\n    x9 = height(x5)\n    x10 = vsplit(x5, x9)\n    x11 = hupscale(x10, TWO)\n    x12 = lbind(greater, ONE)\n    x13 = compose(x12, numcolors)\n    x14 = sfilter(x4, x13)\n    x15 = upscale(x14, TWO)\n    x16 = normalize(x15)\n    x17 = x13(x16)\n    x18 = objects(x11, T, F, T)\n    x19 = sfilter(x18, x17)\n    x20 = compose(toindices, normalize)\n    x21 = mapply(x20, x19)\n    x22 = fill(x5, EIGHT, x21)\n    x23 = color(x2)\n    x24 = box(x2)\n    O = fill(x22, x23, x24)\n    return O"], [1.0, "def solve_c49dd039(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = product(x2, x3)\n    x5 = fork(equality, toindices, backdrop)\n    x6 = apply(x5, x4)\n    x7 = extract(x6, x5)\n    x8 = lbind(adjacent, x7)\n    x9 = extract(x8, x5)\n    O = subgrid(x9, I)\n    return O"], [1.0, "def solve_6c842790(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_0bda5d79(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = normalize(x3)\n    x7 = lbind(shift, x6)\n    x8 = height(x2)\n    x9 = divide(x8, x5)\n    x10 = increment(x9)\n    x11 = width(x2)\n    x12 = divide(x11, x5)\n    x13 = increment(x12)\n    x14 = invert(x10)\n    x15 = divide(x13, x14)\n    x16 = astuple(x11, x5)\n    x17 = canvas(x4, x16)\n    x18 = astuple(x3, x5)\n    x19 = canvas(ZERO, x18)\n    return O"], [1.0, "def solve_d48e52d9(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(valmax, width)\n    x4 = compose(x3, x4)\n    x5 = order(x2, x4)\n    x6 = apply(normalize, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(FIVE, ONE)\n    x9 = shift(x6, x7)\n    x10 = fill(I, x1, x9)\n    x11 = combine(x7, x10)\n    O = paint(x11, x11)\n    return O"], [1.0, "def solve_d36add2e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = add(size, dedupe)\n    x4 = argmax(x2, x3)\n    x5 = sizefilter(x1, TWO)\n    x6 = apply(size, x5)\n    x7 = merge(x6)\n    x8 = fill(I, TWO, x7)\n    x9 = fill(x8, ONE, x4)\n    O = fill(x9, ONE, x5)\n    return O"], [1.0, "def solve_a258f5b4(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(asindices, x2, shape)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(difference, outbox)\n    x6 = compose(greater, x5)\n    x7 = sfilter(x1, x4)\n    x8 = difference(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, ZERO, x9)\n    O = fill(x10, TWO, x3)\n    return O"], [1.0, "def solve_4342fc64(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(faffcolor, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [1.0, "def solve_36865705(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, greater, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_7911ef24(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x177, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = mostcolor(I)\n    x23 = combine(x21, x22)\n    x24 = lbind(rbind, occurrences)\n    x25 = lbind(sfilter, x21)\n    x26 = compose(x24, x25)\n    x27 = fork(mapply, x26, x139)\n    x28 = mapply(x27, x23)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_5b120e05(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, shift)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = fork(mapply, x16, x19)\n    x22 = rapply(x21, x2)\n    x23 = fork(paint, identity, x22)\n    x24 = mapply(x23, x3)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_6104ca63(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = shape(x2)\n    x6 = halve(x5)\n    x7 = invert(x6)\n    x8 = shift(x3, x7)\n    x9 = sizefilter(x3, x6)\n    x10 = apply(center, x9)\n    x11 = lbind(shift, x8)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_3772cdba(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = remove(x8, x7)\n    x10 = last(x7)\n    x11 = remove(x10, x7)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, identity, invert)\n    x14 = x13(x12)\n    x15 = lefthalf(x14)\n    x16 = branch(x12, identity, uppermost)\n    x17 = righthalf(x16)\n    x18 = interval(ONE, FIVE, ONE)\n    x19 = branch(x12, identity, invert)\n    x20 = righthalf(x17)\n    x21 = interval(ZERO,476, FOUR)\n    x22 = product(x20, x21)\n    x23 = difference(x22, x17)\n    x24 = apply(first, x23)\n    x25 = apply(last, x23)\n    x26 = position(x4, x25)\n    x27 = shift(x26, DOWN)\n    x28 = fill(x15, EIGHT, x27)\n    O = paint(x28, x26)\n    return O"], [1.0, "def solve_198702b6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_2a3bb649(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = argmax(x3, size)\n    x5 = replace(x3, x4, ZERO)\n    x6 = replace(x5, ONE, ZERO)\n    x7 = compress(x6)\n    x8 = width(x7)\n    x9 = halve(x8)\n    x10 = increment(x9)\n    x11 = divide(x10, x8)\n    x12 = width(x7)\n    x13 = halve(x12)\n    x14 = increment(x13)\n    x15 = divide(x12, x14)\n    x16 = width(x7)\n    x17 = subtract(x10, x16)\n    x18 = height(x7)\n    x19 =multiply(x18, x15)\n    x20 = add(x19, x15)\n    x21 = width(x7)\n    x22 = subtract(x10, x21)\n    x23 = urcorner(x4)\n    x24 = lrcorner(x4)\n    x25 = add(x23, x24)\n    x26 = ulcorner(x4)\n    x27 = width(x7)\n    x28 = subtract(x25, x27)\n    x29 = add(x28, x25)\n    x30 = urcorner(x7)\n    x31 = ulcorner(x7)\n    x32 = add(x30, x31)\n    x33 = ulcorner(x7)\n    x34 = subtract(x32, x33)\n    x35 = shift(x9, x34)\n    x36 = paint(x20, x35)\n    O = paint(x36, x4)\n    return O"], [1.0, "def solve_6fb2c07e(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = apply(tojvec, x3)\n    x5 = astuple(ONE, NINE)\n    x6 = canvas(ZERO, x5)\n    x7 = apply(decrement, x3)\n    x8 = initset(ZERO)\n    x9 = insert(x7, x8)\n    x10 = insert(x6, x9)\n    x11 =halve(x10)\n    x12 = lbind(shift, x11)\n    x13 = objects(I, T, F, T)\n    x14 = mapply(x12, x13)\n    x15 = paint(x6, x14)\n    x16 = interval(ZERO, x2, ONE)\n    x17 = apply(x13, x16)\n    x18 = product(x17, x17)\n    x19 = mapply(x12, x18)\n    O = paint(x15, x19)\n    return O"], [1.0, "def solve_bbdec192(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(other, FIVE)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = compose(toindices, x4)\n    x7 = fork(difference, x6, initset)\n    x8 = compose(x5, x7)\n    x9 = mfilter(x6, x8)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_60ccda75(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = height(x4)\n    x7 = rbind(multiply, x6)\n    x8 = chain(x7, toivec, width)\n    x9 = rbind(shift, x8)\n    x10 = height(x4)\n    x11 = rbind(multiply, x10)\n    x12 = chain(x9, x11, invert)\n    x13 = fork(combine, x5, x12)\n    x14 = mapply(x13, x2)\n    O = paint(x3, x14)\n    return O"], [1.0, "def solve_ffe7781c(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(add, normalize, shape)\n    x4 = x3(x2)\n    x5 = halve(x4)\n    x6 = compose(vfrontier, hfrontier)\n    x7 = mapply(x6, x5)\n    x8 = mostcolor(I)\n    x9 = fill(I, x8, x7)\n    O = paint(x9, x3)\n    return O"], [1.0, "def solve_8b6e2a6b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_f8f84509(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_65adf11c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = width(x4)\n    x6 = divide(x5, THREE)\n    x7 = upscale(x3, x6)\n    x8 = normalize(x7)\n    x9 = shift(x8, UNITY)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_64748b88(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = canvas(ZERO, x3)\n    x5 = asindices(x4)\n    x6 = normalize(x2)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = lbind(shift, x2)\n    x10 = compose(x9, NEG_UNITY)\n    x11 = lbind(shift, x5)\n    x12 = compose(x11, UP_RIGHT)\n    x13 = lbind(shift, x2)\n    x14 = rbind(multiply, TEN)\n    x15 = chain(x14, double, x8)\n    x16 = chain(x13, x12, x9)\n    x17 = compose(x15, x16)\n    x18 = fork(recolor, color, x17)\n    x19 = mapply(x18, x2)\n    O = paint(x4, x19)\n    return O"], [1.0, "def solve_ba28ac59(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_cc0283f5(I):\n    x1 = chain(ineighbors, last, first)\n    x2 = rbind(greater, ONE)\n    x3 = chain(x2, sfilter, last)\n    x4 = chain(invert, fork, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = objects(I, T, F, F)\n    x7 = compose(x5, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, center)\n    x10 = fork(mapply, x7, x9)\n    x11 = mapply(x10, x7)\n    x12 = paint(I, x11)\n    x13 = objects(x12, T, F, F)\n    x14 = compose(double, halve)\n    x15 = chain(x14, mostcolor, x14)\n    x16 = fork(equality, identity, x15)\n    x17 = sfilter(x13, x16)\n    x18 = compose(vfrontier, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x17)\n    x21 = paint(x12, x20)\n    O = paint(x21, x17)\n    return O"], [1.0, "def solve_5d956892(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 = lbind(matcher, first)\n    x9 = chain(x7, x8, mostcolor)\n    x10 = fork(sfilter, identity, x9)\n    x11 = chain(invert, ulcorner, x10)\n    x12 = lbind(lbind, shift)\n    x13 = fork(shift, identity, x11)\n    x14 = compose(x12, x13)\n    x15 = lbind(fork, mapply)\n    x16 = lbind(x15, x14)\n    x17 = rbind(compose, x10)\n    x18 = lbind(lbind, occurrences)\n    x19 = chain(x16, x17, x18)\n    x20 = rbind(mapply, x4)\n    x21 = compose(x20, x19)\n    x22 = fork(paint, identity, x21)\n    x23 = chain(identity, x22, identity)\n    x24 = chain(dmirror, x22, dmirror)\n    x25 = chain(cmirror, x22, dmirror)\n    x26 = chain(hmirror, x22, hmirror)\n    x27 = chain(vmirror, x22, vmirror)\n    x28 = chain(rot90, x22, rot270)\n    x29 = chain(rot180, x22, rot180)\n    x30 = chain(rot270, x22, rot90)\n    x31 = chain(x30, x29, x28)\n    x32 = chain(x27, x26, x25)\n    x33 = compose(x24, x23)\n    x34 = chain(x43, x32, x33)\n    O = x34(x6)\n    return O"], [1.0, "def solve_739ab971(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_be41d353(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = dmirror(x4)\n    x6 = apply(mostcommon, x2)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    x10 = combine(x3, x9)\n    x11 = compose(size, dedupe)\n    x12 = matcher(x11, ONE)\n    x13 = compose(flip, x12)\n    x14 = rbind(sfilter, x13)\n    x15 = lbind(compose, flip)\n    x16 = lbind(matcher, first)\n    x17 = chain(x15, x14, x16)\n    x18 = fork(sfilter, identity, x17)\n    x19 = chain(size, x14, x18)\n    x20 = matcher(x19, ONE)\n    x21 = compose(flip, x20)\n    x22 = lbind(ofcolor, I)\n    x23 = fork(recolor, x21, x22)\n    x24 = mapply(x23, x11)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_bdd8133c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, EIGHT, x4)\n    x6 = intersection(x4, x5)\n    x7 = fill(x6, TWO, x6)\n    x8 = mapply(vfrontier, x3)\n    x9 = fill(x7, EIGHT, x8)\n    O = fill(x9, TWO, x5)\n    return O"], [1.0, "def solve_bc6598d4(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = x7(I)\n    x9 = x6(I)\n    x10 = branch(x5, vmirror, hmirror)\n    x11 = x10(x9)\n    x12 = x10(x6)\n    x13 = compose(positive, size)\n    x14 = rbind(toobject, x8)\n    x15 = chain(x13, x14, dneighbors)\n    x16 = x15(x6)\n    x17 = x15(x12)\n    x18 = gravitate(x16, x17)\n    x19 = branch(x5, x18, initset)\n    x20 = x19(x16)\n    x21 = branch(x5, x20, dmirror)\n    x22 = x21(x16)\n    x23 = replace(x22, ONE, x20)\n    x24 = x21(x23)\n    x25 = branch(x5, x24, vmirror)\n    x26 = x25(x26)\n    x27 = fill(x23, THREE, x26)\n    x28 = x25(x27)\n    O = replace(x28, ONE, x20)\n    return O"], [1.0, "def solve_b8db4f25(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = argmax(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = lbind(chain, initset)\n    x11 = lbind(x10, manhattan)\n    x12 = lbind(lbind, shift)\n    x13 = chain(x11, x12, x10)\n    x14 = mapply(x13, x9)\n    x15 = difference(x10, x14)\n    x16 = cover(I, x15)\n    O = fill(x16, x4, x14)\n    return O"], [1.0, "def solve_043676de(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(rbind, sizefilter)\n    x7 = compose(merge, x6)\n    x8 = apply(x7, x2)\n    x9 = merge(x8)\n    O = fill(I, x5, x9)\n    return O"], [1.0, "def solve_ff1caea6(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = multiply(x2, FIVE)\n    x4 = astuple(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    x10 = paint(x5, x9)\n    O = hmirror(x10)\n    return O"], [1.0, "def solve_07ba5787(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, fork)\n    return O"], [1.0, "def solve_8a118379(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = width(x4)\n    x6 = halve(x5)\n    x7 = upscale(x4, x6)\n    x8 = height(x4)\n    x9 = height(x7)\n    x10 = frontiers(I)\n    x11 = mostcolor(I)\n    x12 = fill(x3, x11, x10)\n    x13 = argmax(x12, numcolors)\n    x14 = apply(ulcorner, x10)\n    x15 = lbind(shift, x4)\n    x16 = mapply(x15, x14)\n    O = paint(x12, x16)\n    return O"], [1.0, "def solve_cfeecfda(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(izindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O"], [1.0, "def solve_7297a43d(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = fork(multiply, height, width)\n    x8 = size(x4)\n    x9 = matcher(x7, x8)\n    x10 = sfilter(x4, x9)\n    x11 = difference(x4, x10)\n    x12 = replace(I, TWO, ZERO)\n    x13 = rbind(either, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(merge, x15, vfrontier)\n    x17 = mapply(x16, x11)\n    O = fill(x12, ZERO, x17)\n    return O"], [1.0, "def solve_6d70fb1c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = fork(equality, identity, hmirror)\n    x6 = prapply(connect, x4, x5)\n    x7 = fgpartition(I)\n    x8 = merge(x7)\n    x9 = width(x8)\n    x10 = ulcorner(x8)\n    x11 = toindices(x10)\n    x12 = index(I, x11)\n    x13 = height(x8)\n    x14 = increment(x13)\n    x15 = interval(ZERO, x14, ONE)\n    x16 = lbind(multiply, x12)\n    x17 = apply(x16, x15)\n    x18 = lbind(shift, x3)\n    x19 = mapply(x18, x17)\n    O = fill(I, x12, x19)\n    return O"], [1.0, "def solve_9ebc0fd4(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(780, height)\n    x4 = fork(equality, x3, size)\n    x5 = chain(positive, decrement, size)\n    x6 = rbind(sfilter, x4)\n    x7 = chain(x5, x6, frontiers)\n    x8 = sfilter(x2, x7)\n    x9 = merge(x8)\n    x10 = palette(x9)\n    x11 = remove(ZERO, x10)\n    x12 = lbind(colorcount, x9)\n    x13 = argmin(x11, x12)\n    x14 = toivec(x13)\n    x15 = branch(x14, xrbind,13)\n    x16 = x15(I)\n    x17 = normalize(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = toindices(x18)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = astuple(x22, x19)\n    x24 = canvas(ZERO, x23)\n    x25 = asobject(x24)\n    x26 = shift(x25, UNITY)\n    x27 = paint(x26, x26)\n    x28 = rot90(x27)\n    x29 = paint(x28, x27)\n    x30 = rot90(x29)\n    x31 = paint(x30, x27)\n    x32 = rot90(x31)\n    x33 = paint(x32, x27)\n    x34 = rot90(x33)\n    x35 = paint(x34, x27)\n    O = rot270(x35)\n    return O"], [1.0, "def solve_5cf8c714(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_9d244d82(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = rbind(matching, x2)\n    x5 = rbind(vmatching, x2)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(gravitate, x2)\n    x9 = fork(add, center, x8)\n    x10 = fork(connect, center, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x7)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_a6d37855(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(uppermost, x1)\n    x3 = order(x2, identity)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = lbind(apply, uppermost)\n    x7 = rbind(sfilter, x4)\n    x8 = chain(x6, x7, leftmost)\n    x9 = chain(size, dedupe, x8)\n    x10 = matcher(x9, ONE)\n    x11 = extract(x1, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = rbind(sfilter, x11)\n    x14 = chain(x12, x13, leftmost)\n    x15 = remove(x4, x1)\n    x16 = remove(x15, x1)\n    x17 = compose(x14, x16)\n    x18 = argmax(x15, x17)\n    x19 = lbind(apply, uppermost)\n    x20 = lbind(sfilter, x17)\n    x21 = chain(x19, x20, leftmost)\n    x22 = chain(x4, x21, leftmost)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x18)\n    x25 = paint(I, x24)\n    x26 = interval(ONE, SIX, ONE)\n    x27 = apply(double, x26)\n    x28 = apply(increment, x27)\n    x29 = lbind(astuple, xcount)\n    x30 = lbind(shift, x17)\n    x31 = rbind(subgrid, x55)\n    x32 = compose(x29, x31)\n    x33 = apply(x32, x28)\n    O = paint(x25, x33)\n    return O"], [1.0, "def solve_0ab336a6(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(normalize, x4)\n    x6 = extract(x1, x5)\n    x7 = totuple(x6)\n    x8 = apply(normalize, x7)\n    x9 = mostcommon(x8)\n    x10 = matcher(normalize, x9)\n    x11 = extract(x6, x10)\n    x12 = outbox(x11)\n    x13 = subgrid(x12, I)\n    x14 = objects(x13, F, T, T)\n    x15 = colorfilter(x14, ONE)\n    x16 = lbind(bordering, add)\n    x17 = compose(flip, x16)\n    x18 = mfilter(x15, x17)\n    O = fill(x13, THREE, x18)\n    return O"], [1.0, "def solve_173fcad1(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, EIGHT)\n    x3 = argmin(x1, size)\n    x4 = rbind(adjacent, x3)\n    x5 = remove(x3, x1)\n    x6 = extract(x5, x4)\n    x7 = color(x6)\n    x8 = extract(x1, x2)\n    x9 = subgrid(x8, I)\n    O = trim(x9)\n    return O"], [1.0, "def solve_016170bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = compose(x2, palette)\n    x4 = mapply(x3, x1)\n    O = hconcat(I, x4)\n    return O"], [1.0, "def solve_816feff0(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(normalize, x7)\n    x9 = mapply(x8, x2)\n    O = paint(x5, x9)\n    return O"], [1.0, "def solve_c8c2a42f(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    x5 = sizefilter(x2, FOUR)\n    x6 = merge(x5)\n    x7 = fill(I, NINE, x4)\n    x8 = fill(x7, ONE, x6)\n    O = fill(x8, FOUR, x7)\n    return O"], [1.0, "def solve_0cf24748(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_3ff523af(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = extract(x1, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = shape(x6)\n    x9 = canvas(x3, x8)\n    x10 = normalize(x6)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(x9, x12)\n    return O"], [1.0, "def solve_224605ba(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = combine(x7, x8)\n    O = fill(x5, x5, x8)\n    return O"], [1.0, "def solve_9758505f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_9cb4a032(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(colorcount, ZERO)\n    x4 = chain(x3, x2, frontiers)\n    x5 = matcher(x4, ZERO)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = rbind(subgrid, I)\n    x9 = apply(x8, x7)\n    x10 = merge(x9)\n    x11 = lbind(colorcount, x10)\n    x12 = chain(x11, argmax, palette)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = ulcorner(x15)\n    x18 = add(x17, UNITY)\n    x19 =indices(x15)\n    x20 = partition(I)\n    x21 = colorfilter(x20, ZERO)\n    x22 = rbind(contained, x21)\n    x23 = rbind(toobject, I)\n    x24 = chain(flip, x23, delta)\n    x25 = sfilter(x41, x24)\n    x26 = fork(multiply, height, width)\n    x27 = chain(asobject, x25, x26)\n    x28 = fork(both, x27, x245)\n    x29 = fork(both, x28, x25)\n    x30 = extract(x25, x29)\n    x31 = subgrid(x30, I)\n    O = trim(x31)\n    return O"], [1.0, "def solve_2ae164d5(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = replace(I, x2, ZERO)\n    x4 = rbind(contained, x1)\n    x5 = compose(x4, dneighbors)\n    x6 = sfilter(x2, x5)\n    x7 = remove(x6, x2)\n    x8 = lbind(colorfilter, x7)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x5)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [1.0, "def solve_d15524c4(I):\n    x1 = center(I)\n    x2 = ofcolor(I, ONE)\n    x3 = compose(invert, x2)\n    x4 = shoot(x1, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_27438915(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x2, x3)\n    x5 = halve(x4)\n    x6 = dneighbors(x5)\n    x7 = insert(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [1.0, "def solve_17966b51(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(izefilter, x1)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, UNITY)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(shift, DOWN)\n    x9 = mapply(x8, x9)\n    x10 = RIGHT(x7)\n    x11 = LEFT(x7)\n    x12 = branch(x5, identity, height)\n    x13 = x12(x10)\n    x14 = decrement(x13)\n    x15 = height(x7)\n    x16 = subtract(x14, x15)\n    x17 = x11(x16)\n    x18 = width(x7)\n    x19 = decrement(x18)\n    x20 = vupscale(x19, x17)\n    x21 = asobject(x20)\n    x22 = height(x7)\n    x23 = decrement(x22)\n    x24 = vupscale(x21, x23)\n    x25 = asobject(x24)\n    x26 = shape(x7)\n    x27 = canvas(ZERO, x26)\n    x28 = paint(x27, x25)\n    x29 = paint(x28, x25)\n    x30 = branch(x5, width, extrapply)\n    x31 = branch(x5, height, x23)\n    x32 = x31(x30)\n    x33 = paint(x29, x32)\n    x34 = branch(x5, x22, x24)\n    x35 = branch(x5, x25, x34)\n    x36 = x6(x35)\n    x37 = shift(x21, x36)\n    O = paint(x37, x37)\n    return O"], [1.0, "def solve_3bc09f33(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = cover(I, x2)\n    x4 = normalize(x2)\n    x5 = lbind(shift, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [1.0, "def solve_0f5a343f(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_7d90e641(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(rement, ulcorner, x16)\n    x18 = fork(shift, identity, x17)\n    x19 = mapply(x18, x3)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_9534781b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = lbind(position, x4)\n    x6 = compose(crement, x5)\n    x7 = order(x2, x6)\n    x8 = apply(ZERO, x7)\n    x9 = rbind(shoot, UNITY)\n    x10 = mapply(x9, x8)\n    O = first(x1)\n    return O"], [1.0, "def solve_ed10d1a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_c6322867(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, DOWN)\n    x3 = astuple(ONE, THREE)\n    x6 = rbind(subgrid, x3)\n    x7 = compose(x6, tophalf)\n    x8 = compose(x7, numcolors)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x2)\n    O = compress(x10)\n    return O"], [1.0, "def solve_e50607c0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(rbind, manhattan)\n    x8 = rbind(compose, initset)\n    x9 = chain(x6, x7, x8)\n    x10 = compose(x9, x7)\n    x11 = fork(argmin, x10, x9)\n    x12 = compose(x6, x11)\n    x13 = fork(shift, identity, x12)\n    x14 = mapply(x13, x4)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_265c788d(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(toindices, normalize)\n    x4 = lbind(contained, DOWN)\n    x5 = chain(x4, x3, normalize)\n    x6 = fork(extract, x3, x5)\n    x7 = fork(add, height, x6)\n    x8 = extract(x2, x7)\n    x9 = outbox(x8)\n    x10 = center(x9)\n    x11 = initset(x10)\n    x12 = fill(I, ONE, x11)\n    x13 = lbind(rbind, subtract)\n    x14 = lbind(apply, width)\n    x15 = fork(occurrences, x12, x14)\n    x16 = lbind(lbind, shift)\n    x17 = compose(x16, ulcorner)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x18, ulcorner)\n    x20 = fork(lbind, x17, x19)\n    x21 = compose(x15, x20)\n    x22 = fork(115, x21, subgrid)\n    x23 = rot90(x12)\n    x24 = fork(shift, x23, x18)\n    x25 = rot270(x12)\n    x26 = fork(shift, x19, x24)\n    x27 = rot90(x12)\n    x28 = fork(shift, x23, x27)\n    x29 = normalize(x8)\n    x30 = shift(x29, x10)\n    x31 = paint(x12, x30)\n    O = rot90(x281)\n    return O"], [1.0, "def solve_4501837b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = x14(x16)\n    x18 = shift(x17, x16)\n    x19 = fill(x5, x10, x18)\n    x20 = underfill(x19, ofcolor, x16)\n    x21 = ulcorner(x16)\n    x22 = subgrid(x21, x5)\n    x23 = rot270(x22)\n    x24 = shape(x23)\n    x25 = maximum(x24)\n    x26 = add(x16, x25)\n    x27 = shift(x23, x26)\n    x28 = fill(x5, x10, x27)\n    x29 = replace(x28, x10, x8)\n    x30 = cover(x29, x27)\n    x31 = x4(x30)\n    x32 = shift(x31, x5)\n    x33 = fill(x29, x10, x32)\n    O = replace(x33, x10, x4)\n    return O"], [1.0, "def solve_3a927844(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(cde, x1)\n    x3 = astuple(ONE, THREE)\n    x4 = size(x2)\n    x5 = order(x1, leftmost)\n    x6 = apply(color, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = dmirror(x9)\n    x11 = subtract(NINE, x4)\n    x12 = astuple(ONE, x11)\n    x13 = canvas(ZERO, x12)\n    x14 = hconcat(x3, x13)\n    x15 = hsplit(x14, THREE)\n    x16 = merge(x15)\n    x17 = crop(x16, ORIGIN, x3)\n    x18 = crop(x16, DOWN, x3)\n    x19 = crop(x16, TWO_BY_ZERO, x3)\n    x20 = vmirror(x18)\n    x21 = vconcat(x19, x20)\n    O = vconcat(x21, x17)\n    return O"], [1.0, "def solve_5cba9a64(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_b2ddf6f1(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = height(x3)\n    x6 = width(x3)\n    x7 = astuple(x5, x6)\n    x8 = minimum(x5)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = astuple(x7, x10)\n    x12 = lbind(greater, x7)\n    x13 = compose(x12, x11)\n    x14 = lbind(compose, x13)\n    x15 = height(x3)\n    x16 = divide(x15, x6)\n    x17 = increment(x16)\n    x18 = width(x3)\n    x19 = divide(x18, x6)\n    x20 = increment(x19)\n    x21 = astuple(x17, x20)\n    x22 = lbind(shift, x1)\n    x23 = compose(x22, last)\n    x24 = fork(recolor, first, x23)\n    x25 = compose(x71, x24)\n    x26 = first(x2)\n    x27 = last(x2)\n    x28 = normalize(x26)\n    x29 = paint(I, x28)\n    x30 = paint(x29, x27)\n    O = paint(x30, x29)\n    return O"], [1.0, "def solve_f3bf7632(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = leastcolor(x3)\n    return O"], [1.0, "def solve_ff072020(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = compose(toindices, normalize)\n    x4 = size(x2)\n    x5 = halve(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(flip, x6)\n    x8 = extract(x6, x7)\n    x9 = center(x8)\n    x10 = subtract(x9, x7)\n    x11 = hmirror(x10)\n    x12 = hconcat(x11, x8)\n    x13 = hconcat(x12, x7)\n    x14 = hmirror(x13)\n    x15 = vconcat(x14, x13)\n    x16 = vconcat(x15, x14)\n    O = vconcat(x16, x16)\n    return O"], [1.0, "def solve_fd625b17(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1,normalize)\n    x3 = apply(color, x2)\n    x4 = merge(x3)\n    x5 = cover(I, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = canvas(ZERO, x6)\n    x8 = paint(x7, x4)\n    x9 = rbind(toobject, x8)\n    x10 = apply(x9, x2)\n    x11 = normalize(x10)\n    x12 = lbind(shift, x11)\n    x13 = mapply(x12, x2)\n    O = paint(x8, x13)\n    return O"], [1.0, "def solve_a4e2a920(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_b4e44f21(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, DOWN, TWO)\n    x3 = mapply(toindices, x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = fill(x4, EIGHT, x5)\n    x7 = leastcolor(x6)\n    x8 = ofcolor(x6, x7)\n    x9 = combine(x3, x8)\n    x10 = fill(x6, x1, x9)\n    x11 = mapply(toindices, x1)\n    x12 = box(x11)\n    x13 = fill(x10, x7, x12)\n    x14 = mapply(vfrontier, x11)\n    x15 = fill(x13, x7, x14)\n    x16 = mapply(toobject, x1)\n    x17 = fill(x15, x7, x16)\n    O = fill(x17, x7, x3)\n    return O"], [1.0, "def solve_f07286ed(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(leftmost, center)\n    x4 = order(x2, x3)\n    x5 = difference(x4, x2)\n    x6 = apply(toindices, x4)\n    x7 = rbind(vmatching, x4)\n    x8 = compose(x7, normalize)\n    x9 = sfilter(x6, x8)\n    x10 = difference(x6, x9)\n    x11 = apply(toindices, x10)\n    x12 = rbind(multiply, THREE)\n    x13 = compose(x12, invert)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x11, x14)\n    x16 = lbind(shift, x5)\n    x17 = mapply(x16, x15)\n    O = fill(I, THREE, x17)\n    return O"], [1.0, "def solve_8a8aa291(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = divide(x11, x9)\n    x13 = subtract(x10, x12)\n    x14 = divide(x13, x10)\n    x15 = width(x2)\n    x16 = interval(x14, x15, ONE)\n    x17 = multiply(x13, x10)\n    x18 = interval(x16, x17, ONE)\n    x19 = lbind(shift, x8)\n    x20 = apply(tojvec, x18)\n    x21 = mapply(x19, x20)\n    x22 = paint(x3, x21)\n    x23 = repeat(x22, ONE)\n    x24 = asobject(x23)\n    x25 = matcher(first, x4)\n    x26 = compose(flip, x25)\n    x27 = sfilter(x24, x26)\n    x28 = fork(double, height, width)\n    x29 = multiply(x28, x10)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = mapply(toivec, x30)\n    x32 = lbind(shift, x27)\n    x33 = apply(x32, x31)\n    x34 = mapply(x27, x32)\n    x35 = fill(x22, x4, x33)\n    x36 = paint(x35, x34)\n    O = paint(x36, x35)\n    return O"], [1.0, "def solve_500f854f(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_22f82e92(I):\n    x1 = objects(I, T, F, T)\n    x2 = siz015(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x5(I)\n    x8 = x10(I)\n    x9 = shape(x7)\n    x10 = multiply(x9, x9)\n    x11 = index(x7, x10)\n    x12 = palette(x7)\n    x13 = other(x12, ZERO)\n    x14 = colorfilter(x12, x13)\n    x15 = merge(x14)\n    x16 = cover(x7, x15)\n    x17 = paint(x16, x10)\n    x18 = compose(hfirst, vmirror)\n    x19 = ofcolor(x7, x13)\n    x20 = sizefilter(x19, ONE)\n    x21 = difference(x19, x20)\n    O = fill(x17, THREE, x21)\n    return O"], [1.0, "def solve_ba30ebe4(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_3e7bc380(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, ZERO)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_44c58070(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(max, x1)\n    x3 = rbind(subgrid, I)\n    x4 = apply(x3, x2)\n    x5 = mapply(vconcat, x4, x4)\n    O = replace(x5, ONE, ZERO)\n    return O"], [1.0, "def solve_1a0d0015(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(other, ZERO)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(toindices, x1)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, ZERO)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(normalize, x10)\n    x12 = lbind(argmin, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x12, x13)\n    x15 = fork(gravitate, identity, x14)\n    x16 = compose(crement, x15)\n    x17 = apply(x16, x9)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_1338c985(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [1.0, "def solve_21cde2a2(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(recolor, color)\n    x3 = compose(x2, size)\n    x4 = fork(ofcolor, x3, leastcolor)\n    x5 = mapply(x4, x1)\n    O = underpaint(I, x5)\n    return O"], [1.0, "def solve_7ce81b5a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(backdrop, x1)\n    x3 = mapply(x2, x1)\n    O = fill(I, TWO, x3)\n    return O"], [1.0, "def solve_274563f5(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = rbind(argmax, x3)\n    x5 = compose(x4, toindices)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(compose, x2)\n    x8 = lbind(rbind, extract)\n    x9 = chain(x7, x8, x6)\n    x10 = compose(initset, x4)\n    x11 = fork(rapply, x10, x9)\n    x12 = compose(first, x11)\n    x13 = compose(backdrop, x12)\n    x14 = fork(recolor, x13, x12)\n    x15 = mapply(x14, x1)\n    x16 = merge(x15)\n    x17 = cover(I, x16)\n    x18 = mapply(x16, x1)\n    O = paint(x17, x18)\n    return O"], [1.0, "def solve_ac6781e9(I):\n    x1 = mostcolor(I)\n    x2 = colorcount(I, x1)\n    x3 = height(I)\n    x4 = width(I)\n    x5 = multiply(x3, x4)\n    x6 = subtract(x5, x2)\n    O = upscale(I, x6)\n    return O"], [1.0, "def solve_9290100d(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = matcher(x2, ZERO)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = index(x7, DOWN)\n    x9 = subgrid(x4, I)\n    x10 = lefthalf(x9)\n    x11 = palette(x10)\n    x12 = other(x11, ZERO)\n    x13 = equality(x8, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(x4)\n    x16 = normalize(x15)\n    x17 = shift(x16, UNITY)\n    O = paint(x7, x17)\n    return O"], [1.0, "def solve_699d4b5f(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(rbind, colorcount)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 = lbind(matcher, first)\n    x9 = chain(x7, x8, mostcolor)\n    x10 = fork(sfilter, identity, x9)\n    x11 = chain(invert, center, x10)\n    x12 = lbind(lbind, shift)\n    x13 = increment(x11)\n    x14 = interval(x12, x13, ONE)\n    x15 = apply(x14, x12)\n    x16 = mapply(x12, x15)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_bf65135b(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_e43cbe43(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(first, FIVE)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = extract(x1, x2)\n    x6 = replace(x4, FOUR, ZERO)\n    x7 = branch(x6, width, height)\n    x8 = x7(x3)\n    x9 = tojvec(x8)\n    x10 = crop(x3, x9, x6)\n    x11 = double(x10)\n    x12 = double(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = product(x13, x14)\n    x16 = lbind(multiply, x11)\n    x17 = apply(x16, x15)\n    x18 = lbind(shift, x3)\n    x19 = mapply(x18, x17)\n    O = paint(x3, x19)\n    return O"], [1.0, "def solve_492821a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_7b966cdc(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(multiply, height)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [1.0, "def solve_ee9157e3(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_fe51dedd(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = color(x2)\n    x4 = backdrop(x2)\n    x5 = toobject(x4, I)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mfilter(x1, x8)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_c6bae76e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_6600b0e1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_c4a66eed(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =equality(first, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = x4(I)\n    x7 = x5(I)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = intersection(x6, x7)\n    O = fill(x9, FOUR, x10)\n    return O"], [1.0, "def solve_884072e1(I):\n    x1 = fgpartition(I)\n    x2 = compose(maximum, shape)\n    x3 = power(x2, FIVE)\n    x4 = canvas(ZERO, THREE_BY_THREE)\n    x5 = tojvec(x3)\n    x6 = connect(ORIGIN, x5)\n    x7 = equality(x2, FOUR)\n    x8 = insert(UNITY, x1)\n    x9 = branch(x7, x8, x6)\n    O = fill(x4, TWO, x9)\n    return O"], [1.0, "def solve_7caefefe(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = greater(x2, FOUR)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(I)\n    x6 = branch(x4, vsplit, hsplit)\n    x7 = x6(I, TWO)\n    x8 = extract(x7, numcolors)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = subgrid(x9, x10)\n    x12 = trim(x11)\n    x13 = asobject(x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = astuple(x14, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = paint(x18, x13)\n    x20 = merge(x1)\n    x21 = fill(x19, FIVE, x20)\n    O = paint(x21, x15)\n    return O"], [1.0, "def solve_cdb8463d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = apply(775, x3)\n    x5 = mfilter(x4, underfill)\n    x6 = underfill(I, x1, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(3, x7)\n    x9 = fork(either, vline, hline)\n    x10 = sfilter(x8, x9)\n    x11 = underfill(x6, x1, x10)\n    x12 = leastcolor(I)\n    x13 = palette(x12)\n    x14 = remove(x12, x13)\n    x15 = other(x14, x12)\n    x16 = switch(x15, x12, x5)\n    O = replace(x16, x12, x6)\n    return O"], [1.0, "def solve_b0fbd2b4(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_d117ff7d(I):\n    x1 = objects(I, F, T, T)\n    x2 = valmax(x1, numcolors)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(F8, UNITY)\n    return O"], [1.0, "def solve_c21edabd(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_a9bbe98f(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, vmirror)\n    x4 = matcher(x3, ZERO)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x1, x5)\n    x7 = fill(I, EIGHT, x6)\n    O = replace(x7, ZERO, ONE)\n    return O"], [1.0, "def solve_9c4f4ff6(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, ZERO)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_13617d43(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = shoot(x5, UNITY)\n    x9 = fill(I, x5, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x8)\n    O = paint(x9, x11)\n    return O"], [1.0, "def solve_b98630d4(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = replace(x2, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = ofcolor(x4, x5)\n    x7 = replace(x6, EIGHT, x1)\n    x8 = fill(x7, x5, x6)\n    O = fill(x8, x5, x7)\n    return O"], [1.0, "def solve_725a82ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = merge(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O"], [1.0, "def solve_d0e1981c(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, TWO)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = mostcolor(x3)\n    O = replace(x4, EIGHT, x5)\n    return O"], [1.0, "def solve_5b1994ed(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(valmax, size)\n    x3 = compose(x2, width)\n    x4 = fork( equality, x3, height)\n    x5 = fork(both, x3, x4)\n    x6 = extract(x1, x5)\n    x7 = other(x1, x6)\n    x8 = gravitate(x7, x6)\n    x9 = shift(x7, x8)\n    O = move(I, x9, x6)\n    return O"], [1.0, "def solve_c0a3920f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_accbb968(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_fd725c6e(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    x7 = hmirror(x6)\n    O = vconcat(x7, x8)\n    return O"], [1.0, "def solve_12bdec83(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = combine(x6, x5)\n    x8 = mpapply(recolor, x7, x4)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_04510d62(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_4cc90f5b(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = astuple(ONE, THREE)\n    x5 = astuple(TWO, FOUR)\n    x6 = astuple(TWO, FIVE)\n    x7 = initset(x4)\n    x8 = insert(x5, x7)\n    x9 = insert(x6, x8)\n    x10 = insert(x9, x1)\n    x11 = rbind(contained, x10)\n    x12 = compose(normalize, toindices)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(size, x13, toindices)\n    x15 = Sfilter(x1, x14)\n    x16 = difference(x1, x15)\n    x17 = merge(x16)\n    x18 = cover(I, x17)\n    x19 = uppermost(x2)\n    x20 = lbind(righttract, x19)\n    x21 = chain(positive, size, x20)\n    x22 = compose(x21, merge)\n    x23 = fork(equality, identity, x22)\n    x24 = chain(positive, decrement, height)\n    x25 = lbind(greater, x24)\n    x26 = compose(x25, x23)\n    x27 = fork(either, x26, x25)\n    x28 = sfilter(x15, x27)\n    O = replace(x18, x137, x28)\n    return O"], [1.0, "def solve_ba6f52bc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = width(x4)\n    x6 = divide(x5, THREE)\n    x7 = upscale(x4, x6)\n    x8 = height(x4)\n    x9 = divide(x8, THREE)\n    x10 = interval(ZERO, x9, ZERO)\n    x11 = rbind(multiply, x5)\n    x12 = apply(x11, x10)\n    x13 = lbind(shift, x4)\n    x14 = mapply(x13, x12)\n    x15 = fill(x4, FOUR, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, FIVE)\n    x18 = rbind(bordering, x4)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [1.0, "def solve_53606169(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, ONE)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_09b136c9(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x4)\n    x6 = lbind(argmin, x5)\n    x7 = compose(x6, initset)\n    x8 = x7(x3)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = fgpartition(I)\n    x12 = merge(x11)\n    x13 = cover(I, x12)\n    x14 = shift(x3, UNITY)\n    x15 = paint(x13, x14)\n    x16 = toindices(x15)\n    x17 = normalize(x16)\n    x18 = ulcorner(x15)\n    x19 = double(x18)\n    x20 = shift(x17, x19)\n    x21 = paint(x15, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22,Ukcorner)\n    x24 = rbind(bordering, T)\n    x25 = compose(flip, x24)\n    x26 = mfilter(x23, x25)\n    O = paint(x21, x26)\n    return O"], [1.0, "def solve_f04a2782(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(compose, last)\n    x3 = lbind(rbind, contained)\n    x4 = chain(x2, x3, box)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(color, x5)\n    x7 = fork(other, palette, x6)\n    x8 = chain(decrement, decrement, height)\n    x9 = chain(decrement, decrement, width)\n    x10 = compose(toivec, x8)\n    x11 = fork(shift, toindices, x10)\n    x12 = chain(toivec, invert, x8)\n    x13 = fork(shift, toindices, x12)\n    x14 = compose(tojvec, x9)\n    x15 = fork(shift, toindices, x14)\n    x16 = chain(tojvec, invert, x9)\n    x17 = fork(shift, toindices, x16)\n    x18 = fork(combine, x11, x13)\n    x19 = fork(combine, x15, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = fork(combine, backdrop, x20)\n    x22 = fork(difference, x21, box)\n    x23 = fork(recolor, x6, x22)\n    x24 = fork(recolor, x7, box)\n    x25 = fork(combine, x23, x24)\n    x26 = mapply(x25, x1)\n    O = paint(I, x26)\n    return O"], [1.1, "def solve_db33f187(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_16c909f2(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_e2e3779c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = uppermost(x2)\n    x5 = leftmost(x2)\n    x6 = height(x2)\n    x7 = width(x2)\n    x8 = interval(SEVEN, ONE, NEG_ONE)\n    x9 = add(x4, x6)\n    x10 = increment(x9)\n    x11 = lbind(subtract, x10)\n    x12 = add(x5, x7)\n    x13 = increment(x12)\n    x14 = lbind(subtract, x13)\n    x15 = lbind(interval, x4)\n    x16 = rbind(x15, ONE)\n    x17 = compose(x16, x11)\n    x18 = lbind(interval, x5)\n    x19 = rbind(x18, ONE)\n    x20 = compose(x19, x14)\n    x21 = fork(product, x17, x20)\n    x22 = fork(equality, identity, rot90)\n    x23 = fork(equality, identity, rot180)\n    x24 = fork(equality, identity, rot270)\n    x25 = fork(both, x23, x24)\n    x26 = fork(both, x22, x25)\n    x27 = fork(astuple, identity, identity)\n    x28 = fork(multiply, identity, identity)\n    x29 = compose(decrement, x28)\n    x30 = initset(ORIGIN)\n    x31 = difference(x30, x30)\n    x32 = rbind(branch, x31)\n    x33 = rbind(colorcount, x3)\n    x34 = rbind(subgrid, I)\n    x35 = lbind(compose, backdrop)\n    x36 = lbind(fork, insert)\n    x37 = lbind(x36, identity)\n    x38 = lbind(compose, initset)\n    x39 = chain(x35, x37, x38)\n"], [1.1, "def solve_fdf1e6d9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, leftmost)\n    x6 = argmax(x4, leftmost)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = leftmost(x5)\n    x10 = leftmost(x6)\n    x11 = order(x4, uppermost)\n    x12 = remove(x11, x8)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = subgrid(x13, x3)\n    x16 = subgrid(x14, x3)\n    x17 = width(x15)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = height(x15)\n    x20 = interval(TWO, x19, ONE)\n    x21 = rbind(toobject, x1)\n    x22 = rbind(replace, x6)\n    x23 = rbind(chain, x21)\n    x24 = lbind(x23, x20)\n    x25 = lbind(rbind, shift)\n    x26 = compose(x24, x22)\n    x27 = chain(x27, x25, x23)\n    x28 = rbind(chain, initset)\n    x29 = lbind(rbind, add)\n    x30 = compose(x28, x29)\n    x31 = lbind(apply, x30)\n    x32 = lbind(colorfilter, x4)\n    x33 = chain(first, x31, x32)\n    x34 = fork(valmax, x33, x30)\n    x35 = compose(x34, x27)\n    x36 = fork(sfilter, x35, x27)\n    x37 = mapply(x36, x19)\n    x38 = palette(x37)\n    x39 = lbind(chain, x179)\n    x40 = lbind(r"], [1.1, "def solve_001052eb(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_9f60ac25(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_0227ed69(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, lrcorner)\n    x4 = matcher(x3, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(add, RIGHT)\n    x9 = compose(x8, initset)\n    x10 = fork(insert, x7, x9)\n    x11 = fork(insert, ulcorner, x10)\n    x12 = fork(insert, llcorner, x11)\n    x13 = fork(insert, urcorner, x12)\n    x14 = fork(insert, ulcorner, x13)\n    x15 = fork(insert, DOWN_LEFT, x14)\n    x16 = fork( insert, llcorner, x15)\n    x17 = fork(insert, urcorner, x16)\n    x18 = fork(insert, ulcorner, x17)\n    x19 = fork(Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = compose(x10, urcorner)\n    x2 = fork(add, x1, x5)\n    x3 = compose(x2, llcorner)\n    x4 = fork(add, x3, x5)\n    x5 = compose(x2, urcorner)\n    x6 = fork(add, x5, x4)\n    x7 = fork(astuple, x4, x6)\n    x8 = fork(connect, x7, x2)\n    x9 = mapply(x8, x6)\n    x10 = fill(I, EIGHT, x9)\n    x11 = connect(ORIGIN, DOWN)\n    x12 = fill(x10, TWO, x11)\n    x13 = objects(x12, T, F, T)\n    x14 = merge(x13)\n    x15 = fill(x12, FOUR, x14)"], [1.1, "def solve_b42691a0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, rightmost)\n    x21 = rbind(divide, rightmost)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, DOWN)\n    x25 = rbind(divide, DOWN)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x38)\n    x41 = compose("], [1.1, "def solve_76022566(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(shape, THREE_BY_THREE)\n    x3 = matcher(size, FIVE)\n    x4 = fork(intersection, toindices, box)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, FOUR)\n    x7 = fork(intersection, toindices, corners)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x3)\n    x11 = fork(both, x6, x9)\n    x12 = fork(both, x10, x11)\n    x13 = extract(x1, x12)\n    x14 = toindices(x13)\n    x15 = lowermost(x13)\n    x16 = matcher(first, x15)\n    x17 = uppermost(x13)\n    x18 = matcher(first, x17)\n    x19 = rightmost(x13)\n    x20 = matcher(last, x19)\n    x21 = leftmost(x13)\n    x22 = matcher(last, x21)\n    x23 = sfilter(x14, x16)\n    x24 = size(x23)\n    x25 = equality(x24, TWO)\n    x26 = sfilter(x14, x18)\n    x27 = size(x26)\n    x28 = equality(x27, TWO)\n    x29 = sfilter(x14, x20)\n    x30 = size(x29)\n    x31 = equality(x30, TWO)\n    x32 = sfilter(x14, x22)\n    x33 = size(x32)\n    x34 = equality(x33, TWO)\n    x35 = either(x25, x28)\n    x36 = branch(x35, hmirror, vmirror)\n    x37 = multiply(x25, DOWN)\n    x38 = multiply(x28, UP)\n    x39 = add(x37, x38)\n    x40 = multiply(x31, RIGHT"], [1.1, "def solve_6e019483(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = rbind(add, UNITY)\n    x4 = chain(x2, x3, lrcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(add, UP_RIGHT)\n    x8 = chain(x6, x7, urcorner)\n    x9 = fork(recolor, color, x8)\n    x10 = rbind(shoot, NEG_UNITY)\n    x11 = rbind(add, NEG_UNITY)\n    x12 = chain(x10, x11, ulcorner)\n    x13 = fork(recolor, color, x12)\n    x14 = rbind(shoot, DOWN_LEFT)\n    x15 = rbind(add, DOWN_LEFT)\n    x16 = chain(x14, x15, llcorner)\n    x17 = fork(recolor, color, x16)\n    x18 = fork(remove, lrcorner, toindices)\n    x19 = fork(equality, toindices, x18)\n    x20 = sfilter(x1, x19)\n    x21 = fork(remove, urcorner, toindices)\n    x22 = fork(equality, toindices, x21)\n    x23 = sfilter(x1, x22)\n    x24 = fork(remove, ulcorner, toindices)\n    x25 = fork(equality, toindices, x24)\n    x26 = sfilter(x1, x25)\n    x27 = fork(remove, llcorner, toindices)\n    x28 = fork(equality, toindices, x27)\n    x29 = sfilter(x1, x28)\n    x30 = mapply(x5, x20)\n    x31 = mapply(x9, x23)\n    x32 = combine(x30, x31)\n    x33 = mapply(x13, x26)\n    x34 = mapply("], [1.1, "def solve_e89b056d(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_9bcd79e6(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = lbind(shift, x3)\n    x5 = apply(x4, x2)\n    x6 = lbind(hmirror, x5)\n    x7 = mapply(x6, x5)\n    x8 = combine(x5, x7)\n    x9 = paint(I, x8)\n    x10 = objects(x9, T, F, T)\n    x11 = apply(toindices, x10)\n    x12 = rbind(add, RIGHT)\n    x13 = compose(x12, DOWN)\n    x14 = fork(extract, x13, identity)\n    x15 = apply(x14, x11)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = lbind(colorcount, x16)\n    x19 = compose(x18, color)\n    x20 = argmin(x17, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = chain(positive, decrement, x21)\n    x23 = rbind(toobject, x5)\n    x24 = compose(x5, x23)\n    x25 = rbind(colorcount, x20)\n    x26 = decrement(x25)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x27, x22)\n    x29 = astuple(x27, x26)\n    x30 = rbind(canvas, x29)\n    x31 = apply(x30, x30)\n    x32 = merge(x31)\n    x33 = lbind(hmirror, x32)\n    x34 = lbind(vmirror, x32)\n    x35 = chain(x33, x34, x28)\n    x36 = fork(compose, x35, x34)\n    x37 = lbind(lbind, shift)\n    x38 = lbind(rbind, co"], [1.1, "def solve_e626a126(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x3)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(rbind, manhattan)\n    x8 = chain(x7, x6, initset)\n    x9 = compose(color, x8)\n    x10 = fork(recolor, x9, identity)\n    x11 = apply(x10, x4)\n    x12 = interval(ONE, FIVE, ONE)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind( chain, size)\n    x17 =rbind(x16, decrement)\n    x18 = lbind(fork, difference)\n    x19 = lbind(x18, astuple)\n    x20 = lbind(x19, canvas)\n    x21 = compose(x17, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x22, backdrop, outbox)\n    x24 = compose(x23, x21)\n    x25 = fork(recolor, x24, identity)\n    x26 = chain(x15, x25, x23)\n    x27 = fork(mapply, x26, x24)\n    x28 = chain(toindices, x27, x23)\n    x29 = fork(either, x28, x29)\n    x30 = mapply(x27, x1)\n    x31 = paint(I, x30)\n    x32 = sfilter(x3, x30)\n    x33 = lbind(downscale, x10)\n    x34 = chain(x33, width, x27)\n    x35 =022(max, ONE)\n    x36 = x34(x35)\n    x37 = downscale(x31, x36)\n    x38 = frontiers(x"], [1.1, "def solve_b4f12039(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(vmatching, x4)\n    x7 = lbind(hmatching, x4)\n    x8 = sfilter(x5, x6)\n    x9 = sfilter(x5, x7)\n    x10 = argmin(x8, uppermost)\n    x11 = argmax(x8, leftmost)\n    x12 = x11(x10)\n    x13 = x11(x11)\n    x14 = toindices(x4)\n    x15 = toindices(x2)\n    x16 = lbind(manhattan, x14)\n    x17 = ulcorner(x6)\n    x18 = llcorner(x6)\n    x19 = connect(x17, x18)\n    x20 = fill(I, SIX, x19)\n    x21 = uppermost(x4)\n    x22 = width(x2)\n    x23 = subtract(x21, x22)\n    x24 = leftmost(x4)\n    x25 = width(x7)\n    x26 = subtract(x24, x25)\n    x27 = astuple(x23, x26)\n    x28 = maximum(x27)\n    x29 = double(x28)\n    x30 = interval(ONE, x29, ONE)\n    x31 = x26(backdrop)\n    x32 = x26(x30)\n    x33 = fill(x20, TWO, x32)\n    x34 = TWO(x33)\n    x35 = interval(889, x22, ONE)\n    x36 = lbind(multiply, x27)\n    x37 = fill(x35, TWO, x36)\n    x38 = lbind(recolor, EIGHT)\n    x39 = papply(pair, x38, x34)\n    x40 = mapply(x38, x39"], [1.1, "def solve_8f9822af(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, T, F)\n    x2 = astuple(ONE, THREE)\n    x3 = canvas(ZERO, x2)\n    x4 = fork(equality, toindices, corners)\n    x5 = merge(x1)\n    x6 = rbind(equality, x5)\n    x7 = compose(x6, x4)\n    x8 = argmin(x1, size)\n    x9 = x7(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x1)\n    x13 = x11(x6)\n    x14 = pair(x12, x13)\n    x15 = color(x10)\n    x16 = color(x11)\n    x17 = repeat(x15, x14)\n    x18 = x11(x16)\n    x19 = insert(x16, x18)\n    x20 = insert(x17, x19)\n    x21 = argmin(x20, width)\n    x22 = ulcorner(x21)\n    x23 = subtract(x22, x25)\n    x24 = upscale(x23, TWO)\n    x25 = height(x21)\n    x26 = insert(x25, x24)\n    x27 = upscale(x26, TWO)\n    x28 = ulcorner(x27)\n    x29 = invert(x28)\n    x30 = shift(x23, x29)\n    x31 = hmirror(x27)\n    x32 = invert(x25)\n    x33 = shift(x31, x32)\n    x34 = ofcolor(x49, x15)\n    x35 = leftmost(x34)\n    x36 = astuple(x35, x31)\n    x37 = shift(x34, x36)\n    x38 = toindices(x37)\n    x39 = invert(x28)\n    x40 = shift(x38, x39)\n    x41 = asobject(x40)\n    x42 =period(x41)"], [1.1, "def solve_b849b5b7(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = interval(ZERO, NINE, ONE)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = interval(ZERO, x5, ONE)\n    x8 = interval(ZERO, x6, ONE)\n    x9 = product(x4, x7)\n    x10 = lbind(sfilter, x9)\n    x11 = rbind(compose, flip)\n    x12 = lbind(matcher, first)\n    x13 = chain(x10, x11, x12)\n    x14 = fork(sfilter, identity, x13)\n    x15 = rbind(repeat, THREE)\n    x16 = lbind(compose, x10)\n    x17 = lbind(fork, subtract)\n    x18 = lbind(x17, x12)\n    x19 = lbind(colorfilter, x9)\n    x20 = chain(x18, x19, x12)\n    x21 = lbind(paint, x2)\n    x22 = rbind(compose, x20)\n    x23 = lbind(rbind, subtract)\n    x24 = chain(x22, x23, x12)\n    x25 = lbind(ofcolor, I)\n    x26 = compose(x21, x25)\n    x27 = fork(mapply, x26, x24)\n    x28 = lbind(apply, initset)\n    x29 = compose(x28, last)\n    x30 = chain(x17, x26, x29)\n    x31 = fork(mapply, x27, x30)\n    x32 = compose(x23, x31)\n    x33 = fork(mapply, x24, x32)\n    x34 = compose(x330, x33)\n    x35 = fork(recolor, x24, x34)\n    x36 = fork(difference, x29, x34)\n    x37"], [1.1, "def solve_36915fb9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = rbind(bordering, I)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    x7 = subgrid(x2, I)\n    x8 = outbox(x2)\n    x9 = objects(x7, T, F, T)\n    x10 = colorfilter(x9, x6)\n    x11 = argmax(x10, width)\n    x12 = neighbors(x11)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, x7)\n    x15 =ce22(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(x7, x16)\n    x18 =argmax(x11, size)\n    x19 = subgrid(x18, I)\n    x20 = matcher(first, x6)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = difference(x19, x22)\n    x24 = fill(x17, THREE, x23)\n    x25 = objects(x24, T, F, T)\n    x26 = colorfilter(x25, TWO)\n    x27 = subgrid(x26, x24)\n    x28 =180(x27)\n    x29 = downscale(x28, THREE)\n    x30 = output:\n    x29, fork(equality, identity, rot90)\n    x31 = positive(x29)\n    x32 = branch(x31, x30, x29)\n    x33 = multiply(TEN, TEN)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = branch(x31, x34, x29)\n    x36 = lbind(branch, I)\n    x37 = lbind(x36, x32)\n    x38 = rbind(branch, x37)\n    x39 ="], [1.1, "def solve_31140653(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, height, width)\n    x8 = x7(x2)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = x9(x9)\n    x12 = x10(x6)\n    x13 =0000000000000\n    x14 = height(x12)\n    x15 = divide(x14, x6)\n    x16 = increment(x15)\n    x17 = width(x12)\n    x18 = divide(x17, x6)\n    x19 = increment(x18)\n    x20 = invert(x16)\n    x21 = increment(x19)\n    x22 = interval(x20, x21, ONE)\n    x23 = invert(x21)\n    x24 = increment(x23)\n    x25 = interval(x22, x24, ONE)\n    x26 = product(x25, x25)\n    x27 = astuple(x26, x6)\n    x28 = contained(ZERO, x27)\n    x29 = lbind(sfilter, x26)\n    x30 = lbind(matcher, x22)\n    x31 = compose(x29, x30)\n    x32 = chain(first, x29, first)\n    x33 = lbind(sfilter, x27)\n    x34 = lbind(recolor, x2)\n    x35 = compose(x33, x34)\n    x36 = chain(first, x32, x35)\n    x37 = lbind(apply, last)\n    x38 = compose(x37, x36)\n    x39 = fork(combine, x35, x38)\n    x40 = fork(recolor, x21, x39)\n    x41 = mapply(x40, x26)\n    x42 = paint(I, x41)"], [1.1, "def solve_182b71fd(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_646fe38e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, double)\n    x9 = sfilter(x3, x8)\n    x10 = increment(x6)\n    x11 = width(x2)\n    x12 = rbind(greater, x11)\n    x13 = compose(rbind, interval)\n    x14 = lbind(rbind, astuple)\n    x15 = lbind(apply, x14)\n    x16 = lbind(compose, x12)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x15, x17)\n    x19 = lbind(chain, x8)\n    x20 = x19(x12)\n    x21 = lbind(rbind, occurrences)\n    x22 = compose(x21, merge)\n    x23 = fork(compose, x18, x22)\n    x24 = lbind(lbind, add)\n    x25 = compose(x24, decrement)\n    x26 = lbind(rbind, astuple)\n    x27 = fork( apply, x25, x26)\n    x28 = compose(x27, x23)\n    x29 = product(x9, x10)\n    x30 = fork(compose, x28, x29)\n    x31 = compose(x30, x23)\n    x32 = fork(sfilter, x27, x31)\n    x33 = fork(compose, x32, x30)\n    x34 = lbind(lbind, valmax)\n    x35 = compose(x34, x30)\n    x36 = matcher(x35, x5)\n    x37 = sfilter(x2, x36)\n    x38 = lbind(colorcount, I)\n    x39 = argmax(x37, x38"], [1.1, "def solve_ea4c9f39(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x34, x35)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x"], [1.1, "def solve_f7867583(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_01780322(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(000000, x1)\n    x3 = rbind(sfilter, square)\n    x4 = chain(size, x3, toindices)\n    x5 = matcher(x4, ZERO)\n    x6 = lbind(greater, SEVEN)\n    x7 = matcher(x6, x5)\n    x8 = lbind(compose, x7)\n    x9 = lbind(lbind, sfilter)\n    x10 = chain(x8, x9, leftmost)\n    x11 = lbind(lbind, > rightmost)\n    x12 = chain(x11, x11, leftmost)\n    x13 = compose(x11, uppermost)\n    x14 = fork(add, x13, x10)\n    x15 = compose(x12, x14)\n    x16 = lbind(apply, x9)\n    x17 = rbind(sfilter, x15)\n    x18 = chain(x16, x17, x17)\n    x19 = lbind(lbind, equality)\n    x20 = chain(x10, x19, toindices)\n    x21 = rbind(sfilter, x18)\n    x22 = chain(x16, x21, x10)\n    x23 = fork(add, x17, x20)\n    x24 = fork(add, x322, x22)\n    x25 = fork( add, x23, x24)\n    x26 = compose(x21, x25)\n    x27 = fork(subtract, x26, x17)\n    x28 = compose(even, x27)\n    x29 = rbind(bordering, I)\n    x30 = compose(x29, x28)\n    x31 = fork(equality, x30, x29)\n    x32 = extract(x1, x31)\n    x33 = x32(x32)\n    x34 = hmirror(x33)\n    x35 = papply(pair, x71, x34)\n    x36 = lbind(apply, maximum)\n    x37 ="], [1.1, "def solve_227b2e15(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hmirror, vmirror)\n    x10 = branch(x6, vmirror, hmirror)\n    x11 = x7(I)\n    x12 = x8(I)\n    x13 = order(x11, uppermost)\n    x14 = first(x13)\n    x15 = last(x13)\n    x16 = remove(x14, x13)\n    x17 = compose( last, merge)\n    x18 = power(x17, TWO)\n    x19 = x18(x14)\n    x20 = x18(x12)\n    x21 = replace(x19, SIX, x50)\n    x22 = fill(x21, solve, x19)\n    x23 = cover(x22, x20)\n    x24 = replace(x23, ONE, x50)\n    x25 = downscale(x24, TWO)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, ONE)\n    x30 = merge(x29)\n    x31 = fill(x22, THREE, x30)\n    x32 = ofcolor(x31, TWO)\n    x33 = argmin(xx32, x23)\n    x34 = fill(x31, THREE, x33)\n    x35 = ofcolor(x34, ONE)\n    x36 = fill(x31, THREE, x35)\n    x37 = hmirror(x36)\n    x38 = fill(x34, THREE, x37)\n    x39 = ofcolor(x38,"], [1.1, "def solve_079f8f7c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lec, compose)\n    x8 = compose(center, x2)\n    x9 = lbind(rbind, astuple)\n    x10 = chain(x8, x9, initset)\n    x11 = x10(x7)\n    x12 = sfilter(x1, x11)\n    x13 = merge(x12)\n    x14 = mostcolor(I)\n    x15 = shape(I)\n    x16 = canvas(x14, x15)\n    x17 = paint(x16, x13)\n    x18 = normalize(x13)\n    x19 = box(x18)\n    x20 = fill(I, ZERO, x19)\n    x21 = asobject(x18)\n    x22 = matcher(first, ZERO)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x14)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x15)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x47, x21)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(x10, x40)\n    return"], [1.1, "def solve_45e3746f(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(I)\n    x6 = remove(x4, x1)\n    x7 = lbind(lbind, combine)\n    x8 = lbind(x7, normalize)\n    x9 = lbind(lbind, occurrences)\n    x10 = chain(x8, x9, color)\n    x11 = lbind(sfilter, x6)\n    x12 = compose(size, x11)\n    x13 = argmax(x10, x12)\n    x14 = remove(x13, x10)\n    x15 = objects(I, T, F, T)\n    x16 = merge(x15)\n    x17 = center(x16)\n    x18 = subgrid(x13, I)\n    x19 = lbind(position, x18)\n    x20 = compose(x19, ulcorner)\n    x21 = fork(subtract, x20, rot90)\n    x22 = fork(shift, x17, x21)\n    x23 = rot270(x22)\n    x24 = lbind(mapply, xdneighbors)\n    x25 = mapply(x24, x14)\n    x26 = lbind(ofcolor, x25)\n    x27 = compose(x25, x26)\n    x28 = fork(paint, x27, x22)\n    x29 = rbind(order, identity)\n    x30 = rbind(ac0, x2)\n    x31 = palette(I)\n    x32 = apply(x30, x31)\n    x33 = lbind(index, x28)\n    x34 =884222(x33, x32)\n    x35 =999(x34, x28)\n    x36 = ofcolor(x28, x35)\n    x37 =99fa76(x36)\n    x38 = lbind(48, x37)\n    x39 = lb"], [1.1, "def solve_242dcf6c(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(sizefilter, x1)\n    x3 = merge(x2)\n    x4 = palette(x3)\n    x5 = other(x4, ZERO)\n    x6 = ofcolor(I, x5)\n    x7 = frontiers(I)\n    x8 = colorfilter(x7, ZERO)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = height(I)\n    x13 = increment(x12)\n    x14 = toivec(x13)\n    x15 = lbind(shift, x10)\n    x16 = height(I)\n    x17 = increment(x16)\n    x18 = tojvec(x17)\n    x19 = lbind(shift, x9)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 =127(ORIGIN)\n    x23 = center(x2)\n    x24 = ofcolor(I, x5)\n    x25 = first(x24)\n    x26 = last(x24)\n    x27 = center(x2)\n    x28 = increment(x27)\n    x29 = astuple(x26, x28)\n    x30 = shift(x25, x29)\n    x31 = hmirror(x30)\n    x32 = vmirror(x30)\n    x33 = combine(x30, x31)\n    x34 = combine(x30, x32)\n    x35 = by Shared Sequenceeric\n    x34(x33)\n    x36 = invert(x40)\n    x37 = shift(x35, x36)\n    x38 = height(I)\n    x39 = shift(x37, x38)\n    x40 = fill(I, x5, x39)\n    x41 = ofcolor(x40, x7)\n    x42 =915(x41, x25)\n    O = fill(x40, x5, x42)"], [1.1, "def solve_7f3154ad(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)"], [1.1, "def solve_927e658a(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = replace(x3, ONE, ZERO)\n    x6 = objects(x5, F, T, T)\n    x7 = argmax(x6, numcolors)\n    x8 = normalize(x7)\n    x9 = cellwise(x8, x7, x2)\n    x10 = height(x9)\n    x11 = halve(x10)\n    x12 = increment(x11)\n    x13 = width(x9)\n    x14 = rbind(SEVEN, x12)\n    x15 = chain(last, x14, x12)\n    x16 = fork(multiply, first, x15)\n    x17 = fork(subtract, x16, normalize)\n    x18 = rot90(x17)\n    x19 = color(x2)\n    x20 = remove(x18, x2)\n    x21 = first(x20)\n    x22 = rbind(sfilter, x21)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = sfilter(x11, x24)\n    x26 = ZERO(x25)\n    x27 = remove(x26, x25)\n    x28 = last(x27)\n    x29 = subgrid(x28, x20)\n    x30 = rot90(x29)\n    x31 = ofcolor(x30, x55)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, initset)\n    x34 = lbind(rbind, manhattan)\n    x35 = chain(x33, x34, initset)\n    x36 = lbind(compose, initset)\n    x37 = lbind(rbind, subtract)\n    x38 = compose(x36, x37)\n    x39 = fork(argmin"], [1.1, "def solve_7281a9a2(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = height(x2)\n    x7 = width(x2)\n    x8 = ZERO(x6)\n    x9 = astuple(x8, x7)\n    x10 = shift(x4, x9)\n    x11 = paint(x3, x10)\n    x12 = normalize(x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x13)\n    x15 = divide(x7, x14)\n    x16 =787(x15)\n    x17 = center(x2)\n    x18 = vmirror(x17)\n    x19 = normalize(x18)\n    x20 = lbind(shift, x19)\n    x21 = height(x20)\n    x22 = divide(x16, x21)\n    x23 = partition(x22)\n    x24 = color(x2)\n    x25 ='dmirror(x24)\n    x26 = astuple(x11, x12)\n    x27 = combine(x26, x25)\n    x28 = paint(x117, x27)\n    x29 = rbind(compose, initset)\n    x30 = lbind(rbind, manhattan)\n    x31 = compose(x29, x30)\n    x32 = fork(1, Nremove, x31)\n    x33 = compose(x32, toindices)\n    x34 = rbind(compose, initset)\n    x35 = lbind(rbind, manhattan)\n    x36 = compose(x34, x35)\n    x37 = fork(1, N, x36)\n    x38 = compose(size, x33)\n    x39 = compose(size, x37)\n    x40 = fork(greater, x38, x39)\n    x41 = multiply(x43, x"], [1.1, "def solve_88678a87(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, trim)\n    x12 = rbind(extract, x11)\n    x13 = chain(cmirror, minimum, x12)\n    x14 = x13(I)\n    x15 = colorfilter(x1, x4)\n    x16 = subgrid(x15, x14)\n    x17 = objects(x16, T, F, T)\n    x18 = colorfilter(x17, x4)\n    x19 = sizefilter(x18, ONE)\n    x20 = rbind(vmatching, x13)\n    x21 = rbind(hmatching, x13)\n    x22 = fork(either, x20, x21)\n    x23 = sfilter(x19, x22)\n    x24 = rbind(gravitate, x13)\n    x25 = compose(x24, initset)\n    x26 = fork(add, identity, x25)\n    x27 = fork(connect, identity, x26)\n    x28 = rbind(d511t x15)\n    x29 = compose(x28, outbox)\n    x30 = fork(combine, x27, x29)\n    x31 = mapply(x30, x23)\n    x32 = fill(x16, x4, x31)\n    x33 = compose(positive, size)\n    x34 = rbind( Mode marking, x33)\n    x35 =55(469(x34)\n    x36 =\n    x37 = compose(x35, x31)\n    x38 = argmin(x20, x36)\n    "], [1.1, "def solve_15b0d372(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = rbind(compose, last)\n    x2 = lbind(rbind, contained)\n    x3 = chain(x1, x2, decrement)\n    x4 = apply(x3, I)\n    x5 = objects(x4, T, F, F)\n    x6 = astuple(SIX, ONE)\n    x7 = canvas(ZERO, x6)\n    x8 = paint(x7, x5)\n    x9 = rot90(x8)\n    x10 = astuple(x5, x9)\n    x11 = apply(tojvec, x10)\n    x12 = apply(x3, x11)\n    x13 = height(x12)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = subtract(x15, x12)\n    x17 = increment(x16)\n    x18 = shift(x12, x17)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = astuple(x5, x9)\n    x22 = increment(x21)\n    x23 = shift(x19, x22)\n    x24 = asobject(x23)\n    x25 = x3(x24)\n    x26 = height(x25)\n    x27 = increment(x26)\n    x28 = shift(x25, x27)\n    x29 = toivec(x28)\n    x30 = shift(x29, x5)\n    x31 = palette(I)\n    x32 = intersection(x30, x31)\n    x33 = first(x32)\n    x34 = asindices(x12)\n    x35 = ofcolor(x12, x33)\n    x36 = toobject(x34, x12)\n    x37 = rbind(compose, initset)\n    x38 = lbind(rbind, manhattan)\n    x39 = chain(x37, x38, initset)\n    x40 = lbind(fork, greater)\n    x41 = fork(x40, x39,"], [1.1, "def solve_a67b81ba(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = leastcolor(x1)\n    x4 = leastcolor(x2)\n    x5 = ofcolor(I, x3)\n    x6 = center(x5)\n    x7 = ofcolor(I, x4)\n    x8 = center(x7)\n    x9 = height(I)\n    x10 = width(I)\n    x11 = hfrontier(x6)\n    x12 = fill(I, x3, x11)\n    x13 = hfrontier(x8)\n    x14 = fill(x12, x4, x13)\n    x15 = decrement(x10)\n    x16 = decrement(x9)\n    x17 = halve(x9)\n    x18 = tojvec(x15)\n    x19 = connect(ORIGIN, x18)\n    x20 = fill(x14, x3, x19)\n    x21 = toivec(x16)\n    x22 = astuple(x16, x15)\n    x23 = connect(x21, x22)\n    x24 = fill(x20, x4, x23)\n    x25 = decrement(x17)\n    x26 = toivec(x25)\n    x27 = connect(ORIGIN, x26)\n    x28 = fill(x24, x3, x27)\n    x29 = tojvec(x15)\n    x30 = decrement(x17)\n    x31 = astuple(x30, x15)\n    x32 = connect(x29, x31)\n    x33 = fill(x28, x3, x32)\n    x34 = toivec(x17)\n    x35 = toivec(x16)\n    x36 = connect(x34, x35)\n    x37 = fill(x33, x4, x36)\n    x38 = astuple(x17, x15)\n    x39 = astuple(x16, x15)\n    x40 = connect(x38, x39)\n    O = fill(x37,"], [1.1, "def solve_d7811161(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_737ec066(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, numcolors)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = canvas(x4, x5)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    x9 = height(x2)\n    x10 = width(x2)\n    x11 = height(x3)\n    x12 = width(x3)\n    x13 = normalize(x2)\n    x14 = divide(x11, x9)\n    x15 = divide(x12, x10)\n    x16 = width(x8)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = height(x8)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x28, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = color(x3)\n    x39 = ofcolor(x37, x38)\n    x40 = rbind(contained, x39)\n    x41 ="], [1.1, "def solve_f3d6b1bb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = lbind(shift, x23)\n    x40 = mapply(x39, x33)\n    x41 = combine(x38, x40)"], [1.1, "def solve_2cb32f30(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_eb243bd3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = width(I)\n    x5 = multiply(TEN, x4)\n    x6 = interval(ZERO, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(shift, x7)\n    x9 = fill(I, x3, x8)\n    x10 = add(x3, THREE)\n    x11 = height(x2)\n    x12 = decrement(x11)\n    x13 = toivec(x12)\n    x14 = width(x2)\n    x15 = subtract(x14, x12)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = shape(I)\n    x18 = multiply(x17, x4)\n    x19 = canvas(ZERO, x18)\n    x20 = fill(x19, FIVE, x18)\n    x21 = objects(x20, T, F, T)\n    x22 = apply(tojvec, x21)\n    x23 = lbind(shift, x2)\n    x24 = mapply(x23, x22)\n    x25 = fill(x20, FOUR, x24)\n    x26 = lbind(multiply, x4)\n    x27 = apply(x26, x24)\n    x28 = lbind(mapply, x13)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x26, x27, x29)\n    x31 = lbind(mapply, x15)\n    x32 = rbind(sfilter, x31)\n    x33 = compose(x31, x30)\n    x34 = chain(x rbind, x32, x33)\n    x35 = lbind(mapply, x34)\n    x36 = lbind(colorcount, x22)\n    x37 = rbind(sfilter, x36)\n    x38 = compose(x37, x35)\n    x39 = chain(x88, x"], [1.1, "def solve_7ef8cf6b(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(toindices, normalize)\n    x4 = fork(minindices, x3, normalize)\n    x5 = compose(x4, x2)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x2, x7)\n    x9 = outbox(x8)\n    x10 = subgrid(x9, I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = toindices(x12)\n    x14 = shift(x13, x6)\n    x15 = fill(I, ZERO, x14)\n    x16 = ulcorner(x8)\n    x17 = lrcorner(x8)\n    x18 = shoot(x16, NEG_UNITY)\n    x19 = shoot(x17, TEN_UNITY)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, x15)\n    x22 = mapply(x21, x20)\n    x23 = last(x22)\n    x24 = rbind(subtract, x18)\n    x25 = chain(even, x24, last)\n    x26 = sfilter(x11, x25)\n    x27 = height(x10)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = pair(x28, x26)\n    x30 = sfilter(x29, x28)\n    x31 = apply(x22, x30)\n    x32 = sfilter(x31, x25)\n    x33 = combine(x31, x32)\n    x34 = apply(x26, x33)\n    x35 = pair(x34, x26)\n    x36 = sfilter(x35, first)\n    x37 = mapply(x21, x36)\n    x38 = fill(x10, TWO, x37)\n    O"], [1.1, "def solve_5639b62e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(27, last)\n    x36 = fork( implication, x35, x34)\n    x37 = fork(14, x32, x36)\n    x38 = rbind(other, x22)\n    x39 = compose(x38, palette"], [1.1, "def solve_18531cf9(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_1ebed793(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x3, color)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(center, x6)\n    x8 = fork(subtract, identity, x7)\n    x9 = chain(x5, x8, color)\n    x10 = rbind(toobject, I)\n    x11 = chain(numcolors, x10, x9)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x7, x12)\n    x14 = extract(x2, x13)\n    x15 = extract(x2, x14)\n    x16 = ulcorner(x15)\n    x17 = sfilter(x2, x16)\n    x18 = ulcorner(x15)\n    x19 = sfilter(x2, x18)\n    x20 = llcorner(x19)\n    x21 = sfilter(x2, x20)\n    x22 = llcorner(x21)\n    x23 = merge(x12)\n    x24 = uppermost(x23)\n    x25 = chain(toivec, toivec, invert)\n    x26 = lbind(add, x25)\n    x27 = height(x12)\n    x28 = increment(x27)\n    x29 = lbind(add, x28)\n    x30 = height(x12)\n    x31 = interval(ZERO, x30, ONE)\n    x32 = lbind(subtract, x26)\n    x33 = fork(shift, identity, x32)\n    x34 = compose(x33, x29)\n    x35 = lbind(apply, toivec)\n    x36 = lbind(shift, x15)\n    x37 = combine(x35, x36)\n    x38 = lbind(compose, x34)\n    x39 = lb"], [1.1, "def solve_1350b031(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = portrait(x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = matcher(identity, ZERO)\n    x11 = x10(I)\n    x12 =fc(multiply, width)\n    x13 = chain(flip, dmirror, asindices)\n    x14 = x12(x9)\n    x15 =101151(x14)\n    x16 = shift(x11, x15)\n    x17 = mostcolor(x16)\n    x18 = fgpartition(x9)\n    x19 = contained(x18, x16)\n    x20 = shoot(ORIGIN, UNITY)\n    x21 = branch(x7, last, x20)\n    x22 = height(x5)\n    x23 = width(x5)\n    x24 = divide(x22, x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = product(x26, x22)\n    x28 = rbind(multiply, x25)\n    x29 = apply(x28, x27)\n    x30 = shift(x29, x25)\n    x31 = combine(x27, x30)\n    x32 = lbind(mapply, last)\n    x33 = rbind(sfilter, x31)\n    x34 = compose(x32, x33)\n    x35 = apply(x34, x30)\n    x36 = shift(x35, x Dom)\n    x37 = combine(x31, x36)\n    x38 = apply(x35, x37)\n    x39 = combine(x33, x38)\n    x40 = mapply(d23, x39"], [1.1, "def solve_8788da17(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = replace(x3, FIVE, ZERO)\n    x6 = replace(x5, ONE, ZERO)\n    x7 = compress(x6)\n    x8 = width(x7)\n    x9 = halve(x8)\n    x10 = upscale(x4, x9)\n    x11 = rbind(shoot, UNITY)\n    x12 = rbind(shoot, NEG_UNITY)\n    x13 = fork(combine, x11, x12)\n    x14 = rbind(branch, llcorner)\n    x15 = rbind(x14, identity)\n    x16 = rbind(branch, DOWN_LEFT)\n    x17 = rbind(x16, Internal_LEFT)\n    x18 = rbind(branch, RIGHT)\n    x19 = rbind(x18, Incmirror)\n    x20 = rbind(branch, LEFT)\n    x21 = rbind(x20, identity)\n    x22 = chain(x19, x21, x17)\n    x23 = rbind(branch, DOWN)\n    x24 = rbind(x23, UP_RIGHT)\n    x25 = compose(x24, x22)\n    x26 = rbind(contained, x5)\n    x27 = compose(x26, last)\n    x28 = rbind(branch, RIGHT)\n    x29 = rbind(x28,84)\n    x30 = chain(x27, x29, x17)\n    x31 = fork(add, x27, x30)\n    x32 = fork(add, x27, last)\n    x33 = fork(add, x27, x31)\n    x34 = fork(add, x27, x32)\n    x35 = fork(add, x27, x33)\n    x36 = fork(add, x27, x34)\n    x37 = fork(add, x27"], [1.1, "def solve_edde6765(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = rbind(shoot, NEG_UNITY)\n    x6 = fork(combine, x4, x5)\n    x7 = compose(x6, initset)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, x7, x9)\n    x11 = mapply(x10, x3)\n    x12 = paint(I, x11)\n    x13 = objects(x12, T, F, T)\n    x14 =014(x13, x2)\n    x15 = mapply(x10, x14)\n    O = paint(x12, x15)\n    return O"], [1.1, "def solve_2fad3608(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, THREE)\n    x9 = canvas(ZERO, x8)\n    x10 = astuple(ONE, FOUR)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    x13 = hconcat(x9, x12)\n    x14 = hconcat(x13, x1000)\n    x15 = vconcat(x14, x14)\n    x16 = vconcat(x15, x13)\n    x17 = rbind(O = vconcat(x16, x17)\n    x18 =\n    return O"], [1.1, "def solve_21e34dd5(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = equality(x3, ONE)\n    x5 = matchfilter(x1, x4)\n    x6 = replace(I, EIGHT, ONE)\n    x7 = lbind(combine, x5)\n    x8 = chain(x7, first, x7)\n    x9 = initset(x8)\n    x10 = rbind(manhattan, x9)\n    x11 = chain(even, x10, initset)\n    x12 = sfilter(x5, x11)\n    x13 = argmax(x12, size)\n    x14 =0001(x13)\n    x15 = toindices(x14)\n    x16 = prapply(connect, x15, x5)\n    O = fill(x16, EIGHT, x16)\n    return O"], [1.1, "def solve_3c6f0f44(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(s colorcount, TWO)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = rbind(manhattan, x5)\n    x8 = argmin(x2, x7)\n    O = move(I, x8, x6)\n    return O"], [1.1, "def solve_e785029d(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(TEN, TEN)\n    x4 = astuple(cmirror, ulcorner)\n    x5 = astuple(x3, x4)\n    x6 = astuple(LEFT, UP_RIGHT)\n    x7 = mapply(neighbors, x2)\n    x8 = mapply(neighbors, x7)\n    x9 = fill(I, ONE, x8)\n    x10 = fill(x9, RIGHT, x1)\n    x11 = fill(x10, x5, x2)\n    x12 = ofcolor(x11, TWO)\n    x13 =edits(x12)\n    x14 = insert(ZERO, x13)\n    x15 = dmirror(x14)\n    x16 = shape(x15)\n    x17 = halve(x16)\n    x18 = canvas(ZERO, x17)\n    x19 = lbind(compose, initset)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = apply(x21, x15)\n    x23 = rbind(contained, x22)\n    x24 = compose(x23, first)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(size, x25, x19)\n    x27 = apply(x26, x24)\n    x28 =807common(x27)\n    x29 = apply(x26, x28)\n    x30 = sfilter(x29, x28)\n    x31 = dmirror(x30)\n    x32 = papply(pair, x30, x31)\n    x33 = lbind(rapply, x102)\n    x34 = mapply(x33, x32)\n    x35 = mapply(x28, x34)\n    x36 = cover(x21, x35)\n    O = fill(x36, EIGHT, x36)\n    return O"], [1.1, "def solve_9421e560(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 =0100(I, TWO)\n    x2 = ofcolor(x1, ZERO)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(x1, ZERO, x10)\n    return O"], [1.1, "def solve_0e237a0a(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(siz256, FOUR)\n    x3 = compose(x2, dedupe)\n    x4 = matcher(first, ZERO)\n    x5 = compose(flip, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, dneighbors)\n    x9 = lbind(rbind, contained)\n    x10 = chain(x8, x9, toindices)\n    x11 = lbind(lbind, sfilter)\n    x12 = compose(x11, x10)\n    x13 = chain(x12, merge, x7)\n    x14 = fork(compose, x5, x13)\n    x15 = fork(compose, x12, sfilter)\n    x16 = fork(compose, x12, increment)\n    x17 = lbind(lbind, add)\n    x18 = chain(x17, x16, x15)\n    x19 = lbind(fork, maximum)\n    x20 = compose(x19, x15)\n    x21 = fork(sfilter, x14, x20)\n    x22 = compose(color, x21)\n    x23 = fork('recolor, x22, hconcat)\n    x24 = fork(remove, x23, identity)\n    x25 = compose(center, x24)\n    x26 = fork(subtract, x25, x24)\n    x27 = chain(toivec, x26, x24)\n    x28 = fork(shift, x27, x26)\n    x29 = fork(combine, x27, x28)\n    x30 = mapply(x29, x1)\n    O = fill(I, ZERO, x30)\n    return O"], [1.1, "def solve_c950e9ba(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =350(x1)\n    x3 = tophalf(x2)\n    x4 = bottomhalf(x2)\n    x5 = leastcolor(x3)\n    x6 = ofcolor(x3, x5)\n    x7 = ofcolor(x3, DOWN)\n    x8 = combine(x6, x7)\n    x9 = fill(x3, x5, x8)\n    O = replace(x9, EIGHT, x5)\n    return O"], [1.1, "def solve_63ca32cc(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, T, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = normalize(x4)\n    x7 = lbind(mapply, x6)\n    x8 = lbind(lbind, shift)\n    x9 = compose(x7, x8)\n    x10 = fork(difference, identity, x9)\n    x11 = mapply(x10, x5)\n    x12 = mostcolor(I)\n    x13 = ofcolor(I, x12)\n    x14 = shift(x13, UP)\n    x15 = combine(x12, x14)\n    x16 = lercorner(x15)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x\n    x19 = fill(I, x12, x18)\n    x20 = mapply(x19, x1)\n    O = fill(x19, x12, x20)\n    return O"], [1.1, "def solve_12c7e57d(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(compose, flip)\n    x3 = lbind(matcher, first)\n    x4 = chain(x2, x3,lbind)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(color, x5)\n    x7 = fork(recolor, x6, outbox)\n    x8 = mapply(x7, x1)\n    x9 = mapply(toindices, x1)\n    x10 = box(x9)\n    x11 = difference(x10, x9)\n    x12 = lbind(argmin, x9)\n    x13 = chain(x12, x4, x5)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = sfilter(x11, x12)\n    x17 = difference(x11, x16)\n    x18 = compose(x17, initset)\n    x19 =77(x18)\n    x20 = insert(x8, x19)\n    x21 = backdrop(x20)\n    x22 = subgrid(x21, I)\n    x23 = cover(x22, x8)\n    x24 = objects(x23, T, F, T)\n    x25 = totuple(x24)\n    x26 = apply(color, x25)\n    x27 = lbind(sfilter, x25)\n    x28 = lbind(matcher, x21)\n    x29 = chain(x27, x28, asindices)\n    x30 = mfilter(x26, x29)\n    x31 = box(x30)\n    x32 = fill(x23, x8, x31)\n    x33 = mapply(x32, x30)\n    O = paint(x32, x33)\n    return O"], [1.1, "def solve_da082710(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = objects(I, T, F, T)\n    x7 = remove(x5, x6)\n    x8 = order(x7, uppermost)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = subgrid(x9, I)\n    x12 = trim(x11)\n    x13 = objects(x12, F, T, T)\n    x14 = rbind(other, x9)\n    x15 = compose(x14, palette)\n    x16 = fork(both, x13, x15)\n    x17 = extract(x13, x16)\n    x18 = other(x13, x17)\n    x19 = color(x81)\n    x20 = lowermost(x9)\n    x21 = add(x20, SEVEN)\n    x22 = rbind(add, x21)\n    x23 =882(x22, ulcorner)\n    x24 =rbind(colorcount, x9)\n    x25 = compose(x24,15)\n    x26 = matcher(x25, x11)\n    x27 =5112(x12)\n    x28 = rbind(sfilter, x27)\n    x29 = compose(x28, vline)\n    x30 = rbind(sfilter, x26)\n    x31 = compose(x30, hline)\n    x32 = fork(recolor, x29, x31)\n    x33 = fork(combine, x29, x32)\n    x34 = mapply(x33, x11)\n    x35 = paint(x11, x34)\n    O = replace(x35, x8, x16)\n    return O"], [1.1, "def solve_05310f8c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 =Example output:\n    000000000000\n    000000000000\n    006066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000344000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    000000000000770000\n    0000000000007077000\n    0000000000000700000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [1.1, "def solve_1edd7b8d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x5, x3)\n    x7 = merge(x6)\n    x8 =02(x7)\n    x9 = fill(I, THREE, x8)\n    O = replace(x9, ONE, FIVE)\n    return O"], [1.1, "def solve_2783c87b(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = merge(x7)\n    x9 = backdrop(x8)\n    x10 = cover(I, x9)\n    x11 =178fcbf(I, x1)\n    x12 = astuple(47, I)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(SEVEN, x13)\n    x17 = lbind(multiply, x16)\n    x18 = compose(x17, x15)\n    x19 = lbind(shift, x9)\n    x20 = rbind(multiply, x13)\n    x21 = compose(x20, x18)\n    x22 = lbind(mapply, x21)\n    x23 = rbind(ofcolor, x4)\n    x24 = compose(x22, x23)\n    x25 = fork(paint, identity, x24)\n    x26 = x25(x10)\n    x27 = x25(x13)\n    x28 = x25(x urcorner)\n    x29 = fork(equality, identity, invert)\n    x30 = pair(x28, x29)\n    x31 = sfilter(x30, x29)\n    x32 = mapply(O = fill(x10, x4, x31)\n    O = fill(x32, x4, x30)\n    return O"], [1.1, "def solve_858ed889(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = trim(x3)\n    x5 = mostcolor(x4)\n    x6 =176(x4)\n    x7 = sfilter(x6, x2)\n    x8 = normalize(x7)\n    x9 = shift(x8, NEG_UNITY)\n    x10 = paint(I, x9)\n    x11 = toindices(x9)\n    x12 = lefthalf(x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x13)\n    x15 = cover(x10, x14)\n    x16 = combine(x13, x15)\n    x17 = paint(x10, x16)\n    x18 = inbox(x9)\n    x19 = rbind(shoot, x18)\n    x20 = mapply(x19, x15)\n    x21 = combine(x19, x20)\n    O = fill(x17, x5, x21)\n    return O"], [1.1, "def solve_c315940a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = DOWNscale(x3, THREE)\n    x5 = replace(x3, ZERO, ZERO)\n    x6 = ofcolor(x5, THREE)\n    x7 = dmirror(x6)\n    x8 = papply(pair, x7, x2)\n    x9 = lbind(apply, maximum)\n    x10 = apply(x9, x8)\n    x11 = cmirror(x10)\n    x12 = papply(pair, x11, x8)\n    x13 = apply(x9, x12)\n    x14 = compress(x13)\n    x15 = ulcorner(x2)\n    x16 =77711(x15)\n    x17 = numcolors(x16)\n    x18 = equality(x17, ONE)\n    x19 = branch(x18, x15, x14)\n    x20 = shift(x19, UNITY)\n    O = arg2ab2ac2200(x20, x2)\n    return O"], [1.1, "def solve_a6b6fa92(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, FIVE, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror hmirror, vmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [1.1, "def solve_40b4c932(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = difference(x1, x3)\n    x7 =backdrop(x5, x6)\n    x8 = inbox(x5)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = matcher(first, x10)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x7, x12)\n    x14 = ZERO(x13)\n    x15 = dmirror(x7)\n    x16 =24(x15)\n    x17 = color(x10)\n    x18 = fill(x17,:\n    x19 = hmirror(x16)\n    x20 =\"\"\"\n    x21 =vmmirror(x16)\n    x22 = asobject(x21)\n    x23 = combine(x18, x22)\n    x24 = fill(x19, THREE, x23)\n    O = apply(x4, x3)\n    return O"], [1.1, "def solve_ef775c19(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(branch, ONE)\n    x3 = compose(x2, toindices)\n    x4 = rbind(contained, x1)\n    x5 = compose(x4, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(vmirror, x6)\n    x8 = power(x7, TWO)\n    x9 =ich augment(x1, THREE)\n    x10 = power(x9, FOUR)\n    x11 = fork(sfilter, identity, x10)\n    x12 = compose(hmirror, x11)\n    x13 = lbind(rbind, equality)\n    x14 = rbind(compose, initset)\n    x15 = chain(x13, x14, x7)\n    x16 = lbind(compose, flip)\n    x17 = chain(x16, x17, x7)\n    x18 = lbind(matcher, last)\n    x19 = chain(x18, x17, x7)\n    x20 = fork(sfilter, x15, x19)\n    x21 = fork(sfilter, x12, x19)\n    x22 = fork(apply, x21, x20)\n    x23 = lbind(recolor, ZERO)\n    x24 = rbind(ofcolor, ONE)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(mapply, x24)\n    x27 = chain(x26, x25, x27)\n    x28 = fork(paint, identity, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x9)\n    O = replace(x30, ONE, THREE)\n    return O"], [1.1, "def solve_702798a1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(normalize, toindices)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(manhattan, x4)\n    x7 = lbind(argmax, x5)\n    x8 = chain(x7, x6, x4)\n    x9 = compose(normalize, x4)\n    x10 = fork(subtract, x8, x9)\n    x11 = power(numcolors, FOUR)\n    x12 = compose(x11, x10)\n    x13 = fork(add, x12, x11)\n    x14 = chain(toivec, invert, x13)\n    x15 = fork(apply, x14, xExample output:\n    x15 = compose(center, first)\n    x16 = fork(subtract, x15, x16)\n    x17 = fork(shift, x16, x11)\n    x18 = lbind(multiply, x11)\n    x19 = fork(multiply, x18, x17)\n    x20 = fork(shift, x19, x16)\n    x21 = mapply(x20, x5)\n    O = paint(I, x21)\n    return O"]], "1e97544e": [[0.04839317380927679, "def solve_8bb15637(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.04839317380927679, "def solve_38e7d51b(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.05978427658322649, "def solve_8770aaba(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.06287071471524411, "def solve_249855aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.06352061708463093, "def solve_bbcbaf3e(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.06352061708463093, "def solve_da03f4c8(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.06555616266185658, "def solve_2708b77c(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_68964c5d(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, identity)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_e1b62b80(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_c506a73a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.06555616266185658, "def solve_0a3bfecf(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.06555616266185658, "def solve_3edefce8(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_abd9c804(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_73c28d6e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_a4f2ccd6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = recolor(ZERO, x2)\n    x4 = normalize(x3)\n    x5 = occurrences(I, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, x1, x8)\n    return O"], [0.06555616266185658, "def solve_e530e101(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.06555616266185658, "def solve_a2e77f61(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_cba1bfb3(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    O = underfill(I, ZERO, x2)\n    return O"], [0.06555616266185658, "def solve_52643217(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_abfcfb98(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.06555616266185658, "def solve_72d75289(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.06555616266185658, "def solve_736ae065(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = remove(ZERO, x1)\n    x7 = other(x6, x5)\n    x8 = lrcorner(x4)\n    x9 = llcorner(x4)\n    x10 = urcorner(x4)\n    x11 = ulcorner(x4)\n    x12 = shoot(x8, UNITY)\n    x13 = shoot(x9, DOWN_LEFT)\n    x14 = shoot(x10, UP_RIGHT)\n    x15 = shoot(x11, NEG_UNITY)\n    x16 = combine(x12, x13)\n    x17 = combine(x14, x15)\n    x18 = combine(x16, x17)\n    O = underfill(I, x7, x18)\n    return O"], [0.06555616266185658, "def solve_61087d06(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.06555616266185658, "def solve_87ac3444(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_260c9b3e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.06756943907245792, "def solve_ed92ca72(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.06756943907245792, "def solve_d286781c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.06799748855061966, "def solve_8b2a4b8e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.06799748855061966, "def solve_e796bfc4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.06834668128402709, "def solve_893726c5(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.06836878123221325, "def solve_b5d5343f(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.06858821998557219, "def solve_e04cfbe5(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, ZERO, x5)\n    return O"], [0.06858821998557219, "def solve_f396d2ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.06858821998557219, "def solve_ea2ab6eb(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.06901666477409525, "def solve_0d970cc7(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, THREE)\n    x3 = chain(x2, maximum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06927348904207718, "def solve_1e34af34(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.06927348904207718, "def solve_01395e8f(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.06942667326811847, "def solve_aba850d0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = delta( x2)\n    x4 = cover(I, x3)\n    x5 = chain(toivec, invert, height)\n    x6 = fork(shift, identity, x5)\n    x7 = mapply(x6, x1)\n    O = paint(x4, x7)\n    return O"], [0.06959741552663885, "def solve_1ff9d4da(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_fa5ebaaa(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_b0b1ff22(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_1e2583e7(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_7246ae55(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_28fd0b9e(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0702135574591548, "def solve_a0b6775d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_556bdf39(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_b3029c8b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_5150d15e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_a5cbd457(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0747180717801148, "def solve_5cc23e94(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.07687619131110804, "def solve_bad3aa20(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = box(x2)\n    x4 = fill(I, TWO, x3)\n    x5 = subgrid(x2, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, TWO, x12)\n    x14 = ofcolor(x13, TWO)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, TWO, x16)\n    return O"], [0.07909280166991962, "def solve_c6185fba(I):\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = frontiers(x3)\n    x5 = merge(x4)\n    O = fill(x3, TWO, x5)\n    return O"], [0.07909280166991962, "def solve_c4e65abe(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.07983095093040261, "def solve_b2054840(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(extract, identity, x3)\n    x7 = compose(last, x6)\n    x8 = compose(dneighbors, x7)\n    x9 = lbind(apply, last)\n    x10 = fork(sfilter, identity, x5)\n    x11 = compose(x9, x10)\n    x12 = fork(difference, x8, x11)\n    x13 = compose(first, x12)\n    x14 = fork(subtract, x7, x13)\n    x15 = fork(shoot, x7, x14)\n    x16 = fork(recolor, leastcolor, x15)\n    x17 = mapply(x16, x1)\n    O = underpaint(I, x17)\n    return O"], [0.08283557492092357, "def solve_1d0f6a1e(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_2e0f74e3(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08377274368997174, "def solve_2a0497e4(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.08598473307451636, "def solve_1a7ba2ab(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.09009415538349093, "def solve_a1d4edb8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = leastcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = mostcolor(I)\n    x7 = other(x5, x6)\n    x8 = inbox(x2)\n    O = fill(I, x7, x8)\n    return O"], [0.09009415538349093, "def solve_a2c9dd26(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = leastcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = mostcolor(I)\n    x7 = other(x5, x6)\n    x8 = inbox(x2)\n    O = fill(I, x7, x8)\n    return O"], [0.09059200811245326, "def solve_0ee29372(I):\n    x1 = portrait(I)\n    x2 = branch(x1, dmirror, identity)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, leftmost)\n    x6 = argmax(x4, leftmost)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = leftmost(x5)\n    x10 = leftmost(x6)\n    x11 = subtract(x10, x9)\n    x12 = double(x11)\n    x13 = multiply(THREE, TEN)\n    x14 = interval(x9, x13, x12)\n    x15 = interval(x10, x13, x12)\n    x16 = compose(vfrontier, tojvec)\n    x17 = mapply(x16, x14)\n    x18 = mapply(x16, x15)\n    x19 = recolor(x7, x17)\n    x20 = recolor(x8, x18)\n    x21 = combine(x19, x20)\n    x22 = paint(x3, x21)\n    O = x2(x22)\n    return O"], [0.09320112108071621, "def solve_0a412fdd(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09720967561895832, "def solve_b221dc40(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.09720967561895832, "def solve_22349971(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.09720967561895832, "def solve_4221ee16(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.10350267054002193, "def solve_7bb37629(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.10350267054002193, "def solve_11d53f1c(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.10434388482560263, "def solve_92d9906b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.10434388482560263, "def solve_e8d99a2f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.10434388482560263, "def solve_03210c8b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.10434388482560263, "def solve_680d3054(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.10434388482560263, "def solve_629ed7e7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.10700430869603801, "def solve_b6054627(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.11204588705000114, "def solve_4c45d683(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.11343164518038894, "def solve_3f1fda17(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.11873730483078786, "def solve_ba84f74a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.12169800916884342, "def solve_a0ba31ed(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_debed0c3(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_7c6ecbaf(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_4d858d75(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12293629040546904, "def solve_0243be16(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.1239852807263826, "def solve_33f0e6cf(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.12583356972621706, "def solve_b3530346(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12583356972621706, "def solve_a6072508(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12583356972621706, "def solve_b80236c3(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12583356972621706, "def solve_20f59164(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.12638696646420425, "def solve_e927899b(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.1291415585217549, "def solve_1bcd8e7b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_63cd1bb7(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_34f07e4e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_281cd6f1(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.13134103434345124, "def solve_33d79cef(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_2f72be84(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_b2b379ef(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_4f183364(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_3d14da6e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_2b15985c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_5b1ce253(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_10c05ce8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.1314364028975242, "def solve_b155f213(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.1314364028975242, "def solve_5b95557c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.13256015955962436, "def solve_6eacca77(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.13732320260021091, "def solve_5e893968(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.1391543174866792, "def solve_19308136(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.14078858967215535, "def solve_789e4129(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, F)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.1526603709781568, "def solve_e4054833(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.15595293774320831, "def solve_ba5bbfb8(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15924388832696912, "def solve_1676435b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_d08e0920(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_66704e48(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_40d6637a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_75dcc83d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_1932d6db(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_c81935cd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.16671345632403542, "def solve_c8b9b1e5(I):\n    x1 = astuple(dmirror, cmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, cmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.16903724504454612, "def solve_aff6b3ab(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.1773065582183363, "def solve_a0d5b445(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_43e36866(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_60a4536a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_69a8d1c1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_6650c723(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_afee8831(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_cc56a049(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_d8647262(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_4d4f3896(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_0c5b0392(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.18190769514794702, "def solve_1f25bc41(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.18335650834767755, "def solve_128b51e7(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18335650834767755, "def solve_f98a746f(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18335650834767755, "def solve_691afcf6(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18967220198830603, "def solve_ff9d66df(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind(ofcolor, I)\n    x5 = lbind(prapply, connect)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, identity, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [0.1968197311802683, "def solve_0b107a38(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.1985235777246044, "def solve_3f790b36(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = colorfilter(x1, FIVE)\n    x7 = compose(flip, x5)\n    x8 = extract(x6, x7)\n    x9 = color(x8)\n    x10 = size(x1)\n    x11 = positive(x10)\n    x12 = hline(x8)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(positive, decrement, x13)\n    x15 = branch(x11, dmirror, identity)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x9)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = width(x16)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = lbind(shift, x8)\n    x30 = mapply(x29, x28)\n    O = fill(x16, x9, x30)\n    return O"], [0.21391916164730382, "def solve_c56f5408(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_82e92f82(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_eaff9554(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_fee417f2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_dcc0ce5c(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_41843ead(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_a681799d(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_7e2bf640(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_18705987(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_60a77699(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_495011f8(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_6868562f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_578b2b06(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.2143774585781502, "def solve_e5e55637(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.22112737067424568, "def solve_4525a834(I):\n    x1 = mostcolor(I)\n    x2 = rot180(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot180(x8)\n    return O"], [0.22112737067424568, "def solve_47ce842a(I):\n    x1 = mostcolor(I)\n    x2 = rot180(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot180(x8)\n    return O"], [0.2220602148198353, "def solve_05ceb0b3(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.22520147867829987, "def solve_291d2641(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.22520147867829987, "def solve_441c7373(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.22765109031506503, "def solve_809279eb(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.23012508925350347, "def solve_9d3db473(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork(add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, EIGHT, x29)\n    return O"], [0.23424985902563292, "def solve_82f5c913(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.23424985902563292, "def solve_9a16ff1d(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.2432514762983469, "def solve_61eaa75a(I):\n    x1 = objects(I, F, T, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = apply(x4, x3)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    x9 = shift(x8, UP_RIGHT)\n    x10 = shift(x8, DOWN_LEFT)\n    x11 = paint(I, x8)\n    x12 = paint(x11, x9)\n    O = paint(x12, x10)\n    return O"], [0.24643652770762223, "def solve_128c5171(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.2499819232253754, "def solve_38748727(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.262473054493595, "def solve_5785b775(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.2737085951518015, "def solve_1253c4d5(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.27482311667088305, "def solve_36e1cc66(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x1)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x1)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x1, x3)\n    O = fill(x38, x1, x37)\n    return O"], [0.2925429937616783, "def solve_ce4b5a70(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = toobject(x1, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.29664969986532563, "def solve_ed8e704f(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.29664969986532563, "def solve_79ff1e1b(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.29664969986532563, "def solve_223eb962(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.2969700117912533, "def solve_5aeaf561(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_fa2049e6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_f5c8c99b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_cd9ff6b5(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_cfeb10b9(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_0fb8d4b9(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_d940925e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_ea6cde8f(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x41 = maximum(x30)\n    O = downscale(x23, x41)\n    return O"], [0.2969700117912533, "def solve_59b1fde7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_7f0fa4cf(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_7733c76c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_3ca2ce59(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_7f1b2ae7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2969700117912533, "def solve_f3e4ce0f(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3063136421137608, "def solve_d84dc2b0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3063136421137608, "def solve_b4b5a332(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3082441023536176, "def solve_a37b3bff(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.31011174594270147, "def solve_f95f90cd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_8d388d74(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_07c48f3c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.3104501482052144, "def solve_22405ff8(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3246045429386924, "def solve_70c35953(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.33125188020762586, "def solve_80dd7276(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = box(x5)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x3, x11)\n    O = fill(x6, x1, x12)\n    return O"], [0.3314449532924934, "def solve_4d366f82(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3387087982661474, "def solve_49f551f5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.3387087982661474, "def solve_bbe1ace9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.35285797856791773, "def solve_191358e2(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3546426310625093, "def solve_69b52b44(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, TWO, x8)\n    O = replace(x9, x1, ZERO)\n    return O"], [0.3646584896584897, "def solve_2ab58814(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_184b583b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.3646584896584897, "def solve_e183f573(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.37754946271974205, "def solve_3a5e0bdf(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, dmirror)\n    x9 = astuple(cmirror, hmirror)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, vmirror)\n    x12 = astuple(cmirror, hmirror)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = x21(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [0.4170310435194296, "def solve_5a3b9668(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5087662337662338, "def solve_9f3244b7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.5455548516524127, "def solve_265115c9(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5586554186554187, "def solve_64453492(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_aff02d14(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, TWO)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, TWO)\n    x7 = both(x3, x6)\n    x8 = lefthalf(I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, TWO)\n    x11 = righthalf(I)\n    x12 = numcolors(x11)\n    x13 = equality(x12, TWO)\n    x14 = both(x10, x13)\n    x15 = flip(x14)\n    x16 = both(x7, x15)\n    x17 = branch(x16, vsplit, hsplit)\n    x18 = x17(I, TWO)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = palette(x19)\n    x22 = palette(x20)\n    x23 = intersection(x21, x22)\n    x24 = first(x23)\n    x25 = shape(x19)\n    x26 = canvas(x24, x25)\n    x27 = ofcolor(x19, x24)\n    x28 = ofcolor(x20, x24)\n    x29 = intersection(x27, x28)\n    O = fill(x26, TWO, x29)\n    return O"], [0.6185357460219338, "def solve_d1e4f988(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_3dfcacf7(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_149de242(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_f8ebc175(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.7047029674817701, "def solve_ffdab84e(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.8704545454545455, "def solve_1ec586b6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_d950cd0f(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = fgpartition(I)\n    x6 = objects(I, T, F, T)\n    x7 = rbind(colorcount, TWO)\n    x8 = argmax(x5, x7)\n    x9 = subgrid(x8, I)\n    x10 = numcolors(x9)\n    x11 = equality(x10, TWO)\n    x12 = mfilter(x6, x11)\n    x13 = replace(x9, TWO, x12)\n    x14 = vmirror(x13)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x4)\n    x17 = TWO(x16, x12)\n    x18 = subgrid(x17, x7)\n    x19 = hmirror(x18)\n    x20 = replace(x19, TWO, x4)\n    x21 = vmirror(x20)\n    x22 = asobject(x21)\n    x23 = occurrences(x22, x16)\n    x24 = mapply(toindices, x23)\n    O = fill(x20, x4, x24)\n    return O"], [1.0, "def solve_167338b1(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = lefthalf(x2)\n    x4 = righthalf(x2)\n    x5 = index(I, ORIGIN)\n    x6 = width(I)\n    x7 = righthalf(I)\n    x8 = palette(x3)\n    x9 = palette(x4)\n    x10 = intersection(x8, x9)\n    x11 =count(x3, x10)\n    x12 = width(x3)\n    x13 = righthalf(x3)\n    x14 = righthalf(x4)\n    x15 = intersection(x13, x14)\n    x16 = intersection(x15, x12)\n    x17 = first(x16)\n    x18 = shape(x3)\n    x19 = canvas(x15, x18)\n    x20 = matcher(first, x17)\n    x21 = compose(flip, x20)\n    x22 = rbind(sfilter, x21)\n    x23 = compose(x22, asobject)\n    x24 = x23(x2)\n    x25 = lbind(shift, x24)\n    x26 = compose(x25, asobject)\n    x27 = apply(x26, x20)\n    x28 = paint(x19, x27)\n    x29 = matcher(first, x17)\n    x30 = compose(flip, x29)\n    x31 = rbind(sfilter, x30)\n    x32 = compose(x31, asobject)\n    x33 = x32(x2)\n    x34 = fork(recolor, x33, x32)\n    x35 = mapply(x34, x28)\n    O = paint(x16, x35)\n    return O"], [1.0, "def solve_345d7b09(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_10bd175d(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_0a73f896(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(flip, x3)\n    x5 = fork(both, vline, hline)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = apply(center, x7)\n    x9 = astuple(x8, x6)\n    x10 = shift(x9, UNITY)\n    x11 = paint(I, x10)\n    x12 = toindices(x10)\n    x13 = compose(flip, even)\n    x14 = rbind(sfilter, x13)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind(recolor, ZERO)\n    x17 = compose(x16, x15)\n    x18 = fork(combine, x17, x14)\n    x19 = chain(x15, x18, normalize)\n    x20 = apply(x19, x4)\n    x21 = mapply(toindices, x20)\n    x22 = chain(flip, x19, shape)\n    x23 = flip(x22)\n    x24 = sfilter(x21, x23)\n    x25 = objects(x11, T, F, F)\n    x26 = merge(x25)\n    x27 = paint(x11, x26)\n    x28 = interval(ZERO, x2, ONE)\n    x29 = rbind(multiply, x28)\n    x30 = apply(x29, x28)\n    x31 = rbind(shift, x30)\n    x32 = mapply(x31, x12)\n    O = paint(x27, x32)\n    return O"], [1.0, "def solve_0065daa8(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_31327b68(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_1c0e7ce6(I):\n    x1 = fgpartition(I)\n    x2 = mostcolor(I)\n    x3 = tophalf(I)\n    x4 = lefthalf(x3)\n    x5 = tophalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = righthalf(x7)\n    x9 = bottomhalf(I)\n    x10 = lefthalf(x9)\n    x11 = palette(x4)\n    x12 = palette(x8)\n    x13 = intersection(x11, x12)\n    x14 = intersection(x13, x2)\n    x15 = first(x14)\n    x16 = shape(x4)\n    x17 = canvas(x15, x16)\n    x18 = normalize(x4)\n    x19 = matcher(first, x18)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x8)\n    x25 = x22(x4)\n    x26 = x22(x5)\n    x27 = paint(x17, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [1.0, "def solve_10be43ef(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_25a7409c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = arg786(I)\n    x4 = argmax(x1, x2)\n    x5 = remove(x4, x1)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = power(dneighbors, attempted)\n    x11 = turnsindices(x6)\n    x12 = sfilter(x11, x10)\n    x13 = lbind(colorfilter, x8)\n    x14 = chain(first, x13, dneighbors)\n    x15 = fork(difference, x14, outbox)\n    x16 = fork(recolor, x15, outbox)\n    x17 = mapply(x16, x12)\n    x18 = astuple(SIX, SIX)\n    x19 = canvas(x7, x18)\n    O = paint(x19, x17)\n    return O"], [1.0, "def solve_79070b20(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_583a9316(I):\n    x1 = fork(multiply, height, width)\n    x2 = partition(I)\n    x3 = argmax(x2, x1)\n    x4 = remove(x3, x2)\n    x5 = argmax(x4, x1)\n    x6 = other(x4, x5)\n    x7 = palette(I)\n    x8 = lrcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = llcorner(x5)\n    x11 = add(x10, DOWN_LEFT)\n    x12 = urcorner(x55)\n    x13 = add(x12, UP_RIGHT)\n    x14 = ulcorner(x5)\n    x15 = add(x14, NEG_UNITY)\n    x16 = shoot(x9, UNITY)\n    x17 = shoot(x11, DOWN_LEFT)\n    x18 = shoot(x13, UP_RIGHT)\n    x19 = shoot(x15, NEG_UNITY)\n    x20 = combine(x16, x17)\n    x21 = combine(x18, x19)\n    x22 = combine(x20, x21)\n    x23 = color(x6)\n    O = fill(I, x23, x22)\n    return O"], [1.0, "def solve_f55f4a0a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x2, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [1.0, "def solve_3b6bcb8e(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = compose(x6, x7)\n    x10 =x9(x7)\n    x11 = lbind(contained, x7)\n    x12 = compose(x11, x10)\n    x13 = argmin(x5, x12)\n    x14 = Desill75(x13)\n    x15 = branch(x6, x17, x14)\n    x16 = branch(x6, RIGHT, DOWN)\n    x17 = delta(x13)\n    x18 = center(x17)\n    x19 = initset(x18)\n    x20 = objects(I, T, F, F)\n    x21 = insert(x20, x20)\n    x22 = lbind(add, x16)\n    x23 = compose(x22, ulcorner)\n    x24 = argmin(x21, x23)\n    x25 = color(x4)\n    x26 = flip(x25)\n    x27 = branch(x6, x19, x20)\n    x28 = astuple(x26, x27)\n    x29 = connect(x24, x28)\n    x30 = branch(x6, x21, x20)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x29)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_a191f2bd(I):\n    x1 = lbind(equality, I)\n    x2 = lbind(multiply, THREE)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(multiply, leaves)\n    x6 = compose(x4, x5)\n    x7 = fork(multiply, identity, x6)\n    x8 = compose(identity, x7)\n    x9 = fork(both, x4, x8)\n    x10 = sfilter(x1, x9)\n    x11 = difference(x1, x10)\n    x12 = merge(x11)\n    x13 = fill(I, TWO, x12)\n    x14 = merge(x10)\n    x15 = fill(x13, ONE, x14)\n    x16 = merge(x13)\n    x17 = fill(x15, SIX, x16)\n    O = merge(x17)\n    return O"], [1.0, "def solve_b69296af(I):\n    x1 = leastcolor(I)\n    x2 =decrement(TEN)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = box(x4)\n    x6 = remove(x2, x4)\n    x7 = lbind(argmin, x6)\n    x8 = lbind(rbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x5)\n    x12 = merge(x11)\n    x13 = cover(I, x12)\n    O = paint(x13, x3)\n    return O"], [1.0, "def solve_c8370d73(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_cda5c8fe(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_8c5f9e44(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_ccf3be69(I):\n    x1 = solve(I, T, F, T)\n    x2 = flip(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = matcher(color, FIVE)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = ofcolor(x4, FIVE)\n    x10 = leftmost(x9)\n    x11 = leftmost(x8)\n    x12 = greater(x10, x11)\n    x13 = manhattan(x8, x9)\n    x14 = decrement(x13)\n    x15 = branch(x12, identity, invert)\n    x16 = branch(x12, decrement, increment)\n    x17 = branch(x12, leftmost, rightmost)\n    x18 = x15(x14)\n    x19 = tojvec(x18)\n    x20 = shift(x8, x19)\n    x21 = x17(x20)\n    x22 = x16(x21)\n    x23 = tojvec(x22)\n    x24 = vfrontier(x23)\n    x25 = cover(x4, x8)\n    x26 = paint(x25, x20)\n    x27 = fill(x26, EIGHT, x24)\n    O = x3(x27)\n    return O"], [1.0, "def solve_7006043c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_c5837928(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_a11fd0a1(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_af8aaaec(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = divide(x4, x5)\n    x7 = astuple(x6, ONE)\n    x8 = crop(x3, ORIGIN, x7)\n    x9 = hupscale(x8, x6)\n    O = vconcat(x9, x8)\n    return O"], [1.0, "def solve_9af2f68f(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [1.0, "def solve_6cf4f437(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_1379857c(I):\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = compose(x9, initset)\n    x11 = lbind(fork, greater)\n    x12 = lbind(sfilter, x1)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, initset)\n    x15 = lbind(rbind, manhattan)\n    x16 = chain(x14, x15, x7)\n    x17 = fork(argmax, x11, x16)\n    x18 = compose(x3, x7)\n    x19 = fork(both, x18, x17)\n    x20 = rbind(astuple, x19)\n    x21 = compose(x20, last)\n    x22 = fork(connect, first, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_52a37e19(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = tophalf(I)\n    x5 = lefthalf(x4)\n    x6 = tophalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = lefthalf(x8)\n    x10 = bottomhalf(I)\n    x11 = righthalf(x9)\n    x12 = palette(x7)\n    x13 = palette(x10)\n    x14 = difference(x12, x13)\n    x15 = intersection(x12, x14)\n    x16 = other(x15, x3)\n    x17 = palette(x10)\n    x18 = other(x17, x6)\n    x19 = ofcolor(x4, x16)\n    x20 = ofcolor(x4, x18)\n    x21 = combine(x19, x20)\n    x22 = intersection(x19, x21)\n    x23 = difference(x21, x22)\n    x24 = first(x23)\n    x25 = shape(x4)\n    x26 = canvas(x36, x25)\n    x27 = ofcolor(x4, x16)\n    x28 = ofcolor(x4, x18)\n    x29 = intersection(x27, x28)\n    O = fill(x26, THREE, x29)\n    return O"], [1.0, "def solve_d512bacf(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_838a3c5c(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_80bd342d(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_78f516e2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_f2e97010(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = asindices(I)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = occurrences(I, x5)\n    x7 = toindices(x5)\n    x8 = rbind(intersection, x7)\n    x9 = chain(size, x8, initset)\n    x10 = argmax(x6, x9)\n    x11 = occurrences(I, x10)\n    x12 = normalize(x10)\n    x13 = lbind(shift, x12)\n    x14 = mapply(x13, x11)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_7d9972a5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_11fb80b4(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x16 = difference(x12, x13)\n    x17 = astuple(x14, x16)\n    x18 = apply(size, x17)\n    x19 = increment(x18)\n    O = canvas(x4, x19)\n    return O"], [1.0, "def solve_fb483e97(I):\n    x1 = lbind(mirror, I)\n    x2 = compose(dmirror, x1)\n    x3 = power(x2, TWO)\n    x4 = width(I)\n    x5 = rbind(ofcolor, ZERO)\n    x6 = chain(x5, first, x5)\n    x7 = objects(I, T, F, F)\n    x8 = merge(x7)\n    x9 = x6(x8)\n    O = canvas(ZERO, x4)\n    return O"], [1.0, "def solve_dfe44dba(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d268310(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flve, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, F9)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_e4239974(I):\n    x1 = mostcolor(I)\n    x2 = lefthalf(I)\n    x3 = righthalf(I)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    x6 = palette(x5)\n    x7 = other(x6, x1)\n    x8 = ofcolor(x3, x7)\n    x9 = asindices(x3)\n    x10 = ofcolor(x3, x7)\n    x11 = mapply(toindices, x10)\n    x12 = mapply(toindices, x10)\n    x13 = shape(x3)\n    x14 = canvas(x1, x13)\n    x15 = ofcolor(x3, x7)\n    x16 = intersection(x15, x13)\n    O = fill(x14, power, x16)\n    return O"], [1.0, "def solve_24f4c519(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_be1d73c7(I):\n    x1 = rbind(greater, THREE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(toindices, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_5341727d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = asindices(I)\n    x27 = canvas(x5, x21)\n    x28 = asindices(I)\n    x29 = box(x28)\n    x30 = fill(x27, x4, x29)\n    x31 = lbind(adjacent, x13)\n    x32 = compose(x31, initset)\n    x33 = cover(x30, x32)\n    x34 = ofcolor(x33, x12)\n    x35 = fork(multiply, first, last)\n    x36 = apply(x35, x34)\n    x37 = product(x36, x36)\n    x38 = sfilter(x37, x12)\n    x39 = difference(x37, x38)\n    O = fill(x37, x4, x39)\n    return O"], [1.0, "def solve_0bd9d8e8(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(lowermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = lbind(compose, x4)\n    x7 = compose(initset, x6)\n    x8 = chain(first, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_6aac825d(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = x4(x1)\n    x6 = normalize(x5)\n    x7 = toindices(x6)\n    x8 = shoot(UNITY, x7)\n    x9 = fill(I, x4, x8)\n    x10 = shift(x6, x9)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x3)\n    O = fill(x9, x4, x12)\n    return O"], [1.0, "def solve_36bf12ad(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, x1, x4)\n    x6 = matcher(first, x1)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = difference(x3, x8)\n    x10 = colorfilter(x9, x1)\n    x11 = compose(hfrontier, center)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x10)\n    x14 = paint(x5, x13)\n    x15 = decrement(x1)\n    x16 = toindices(x15)\n    x17 = box(x16)\n    x18 = difference(x17, x16)\n    O = fill(x14, FOUR, x18)\n    return O"], [1.0, "def solve_223b5d98(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_8fe04111(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_fbfd2078(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_92ac5f28(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x29, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [1.0, "def solve_f1a2e4b0(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x4)\n    x7 = fill(I, x1, x6)\n    x8 = intersection(x5, x4)\n    O = fill(x7, ZERO, x8)\n    return O"], [1.0, "def solve_7d27c881(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7548d21c(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, x4, x9)\n    x11 = compose(flip, x5)\n    x12 = mfilter(x8, x11)\n    O = fill(x10, x4, x12)\n    return O"], [1.0, "def solve_a5aa408b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = other(x5, x1)\n    x7 = ofcolor(I, x6)\n    x8 = ofcolor(I, x1)\n    x9 = center(x7)\n    x10 = center(x8)\n    x11 = hfrontier(x9)\n    x12 = vfrontier(x10)\n    x13 = toivec(x12)\n    x14 = tojvec(x9)\n    x15 = shift(x11, x14)\n    x16 = mapply(x2, x15)\n    x17 = fill(I, x6, x16)\n    x18 = vmirror(x17)\n    x19 = hmirror(x18)\n    O = vmirror(x19)\n    return O"], [1.0, "def solve_14306a4d(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_eba90bbe(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmax(x4, x5)\n    x7 = color(x6)\n    x8 = leastcolor(I)\n    x9 = inbox(x6)\n    x10 = backdrop(x9)\n    x11 = inbox(x6)\n    x12 = recolor(x8, x11)\n    x13 = frontiers(x12)\n    x14 = dmirror(x6)\n    x15 = input(x14, x13)\n    x16 = ofcolor(x15, x7)\n    x17 = initset(x65)\n    x18 = insert(x7, x17)\n    x19 = backdrop(x18)\n    x20 = subgrid(x19, I)\n    x21 = fgpartition(x20)\n    x22 = merge(x21)\n    x23 = corners(x7)\n    x24 = backdrop(x23)\n    x25 = intersection(x19, x23)\n    x26 = inbox(x25)\n    x27 = color(x26)\n    x28 = initset(x27)\n    x29 = insert(x63, x28)\n    x30 = insert(x77, x29)\n    x31 = apply(x15, x30)\n    x32 = mapply(x17, x31)\n    O = fill(x20, x7, x32)\n    return O"], [1.0, "def solve_38491fde(I):\n    x1 = asindices(I)\n    x2 = fork(product, identity, identity)\n    x3 = lbind(canvas, ZERO)\n    x4 = compose(asobject, x3)\n    x5 = fork(multiply, first, last)\n    x6 = compose(positive, size)\n    x7 = lbind(lbind, shift)\n    x8 = rbind(fork, x5)\n    x9 = lbind(x8, multiply)\n    x10 = lbind(chain, x6)\n    x11 = rbind(x10, x4)\n    x12 = lbind(lbind, occurrences)\n    x13 = chain(x9, x11, x12)\n    x14 = compose(x2, first)\n    x15 = compose(positive, size)\n    x16 = lbind(lbind,sfilter)\n    x17 = fork(matcher, x14, x15)\n    x18 = compose(x16, x17)\n    x19 = rbind(compose, last)\n    x20 = lbind(lbind, contained)\n    x21 = compose(x20, last)\n    x22 = lbind(rbind, chain)\n    x23 = chain(x19, x22, x12)\n    x24 = lbind(lbind, sfilter)\n    x25 = chain(x24, x23, x12)\n    x26 = lbind(fork, x5)\n    x27 = fork(x26, identity, x28)\n    x28 = compose(x27, last)\n    x29 = chain(x6, x25, x28)\n    x30 = fork(mapply, x29, x21)\n    x31 = fork(paint, identity, x30)\n    x32 = compose(rot90, x31)\n    x33 = power(x32, FOUR)\n    O = x33(I)\n    return O"], [1.0, "def solve_d5c1f8b2(I):\n    x1 = palette(I)\n    x2 = compose(maximum, shape)\n    x3 = lbind(apply, x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = chain(maximum, x3, x4)\n    x6 = matcher(x5, ONE)\n    x7 = objects(I, T, F, T)\n    x8 = compose(flip, x6)\n    x9 = sfilter(x7, x8)\n    x10 = fork(equality, toindices, box)\n    x11 = sfilter(x9, x10)\n    x12 = lbind(index, I)\n    x13 = compose(x12, lrcorner)\n    x14 = fork(equality, x13, ulcorner)\n    x15 = sfilter(x11, x14)\n    x16 = lbind(colorfilter, x1)\n    x17 = compose(x16, llcorner)\n    x18 = fork(both, x17, urcorner)\n    x19 = fork(both, x14, LEFT)\n    x20 = fork(both, x12, row_BY_TWO)\n    x21 = fork(both, x11, x20)\n    x22 = fork(both, x18, x21)\n    x23 = pair(x15, x666)\n    x24 = fork(add, first, last)\n    x25 = fork(insert, x24, first)\n    x26 = compose(backdrop, x25)\n    x27 = mapply(x26, x23)\n    O = fill(I, THREE, x27)\n    return O"], [1.0, "def solve_9f029285(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_12a51789(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = valmax(x1, width)\n    x4 = matcher(width, x3)\n    x5 = sfilter(x1, x4)\n    x6 = mapply(dneighbors, x5)\n    x7 = insert(x6, x1)\n    O = fill(I, x2, x7)\n    return O"], [1.0, "def solve_abf5b0c0(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_f0ccda68(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(x22, x30, x23)\n    x32 = mapply(x31, x5)\n    O = fill(I, x25, x32)\n    return O"], [1.0, "def solve_1def379b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_b5b982a5(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = matcher(x3, FOUR)\n    x9 = rbind(multiply, THREE)\n    x10 = rbind(divide, THREE)\n    x11 = compose(x9, x10)\n    x12 = fork(equality, toindices, x11)\n    x13 = fork(both, x7, x12)\n    x14 = fork(both, x11, x13)\n    x15 = extract(x1, x14)\n    x16 = toindices(x15)\n    x17 = box(x16)\n    x18 = center(x15)\n    x19 = contained(ZERO, x1)\n    x20 = outbox(x15)\n    x21 = center(x20)\n    x22 = initset(x21)\n    x23 = difference(x22, x8)\n    x24 = apply(initset, x23)\n    x25 = color(x15)\n    x26 = cover(I, x25)\n    x27 = shift(x19, UNITY)\n    x28 = paint(x26, x27)\n    x29 = ulcorner(x15)\n    x30 = urcorner(x15)\n    x31 = shoot(x29, NEG_UNITY)\n    x32 = shoot(x31, UP_RIGHT)\n    x33 = combine(x28, x32)\n    O = underfill(x22, x35, x33)\n    return O"], [1.0, "def solve_d51225d4(I):\n    x1 =asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_c5485852(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_71522c72(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b5fb8ef2(I):\n    x1 = trim(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = ofcolor(I, x2)\n    x5 = shift(x4, UNITY)\n    x6 = ofcolor(I, x2)\n    x7 = mapply(x6, x5)\n    x8 = mapply(x5, x7)\n    x9 = fill(I, x2, x8)\n    O = fill(x9, x3, x5)\n    return O"], [1.0, "def solve_a7755272(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(multiply, x1)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(I)\n    x6 = ofcolor(I, x5)\n    x7 = backdrop(x6)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x4)\n    O = fill(I, x5, x9)\n    return O"], [1.0, "def solve_2ea017f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_39374cbc(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, normalize)\n    x3 = compose(x2, toindices)\n    x4 = fork(sfilter, toindices, x3)\n    x5 = compose(size, x4)\n    x6 = lbind(matcher, x5)\n    x7 = compose(x6, toindices)\n    x8 = fork(intersection, toindices, x7)\n    x9 = chain(size, x8, toindices)\n    x10 = matcher(x9, ZERO)\n    x11 = fork(both, x3, x10)\n    x12 = sfilter(x1, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = paint(I, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = compose(toindices, normalize)\n    x18 = sfilter(x16, x17)\n    x19 = lbind(colorcount, x14)\n    x20 = argmin(x18, x19)\n    x21 = rightmost(x14)\n    x22 = objects(x41, T, F, T)\n    x23 = colorfilter(x22, x20)\n    x24 = difference(x22, x23)\n    x25 = argmax(x24, size)\n    x26 = color(x25)\n    x27 = rbind(contained, x26)\n    x28 = compose(x27, first)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(normalize, x29, vindices)\n    x31 = fork(shift, x30, x28)\n    x32 = mapply(x31, x29)\n    O = paint(x15, x32)\n    return O"], [1.0, "def solve_ef4c7bc3(I):\n    x1 = trim(I)\n    x2 = interval(cmirror, dmirror, ONE)\n    x3 = connect(ORIGIN, UNITY)\n    x4 = connect(ORIGIN, cmirror)\n    x5 = combine(x3, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = connect(x5, x6)\n    x8 = compose(double, halve)\n    x9 = fork(equality, identity, x8)\n    x10 = compose(x9, vmirror)\n    x11 = extract(x5, x10)\n    x12 = x11(I)\n    x13 = ofcolor(x12, FIVE)\n    x14 = fill(x12, ZERO, x13)\n    x15 = difference(x1, x13)\n    x16 = lbind(fork, intersection)\n    x17 = lbind(x16, identity)\n    x18 = lbind(matcher, first)\n    x19 = compose(x17, x18)\n    x20 = lbind(paint, x14)\n    x21 = compose(x20, x19)\n    x22 = fork(compose, x21, x19)\n    x23 = lbind(lbind, shift)\n    x24 = compose(x23, x12)\n    x25 = fork(mapply, x24, x29)\n    x26 = compose(x15, x25)\n    x27 = fork(mapply, x26, x22)\n    x28 = fork(combine, x27, x25)\n    x29 = compose(maximum, x28)\n    x30 = compose(x29, asobject)\n    x31 = power(x30,execpaint)\n    x32 = x31(x16)\n    x33 = x31(x12)\n    x34 = asindices(x33)\n    x35 = shift(x34, UNITY)\n    x36 = paint(x12, x35)\n    O = x11(x36)\n    return O"], [1.0, "def solve_6b82f7f5(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = normalize(x1)\n    x4 = lbind(shift, x3)\n    x5 = compose(x4, shape)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, center)\n    x8 = mapply(x7, x2)\n    x9 = underfill(I, x2, x8)\n    x10 = objects(x9, T, F, T)\n    x11 = apply(x4, x10)\n    x12 = difference(x1, x11)\n    O = x9(x12)\n    return O"], [1.0, "def solve_d262584c(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6acecc04(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = lbind(canvas, x4)\n    x9 = compose(x8, shape)\n    x10 = fork(hconcat, identity, x9)\n    x11 = compose(x7, x10)\n    x12 = lbind(apply, uppermost)\n    x13 = chain(maximum, x12, x11)\n    x14 = matcher(x13, ZERO)\n    x15 = astuple(identity, dmirror)\n    x16 = astuple(cmirror, hmirror)\n    x17 = combine(x15, x16)\n    x18 = rbind(rapply, I)\n    x19 = chain(first, x18, initset)\n    x20 = compose(x14, x19)\n    x21 = extract(x17, x20)\n    x22 = x21(I)\n    x23 = shape(x22)\n    x24 = canvas(x4, x23)\n    x25 = hconcat(x22, x24)\n    x26 = objects(x25, T, F, T)\n    x27 = compose(toivec, height)\n    x28 = fork(shift, identity, x27)\n    x29 = mapply(x28, x26)\n    x30 = mostcolor(I)\n    x31 = merge(x26)\n    x32 = fill(x22, x30, x31)\n    x33 = paint(x32, x29)\n    O = x21(x33)\n    return O"], [1.0, "def solve_9d4ea1fc(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_cd5f0753(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = other(x15, x17)\n    x19 = color(x18)\n    x20 = astuple(x19, RIGHT)\n    x21 = initset(ZERO_BY_TWO)\n    x22 = insert(ORIGIN, x21)\n    x23 = recolor(x4, x22)\n    x24 = insert(x20, x23)\n    x25 = dmirror(x24)\n    x26 = lbind(shift, x24)\n    x27 = occurrences(x10, x24)\n    x28 = mapply(x26, x27)\n    x29 = lbind(shift, x25)\n    x30 = occurrences(x10, x25)\n    x31 = mapply(x29, x30)\n    x32 = combine(x28, x31)\n    x33 = fill(x10, x4, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = gravitate(x34, x17)\n    x36 = replace(x10, x19, x4)\n    x37 = shift(x34, x35)\n    x38 = fill(x36, x19, x37)\n    O = trim(x38)\n    return O"], [1.0, "def solve_a492766b(I):\n    x1 = mostcolor(I)\n    x2 = rot90(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(dmirror, merge)\n    x6 = apply(x5, x2)\n    x7 = order(x6, identity)\n    x8 = apply(x7, x7)\n    x9 = last(x8)\n    x10 = lbind(matcher, last)\n    x11 = sfilter(x8, x10)\n    x12 = fill(I, x1, x11)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(maximum, x13, first)\n    x15 = asobject(x14)\n    x16 = last(x14)\n    x17 = lbind(shift, x16)\n    x18 = compose(even, last)\n    x19 = mfilter(x17, x18)\n    O = paint(x12, x19)\n    return O"], [1.0, "def solve_868b76b0(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = compose(maximum, shape)\n    x4 = argmin(x2, x3)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = other(x6, x5)\n    x8 = subgrid(x4, I)\n    x9 = colorfilter(x2, x8)\n    x10 = argmin(x9, x4)\n    x11 = width(x8)\n    x12 = divide(x11, x11)\n    x13 = increment(x12)\n    x14 = width(x8)\n    x15 = divide(x14, x10)\n    x16 = increment(x15)\n    x17 = width(x8)\n    x18 = divide(x17, x10)\n    x19 = increment(x18)\n    x20 = invert(x13)\n    x21 = ulcorner(x4)\n    x22 = double(x14)\n    x23 = increment(x22)\n    x24 = invert(x23)\n    x25 = increment(x20)\n    x26 = astuple(x26, x25)\n    x27 = add(x27, x39)\n    x28 = tojvec(x27)\n    x29 = asobject(I)\n    x30 = shift(x29, x28)\n    x31 = lbind(shift, x30)\n    x32 = double(x17)\n    x33 = increment(x32)\n    x34 = interval(x33, x305, ONE)\n    x35 = mapply(x31, x34)\n    x36 = mapply(x31, x35)\n    x37 = paint(x8, x36)\n    x38 = combine(x3, x23)\n    x39 = paint(x37, x38)\n    O = vmirror(x39)\n    return O"], [1.0, "def solve_d17465db(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_a028f46b(I):\n    x1 = mostcolor(I)\n    x2 = apply(first, I)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = toobject(x5, I)\n    return O"], [1.0, "def solve_89e1066b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_6fe75e52(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_3af38596(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(NEG_ONE, vmirror)\n    x3 = papply(astuple, x1, x2)\n    x4 = apply(x3, x3)\n    x5 = rbind(shoot, DOWN)\n    x6 = mapply(x5, x4)\n    x7 = fill(I, ONE, x6)\n    x8 = add(TEN, DOWN)\n    x9 = chain(x8, initset, last)\n    x10 = fork(rapply, x9, identity)\n    x11 = compose(first, x10)\n    x12 = compose(NEG_ONE, last)\n    x13 = fork(shift, x11, x12)\n    x14 = fork(combine, x13, x13)\n    x15 = compose(x14, x10)\n    x16 = mapply(x15, x1)\n    x17 = paint(x7, x16)\n    x18 = intersection(x7, x16)\n    O = fill(x17, ZERO, x18)\n    return O"], [1.0, "def solve_e6c202d9(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, T, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_1cc79a06(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = DOWNscale(x2, ONE)\n    x5 = lbind(power, outbox)\n    x6 = chain(x5, halve, x4)\n    x7 = initset(x2)\n    x8 = dmirror(x7)\n    x9 = lbind(rapply, manhattan)\n    x10 = compose(x9, initset)\n    x11 = chain(first, x9, x10)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_2c849766(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = extract(x2, x6)\n    O = subgrid(x7, I)\n    return O"], [1.0, "def solve_ad0a5a89(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_0ea8d49b(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = palette(I)\n    x4 = minimum(x3)\n    x5 = normalize(x1)\n    x6 = lbind(colorcount, I)\n    x7 = argmin(x4, x6)\n    x8 = mostcolor(I)\n    x9 = shape(x1)\n    x10 = canvas(x8, x9)\n    x11 = paint(x10, x5)\n    x12 = normalize(x11)\n    x13 = lbind(ofcolor, I)\n    x14 = mapply(x13, x12)\n    x15 = paint(x11, x14)\n    O = toindices(x12)\n    return O"], [1.0, "def solve_f47daee9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = fork(equality, toindices, corners)\n    x4 = fork(multiply, height, width)\n    x5 = sfilter(x1, x3)\n    x6 = argmax(x5, x4)\n    x7 = difference(x2, x6)\n    x8 = mostcolor(I)\n    x9 = fill(I, x8, x7)\n    x10 = normalize(x7)\n    x11 = ulcorner(x6)\n    x12 = increment(x11)\n    x13 = shift(x10, x12)\n    O = paint(x9, x13)\n    return O"], [1.0, "def solve_f4ac950d(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(compose, flip)\n    x5 = lbind(matcher, first)\n    x6 = chain(x3, x4, x5)\n    x7 = rbind(compose, asobject)\n    x8 = lbind(compose, numcolors)\n    x9 = chain(x7, x8, x6)\n    x10 = rbind(shift, THREE)\n    x11 = compose(x10, x9)\n    x12 = fork(both, x7, x11)\n    x13 = fork(contained, sfilter, x12)\n    x14 = compose(normalize, x13)\n    x15 = fork(shift, x14, x9)\n    x16 = fork(difference, toindices, x15)\n    x17 = rbind(shoot, UNITY)\n    x18 = compose(x17, x16)\n    x19 = fork(combine, x18, x15)\n    x20 = mapply(x19, x1)\n    x21 = paint(I, x20)\n    O = subgrid(x2, x21)\n    return O"], [1.0, "def solve_6a1ad546(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = center(x2)\n    x4 = ulcorner(x2)\n    x5 = subtract(x3, x4)\n    x6 = multiply(NEG_TWO, NEG_ONE)\n    x7 = shift(x5, x6)\n    x8 = multiply(NEG_TWO, FOUR)\n    x9 = shift(x7, x8)\n    x10 = multiply(x5, LEFT)\n    x11 = shift(x9, x10)\n    x12 = lbind(shift, x7)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = compose(x12, x13)\n    x15 = fork(combine, x14, outbox)\n    x16 = mapply(x15, x11)\n    O = fill(I, x1, x16)\n    return O"], [1.0, "def solve_c1a29cca(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = color(x2)\n    return O"], [1.0, "def solve_6e824e34(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, T)\n    x10 = rbind(x9, F)\n    x11 = rbind(x10, T)\n    x12 = rbind(colorcount, ONE)\n    x13 = rbind(x12, urcorner)\n    x14 = chain(x13, x11, x8)\n    x15 = chain(x14, x7, x9)\n    x16 = apply(x15, x5)\n    x17 = subgrid(x16, I)\n    O = compress(x17)\n    return O"], [1.0, "def solve_8be9e7b0(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_428e9937(I):\n    x1 = mostcolor(I)\n    x2 = lbind(remove, x1)\n    x3 = chain(positive, size, x2)\n    x4 = compose(x3, palette)\n    x5 = multiply(FIVE, UNITY)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(x1)\n    x12 = box(x7)\n    x13 = fill(x6, x1, x12)\n    x14 = combine(x10, x13)\n    x15 = product(x14, x14)\n    x16 = difference(x15, x7)\n    x17 = asobject(x16)\n    x18 = apply(first, x17)\n    x19 = fork(subtract, first, last)\n    x20 = apply(x19, x18)\n    x21 = asobject(x20)\n    x22 = lbind(shift, x21)\n    x23 = mapply(x22, x2)\n    O = paint(x5, x23)\n    return O"], [1.0, "def solve_234c0035(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_cc207c63(I):\n    x1 = trim(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, x1)\n    x7 = chain(color, merge, frontiers)\n    x8 = x7(x6)\n    x9 = lbind(contained, x8)\n    x10 = compose(flip, x9)\n    x11 = mfilter(x4, x10)\n    x12 = leastcolor(x11)\n    x13 = objects(x6, T, F, T)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = apply(toindices, x15)\n    x17 = rbind(5516, UNITY)\n    x18 = lbind(rbind, shoot)\n    x19 = chain(x17, x18, ulcorner)\n    x20 = apply(x19, x15)\n    x21 = chain(first, x17, x20)\n    x22 = rbind(shoot, NEG_UNITY)\n    x23 = lbind(rbind, greater)\n    x24 = chain(x22, x23, last)\n    x25 = rbind(sfilter, x21)\n    x26 = compose(x25, x19)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x27, x28)\n    x29 = fork(sfilter, x26, x27)\n    x30 = lbind(argmax, x17)\n    x31 = compose(x30, x29)\n    x32 = fork(sfilter, x27, x31)\n    x33 = fork(difference, x52, x32)\n    x34 = mapply(x33, x20)\n    O = fill(6, x12, x34)\n    return O"], [1.0, "def solve_8722fd5b(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape1(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_05ec59ec(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = fork(equality, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = rbind(bordering, I)\n    x9 = compose(flip, x8)\n    x10 = mfilter(x7, x9)\n    x11 = fill(I, FOUR, x10)\n    O = replace(x11, x2, FIVE)\n    return O"], [1.0, "def solve_b9649d9d(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_19f20eb7(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = astuple(NINE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = initset(x2)\n    x9 = fill(x7, ZERO, x8)\n    O = upscale(x9, TWO)\n    return O"], [1.0, "def solve_376d72e7(I):\n    x1 = compress(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = upscale(numcolors, TWO)\n    x5 = objects(x3, x4, F, T)\n    x6 = interval(TWO, FIVE, ONE)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    x9 = astuple(NEG_TWO, FOUR)\n    x10 = lbind(shift, x5)\n    x11 = mapply(x10, x9)\n    x12 = mapply(x7, x11)\n    x13 = palette(x12)\n    x14 = combine(x8, x12)\n    x15 = mapply(last, x14)\n    x16 = remove(x15, x14)\n    x17 = apply(decrement, x16)\n    x18 = lbind(mapply, first)\n    x19 = mapply(x18, x17)\n    x20 = combine(x13, x19)\n    O = paint(x3, x20)\n    return O"], [1.0, "def solve_b9789c57(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_02e102f7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = apply(toindices, x3)\n    x5 = lbind(index, I)\n    x6 = compose(x5, x4)\n    x7 = matcher(x6,11)\n    x8 = rbind(shoot, DOWN)\n    x9 = matcher(x6, UNITY)\n    x10 = rbind(shoot, NEG_UNITY)\n    x11 = rbind(shoot, DOWN)\n    x12 = chain(x11, x10, x9)\n    x13 = compose(x5, x4)\n    x14 = fork(difference, x13, x12)\n    x15 = compose(x5, x4)\n    x16 = fork(equality, x14, x15)\n    x17 = sfilter(x4, x16)\n    x18 = difference(x4, x17)\n    x19 = merge(x17)\n    x20 = fill(I, x1, x18)\n    O = fill(x20, FIVE, x19)\n    return O"], [1.0, "def solve_1611fdcf(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = fork(add, first, last)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x6, x8)\n    x10 = fill(I, x1, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(urcorner, x11)\n    x13 = shift(x12, UNITY)\n    x14 = paint(x10, x13)\n    x15 = toindices(x14)\n    x16 = shift(x15, DOWN)\n    x17 = paint(x14, x16)\n    x18 = urcorner(x14)\n    x19 = shift(x18, UP)\n    x20 = paint(x17, x19)\n    x21 = hmirror(x14)\n    x22 = vmirror(x21)\n    x23 = objects(x22, T, F, T)\n    x24 = shoot(x18, UNITY)\n    x25 = apply(x24, x23)\n    x26 = rbind(shoot, x18)\n    x27 = mapply(x26, x25)\n    O = paint(x13, x27)\n    return O"], [1.0, "def solve_3ee19eaa(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(normalize, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x1, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x1)\n    x17 = initset(FOUR)\n    x18 = insert(x40, x17)\n    x19 = lbind(toobject, x18)\n    x20 = chain(x19,dneighbors, last)\n    x21 = remove(x16, x16)\n    x22 = rbind(subtract, x16)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(first, x24, x20)\n    x26 = chain(x19, x25, x02)\n    x27 = fork(subtract, x25, x26)\n    x28 = fork(gravitate, x25, x27)\n    x29 = fork(shift, x28, x29)\n    x30 = mapply(x29, x26)\n    x31 = cover(x14, x30)\n    x32 = ofcolor(x31, x1)\n    x33 = shift(x32, UNITY)\n    O = fill(x31, x1, x33)\n    return O"], [1.0, "def solve_a840f247(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = compose(NEG_TWO, last)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(x6, first)\n    x8 = fork(recolor, x7, x4)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_ab8bc365(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, llcorner)\n    x11 = fork(recolor, x8, x10)\n    x12 = compose(x3, urcorner)\n    x13 = rbind(shift, NEG_ONE)\n    x14 = compose(x13, hmirror)\n    x15 = fork(recolor, x12, x14)\n    x16 = fork(combine, x7, x11)\n    x17 = fork(combine, x10, x15)\n    x18 = fork(combine, x16, x17)\n    x19 = mapply(x18, x2)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_b2fe9ec2(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fill(I, TWO, x2)\n    x4 = leastcolor(x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = tojvec(x6)\n    x8 = height(I)\n    x9 = decrement(x8)\n    x10 = astuple(x9, x6)\n    x11 = connect(x7, x10)\n    x12 = toobject(x11, I)\n    x13 = numcolors(x12)\n    x14 = equality(x13, ONE)\n    x15 = branch(x14, x12, x7)\n    x16 = branch(x14, x13, xed)\n    x17 = branch(x14, x16, x15)\n    x18 = connect(x17, x15)\n    x19 = fill(x3, x4, x18)\n    x20 = ofcolor(x19, x4)\n    x21 = subgrid(x20, x19)\n    x22 = asobject(x21)\n    x23 = matcher(first, x4)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x22, x24)\n    x26 = difference(x22, x25)\n    x27 = fill(x19, ZERO, x26)\n    x28 = astuple(x5, x6)\n    x29 = shift(x28, UNITY)\n    O = paint(x27, x29)\n    return O"], [1.0, "def solve_4364fc70(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, width)\n    x8 = valmax(x6, width)\n    x9 = halve(x8)\n    x10 = toivec(x9)\n    x11 = mapply(neighbors, x10)\n    x12 = toindices(x11)\n    x13 = ofcolor(I, x5)\n    x14 = ofcolor(I, x10)\n    x15 = difference(x13, x14)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x11, x17)\n    x19 = difference(x7, x18)\n    x20 = rbind(greater, x19)\n    x21 = compose(x20, first)\n    x22 = sfilter(x13, x21)\n    x23 = difference(x17, x22)\n    x24 = rbind(gravitate, x10)\n    x25 = compose(x24, initset)\n    x26 = fork(add, identity, x25)\n    x27 = fork(connect, xindices, x26)\n    x28 = fork(recolor, identity, x27)\n    x29 = mapply(x28, x23)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_7989041b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, ONE, x5)\n    x7 = lbind(power, outbox)\n    x8 = chain(x7, halve, width)\n    x9 = initset(x8)\n    x10 = lbind(rapply, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(backdrop, x12)\n    x14 = fork(difference, x13, toindices)\n    x15 = mapply(x14, x1)\n    x16 = mostcolor(I)\n    x17 = ofcolor(I, x16)\n    x18 = intersection(x15, x17)\n    O = fill(x6, THREE, x18)\n    return O"], [1.0, "def solve_8fe72100(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_242b15b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = rbind(compose, palette)\n    x7 = lbind(lbind, contained)\n    x8 = chain(x7, x5, x6)\n    x9 = rbind(other, x3)\n    x10 = compose(x9, palette)\n    x11 = fork(sfilter, x8, x10)\n    x12 = merge(x3)\n    x13 = compose(x11, x12)\n    x14 = argmax(x3, x13)\n    x15 = remove(x14, x3)\n    x16 = lbind(ofcolor, I)\n    x17 = compose(x16, inbox)\n    x18 = fork(combine, x17, x19)\n    x19 = mapply(x18, x15)\n    x20 = fill(I, x14, x19)\n    O = fill(x20, x3, x18)\n    return O"], [1.0, "def solve_499d7c93(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_a526eafc(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = backdrop(x3)\n    x5 = maximum(x3)\n    x6 = toivec(x5)\n    x7 = asobject(I)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x6)\n    O = fill(I, x1, x12)\n    return O"], [1.0, "def solve_a1150cb9(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = other(x5, x1)\n    x7 = ofcolor(I, x6)\n    x8 = shape(I)\n    x9 = canvas(x36, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, I)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, connect)\n    x16 = rbind(rapply, x15)\n    x17 = compose(initset, x16)\n    x18 = chain(first, x17, last)\n    x19 = x18(x90)\n    x20 = x18(x19)\n    x21 = palette(x20)\n    x22 = UNITY(x21)\n    x23 = lrcorner(x22)\n    x24 = remove(x23, x22)\n    x25 = cover(x19, x24)\n    x26 = normalize(x25)\n    x27 = lbind(178, x22)\n    x28 = lbind(trapply, x22)\n    x29 = compose(initset, x28)\n    x30 = chain(first, x27, x29)\n    x31 = multiply(THREE, TEN)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = lbind(multiply, x31)\n    x34 = apply(x33, x32)\n    x35 = lbind(shift, x26)\n    x36 = mapply(x35, x34)\n    O = fill(x26, x6, x36)\n    return O"], [1.0, "def solve_91b768f4(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind37count(I, I)\n    x5 = argmin(x3, x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = vupscale(I, x7)\n    x9 = height(I)\n    x10 = decrement(x9)\n    x11 = lbind(astuple, x10)\n    x12 = apply(x11, x8)\n    x13 = rbind(shoot, x5)\n    x14 = mapply(x13, x12)\n    x15 = cover(I, x2)\n    x16 = mapply(x11, x8)\n    O = fill(x15, x2, x16)\n    return O"], [1.0, "def solve_872c6ec6(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = vsplit(x3, x4)\n    x7 = lbind(greater,FOUR)\n    x8 = compose(x7, numcolors)\n    x9 = sfilter(x6, x8)\n    x10 = merge(x9)\n    x11 = rot90(x10)\n    x12 = vsplit(x11, x5)\n    O = sfilter(x12, x8)\n    return O"], [1.0, "def solve_09001b12(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_658b9fa6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = rbind(remove, x3)\n    x5 = chain(positive, size, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(x6, asindices)\n    x8 = fork(connect, x7, x7)\n    x9 = mapply(x8, x2)\n    x10 = fill(I, x1, x9)\n    O = leastcolor(I)\n    return O"], [1.0, "def solve_fc4cb756(I):\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = rbind(shoot, DOWN)\n    x8 = portrait(x6)\n    x9 = mapply(x7, x4)\n    x10 = rbind(shoot, UP)\n    x11 = decrement(x10)\n    x12 = rbind(shoot, x11)\n    x13 = mapply(x12, x4)\n    x14 = fork(combine, x9, x13)\n    x15 = mapply(x14, x9)\n    x16 = paint(I, x15)\n    O = fill(x16, x2, x024)\n    return O"], [1.0, "def solve_f3bd8907(I):\n    x1 = trim(I)\n    x2 = identity(x1)\n    x3 = flip(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    O = x4(x9)\n    return O"], [1.0, "def solve_d514292a(I):\n    x1 = switch(I, THREE, EIGHT)\n    x2 = switch(x1, TWO, NEG_ONE)\n    x3 = switch(x2, ONE, SIX)\n    x4 = fill(x3, FOUR, x1)\n    x5 = fill(x4, NINE, x2)\n    O = switch(x5, THREE, EIGHT)\n    return O"], [1.0, "def solve_c8ae8d20(I):\n    x1 = mostcolor(I)\n    x2 = initset(I)\n    x3 = insert(insert, DOWN)\n    x4 = insert(positive, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = multiply(ofcolor, TWO)\n    x7 = lbind(canvas, x1)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = shift(x9, UNITY)\n    O = paint(x5, x10)\n    return O"], [1.0, "def solve_194ffefd(I):\n    x1 =frontiers(I)\n    x2 = Tfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [1.0, "def solve_bfe6c352(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_76c5ba34(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_e923b819(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = interval(ZERO, x4, ONE)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = interval(ZERO, x4, ONE)\n    x9 = pair(x5, x8)\n    x10 = mapply(x7, x9)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_8f1a58df(I):\n    x1 = solveindices(I)\n    x2 = partition(I)\n    x3 = lbind(contained, ONE)\n    x4 = chainINE(flip, x3, shape)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = fork(multiply, height, width)\n    x9 = argmin(x7, x8)\n    O = subgrid(x9, I)\n    return O"], [1.0, "def solve_8fcd0888(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = equality(x6, x16)\n    x18 = size(x13)\n    x19 = equality(x12, x18)\n    x20 = branch(x17, x18, x19)\n    x21 = color(x20)\n    x22 = width(I)\n    x23 = astuple(x22, x20)\n    x24 = canvas(x21, x23)\n    x25 = matcher(last, x10)\n    x26 = compose(flip, x25)\n    x27 = sfilter(x2, x26)\n    x28 = sizefilter(x27, ONE)\n    x29 = merge(x28)\n    O = fill(x24, ONE, x29)\n    return O"], [1.0, "def solve_d686b7b2(I):\n    x1 = trim(I)\n    x2 = lbind(dedupe, x1)\n    x3 = upscale(x1, ONE)\n    x4 = x2(x3)\n    x5 = asobject(x4)\n    x6 = shift(x5, UNITY)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_1306f57c(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_4251467c(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_a44f7d8a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = height(x8)\n    x10 = rbind(x8, x9)\n    x11 = apply(x10, x6)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = fill(I, x1, x13)\n    return O"], [1.0, "def solve_2ea1bcbb(I):\n    x1 = trim(I)\n    x2 = objects(x1, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = palette(I)\n    x7 = sfilter(x6, x5)\n    x8 = fork(equality, toindices, box)\n    x9 = rbind(contained, x7)\n    x10 = compose(x9, color)\n    x11 = sfilter(x1, x10)\n    x12 = rbind(greater, SEVEN)\n    x13 = compose(x12, size)\n    x14 = sfilter(x11, x13)\n    x15 = merge(x14)\n    x16 = palette(x15)\n    x17 = sfilter(x16, x12)\n    x18 = compose(merge, x17)\n    x19 = mapply(x18, x24)\n    x20 = merge(x19)\n    x21 = fill(I, UNITY, x20)\n    O = replace(x21, SEVEN, FIVE)\n    return O"], [1.0, "def solve_30121fc4(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = ofcolor(x1, ZERO)\n    x4 = ofcolor(x2, ZERO)\n    x5 = intersection(x3, x4)\n    x6 = size(x5)\n    x7 = astuple(FOUR, FOUR)\n    x8 = canvas(ZERO, x7)\n    O = fill(x8, THREE, x6)\n    return O"], [1.0, "def solve_987185a1(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = insert(ORIGIN, x25)\n    x27 = recolor(x10, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_9d1e146b(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x12, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [1.0, "def solve_01246e85(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = partition(I)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    O = objects(x14, T, F, F)\n    return O"], [1.0, "def solve_ecc8116b(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(multiply, x1)\n    x3 = compose(x2, width)\n    x4 = fork(equality, size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = sfilter(x7, x5)\n    x9 = merge(x8)\n    x10 = color(x9)\n    x11 = equivalent(x1, x5)\n    x12 = insert(x10, x11)\n    x13 = insert(x9, x12)\n    x14 = dmirror(x13)\n    x15 = papply(pair, x4, x8)\n    x16 = lbind( apply, maximum)\n    x17 = apply(x16, x15)\n    x18 = cmirror(x17)\n    x19 = papply(pair, x17, x18)\n    x20 = apply(x16, x19)\n    x21 = rbind(apply, x20)\n    x22 = apply(x21, x14)\n    x23 = combine(x20, x22)\n    x24 = apply(mostcolor, x23)\n    x25 = remove(x24, x23)\n    x26 = lbind(canvas, NEG_ONE)\n    x27 = lbind(occurrences, x24)\n    x28 = chain(x26, x27, asobject)\n    x29 = lbind(apply, x28)\n    x30 = chain(x24, x29, ulcorner)\n    x31 = lbind(ofcolor, x24)\n    x32 = compose(x31, x30)\n    x33 = chain(ulcorner, x27, x32)\n    x34 = lbind(shift, x24)\n    x35 = power(x34, TWO)\n    x36 = x35(x33)\n    x37 = fill(I, x10, x36)\n    O = x10(x37)\n    return O"], [1.0, "def solve_d9375031(I):\n    x1 = lrcorner(I)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(shoot, x1)\n    x4 = rbind(shoot, TWO)\n    x5 = mapply(x3, x2)\n    x6 = mapply(x4, x5)\n    O = fill(I, ZERO, x6)\n    return O"], [1.0, "def solve_cf0af621(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_99ebc370(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = dmirror(I)\n    x8 = sfilter(x7, x4)\n    x9 = merge(x8)\n    x10 = shift(x9, UNITY)\n    x11 = paint(x7, x10)\n    O = subgrid(x1, x11)\n    return O"], [1.0, "def solve_a704d392(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_a5fdbce5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(combine, vfrontier, hfrontier)\n    x4 = compose(x3, rbind)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, x1, x5)\n    x7 = compose(vfrontier, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x6)\n    x10 = intersection(x2, x9)\n    O = fill(x6, x1, x10)\n    return O"], [1.0, "def solve_a1ada81c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(inter22, x7)\n    x9 = rbind(shoot, UP)\n    x10 = lbind(compose, x8)\n    x11 = lbind(rbind, intersection)\n    x12 = compose(x10, x11)\n    x13 = rbind(compose, last)\n    x14 = lbind(matcher, x13)\n    x15 = chain(x15, x12, x12)\n    x16 = fork(sfilter, identity, x15)\n    x17 = chain(first, x16, ulcorner)\n    x18 = lbind(apply, x7)\n    x19 = chain(x18, palette, x17)\n    x20 = fork(sfilter, identity, x19)\n    x21 = fork(compose, x17, x20)\n    x22 = lbind(lbind, greater)\n    x23 = compose(x22, last)\n    x24 = fork( compose, x23, x21)\n    x25 = fork(sfilter, identity, x24)\n    x26 = chain(f8, x17, x25)\n    x27 = lbind(mapply, x4)\n    x28 = compose(x27, x21)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x6)\n    O = x1(x30)\n    return O"], [1.0, "def solve_cac8dd44(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, vline)\n    x6 = difference(x4, x5)\n    x7 = astuple(x5, x6)\n    x8 = apply(size, x7)\n    x9 = increment(x8)\n    x10 = frontiers(I)\n    x11 = sfilter(x10, hline)\n    x12 = size(x11)\n    x13 = increment(x12)\n    x14 = divide(x9, x13)\n    x15 = width(I)\n    x16 = LEfthalf(I)\n    x17 = palette(x16)\n    x18 = lbind(shift, x17)\n    x19 = compose(x18, least)\n    x20 = rbind(multiply, x14)\n    x21 = compose(x20, ofcolor)\n    x22 = apply(x21, x11)\n    x23 = argmax(x22, identity)\n    x24 = apply(x19, x10)\n    x25 = difference(x24, x23)\n    x26 = rbind(hsobject, I)\n    x27 = mapply(x26, x25)\n    O = subgrid(x27, I)\n    return O"], [1.0, "def solve_7102b095(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, x5)\n    x9 = sfilter(x8, x6)\n    x10 = merge(x9)\n    x11 = color(x10)\n    x12 = compose(double, halve)\n    x13 = lbind(NEG_ONE, x12)\n    x14 = rbind( shift, x10)\n    x15 = compose(x14, last)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x9)\n    O = paint(x6, x17)\n    return O"], [1.0, "def solve_4de0a721(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = dmirror(I)\n    x6 = astuple(x5, x6)\n    x7 = hmirror(I)\n    x8 = astuple(x7, x4)\n    x9 = shift(x8, UNITY)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_98e5f6d1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x37)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_8c083a89(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, F)\n    x8 = compose(uppermost, llcorner)\n    x9 = order(x7, x8)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, palette)\n    x13 = chain(x12, error, x11)\n    x14 = lbind(apply, bottom)\n    x15 = chain(x11, x14, frontiers)\n    x16 = fork(recolor, x13, x15)\n    x17 = mapply(x16, x9)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_28a7f339(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_991b79aa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = remove(x2, x1)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x3)\n    x11 = apply(first, x10)\n    x12 = toindices(x5)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x5)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_3db97dc3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_efbe5b27(I):\n    x1 = fork(multiply, height, width)\n    x2 = lbind(ofcolor, I)\n    x3 = palette(I)\n    x4 = compose(x1, x2)\n    x5 = argmax(x3, x4)\n    x6 = leastcolor(I)\n    x7 = palette(I)\n    x8 = remove(x5, x7)\n    x9 = order(x8, identity)\n    x10 = ofcolor(I, x6)\n    x11 = last(x10)\n    x12 = ofcolor(I, x5)\n    x13 = first(x12)\n    x14 = height(x11)\n    x15 = halve(x14)\n    x16 = ulcorner(x11)\n    x17 = last(x7)\n    x18 = equality(x16, x17)\n    x19 = shoot(x15, UNITY)\n    x20 = shoot(x16, NEG_UNITY)\n    x21 = combine(x19, x20)\n    x22 = branch(x18, x21, x3)\n    O = fill(I, x11, x22)\n    return O"], [1.0, "def solve_fd7db7fc(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x4, x6)\n    x8 = fork(paint, identity, x7)\n    x9 = rbind(contained, x5)\n    x10 = compose(x9, first)\n    x11 = sfilter(x1, x10)\n    x12 = compose(positive, size)\n    x13 = rbind(sfilter, x12)\n    x14 = lbind(rbind, compose)\n    x15 = lbind(shift, x4)\n    x16 = chain(x13, x14, x15)\n    x17 = rbind(multiply, THREE)\n    x18 = compose(x17, x14)\n    x19 = fork(combine, x18, x16)\n    x20 = compose(x12, x19)\n    x21 = compose(x5, x20)\n    x22 = fork(recolor, x21, x21)\n    x23 = mapply(x22, x11)\n    O = paint(I, x23)\n    return O"], [1.1, "def solve_2502d92b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_ff13e3ca(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = lbind(cachevas, ZERO)\n    x7 = lbind(VKpply, recolor)\n    x8 = lbind(lbind, shift)\n    x9 = compose(x6, x7)\n    x10 = lbind(ofcolor, I)\n    x11 = compose(x10, x9)\n    x12 = lbind(prapply, x11)\n    x13 = fork(rapply, x12, identity)\n    x14 = compose(x14, x1)\n    x15 = compose(x3, x11)\n    x16 = valmax(x5, x15)\n    x17 = matcher(x16, ONE)\n    x18 = sfilter(x5, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = ofcolor(I, x1)\n    x22 = ofcolor(I, x10)\n    x23 = combine(x21, x22)\n    x24 = mapply(x19, x23)\n    x25 = difference(x21, x24)\n    x26 = toobject(x25, I)\n    x27 = colorcount(x26, x1)\n    x28 = ofcolor(x26, x10)\n    x29 = ofcolor(x26, x1)\n    x30 = combine(x28, x29)\n    x31 = mapply(x25, x30)\n    x32 = ofcolor(I, x10)\n    x33 = difference(x31, x32)\n    x34 = mapply(vfrontier, x33)\n    x35 = mapply(hfrontier, x33)\n    x36 = combine(x34, x35)\n    x37 = fill(I, x10, x36)\n    x38 = ofcolor(x37, x1)\n    x39 = height"], [1.1, "def solve_26901a84(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = asindices(x3)\n    x5 = box(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 =63(I)\n    x9 = branch(x8, x7, x4)\n    x10 = hsplit(I, TWO)\n    x11 = first(x10)\n    x12 = partition(x11)\n    x13 = objects(x11, T, F, T)\n    x14 = rbind(occurrences, TWO)\n    x15 = compose(x14, toindices)\n    x16 = matcher(x15, palette)\n    x17 = extract(x12, x16)\n    x18 = ulcorner(x17)\n    x19 = subgrid(x17, I)\n    x20 = rbind(toobject, x19)\n    x21 = compose(x20, toindices)\n    x22 = fork(combine, x21, identity)\n    x23 = apply(x22, x50)\n    x24 = merge(x5)\n    x25 = substitute(x24, x25)\n    x26 = hupscale(x25, x14)\n    x27 = compose(x26, x21)\n    x28 = argmin(x23, x27)\n    x29 = rbind(toobject, x28)\n    x30 = compose(x29, dedupe)\n    x31 = apply(x30, x29)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = fork( prapply, first, last)\n    x35 = lbind(apply, x34)\n    x36 = compose(x35, x32)\n    x37 = fork(x32, x36, last)\n    x38 = mapply(x37, x33)\n    x39 = color(x28)\n    x40 = fill(x19"], [1.1, "def solve_f5bf9c33(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = trim(I)\n    x2 = f5cphalf(x1)\n    x3 = feca(THREE)\n    x4 = decrement(THREE)\n    x5 = index(I, x4)\n    x6 = asobject(I)\n    x7 = ulcorner(x6)\n    x8 = index(I, x7)\n    x9 = equality(x8, x5)\n    x10 = branch(x9, width, height)\n    x11 = index(I, x10)\n    x12 = equality(x11, x5)\n    x13 = LEFT(x12)\n    x14 = add(x13, x10)\n    x15 = tojvec(x14)\n    x16 = asobject(I)\n    x17 = shape(I)\n    x18 = decrement(x17)\n    x19 = add(x17, x18)\n    x20 = connect(x15, x19)\n    x21 = asobject(I)\n    x22 = shape(I)\n    x23 = decrement(x22)\n    x24 = multiply(x23, x18)\n    x25 = fill(I, x1, x24)\n    x26 = asobject(x25)\n    x27 = shape(I)\n    x28 = decrement(x27)\n    x29 = multiply(x28, x28)\n    x30 = fill(x25, x1, x29)\n    x31 = objects(x30, T, F, T)\n    x32 = apply(toindices, x31)\n    x33 = lbind( compose, normalize)\n    x34 = lbind(compose, x33)\n    x35 = lbind(rbind, manhattan)\n    x36 = compose(x34, x35)\n    x37 = fork(sfilter, x36, x36)\n    x38 = fork(compose, x37, x35)\n    x39 = lbind(lbind, shift)\n    x40 = compose(x39, x38)\n    x41 = fork(compose, x40, x36)\n    x"], [1.1, "def solve_98f2a116(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWpply, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = other(x15, x17)\n    x19 = color(x18)\n    x20 = astuple(x19, RIGHT)\n    x21 = initset(ZERO_BY_TWO)\n    x22 = insert(ORIGIN, x21)\n    x23 = recolor(x4, x22)\n    x24 = insert(x20, x23)\n    x25 = dmirror(x24)\n    x26 = lbind(shift, x24)\n    x27 = occurrences(x10, x24)\n    x28 = mapply(x26, x27)\n    x29 = lbind(shift, x25)\n    x30 = occurrences(x10, x25)\n    x31 = mapply(x29, x30)\n    x32 = combine(x28, x31)\n    x33 = fill(x10, x4, x32)\n    x34 = hmirror(x33)\n    x35 = lbind(shift, x28)\n    x36 = occurrences(x10, x28)\n    x37 = mapply(x35, x36)\n    x38 = combine(x35, x37)\n    x39 = recolor(x4, x38)\n    x40 = shift(x19,"], [1.1, "def solve_38bf8068(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_24b44f12(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x1, x5)\n    x7 = other(x1, x6)\n    x8 = rbind(position, x7)\n    x9 = neighbors(ORIGIN)\n    x10 = insert(ORIGIN, x9)\n    x11 = UNITY(x10)\n    x12 = rbind(multiply, THREE)\n    x13 = apply(x12, x11)\n    x14 = rbind(intersection, x7)\n    x15 = lbind(ofcolor, I)\n    x16 = compose(x14, x15)\n    x17 = apply(x16, x13)\n    x18 = merge(x17)\n    x19 = palette(x18)\n    x20 = matcher(identity, x8)\n    x21 = rbind(argmin, x20)\n    x22 = lbind(rbind, manhattan)\n    x23 = compose(x21, x22)\n    x24 = argmin(x19, x23)\n    x25 = matcher(first, x8)\n    x26 = rbind(sfilter, x25)\n    x27 = compose(toindices, x26)\n    x28 = lbind(rbind, manhattan)\n    x29 = chain(x27, x28, initset)\n    x30 =55(x24)\n    x31 = ofcolor(I, x40)\n    x32 = rbind(apply, x31)\n    x33 = lbind(rbind, manhattan)\n    x34 = compose(x33, x28)\n    x35 = chain(x32, x33, x34)\n    x36 = apply(x35, x31)\n    x37 =contained(x60, x36)\n    x38 = ofcolor(I, x4)\n    x39 = sfilter(x38, x37)\n    x"], [1.1, "def solve_ca75e0f3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_12df315e(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = frontiers(I)\n    x3 = merge(x2)\n    x4 = difference(x1, x3)\n    x5 = mostcolor(x4)\n    x6 = objects(I, T, F, F)\n    x7 = color(x3)\n    x8 = matcher(color, x7)\n    x9 = matcher(color, x5)\n    x10 = fork(either, x8, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x6, x11)\n    x13 = merge(x12)\n    x14 = color(x13)\n    x15 = lbind(recolor, x14)\n    x16 = lbind(mapply, vfrontier)\n    x17 = rbind(ofcolor, x15)\n    x18 = chain(x16, x17, x10)\n    x19 = fork(paint, identity, x18)\n    x20 = identity(I)\n    x21 = rbind(toobject, x20)\n    x22 = compose(x21, x19)\n    x23 = chain(even, x17, x22)\n    x24 = sfilter(x6, x23)\n    x25 = chain(cmirror, x24, x19)\n    x26 = lbind(recolor, x15)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, identity, x27)\n    x29 = chain(initset, x27, x28)\n    x30 = fork(rapply, x29, identity)\n    x31 = compose(first, x30)\n    x32 = compose(x164, x30)\n    x33 = fork(paint, x31, x32)\n    x34 = fork(equality, x26, x33)\n    x35 = compose(last, x30)\n    x36 = compose(flip, x35)\n    x37 = sfilter(x24, x36)\n    x38 = fork(connect, x37, x37)\n    x39 ="], [1.1, "def solve_d89b77db(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = merge(x6)\n    x8 = product(x7, x7)\n    x9 = fork(multiply, first, last)\n    x10 = apply(x9, x8)\n    x11 = lbind(sfilter, x10)\n    x12 = lbind(matcher, first)\n    x13 = compose(x11, x12)\n    x14 = apply(x13, x2)\n    x15 = fork(multiply, first, last)\n    x16 = apply(x15, x2)\n    x17 = pair(x14, x16)\n    x18 = fork(difference, first, last)\n    x19 = chain(size, x18, first)\n    x20 = matcher(x19, ZERO)\n    x21 =fork(paint, identity, x20)\n    x22 = chain(positive, size, x21)\n    x23 = fork(both, x17, x22)\n    x24 = sfilter(x17, x23)\n    x25 = chain(size, merge, x21)\n    x26 = matcher(x25, ZERO)\n    x27 = fork(both, x24, x26)\n    x28 = sfilter(x28, x27)\n    x29 = lbind(intersection, x2)\n    x30 = chain(size, x29, initset)\n    x31 = matcher(x30, ZERO)\n    x32 = objects(I, T, F, F)\n    x33 = sfilter(x32, x31)\n    x34 = difference(x32, x33)\n    x35 = colorfilter(x34, x1)\n    x36 = mapply(toindices, x35)\n    x37 = apply(urcorner, x35)\n    x38 = shift(x37, UNITY)\n"], [1.1, "def solve_f399bfc4(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = leastcolor(x1)\n    x4 = leastcolor(x2)\n    x5 = ofcolor(I, x3)\n    x6 = center(x5)\n    x7 = ofcolor(I, x4)\n    x8 = center(x7)\n    x9 = height(I)\n    x10 = width(I)\n    x11 = hfrontier(x6)\n    x12 = fill(I, x3, x11)\n    x13 = hfrontier(x8)\n    x14 = fill(x12, x4, x13)\n    x15 = decrement(x10)\n    x16 = decrement(x9)\n    x17 = halve(x9)\n    x18 = tojvec(x15)\n    x19 = connect(ORIGIN, x18)\n    x20 = fill(x14, x3, x19)\n    x21 = toivec(x16)\n    x22 = astuple(x16, x15)\n    x23 = connect(x21, x22)\n    x24 = fill(x20, x4, x23)\n    x25 = decrement(x17)\n    x26 = toivec(x25)\n    x27 = connect(ORIGIN, x26)\n    x28 = fill(x24, x3, x27)\n    x29 = tojvec(x15)\n    x30 = decrement(x17)\n    x31 = astuple(x30, x15)\n    x32 = connect(x29, x31)\n    x33 = fill(x28, x3, x32)\n    x34 = toivec(x17)\n    x35 = toivec(x16)\n    x36 = connect(x34, x35)\n    x37 = fill(x33, x4, x36)\n    x38 = astuple(x17, x15)\n    x39 = astuple(x16, x15)\n    x40 = connect(x38, x39)\n    O = fill(x37,"], [1.1, "def solve_f6c6a1fb(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_890a8b1a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, << info)\n    x33 = compose(x32, first)\n    x34 = rbind(multiply, x20)\n    x35 = rbind(divide, x20)\n    x36 = compose(x34, x35)\n    x37 = fork(equality, identity, x36)\n    x38 = compose(x27, first)\n    x39 = rbind(multiply, x28)\n    x40 = rbind(divide"], [1.1, "def solve_b7ad5f1b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x24, x25)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = paint(x38, x35)\n    O = x4(x39)"], [1.1, "def solve_eb020306(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = neighbors(ORIGIN)\n    x2 = height(I)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = x4(I)\n    x7 = x5(I)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = palette(x6)\n    x11 = palette(x7)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = recolor(x13, x14)\n    x16 = other(x15, x17)\n    x17 = palette(x6)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, x6)\n    x20 = argmin(x18, x19)\n    x21 = other(x18, x20)\n    x22 = ofcolor(x6, x21)\n    x23 = apply(initset, x22)\n    x24 = ofcolor(x7, x21)\n    x25 = apply(toindices, x24)\n    x26 = prapply(connect, x23, x25)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = height(x6)\n    x30 = divide(x29, x30)\n    x31 = ofcolor(x6, x21)\n    x32 = apply(decrement, x31)\n    x33 = ofcolor(x7, x21)\n    x34 = apply(intersection, x33)\n    x35 = ofcolor(x6, x21)\n    x36 = difference(x34, x35)\n    x37 = mapply(x27, x32a423222\n    x38 = mapply(x37, x34)\n    x39 = papply(connect, x37, x38)\n    x40 = height("], [1.1, "def solve_8288f58e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f1a192dc(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = extract(x8, x27)\n    x29 = rbind(multiply, x28)\n    x30 = greater(x19, x30)\n    x31 = rbind(divide, x30)\n    x32 = compose(x31, x30)\n    x33 = fork(equality, identity, x32)\n    x34 = lbind(fork, both)\n    x35 = lbind(x34, x26)\n    x36 = rbind(compose, x25)\n    x37 = lbind(rbind, contained)\n    x38 = compose(x36, x1977)\n    x39 = chain(x35, x36, x38)\n    x40 = lbind(sfilter, x33)\n    x41 = chain(x40, x36, x19)\n    x42 ="], [1.1, "def solve_8edb7a55(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_730c9d78(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_677cd588(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_4d7359e5(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(numcolors, ONE)\n    x37 = canvas(THREE, x36)\n    x38 = astuple(numcolors, numcolors)\n    x39 = canvas(ZERO, x38)\n    x40 = dmirror(x39)\n    x41 = papply(equality, x237, x40)\n    x42"], [1.1, "def solve_dfd8ac8d(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(x12, size)\n    x14 = sfilter(x11, x13)\n    x15 = rot90(x14)\n    x16 = sfilter(x15, x13)\n    x17 = rot90(x16)\n    x18 = sfilter(x17, x13)\n    x19 = rot270(x18)\n    x20 = sfilter(x19, x13)\n    x21 = rot270(x20)\n    x22 = sfilter(x21, x13)\n    x23 = pair(x16, x22)\n    x24 = extract(x23, first)\n    x25 = first(x24)\n    x26 = last(x24)\n    x27 = x25(I)\n    x28 =088(first, UNITY)\n    x29 = color(x28)\n    x30 = center(x28)\n    x31 = invert(x30)\n    x32 = shift(x28, x31)\n    x33 = width(I)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = tojvec(x30)\n    x36 = lbind(shift, x35)\n    x37 = Napply(x36, x49)\n    x38 = lbind(multiply, x31)\n    x39 = apply(x38, x37)\n    x40 = lbind(shift, x27)\n    x41 = mapply(x40, x39)\n    x42 ="], [1.1, "def solve_ad3aacc2(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(equality, toindices, box)\n    x5 = extract(x3, x4)\n    x6 = inbox(x5)\n    x7 = backdrop(x6)\n    x8 = toobject(x7, I)\n    x9 = mostcolor(x8)\n    x10 = ulcorner(x6)\n    x11 = DOWN_LEFT(x10)\n    x12 = same(x11)\n    x13 = lrcorner(x6)\n    x14 = llcorner(x6)\n    x15 = rbind(multiply, x13)\n    x16 = rbind(divide, x13)\n    x17 = compose(x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = rbind(multiply, x14)\n    x20 =9465(I)\n    x21 = compose(x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = rbind(multiply, x15)\n    x24 =9466555(I, x21)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = rbind(multiply, x14)\n    x28 = rbind(divide, x14)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, toindices, x29)\n    x31 = fork( themselves, x22, x30)\n    x32 = fork(astuple, x31, x28)\n    x33 = fork(shoot, identity, x32)\n    x34 = mapply(x33, x12)\n    x35 = fill(I, x9, x34)\n    x36 = objects(x35, T, F, T)\n    x37 = colorfilter(x36, x19)\n    x38 = rbind(bordering, I)\n    x39 ="], [1.1, "def solve_312e552e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_ed6da39f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid, x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lowermost(x18)\n    x20 = order(x16, uppermost)\n    x21 = uppermost(x18)\n    x22 = astuple(x19, x21)\n    x23 = rbind(shoot, UP)\n    x24 = mapply(x23, x22)\n    x25 =22233(x24, DOWN)\n    x26 =\n    rbind(manhattan, x25)\n    x27 = compose(x26, initset)\n    x28 = argmin(x22, x27)\n    x29 = mostcolor(x28)\n    x30 = matcher(first, x39)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x22, x31)\n    x33 = argmax(x32, x29)\n    x34 = remove(x33, x32)\n    x35 = ulcorner(x8)\n    x36 = lbind(shift, x33)\n    x37 = mapply(x36, x34)\n    x38 = paint(I, x37)\n    O = subgrid(x33, x38)"], [1.1, "def solve_f7ba7191(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_6d44d4aa(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_601d62cf(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = other(x6, x8)\n    x10 = ofcolor(I, x4)\n    x11 = subgrid(x10, I)\n    x12 = ofcolor(x11, x4)\n    x13 = combine(x10, x12)\n    x14 = mapply(neighbors, x13)\n    x15 = difference(x1, x14)\n    x16 = toobject(x15, x11)\n    x17 = leastcolor(x16)\n    x18 = ofcolor(x11, x4)\n    x19 = ofcolor(x16, x4)\n    x20 = combine(x18, x19)\n    x21 = fill(x11, x4, x20)\n    x22 = ofcolor(x21, x4)\n    x23 = first(x22)\n    x24 = initset(xx23)\n    x25 = objects(x24, T, F, T)\n    x26 = insert(x24, x25)\n    x27 = order(x26, identity)\n    x28 = astuple(x11, x13)\n    x29 = rbind(shoot, x28)\n    x30 = UNITY(x29)\n    x31 = apply(x22, x30)\n    x32 = papply(recolor, x31, x32)\n    x33 = mapply(x26, x32)\n    x34 = recolor(x4, x33)\n    x35 = combine(x32, x34)\n    x36 = mapply(x26, x32)\n    x37 = recolor(x4, x36)\n    x38 = papply(shift, x37, x35)\n    x39 = combine(x35"], [1.1, "def solve_032bbe58(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = objects(I, T, F, F)\n    x7 = lbind(colorfilter, x6)\n    x8 = compose(size, x7)\n    x9 = argmin(x5, x8)\n    x10 = color(x9)\n    x11 = palette(I)\n    x12 = remove(x10, x11)\n    x13 = other(x12, x12)\n    x14 = ofcolor(I, x13)\n    x15 = colorfilter(x14, x13)\n    x16 = apply(leftmost, x15)\n    x17 = size(x16)\n    x18 = equality(ONE, x17)\n    x19 = apply(uppermost, x15)\n    x20 = size(x19)\n    x21 = equality(ONE, x20)\n    x22 = fork(add, first, last)\n    x23 = compose(x22, ulcorner)\n    x24 = argmin(x15, x23)\n    x25 = remove(x24, x15)\n    x26 = lbind(manhattan, x24)\n    x27 = argmin(x25, x26)\n    x28 = lowermost(x27)\n    x29 = lowermost(x24)\n    x30 = subtract(x28, x29)\n    x31 = uppermost(x27)\n    x32 = uppermost(x24)\n    x33 = subtract(x31, x32)\n    x34 = astuple(x30, x33)\n    x35 = maximum(x34)\n    x36 =171(x39)\n    x37 = normalize(x11)\n    x38 = lbind(shift, x37)\n    x39 = mapply(x38, x36)\n    x40 =393con00000000 asobject\n    x41 = ofcolor(I, x13)\n    x42 = colorfilter(x"], [1.1, "def solve_e1770abb(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_d7f93559(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = identity(remove)\n    x3 = lbind(remove, x1)\n    x4 = chain(size, x2, x3)\n    x5 = compose(positive, size)\n    x6 = lbind(compose, x5)\n    x7 =lbind(matcher, x4)\n    x8 = compose(x6, x7)\n    x9 = chain(x1, x8,1998)\n    x10 = fork(sfilter, vsplit, hsplit)\n    x11 = matcher(x10, TWO)\n    x12 = extract(x1, x11)\n    x13 = lbind(104count, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(x14, x1)\n    x16 = subgrid(x15, I)\n    x17 = ofcolor(x16, x1)\n    x18 = replace(x16, x17, ZERO)\n    x19 = replace(x18, x1, ZERO)\n    x20 = position(x15, x19)\n    x21 = index(x19, ORIGIN)\n    x22 = width(x16)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x46)\n    x25 =apply(x24, x23)\n    x26 = lbind(shift, x15)\n    x27 = mapply(x26, x25)\n    x28 = shape(x16)\n    x29 = canvas(x1, x28)\n    x30 = lbind(multiply, x46)\n    x31 = apply(x30, x29)\n    x32 = mapply(x28, x31)\n    x33 = lbind(shift, x27)\n    x34 = mapply(x33, x32)\n    x35 = shift(x25, x34)\n    x36 = ofcolor(x16, ZERO)\n    x37 = cover(x69, x36)\n    x38 = toobject(x36, x19)\n    x39 ="], [1.1, "def solve_7ec01ab5(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_21c0bd5f(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, T)\n    x10 = rbind(x9, F)\n    x11 = rbind(x10, T)\n    x12 = rbind(subgrid, I)\n    x13 = chain(x11, x12, shape)\n    x14 = chain(size, dedupe, x13)\n    x15 = matcher(x14, ONE)\n    x16 = fork(both, x13, x15)\n    x17 = fork(both, x15, x16)\n    x18 = extract(x2, x17)\n    x19 = mostcolor(x18)\n    x20 = shape(x18)\n    x21 = canvas(x19, x20)\n    x22 = hconcat(I, x21)\n    x23 = objects(x22, F, T, T)\n    x24 = argmax(x23, numcolors)\n    x25 = normalize(x24)\n    x26 = remove(x24, x23)\n    x27 = toindices(x26)\n    x28 = lbind(shift, x27)\n    x29 = normalize(x25)\n    x30 = shape(x29)\n    x31 = maximum(x30)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = lbind(shift, x29)\n    x34 = occurrences(x22, x32)\n    x35 = mapply(x33, x34)\n    x36 = combine(x32, x33)\n    x37 = lbind(shift, x25)\n    x38 = occurrences(x22, x32)\n    x39 = mapply(x37, x38)\n    x40 = combine(x32"], [1.1, "def solve_8d114069(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x36 = branch(x30, height, width)\n    x37 = x36(I)\n    x38 = decrement(x37)\n    x39 = either(x16, x23)\n    x40 = branch(x39, ZERO, x36)\n    x41 = branch(x39, x30, x40)\n    x42 = apply(x21, x31)\n    x43 = apply(tojvec, x42)\n    x44 = mapply(x3, x43"], [1.1, "def solve_0139da23(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = difference(x2, x1)\n    x4 = leastcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, numcolors)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, identity, last)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine, x38, x39)\n    x"], [1.1, "def solve_a0ab0723(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_4f456140(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = compose(double, halve)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(x4, last)\n    x6 = sfilter(x1, x5)\n    x7 = fill(I, FOUR, x6)\n    x8 = compose(last, last)\n    x9 = fork(astuple, x8, identity)\n    x10 = extract(x6, x9)\n    x11 = x10(x1)\n    x12 = leftmost(x11)\n    x13 = rightmost(x11)\n    x14 = index(x22, x12)\n    x15 = positive(x14)\n    x16 = branch(x15, x13, x7)\n    x17 = x16(x21)\n    x18 = ulcorner(x17)\n    x19 = index(x22, x13)\n    x20 = equality(x19, x12)\n    x21 = branch(x20, x17, x7)\n    x22 = x21(x180)\n    x23 = branch(x20, x17, x7)\n    x24 = branch(x20, x22, x23)\n    x25 = branch(x20, x21, x24)\n    x26 = subtract(x25, x18)\n    x27 = crop(x22, DOWN, x26)\n    x28 = folpply(x27, x27)\n    x29 = merge(x28)\n    x30 = cover(x22, x29)\n    x31 = compose(first, last)\n    x32 = fork(valmax, x31, x30)\n    x33 = sfilter(x29, x32)\n    x34 = order(x33, identity)\n    x35 = first(x34)\n    x36 = last(x34)\n    x37 = palette(x35)\n    x38 = add(x38, UNITY)\n    x39 = ofcolor(x35, x33)\n    x40 = ofcolor(x"], [1.1, "def solve_f93b30c2(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_775ce930(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(rbind, equality)\n    x3 = rbind(compose, shape)\n    x4 = chain(x2, x3, box)\n    x5 = fork(sfilter, identity, x4)\n    x6 = fork(difference, identity, x5)\n    x7 = lbind(rbind, adjacent)\n    x8 = rbind(compose, initset)\n    x9 = chain(x7, x8, x6)\n    x10 = fork(extract, x5, x9)\n    x11 = fork(insert, x10, x6)\n    x12 = lbind(recolor, ZERO)\n    x13 = chain(x12, delta, x11)\n    x14 = fork(combine, x11, x13)\n    x15 = fork(position, x5, x6)\n    x16 = chain(toivec, first, x15)\n    x17 = chain(tojvec, last, x15)\n    x18 = fork(multiply, shape, x16)\n    x19 = fork(multiply, shape, x17)\n    x20 = fork(multiply, shape, x15)\n    x21 = fork(shift, hmirror, x18)\n    x22 = fork(shift, vmirror, x19)\n    x23 = compose(hmirror, vmirror)\n    x24 = fork(shift, x23, x20)\n    x25 = lbind(compose, x5)\n    x26 = x25(x21)\n    x27 = x25(x22)\n    x28 = x25(x24)\n    x29 = compose(crement, invert)\n    x30 = lbind(compose, x29)\n    x31 = x30(x16)\n    x32 = x30(x17)\n    x33 = x30(x15)\n    x34 = combine(x26, x31)\n    x35 = pair(x34, x34)\n    x36 = mapply(x24, x35)\n    O ="], [1.1, "def solve_6b838557(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_bfc6c926(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = leastcolor(x1)\n    x4 = leastcolor(x2)\n    x5 = ofcolor(I, x3)\n    x6 = center(x5)\n    x7 = ofcolor(I, x4)\n    x8 = center(x7)\n    x9 = height(I)\n    x10 = width(I)\n    x11 = hfrontier(x6)\n    x12 = fill(I, x3, x11)\n    x13 = hfrontier(x8)\n    x14 = fill(x12, x4, x13)\n    x15 = decrement(x10)\n    x16 = decrement(x9)\n    x17 = halve(x9)\n    x18 = tojvec(x15)\n    x19 = connect(ORIGIN, x18)\n    x20 = fill(x14, x3, x19)\n    x21 = toivec(x16)\n    x22 = astuple(x16, x15)\n    x23 = connect(x21, x22)\n    x24 = fill(x20, x4, x23)\n    x25 = decrement(x17)\n    x26 = toivec(x25)\n    x27 = connect(ORIGIN, x26)\n    x28 = fill(x24, x3, x27)\n    x29 = tojvec(x15)\n    x30 = decrement(x17)\n    x31 = astuple(x30, x15)\n    x32 = connect(x29, x31)\n    x33 = fill(x28, x3, x32)\n    x34 = toivec(x17)\n    x35 = toivec(x16)\n    x36 = connect(x34, x35)\n    x37 = fill(x33, x4, x36)\n    x38 = astuple(x17, x15)\n    x39 = astuple(x16, x15)\n    x40 = connect(x38, x39)\n    O = fill(x37,"], [1.1, "def solve_89859d9a(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, height)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = compose(x32, last)\n    x39 = rbind(argmin, x38)\n    x40 = rbind(sfilter, x"], [1.1, "def solve_6e7f322c(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = matcher(first, x3)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x1, x5)\n    x7 = fill(I, x3, x6)\n    x8 = objects(x7, T, F, F)\n    x9 = colorfilter(x8, x3)\n    x10 = rbind(toobject, I)\n    x11 = chain(leastcolor, x10, delta)\n    x12 = rbind(colorcount, x3)\n    x13 = chain(x12, palette, x11)\n    x14 = argmax(x9, x13)\n    x15 = objects(x7, T, F, F)\n    x16 = colorfilter(x15, x14)\n    x17 = difference(x15, x16)\n    x18 = rbind(subgrid, x7)\n    x19 = chain(x18, width, x7)\n    x20 = rbind(branch, x14)\n    x21 = chain(x20, x9, x19)\n    x22 = fork(uppermost, x17, x21)\n    x23 = compose(maximum, x22)\n    x24 = lowermost(x16)\n    x25 = rightmost(x16)\n    x26 = matcher(first, x24)\n    x27 = equality(x26, x25)\n    x28 = leftmost(x16)\n    x29 = rightmost(x16)\n    x30 = matcher(first, x29)\n    x31 = equality(x30, x25)\n    x32 = combine(x27, x31)\n    x33 = merge(x32)\n    x34 = fill(x7, x14, x33)\n    x35 = hmirror(x32)\n    x36 = vmirror(x32)\n    x37 = objects(x34, T, F, T)\n    x38 = merge(x37)\n    x39 = lbind(hmir"], [1.1, "def solve_4ba208d8(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = maximum(x16)\n    x18 = astuple(x17, x15)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(numcol"], [1.1, "def solve_7296f77a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7,1989, hsplit)\n    x9 = x8(x3, I)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = lefthalf(x9)\n    x13 = righthalf(x9)\n    x14 = rbind(ofcolor, SIX)\n    x15 = palette(x12)\n    x16 = palette(x13)\n    x17 = intersection(x15, x16)\n    x18 = intersection(x11, x16)\n    x19 = first(x18)\n    x20 = shape(x6)\n    x21 = canvas(ZERO, x20)\n    x22 = hconcat(x21, x6)\n    x23 = objects(x22, F, T, T)\n    x24 = argmax(x23, numcolors)\n    x25 = mostcolor(x24)\n    x26 = ofcolor(x12, x25)\n    x27 = initset(x15)\n    x28 = insert(x11, x27)\n    x29 = insert(x21, x28)\n    x30 =59eb2811968\n    x31 =3967(x30)\n    x32 =ulcorner(x3)\n    x33 = ofcolor(x12, x25)\n    x34 = rbind(adjacent, x33)\n    x35 = mfilter(x42, x34)\n    x36 = underfill(x21, x23, x35)\n    x37 = objects(x36, F, F, T)\n    x38 = neighbors(x73)\n    x39 = remove(x38, x30)\n    x40 = rbind(toobject, x00)\n    x41 = color00(x40)\n"], [1.1, "def solve_274a9108(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_1f19bf87(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = frontiers(I)\n    x4 = merge(x3)\n    x5 = difference(x1, x4)\n    x6 = mapply(toindices, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, x4, x7)\n    x11 = fill(I, x1, x10)\n    x12 = toindices(x4)\n    x13 = x12(x4)\n    x14 = shift(x13, NEG_UNITY)\n    x15 = fill(x11, x1, x14)\n    x16 = size(x15)\n    x17 = width(I)\n    x18 = astuple(x17, x16)\n    x19 = dmirror(I)\n    x20 = subtract(x18, x19)\n    x21 =Rbind(multiply, x20)\n    x22 = apply(x21, x15)\n    x23 = rbind(hmatching, x14)\n    x24 = argmin(x22, x23)\n    x25 = rbind(vmatching, x14)\n    x26 = increment(x24)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x22)\n    x29 = rbind(hmatching, x27)\n    x30 = decrement(x29)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x22)\n    x33 = rbind(gravitate, x2)\n    x34 = rbind(shift, x32)\n    x35 = compose(x33, x34)\n    x36 = apply(x35, x28)\n    x37 = mpapply(add, x32, x36)\n    x38 = fork(connect, x35, x37)\n    x39 = apply(x38, x31)\n    x40"], [1.1, "def solve_9128ade6(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 =63648500\n    003345612501500 fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = valmax(x1, x2)\n    x4 = matcher(x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, size)\n    x7 = color(x6)\n    x8 = remove(x6, x1)\n    x9 = objects(I, T, F, F)\n    x10 = lbind(colorfilter, x9)\n    x11 = chain(size, x10, color)\n    x12 = argmin(x8, x11)\n    x13 = other(x8, x12)\n    x14 = color(x13)\n    x15 = colorfilter(x9, x14)\n    x16 = apply(leftmost, x15)\n    x17 = size(x16)\n    x18 = equality(ONE, x17)\n    x19 = apply(uppermost, x15)\n    x20 = size(x19)\n    x21 = equality(ONE, x20)\n    x22 = fork(add, first, last)\n    x23 = compose(x22, ulcorner)\n    x24 = argmin(x15, x23)\n    x25 = remove(x24, x15)\n    x26 = lbind(manhattan, x24)\n    x27 = argmin(x25, x26)\n    x28 = lowermost(x27)\n    x29 = lowermost(x24)\n    x30 = subtract(x28, x29)\n    x31 = uppermost(x27)\n    x32 = uppermost(x24)\n    x33 = subtract(x31, x32)\n    x34 = astuple(x30, x33)\n    x35 = maximum(x34)\n    x36 = branch(x21, ZERO, x35)\n    x37 = rightmost(x27)\n    x38 = rightmost(x24)\n    x39 = subtract(x37, x38)\n    x40 = leftmost"], [1.1, "def solve_45dc525b(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = partition(I)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = mostcolor(I)\n    x11 = ofcolor(I, x9)\n    x12 =2 backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = difference(x13, x11)\n    x15 = mostcolor(I)\n    x16 = ofcolor(I, x9)\n    x17 = subgrid(x16, I)\n    x18 = combine(x15, x17)\n    x19 = lbind(greater, x18)\n    x20 = compose(x19, size)\n    x21 = sfilter(x16, x20)\n    x22 = rbind(order, identity)\n    x23 = apply(x22, x21)\n    x24 = Gehve(x23)\n    x25 = apply(x24, x41)\n    x26 = vmirror(x25)\n    x27 = hmirror(x25)\n    x28 = combine(x26, x27)\n    x29 = combine(x28, x41)\n    x30 = ofcolor(x26, x9)\n    x31 = difference(x29, x30)\n    x32 = power(outbox, TWO)\n    x33 = x32(x32)\n    x34 = invert(x33)\n    x35 = ulcorner(x60)\n    x36 = shift(x34, x35)\n    x37 = toindices(x36)\n    x38 = shift(x31, x37)\n    x39 = combine(x33, x38)\n    x40 = shift(x39, invert)\n    x41 = subgrid(x40, I)\n    x42 =608100\n    "], [1.1, "def solve_a221aeb4(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_9ecb9364(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_f78e70a6(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = palette(x6)\n    x8 = argmin(x7, uppermost)\n    x9 = lbind(colorcount, x6)\n    x10 = matcher(x9, x8)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(positive, size)\n    x13 = rbind(sfilter, x11)\n    x14 = lbind(rbind, d9fac)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind(lbind, shift)\n    x17 = rbind(lbind, shift)\n    x18 = chain(x15, x16, x17)\n    x19 =81\n    x20 = fork(combine, x18, identity)\n    x21 = compose(x12, x20)\n    x22 = apply(x21, x11)\n    x23 = asindices(x6)\n    x24 = box(x63)\n    x25 =difference(x23)\n    x26 = subgrid(x25, x6)\n    x27 = apply(most, x26)\n    x28 = order(x27, identity)\n    x29 = lbind(colorcount, x6)\n    x30 = matcher(x29, ZERO)\n    x31 = rbind(sfilter, x3)\n    x32 = lbind(d687, x74)\n    x33 = rbind(x32, x10)\n    x34 = lbind(lbind, shift)\n    x35 =rbind(x34, ONE)\n    x36 = lbind(ofcolor, x6)\n    x37 = compose(x31, x36)\n    x38 = fork(mapply, x37, x30)\n    x39 = apply(x38, x34)\n    x40 = lbind("], [1.1, "def solve_75123968(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_e6332485(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = x4(I)\n    x7 = x5(I)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = hconcat(x6, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, I)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot180)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(002, astuple)\n    x26 = lbind(002, x22)\n    x27 = add(x22, x26)\n    x28 = lbind(37, x24)\n    x29 = add(x28, x27)\n    x30 = shift(x12, x29)\n    x31 = x19(x30)\n    x32 =730001(x31)\n    x33 = palette(I)\n    x34 = palette(x32)\n    x35 = lbind(pair, x30)\n    x36 = compose(x35, product)\n    x37 = lbind(sfilter, x33)\n    x38 = compose(x37, asobject)\n    x39 = rbind(contained, x41)\n    x40 ="], [1.1, "def solve_8e050d24(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_00cab541(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_c1bd6d97(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_d524e8b0(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = asindices(I)\n    x22 = center(x21)\n    x23 = initset(x22)\n    x24 = lbind(manhattan, x23)\n    x25 = compose(initset, x24)\n    x26 = fork(add, x25, x22)\n    x27 =666x25(x20)\n    x28 = outbox(x27)\n    x29 = backdrop(x28)\n    x30 = cover(I, x29)\n    x31 = ulcorner(x20)\n    x32 = increment(x31)\n    x33 = rbind(subtract, x32)\n    x34 =78(x30)\n    x35 = height(I)\n    x36 = increment(x35)\n    x37 =78(x34, x35)\n    x38 = lbind(greater, x36)\n    x39 = compose(x38, first)\n    x40 = sfilter(x4, x39)\n    x41 = apply(x40, x34)\n"], [1.1, "def solve_05613a73(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45651234456712345671234\n    45663333456712345661124\n    45663344566512345671234\n    45653344567712345671234\n    45663333656112345671234\n    45663344567123445661124\n    45663344567123456611244\n    45653344567123456611244\n    45653344567123456611244\n    45653333456712345661124\n    456633444567123456611244\n    456533444567123456611244\n    45663344456712345663344\n    45653344456712345653334\n    45653344456712345653333\n    45653344456712345653334\n    45653334445671234565333\n    45653334445671234566333\n    \"\"\"\n    x2 = palette(I)\n    x3 = mostcolor(I)\n    x4 = remove(x3, x2)\n    x5 = lbind(ofcolor, I)\n    x6 = lbind(prapply, connect)\n    x7 = fork(x6, identity, x5)\n    x8 = compose(x7, x7)\n    x9 = fork(recolor, fork, x8)\n    x10 = mapply(x9, x4)\n    x11 = paint(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = apply(urcorner, x12)\n    x14 = NEG_UNITY(x13)\n    x15 = height(x9"], [1.1, "def solve_c658bda3(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, toindices, box)\n    x4 = fork(multiply, height, width)\n    x5 = fork(equality, size, x4)\n    x6 = compose(flip, x5)\n    x7 = fork(both, x3, x6)\n    x8 = extract(x2, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x9, x10)\n    x12 = other(x11, x8)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(I)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(I)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x12)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, first, last)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, first, last)\n    x41 = chain(size, x39, x40)\n    x42"], [1.1, "def solve_63b11b00(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x101 = palette(I)\n    x10 = remove(x4, x10)\n    x11 = other(x10, x9)\n    x12 = switch(I, x11, T)\n    x13 = shape(I)\n    x14 = canvas(x4, x13)\n    x15 = hconcat(x14, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, x9)\n    x18 = rbind(46 toobject, I)\n    x19 = apply(x18, x17)\n    x20 = colorfilter(x19, x1)\n    x21 = vmirror(x20)\n    x22 = hmirror(x21)\n    x23 = astuple(x22, x8)\n    x24 = ofcolor(x23, x4)\n    x25 = sizefilter(x18, ONE)\n    x26 = difference(x18, x25)\n    x27 = merge(x26)\n    x28 = palette(x27)\n    x29 = lbind(colorcount, x27)\n    x30 = compose(x29, x18)\n    x31 = rbind(sfilter, x30)\n    x32 = compose(x31, x28)\n    x33 = apply(x32, x27)\n    x34 = rbind(vperiod, x30)\n    x35 = apply(x34, x33)\n    x36 = astuple(x34, x35)\n    x37 = contained(x36, x27)\n    x38 = f28(x37)\n    x39 = canvas(x11, x38)\n    O = paint"], [1.1, "def solve_bc108622(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =4(I)\n    x6 = lefthalf(x5)\n    x7 = righthalf(x5)\n    x8 = objects(x6, T, F, T)\n    x9 = merge(x8)\n    x10 = palette(x9)\n    x11 = other(x10, x4)\n    x12 = vsplit(x6, TWO)\n    x13 = hsplit(x9, TWO)\n    x14 = extract(x12, x13)\n    x15 = partition(x14)\n    x16 = sizefilter(x15, x11)\n    x17 = merge(x16)\n    x18 = center(x17)\n    x19 = dmirror(x7)\n    x20 = matcher(identity, x8)\n    x21 = argmin(x19, x20)\n    x22 = subtract(x18, x21)\n    x23 = apply(first, x11)\n    x24 = color(x9)\n    x25 = apply(last, x11)\n    x26 = difference(x23, x25)\n    x27 = subtract(x18, x26)\n    x28 = apply(177, x22)\n    x29 = shift(x28, x27)\n    x30 = ofcolor(x9, x24)\n    x31 = difference(x30, x26)\n    x32 = ofcolor(x13, x24)\n    x33 = difference(x32, x31)\n    x34 = recolor(x24, x33)\n    x35 = lbind(shift, x27)\n    x36 = occurrences(x14, x31)\n    x37 = mapply(x35, x36)\n    x38 = shift(x31, x37)\n    x39 = toobject(x38, x14)\n    x40 = apply(x39, x34)\n    x41 = mapply(xfirst,"], [1.1, "def solve_0d0ace9e(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = rbind(ofcolor, TWO)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = x19(x35)\n    x37 = height(x20)\n    x38 = astuple(x37, x36)\n    x39 = ulcorner(x16)\n    x40 = crop(x20, x39, x38)\n    x41 = apply(last"], [1.1, "def solve_d4da56f1(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = switch(I, THREE, FOUR)\n    x4 = rbind(toobject, I)\n    x5 = chain(numcolors, x4, delta)\n    x6 = matcher(x5, ONE)\n    x7 = asindices(x6)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = chain(size, x9, toindices)\n    x11 = matcher(x10, ZERO)\n    x12 = lbind(add, x8)\n    x13 = chain(flip, x11, x12)\n    x14 = sfilter(x9, x13)\n    x15 = double(x14)\n    x16 = vsplit(x3, x15)\n    x17 = asobject(x16)\n    x18 = height(x17)\n    x19 = mostcolor(I)\n    x20 = vsplit(x17, x19)\n    x21 = lbind(colorcount, x17)\n    x22 = compose(x21, positive)\n    x23 = argmin(x20, x22)\n    x24 = ofcolor(x23, x1)\n    x25 = urcorner(x24)\n    x26 = shoot(x25, UP_RIGHT)\n    x27 = lrcorner(x24)\n    x28 = shoot(x27, NEG_UNITY)\n    x29 = combine(x26, x28)\n    x30 = toindices(x29)\n    x31 = rbind(difference, x30)\n    x32 = compose(x31, toindices)\n    x33 = rbind(greater, x15)\n    x34 = compose(x33, x32)\n    x35 = sfilter(x30, x34)\n    x36 = center(x35)\n    x37 = initset(x36)\n    x38 = difference(x37, x35)\n    x39 = fill(x3, x1, x38)"], [1.1, "def solve_43689960(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = insert(x4, x5)\n    x7 = uppermost(x2)\n    x8 = rightmost(x3)\n    x9 = insert(x7, x8)\n    x10 = leftmost(x2)\n    x11 = equality(x9, x10)\n    x12 = insert(x4, x11)\n    x13 = uppermost(x2)\n    x14 = uppermost(x3)\n    x15 = equality(x13, x14)\n    x16 = leftmost(x2)\n    x17 = equality(x15, x16)\n    x18 = shape(I)\n    x19 = maximum(x18)\n    x20 = lowermost(x2)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = equality(x22, x5)\n    x24 = branch(x23, x22, x20)\n    x25 = branch(x23, x24, x5)\n    x26 = branch(x23, x24, x6)\n    x27 = astuple(x26, x25)\n    x28 = astuple(x24, x6)\n    x29 = add(x28, x27)\n    x30 = initset(x29)\n    x31 = insert(x22, x30)\n    x32 = insert(x25, x31)\n    x33 =ub43(x32)\n    x34 = size(x33)\n    x35 = double(x34)\n    x36 = interval(ZERO, x35, ONE)\n    x37 = apply(tojvec, x36)\n    x38 = astuple(x36, x5)\n    x39 =divide(x38)\n    x40 = lbind(multiply, x39)\n    x41 = apply(x40, x33)\n    x42"], [1.1, "def solve_9832da3a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = lbind(remove, x1)\n    x3 = chain(positive, size, x2)\n    x4 = compose(x3, palette)\n    x5 = multiply(FIVE, UNITY)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(x1)\n    x12 = box(x7)\n    x13 = inbox(x7)\n    x14 = center(x7)\n    x15 = initset(x14)\n    x16 = lbind(toobject, x12)\n    x17 = compose(x4, x16)\n    x18 = lbind(toobject, x13)\n    x19 = compose(x4, x18)\n    x20 = lbind(toobject, x15)\n    x21 = compose(x4, x20)\n    x22 = fork(both, x19, x21)\n    x23 = fork(both, x17, x22)\n    x24 = compose(x23, trim)\n    x25 = compose(box, asindices)\n    x26 = fork(toobject, x25, identity)\n    x27 = compose(palette, x26)\n    x28 = matcher(x27, x11)\n    x29 = lbind(toobject, x10)\n    x30 = chain(palette, x29, trim)\n    x31 = matcher(x30, x11)\n    x32 = compose(minimum, shape)\n    x33 = chain(x32, merge, fgpartition)\n    x34 = matcher(x33, FIVE)\n    x35 = fork(both, x24, x28)\n    x36 = fork(both, x31, x34)\n    x37 = fork(both, x35, x36)\n    x38 = height(I)\n    x39 = subtract(x38, THREE)\n    "], [1.1, "def solve_53c91bec(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_e19c6012(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = frontiers(I)\n    x6 = sfilter(x5, hline)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, identity, dmirror)\n    x10 = x9(I)\n    x11 = ofcolor(x10, x4)\n    x12 = subgrid(x11, x10)\n    x13 = leftmost(x11)\n    x14 = add(x13, ZERO)\n    x15 = rightmost(x11)\n    x16 = add(x15, ZERO)\n    x17 = either(x14, x16)\n    x18 = branch(x17, identity, vmirror)\n    x19 = x18(x10)\n    x20 = ofcolor(x19, x4)\n    x21 = subgrid(x20, x19)\n    x22 = leftmost(x21)\n    x23 = rightmost(x21)\n    x24 = decrement(x23)\n    x25 = lbind(astuple, x24)\n    x26 = apply(x25, x202)\n    x27 = power(x26, TWO)\n    x28 = x27(x11)\n    x29 = x27(x12)\n    x30 = pair(x28, x29)\n    x31 = apply(color, x30)\n    x32 = rbind(contained, x41)\n    x33 = rbind(extract, x32)\n    x34 = chain(first, x33, asindices)\n    x35 = apply(x34, x32)\n    x36 = ofcolor(x35, x4)\n    x37 = sfilter(x36, x35)\n    x38 = mapply(x37, x34)\n    x39 = fill(x35, x4, x38)\n    x40 = shift(x39, x45)\n    O = fill(x40,"], [1.1, "def solve_a8131862(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_c216e671(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =8628511156873437258\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = hmatching(x2, x3)\n    x5 = branch(x4, astuple, ONE)\n    x6 = branch(x4, RIGHT, x5)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = asindices(x8)\n    x10 = shape(x9)\n    x11 = lbind(shift, x9)\n    x12 = compose(x11, tojvec)\n    x13 = chain(x10, x12, last)\n    x14 = x13(x2)\n    x15 = canvas(ZERO, x10)\n    x16 = x13(x2)\n    x17 = paint(x15, x16)\n    x18 = height(x17)\n    x19 = first(x9)\n    x20 = dmirror(x19)\n    x21 = width(x17)\n    x22 = astuple(x21, x19)\n    x23 = increment(x22)\n    x24 =91192907(x23)\n    x25 =14(x24)\n    x26 = width(x17)\n    x27 = astuple(x26, x27)\n    x28 = increment(x27)\n    x29 = increment(x28)\n    x30 = divide(x25, x29)\n    x31 = increment(x30)\n    x32 = canvas(ZERO, x31)\n    x33 = asindices(x32)\n    x34 = shift(x33, x32)\n    x35 = toobject(x34, x12)\n    x36 = mostcolor(x35)\n    x37 = palette(I)\n    x38 = remove(x36, x37)\n    x39 = other(x38, x66666666)\n    x40 =124bordering(x34)\n    x41 = leastcolor(x40)\n    x42 = ofcolor(x40, x"], [1.1, "def solve_7a7f06cb(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_30fa1fe3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_73d9b1ad(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_836960e9(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = dmirror(x16)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(rapply, x27)\n    x34 = chain(first, x33, initset)\n    x35 = fork(compose, x24, x28)\n    x36 = compose(x25, x34)\n    x37 = compose(x26, x35)\n    x38 = fork(sfilter, x37, x36)\n    x39 = lbind(apply, manhattan)\n    x40 = chain(x39, ofcolor, x38)\n"], [1.1, "def solve_5a9e46a3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = partition(I)\n    x8 = fork(multiply, height, width)\n    x9 = fork(equality, size, x8)\n    x10 = sfilter(x7, x9)\n    x11 = argmax(x10, size)\n    x12 =difference(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x1)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = objects(x20, T, F, T)\n    x22 = colorfilter(x21, x1)\n    x23 = difference(x21, x22)\n    x24 = colorfilter(x23, x1)\n    x25 = rbind(adjacent, x11)\n    x26 = rbind(adjacent, x12)\n    x27 = sfilter(x24, x26)\n    x28 = fork(both, x20, x27)\n    x29 = sfilter(x27, x28)\n    x30 = merge(x29)\n    x31 = objects(x30, T, F, T)\n    x32 = apply(center, x31)\n    x33 = compose(flip, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = EIGHT(x35)\n    x37 = combine(x16, x36)\n    x38 = paint(x20, x37)\n    x39 = double(x38)\n    x40 = decrement(x39)\n"], [1.1, "def solve_b368cb6b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 =28866(x3, remove)\n    x5 =74(x4,74)\n    x6 = argmin(x5, x2)\n    x7 = other(x1, x6)\n    x8 = objects(I, T, F, F)\n    x9 = color(x7)\n    x10 = rbind(astuple, x6)\n    x11 = chain(x10, initset, hfrontier)\n    x12 = fork(x44, x11, ulcorner)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x8, x13)\n    x15 = other(x8, x14)\n    x16 = color(x15)\n    x17 = rbind(contained, x16)\n    x18 = compose(x17, lowermost)\n    x19 = rbind(sfilter, x18)\n    x20 =\n    x21 = chain(x19, vfrontier, ulcorner)\n    x22 = fork(add, x17, x21)\n    x23 = fork(connect, x20, x22)\n    x24 = sfilter(x8, x23)\n    x25 = downstream20(x24)\n    x26 = width(I)\n    x27 = subtract(x26, x25)\n    x28 = chain(backdrop, first, x27)\n    x29 = fork(equality, x28, outbox)\n    x30 = sfilter(x25, x29)\n    x31 = rbind(difference, x15)\n    x32 = argmin(x30, x31)\n    x33 = lbind( rbind, manhattan)\n    x34 = rbind(apply, x33)\n    x35 = lbind(rbind, greater)\n    x36 = chain(x34, x35, x28)\n    x37 = sfilter(x32, x36)\n    x38 = fork(difference, x37, x28)\n    "], [1.1, "def solve_271201f7(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_76d028f3(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, astuple)\n    x35 = compose(x34, x30)\n    x36 = rbind(compose, last)\n    x37 = lbind(compose, x30)\n    x38 = chain(x36, x37, x35)\n    x39 = rbind(sfilter, x35)\n    x40 = chain(last, x39, x33)\n    x41 = lbind(compose, x10)\n    x42 = x"], [1.1, "def solve_8664c14a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_724b862a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)\n    x41"], [1.1, "def solve_db64f277(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = other(x15, x17)\n    x19 = color(x18)\n    x20 = astuple(x19, RIGHT)\n    x21 = initset(ZERO_BY_TWx20)\n    x22 = insert(ORIGIN, x21)\n    x23 = recolor(x4, x22)\n    x24 = insert(x20, x23)\n    x25 = dmirror(x24)\n    x26 = lbind(shift, x24)\n    x27 = occurrences(x10, x24)\n    x28 = mapply(x26, x27)\n    x29 = lbind(shift, x25)\n    x30 = occurrences(x10, x25)\n    x31 = halve(x30)\n    x32 = mapply(x29, x31)\n    x33 = combine(x28, x32)\n    x34 = mapply(x24, x33)\n    x35 = cover(x10, x34)\n    x36 = ofcolor(x35, x19)\n    x37 = fill(x35, x39, x36)\n    x38 = ofcolor(x35, x4)\n    x39 = fill(x37, x39, x38)\n    x40 =59478"], [1.1, "def solve_d8483a17(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, DOWN, x19)\n    x21 = fork(combine, x18, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, llcorner, ulcorner)\n    x24 = fork(connect, lrcorner, x23)\n    x25 = fork(combine, x22, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, llcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(both, x28, x30)\n    x34 = fork(both, x32, x33)\n"], [1.1, "def solve_ac47079d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = add(x14, ONE)\n    x16 = width(I)\n    x17 = decrement(x10)\n    x18 = subtract(x16, x17)\n    x19 = divide(x18, x10)\n    x20 = add(x19, ONE)\n    x21 = lbind(box, ORIGIN)\n    x22 = compose(x21, toindices)\n    x23 = chain(size, x17, x22)\n    x24 = F25fb75 x34(I)\n    x25 = fork(44, x24, x23)\n    x26 = multiply(x25, x19)\n    x27 = power(x26, x22)\n    x28 = urcorner(x2)\n    x29 = lbind(remove, x28)\n    x30 = chain(double, x29, x25)\n    x31 = rbind(ofcolor, x1)\n    x32 = compose(x31, x30)\n    x33 = fork(subtract, x32, x30)\n    x34 = fork(multiply, x30, x33)\n    x35 = fork(add, x04, x34)\n    x36 = compose(x35, x29)\n    x37 = lbind(rbind, equality)\n    x38 = rbind(compose, x38)\n    x39 = lbind(rbind, x38)\n    x40 = chain(x37, x38, x39)\n    x41"], [1.1, "def solve_984d6a42(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_d4dafced(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = rbind(greater, ONE)\n    x9 = chain(size, dedupe, last)\n    x10 = compose(x8, x9)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, first)\n    x13 = chain(first, x11, x12)\n    x14 = compose(x10, x13)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = mostcolor(I)\n    x20 = trim(I)\n    x21 = palette(x20)\n    x22 = other(x21, x19)\n    x23 = asindices(I)\n    x24 = box(x23)\n    x25 = toobject(x24, I)\n    x26 = palette(x25)\n    x27 = other(x26, x19)\n    x28 = ofcolor(x18, x27)\n    x29 = ofcolor(x18, x22)\n    x30 = prapply(connect, x28, x29)\n    x31 = mfilter(x30, vline)\n    x32 = underfill(x18, x27, x31)\n    x33 = matcher(numcolors, TWO)\n    x34 = objects(x32, F, F, T)\n    x35 = sfilter(x34, x33)\n    x36 = difference(x34, x35)\n    x37 = colorfilter(x36, x27)\n    x38 = mapply(toindices, x37)\n    x39 = apply(urcorner, x35)\n    x40 ="], [1.1, "def solve_772bc527(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = compose( percentages, x6)\n    x9 = matcher(x7, ZERO)\n    x10 = matcher(x8, TEN)\n    x11 = sfilter(x2, x9)\n    x12 = sfilter(x2, x10)\n    x13 = lbind(colorcount, I)\n    x14 = argmax(x11, x12)\n    x15 = subgrid(x14, I)\n    x16 = rot90(x15)\n    x17 = matcher(x13, x16)\n    x18 = rot180(x14)\n    x19 = matcher(x17, x18)\n    x20 = rot270(x19)\n    x21 = matcher(x14, x20)\n    x22 = rbind(compose,flip)\n    x23 = lbind(compose, x17)\n    x24 = lbind(x23, x202)\n    x25 = compose(x24, x21)\n    x26 = compose(initset, x25)\n    x27 = fork(rapply, x26, identity)\n    x28 = compose(first, x27)\n    x29 = compose(x20, x28)\n    x30 = fork(x22, x29, identity)\n    x31 = compose(asobject, x30)\n    x32 = apply(x31, x11)\n    x33 = first(x32)\n    x34 = last(x31)\n    x35 =    010040(x33)\n    x36 =884(x35, x34)\n    x37 = ofcolor(x36, x24)\n    x38 = size(x37)\n    x39 = positive(x38)\n    x40 = branch(x39"], [1.1, "def solve_32069404(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = compose(x20, x15)\n    x22 = lbind(x16, x21)\n    x23 = chain(x10, x22, decrement)\n    x24 = lbind(fork, x19)\n    x25 = compose(x14, x23)\n    x26 = fork(x24, x25, x26)\n    x27 = lbind(chain, x17)\n    x28 = lbind(rbind, subtract)\n    x29 = compose(x27, x28)\n    x30 = lbind(28, astuple)\n    x31 = compose(x30, x29)\n    x32 = fork(x27, x31, x29)\n    x33 = lbind(matcher, first)\n    x34 = compose(x33, x15)\n    x35 = fork(sfilter, x32, x34)\n    x36 = rbind(compose, x10)\n    x37 = lbind(lbind, add)\n    x38 = chain(x36, x37, x51)\n"], [1.1, "def solve_05ab4b1a(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_f8f8b25b(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_27f4985b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = paint(x6, x6)\n    x8 = compose(increment, double)\n    x9 =88(greater, FOUR)\n    x10 = compose(x8, x9)\n    x11 =44(x7)\n    x12 = sfilter(x11, x10)\n    x13 = paint(x7, x12)\n    x14 = asobject(x13)\n    x15 = occurrences(x7, x14)\n    x16 = matcher(first, x4)\n    x17 = FIRST(x15)\n    x18 = sfilter(x14, x17)\n    x19 = occurrences(x7, x18)\n    x20 = colorfilter(x19, FOUR)\n    x21 = first(x20)\n    x22 = asobject(x21)\n    x23 = occurrences(x7, x22)\n    x24 = pair(x17, x23)\n    x25 = size(x24)\n    x26 = positive(x25)\n    x27 = branch(x26, x24, x25)\n    x28 = canvas(x27, UNITY)\n    x29 = asobject(x28)\n    x30 = occurrences(x7, x29)\n    x31 = apply(first, x30)\n    x32 = chain(last, positive, first)\n    x33 = branch(x26, x31, x32)\n    x34 = height(x29)\n    x35 = divide(x34, THREE)\n    x36 = astuple(x35, x35)\n    x37 = x32(x36)\n    x38 = ofcolor(x37, x4)\n    x39 = backdrop(x38)\n    x40 = lbind(contained, x4)\n    x41 = compose(x40, last)\n    x42"], [1.1, "def solve_5daf0dc1(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d8540b4f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = height(x36)\n    x37 = height(x28)\n    x38 = interval(ZERO, x37, ONE)\n    x39 = lbind(remove, ZERO)\n    x40 = x39(x38)\n    x41 = x39(x40)\n    "], [1.1, "def solve_57b5709e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = palette(I)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = astuple(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, ulcorner, urcorner)\n    x12 = fork(connect, ulcorner, llcorner)\n    x13 = fork(combine, x11, x12)\n    x14 = fork(equality, toindices, x13)\n    x15 = fork(connect, urcorner, ulcorner)\n    x16 = fork(connect, urcorner, lrcorner)\n    x17 = fork(combine, x15, x16)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(connect, llcorner, ulcorner)\n    x20 = fork(connect, llcorner, lrcorner)\n    x21 = fork(combine, x19, x20)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(connect, lrcorner, llcorner)\n    x24 = fork(connect, lrcorner, urcorner)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(contained, lrcorner, toindices)\n    x28 = compose(flip, x27)\n    x29 = fork(contained, llcorner, toindices)\n    x30 = compose(flip, x29)\n    x31 = fork(contained, urcorner, toindices)\n    x32 = compose(flip, x31)\n    x33 = fork(contained, ulcorner, toindices)\n    x34 = compose(fl"], [1.1, "def solve_35cd347a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = compose(maximum, shape)\n    x8 = fork(multiply, height, width)\n    x9 = fork(equality, size, x8)\n    x10 = sfilter(x6, x9)\n    x11 = argmax(x10, x7)\n    x12 = difference(x5, x11)\n    x13 = apply(initset, x12)\n    x14 = rbind(colorcount, x1)\n    x15 = argmin(x13, x14)\n    x16 = size(x15)\n    x17 = double(x16)\n    x18 =)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = apply(tojvec, x18)\n    x20 = mpapply(shift, x15, x19)\n    x21 = paint(I, x20)\n    x22 = double(x16)\n    x23 = astuple(x22, x23)\n    x24 = canvas(x1, x23)\n    x25 = fill(x21, ZERO, x2)\n    x26 = lbind(hsplit, x24)\n    x27 = chain(x26, x25, xpartmost)\n    x28 = objects(x25, T, F, T)\n    x29 = sfilter(x28, x27)\n    x30 = pair(x29, x29)\n    x31 = merge(x30)\n    x32 = rot90(x31)\n    x33 = fgpartition(x32)\n    x34 = merge(x33)\n    x35 = rot270(x34)\n    x36 = shape(x35)\n    x37 = lbind(recolor, x1)\n    x38 = lbind(mapply, x37)\n    x39 = chain(x38, x34, x39)\n    x"], [1.1, "def solve_7d5bac32(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = repeat(NEG_ONE, ONE)\n    x5 = combine(x3, x4)\n    x6 = multiply(TEN, TEN)\n    x7 = apply(center, x2)\n    x8 = astuple(x6, x6)\n    x9 = repeat(x8, ONE)\n    x10 = combine(x7, x9)\n    x11 = identity(I)\n    x12 = asindices(I)\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = halve(x14)\n    x16 = add(TWO, x15)\n    x17 = interval(ONE, x16, ONE)\n    x18 = compose(outbox, outbox)\n    x19 = lbind(power, x18)\n    x20 = apply(x19, x17)\n    x21 = lbind(rapply, x20)\n    x22 = chain(merge, x21, initset)\n    x23 = fork(combine, initset, x22)\n    x24 = lbind(rbind, manhattan)\n    x25 = rbind(chain, initset)\n    x26 = rbind(x25, x24)\n    x27 = lbind(rbind, apply)\n    x28 = lbind(apply, initset)\n    x29 = rbind(remove, x10)\n    x30 = chain(x26, x27, x28)\n    x31 = chain(x30, x29, last)\n    x32 = lbind(sfilter, x12)\n    x33 = rbind(compose, initset)\n    x34 = lbind(compose, minimum)\n    x35 = lbind(fork, greater)\n    x36 = compose(x34, x31)\n    x37 = compose(initset, last)\n    x38 = chain(x33, x24, x37)\n    x39 = fork(x35, x"], [1.1, "def solve_d71f801d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = merge(x4)\n    x2 = repeat(x1, TWO)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x3, x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(dmirror, x6)\n    x8 = fork(difference, identity, x7)\n    x9 = order(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(x10, x9)\n    x12 = lbind(ofcolor, I)\n    x13 = compose(x12, x11)\n    x14 = fork(difference, x13, toindices)\n    x15 = compose(x14, x11)\n    x16 = lbind(argmin, x5)\n    x17 = chain(x16, x17, x19)\n    x18 = lbind(recolor, xIVE)\n    x19 = chain(x18, palette, x15)\n    x20 = fork(combine, x15, x19)\n    x21 = remove(x1, x9)\n    x22 =(x21, x22)\n    x23 = power(x18, TWO)\n    x24 = x23(x22)\n    x25 = lbind(rapply, x24)\n    x26 = chain(first, x25, initset)\n    x27 = x26(x24)\n    x28 = x25(x27)\n    x29 = initset(x28)\n    x30 = fork(rapply, x22, x29)\n    x31 = compose(first, x30)\n    x32 = multiply(TEN, THREE)\n    x33 = power(x31, x32)\n    x34 = astuple(x23, x33)\n    x35 = mostcolor(I)\n    x36 = canvas(x35, x34)\n    x37 = astuple(x23, x36)\n    x38 = ofcolor(x37, x39)\n    x39"], [1.1, "def solve_6e115a88(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = rbind(add, UNITY)\n    x4 = chain(x2, x3, lrcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(add, UP_RIGHT)\n    x8 = chain(x6, x7, urcorner)\n    x9 = fork(recolor, color, x8)\n    x10 = rbind(shoot, NEG_UNITY)\n    x11 = rbind(add, NEG_UNITY)\n    x12 = chain(x10, x11, ulcorner)\n    x13 = fork(recolor, color, x12)\n    x14 = rbind(shoot, DOWN_LEFT)\n    x15 = rbind(add, DOWN_LEFT)\n    x16 = chain(x14, x15, llcorner)\n    x17 = fork(recolor, color, x16)\n    x18 = fork(remove, lrcorner, toindices)\n    x19 = fork(equality, toindices, x18)\n    x20 = sfilter(x1, x19)\n    x21 = fork(remove, urcorner, toindices)\n    x22 = fork(equality, toindices, x21)\n    x23 = sfilter(x1, x22)\n    x24 = fork(remove, ulcorner, toindices)\n    x25 = fork(equality, toindices, x24)\n    x26 = sfilter(x1, x25)\n    x27 = fork(remove, llcorner, toindices)\n    x28 = fork(equality, toindices, x27)\n    x29 = sfilter(x1, x28)\n    x30 = mapply(x5, x20)\n    x31 = mapply(x9, x23)\n    x32 = combine(x30, x31)\n    x33 = mapply(x13, x26)\n    x34 = mapply("], [1.1, "def solve_8523cc69(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = repeat(NEG_ONE, ONE)\n    x5 = combine(x3, x4)\n    x6 = multiply(TEN, TEN)\n    x7 = apply(center, x2)\n    x8 = astuple(x6, x6)\n    x9 = repeat(x8, ONE)\n    x10 = combine(x7, x9)\n    x11 = identity(I)\n    x12 = asindices(I)\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = halve(x14)\n    x16 = add(x15, UP)\n    x17 = interval(ONE, x16, ONE)\n    x18 = compose(outbox, outbox)\n    x19 = rbind(x18, ONE)\n    x20 = initset(x16)\n    x21 = rbind(x19, x20)\n    x22 = apply(x21, x17)\n    x23 = lbind(repeat, x22)\n    x24 = rbind(ofcolor, x6)\n    x25 = matcher(x23, x22)\n    x26 = compose(x24, x25)\n    x27 = apply(x26, x3)\n    x28 = pair(x19, x27)\n    x29 = lbind(rapply, x27)\n    x30 = fork(rapply, x29, identity)\n    x31 = compose(first, x30)\n    x32 = compose(x31, x26)\n    x33 = fork(connect, x Fater, x32)\n    x34 = mapply(x33, x28)\n    x35 = fill(I, ZERO, x34)\n    x36 =O = vmirror(x35)\n    x37 = shape(x36)\n    x38 = add(x37, DOWN)\n    x39 = index(x36, x38)\n    x40 = equality(x39, x40)\n"], [1.1, "def solve_f3be7fc9(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_7054861c(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(toindices, I)\n    x3 = lbind(x2, x1)\n    x4 = compose(x3, frontiers)\n    x5 = fgpartition(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x6)\n    x9 = merge(x6)\n    x10 = cover(I, x9)\n    x11 = paint(x10, x8)\n    x12 = lbind(argmin, x5)\n    x13 = compose(x12, initset)\n    x14 = chain(crement, x13, x7)\n    x15 =35(x14)\n    x16 = mapply(x15, x15)\n    O = paint(x11, x16)\n    return O"], [1.1, "def solve_88746434(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    x4 = canvas(x2, x3)\n    x5 =86(HAMve, x4)\n    x6 = objects(I, T, F, F)\n    x7 = argmax(x6, size)\n    x8 = color(x7)\n    x9 = objects(I, T, F, F)\n    x10 = remove(x7, x9)\n    x11 = merge(x10)\n    x12 = subgrid(x11, I)\n    x13 = chain(halve, frontiers, merge)\n    x14 = lefthalf(x12)\n    x15 = righthalf(x12)\n    x16 = vmirror(x15)\n    x17 = chain(x13, x24, x16)\n    x18 = fork(gravitate, invert, height)\n    x19 = fork(crement, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x9)\n    x22 = paint(x12, x21)\n    O = paint(x22, x3)\n    return O"], [1.1, "def solve_f6571838(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    x18 = index(x11, x17)\n    x19 = shape(x11)\n    x20 = decrement(x19)\n    x21 = index(x11, x20)\n    x22 = replace(x16, THREE, x12)\n    x23 = color(x12)\n    x24 = ofcolor(x16, x23)\n    x25 =4448(x24)\n    x26 = ofcolor(x31, x23)\n    x27 = recolor(x25, x26)\n    x28 = intersection(x25, x27)\n    O = fill(x16, THREE, x28)\n    return O"], [1.1, "def solve_2b20c83a(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(toindices, FOUR)\n    x3 = fork(22, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror v8, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.1, "def solve_acbf2cc5(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = ulcorner(x3)\n    x5 = mfilter(x3, x4)\n    x6 =1979(x5)\n    x7 = equality(x6, SIX)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, T)\n    x11 = colorfilter(x10, x1)\n    x12 = difference(x10, x11)\n    x13 = rbind(shoot, DOWN)\n    x14 = mapply(x13, x12)\n    x15 = underfill(x9, x1, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, x1)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [1.1, "def solve_02acbb3f(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = subgrid(x3, x2)\n    x6 = palette(x4)\n    x7 = contained(ONE, x6)\n    x8 = branch(x7, x5, x4)\n    x9 = asindices(x8)\n    x10 = lowermost(x9)\n    x11 = index(I, x10)\n    x12 = equality(x11, SIX)\n    x13 = branch(x12, ulcorner, urcorner)\n    x14 = x13(x2)\n    x15 = index(I, x14)\n    x16 = equality(x15, SEVEN)\n    x17 =8899(x16, x17)\n    x18 = fork(combine, identity, vmirror)\n    x19 = x18(x2)\n    x20 = shape(I)\n    x21 = index(I, x20)\n    x22 = subgrid(x3, I)\n    x23 = x21(x22)\n    x24 = ofcolor(x23, ONE)\n    x25 = recolor(x4, x24)\n    x26 = shift(x25, UNITY)\n    x27 = paint(I, x26)\n    O = trim(x27)\n    return O"], [1.1, "def solve_120f359c(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = width(I)\n    x5 = astuple(x4, x4)\n    x6 = ulcorner(x2)\n    x7 = lrcorner(x2)\n    x8 = add(x6, NEG_UNITY)\n    x9 = add(x7, UP_RIGHT)\n    x10 = add(x8, DOWN_LEFT)\n    x11 = add(x5, UNITY)\n    x12 = hfrontier(x11)\n    x13 = fill(I, x3, x12)\n    x14 = add(x6, UNITY)\n    x15 = subtract(x4, x14)\n    x16 = insert(x15, x13)\n    x17 = width(I)\n    x18 =511(x17, x19)\n    x19 = add(x5, x18)\n    x20 =557(I)\n    x21 =insert(x7, x20)\n    x22 = width(I)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(contained, x23)\n    x25 = compose(x24, last)\n    x26 = sfilter(x21, x25)\n    x27 = paint(x13, x26)\n    O = rot90(x27)\n    return O"], [1.1, "def solve_ff3aa2c4(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 =677(x3, DOWN_LEFT)\n    x9 = astuple(x8, x7)\n    x10 = ulcorner(x2)\n    x11 = index(I, x10)\n    x12 = subgrid(x11, I)\n    x13 = asindices(x12)\n    x14 = remove(x13, x1)\n    x15 = lbind(contained, x9)\n    x16 = compose(x15, first)\n    x17 = rbind(s5, x16)\n    x18 = compose(x17, hmirror)\n    x19 = fork(combine, x18, identity)\n    x20 = compose(x19, identity)\n    x21 = lbind(apply, last)\n    x22 = compose(x21, last)\n    x23 = rbind(compose,(x22)\n    x24 = lbind(rbind, extract)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x5)\n    x27 = compose(x26, x16)\n    x28 = fork(sfilter, x25, x27)\n    x29 = compose(x23, x28)\n    x30 = fork(mapply, x29, x hands)\n    x31 = fork(recolorers, x30, identity)\n    x32 = mapply(x31, x14)\n    O = paint(I, x32)\n    return O"], [1.1, "def solve_1b0968a5(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = subgrid(x2, I)\n    x4 = frontiers(x3)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(x3)\n    x12 = decrement(x11)\n    x13 =subgrid(x2, x3)\n    x14 = divide(x12, x13)\n    x15 = width(x3)\n    x16 = decrement(x15)\n    x17 = asobject(x8)\n    x18 = objects(x39, x14, size878811111\n    x19 = initset(ORIGIN)\n    x20 = insert(x77, x19)\n    x21 = product(x20, x20)\n    x22 = fork(connect, ulcorner, lrcorner)\n    x23 = fork(equality, toindices, x22)\n    x24 = sfilter(x21, x23)\n    x25 = size(x24)\n    x26 = positive(x25)\n    x27 = branch(x26, identity, hmirror)\n    x28 = x27(x4)\n    x29 = subgrid(x28, x29)\n    x30 = asobject(x29)\n    x31 = matcher(first, x2)\n    x32 = compose(flip, x31)\n    x33 = fork(both, x30, x32)\n    x34 = sfilter(x30, x33)\n    x35 = paint(x29, x34)\n    O = x27(x35)\n    return O"], [1.1, "def solve_a4524ec2(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = fork(product, identity, identity)\n    x3 = lbind(canvas, ZERO)\n    x4 = compose(asobject, x3)\n    x5 = fork(multiply, first, last)\n    x6 = apply(x4, x1)\n    x7 = intersection(x6, x1)\n    x8 = fork(equality, identity, hmirror)\n    x9 = extract(x7, x8)\n    x10 = last(x9)\n    x11 = remove(x10, x7)\n    x12 =ing(x11, x2)\n    x13 = argmin(x12, uppermost)\n    x14 = argmax(x12, uppermost)\n    x15 = rightmost(x14)\n    x16 = leftmost(x14)\n    x17 = astuple(x15, x16)\n    x18 = add(x17, x13)\n    x19 = initset(x18)\n    x20 = insert(x13, x19)\n    x21 = insert(x16, x20)\n    x22 = combine(x6, x21)\n    x23 = intersection(x21, x22)\n    x24 = fill(I, THREE, x23)\n    x25 = fgpartition(x24)\n    x26 = argmax(x25, size)\n    x27 = other(x25, x26)\n    x28 = objects(x24, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = difference(x28, x29)\n    x31 = colorfilter(x30, x27)\n    x32 =FH FLutation(x31, x26)\n    x33 = rbind(gravitate, x23)\n    x34 = compose(x33, initset)\n    x35 = fork(add, identity, x34)\n    x36 = fork(connect, identity, x35)\n    x37 = mapply(x36, x32)\n    O = fill(x24, TWO, x37)\n    return O"], [1.1, "def solve_60ee27ff(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = backdrop(x2)\n    x5 = toobject(x4, I)\n    x6 = mostcolor(x5)\n    x7 =2color(I, x6)\n    x8 =8efc(contained, x7)\n    x9 =82140(x8)\n    x10 =08ed94 fgpartition(I)\n    x11 = merge(x10)\n    x12 = vmirror(x11)\n    x13 = hmirror(x12)\n    x14 = astuple(NEG_TWO, NEG_TWO)\n    x15 = shift(x13, x14)\n    x16 = ulcorner(x15)\n    x17 = urcorner(x15)\n    x18 = shoot(x16, UNITY)\n    x19 = shoot(x17, NEG_UNITY)\n    x20 = combine(x18, x19)\n    x21 = underfill(I, x3, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, x6)\n    x24 = rbind(adjacent, x2)\n    x25 = sfilter(x23, x24)\n    x26 = mfilter(x25, ONE)\n    x27 = paint(x21, x26)\n    O = subgrid(x26, x27)\n    return O"], [1.1, "def solve_02e7d952(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =7mirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = paint(x9, x3)\n    return O"], [1.1, "def solve_f7b0247d(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = initset(x4)\n    x6 = manhattan(x5, x4)\n    x7 = asindices(I)\n    x8 = lbind(toindices, x7)\n    x9 = fork(difference, x8, shape)\n    x10 = compose(x9, initset)\n    x11 = fork(manhattan, x10, x7)\n    x12 = initset(x6)\n    x13 = rbind(manhattan, x12)\n    x14 = compose(x13, initset)\n    x15 = fork(argmin, x11, x14)\n    x16 = height(x3)\n    x17 = delta(x3)\n    x18 =1996alf(x16)\n    x19 = product(x17, x17)\n    x20 = intersection(x19, x8)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = colorfilter(x19, x24)\n    x26 = fgpartition(I)\n    x27 = merge(x26)\n    x28 = paint(I, x27)\n    x29 = chain(normalize, toindices, x1)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x29, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x28)\n    O = paint(x28, x33)\n    return O"], [1.1, "def solve_542ad0ab(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = rbind(connect, x3)\n    x5 = rbind(subtract, THREE)\n    x6 = compose(x5, x4)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x2, x7)\n    x9 = fork(connect, first, last)\n    x10 =89redelta(x2)\n    x11 = fork(recolor, x9, x10)\n    x12 = mapply(x11, x8)\n    O = paint(I, x12)\n    return O"], [1.1, "def solve_304ddff7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = first(I)\n    x2 = dneighbors(x1)\n    x3 = insert(UNITY, x2)\n    x4 = center(x3)\n    x5 = merge(x1)\n    x6 = cover(I, x5)\n    x7 = push(x4, DOWN)\n    x8 = initset(x4)\n    x9 = insert(x5, x8)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, TWO, x4)\n    x12 =\n    x13 = x11(x6)\n    x14 = fill(x11, ONE, x12)\n    x15 = fill(x14, FOUR, x13)\n    x16 = merge(x9)\n    x17 = fill(x15, SIX, x16)\n    x18 = paint(x17, x12)\n    x19 = first(x18)\n    O = dmirror(x19)\n    return O"], [1.1, "def solve_d885a777(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 =885(max, shape)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(size, delta)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = contained(I, x5)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = x9(I)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(first, x11)\n    x13 = first(x12)\n    x14 = matcher(first, x2)\n    x15 = sfilter(x13, x14)\n    x16 = size(x15)\n    x17 =rightmost(x15)\n    x18 = lefthalf(x16)\n    x19 = righthalf(x16)\n    x20 = ofcolor(x11, x6)\n    x21 = ofcolor(x12, xshift)\n    x22 = combine(x20, x21)\n    x23 = intersection(x22, x15)\n    x24 = difference(x22, x23)\n    O = fill(x11, EIGHT, x24)\n    return O"], [1.1, "def solve_1e097ada(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =403723455(I)\n    x3 = objects(I, T, F, T)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = sizefilter(x6, ONE)\n    x8 = apply(color, x7)\n    x9 = totuple(x8)\n    x10 = apply(color, x9)\n    x11 = mostcommon(x10)\n    x12 = palette(I)\n    x13 = remove(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = ofcolor(I, x13)\n    x17 = ofcolor(I, x15)\n    x18 = combine(x16, x17)\n    x19 = difference(x18, x18)\n    x20 = toobject(x19, I)\n    x21 = apply(initset, x18)\n    x22 = rbind(ofcolor, x13)\n    x23 = rbind(gravitate, x20)\n    x24 = compose(x23, x22)\n    x25 = fork(recolor, color, x24)\n    x26 = mapply(x25, x21)\n    O = paint(I, x26)\n    return O"], [1.1, "def solve_10b6296f(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(combine, hfrontier, vfrontier)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = fork(multiply, x6, x7)\n    x9 = fork(multiply, x8, x6)\n    x10 = fork(greater, x8, x9)\n    x11 = extract(x5, x10)\n    x12 = other(x5, x11)\n    x13 = color(x12)\n    x14 = box(x15)\n    x15 = remove(x14, x15)\n    x16 = lbind(vmatching, x14)\n    x17 = first(x16)\n    x18 = dmirror(x17)\n    x19 = hmirror(x18)\n    x20 = astuple(x19, x17)\n    x21 = lbind(hmatching, x17)\n    x22 =1(x21)\n    x23 = argmin(x20, x22)\n    x24 = color(x23)\n    x25 = ofcolor(I, x24)\n    x26 = recolor(x23, x25)\n    x27 = initset(x16)\n    x28 = insert(x16, x27)\n    x29 = insert(x28, x28)\n    x30 = insert(x27, x29)\n    x31 =773(EIGHT)\n    x32 = rbind(greater, x31)\n    x33 = compose(x32, size)\n    x34 = sfilter(x30, x33)\n    x35 = mapply(x27, x34)\n    x36 = difference(x35, x24)\n    O = fill(I, x24, x36)\n    return O"], [1.1, "def solve_8ad0f7f7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = order(x1, height)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = remove(x3, x2)\n    x6 =astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = colorfilter(x5, ONE)\n    x9 =8899 merge(x8)\n    x10 = product(x1, x9)\n    x11 = power(FOUR, THREE)\n    x12 = astuple(x11, x10)\n    x13 = crop(I, ORIGIN, x12)\n    x14 = width(x13)\n    x15 = astuple(x14, x10)\n    x16 = canvas(ZERO, x15)\n    x17 = upscale(x16, LEFT)\n    x18 = interval(ONE, FIVE, ONE)\n    x19 = lbind(multiply, x15)\n    x20 = apply(x19, x18)\n    x21 = lbind(shift, x17)\n    x22 = mapply(x21, x20)\n    x23 = fill(I, FOUR, x22)\n    O = canvas(ZERO, x15)\n    return O"], [1.1, "def solve_d3375c15(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = Culturemirror(I)\n    x2 = partition(x1)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = remove(x4, x2)\n    x7 = argmax(x6, x3)\n    x8 = product(x7, x7)\n    x9 = power(first, TWO)\n    x10 = power(last, TWO)\n    x11 = fork(astuple, x9, x10)\n    x12 = apply(x11, x8)\n    x13 =, ZERO)\n    x14 = rbind(ofcolor, x5)\n    x15 = compose(x14, x12)\n    x16 = fork(connect, first, last)\n    x17 = apply(x16, x13)\n    x18 = intersection(x12, x17)\n    x19 = fill(x1, x5, x18)\n    x20 = difference(x1, x18)\n    O = fill(x19, TWO, x20)\n    return O"], [1.1, "def solve_2a08f97a(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove22x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop, all TL Abandon)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.1, "def solve_8b8b1bb2(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =15mirror(x2)\n    x4 = astuple(NEG_TWO, NEG_TWO)\n    x5 = shift(x3, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x2)\n    x8 = rbind(mapply, x7)\n    x9 = rbind(ofcolor, TWO)\n    x10 = chain(x8, x9, x7)\n    x11 = x10(x1)\n    x12 = vsplit(I, x11)\n    x13 = hsplit(I, x11)\n    x14 = rbind(x13, x12)\n    x15 = rbind(x14, x13)\n    x16 = chain(x15, x13, x7)\n    x17 = mapply(x16, x14)\n    x18 = fork(intersection, x17, first)\n    x19 = mapply(x18, x15)\n    O = fill(I, EIGHT, x19)\n    return O"], [1.1, "def solve_5c686c53(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =180(x1)\n    x3 = shoot(x2, DOWN)\n    x4 = height(x2)\n    x5 = shoot(x4, NEG_UNITY)\n    x6 = frontiers(x2)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x8, x5)\n    x10 = x11(x9)\n    x11 = shoot(x10, UNITY)\n    x12 = shape(x2)\n    x13 = canvas(x8, x12)\n    x14 = hconcat(x13, I)\n    x15 = crop(x14, ORIGIN, x5)\n    x16 = dmirror(x15)\n    x17 = mostcolor(x16)\n    x18 =17(x16)\n    x19 = hsplit(x18, THREE_BY_THREE)\n    x20 = rbind(ofcolor, x7)\n    x21 = compose(x20, initset)\n    x22 = fork( recognizes Mon LEFT, x21, identity)\n    x23 = compose(backdrop, x22)\n    x24 = mapply(x23, x19)\n    O = fill(x14, x7, x24)\n    return O"], [1.1, "def solve_0ef84ee5(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = trim(I)\n    x2 = objects(x1, T, F, F)\n    x3 = asindices(x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = mapply(box, x7)\n    x9 = fill(x8, FOUR, x8)\n    x10 =9173336(x7)\n    x11 =9173336(x10)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = interval(ZERO, x13, ZERO)\n    x16 = Fapply(tojvec, x14)\n    x17 = mapply(tojvec, x15)\n    x18 = fill(x9, FOUR, x17)\n    x19 = fill(x18, FOUR, x16)\n    x20 = fill(x19, FOUR, x18)\n    x21 = fill(x20, FOUR, x16)\n    x22 = fill(x21, THREE, x18)\n    x23 = fill(x22, THREE, x5)\n    O = fill(x23, inches, x8)\n    return O"], [1.1, "def solve_4e71f9a7(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 =911999(I)\n    x2 = mostcolor(I)\n    x3 =133333(I)\n    x4 = replace(I, x2, x3)\n    x5 = compress(x4)\n    x6 = width(x5)\n    x7 = halve(x6)\n    x8 = upscale(x5, x7)\n    x9 = objects(x8, T, F, F)\n    x10 = sizefilter(x9, ONE)\n    x11 = merge(x10)\n    x12 = vmirror(x11)\n    x13 = hconcat(x5, x12)\n    x14 = hmirror(x13)\n    x15 = vconcat(x14, x13)\n    x16 = vconcat(x15, x13)\n    O = cellwise(x2, x16, ZERO)\n    return O"], [1.1, "def solve_44d5d93d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = insert(x7, x9)\n    x11 = product(x10, x10)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(x15, x15)\n    x17 =\n    x16(I)\n    x18 = mapply(x12, x17)\n    x19 = fill(x18, x3, x19)\n    x20 = toobject(x18, I)\n    x21 = apply(x20, x20)\n    x22 = shift(x21, UNITY)\n    O = fill(x19, x3, x22)\n    return O"], [1.1, "def solve_04092ab5(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =048(d687)\n    x3 = objects(I, T, F, T)\n    x4 = apply(ulcorner, x3)\n    x5 = astuple(x1, x2)\n    x6 = rbind(shoot, x5)\n    x7 = mapply(x6, x4)\n    x8 = fill(I, x1, x7)\n    x9 = mapply(delta, x3)\n    O = fill(x8, ZERO, x9)\n    return O"], [1.1, "def solve_8b7dbc09(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =69mirror(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.1, "def solve_ab1bae31(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = input:\n    53333333333333333356333\n    33333333333333333333333\n    31333333333333333335333\n    31111333333333333333333\n    31111333333333333333343\n    31111333333333333333343\n    33333999933333333333343\n    33333999933333333566123\n    33333993333333333561223\n    333339933333333355611223\n    33333999933333335561233\n    33333999933333373356123\n    33333333333333333333633\n    33333333333333333333333\n    33333333333333333333333\n    33333333333333333333333\n    33333333333333333333333\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.1, "def solve_be934637(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(x1, THREE_BY_THREE)\n    x5 = normalize(x3)\n    x6 = lbind(toindices, x5)\n    x7 = compose(x6, normalize)\n    x8 = increment(xTWO)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = lbind(toobject, I)\n    x11 = compose(x10, mostcolor)\n    x12 = lbind(toobject, I)\n    x13 = compose(x12, mostcolor)\n    x14 = fork(both, x11, x13)\n    x15 = asindices(I)\n    x16 = box(15)\n    x17 = toobject(x16, I)\n    x18 =99(x17, I)\n    x19 = lbind(toobject, I)\n    x20 = compose(x19, mostcolor)\n    x21 = rbind(toobject, I)\n    x22 = compose(x21, mostcolor)\n    x23 = rbind(add, TWO)\n    x24 = compose(x23, x14)\n    x25 = rbind(add, THREE)\n    x26 = compose(x25, x14)\n    x27 = rbind(add, THREE)\n    x28 = compose(x27, x16)\n    x29 = fork(combine, x24, x28)\n    x30 = fork(recolor, x30, x29)\n    x31 = mapply(x30, x9)\n    O = paint(I, x31)\n    return O"], [1.1, "def solve_142366d0(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =38(I, T, T, T)\n    x3 = fork(combine, vfrontier, hfrontier)\n    x4 = compose(x3, x2)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = add(SIX, SIX)\n    O = crop(x7, x8, x2)\n    return O"], [1.1, "def solve_652d9ece(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = index(I, ORIGIN)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = height(x2)\n    x6 = decrement(x5)\n    x7 = astuple(x6, x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = height(x2)\n    x10 = decrement(x9)\n    x11 = astuple(x10, x9)\n    x12 = shoot(x11, UP_RIGHT)\n    x13 = toastuple(x12, x11)\n    x14 = difference(x7, x13)\n    x15 = mostcolor(I)\n    x16 =11ofcolor(I, x15)\n    x17 = backdrop(x16)\n    x18 = astuple(x3, x17)\n    x19 = canvas(x15, x18)\n    x20 = matcher(first, x1)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    O = fill(x19, x1, x22)\n    return O"], [1.1, "def solve_6ad4a02b(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = partition(I)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = fork(66666666, box, rot90)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    x8 = center(x7)\n    x9 =min(x1, x6)\n    x10 = difference(x1, x4)\n    x11 = center(x10)\n    x12 = initset(x8)\n    x13 = insert(x11, x12)\n    x14 = backdrop(x13)\n    x15 = subgrid(x14, I)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, x2)\n    x18 = backdrop(x17)\n    x19 = subgrid(x18, x15)\n    x20 = vmirror(x19)\n    x21 = replace(x20, x2, x5)\n    x22 = replace(x21, x9, x6)\n    x23 =22(x22, x18)\n    x24 = branch(x7, x23, x1)\n    x25 = replace(x24, x2, x5)\n    O = replace(x25, x9, x6)\n    return O"], [1.1, "def solve_e141c975(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = rbind(shift, TWO_BY_ZERO)\n    x13 = compose(x6, tojvec)\n    x14 = rbind(shift, x3)\n    x15 = compose(x14, tojvec)\n    x16 = rbind(subtract, SEVEN)\n    x17 = compose(x16, height)\n    x18 = fork(equality, x17, x13)\n    x19 = fork(equality, x15, x18)\n    x20 = compose(flip, x19)\n    x21 = fork(both, x12, x20)\n    x22 = rbind(mapply, x21)\n    x23 = compose( x22, xrot90)\n    x24 = power(x23, TWO)\n    x25 = power(x22, ONE)\n    x26 = x25(I)\n    x27 = rbind(mapply, x261)\n    x28 = multiply(x26, x7)\n    x29 = x27(x28)\n    x30 = x25(x29)\n    x31 = replace(x26, NINE, ZERO)\n    x32 = downscale(x31, x30)\n    x33 = rot90(x32)\n    x34 =\n    x35 = x33)\n    x35 = x27(x34)\n    x36 = subtract(x22, x35)\n    O = upscale(x34, x36)\n    return O"], [1.1, "def solve_e1ca05e4(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =532892683348333389125\n    76628436667681463670323\n    69782336667686366368323\n    76336466666674866362123\n    33381666666781686638122\n    82336800004382086461233\n    61636670081822163662133\n    681633bd389122613381233\n    858466ff82838813311811\n    57023843656819681761212\n    \"\"\"\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, x4)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.1, "def solve_23623ee7(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 =77777(I)\n    x8 = sfilter(x7, x6)\n    x9 = Hung27(x8)\n    x10 = hmirror(I)\n    x11 = vmirror(I)\n    x12 = objects(x10, T, T, T)\n    x13 = difference(x11, x12)\n    x14 = colorfilter(x13, x4)\n    x15 = rbind(adjacent, x4)\n    x16 = mfilter(x14, x15)\n    x17 = replace(x10, x4, x5)\n    x18 = paint(x17, x16)\n    O = subgrid(x18, x18)\n    return O"], [1.1, "def solve_cd9ebc67(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =9f8588855484600(x3, x4)\n    x6 =elta(x5)\n    x7 =858885548442001\n    x6 = argmax(x6, x4)\n    O = subgrid(x7, I)\n    return O"], [1.1, "def solve_110585a0(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = multiply(x4, x4)\n    x6 = canvas(x3, x5)\n    x7 = asindices(I)\n    x8 = leastcolor(I)\n    x9 = ofcolor(I, x8)\n    x10 = rbind(adjacent, x4)\n    x11 = mfilter(x9, x10)\n    x12 = fill(x6, x1, x11)\n    x13 = leastcolor(I)\n    x14 = ofcolor(I, x13)\n    x15 = rbind(multiply, x4)\n    x16 = apply(x15, x14)\n    x17 =353(x16)\n    x18 = rbind(add, x6)\n    x19 = rbind(multiply, x4)\n    x20 = apply(x18, x17)\n    x21 =353(x20)\n    x22 = compose(even, last)\n    x23 = sfilter(x21, x22)\n    x24 = fill(x12, x13, x23)\n    x25 = dmirror(x24)\n    x26 = objects(x25, F, F, T)\n    x27 = merge(x26)\n    x28 = shift(x27,UNITY)\n    x29 = paint(x25, x28)\n    O = subgrid(x2, x29)\n    return O"], [1.1, "def solve_7a6c8b79(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x3, x4)\n    x6 = mapply(toindices, x5)\n    x7 = rbind( normalize, x6)\n    x8 = chain(x7, mostcolor, x444)\n    x9 = fork(difference, x8, toindices)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = sfilter(x1, x11)\n    x13 = difference(x1, x12)\n    x14 = compose(backdrop, inbox)\n    x15 = mapply(x14, x13)\n    x16 = fill(I, x2, x15)\n    x17 = trim(x16)\n    x18 = objects(x16, T, F, F)\n    x19 = rbind(colorcount, x2)\n    x20 = argmax(x18, x19)\n    x21 = mostcolor(x20)\n    x22 = palette(x20)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, x20)\n    x25 = argmax(x23, x24)\n    x26 = objects(x16, T, F, F)\n    x27 = colorfilter(x26, x25)\n    x28 = rbind(toobject, x I)\n    x29 = chain(first, x28, delta)\n    x30 = colorfilter(x27, x25)\n    x31 = rbind(adjacent, x17)\n    x32 = rbind(adjacent, x15)\n    x33 = fork(both, x31, x32)\n    x34 = fork(both, x33, first)\n    x35 = sfilter(x30, x34)\n    x36 = difference(x35, x31)\n    O = fill(x16, x2, x36)\n    return O"], [1.1, "def solve_2d8096fa(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = ONE(x29, identity)\n    x31 =222(x30)\n    x32 = identity(x31)\n    x33 = identity(x32)\n    x34 = both(xline, x19)\n    x35 = branch(x34, identity, x32)\n    x36 = x35(x33)\n    x37 =\n    first(x36)\n    x38 = shift(x31, x37)\n    O = paint(I, x38)\n    return O"], [1.1, "def solve_e6597c4b(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = sfilter(x1, hline)\n    x4 = size(x3)\n    x6 = positive(x4)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = frontiers(I)\n    x10 = merge(x9)\n    x11 = mostcolor(x10)\n    x12 = shape(I)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(I, x13)\n    x15 = objects(x14, F, F, T)\n    x16 = rbind(other, x10)\n    x17 = compose(x16, palette)\n    x18 = fork(astuple, x17, ulcorner)\n    x19 = apply(x18, x15)\n    x20 = lbind(sfilter, x15)\n    x21 = chain(size, x20, x19)\n    x22 = argmax(x19, x21)\n    x23 = argmin(x19, x22)\n    x24 = apply(ulcorner, x15)\n    x25 = normalize(x23)\n    x26 = matcher(first, x10)\n    x27 =0000000(x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(x14, x11)\n    x32 = difference(x30, x31)\n    O = fill(I, x11, x32)\n    return O"], [1.1, "def solve_c82905cd(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =509222569329522037(I)\n    x2 = dmirror(I)\n    x3 = papply(pair, I, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [1.1, "def solve_9e18ba42(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = multiply(TEN, FIVE)\n    x7 = canvas(ZERO, x6)\n    x8 = paint(x7, x5)\n    x9 = objects(x8, F, T, T)\n    x10 = valmax(x9, height)\n    x11 = valmax(x9, width)\n    x12 = merge(x9)\n    x13 =color(x12)\n    x14 =itate(x5, x12)\n    x15 = multiply(TEN, FIVE)\n    x16 = recolor(x13, x15)\n    x17 = rbind(argmin, x16)\n    x18 = compose(x17, toindices)\n    x19 = rbind(sfilter, x18)\n    x20 = chain(merge, x19, x2)\n    x21 =6(x20)\n    x22 = mapply(x21, x4)\n    O = paint(x8, x22)\n    return O"], [1.1, "def solve_be79298f(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mostcolor(I)\n    x3 = asindices(I)\n    x4 = ofcolor(I, x2)\n    x5 = rbind(toobject, I)\n    x6 =665(x5)\n    x7 =99(x6, outbox)\n    x8 = rbind(colorcount, ONE)\n    x9 = chain(x8, x5, dneighbors)\n    x10 = matcher(x9,222999)\n    x11 = extract(x4, x10)\n    x12 = initset(x11)\n    x13 = equality(x6, x12)\n    x14 = branch(x13, x11, x125)\n    x15 = x14(x4)\n    x16 = gravitate(x15, x4)\n    x17 = compose(double, halve)\n    x18 = fork(equality, identity, x17)\n    x19 = x18(x16)\n    x20 = initset(x19)\n    x21 = equality(x5, x20)\n    x22 = increment(x21)\n    x23 = argmax(x22, x18)\n    x24 = gravitate(x23, x4)\n    x25 = compose(first, last)\n    x26 = rbind(sfilter, x25)\n    x27 = compose(x26, first)\n    x28 = apply(x27, x24)\n    x29 = product(x28, x28)\n    x30 = difference(x29, x2)\n    x31 = fill(I, THREE, x30)\n    x32 = interval(ZERO, x22, ONE)\n    x33 = lbind(shift, x31)\n    x34 = mapply(x33, x32)\n    O = paint(x39, x34)\n    return O"], [1.1, "def solve_7a7fa57e(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(bordering,toindices)\n    x5 = mfilter(x3, x4)\n    x6 = difference(x1, x3)\n    x7 = power(outbox, TWO)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, x8)\n    x10 = chain(first, x8, x9)\n    x11 = mfilter(x6, x10)\n    x12 =66666666(x11, I)\n    x13 = objects(x12, T, F, F)\n    x14 = rbind(adjacent, x11)\n    x15 = compose(x14, size)\n    x16 = sfilter(x13, x15)\n    x17 = outbox(x16)\n    x18 = subgrid(x17, I)\n    x19 = trim(x18)\n    x20 = palette(x19)\n    x21 = matcher(identity, x1)\n    x22 = argmin(x20, x21)\n    x23 = asindices(x19)\n    x24 = ofcolor(x18, x22)\n    x25 = ofcolor(x18, ZERO)\n    x26 = intersection(x24, x25)\n    x27 = canvas(x22, x26)\n    O = fill(x27, THREE, x23)\n    return O"], [1.1, "def solve_903cc205(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 =3222345 first(x1)\n    x3 = compose(dneighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, vsplit)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [1.1, "def solve_de3a17a6(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = Iconcat(I, I)\n    x2 = x2 = x1(I)\n    x3 = x1(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    x6 = palette(x5)\n    x7 = lbind(colorfilter, x4)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, TWO)\n    x10 = asindices(x3)\n    x11 = box(x10)\n    x12 = rbind(difference, x11)\n    x13 =1111(x12, x10)\n    x14 = rbind(rbind, hmatching)\n    x15 = rbind(argmin, x14)\n    x16 = lbind(rbind, vmatching)\n    x17 = x19(x12)\n    x18 = x16(x17)\n    x19 = fill(x16, ZERO, x15)\n    x20 = fill(x19, FIVE, x18)\n    O = fill(x20, ZERO, x9)\n    return O"], [1.1, "def solve_8d71d647(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = merge(x476)\n    x2 = compose(normalize, toindices)\n    x3 = x2(x1)\n    x4 = lbind(toindices, x3)\n    x5 = compose(normalize, x4)\n    x6 = lbind(rbind, shift)\n    x7 = chain(x6, x5, x5)\n    x8 = compose(x7, x5)\n    x9 = fork(remove, x8, x5)\n    x10 = compose(x7, x9)\n    x11 = fork(multiply, x10, x7)\n    x12 = compose(x5, x11)\n    x13 = fork(intersection, x12, x7)\n    x14 = mapply(x13, x4)\n    x15 = vsplit(I, TWO)\n    x16 =hsplit(x15, TWO)\n    x17 = mapply(x16, x16)\n    x18 = combine(x14, x17)\n    x19 = mapply(x18, x18)\n    x20 = fill(I, FOUR, x19)\n    x21 = palette(x20)\n    x22 = remove(ZERO, x21)\n    x23 = other(x22, x18)\n    x24 = ofcolor(x20, x23)\n    x25 = ofcolor(x20, xf25)\n    x26 = ofcolor(x20, xI)\n    x27 = ofcolor(x20, x T)\n    x28 = ofcolor(x20, x15)\n    x29 = fill(x20, x23, x28)\n    x30 = fill(x29, x23, x27)\n    O = fill(x30, x23, x24)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_525fceb0(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(objects, F)\n    x4 = rbind(x3, F)\n    x5 = rbind(x4, T)\n    x6 = lbind(canvas, x1)\n    x7 = compose(x6, shape)\n    x8 = fork(paint, x7, normalize)\n    x9 = compose(x5, x8)\n    x10 = fork(colorfilter, x9, color)\n    x11 = rbind(shift, RIGHT)\n    x12 = rbind(argmax, rightmost)\n    x13 = compose(x12, x10)\n    x14 = fork(remove, x13, x10)\n    x15 = chain(x11, merge, x14)\n    x16 = rbind(argmax, rightmost)\n    x17 = compose(x16, x10)\n    x18 = fork(combine, x17, x15)\n    x19 = fork(shift, x18, ulcorner)\n    x20 = merge(x2)\n    x21 = fill(I, x1, x20)\n    x22 = mapply(x19, x2)\n    O = paint(x21, x22)\n    return O"], [0.08173484697705038, "def solve_210e9537(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_e9157e78(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_d8789fc6(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = sizefilter(x2, ONE)\n    x6 = apply(initset, x4)\n    x7 = lbind(argmin, x6)\n    x8 = lbind(rbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x5)\n    x12 = merge(x5)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O"], [0.08173484697705038, "def solve_98cae746(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(hmatching, first, last)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = compose(center, first)\n    x9 = compose(center, last)\n    x10 = fork(connect, x8, x9)\n    x11 = chain(initset, center, x10)\n    x12 = compose(color, first)\n    x13 = fork(recolor, x12, x11)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.08173484697705038, "def solve_37280f85(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_8ad12fc4(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_46d7f79b(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_396094a0(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, ZERO, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.08173484697705038, "def solve_ed2d86dd(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_09938b04(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.08173484697705038, "def solve_4f88455a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.08173484697705038, "def solve_6e552f03(I):\n    x1 = objects(I, F, T, T)\n    x2 = matcher(numcolors, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = difference(x1, x3)\n    x5 = lbind(matcher, first)\n    x6 = compose(x5, mostcolor)\n    x7 = fork(sfilter, identity, x6)\n    x8 = fork(difference, identity, x7)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x7)\n    x11 = compose(x9, x8)\n    x12 = compose(ulcorner, x8)\n    x13 = fork(subtract, ulcorner, x12)\n    x14 = lbind(rbind, add)\n    x15 = compose(x14, x13)\n    x16 = fork(apply, x15, x11)\n    x17 = lbind(lbind, shift)\n    x18 = compose(x17, normalize)\n    x19 = fork(mapply, x18, x10)\n    x20 = fork(mapply, x18, x16)\n    x21 = mapply(x19, x4)\n    x22 = mapply(x20, x4)\n    x23 = paint(I, x21)\n    O = paint(x23, x22)\n    return O"], [0.08173484697705038, "def solve_969a1817(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = product(x2, x2)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(hmatching, first, last)\n    x6 = fork(either, x4, x5)\n    x7 = sfilter(x3, x6)\n    x8 = compose(center, first)\n    x9 = compose(center, last)\n    x10 = fork(connect, x8, x9)\n    x11 = chain(initset, center, x10)\n    x12 = compose(color, first)\n    x13 = fork(recolor, x12, x11)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.08173484697705038, "def solve_3a228ec1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_79590b01(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_b1085c2d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_152fd95d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_240f293f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_381208ee(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(objects, F)\n    x4 = rbind(x3, F)\n    x5 = rbind(x4, T)\n    x6 = lbind(canvas, x1)\n    x7 = compose(x6, shape)\n    x8 = fork(paint, x7, normalize)\n    x9 = compose(x5, x8)\n    x10 = fork(colorfilter, x9, color)\n    x11 = rbind(shift, RIGHT)\n    x12 = rbind(argmax, rightmost)\n    x13 = compose(x12, x10)\n    x14 = fork(remove, x13, x10)\n    x15 = chain(x11, merge, x14)\n    x16 = rbind(argmax, rightmost)\n    x17 = compose(x16, x10)\n    x18 = fork(combine, x17, x15)\n    x19 = fork(shift, x18, ulcorner)\n    x20 = merge(x2)\n    x21 = fill(I, x1, x20)\n    x22 = mapply(x19, x2)\n    O = paint(x21, x22)\n    return O"], [0.08173484697705038, "def solve_4a4d89ad(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = sizefilter(x1, ONE)\n    x4 = apply(initset, x2)\n    x5 = lbind(argmin, x4)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x5, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    x10 = merge(x3)\n    x11 = cover(I, x10)\n    O = paint(x11, x9)\n    return O"], [0.08173484697705038, "def solve_9d8ed4ff(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_4404fa2e(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_d6e59f8d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = sizefilter(x1, TWO)\n    x4 = sizefilter(x1, THREE)\n    x5 = merge(x2)\n    x6 = fill(I, THREE, x5)\n    x7 = merge(x3)\n    x8 = fill(x6, TWO, x7)\n    x9 = merge(x4)\n    O = fill(x8, ONE, x9)\n    return O"], [0.08173484697705038, "def solve_60897a36(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.08173484697705038, "def solve_85d82777(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = astuple(FIVE, x1)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = colorfilter(x2, FIVE)\n    x6 = merge(x5)\n    x7 = cover(I, x6)\n    x8 = compose(toindices, normalize)\n    x9 = apply(x8, x5)\n    x10 = asindices(x4)\n    x11 = ofcolor(x4, ZERO)\n    x12 = ofcolor(x4, TWO)\n    x13 = rbind(multiply, TEN)\n    x14 = rbind(multiply, FIVE)\n    x15 = rbind(intersection, x12)\n    x16 = rbind(intersection, x11)\n    x17 = rbind(intersection,x10)\n    x18 = chain(x13, size, x15)\n    x19 = chain(size, x16, delta)\n    x20 = compose(x14, uppermost)\n    x21 = chain(size, x16, outbox)\n    x22 = chain(x13, size, x17)\n    x23 = compose(invert, x18)\n    x24 = fork(add, x22, x23)\n    x25 = fork(subtract, x24, x21)\n    x26 = fork(subtract, x25, x20)\n    x27 = fork(subtract, x26, x19)\n    x28 = rbind(apply, x10)\n    x29 = lbind(lbind, shift)\n    x30 = rbind(argmax, x27)\n    x31 = chain(x30, x28, x29)\n    x32 = mapply(x31, x9)\n    O = fill(x7, ONE, x32)\n    return O"], [0.08173484697705038, "def solve_80130aaa(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.08173484697705038, "def solve_e7829cab(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_65bfa06e(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = astuple(FIVE, x1)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = colorfilter(x2, FIVE)\n    x6 = merge(x5)\n    x7 = cover(I, x6)\n    x8 = compose(toindices, normalize)\n    x9 = apply(x8, x5)\n    x10 = asindices(x4)\n    x11 = ofcolor(x4, ZERO)\n    x12 = ofcolor(x4, TWO)\n    x13 = rbind(multiply, TEN)\n    x14 = rbind(multiply, FIVE)\n    x15 = rbind(intersection, x12)\n    x16 = rbind(intersection, x11)\n    x17 = rbind(intersection, x10)\n    x18 = chain(x13, size, x15)\n    x19 = chain(size, x16, delta)\n    x20 = compose(x14, uppermost)\n    x21 = chain(size, x16, outbox)\n    x22 = chain(x13, size, x17)\n    x23 = compose(invert, x18)\n    x24 = fork(add, x22, x23)\n    x25 = fork(subtract, x24, x21)\n    x26 = fork(subtract, x25, x20)\n    x27 = fork(subtract, x26, x19)\n    x28 = rbind(apply, x10)\n    x29 = lbind(lbind, shift)\n    x30 = rbind(argmax, x27)\n    x31 = chain(x30, x28, x29)\n    x32 = mapply(x31, x9)\n    O = fill(x7, ONE, x32)\n    return O"], [0.08173484697705038, "def solve_4f5df7aa(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_dd9a3601(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(vmatching, first, last)\n    x6 = sfilter(x4, x5)\n    x7 = compose(color, first)\n    x8 = fork(recolor, x7, last)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [0.08173484697705038, "def solve_db6f4b90(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(358, x5, x9)\n    x11 = lbind(matcher, positive)\n    x12 = compose(x11, dneighbors)\n    x13 = chain(flip, x12, toindices)\n    x14 = rbind(sfilter, x13)\n    x15 = chain(merge, x14, fgpartition)\n    x16 = fork(recolor, color, x15)\n    x17 = mapply(x16, x4)\n    O = paint(I, x17)\n    return O"], [0.08173484697705038, "def solve_9a0c7618(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.08173484697705038, "def solve_b81e4fdb(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_693ede12(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.08173484697705038, "def solve_bf4f4b5b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = fill(I, TWO, x3)\n    x5 = subgrid(x2, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, TWO, x12)\n    x14 = ofcolor(x13, TWO)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, TWO, x16)\n    return O"], [0.08173484697705038, "def solve_cc16559a(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_b52d2879(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_b57109de(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, THREE, x3)\n    return O"], [0.08173484697705038, "def solve_2b5cbb67(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.08173484697705038, "def solve_cda5877f(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.08173484697705038, "def solve_8b43ea9f(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.08173484697705038, "def solve_e71d62d6(I):\n    x1 = objects(I, T, F, F)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = other(x3, ZERO)\n    x5 = colorfilter(x1, x4)\n    x6 = sizefilter(x5, ONE)\n    x7 = merge(x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.08173484697705038, "def solve_0bbc2cd9(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.08173484697705038, "def solve_dd9bc7ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_fe5a671d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = other(x3, FIVE)\n    x5 = colorfilter(x2, FIVE)\n    x6 = lbind(index, I)\n    x7 = compose(x6, urcorner)\n    x8 = matcher(x7, FIVE)\n    x9 = sfilter(x5, x8)\n    x10 = difference(x5, x9)\n    x11 = apply(urcorner, x9)\n    x12 = apply(llcorner, x10)\n    x13 = rbind(add, UP_RIGHT)\n    x14 = rbind(add, DOWN_LEFT)\n    x15 = apply(x13, x11)\n    x16 = apply(x14, x12)\n    x17 = rbind(shoot, UNITY)\n    x18 = rbind(shoot, NEG_UNITY)\n    x19 = fork(combine, x17, x18)\n    x20 = mapply(x19, x15)\n    x21 = mapply(x19, x16)\n    x22 = combine(x20, x21)\n    x23 = fill(I, x4, x22)\n    O = replace(x23, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_08c1e7ce(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.08173484697705038, "def solve_22d05bc1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_d0784c74(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_4adda160(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_3035ae71(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = ulcorner(x2)\n    x4 = subgrid(x2, I)\n    x5 = replace(x4, ZERO, TWO)\n    x6 = asobject(x5)\n    x7 = shift(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.08173484697705038, "def solve_fad55875(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = merge(x3)\n    x6 = recolor(THREE, x5)\n    x7 = merge(x4)\n    x8 = recolor(FOUR, x7)\n    x9 = paint(I, x6)\n    O = paint(x9, x8)\n    return O"], [0.08173484697705038, "def solve_dca4148b(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_86d23741(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_2bb6b087(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.08173484697705038, "def solve_4b497a1f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = cover(I, x3)\n    return O"], [0.08173484697705038, "def solve_dbfaaf1b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.08173484697705038, "def solve_da1f6fcb(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.08173484697705038, "def solve_819486c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_8a282277(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_d6e50d4c(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.08173484697705038, "def solve_a859c399(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = sizefilter(x1, TWO)\n    x4 = sizefilter(x1, THREE)\n    x5 = merge(x2)\n    x6 = fill(I, THREE, x5)\n    x7 = merge(x3)\n    x8 = fill(x6, TWO, x7)\n    x9 = merge(x4)\n    O = fill(x8, ONE, x9)\n    return O"], [0.08173484697705038, "def solve_800d68f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_134624a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_dd5e1dbb(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(vmatching, first, last)\n    x6 = sfilter(x4, x5)\n    x7 = compose(color, first)\n    x8 = fork(recolor, x7, last)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [0.08173484697705038, "def solve_81dc05e4(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_cd62e515(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_4479cb5f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_2efe96b5(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.08173484697705038, "def solve_4d1fa88a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.08173484697705038, "def solve_e7d4233e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.08173484697705038, "def solve_a2f6f8c6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_9590d02b(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08206691200645198, "def solve_326613b2(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_5694c5d6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08206691200645198, "def solve_889350eb(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmax(x4, size)\n    x6 = outbox(x5)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = color(x8)\n    x10 = asindices(I)\n    x11 = ofcolor(I, x9)\n    x12 = toindices(x5)\n    x13 = combine(x11, x12)\n    x14 = difference(x10, x13)\n    x15 = toobject(x14, I)\n    x16 = apply(initset, x15)\n    x17 = rbind(gravitate, x5)\n    x18 = compose(crement, x17)\n    x19 = fork(shift, identity, x18)\n    x20 = mapply(x19, x16)\n    O = paint(I, x20)\n    return O"], [0.08217883589820558, "def solve_47569d8b(I):\n    x1 = asindices(I)\n    x2 = center(x1)\n    x3 = dneighbors(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = objects(I, T, F, F)\n    x7 = colorfilter(x6, x5)\n    x8 = fork(equality, toindices, backdrop)\n    x9 = sfilter(x7, x8)\n    x10 = lbind(mapply, dneighbors)\n    x11 = chain(x10, x9, outbox)\n    x12 = fork(difference, x11, outbox)\n    x13 = compose(size, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x9, x14)\n    x16 = difference(x9, x15)\n    x17 = merge(x16)\n    x18 = cover(I, x4)\n    x19 = fill(x18, FIVE, x17)\n    O = fill(x19, asobject, x15)\n    return O"], [0.08468134728045976, "def solve_de1c8497(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.08468134728045976, "def solve_0f411929(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.08468134728045976, "def solve_08c061a6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.08468134728045976, "def solve_082b3788(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = cover(I, x4)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = apply(ulcorner, x2)\n    x9 = mapply(x7, x8)\n    O = paint(x5, x9)\n    return O"], [0.08468134728045976, "def solve_0d05c7aa(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = compose(backdrop, inbox)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [0.08468134728045976, "def solve_59fc641d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, SEVEN, x5)\n    return O"], [0.08642087736341895, "def solve_37fdbc69(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = compose(increment, center)\n    x4 = compose(decrement, center)\n    x5 = apply(x3, x2)\n    x6 = apply(x4, x2)\n    x7 = papply(connect, x5, x6)\n    x8 = apply(last, x5)\n    x9 = compose(last, first)\n    x10 = power(last, TWO)\n    x11 = fork(subtract, x9, x10)\n    x12 = compose(even, x11)\n    x13 = lbind(rbind, astuple)\n    x14 = lbind(compose, x12)\n    x15 = compose(x14, x13)\n    x16 = fork(sfilter, first, x15)\n    x17 = pair(x7, x8)\n    x18 = mapply(x16, x17)\n    O = fill(I, ZERO, x18)\n    return O"], [0.09156826806047147, "def solve_ea57033e(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = equality(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.11634314213316777, "def solve_5c15f25d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_5c33bd57(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.11634314213316777, "def solve_9bb66111(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, EIGHT)\n    x4 = product(x2, x3)\n    x5 = fork(gravitate, first, last)\n    x6 = compose(crement, x5)\n    x7 = compose(center, first)\n    x8 = fork(add, x7, x6)\n    x9 = fork(connect, x7, x8)\n    x10 = apply(x9, x4)\n    x11 = lbind(greater, EIGHT)\n    x12 = compose(x11, size)\n    x13 = mfilter(x10, x12)\n    x14 = fill(I, TWO, x13)\n    x15 = apply(x8, x4)\n    x16 = intersection(x13, x15)\n    x17 = mapply(neighbors, x16)\n    O = fill(x14, EIGHT, x17)\n    return O"], [0.1212328255730617, "def solve_4ab05d01(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.12814991617905258, "def solve_ef1525fe(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12814991617905258, "def solve_960a93cc(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12993277496796057, "def solve_fd2b4edc(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_ccf57fea(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_2114fae8(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_39977a12(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_328f6f07(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.12993277496796057, "def solve_64536bd7(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.13220799348763243, "def solve_7d630a82(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = frontiers(I)\n    x6 = sfilter(x5, vline)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = ofcolor(I, x4)\n    x11 = ofcolor(I, TWO)\n    x12 = ofcolor(I, ONE)\n    x13 = rbind(gravitate, x10)\n    x14 = compose(x13, initset)\n    x15 = fork(add, identity, x14)\n    x16 = fork(connect, identity, x15)\n    x17 = shape(I)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(gravitate, x10)\n    x21 = chain(x19, sign, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x16, x11)\n    x26 = mapply(x24, x12)\n    x27 = fill(I, TWO, x25)\n    O = fill(x27, ONE, x26)\n    return O"], [0.13468134728045977, "def solve_70f7cd93(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_c4f98227(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_6c019ca3(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = lbind(contained, TWO)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, TWO, ZERO)\n    x12 = fill(x11, ONE, x9)\n    O = fill(x12,258, x10)\n    return O"], [0.13468134728045977, "def solve_0f09fdfc(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_261a1cc8(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.13468134728045977, "def solve_7e748873(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_ba198aef(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.13468134728045977, "def solve_6e7613a8(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_7ade34c8(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.13468134728045977, "def solve_74e31dd3(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.13468134728045977, "def solve_72a2c998(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.13468134728045977, "def solve_f56a6313(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.13468134728045977, "def solve_d13fffa0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.13468134728045977, "def solve_b4e03817(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x2, x8)\n    O = fill(x3, x4, x9)\n    return O"], [0.13468134728045977, "def solve_69d7efa8(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_f6cb5d92(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_5cb4dd5a(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.13468134728045977, "def solve_a53ab226(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.13757267766397355, "def solve_096b2f16(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.13961114291996643, "def solve_b240b0f6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = ulcorner(x3)\n    x6 = index(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = initset(x8)\n    x10 = fill(x4, x6, x9)\n    x11 = lrcorner(x3)\n    x12 = index(I, x11)\n    x13 = ulcorner(x2)\n    x14 = add(x13, x11)\n    x15 = initset(x14)\n    x16 = fill(x10, x12, x15)\n    x17 = urcorner(x3)\n    x18 = index(I, x17)\n    x19 = llcorner(x2)\n    x20 = add(DOWN_LEFT, x19)\n    x21 = initset(x20)\n    x22 = fill(x16, x18, x21)\n    x23 = llcorner(x3)\n    x24 = index(I, x23)\n    x25 = urcorner(x2)\n    x26 = add(UP_RIGHT, x25)\n    x27 = initset(x26)\n    O = fill(x22, x24, x27)\n    return O"], [0.14012102340220775, "def solve_c17c4085(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_c7bb468e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I,5555, x5)\n    return O"], [0.14012102340220775, "def solve_c4b2a0a5(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_15b36ff8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_14942a6c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14012102340220775, "def solve_411f90fb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.14098233381512817, "def solve_b6037242(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.147039853263387, "def solve_bb9b3fed(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.147039853263387, "def solve_7352f706(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, TWO, x3)\n    return O"], [0.147039853263387, "def solve_71b4c23c(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_33a936c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = merge(x3)\n    O = fill(I, TWO, x4)\n    return O"], [0.147039853263387, "def solve_12868d57(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_de58dc42(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_8b5490aa(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_5236f2e7(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(backdrop, x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.147039853263387, "def solve_07945a37(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, TWO, x3)\n    return O"], [0.147039853263387, "def solve_95c80112(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(backdrop, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, TWO, x3)\n    return O"], [0.1497728934434557, "def solve_571b028b(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, SEVEN, x7)\n    return O"], [0.1497728934434557, "def solve_0b4f4567(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, SEVEN, x7)\n    return O"], [0.1497728934434557, "def solve_b449bf36(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = replace(I, x3, ZERO)\n    x5 = leastcolor(x4)\n    O = replace(x4, x5, x3)\n    return O"], [0.15201967101125663, "def solve_3a69ba5a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15201967101125663, "def solve_3cb7e1ca(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15553689279076352, "def solve_87f6abae(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = paint(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.16329154444249577, "def solve_07a2efaa(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(toivec, numcolors)\n    x5 = fork(add, lrcorner, x4)\n    x6 = fork(astuple, x3, x5)\n    x7 = compose(box, x6)\n    x8 = mapply(x7, x1)\n    O = fill(I, THREE, x8)\n    return O"], [0.1666949415715136, "def solve_f73e2cb8(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.1666949415715136, "def solve_ef4b256e(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [0.167039853263387, "def solve_6ab9a24a(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.167039853263387, "def solve_ec010f50(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, EIGHT)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.1705557794573261, "def solve_8035a513(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_a1fcccb8(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_daa68432(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.1705557794573261, "def solve_e0b482f7(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.17098233381512817, "def solve_dc1d3803(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.17098233381512817, "def solve_3e80d90c(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.17098233381512817, "def solve_7622f82b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.1714130763927213, "def solve_8cc20eb0(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.17329552162236156, "def solve_75ccb773(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(matcher, size)\n    x3 = fork(sfilter, toindices, x2)\n    x4 = mfilter(x1, x3)\n    x5 = fill(I, TWO, x4)\n    x6 = colorfilter(x1, EIGHT)\n    x7 = compose(neighbors, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x5, x9)\n    return O"], [0.1777137882762294, "def solve_a75db280(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = fork(equality, toindices, corners)\n    x4 = fork(multiply, height, width)\n    x5 = sfilter(x1, x3)\n    x6 = argmax(x5, x4)\n    x7 = difference(x2, x6)\n    x8 = mostcolor(I)\n    x9 = fill(I, x8, x7)\n    x10 = normalize(x7)\n    x11 = ulcorner(x6)\n    x12 = increment(x11)\n    x13 = shift(x10, x12)\n    O = paint(x9, x13)\n    return O"], [0.1816725678756399, "def solve_c9b0b851(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.18373728840502568, "def solve_e5a484ce(I):\n    x1 = asindices(I)\n    x2 = leastcolor(I)\n    x3 = objects(I, T, F, T)\n    x4 = ofcolor(I, x2)\n    x5 = merge(x3)\n    x6 = shape(x5)\n    x7 = neighbors(ORIGIN)\n    x8 = lbind(mapply, neighbors)\n    x9 = power(x8, TWO)\n    x10 = x9(x7)\n    x11 = lbind(multiply, x6)\n    x12 = lbind(shift, x5)\n    x13 = apply(x11, x10)\n    x14 = mapply(x12, x13)\n    x15 = lbind(hmatching, x4)\n    x16 = lbind(vmatching, x4)\n    x17 = fork(either, x15, x16)\n    x18 = compose(x17, initset)\n    x19 = paint(I, x14)\n    x20 = sfilter(x1, x18)\n    x21 = difference(x1, x20)\n    O = cover(x19, x21)\n    return O"], [0.19107391968801002, "def solve_151a72ef(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = center(x2)\n    x4 = color(x2)\n    x5 = astuple(UNITY, NEG_UNITY)\n    x6 = astuple(UP_RIGHT, DOWN_LEFT)\n    x7 = combine(x5, x6)\n    x8 = lbind(shoot, x3)\n    x9 = mapply(x8, x7)\n    O = fill(I, x4, x9)\n    return O"], [0.19368107963531306, "def solve_f2fd0a31(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = ofcolor(I, ONE)\n    x4 = mapply(vfrontier, x1)\n    x5 = mapply(hfrontier, x2)\n    x6 = mapply(hfrontier, x3)\n    x7 = fill(I, TWO, x4)\n    x8 = fill(x7, THREE, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.19986952115995066, "def solve_8a1b0796(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.19986952115995066, "def solve_a840b5da(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.20252763457609518, "def solve_76d9a251(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20977289344345568, "def solve_a0342689(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.20977289344345568, "def solve_eeef9d08(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.20977289344345568, "def solve_be8b5312(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_5e13268a(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.20977289344345568, "def solve_ca2817b1(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = replace(I, TWO, ZERO)\n    O = fill(x6, THREE, x5)\n    return O"], [0.20977289344345568, "def solve_4ab8d0df(I):\n    x1 = objects(I, T, T, T)\n    x2 = matcher(size, SIX)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x2)\n    x5 = mfilter(x1, x3)\n    x6 = fill(I, TWO, x4)\n    O = fill(x6, ONE, x5)\n    return O"], [0.20977289344345568, "def solve_711f98b7(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.20977289344345568, "def solve_85e3b0f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.20977289344345568, "def solve_99768be2(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_0630e164(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.20977289344345568, "def solve_4ab3621a(I):\n    x1 = objects(I, T, T, T)\n    x2 = mapply(box, x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.20977289344345568, "def solve_80b4983c(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_d2b5b5b9(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_2ee4a9ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2110590985215381, "def solve_3331d524(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = box(x5)\n    x9 = rbind(difference, x8)\n    x10 = chain(positive, size, x9)\n    x11 = fork(both, x7, x10)\n    x12 = mfilter(x3, x11)\n    O = fill(x6, x1, x12)\n    return O"], [0.21216028779580737, "def solve_2f904211(I):\n    x1 = objects(I, T, F, T)\n    x2 = interval(ONE, NINE, ONE)\n    x3 = apply(double, x2)\n    x4 = apply(decrement, x3)\n    x5 = papply(astuple, x4, x4)\n    x6 = apply(ulcorner, x1)\n    x7 = lbind(shift, x5)\n    x8 = mapply(x7, x6)\n    O = fill(I, FOUR, x8)\n    return O"], [0.2133114088199879, "def solve_0b72ae88(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2133114088199879, "def solve_c6d0c68b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2133114088199879, "def solve_04cbb040(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2133114088199879, "def solve_c6ee47cb(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2133114088199879, "def solve_c9cbae5b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.21363779562043098, "def solve_d948aa22(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, ONE, x5)\n    x7 = compose(halve, width)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, x7)\n    x10 = matcher(x7, THREE)\n    x11 = power(outbox, TWO)\n    x12 = power(outbox, THREE)\n    x13 = mapply(outbox, x3)\n    x14 = sfilter(x3, x9)\n    x15 = sfilter(x3, x10)\n    x16 = mapply(x11, x14)\n    x17 = mapply(x12, x15)\n    x18 = fill(x6, THREE, x13)\n    x19 = fill(x18, THREE, x16)\n    O = fill(x19, THREE, x17)\n    return O"], [0.2288728826653907, "def solve_f0abcb38(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = replace(I, EIGHT, x2)\n    x4 = colorfilter(x1, TWO)\n    x5 = argmin(x1, uppermost)\n    x6 = apply(uppermost, x4)\n    x7 = fork(subtract, maximum, minimum)\n    x8 = x7(x6)\n    x9 = toivec(x8)\n    x10 = leftmost(x5)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, LEFT, RIGHT)\n    x13 = rbind(shoot, x12)\n    x14 = mapply(x13, x2)\n    x15 = underfill(x3, EIGHT, x14)\n    x16 = shift(x2, x9)\n    x17 = mapply(hfrontier, x16)\n    O = underfill(x15, EIGHT, x17)\n    return O"], [0.23140741403264212, "def solve_81d625d8(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.23823994288959274, "def solve_8101a3ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_ae9a8e47(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.23823994288959274, "def solve_5d4b9410(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.2384010333421186, "def solve_4add3065(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.25070353902193987, "def solve_50842ec5(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.253858380731812, "def solve_9a30e9b6(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.253858380731812, "def solve_3340c2ca(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.2591731603200863, "def solve_99dc8901(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.266137548114851, "def solve_41dc5a42(I):\n    x1 = ofcolor(I, TWO)\n    x2 = hline(x1)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = matcher(color, TWO)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = ofcolor(x4, TWO)\n    x10 = leftmost(x9)\n    x11 = leftmost(x8)\n    x12 = greater(x10, x11)\n    x13 = manhattan(x8, x9)\n    x14 = decrement(x13)\n    x15 = branch(x12, identity, invert)\n    x16 = branch(x12, decrement, increment)\n    x17 = branch(x12, leftmost, rightmost)\n    x18 = x15(x14)\n    x19 = tojvec(x18)\n    x20 = shift(x8, x19)\n    x21 = x17(x20)\n    x22 = x16(x21)\n    x23 = tojvec(x22)\n    x24 = vfrontier(x23)\n    x25 = cover(x4, x8)\n    x26 = paint(x25, x20)\n    x27 = fill(x26, EIGHT, x24)\n    O = x3(x27)\n    return O"], [0.26915094341200335, "def solve_e6a1b75a(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_eeb43176(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_5bbdccdb(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_5aa6ccca(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_f6c3a9a4(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.28046050168233005, "def solve_88300ff9(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.28340227746069907, "def solve_6bb9997c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    O = fill(x3, x4, x4)\n    return O"], [0.284056283876422, "def solve_e173ac03(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    x7 = paint(I, x6)\n    x8 = interval(ZERO, FIVE, ONE)\n    x9 = apply(double, x8)\n    x10 = apply(increment, x9)\n    x11 = apply(tojvec, x10)\n    x12 = prapply(shift, x2, x11)\n    x13 = merge(x12)\n    O = fill(x7, FIVE, x13)\n    return O"], [0.29309004639144237, "def solve_47237e96(I):\n    x1 = objects(I, F, T, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = other(x3, ZERO)\n    x5 = ofcolor(I, x4)\n    x6 = vmirror(x5)\n    x7 = asobject(x6)\n    x8 = matcher(first, x4)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    x11 = mostcolor(I)\n    x12 = initset(x11)\n    x13 = objects(I, T, F, T)\n    x14 = insert(x10, x13)\n    x15 = lbind(colorcount, I)\n    x16 = argmax(x14, x15)\n    x17 = shape(I)\n    x18 = canvas(x11, x17)\n    O = paint(x18, x16)\n    return O"], [0.309418156296482, "def solve_5fb086df(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = compose(invert, size)\n    x4 = order(x2, x3)\n    x5 = apply(normalize, x4)\n    x6 = size(x5)\n    x7 = interval(ZERO, x6, ONE)\n    x8 = apply(toivec, x7)\n    x9 = mpapply(shift, x5, x8)\n    x10 = canvas(ZERO, x1)\n    x11 = paint(x10, x9)\n    O = rot180(x11)\n    return O"], [0.31414873887079675, "def solve_0a90d741(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.3143952767818068, "def solve_664e8a05(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEG_ONE, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [0.3416837773165455, "def solve_b9e3b56c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork(add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, EIGHT, x29)\n    return O"], [0.3416837773165455, "def solve_d3f20cd7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork(add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, EIGHT, x29)\n    return O"], [0.3624446703322224, "def solve_21597b5e(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = delta(x2)\n    x6 = position(x5, x4)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(I, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x4)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x2)\n    x21 = rbind(adjacent, x11)\n    x22 = fork(both, x20, x21)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [0.3635444717906562, "def solve_a8445a39(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(outbox, x1)\n    x3 = mapply(backdrop, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.3997728934434557, "def solve_21374b71(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.3997728934434557, "def solve_6d2add96(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.3997728934434557, "def solve_3e81722a(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.3997728934434557, "def solve_e25a3fd5(I):\n    x1 = shape(I)\n    x2 = asindices(I)\n    x3 = objects(I, T, F, F)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, x1)\n    x8 = paint(x7, x4)\n    x9 = mostcolor(I)\n    x10 = color(x4)\n    x11 = astuple(x9, ORIGIN)\n    x12 = astuple(x10, RIGHT)\n    x13 = astuple(x9, ZERO_BY_TWO)\n    x14 = initset(x13)\n    x15 = insert(x12, x14)\n    x16 = insert(x11, x15)\n    x17 = dmirror(x16)\n    x18 = toindices(x16)\n    x19 = lbind(shift, x18)\n    x20 = occurrences(x8, x16)\n    x21 = mapply(x19, x20)\n    x22 = toindices(x17)\n    x23 = lbind(shift, x22)\n    x24 = occurrences(x8, x17)\n    x25 = mapply(x23, x24)\n    x26 = combine(x21, x25)\n    O = fill(x8, x9, x26)\n    return O"], [0.3997728934434557, "def solve_05b6055f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    x5 = toobject(x4, I)\n    x6 = leastcolor(x5)\n    x7 = ofcolor(I, x6)\n    x8 = mapply(neighbors, x7)\n    x9 = fill(I, x6, x8)\n    x10 = leastcolor(x9)\n    x11 = ofcolor(x9, x10)\n    x12 = mapply(neighbors, x11)\n    O = fill(x9, x10, x12)\n    return O"], [0.3997728934434557, "def solve_d59d33d8(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, THREE, x4)\n    return O"], [0.4231446264505721, "def solve_c91d117d(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, ONE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = equality(x1, TWO)\n    x8 = shape(I)\n    x9 = decrement(x8)\n    x10 = width(I)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = branch(x7, x9, x12)\n    x14 = shape(I)\n    x15 = canvas(ZERO, x14)\n    x16 = connect(x6, x13)\n    O = fill(x15, FIVE, x16)\n    return O"], [0.44421029663584294, "def solve_6cfa3cef(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44735524906709623, "def solve_1dc27bbb(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = vline(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.4853084736970792, "def solve_b5ce77fb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.4853084736970792, "def solve_5e9baaf1(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = replace(I, x1, THREE)\n    x4 = argmax(x2, size)\n    x5 = argmin(x2, size)\n    x6 = position(x4, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x4, x3)\n    x10 = hline(x5)\n    x11 = hmirror(x9)\n    x12 = vmirror(x9)\n    x13 = branch(x10, x11, x12)\n    x14 = branch(x10, x7, ZERO)\n    x15 = branch(x10, ZERO, x8)\n    x16 = asobject(x13)\n    x17 = matcher(first, THREE)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = ulcorner(x4)\n    x21 = shape(x4)\n    x22 = astuple(x14, x15)\n    x23 = multiply(x21, x22)\n    x24 = add(x20, x23)\n    x25 = shift(x19, x24)\n    O = paint(x3, x25)\n    return O"], [0.4853084736970792, "def solve_c304a958(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = merge(x3)\n    x6 = recolor(THREE, x5)\n    x7 = merge(x4)\n    x8 = recolor(FOUR, x7)\n    x9 = paint(I, x6)\n    O = paint(x9, x8)\n    return O"], [0.4853084736970792, "def solve_6f2bdd10(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, T)\n    x6 = colorfilter(x5, x4)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, EIGHT, x9)\n    O = replace(x10, x4, THREE)\n    return O"], [0.516202927118657, "def solve_4aaafb40(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.5202879261104161, "def solve_c1c5772f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.5430215763602573, "def solve_2ad28d33(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_16c5574c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5648229277707709, "def solve_33dfae90(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.5711442307692307, "def solve_5e364611(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = matcher(first, x3)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x1, x5)\n    x7 = fill(I, x3, x6)\n    O = replace(x7, x3, ONE)\n    return O"], [0.618060789690106, "def solve_cc2d1a2c(I):\n    x1 = partition(I)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(I)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = contained(ONE, x6)\n    x8 = branch(x7, vsplit, hsplit)\n    x9 = x8(I, TWO)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = palette(x10)\n    x13 = remove(x4, x12)\n    x14 = intersection(x13, x6)\n    x15 = first(x14)\n    x16 = shape(x11)\n    x17 = canvas(x15, x16)\n    x18 = ofcolor(x11, x5)\n    x19 = ofcolor(x10, x6)\n    x20 = intersection(x18, x19)\n    O = fill(x17, FOUR, x20)\n    return O"], [0.6460408141864922, "def solve_48f4a518(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7291258623937439, "def solve_06543e84(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.7467877956401402, "def solve_25dff252(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = toindices(x2)\n    x4 = contained(ZERO_BY_TWO, x3)\n    x5 = contained(TWO_BY_TWO, x3)\n    x6 = contained(TWO_BY_ZERO, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = astuple(THREE, ORIGIN)\n    x10 = initset(x9)\n    x11 = upscale(x10, TWO)\n    x12 = upscale(x11, TWO)\n    x13 = shape(x12)\n    x14 = shift(x12, x13)\n    x15 = combine(x12, x14)\n    x16 = paint(x8, x15)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = branch(x4, x17, x16)\n    x21 = branch(x5, x18, x20)\n    O = branch(x6, x19, x21)\n    return O"], [0.7779700058051356, "def solve_29020cf3(I):\n    x1 = width(I)\n    x2 = dedupe(I)\n    x3 = size(x2)\n    x4 = equality(x1, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [0.7825046979697893, "def solve_8dd1bb4e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7825046979697893, "def solve_1728bb10(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7915392052312495, "def solve_90c3fd38(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.8300259716780168, "def solve_38cfe628(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [0.9081403808721191, "def solve_35bd3175(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9182807290875006, "def solve_24a80439(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.9182807290875006, "def solve_0479cc01(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, numcolors)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = shape(x7)\n    x9 = canvas(ZERO, x8)\n    x10 = normalize(x7)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(x9, x12)\n    return O"], [0.9182807290875006, "def solve_1cf3e2e9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_ba5045d2(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.9182807290875006, "def solve_b249863b(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.9183491285403049, "def solve_0f64edf0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_bad6db53(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_1beaa6b3(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.9183491285403049, "def solve_e499c458(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_e542738d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_e5410fd3(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_e194181d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_e93766dc(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_deaf5f97(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_517c6b6c(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_77efc97f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_13ef8263(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9183491285403049, "def solve_66abaa42(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.95, "def solve_8768f544(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = dmirror(x4)\n    x6 = dedupe(x5)\n    O = dmirror(x6)\n    return O"], [0.95, "def solve_f9e8b173(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [1.0, "def solve_dcbb6815(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_a8f5da0f(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_3fd04ac9(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = center(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = center(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = toivec(x5)\n    x7 = index(I, x6)\n    x8 = equality(x7, ZERO)\n    x9 = branch(x8, x5, x6)\n    x10 = connect(x2, x9)\n    x11 = center(x10)\n    x12 = subtract(x11, x5)\n    x13 = subtract(x11, x12)\n    x14 = connect(x2, x13)\n    x15 = combine(x10, x14)\n    x16 = difference(x15, x2)\n    x17 = ofcolor(I, EIGHT)\n    x18 = center(x17)\n    x19 = subtract(x18, x5)\n    x20 = shift(x15, x19)\n    x21 = recolor(EIGHT, x20)\n    x22 = paint(I, x21)\n    O = rot180(x22)\n    return O"], [1.0, "def solve_3c1b207a(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = mfilter(x1, x4)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [1.0, "def solve_5042dc38(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = chain(color, merge, frontiers)\n    x8 = x7(I)\n    x9 = insert(x1, x8)\n    x10 = objects(x6, T, F, T)\n    x11 = apply(uppermost, x10)\n    x12 = order(x11, uppermost)\n    x13 = remove(x12, x10)\n    x14 = rbind(contained, x13)\n    x15 = chain(x14, minimum, shape)\n    x16 = fork(add, last, x25)\n    x17 = height(x6)\n    x18 = increment(x17)\n    x19 = chain(invert, x18, outbox)\n    x20 = fork(multiply, x15, x19)\n    x21 = fork(apply, x19, x20)\n    x22 = compose(x5, x21)\n    x25 = fork(color, x22, outbox)\n    x26 = fork(contained, x25, x22)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x11, x27)\n    x29 = sfilter(x8, x27)\n    x30 = size(x29)\n    x31 = double(x30)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = apply(tojvec, x32)\n    x34 = pair(x29, x33)\n    x35 = lbind(shift, x24)\n    x36 = mapply(x35, x34)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_c32ea96a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = upscale(x3, TWO)\n    x5 = shape(x3)\n    x6 = objects(I, T, F, F)\n    x7 = colorfilter(x6, TWO)\n    x8 = apply(toindices, x7)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    O = fill(I, ONE, x10)\n    return O"], [1.0, "def solve_1fe0e5d0(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_194c7d10(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hperiod(x2)\n    x4 = vperiod(x2)\n    x5 = dmirror(x2)\n    x6 = papply(pair, x, x5)\n    x7 = lbind(apply, maximum)\n    x8 = apply(x7, x6)\n    x9 = argmax(x8, x7)\n    x10 = leastcolor(x9)\n    x11 = palette(x9)\n    x12 = remove(x10, x11)\n    x13 = other(x12, x10)\n    x14 = ofcolor(I, x13)\n    x15 = shift(x14, x10)\n    x16 = difference(x15, x14)\n    x17 = toobject(x16, I)\n    x18 = lbind(shift, x17)\n    x19 = mapply(x18, x16)\n    O = underfill(I, x13, x19)\n    return O"], [1.0, "def solve_115b2c4b(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(first, x16, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b0d5da4d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = leftmost(x2)\n    x7 = equality(x6, ZERO)\n    x8 = branch(x7, identity, vmirror)\n    x9 = x8(x5)\n    x10 = ofcolor(x9, x1)\n    x11 = ofcolor(x9, TWO)\n    x12 = rbind(shoot, DOWN)\n    x13 = rbind(shoot, LEFT)\n    x14 = rbind(shoot, RIGHT)\n    x15 = compose(x12, x13)\n    x16 = leftmost(x11)\n    x17 = ulcorner(x11)\n    x18 = rbind(subtract, x16)\n    x19 = compose(x18, last)\n    x20 = fork(recolor, first, x19)\n    x21 = mapply(x20, x10)\n    O = paint(x9, x21)\n    return O"], [1.0, "def solve_7e40ff55(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(F8)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_39be3dd4(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_5483b4ba(I):\n    x1 = objects(I, T, F, F)\n    x2 = backdrop(x1)\n    x3 = color(x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x1)\n    O = fill(I, x3, x5)\n    return O"], [1.0, "def solve_8cf61eaa(I):\n    x1 = fgpartition(I)\n    x2 = extract(x1, first)\n    x3 = color(x2)\n    x4 = first(x2)\n    x5 = last(x2)\n    x6 = remove(x4, x2)\n    x7 = greater(x5, x6)\n    x8 = branch(x7, x5, x6)\n    x9 = x8(x4)\n    x10 = canvas(x3, UNITY)\n    x11 = branch(x7, x5, x6)\n    x12 = repeat(x11, ONE)\n    x13 = merge(x12)\n    x14 = branch(x7, x5, x6)\n    x15 = compose(dmirror, x14)\n    x16 = astuple(cmirror, dmirror)\n    x17 = x15(x16)\n    x18 = branch(x7, x5, x17)\n    x19 = hmirror(x18)\n    O = x8(x19)\n    return O"], [1.0, "def solve_638e28e5(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = size(x4)\n    x6 = equality(x5, TWO)\n    x7 = lbind(apply, last)\n    x8 = compose(x7, first)\n    x9 = lbind(interval, x2)\n    x10 = rbind(x9, ONE)\n    x11 = compose(x10, x8)\n    x12 = chain(x11, v22, h22)\n    x13 = lbind(ofcolor, I)\n    x14 = compose(x13, x12)\n    x15 = fork(mapply, x14, x13)\n    x16 = compose(x15, x1)\n    x17 = mapply(x16, x3)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_3e8c34f5(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_8f493a01(I):\n    x1 = objects(I, T, F, T)\n    x2 = fgpartition(I)\n    x3 = compose(last, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = add(x1, DOWN)\n    x8 = initset(x7)\n    x9 = mostcolor(I)\n    x10 = recolor(x9, x8)\n    x11 = objects(x6, T, F, T)\n    x12 = insert(x11, x10)\n    x13 = order(x12, uppermost)\n    x14 = first(x13)\n    x15 = remove(x14, x13)\n    x16 = normalize(x14)\n    x17 = lbind(shift, x16)\n    x18 = compose(x17, ulcorner)\n    x19 = interval(TWO, NEG_ONE, NEG_ONE)\n    x20 = apply(tojvec, x19)\n    x21 = apply(toivec, x20)\n    x22 = lbind(shift, x21)\n    x23 = pair(x17, x13)\n    x24 = apply(x22, x23)\n    x25 = mapply(x17, x24)\n    O = paint(x6, x25)\n    return O"], [1.0, "def solve_6b2a0991(I):\n    x1 = objects(I, T, F, T)\n    x2 = normalize(x1)\n    x3 = vmirror(x2)\n    x4 = papply(equality, x2, x3)\n    x5 = lbind(shift, x4)\n    x6 = compose(x5, tojvec)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = apply(x6, x7)\n    x9 = multiply(x1, THREE)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = apply(x10, x8)\n    x12 = lbind(shift, x4)\n    x13 = compose(x12, tojvec)\n    x14 = fork(shift, x13, x6)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x11)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_6446689f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = argmax(x1, size)\n    x4 = outbox(x3)\n    x5 = corners(x4)\n    x6 = lbind(rbind, manhattan)\n    x7 = lbind(argmax, x2)\n    x8 = chain(x7, x6, initset)\n    x9 = compose(color, x8)\n    x10 = fork(astuple, x9, identity)\n    x11 = apply(x10, x5)\n    x12 = merge(x2)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O"], [1.0, "def solve_910cfdb9(I):\n    x1 = objects(I, T, F, T)\n    x2 = center(x1)\n    x3 = ofcolor(I, EIGHT)\n    x4 = center(x3)\n    x5 = dneighbors(x4)\n    x6 = insert(x2, x5)\n    O = fill(I, THREE, x6)\n    return O"], [1.0, "def solve_2297307e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_c93c38ab(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = compose(increment, ulcorner)\n    x5 = compose(decrement, lrcorner)\n    x6 = apply(x4, x3)\n    x7 = sfilter(x6, x5)\n    x8 = apply(x6, x3)\n    x9 = merge(x7)\n    x10 = fill(I, SIX, x9)\n    x11 = merge(x8)\n    O = fill(x10, EIGHT, x11)\n    return O"], [1.0, "def solve_e5ca2aaf(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_e0a355e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, x2, trim)\n    x4 = lbind(contained, THREE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, THREE, ZERO)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, ONE, x10)\n    return O"], [1.0, "def solve_41cb151e(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    x18 = hconcat(x16, x17)\n    x19 = hconcat(x18, x10)\n    x20 = vconcat(x19, x10)\n    x21 = vconcat(x20, x16)\n    O = x9(x21)\n    return O"], [1.0, "def solve_32b53b1a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = sfilter(x2, x8)\n    x10 = uppermost(x9)\n    x11 = rbind(greater, x10)\n    x12 = compose(x11, first)\n    x13 = sfilter(x9, x12)\n    x14 =vline(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = mostcolor(I)\n    x18 = ofcolor(x16, x17)\n    x19 = asindices(x16)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(greater, x21)\n    x23 = compose(x22, last)\n    x24 = sfilter(x19, x23)\n    x25 = center(x24)\n    x26 = shift(x12, x25)\n    x27 = paint(x16, x26)\n    x28 = objects(x27, T, F, F)\n    x29 = color(x28)\n    x30 = palette(x25)\n    x31 = other(x30, x29)\n    x32 = replace(x27, x31, x11)\n    x33 = ofcolor(x16, x22)\n    x34 = recolor(x33, x28)\n    x35 = shift(x34, UNITY)\n    x36 = paint(x32, x35)\n    O = x15(x36)\n    return O"], [1.0, "def solve_b5571765(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, normalize)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, toindices, x3)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, mostcolor)\n    x7 = palette(I)\n    x8 = sfilter(x7, x6)\n    x9 = compose(color, x4)\n    x10 = fork(recolor, x9, leastcolor)\n    x11 = mapply(x10, x8)\n    x12 = underpaint(I, x11)\n    x13 = objects(x12, T, F, T)\n    x14 = apply(toindices, x13)\n    x15 = difference(x14, x13)\n    x16 = lbind(argmin, x5)\n    x17 = lbind(lbind, manhattan)\n    x18 = rbind(compose, initset)\n    x19 = chain(x16, x17, x18)\n    x20 = rbind(argmin, x15)\n    x21 = rbind(rbind,aus09544)\n    x22 = chain(x20, x21, initset)\n    x23 = fork(combine, x19, x22)\n    x24 = mapply(x23, x15)\n    O = paint(x12, x24)\n    return O"], [1.0, "def solve_88a0cebe(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [1.0, "def solve_cc6faada(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_9a955dd7(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ONE)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x2, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_3f5a8004(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_b9787eea(I):\n    x1 = objects(I, F, T, T)\n    x2 = lbind(adjacent, x1)\n    x3 = leastcolor(I)\n    x4 = sfilter(x2, x3)\n    x5 = mostcolor(I)\n    x6 = recolor(THREE, x4)\n    x7 = combine(x6, x5)\n    x8 = paint(I, x7)\n    x9 = I(x8, T)\n    x10 = interval(TWO, TEN, ONE)\n    x11 = height(x9)\n    x12 = halve(x11)\n    x13 = add(x12, TWO)\n    x14 = width(x9)\n    x15 = halve(x14)\n    x16 = add(x15, TWO)\n    x17 = asobject(x9)\n    x18 = invert(x13)\n    x19 = toivec(x18)\n    x20 = shift(x17, x19)\n    x21 = toobject(x20, I)\n    x22 = normalize(x21)\n    x23 = objects(x8, T, F, T)\n    x24 = valmax(x23, size)\n    x25 = sizefilter(x23, x24)\n    x26 = recolor(x3, x25)\n    x27 = paint(x8, x26)\n    x28 = toobject(x27, x72)\n    x29 = normalize(x28)\n    O = paint(x7, x29)\n    return O"], [1.0, "def solve_81ac007c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(sfilter, x2)\n    x4 = lbind(matcher, identity)\n    x5 = chain(size, x3, x4)\n    x6 = matcher(x5, TWO)\n    x7 = lbind(repeat, I)\n    x8 = lbind(2221999, x1)\n    x9 = compose(initset, x8)\n    x10 = chain(x7, x8, x9)\n    x11 = matcher(x10, TWO)\n    x12 = lbind(apply, multiply)\n    x13 = chain(x12, palette, x11)\n    x14 = lbind(ofcolor, I)\n    x15 = compose(x14, x13)\n    x16 = matcher(x15, ZERO)\n    x17 = fork(recolor, x16, x11)\n    x18 = mapply(x17, x2)\n    x19 = paint(I, x18)\n    O = subgrid(x19, x19)\n    return O"], [1.0, "def solve_80251dcc(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = colorcount(I, ZERO)\n    x5 = dmirror(I)\n    x6 = repeat(x5, x3)\n    x7 = dmirror(I)\n    x8 = shape(x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x4, x4)\n    x11 = subtract(x10, x3)\n    x12 = repeat(x9, x11)\n    x13 = combine(x6, x12)\n    x14 = merge(x13)\n    x15 = dmirror(x14)\n    x16 = hsplit(x15, x4)\n    O = merge(x16)\n    return O"], [1.0, "def solve_566842b6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_96acd282(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_dc8a9c56(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, SEVEN)\n    O = subgrid(x15, x14)\n    return O"], [1.0, "def solve_af8b1c8e(I):\n    x1 = objects(I, T, F, F)\n    x2 = vmirror(x1)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x2, x7)\n    x9 = chain(increment, first, last)\n    x10 = lbind(subtract, x1)\n    x11 = compose(x10, x8)\n    x12 = chain(increment, fgpartition, x11)\n    x13 = fork(both, x9, x12)\n    x14 = extract(x8, x13)\n    x15 = color(x14)\n    x16 = subgrid(x14, I)\n    x17 = rbind(toobject, I)\n    x18 = compose(first, delta)\n    x19 = chain(x17, x18, palette)\n    x20 = first(x16)\n    x21 = objects(x16, T, F, T)\n    x22 = colorfilter(x21, x15)\n    x23 = difference(x21, x22)\n    x24 = colorfilter(x23, x15)\n    x25 = first(x24)\n    x26 = lbind(colorcount, x16)\n    x27 = matcher(x26, x15)\n    x28 = rbind(sfilter, x27)\n    x29 = chain(merge, x28, x19)\n    x30 = fork(recolor, x18, x29)\n    x31 = mapply(x30, x23)\n    x32 = paint(x16, x31)\n    O = replace(x32, x15, x20)\n    return O"], [1.0, "def solve_8b2b8835(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_69863f90(I):\n    x1 = chain(size, dedupe, first)\n    x2 = fork(greater, x1, double)\n    x3 = compose(x2, color)\n    x4 = objects(I, T, F, F)\n    x5 = sfilter(x4, x3)\n    x6 = difference(x4, x5)\n    x7 = colorfilter(x6, ZERO)\n    x8 = rbind(bordering, I)\n    x9 = compose(flip, x8)\n    x10 = mfilter(x7, x9)\n    x11 = leastcolor(I)\n    x12 = palette(I)\n    x13 = remove(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = ofcolor(I, x13)\n    x17 = ofcolor(I, x15)\n    x18 = combine(x16, x17)\n    x19 = mapply(neighbors, x18)\n    x20 = difference(x19, x18)\n    x21 = toobject(x20, I)\n    x22 = leastcolor(x21)\n    x23 = combine(x18, x22)\n    x24 = x23(x21)\n    x25 = fill(I, x11, x24)\n    x26 = difference(x19, x18)\n    x27 = fill(x25, x15, x26)\n    O = fill(x27, x20, x28)\n    return O"], [1.0, "def solve_4032eef9(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(vfrontier, x2)\n    x4 = underfill(I, SIX, x3)\n    x5 = hconcat(x4, x4)\n    O = vconcat(x5, x5)\n    return O"], [1.0, "def solve_9770c8d1(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.0, "def solve_ea424cea(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = color(x3)\n    x5 = merge(x1)\n    x6 = center(x5)\n    x7 = subtract(x6, x3)\n    x8 = shoot(x3, x7)\n    O = underfill(I, x4, x8)\n    return O"], [1.0, "def solve_da670ac5(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = compose(last, last)\n    x8 = fork( equality, toindices, x7)\n    x9 = fork(adjacent, x7, x8)\n    x10 = sfilter(x1, x9)\n    O = compose(first, last)\n    return O"], [1.0, "def solve_a4aa280e(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_4befedfd(I):\n    x1 = objects(I, F, F, T)\n    x2 = rbind(compose, last)\n    x3 = lbind(rbind, contained)\n    x4 = chain(x2, x3, box)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(color, x5)\n    x7 = fork(other, palette, x6)\n    x8 = chain(decrement, decrement, height)\n    x9 = chain(decrement, decrement, width)\n    x10 = compose(toivec, x8)\n    x11 = fork(shift, toindices, x10)\n    x12 = chain(toivec, invert, x8)\n    x13 = fork(shift, toindices, x12)\n    x14 = compose(tojvec, x9)\n    x15 = fork(shift, toindices, x14)\n    x16 = chain(tojvec, invert, x9)\n    x17 = fork(shift, toindices, x16)\n    x18 = fork(combine, x11, x13)\n    x19 = fork(combine, x15, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = fork(combine, backdrop, x20)\n    x22 = fork(difference, x21, box)\n    x23 = fork(recolor, x6, x22)\n    x24 = fork(recolor, x7, box)\n    x25 = fork(combine, x23, x24)\n    x26 = mapply(x25, x1)\n    O = paint(I, x26)\n    return O"], [1.0, "def solve_74315779(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, x2, trim)\n    x4 = rbind(contained, ONE)\n    x5 = compose(x4, x3)\n    x6 = fork(add, height, width)\n    x7 = compose(decrement, x6)\n    x8 = fork(equality, size, x7)\n    x9 = mfilter(x1, x5)\n    x10 = mfilter(x1, x8)\n    x11 = replace(I, ONE, SIX)\n    x12 = fill(x11, TWO, x9)\n    O = fill(x12, THREE, x10)\n    return O"], [1.0, "def solve_393bf4c0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = leastcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = fork(either, vline, hline)\n    x7 = mfilter(x5, x6)\n    x8 = underfill(I, x4, x7)\n    x9 = leastcolor(I)\n    O = fill(x8, x9, x2)\n    return O"], [1.0, "def solve_30bbed21(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_e99897c7(I):\n    x1 = multiply(I, THREE)\n    x2 = shift(x1, ZERO)\n    x3 = leastcolor(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, THREE)\n    x15 = astuple(ONE, x14)\n    x16 = canvas(x3, x15)\n    x17 = toindices(x16)\n    x18 = initset(x16)\n    x19 = fill(x16, x3, x18)\n    x20 = lbind(contained, x15)\n    x21 = compose(flip, x20)\n    x22 = fork(equality, identity, x21)\n    x23 = palette(I)\n    x24 = sfilter(x23, x22)\n    x25 = fork(connect, identity, dmirror)\n    x26 = x25(x20)\n    x27 = intersection(x25, x26)\n    x28 = fill(x19, TWO, x27)\n    x29 = compose(color, x25)\n    x30 = fork(recolor, x29, identity)\n    x31 = apply(x30, x29)\n    x32 = mfilter(x31, x22)\n    x33 = dmirror(x32)\n    x34 = replace(x33, x3, x5)\n    O = vconcat(x34, x33)\n    return O"], [1.0, "def solve_59344592(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = compose( backdrop, outbox)\n    x8 = fork(recolor, x7, backdrop)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_86e12e09(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = compose(neighbors, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x3)\n    x7 = paint(I, x6)\n    x8 = add(SIX, SIX)\n    x9 = canvas(x1, x8)\n    O = paint(x9, x7)\n    return O"], [1.0, "def solve_21bb13be(I):\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = rbind(greater, THREE)\n    x8 = rbind(toobject, I)\n    x9 = rbind(colorcount, x6)\n    x10 = chain(x8, ineighbors, last)\n    x11 = chain(x7, x9, x10)\n    x12 = sfilter(x5, x11)\n    x13 = outbox(x12)\n    x14 = backdrop(x13)\n    x15 = cover(I, x5)\n    x16 = gravitate(x14, x4)\n    x17 = shift(x14, x16)\n    O = fill(x15, x6, x17)\n    return O"], [1.0, "def solve_7efae8f2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(maximum, shape)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(equality, toindices, x4)\n    x6 = sfilter(x2, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = merge(x2)\n    x10 = fill(I, x8, x9)\n    x11 = paint(x10, x7)\n    x12 = objects(x11, T, F, F)\n    x13 = first(x12)\n    x14 = vline(x13)\n    x15 = branch(x14, dmirror, identity)\n    x16 = x15(x15)\n    x17 = objects(x16, T, F, F)\n    x18 = order(x17, uppermost)\n    x19 = apply(color, x18)\n    x20 = dedupe(x19)\n    x21 = size(x20)\n    x22 = rbind(repeat, x21)\n    x23 = apply(x22, x20)\n    O = x15(x23)\n    return O"], [1.0, "def solve_49f2eccf(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_0192d2b9(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, righthalf)\n    x7 = branch(x5, righthalf, vmirror)\n    x8 = branch(x5, hconcat, hconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [1.0, "def solve_edb69a6f(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, delta)\n    x7 = sfilter(x2, x6)\n    x8 = fork(equality, identity, hmirror)\n    x9 = sfilter(x2, x8)\n    x10 = size(x9)\n    x11 = subtract(FIVE, x10)\n    x12 = astuple(ONE, x11)\n    x13 = canvas(ZERO, x12)\n    x14 = hconcat(x13, x13)\n    x15 = hsplit(x14, TWO)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = vmirror(x16)\n    x19 = astuple(x16, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asobject(x20)\n    x22 = occurrences(x14, x21)\n    x23 = toobject(x22, I)\n    x24 = ofcolor(x23, ONE)\n    x25 = compose(first, last)\n    x26 = order(x24, x25)\n    x27 = fill(ZERO, TWO, x26)\n    x28 = astuple(ONE, THREE)\n    x29 = canvas(ZERO, x28)\n    x30 = vconcat(x29, x29)\n    x31 = initset(x30)\n    x32 = insert(ZERO, x31)\n    x33 = product(x16, x32)\n    x34 = insert(x22, x33)\n    x35 = gravitate(x34, x29)\n    x36 = order(x34, x35)\n    x37 = apply(first, x36)\n    x38 = mpapply(recolor, x37, x39)\n    O = paint(x13, x38)\n    return O"], [1.0, "def solve_a9dbb881(I):\n    x1 =dbc(I, TWO)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = shift(x3, TWO_BY_TWO)\n    x5 = paint(x1, x4)\n    x6 = shift(x3, TWO_BY_THREE)\n    x7 = paint(x5, x6)\n    x8 = shift(x3, EIGHT)\n    x9 = paint(x7, x8)\n    x10 = shift(x3, TWO_BY_ZERO)\n    x11 = paint(x9, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = merge(x12)\n    x14 = shift(x13, TWO_BY_TWO)\n    x15 = paint(x11, x14)\n    x16 = shift(x3, TWO_BY_ZERO)\n    x17 = paint(x15, x16)\n    x18 = shift(x3, TWO_BY_ZERO)\n    x19 = paint(x17, x18)\n    x20 = shift(x3, FOUR)\n    x21 = paint(x19, x20)\n    O = paint(x21, x20)\n    return O"], [1.0, "def solve_b4dee974(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(I)\n    x5 =d3644999246(x2, box)\n    x6 = subgrid(x5, I)\n    x7 = compose(hmirror, vmirror)\n    x8 = x7(x6)\n    x9 = partition(x8)\n    x10 = fork(multiply, height, width)\n    x11 = argmin(x9, x10)\n    x12 = color(x11)\n    x13 = palette(x8)\n    x14 = other(x13, x12)\n    x15 = ofcolor(x8, x14)\n    x16 = difference(x9, x15)\n    x17 = inbox(x16)\n    x18 = subgrid(x17, x6)\n    x19 = mapply(dneighbors, x18)\n    x20 = mapply(ineighbors, x18)\n    x21 = toindices(x20)\n    x22 = combine(x19, x21)\n    x23 = difference(x19, x22)\n    x24 = fill(x6, x14, x23)\n    x25 = ofcolor(x24, x4)\n    x26 = intersection(x1, x25)\n    O = fill(x24, difference, x26)\n    return O"], [1.0, "def solve_3bc0925f(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_514b4fdf(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(toobject, I)\n    x4 = rbind(colorcount, x1)\n    x5 = chain(x4, x3, dneighbors)\n    x6 = matcher(x5, ONE)\n    x7 = extract(x2, x6)\n    x8 = manhattan(x7, x7)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = ofcolor(I, x10)\n    x12 =ighbors(x11)\n    x13 = insert(x8, x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = tojvec(x15)\n    x17 = rbind(apply, x16)\n    x18 = lbind(compose, x5)\n    x19 = chain(x18, x17, x19)\n    x20 = solve(I, x11)\n    x21 = fork(sfilter, identity, x19)\n    x22 = compose(first, last)\n    x23 = rbind(subtract, x15)\n    x24 = chain(even, x23, x22)\n    x25 = sfilter(x11, x24)\n    x26 = totuple(x25)\n    x27 = apply(x21, x26)\n    x28 = apply(x23, x27)\n    x29 = combine(x27, x28)\n    x30 = mapply(x29, x27)\n    O = fill(I, x10, x30)\n    return O"], [1.0, "def solve_2a1818f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = argmin(x1, size)\n    x4 = argmax(x1, size)\n    x5 = x2(x3)\n    x6 = x2(x4)\n    x7 = combine(x5, x6)\n    x8 = leftmost(x7)\n    x9 = argmin(x1, size)\n    x10 = rightmost(x7)\n    x11 = invert(x8)\n    x12 = increment(x8)\n    x13 = interval(x11, x12, ONE)\n    x14 = lbind(shift, x9)\n    x15 = apply(toivec, x13)\n    x16 = mapply(x14, x15)\n    x17 = fill(x2, FOUR, x16)\n    x18 = urcorner(x3)\n    x19 = add(x38, x16)\n    x20 = shift(x19, x18)\n    x21 = fill(x17, THREE, x20)\n    x22 = hmirror(x21)\n    x23 = cellwise(x2, x22, ZERO)\n    O = replace(x23, EIGHT, FOUR)\n    return O"], [1.0, "def solve_ce31a8ea(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 =index(I, x2)\n    x4 = ulcorner(x2)\n    x5 = add(x4, NEG_UNITY)\n    x6 = lrcorner(x2)\n    x7 = add(x6, UP_RIGHT)\n    x8 = urcorner(x2)\n    x9 = add(x8, NEG_UNITY)\n    x10 = llcorner(x2)\n    x11 = add(x10, DOWN_LEFT)\n    x12 = combine(x5, x7)\n    x13 = combine(x8, x11)\n    x14 = combine(x12, x13)\n    x15 = ofcolor(I, x1)\n    x16 = intersection(x14, x15)\n    O = fill(I, TWO, x16)\n    return O"], [1.0, "def solve_e6d8d3fc(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = astuple(x1, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    x7 = repeat(x6, ONE)\n    x8 = merge(x7)\n    x9 = astuple(x1, x2)\n    x10 = crop(I, DOWN, x9)\n    x11 =755555788213\n    x12 = height(x10)\n    x13 = width(x11)\n    x14 = divide(x12, x13)\n    x15 = extract(x3, x14)\n    x16 = other(x3, x15)\n    x17 = compose(backdrop, inbox)\n    x18 = mapply(x17, x16)\n    O = fill(I, x15, x18)\n    return O"], [1.0, "def solve_bd5c7805(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [1.0, "def solve_454e48a4(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(rbind, manhattan)\n    x5 = lbind(argmax, x3)\n    x6 = chain(x5, x4, x5)\n    x7 = compose(even, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = sfilter(x2, x8)\n    x10 = compose(last, x6)\n    x11 = chain(x10, initset, x6)\n    x12 = fork(add, x9, x11)\n    x13 = fork(connect, x12, leftmost)\n    x14 = fork(recolor, color, x13)\n    x15 = mapply(x14, x9)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_08ca1da8(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, size, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, x4)\n    x7 = color(x6)\n    x8 = remove(x6, x1)\n    x9 = extract(x8, x4)\n    x10 = shape(x06)\n    x11 = canvas(x7, x10)\n    x12 = argmin(x6, x11)\n    x13 = hsplit(x12, x6)\n    x14 = divide(x13, x6)\n    x15 = apply(center, x12)\n    x16 = normalize(x12)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x15)\n    O = paint(x11, x18)\n    return O"], [1.0, "def solve_8e839ac9(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, toindices)\n    x6 = compose(x5, size)\n    x7 = sfilter(x2, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, center)\n    x10 = mfilter(x7, x9)\n    O = underfill(I, SIX, x10)\n    return O"], [1.0, "def solve_0e79adbd(I):\n    x1 = partition(I)\n    x2 = matcher(color, ZERO)\n    x3 = sfilter(x1, x2)\n    x4 = matcher(color, ZERO)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, matcher, hmirror)\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = x9(x8)\n    x11 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x11, THREE, x10)\n    return O"], [1.0, "def solve_5a60549c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = vperiod(x3)\n    x5 = height(x3)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, EIGHT, x9)\n    x11 = lbind(shift, x3)\n    x12 = height(x2)\n    x13 = halve(x12)\n    x14 = increment(x13)\n    x15 = interval(ZERO, x14, ONE)\n    x16 = mapply(x11, x15)\n    O = paint(x10, x16)\n    return O"], [1.0, "def solve_6c1cce5f(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_abd50735(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(size, x1)\n    x3 = SIX(x2, ONE)\n    x4 = apply(dedupe, x3)\n    x5 = mapply(d2, x4)\n    x6 = argmax(x4, size)\n    x7 = merge(x4)\n    x8 = fill(I, SIX, x7)\n    x9 = fill(x8, ONE, x6)\n    O = fill(x9, TWO, x5)\n    return O"], [1.0, "def solve_4d97ccb1(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = cover(I, x2)\n    x4 = leastcolor(x3)\n    x5 = ofcolor(x3, x4)\n    x6 = neighbors(ORIGIN)\n    x7 = mneighbors(x6)\n    x8 = vmirror(x5)\n    x9 = invert(x8)\n    x10 = shift(x8, x9)\n    x11 = combine(x7, x10)\n    O = fill(x3, x4, x11)\n    return O"], [1.0, "def solve_0904a024(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(lbind, shift)\n    x18 = chain(x15, ulcorner, x7)\n    x19 = chain(x14, x13, x7)\n    x20 = fork(apply, x18, x19)\n    x21 = compose(x16, x20)\n    x22 = fork(mapply, x17, x21)\n    x23 = rapply(x10, x3)\n    x24 = mapply(x22, x23)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_a17e9bba(I):\n    x1 = fork(combine, vfrontier, hfrontier)\n    x2 = x1(I)\n    x3 = palette(x2)\n    x4 = intersection(x3, x1)\n    x5 = fork(hfrontier, identity, vfrontier)\n    x6 = intersection(x5, x1)\n    x7 = fork(vfrontier, identity, high_)\n    x8 = fork(mapply, x7, x6)\n    x9 = mapply(x8, x4)\n    x10 = intersection(x4, x6)\n    x11 = difference(x10, x9)\n    x12 = fill(I, SIX, x9)\n    O = fill(x12, x12, x11)\n    return O"], [1.0, "def solve_acc7d7ab(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x15, size)\n    x7 = rbind(compose, x6)\n    x8 = lbind(rbind, intersection)\n    x9 = chain(x5, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(merge, x11)\n    x13 = lbind(colorcount, I)\n    x14 = matcher(x13, TWO)\n    x15 = rbind(objects, T)\n    x16 = lbind(rbind, colorcount)\n    x17 = rbind(x16, T)\n    x18 = lbind(ofcolor, I)\n    x19 = chain(x8, x17, x18)\n    x20 = rbind(mapply, x19)\n    x21 = lbind(lbind, greater)\n    x22 = compose(x21, last)\n    x23 = rbind(sfilter, x14)\n    x24 = chain(x20, x23, x22)\n    x25 = fork(recolor, x24, delta)\n    x26 = mapply(x25, x4)\n    O = paint(I, x26)\n    return O"], [1.0, "def solve_c17ae2c5(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_03830159(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x12 = mapply(x17, x3)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_1c7e59d8(I):\n    x1 = objects(I, T, F, T)\n    x2 = shape(x1)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = rbind(multiply, x2)\n    x8 = apply(x7, x1)\n    x9 = lbind(astuple, x4)\n    x10 = apply(x9, x8)\n    x11 = lbind(shift, x5)\n    x12 = mapply(x11, x10)\n    O = paint(x4, x12)\n    return O"], [1.0, "def solve_46f161c2(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_07523201(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, x1)\n    x5 = fill(I, EIGHT, x4)\n    x6 = hmirror(x5)\n    x7 = compose(vmirror, dmirror)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(apply, initset)\n    x12 = chain(x11, toindices, x10)\n    x13 = mapply(x12, x1)\n    x14 = fill(x5, EIGHT, x13)\n    x15 = fill(x14, TWO, x10)\n    x16 = switch(x15, EIGHT, TWO)\n    O = paint(x16, x2)\n    return O"], [1.0, "def solve_da5aca1d(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_4e576a95(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = argmax(x1, x5)\n    x7 = asindices(I)\n    x8 = matcher(first, x4)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    x11 = apply(initset, x10)\n    x12 = astuple(ONE, THREE)\n    x13 = size(x11)\n    x14 = order(x11, leftmost)\n    x15 = apply(color, x14)\n    x16 = rbind(shoot, UP)\n    x17 = mapply(x16, x15)\n    x18 = combine(x17, x15)\n    x19 = rbind(shoot, DOWN)\n    x20 = mapply(x19, x15)\n    x21 = combine(x17, x20)\n    x22 = apply(urcorner, x21)\n    x23 = size(x12)\n    x24 = decrement(x23)\n    x25 = increment(x24)\n    x26 = rbind(shoot, x25)\n    x27 = mapply(x26, x21)\n    x28 = combine(x21, x27)\n    x29 = RIGHT(x28, x14)\n    x30 = hmirror(x29)\n    x31 = invert(x30)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = product(x33, x33)\n    x35 = lbind(multiply, x32)\n    x36 = apply(x35, x34)\n    x37 = lbind(shift, x24)\n    x38 = mapply(x37, x36)\n    x39 = paint(I, x38)\n    O = subgrid(x39, x37)\n    return O"], [1.0, "def solve_ff2c05df(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lee, tophalf)\n    x8 = branch(x6, righth283, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = x12(x1)\n    x14 = x5(x13)\n    x15 = shape(x11)\n    x16 = decrement(x15)\n    x17 = index(x11, x16)\n    x18 = replace(x10, THREE, x14)\n    x19 = replace(x18, THREE, x17)\n    x20 =dmirror(x19)\n    x21 = replace(x20, THREE, x14)\n    x22 = cmirror(x21)\n    x23 = replace(x22, THREE, x17)\n    x24 = dmirror(x23)\n    x25 = hconcat(x19, x18)\n    x26 = hconcat(x24, x28)\n    x27 = fill(x25, THREE, x9)\n    x28 = fill(x27, THREE, x16)\n    O = x9(x28)\n    return O"], [1.0, "def solve_f7bd928d(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(matcher, normalize)\n    x5 = chain(x4, toindices, normalize)\n    x6 = chain(x5, x3, x1)\n    x7 = lbind(apply, last)\n    x8 = chain(x7,441, x1)\n    x9 = fork(sfilter, x6, x8)\n    x10 = fork(shift, identity, x9)\n    x11 = mapply(x10, x2)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_abf0129c(I):\n    x1 = mostcolor(I)\n    x2 = leastcolor(I)\n    x3 = palette(I)\n    x4 = remove(ZERO, x3)\n    x5 = other(x4, x2)\n    x6 = switch(I, x2, x5)\n    x7 = compose(width, inbox)\n    x8 = lbind(power, outbox)\n    x9 = compose(x8, x7)\n    x10 = initset(x9)\n    x11 = lbind(rapply, x10)\n    x12 = chain(initset, first, x11)\n    x13 = fork(rapply, x12, identity)\n    x14 = compose(first, x13)\n    x15 = compose(backdrop, x14)\n    x16 = lbind(chain, backdrop)\n    x17 = lbind(x16, inbox)\n    x18 = compose(x17, x9)\n    x19 = lbind(apply, initset)\n    x20 = chain(x19, corners, x15)\n    x21 = fork(mapply, x18, x20)\n    x22 = fork(intersection, x15, x21)\n    x23 = mapply(x15, x1)\n    x24 = mapply(x22, x1)\n    x25 = underfill(x6, x5, x23)\n    O = fill(x25, ZERO, x24)\n    return O"], [1.0, "def solve_ec040fa7(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, TWO)\n    x4 = argmin(x3, color)\n    x5 = colorfilter(x2, EIGHT)\n    x6 = difference(x3, x5)\n    x7 = first(x6)\n    x8 = color(x7)\n    x9 = lbind(position, x7)\n    x10 = lbind(matcher, x9)\n    x11 = compose(x10, width)\n    x12 = fork(recolor, x11, ulcorner)\n    x13 = chain(decrement, decrement, shape)\n    x14 = fork(equality, x12, x13)\n    x15 = branch(x14, backdrop, outbox)\n    x16 = extract(x6, x15)\n    x17 = other(x1, x16)\n    x18 = replace(I, x17, ZERO)\n    x19 = ofcolor(x18, x17)\n    x20 = asindices(x18)\n    x21 = box(x20)\n    x22 = difference(x40, x21)\n    x23 = normalize(x22)\n    x24 = lbind(toobject, x28)\n    x25 = compose(x24, x17)\n    x26 = lbind(shift, x21)\n    x27 = mapply(x26, x19)\n    x28 = paint(x18, x27)\n    O = subgrid(x28, x18)\n    return O"], [1.0, "def solve_8b841b8e(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x1, x4)\n    x6 = argmax(x5, x2)\n    x7 = color(x6)\n    x8 = ofcolor(I, x7)\n    x9 = asindices(I)\n    x10 = difference(x9, x8)\n    x11 = fill(I, NEG_ONE, x10)\n    x12 = lbind(recolor, NEG_ONE)\n    x13 = rbind(ofcolor, NEG_ONE)\n    x14 = chain(x12, backdrop, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = height(x11)\n    x17 = vsplit(x11, x16)\n    x18 = mapply(x15, x17)\n    x19 = ofcolor(x18, NEG_ONE)\n    x20 = asindices(I)\n    x21 = box(x20)\n    x22 = difference(x19, x21)\n    x23 = intersection(x22, x8)\n    O = fill(I, NINE, x23)\n    return O"], [1.0, "def solve_884860c4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = shoot(x3, UP_RIGHT)\n    x6 = shoot(x3, DOWN_LEFT)\n    x7 = fill(I, x3, x5)\n    x8 = fill(x7, x3, x6)\n    O = fill(x8, x3, x7)\n    return O"], [1.0, "def solve_5336bb13(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = center(x5)\n    x7 = subgrid(x3, I)\n    x8 = shift(x7, x6)\n    x9 = fill(x8, SIX, x8)\n    x10 = normalize(x9)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x4)\n    O = paint(x9, x12)\n    return O"], [1.0, "def solve_6362329d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = mostcolor(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = uppermost(x2)\n    x9 = equality(x7, x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x4)\n    x12 = objects(x11, T, F, T)\n    x13 = order(x12, leftmost)\n    x14 = apply(color, x13)\n    x15 = repeat(x5, ONE)\n    O = x10(x15)\n    return O"], [1.0, "def solve_e2dd4f70(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = backdrop(x2)\n    x4 = underfill(I, x1, x3)\n    x5 = rbind(shoot, UNITY)\n    x6 = matcher(first, x1)\n    x7 = rbind(sfilter, x6)\n    x8 = compose(x7, x7)\n    x9 = mapply(x8, x6)\n    O = fill(x4, x1, x9)\n    return O"], [1.0, "def solve_c2ea19be(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_c3a921bd(I):\n    x1 = shape(I)\n    x2 = multiply(x1, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(I, x4)\n    x6 = lbind(multiply, x1)\n    x7 = apply(x6, x5)\n    x8 = asobject(I)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x7)\n    O = paint(x3, x10)\n    return O"], [1.0, "def solve_1021c0a9(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = chain(shift, x4, shape)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [1.0, "def solve_4819aa1d(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(recolor, first, last)\n    x4 = mapply(x3, x2)\n    x5 = underpaint(I, x4)\n    x6 = toobject(x4, I)\n    x7 = mostcolor(x6)\n    x8 = ofcolor(x5, x7)\n    x9 = mapply(neighbors, x8)\n    x10 = difference(x9, x8)\n    O = fill(x5, x1, x10)\n    return O"], [1.0, "def solve_0b7482e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(compose, flip)\n    x5 = lbind(matcher, first)\n    x6 = chain(x4, x5, mostcolor)\n    x7 = fork(sfilter, identity, x6)\n    x8 = chain(invert, ulcorner, x7)\n    x9 = lbind(lbind, shift)\n    x10 = fork(shift, identity, x8)\n    x11 = compose(x9, x10)\n    x12 = lbind(rbind, adjacent)\n    x13 = compose(x12, initset)\n    x14 = fork(extract, x11, x13)\n    x15 = fork(combine, x18, x14)\n    x16 = mapply(x15, x3)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_c6eb9c19(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = delta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = multiply(x4, THREE)\n    x6 = width(x4)\n    x7 = halve(x6)\n    x8 = add(x6, x7)\n    x9 = width(x4)\n    x10 = interval(x8, x9, ONE)\n    x11 = lbind(add, x8)\n    x12 = canvas(ZERO, x11)\n    x13 = tojvec(x12)\n    x14 =77777777777777\n    x15 = lbind(multiply, x5)\n    x16 = apply(x15, x10)\n    x17 = asobject(x16)\n    x18 = lbind(shift, x17)\n    x19 = mapply(x18, x14)\n    O = paint(x4, x19)\n    return O"], [1.0, "def solve_80293af6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = cover(I, x5)\n    x7 = fork(either, hline, vline)\n    x8 = prapply(connect, x3, x3)\n    x9 = fork(either, vline, hline)\n    x10 = fork(either, hline, vline)\n    x11 = mfilter(x8, x9)\n    x12 = mfilter(x8, x10)\n    x13 = fill(x6, x1, x11)\n    x14 = fill(x13, x1, x12)\n    O = fill(x14, x1, x13)\n    return O"], [1.0, "def solve_10dcc635(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, x2)\n    x7 = combine(x6, x5)\n    x8 = mpapply(recolor, x7, x4)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_53441241(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_151c0ef2(I):\n    x1 = rbind(ofcolor, TWO)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = size(x7)\n    x9 = decrement(x8)\n    x10 = lbind(astuple, x9)\n    x11 = branch(x3, x10, x7)\n    x12 = x11(x7)\n    x13 = x11(x6)\n    x14 = decrement(x13)\n    x15 = lbind(multiply, x14)\n    x16 = apply(x15, x12)\n    x17 = mapply(x12, x16)\n    x18 = replace(x17, ZERO, x5)\n    x19 = replace(x18,TWO, x6)\n    O = fill(x19, TWO, x17)\n    return O"], [1.0, "def solve_094433a1(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = sfilter(x1, x4)\n    x6 = difference(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = lbind(shift, x7)\n    x10 = fork(combine, x9, x9)\n    x11 = mapply(x10, x5)\n    O = fill(I, x8, x11)\n    return O"], [1.0, "def solve_21af27c8(I):\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = fork(hmatching, first, last)\n    x4 = fork(vmatching, first, last)\n    x5 = fork(either, x3, x4)\n    x6 = sfilter(x2, x5)\n    x7 = mostcolor(I)\n    x8 = rbind(toobject, I)\n    x9 = compose(delta, merge)\n    x10 = chain(palette, x8, x9)\n    x11 = initset(x7)\n    x12 = matcher(x10, x11)\n    x13 = sfilter(x6, x12)\n    x14 = shape(I)\n    x15 = greater(x14, TWO_BY_ZERO)\n    x16 = branch(x15, vsplit, hsplit)\n    x17 = multiply(x16, TWO)\n    x18 = equality(x17, TWO)\n    x19 = lbind(greater, x17)\n    x20 = compose(x19, numcolors)\n    x21 = apply(x20, x13)\n    x22 = branch(x18, vmirror, hmirror)\n    x23 = x22(x21)\n    x24 = replace(I, x17, ZERO)\n    O = branch(x18, NEG_ONE, positives)\n    return O"], [1.0, "def solve_b0b1a11a(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = ofcolor(x3, x4)\n    x6 = combine(x2, x5)\n    x7 = fill(x3, x4, x6)\n    x8 = ofcolor(x3, x4)\n    x9 = portrait(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x1)\n    x12 = maximum(x5)\n    x13 = lbind(ofcolor, x11)\n    x14 = colorfilter(x1, x4)\n    x15 = rbind(vmatching, x11)\n    x16 = rbind(hmatching, x11)\n    x17 = fork(either, x15, x16)\n    x18 = compose(x17, x15)\n    x19 = sfilter(x14, x18)\n    x20 = difference(x1, x19)\n    O = fill(x7, x4, x20)\n    return O"], [1.0, "def solve_762f444d(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(bordering, inbox)\n    x4 = mfilter(x2, x3)\n    x5 = mostcolor(I)\n    x6 = fill(I, x5, x4)\n    O = replace(x6, EIGHT, ONE)\n    return O"], [1.0, "def solve_83f2c009(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = combine(x23, x24)\n    x26 = move(I, x25, x20)\n    O = x18(x26)\n    return O"], [1.0, "def solve_0adfbe6a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_40b44547(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_68568157(I):\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = fork(difference, toindices, box)\n    x4 = mapply(x3, x2)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x5, x4)\n    return O"], [1.0, "def solve_4948d199(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(matcher, NEG_ONE)\n    x7 = rbind(sfilter, x6)\n    x8 = chain(180, x7, dneighbors)\n    x9 = x8(x4)\n    x10 = fork(sfilter, identity, x9)\n    x11 = chain(center, x9, x10)\n    x12 = lbind(apply, last)\n    x13 = chain(first, x12, x11)\n    x14 = compose(x2, x13)\n    x15 = fork(intersection, x11, x14)\n    x16 = compose(size, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = lbind(apply, x14)\n    x19 = chain(size, x18, x17)\n    x20 = matcher(x19, FOUR)\n    x21 = fork(both, x17, x20)\n    x22 = fork(both, x21, x17)\n    x23 = palette(I)\n    x24 = extract(x23, x22)\n    x25 = lbind(colorcount, I)\n    x26 = argmin(x25, x24)\n    x27 = other(x25, x26)\n    x28 = ofcolor(I, x27)\n    x29 = argmin(x28, x24)\n    x30 = ofcolor(I, x27)\n    x31 = rightmost(x30)\n    x32 = rbind(order, leftmost)\n    x33 = apply(x32, x30)\n    x34 = mapply(x27, x33)\n    x35 = cover(I, x54)\n    O = fill(x35, x27, x34)\n    return O"], [1.0, "def solve_06e10edc(I):\n    x1 = width(I)\n    x2 = vupscale(I, x1)\n    x3 = toivec(SIX)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [1.0, "def solve_ca82545b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_a568dca0(I):\n    x1 = objects(I, T, F, T)\n    x2 = hconcat(I, I)\n    x3 = vconcat(x2, x2)\n    x4 = asindices(x3)\n    x5 = rbind(toobject, x4)\n    x6 = chain(numcolors, x5, delta)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x1, x7)\n    x9 = chain(size, dedupe, first)\n    x10 = argmax(x8, x9)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, ulcorner)\n    x13 = sfilter(x14, x12)\n    x14 = lbind(colorfilter, x10)\n    x15 = chain(first, x14, color)\n    x16 = fork(gravitate, identity, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x13)\n    x19 = merge(x1)\n    x20 = cover(x3, x19)\n    O = paint(x20, x18)\n    return O"], [1.0, "def solve_3512e322(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, ONE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = compose(color, merge)\n    x9 = pair(x7, x8)\n    x10 = leastcolor(I)\n    x11 = matcher(first, x10)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x7, x12)\n    x14 = mostcolor(I)\n    x15 = merge(x13)\n    x16 = fill(I, x14, x15)\n    x17 = shape(x13)\n    x18 = multiply(x17, x17)\n    x19 = canvas(x18, x18)\n    x20 = ofcolor(x13, x10)\n    x21 = ofcolor(xx, x14)\n    x22 = combine(x20, x21)\n    x23 = intersection(x22, x2)\n    x24 = fill(x19, TWO, x23)\n    O = fill(x24, x10, x2)\n    return O"], [1.0, "def solve_8e1056c8(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_242da837(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x9, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_98d598f1(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = branch(x7, x4, x10)\n    x12 = width(I)\n    x13 = increment(x12)\n    x14 = divide(x13, x9)\n    x15 = divide(xx, x11)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = interval(ZERO, x17, FOUR)\n    x19 = rbind(multiply, x14)\n    x20 = apply(x19, x18)\n    x21 = rbind(multiply, x15)\n    x22 = apply(x21, x18)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, THREE, x24)\n    return O"], [1.0, "def solve_4a02c9bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(sfilter, x1)\n    x5 = lbind(matcher, identity)\n    x6 = chain(x4, x5, color)\n    x7 = compose(x6, totuple)\n    x8 = apply(x7, x3)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = lbind(recolor, x9)\n    x12 = rbind(ofcolor, x9)\n    x13 = chain(x11, x12, backdrop)\n    x14 = fork(paint, identity, x13)\n    x15 = apply(x14, x10)\n    x16 = mfilter(x15, hline)\n    O = underpaint(I, x16)\n    return O"], [1.0, "def solve_2cb4a7f8(I):\n    x1 = objects(I, T, F, T)\n    x2 = Tuple(x1, x1)\n    x3 = ofcolor(I, TWO)\n    x4 = rbind(adjacent, x3)\n    x5 = mfilter(x2, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_438e877a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x2)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = vconcat(x7, x7)\n    O = vconcat(x7, x8)\n    return O"], [1.0, "def solve_d0d9982d(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = x4(I)\n    x7 = x5(I)\n    x8 = uppermost(x7)\n    x9 = branch(x3, ofcolor, x8)\n    x10 = branch(x3, vmirror, hmirror)\n    x11 = x9(x10)\n    x12 = x11(x7)\n    x13 = x11(x8)\n    x14 = greater(x12, x13)\n    x15 = branch(x4, DOWN, RIGHT)\n    x16 = difference(x9, x15)\n    x17 = branch(x4, uppermost, leftmost)\n    x18 = x17(x16)\n    x19 = equality(x18, ZERO)\n    x20 = branch(x14, uppermost, uppermost)\n    x21 = x20(x19)\n    x22 = shift(x1, x21)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_3c0f3eb9(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, I, x2)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, FIVE)\n    x9 = apply(center, x8)\n    x10 = valmin(x9, first)\n    x11 = compose(first, center)\n    x12 = matcher(x11, x10)\n    x13 = compose(flip, x12)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x14)\n    x17 = ulcorner(x15)\n    x18 = subgrid(x14, x6)\n    x19 = subgrid(x15, x6)\n    x20 = hmirror(x18)\n    x21 = hmirror(x19)\n    x22 = ofcolor(x20, FIVE)\n    x23 = recolor(FIVE, x22)\n    x24 = ofcolor(x21, FIVE)\n    x25 = recolor(FIVE, x24)\n    x26 = height(x23)\n    x27 = upscale(x23, x26)\n    x28 = hupscale(x27, x25)\n    x29 = subgrid(x28, x20)\n    x30 = ofcolor(x29, FIVE)\n    x31 = lowermost(x30)\n    x32 = matcher(first, ZERO)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(lowermost, x33, xf)\n    x35 = fork(shift, identity, x34)\n    x36 = mapply(x35, x31)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_2c87ebca(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = center(x13)\n    x16 = ulcorner(x13)\n    x17 = urcorner(x13)\n    x18 = shoot(x15, NEG_UNITY)\n    x19 = shoot(x16, UP_RIGHT)\n    x20 = combine(x18, x19)\n    x21 = underfill(I, x12, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = compose(backdrop, DOWN)\n    x24 = fork(remove, last, identity_23)\n    x25 = compose(x24, palette)\n    x26 = lbind(ofcolor, x13)\n    x27 = fork(subtract, x25, x26)\n    x28 = chain(x17, x22, x27)\n    x29 = lbind(prapply, x14)\n    x30 = compose(x29, x28)\n    x31 = fork( stiply, x30, x28)\n    x32 = mapply(x31, x22)\n    x33 = fill(x21, x12, x32)\n    x34 = intersection(x33, x33)\n    x35 = fill(x73, THREE, x34)\n    O = fill(x35, x12, x36)\n    return O"], [1.0, "def solve_da2f69a5(I):\n    x1 = objects(I, T, F, F)\n    x2 = paint(I, x1)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = sfilter(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = merge(x1)\n    O = fill(x10, SEVEN, x11)\n    return O"], [1.0, "def solve_88e496bf(I):\n    x1 = mostcolor(I)\n    x2 = x1(I)\n    x3 = width(I)\n    x4 = halve(x3)\n    x5 = astuple(x4, x4)\n    x6 = canvas(x1, x5)\n    x7 = rbind(THREE, x2)\n    x8 = dneighbors(ORIGIN)\n    x9 = insert(UNITY, x8)\n    x10 = insert(x7, x9)\n    x11 =Completed(x10)\n    x12 = positive(x11)\n    x13 = branch(x12, lefthalf, tophalf)\n    x14 = branch(x12, righthalf, bottomhalf)\n    x15 = x13(I)\n    x16 = x14(I)\n    x17 = palette(x15)\n    x18 = other(x17, ZERO)\n    x19 = palette(x16)\n    x20 = other(x19, ZERO)\n    x21 = shape(x15)\n    x22 = canvas(x18, x21)\n    x23 = ofcolor(x15, x16)\n    x24 = ofcolor(x16, x17)\n    x25 = combine(x23, x24)\n    O = fill(x22, EIGHT, x25)\n    return O"], [1.0, "def solve_d241e0d4(I):\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = astuple(EGstrom, ONE)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = astuple(9871, x6)\n    x8 = apply(x7, x2)\n    x9 = cdapply(add, x7, x8)\n    x10 = cmirror(x9)\n    x11 = remove(x10, x9)\n    x12 = lbind(shift, x11)\n    x13 = rbind(toobject, I)\n    x14 = lbind(mapply, x13)\n    x15 = compose(x14, x12)\n    x16 = apply(x15, x3)\n    x17 = mostcolor(I)\n    x18 = shape(I)\n    x19 = canvas(x17, x18)\n    x20 =paint(x19, x16)\n    x21 = objects(x20, F, T, T)\n    x22 = argmax(x21, numcolors)\n    x23 = canvas(x17, x22)\n    x24 = normalize(x23)\n    x25 = objects(x24, F, T, T)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    x28 = argmin(x27, NEG_UNITY)\n    x29 = canvas(x17, x28)\n    x30 = paint(x29, x27)\n    x31 = normalize(x30)\n    x32 = lbind(shift, x31)\n    x33 = mapply(x32, x29)\n    x34 = paint(x30, x33)\n    x35 = ofcolor(x34, FIVE)\n    x36 = gravitate(x34, x11)\n    x37 = shift(x35, x36)\n    O = fill(x34, FOUR, x37)\n    return O"], [1.0, "def solve_838b0fbd(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x19(x16, x17)\n    return O"], [1.0, "def solve_1dfc23a0(I):\n    x1 = width(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x2)\n    x6 = other(x5, x4)\n    x7 = ofcolor(I, x6)\n    x8 = normalize(x3)\n    x9 = shape(x8)\n    x10 = halve(x9)\n    x11 = invert(x10)\n    x12 = lbind(shift, x8)\n    x13 = mapply(x12, x11)\n    x14 = shift(x3, x11)\n    x15 = ONE(x14)\n    x16 = cover(I, x15)\n    O = rot180(x16)\n    return O"], [1.0, "def solve_0b54bcb0(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = leastcolor(x2)\n    x4 = portrait(x1)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = cmirror(x7)\n    x10 = width(x7)\n    x11 = hsplit(x9, x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = objects(x13, T, F, T)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = matcher(first, x17)\n    x19 = compose(flip, x18)\n    x20 = rbind(sfilter, x19)\n    x21 = rbind(sfilter, x16)\n    x22 = compose(x20, x21)\n    x23 = fork(combine, x21, x22)\n    x24 = fork(recolor, color, x23)\n    x25 = mapply(x24, x12)\n    O = paint(x2, x25)\n    return O"], [1.0, "def solve_d8555ae3(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = branch(x5, vmirror, hmirror)\n    x8 = ofcolor(I, TWO)\n    x9 = subgrid(x8, I)\n    x10 = trim(x9)\n    x11 = x7(x10)\n    x12 = x6(x11, TWO)\n    x13 = compose(normalize, asobject)\n    x14 = apply(x13, x12)\n    x15 = last(x14)\n    x16 = first(x14)\n    x17 = ulcorner(x8)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = branch(x5, width, height)\n    x22 = branch(x5, tojvec, toivec)\n    x23 = x21(x15)\n    x24 = double(x23)\n    x25 = compose(x22, increment)\n    x26 = x25(x23)\n    x27 = invert(x26)\n    x28 = x25(x24)\n    x29 = shift(x19, x27)\n    x30 = shift(x20, x28)\n    x31 = paint(x9, x29)\n    O = paint(x31, x30)\n    return O"], [1.0, "def solve_b6b37d36(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(d687, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = replace(I, x5, x8)\n    x10 = extract(x1, x9)\n    x11 = outbox(x10)\n    x12 = fill(x9, x5, x11)\n    x13 = mapply(delta, x12)\n    O = fill(x12, ZERO, x13)\n    return O"], [1.0, "def solve_71b526f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(manhattan, x4)\n    x6 = compose(even, x5)\n    x7 = sfilter(x2, x6)\n    x8 = difference(x2, x7)\n    x9 = merge(x8)\n    x10 = cover(I, x9)\n    x11 = merge(x7)\n    x12 = paint(x10, x11)\n    x13 = rbind(toobject, x4)\n    x14 = compose(first, x13)\n    x15 = chain(x10, x14, dneighbors)\n    x16 = matcher(x15, FOUR)\n    x17 = extract(x7, x16)\n    O = x17(x2)\n    return O"], [1.0, "def solve_f57dd3ed(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose( rightmost, x9)\n    x11 = compose(leftmost, x9)\n    x12 = matcher(x10, x11)\n    x13 = mfilter(x8, x12)\n    x14 = underfill(I, ONE, x13)\n    x15 = matcher(x11,88885)\n    x16 = compose(flip, x15)\n    x17 = mfilter(x14, x16)\n    x18 = underfill(x17, EIGHT, x15)\n    x19 = matcher(x7, x18)\n    x20 = sfilter(x1, x19)\n    x21 = initset(x18)\n    x22 = rbind(rapply, x21)\n    x23 = compose(x22, initset)\n    x24 = chain(first, x23, x22)\n    x25 = multiply(TEN, TEN)\n    x26 = add(x25, x25)\n    x27 = width(I)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = lbind(multiply, x28)\n    x30 = apply(x29, x29)\n    x31 = lbind(shift, x13)\n    x32 = mapply(x31, x30)\n    O = shift(x32, x32)\n    return O"], [1.0, "def solve_16a1e078(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x2, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_be41657d(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_2cf1f180(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = matcher(size, FOUR)\n    x4 = fork(both, square, x3)\n    x5 = extract(x1, x4)\n    x6 = color(x5)\n    x7 = merge(x1)\n    x8 = compose(hmirror, vmirror)\n    x9 = initset(x8)\n    x10 = insert(vmirror, x9)\n    x11 = insert(hmirror, x10)\n    x12 = rapply(x11, x6)\n    x13 = ulcorner(x5)\n    x14 = lbind(subtract, x13)\n    x15 = matcher(first, x6)\n    x16 = rbind(sfilter, x15)\n    x17 = chain(x14, ulcorner, x16)\n    x18 = fork(shift, identity, x17)\n    x19 = mapply(x18, x12)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_3a350e34(I):\n    x1 = objects(I, T, T, T)\n    x2 = astuple(TEN, TEN)\n    x3 = invert(x2)\n    x4 = astuple(TWO, x3)\n    x5 = astuple(THREE, x3)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x4, x7)\n    x9 = lbind(contained, TWO)\n    x10 = lbind(contained, THREE)\n    x11 = branch(x11, UNITY, DOWN_LEFT)\n    x12 = branch(x10, RIGHT, x11)\n    x13 = branch(x14, leftmost, x12)\n    x14 = UP(x13)\n    x15 = lowermost(x13)\n    x16 = astuple(x14, x15)\n    x17 = branch(x15, RIGHT, x16)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = x18(x14)\n    x20 = x18(x1)\n    x21 = subtract(x20, x3)\n    x22 = decrement(x21)\n    x23 = color(x19)\n    x24 = color(x20)\n    x25 = merge(x1)\n    x26 = cover(I, x25)\n    x27 = fill(x26, x23, x24)\n    O = fill(x27, x22, x25)\n    return O"], [1.0, "def solve_a2d78bc3(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(neighbors, x2)\n    x4 = lbind(shift, x3)\n    x5 = apply(x4, x1)\n    x6 = mapply(x4, x1)\n    x7 = hmirror(x6)\n    x8 =vert(x3)\n    x9 = lbind(intersection, x8)\n    x10 = cover(I, x9)\n    x11 = mapply(x5, x7)\n    O = fill(x10, TWO, x11)\n    return O"], [1.0, "def solve_9434570a(I):\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_6631813d(I):\n    x1 = objects(I, T, F, T)\n    x2 = product(x1, x1)\n    x3 = fork(connect, first, last)\n    x4 = apply(x3, x2)\n    x5 = fork(either, vline, hline)\n    x6 = mfilter(x4, x5)\n    O = underfill(I, EIGHT, x6)\n    return O"], [1.0, "def solve_2e6ad55b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, T)\n    x3 = sizefilter(x2, ONE)\n    x4 = compose(neighbors, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x3)\n    x7 = paint(I, x6)\n    x8 = add(SIX, SIX)\n    x9 = astuple(EIGHT, x8)\n    x10 = connect(ORIGIN, x9)\n    x11 = Sfilter(x10, vline)\n    x12 = difference(x10, x11)\n    x13 = merge(x12)\n    x14 = identity(line)\n    x15 =connect(x13, x14)\n    x16 = fork(either, vline, hline)\n    x17 = sfilter(x11, x16)\n    x18 = difference(x11, x17)\n    O = fill(x7, ONE, x18)\n    return O"], [1.0, "def solve_95746403(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = fill(I, TWO, x8)\n    x10 = color(x5)\n    x11 = color(x10)\n    x12 = ofcolor(x10, x11)\n    x13 = mapply(neighbors, x12)\n    x14 = difference(x1, x13)\n    x15 = toobject(x14, x10)\n    x16 = leastcolor(x15)\n    x17 = color(x5)\n    x18 = gravitate(x16, x17)\n    x19 = shift(x0, x18)\n    O = fill(x9, x31, x19)\n    return O"], [1.0, "def solve_9f63ccfc(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose( rbind, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ZERO, SIX)\n    x8 = replace(x7, ONE, SEVEN)\n    x9 = replace(x8, EIGHT, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [1.0, "def solve_cefcee63(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = fork(shift, identity, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_027de42c(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, TWO)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_df0d76e4(I):\n    x1 = width(I)\n    x2 = palette(I)\n    x3 = halve(x1)\n    x4 = vupscale(I, x3)\n    x5 = rbind(shoot, UNITY)\n    x6 = other(x2, ZERO)\n    x7 = ofcolor(x4, x6)\n    x8 = mapply(x5, x7)\n    O = fill(x4, x6, x8)\n    return O"], [1.0, "def solve_99ba257f(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = inbox(x3)\n    x6 = backdrop(x5)\n    x7 = fill(I, x4, x6)\n    x8 = normalize(x3)\n    x9 = lbind(colorfilter, x1)\n    x10 = compose(first, x9)\n    x11 = compose(last, x9)\n    x12 = fork(ofcolor, x10, x11)\n    x13 = mapply(x12, x8)\n    O = fill(x7, x4, x13)\n    return O"], [1.0, "def solve_a449ddd8(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = leastcolor(I)\n    x5 = rbind(decrement, THREE)\n    x6 = rbind(multiply, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = mfilter(x3, x8)\n    x10 = ofcolor(I, x4)\n    x11 = difference(x10, x9)\n    x12 = fill(I, THREE, x11)\n    x13 = merge(x1)\n    x14 = paint(x12, x13)\n    O = fill(x14, EIGHT, x9)\n    return O"], [1.0, "def solve_9cbb7de5(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = color(x3)\n    x7 = uppermost(x5)\n    x8 = lowermost(x5)\n    x9 = uppermost(x3)\n    x10 = leftmost(x3)\n    x11 = leftmost(x2)\n    x12 = greater(x8, x9)\n    x13 = branch(x12, x3, x8)\n    x14 = branch(x12, x4, x9)\n    x15 = branch(x12, x5, x14)\n    x16 = branch(x12, RIGHT, DOWN)\n    x17 = branch(x12, LEFT, x16)\n    x18 = astuple(x14, x15)\n    x19 = astuple(x17, x18)\n    x20 = x19(x14)\n    x21 = subtract(x20, x13)\n    x22 = crop(I, x3, x21)\n    x23 = merge(x22)\n    x24 = crop(I, x4, x23)\n    x25 = hmirror(x24)\n    x26 = replace(x25, x6, x1)\n    x27 = branch(x25, RIGHT, DOWN)\n    x28 = x27(x26)\n    x29 = upscale(x28, x29)\n    x30 = branch(x28, x3, x8)\n    x31 = branch(x28, x4, x9)\n    x32 = multiply(x31, x31)\n    x33 = add(x32, x3)\n    x34 = x33(x30)\n    x35 = shift(x29, x34)\n    x36 = paint(I, x35)\n    x37 = shift(x31, x33)\n    x38 = paint(x36, x37)\n    O = paint(x38, x35)\n    return O"], [1.0, "def solve_2a7392cd(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = leastcolor(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x7, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(shoot, UNITY)\n    x14 = mapply(x13, x12)\n    x15 = argmax(x14, width)\n    x16 = remove(x15, x14)\n    x17 = chain(x66, first, last)\n    x18 = lbind(occurrences, x16)\n    x19 = compose(x18, height)\n    x20 = fork(recolor, x17, x19)\n    x21 = mapply(x20, x16)\n    x22 = paint(x6, x21)\n    O = x5(x22)\n    return O"], [1.0, "def solve_b1c6e37a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rot90(I)\n    x4 = power(most, TWO)\n    x5 = rbind(greater, ONE)\n    x6 = chain(x5, minimum, shape)\n    x7 = compose(x4, x6)\n    x8 = fork(equality, x7, identity)\n    x9 = sfilter(x1, x8)\n    x10 = increment(x4)\n    x11 = increment(x10)\n    x12 = divide(x11, x5)\n    x13 = add(x12, UNITY)\n    x14 = invert(x13)\n    x15 = shift(x9, x14)\n    x16 = compose(x11, x5)\n    x17 = apply(x16, x15)\n    x18 = fork(connect, first, last)\n    x19 = apply(x18, x17)\n    x20 = vmirror(x19)\n    x21 = papply(equality, x19, x20)\n    x22 = mfilter(x21, x28)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_0476515b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divine, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_fe36849c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, FOUR)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34"], [1.1, "def solve_92c38f00(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = replace(I, x1, x2)\n    x4 = argmin(x2, lrcorner)\n    x5 = argmax(x2, llcorner)\n    x6 = urcorner(x5)\n    x7 = llcorner(x5)\n    x8 = uppermost(x7)\n    x9 = urcorner(x7)\n    x10 = leftmost(x7)\n    x11 = leftmost(x7)\n    x12 = urcorner(x7)\n    x13 = ulcorner(x7)\n    x14 = shoot(x11, x12)\n    x15 = shoot(x11, x13)\n    x16 = shoot(x10, x14)\n    x17 = shoot(x11, x15)\n    x18 = combine(x15, x16)\n    x19 = combine(x14, x17)\n    x20 = combine(x18, x19)\n    x21 = underfill(x3, x1, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, x1)\n    x24 = rbind(contained, x23)\n    x25 = compose(x24, frontiers)\n    x26 = sfilter(x23, x25)\n    x27 = size(x26)\n    x28 = positive(x27)\n    x29 = branch(x28, x25, x27)\n    x30 = canvas(x1, THREE_BY_THREE)\n    x31 = asindices(x30)\n    x32 = toobject(x31, I)\n    x33 = mostcolor(x32)\n    x34 = ofcolor(x32, x33)\n    x35 = x33(x34)\n    x36 = fill(x30, x13, x35)\n    x37 = x10(x34)\n    x38 = x12(x37)\n    x39 = x19(x38)\n    x40 = fill(x36"], [1.1, "def solve_343e83c3(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, ONE, x5)\n    x7 = lrcorner(x2)\n    x8 = rbind(subtract, x7)\n    x9 = chain(even, x8, initset)\n    x10 = sfilter(x7, x9)\n    x11 = difference(x7, x10)\n    x12 =118(x11, races)\n    x13 = first(x12)\n    x14 = interval(ZERO, NINE, ONE)\n    x15 = fork(multiply, first, last)\n    x16 = apply(x15, x14)\n    x17 = product(x16, x16)\n    x18 = fork(add, first, last)\n    x19 = apply(x18, x17)\n    x20 = lbind(chain, first)\n    x21 = lbind(x20, last)\n    x22 = rbind(rapply, x2)\n    x23 = compose(initset, x21)\n    x24 = chain(first, x22, x23)\n    x25 = compose(x14, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x25, x27)\n    x29 = fork(colorcount, x28, x25)\n    x30 = lbind(recolor, NEG_ONE)\n    x31 = compose(x30, x29)\n    x32 = fork(paint, x28, x31)\n    x33 = compose(initset, x29)\n    x34 = fork(rapply, x33, x28)\n    x35 = compose(first, x34)\n    x36 = compose(x20, x35)\n    x37 = sfilter(x19, x36)\n    x38 = paint(x"], [1.1, "def solve_c6cbd8b9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = ulcorner(x3)\n    x5 = index(I, x4)\n    x6 = equality(x5, NEG_UNITY)\n    x7 = lrcorner(x3)\n    x8 = index(I, x7)\n    x9 = equality(x8, TEN_UNITY)\n    x10 = urcorner(x3)\n    x11 = index(I, x10)\n    x12 = equality(x11, NEG_UNITY)\n    x13 = llcorner(x3)\n    x14 = index(I, x13)\n    x15 = equality(x14, TWO_BY_TWO)\n    x16 = urcorner(x3)\n    x17 = index(I, x16)\n    x18 = equality(x17, TWO)\n    x19 =2142222(x13, x18)\n    x20 = astuple(x19, x17)\n    x21 = initset(x20)\n    x22 = fill(I, x1, x21)\n    x23 = lrcorner(x3)\n    x24 = index(I, x23)\n    x25 = equality(x24, TWO)\n    x26 = urcorner(x3)\n    x27 = index(I, x26)\n    x28 = equality(x27, TWO)\n    x29 = llcorner(x3)\n    x30 = index(I, x29)\n    x31 = equality(x30, TWO)\n    x32 = urcorner(x3)\n    x33 = index(I, x32)\n    x34 = equality(x33, TWO)\n    x35 = both(x26, x28)\n    x36 = branch(x35, x31, x32)\n    x37 = branch(x35, x20, x28)\n    x38 = branch(x35, x30, x34)\n    x39 = astuple(x37, x35)\n    x40 = inits"], [1.1, "def solve_8a154560(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax30(x3)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42 ="], [1.1, "def solve_9aac864e(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = valmax(x1, size)\n    x4 = sizefilter(x2, x3)\n    x5 = mostcolor(I)\n    x6 = recolor(x5, x4)\n    x7 = merge(x4)\n    x8 = remove(x7, x4)\n    x9 =833uple(x7, x8)\n    x10 = uppermost(x7)\n    x11 = leftmost(x7)\n    x12 = astuple(x10, x11)\n    x13 = add(x12, DOWN)\n    x14 = add(x13, LEFT)\n    x15 = add(x13, RIGHT)\n    x16 = initset(x15)\n    x17 = insert(x13, x16)\n    x18 = insert(x13, x4)\n    x19 = insert(x14, x18)\n    x20 = insert(x17, x19)\n    x21 = merge(x20)\n    x22 = lbind(chain, uppermost)\n    x23 = lbind(x22, x27)\n    x24 = lbind(rbind, subtract)\n    x25 = compose(x23, x24)\n    x26 = lbind(remove, x27)\n    x27 = chain(xin, x26, x25)\n    x28 = fork(apply, x27, x23)\n    x29 = fork(mapply, x27, x23)\n    x30 = fork(vfrontier, x29, x28)\n    x31 = fork(interval, x27, ONE)\n    x32 = lbind(toobject, x25)\n    x33 = compose(x31, x32)\n    x34 = fork(mapply, x33, x29)\n    x35 = fork(paint, identity, x34)\n    x36 = compose(rot90, x35)\n    x37 = power(x36, FOUR)\n    x38 = x37(x110)\n    x39 = rot270"], [1.1, "def solve_0ebfb7f2(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_742f5a67(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = color(x3)\n    x5 = compose(decrement, double)\n    x6 = lbind(toobject, x5)\n    x7 = compose(x5, x6)\n    x8 = chain(xmin, x5, x7)\n    x9 = lbind(contained, x4)\n    x10 = compose(x9, last)\n    x11 = sfilter(x1, x10)\n    x12 = chain(flip, positive, x8)\n    x13 = sfilter(x4, x12)\n    x14 = fork(equality, x7, x13)\n    x15 = sfilter(x1, x14)\n    x16 = objects(I, T, F, T)\n    x17 = merge(x16)\n    x18 = portrait(x17)\n    x19 = branch(x18, identity, dmirror)\n    x20 = x19(I)\n    x21 = objects(x20, T, F, T)\n    x22 = apply(center, x21)\n    x23 = order(x22, uppermost)\n    x24 = x23(x20)\n    x25 = remove(x24, x23)\n    x26 = lbind(manhattan, x24)\n    x27 = lbind(subtract, x24)\n    x28 = chain(x26, x27, last)\n    x29 = fork(shift, identity, x28)\n    x30 = fork(connect, x29, ulcorner)\n    x31 = mapply(x30, x25)\n    x32 = fill(x20, x4, x31)\n    x33 = lbind(10, DOWN)\n    x34 = apply(x33, x31)\n    x35 = shift(x34, x20)\n    x36 = paint(x32, x35)\n    x37 = apply(x24, x41)\n    x38 = merge(x37)\n    x39 = cover("], [1.1, "def solve_362e15b1(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_e4da94df(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_3baec435(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, LEFT)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_bf30eff3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, EIGHT)\n    x10 = uppermost(x9)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, EIGHT)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(decrement, width, last)\n    x36 = fork(astuple, x34, x35)\n    x37 = lbind(fork, connect)\n    x38 = lbind(x37, outbox)\n    x39 = apply(x38, x29)\n    x40 = initset("], [1.1, "def solve_3116ed9c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(apply, x13)\n    x37 = lbind(rbind, greater)\n    x38 = lbind( chain, greater)\n    x39 = lbind(x34, x13)\n    x40 = rbind(sfilter, x33)\n"], [1.1, "def solve_c7b47b45(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_a905b9ee(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(matcher, frontiers)\n    x5 = chain(x3, x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, greater)\n    x9 = chain(x8, size, x7)\n    x10 = matcher(x9, ZERO)\n    x11 = sfilter(x2, x10)\n    x12 = difference(x2, x11)\n    x13 = fork(colorcount, x7, box)\n    x14 = matcher(x13, ZERO)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind(matcher, x4)\n    x17 = chain(x16, x15, x12)\n    x18 = lbind(greater, x11)\n    x19 = compose(x18, x17)\n    x20 = rbind(sfilter, x19)\n    x21 = lbind(compose, x12)\n    x22 = chain(x20, x21, x17)\n    x23 = lbind(lbind, greater)\n    x24 = chain(x17, x22, x23)\n    x25 = rbind(compose, x10)\n    x26 = lbind(lbind, greater)\n    x27 = chain(x25, x26, x14)\n    x28 = rbind(compose, x10)\n    x29 = lbind(lbind, greater)\n    x30 = chain(x28, x29, x17)\n    x31 = lbind(lbind, greater)\n    x32 = chain(x31, x30, x7)\n    x33 = lbind(lbind, greater)\n    x34 = chain(x33, x31, x7)\n    x35 = lbind(lbind, greater)\n    x36 = chain(x35, x34, x30)\n"], [1.1, "def solve_0e03ffe6(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = matcher(size, THREE)\n    x3 = sfilter(x1, x2)\n    x4 = matcher(size, FOUR)\n    x5 = sfilter(x3, x4)\n    x6 = matcher(size, THREE)\n    x7 = sfilter(x5, x6)\n    x8 = matcher(size, FOUR)\n    x9 = sfilter(x7, x8)\n    x10 = matcher(size, THREE)\n    x11 = sfilter(x9, x10)\n    x12 = matcher(size, FOUR)\n    x13 = sfilter(x11, x12)\n    x14 = matcher(size, THREE)\n    x15 = sfilter(x13, x14)\n    x16 = matcher(size, FOUR)\n    x17 = sfilter(x15, x16)\n    x18 = lbind(fork, connect)\n    x19 = lbind(lbind, manhattan)\n    x20 = compose(x19, initset)\n    x21 = lbind(remove, DOWN)\n    x22 = compose(x21, x18)\n    x23 = fork(x22, FOUR, input:\n    x24 = argmax(x5, x23)\n    x25 = subgrid(x24, I)\n    x26 = matcher(first, ZERO)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = normalize(x28)\n    x30 = matcher(first, ZERO)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x29, x31)\n    x33 = normalize(x32)\n    x34 = width(x22)\n    x35 = divide(x34, x31)\n    x36 = increment(x35)\n    x37 = sfilter(x33, x36)\n    x38 = compose(normalize, toindices)\n    x39 = lbind(upscale, x22)\n    x"], [1.1, "def solve_6256f7f4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_d4f0a838(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, TEN, x2)\n    x4 = colorfilter(x1, TWO)\n    x5 = argmin(x4, size)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = argmin(x4, x8)\n    x10 = normalize(x9)\n    x11 = lbind(shift, x10)\n    x12 = rapply(x11, x2)\n    x13 = combine(x6, x12)\n    x14 = paint(x3, x13)\n    x15 = height(x9)\n    x16 = width(x9)\n    x17 = interval(ZERO, x16, x17)\n    x18 = height(x4)\n    x19 = interval(ONE, x18, x17)\n    x20 = rbind(multiply, x15)\n    x21 = rbind(divide, x15)\n    x22 = compose(x20, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = rbind(multiply, x14)\n    x25 = rbind(divide, x14)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = lbind(apply, last)\n    x29 = compose(x23, first)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(pair, x17)\n    x32 = chain(x28, x30, x31)\n    x33 = compose(x32, last)\n    x34 = pair(x19, x8)\n    x35 = compose(x27, first)\n    x36 = sfilter(x34, x35)\n    x37 = apply(x33, x36)\n    x38 = mapply(x37, x31)\n    O = paint(x14, x38)\n    "], [1.1, "def solve_cc2b7355(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x4)\n    x25 = rbind(hmatching, x4)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_bb7e9973(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_a0c6d78a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = branch(x12, x27, x29)\n    x31 = branch(x25, x26, x30)\n    x32 =235(x31)\n    x33 = cover(I, x8)\n    x34 = solve(I, x33)\n    x35 = ofcolor(x34, x4)\n    x36 = argmin(x35, x24)\n    x37 = ofcolor(x34, x4)\n    x38 = x24(x37)\n    x39 = shoot(x38, UNITY)\n    x40 = shoot(x39, NEG_UNITY)\n    x41 = combine(x39, x40"], [1.1, "def solve_ea615e4e(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = rbind(subgrid, I)\n    x6 = chain(x5, initset, first)\n    x7 = compose(first, x6)\n    x8 = fork(subtract, x7, identity)\n    x9 = lbind(apply, x8)\n    x10 = lbind(ofcolor, x4)\n    x11 = chain(x10, x9, x6)\n    x12 = fork( subtract, height, width)\n    x13 = chain(x12, decrement, x11)\n    x14 = lbind(greater, ONE)\n    x15 = chain(x14, x13, x6)\n    x16 = compose(x15, x6)\n    x17 = fork(both, x17, x15)\n    x18 = fork(both, x16, x15)\n    x19 = fork(both, x18, x15)\n    x20 = astuple(x11, x12)\n    x21 = astuple(x13, x16)\n    x22 = combine(x20, x21)\n    x23 = valmax(x22, numcolors)\n    x24 = apply(x19, x22)\n    x25 = normalize(x24)\n    x26 = matcher(first, x23)\n    x27 = sfilter(x25, x26)\n    x28 = difference(x25, x27)\n    x29 = toindices(x28)\n    x30 = rbind(contained, x29)\n    x31 = lbind(rbind, lbind)\n    x32 = compose(x30, x31)\n    x33 = fork(sfilter, identity, x32)\n    x34 = lbind(shift, x29)\n    x35 = mapply(x34, x27)\n    x36 = paint(I, x35)\n    x37 = apply(x33, x1)\n    O = paint(x36"], [1.1, "def solve_142c402a(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x536)\n    x36 = ofcolor(I, x206)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_15a4634c(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = valmax(x1, x2)\n    x4 = matcher(x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, size)\n    x7 = color(x6)\n    x8 = remove(x6, x1)\n    x9 = objects(I, T, F, F)\n    x10 = lbind(colorfilter, x9)\n    x11 = chain(size, x10, color)\n    x12 = argmin(x8, x11)\n    x13 = other(x8, x12)\n    x14 = color(x13)\n    x15 = colorfilter(x9, x14)\n    x16 = apply(leftmost, x15)\n    x17 = size(x16)\n    x18 = equality(ONE, x17)\n    x19 = apply(uppermost, x15)\n    x20 = size(x19)\n    x21 = equality(ONE, x20)\n    x22 = fork(add, first, last)\n    x23 = compose(x22, ulcorner)\n    x24 = argmin(x15, x23)\n    x25 = remove(x24, x15)\n    x26 = lbind(manhattan, x24)\n    x27 = argmin(x25, x26)\n    x28 = lowermost(x27)\n    x29 = lowermost(x24)\n    x30 = subtract(x28, x29)\n    x31 = uppermost(x27)\n    x32 = uppermost(x24)\n    x33 = subtract(x31, x32)\n    x34 = astuple(x30, x33)\n    x35 = maximum(x34)\n    x36 = branch(x21, ZERO, x35)\n    x37 = rightmost(x27)\n    x38 = rightmost(x24)\n    x39 = subtract(x37, x38)\n    x40 = leftmost(x27)\n    x41"], [1.1, "def solve_3a599228(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_e4c2e497(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = manhattan(x2, x6)\n    x11 =address(x10, x6)\n    x12 = dedupe(x11)\n    x13 = size(x12)\n    x14 = equality(x13, ONE)\n    x15 = branch(x14, x7, x6)\n    x16 = branch(x14, x8, x5)\n    x17 = branch(x14, x16, x5)\n    x18 = corners(x15)\n    x19 = combine(x18, x18)\n    x20 = mostcolor(I)\n    x21 = backdrop(x19)\n    x22 = objects(I, T, F, T)\n    x23 = colorfilter(x22, x20)\n    x24 = argmax(x23, size)\n    x25 = matcher(first, x20)\n    x26 = compose(flip, x25)\n    x27 = sfilter(x23, x26)\n    x28 = mapply(dneighbors, x27)\n    x29 = Load(x27, x14)\n    x30 = cover(I, x29)\n    x31 = mapply(dneighbors, x27)\n    x32 = equality(x15, x20)\n    x33 = product(x31, x32)\n    x34 = sfilter(x33, first)\n    x35 = flip(x34)\n    x36 = asobject(x35)\n    x37 = matcher(first, x20)\n    x38 = compose(flip, x37)\n    x39 = sfilter(x36, x38)\n    x40 = sfilter(x39, x33)\n    x41 = merge("], [1.1, "def solve_b31f62b2(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, T)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_15944dce(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =elta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = delta(x2)\n    x6 = box(x2)\n    x7 = intersection(x5, x6)\n    x8 = fork(multiply, height, width)\n    x9 = compose(equality, x8)\n    x10 = lbind(intersection, x7)\n    x11 = chain(positive, size, x10)\n    x12 = compose(x11, d0)\n    x13 = rbind(greater, ONE)\n    x14 = compose(x13, x12)\n    x15 = sfilter(x7, x14)\n    x16 = fork(vmatching, first, last)\n    x17 = sfilter(x7, x16)\n    x18 = fork(hmatching, first, last)\n    x19 = sfilter(x7, x18)\n    x20 = compose(size, first)\n    x21 = argmax(x15, x20)\n    x22 = subgrid(x21, x4)\n    x23 = height(x22)\n    x24 = divide(x23, x24)\n    x25 = width(x22)\n    x26 = divide(x25, x24)\n    x27 = astuple(x26, x26)\n    x28 = maximum(x27)\n    x29 = invert(x28)\n    x30 = tojvec(x29)\n    x31 = invert(x25)\n    x32 = shift(x30, x31)\n    x33 = maximum(x28)\n    x34 = interval(x33, x29, ONE)\n    x35 = astuple(x31, x34)\n    x36 = shift(x32, x35)\n    x37 = combine(x32, x36)\n    x38 = astuple(x23, x2005)\n    x39 = canvas(x18, x38)\n    x40 = lbind(compose, flip)\n    x41 = compose(x"], [1.1, "def solve_80d29d9e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_e63e222d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = totuple(x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x10 = color(x8)\n    x11 = equality(x9, x10)\n    x12 = leftmost(x4)\n    x13 = leftmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = increment(x14)\n    x16 = multiply(x15, intersection)\n    x17 = rightmost(x4)\n    x18 = rightmost(x8)\n    x19 = subtract(x17, x18)\n    x20 = increment(x19)\n    x21 = multiply(x20, TWO)\n    x22 = lbind(greater, x17)\n    x23 = compose(x22, first)\n    x24 = rbind(greater, x24)\n    x25 = compose(x24, first)\n    x26 = matcher(x23, x21)\n    x27 = fork(both, x26, x25)\n    x28 = interval(ZERO, x18, ONE)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = pair(x29, x30)\n    x31 = product(x15, x30)\n    x32 = prapply(connect, x17, x31)\n    x33 = mapply(x32, x31)\n    x34 = equality(x13, x20)\n    x35 = branch(x34, x33, x43)\n    x36 = apply(initset, x31)\n    x37 = order(x36, identity)\n    x38 = size(x37)\n    x39 = interval(ZERO, x38, ONE)\n    x40 = apply(intersection, x39)\n    x41 = pair(x40, x"], [1.1, "def solve_0bd0381c(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(decrement, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34"], [1.1, "def solve_ae02ed22(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, mostcolor)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(matcher, first)\n    x9 = compose(x8, leastcolor)\n    x10 = fork(sfilter, identity, x9)\n    x11 = pair(x7, x10)\n    x12 = sfilter(x4, x6)\n    x13 = apply(first, x12)\n    x14 = valmax(x13, x6)\n    x15 = rbind(astuple, x14)\n    x16 = lbind(subtract, x14)\n    x17 = compose(x1600, x16)\n    x18 = fork(insert, x17, x15)\n    x19 = compose(initset, x18)\n    x20 = fork(insert, x17, x19)\n    x21 = fork(insert, x20, x18)\n    x22 = fork(insert, x21, xto)\n    x23 = fork(insert, x22, x20)\n    x24 = fork(insert, x23, x20)\n    x25 = fork(insert, x24, x20)\n    x26 = fork(insert, x25, x20)\n    x27 = fork(insert, dmirror, x21)\n    x28 = fork(insert, cmirror, x22)\n    x29 = fork(insert, hmirror, x28)\n    x30 = fork(insert, vmirror, x29)\n    x31 = fork(insert, ulcorner, x29)\n    x32 = fork(insert, shoot, x29)\n    x33 = fork(insert,lrcorner, x30)\n    x34 = fork(insert, subgrid, x33)\n    x35 = x34(x)\n    x36 = lbind(equality, x1"], [1.1, "def solve_3ce5a34c(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x15)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_6a112c32(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = interval(ZERO, NINE, ONE)\n    x5 = rbind(multiply, THREE)\n    x6 = apply(x5, x4)\n    x7 = rbind(shift, EIGHT)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = paint(I, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(even, initset)\n    x13 = rbind(argmin, x12)\n    x14 = chain(x11, x13, box)\n    x15 = fill(x10, FOUR, x9)\n    x16 = fill(x15, FOUR, x10)\n    x17 = fork(add, first, last)\n    x18 = product(x16, x17)\n    x19 = compose(x14, first)\n    x20 = apply(x19, x18)\n    x21 = fork(insert, x7, x14)\n    x22 = fork(position, x21, uppermost)\n    x23 = compose(toivec, x22)\n    x24 = order(x20, x23)\n    x25 =2450(x24)\n    x26 = size(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = fork(equality, identity, hmirror)\n    x29 = fork(equality, identity, vmirror)\n    x30 = sfilter(x27, x28)\n    x31 =(760, x30)\n    x32 = argmin(x31, x29)\n    x33 = other(x3, x32)\n    x34 = ofcolor(x33, FOUR)\n    x35 = toindices(x34)\n    x36 = subgrid(x35, x33)\n    x37 = lbind(manhattan, x33)\n    x38 = lbind(multiply, x37"], [1.1, "def solve_c887e339(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = fill(I, FIVE, x2)\n    x4 = square(x2, DOWN)\n    x5 = argmin(x4, uppermost)\n    x6 = rightmost(x5)\n    x7 = fill(x3, TWO, x6)\n    x8 = uppermost(x5)\n    x9 = width(I)\n    x10 = both(x8, x9)\n    x11 = uppermost(x5)\n    x12 = fill(x7, ZERO, x11)\n    x13 = rightmost(x5)\n    x14 = leftmost(x5)\n    x15 = subtract(x13, x14)\n    x16 = leftmost(x5)\n    x17 = subtract(x16, x15)\n    x18 = both(x10, ZERO)\n    x19 = branch(x18, x13, x17)\n    x20 = branch(x18, x14, x19)\n    x21 = multiply(x15, x17)\n    x22 = double(x21)\n    x23 = multiply(x14, x12)\n    x24 = subtract(x22, x23)\n    x25 = rightmost(x5)\n    x26 = rightmost(x5)\n    x27 = subtract(x25, x26)\n    x28 = LEFT(x27)\n    x29 = recolor(ZERO, x1)\n    x30 = lbind(compose, flip)\n    x31 = lbind(matcher, first)\n    x32 = compose(x20, x31)\n    x33 = lbind(lbind, sfilter)\n    x34 = rbind(compose, x33)\n    x35 = lbind(rbind, difference)\n    x36 = lbind(lbind, shift)\n    x37 = chain(x34, x35, x36)\n    x38 = fork(compose, x374, x37)\n    x39 = lbind(compose, x10)\n    x40 = compose(x39,"], [1.1, "def solve_2ec71771(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_8d1da7f3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_73a24596(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_3d5103c7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, identity, height)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x10)\n    x25 = repeat(x23, x22)\n    x26 = subtract(x28, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_aad80e66(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = uppermost(x2)\n    x5 = leftmost(x2)\n    x6 = height(x2)\n    x7 = width(x2)\n    x8 = interval(SEVEN, NEG_ONE, NEG_ONE)\n    x9 = add(x4, x6)\n    x10 = increment(x9)\n    x11 = lbind(subtract, x10)\n    x12 = add(x5, x7)\n    x13 = increment(x12)\n    x14 = lbind(subtract, x13)\n    x15 = lbind(interval, x4)\n    x16 = rbind(x15, ONE)\n    x17 = compose(x16, x11)\n    x18 = lbind(interval, x5)\n    x19 = rbind(x18, ONE)\n    x20 = compose(x19, x14)\n    x21 = fork(product, x17, x20)\n    x22 = fork(equality, identity, rot90)\n    x23 = fork(equality, identity, rot180)\n    x24 = fork(equality, identity, rot270)\n    x25 = fork(both, x23, x24)\n    x26 = fork(both, x22, x25)\n    x27 = fork(astuple, identity, identity)\n    x28 = fork(multiply, identity, identity)\n    x29 = compose(decrement, x28)\n    x30 = initset(ORIGIN)\n    x31 = difference(x30, x30)\n    x32 = rbind(branch, x31)\n    x33 = rbind(colorcount, x3)\n    x34 = rbind(subgrid, I)\n    x35 = lbind(compose, backdrop)\n    x36 = lbind(fork, insert)\n    x37 = lbind(x36, identity)\n    x38 = lbind(compose, initset)\n    x39 = chain(x35, x37, x"], [1.1, "def solve_858f567d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = subgrid(x7, I)\n    x9 = lesser(x8)\n    x10 = branch(x9, height, width)\n    x11 = x10(I)\n    x12 =792(x4, x11)\n    x13 = x10(x12)\n    x14 = color(x4)\n    x15 = color(x13)\n    x16 = intersection(x14, x15)\n    x17 = fill(x8, x13, x16)\n    x18 = frontiers(x17)\n    x19 = sfilter(x18, vline)\n    x20 = difference(x18, x19)\n    x21 = astuple(x20, x22)\n    x22 = apply(size, x21)\n    x23 = increment(x22)\n    x24 = canvas(x15, x23)\n    x25 = lrcorner(x4)\n    x26 = toindices(x25)\n    x27 = increment(x25)\n    x28 = tojvec(x27)\n    x29 = shift(x26, x28)\n    x30 = to3(x27)\n    x31 = palette(x20)\n    x32 = remove(x30, x31)\n    x33 = lbind(colorcount, x20)\n    x34 = argmax(x32, x33)\n    x35 = shift(x29, x34)\n    x36 = paint(x24, x35)\n    x37 = objects(x36, T, F, T)\n    x38 = rbind(colorcount, x34)\n    x39 = valmax(x37, x38)\n    x40 = rbind(colorcount, x34)\n    x41 = matcher(x40, x39)\n    x42"], [1.1, "def solve_0e2f8d65(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = remove(ZERO, x1)\n    x4 = lbind(colorcount, I)\n    x5 = argmin(x3, x4)\n    x6 = ofcolor(I, x5)\n    x7 = outbox(x6)\n    x8 = remove(x7, x6)\n    x9 = lbind(toobject, I)\n    x10 = uppermost(x7)\n    x11 = leftmost(x7)\n    x12 = ofcolor(I, x5)\n    x13 = leftmost(x12)\n    x14 = subtract(x10, x13)\n    x15 = astuple(x14, x14)\n    x16 = ulcorner(x7)\n    x17 = crop(I, x16, x15)\n    x18 = repeat(x17, ONE)\n    x19 = merge(x18)\n    x20 = double(x4)\n    x21 = multiply(x20, x15)\n    x22 = astuple(x24, x21)\n    x23 = repeat(x22, ONE)\n    x24 = merge(x23)\n    x25 = toindices(x24)\n    x26 = astuple(x5, x25)\n    x27 = subgrid(x25, x26)\n    x28 = asindices(x27)\n    x29 = astuple(x24, x18)\n    x30 = astuple(x27, x30)\n    x31 = initset(x30)\n    x32 = insert(x29, x31)\n    x33 = backdrop(x32)\n    x34 = cover(I, x33)\n    x35 = ulcorner(x787)\n    x36 = crop(x34, x35, x21)\n    x37 = remove(x35, x1)\n    x38 = repeat(x36, ONE)\n    x39 = combine(x38, x37)\n    x40 = vmirror(x39)\n    x41 = dmirror(x32)\n    "], [1.1, "def solve_c6e6a14f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_90e3e421(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_4d0f27a7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = astuple(x28, x22)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ONE, first, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror"], [1.1, "def solve_173f8a98(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = ofcolor(I, ZERO)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x1, x6)\n    x8 = argmax(x7, x5)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = fill(x11, ONE, x8)\n    x13 = objects(x12, F, T, T)\n    x14 = argmin(x13, numcolors)\n    x15 = normalize(x14)\n    x16 = toindices(x15)\n    x17 = increment(x16)\n    x18 = increment(x17)\n    x19 = shift(x15, x18)\n    x20 = shift(x16, x18)\n    x21 = combine(x19, x20)\n    x22 = asindices(x21)\n    x23 = rbind(toobject, x25)\n    x24 = compose(x23, delta)\n    x25 = rbind(shift, x22)\n    x26 = chain(x5, x25, x24)\n    x27 = chain(x5, x26, identity)\n    x28 = fork(combine, x27, x24)\n    x29 = x28(x15)\n    x30 = rbind(toobject, x25)\n    x31 = chain(x30, x29, x27)\n    x32 = rbind(shift, x28)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x33, x31)\n    x35 = fork(mapply, x34, x26)\n    x36 = lbind(shift, x27)\n    x37 = compose(x36, x31)\n    x38 = fork(mapply, x37, x31)\n    x39 = fork(h"], [1.1, "def solve_e8c6d222(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_eda5c209(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = interval(TWO, ONE, ONE)\n    x2 = prapply(astuple, x1)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, x1)\n    x5 = fill(I, THREE, x4)\n    x6 = astuple(TWO, ONE)\n    x7 = portrait(x4)\n    x8 = dmirror(x5)\n    x9 = sfilter(x8, x7)\n    x10 = argmax(x9, x7)\n    x11 = palette(x10)\n    x12 = remove(ZERO, x11)\n    x13 = other(x12, x12)\n    x14 = ofcolor(x10, x13)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x10, x13)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = rbind(gravitate, x18)\n    x20 = lbind(compose, x19)\n    x21 = lbind(rbind, greater)\n    x22 = compose(x21, first)\n    x23 = rbind(sfilter, x22)\n    x24 = chain(x20, x23, x18)\n    x25 = lbind(fork, greater)\n    x26 = lbind(x25, identity)\n    x27 = lbind(rbind, subtract)\n    x28 = compose(x27, x18)\n    x29 = lbind(compose, x28)\n    x30 = lbind(rbind, subtract)\n    x31 = compose(x30, x26)\n    x32 = fork(lbind, x26, x31)\n    x33 = lbind(sfilter, x17)\n    x34 = rbind(compose, x27)\n    x35 = lbind(rbind, val val)\n    x36 = chain(x34, x35, x32)\n    x37 = lbind(compose, x10)\n    x38 = x32(I)\n    x39 = lbind"], [1.1, "def solve_b05e41e4(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_011d65a9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = invert(x17)\n    x32 = invert(x31)\n    x33 = rbind(manhattan, x35)\n    x34 = compose(x33, initset)\n    x35 = sfilter(x30, x34)\n    x36 = center(x35)\n    x37 = invert(x32)\n    x38 = shift(x25, x37)\n    x39 = shift(x38, x36)\n    x40"], [1.1, "def solve_e5f0d495(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_78714721(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = astuple(x4, TEN)\n    x6 = astuple(x4, TEN)\n    x7 = branch(x5, x6, x4)\n    x8 = argmin(x1, x7)\n    x9 = repeat(x3, x8)\n    x10 = insert(x4, x1)\n    x11 = remove(x10, x10)\n    x12 = repeat(x11, x9)\n    x13 = combine(x9, x12)\n    x14 = extract(x1, x13)\n    x15 = center(x14)\n    x16 = invert(x15)\n    x17 = shift(x1, x16)\n    x18 = invert(x16)\n    x19 = shift(x1, x18)\n    x20 = toindices(x14)\n    x21 = toindices(x16)\n    x22 = combine(x20, x21)\n    x23 = intersection(x22, x125)\n    x24 = lbind(contained, x17)\n    x25 = compose(x21, last)\n    x26 = fork(subtract, first, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(contained, x19)\n    x30 = compose(x21, last)\n    x31 = fork(subtract, identity, x30)\n    x32 = compose(x29, x31)\n    x33 = argmax(x28, x32)\n    x34 = compose(toivec, invert)\n    x35 = lbind(apply, shift)\n    x36 = lbind(rbind, toindices)\n    x37 = fork(x25, x36, x33)\n    x38 = compose(x34, x37)\n    x39 = fork(sfilter, identity, x38)\n    x40"], [1.1, "def solve_cfc5a20b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = invert(NEG_TWO)\n    x5 = shift(x3, x4)\n    x6 = lbind(repeat, x5)\n    x7 = rbind(compose, initset)\n    x8 = lbind(rbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(c9, identity, x9)\n    x11 = apply(x10, x5)\n    x12 = merge(x11)\n    x13 = dmirror(x12)\n    x14 = hmirror(x13)\n    x15 = vmirror(x14)\n    x16 = both(x4, x9)\n    x17 = combine(x16, x13)\n    x18 = combine(x16, x17)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = combine(x13, x20)\n    x22 = branch(x21, x18, x19)\n    x23 = x22(x4)\n    x24 = x22(x5)\n    x25 = shift(x23, x24)\n    x26 = ulcorner(x25)\n    x27 = lrcorner(x25)\n    x28 = add(x27, NEG_UNITY)\n    x29 = add(x28, UNITY)\n    x30 = x26(x29)\n    x31 = papply(shift, x25, x30)\n    x32 = lbind(mapply, x21)\n    x33 = apply(x32, x31)\n    x34 = argmax(x31, x33)\n    x35 = mapply(x19, x9)\n    x36 = paint(x20, x35)\n    x37 =09(x4, x33)\n    x38 = objects(x37, T, F, T)\n    x39 = colorfilter(x38, x2)\n    x40 = shift("], [1.1, "def solve_93abdf52(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_062ad4e9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = merge(x30)\n    x32 = rbind(subgrid, I)\n    x33 = apply(x32, x30)\n    x34 = matcher(first, x23)\n    x35 = extract(x34, x33)\n    x36 = last(x35)\n    x37 = equality(x36, ONE)\n    x38 = flip(x37)\n    x39 = branch(x38, x37, x34)\n    x40 = branch(x38, x36, x33)\n    x41 = subtract(x40, x39)\n    x"], [1.1, "def solve_09f5942a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = Tizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = lbind(rbind, colorcount)\n    x5 = matcher(x4, ZERO)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(dmirror, x6)\n    x8 = fork(remove, x7, chain)\n    x9 = lbind(remove, TWO)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(x10, x8)\n    x12 = lbind(compose, x5)\n    x13 = lbind(matcher, x11)\n    x14 = compose(x12, x13)\n    x15 = chain(x12, x14, x7)\n    x16 = fork(compose, x12, x15)\n    x17 = lbind(lbind, extract)\n    x18 = compose(x17, x16)\n    x19 = fork(remove, x18, x16)\n    x20 = compose(size, x19)\n    x21 = matcher(x20, ZERO)\n    x22 = lbind(compose, x5)\n    x23 = compose(x22, x21)\n    x24 = fork(compose, x23, x20)\n    x25 = chain(initset, x24, x19)\n    x26 = fork(rapply, x25, identity)\n    x27 = compose(first, x26)\n    x28 = multiply(TEN, THREE)\n    x29 = power(x27, x28)\n    x30 = astuple(x29, x23)\n    x31 = astuple(x27, x26)\n    x32 = astuple(x30, x31)\n    x33 = x29(x32)\n    x34 = first(x33)\n    x35 = last(x33)\n    x36 = dmirror(x34)\n    x37 = fgpartition(x36)\n    x38 = merge(x37)"], [1.1, "def solve_351962e9(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(TEN, TEN)\n    x3 = invert(x2)\n    x4 = astuple(TWO, x3)\n    x5 = astuple(THREE, x3)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x7, x1)\n    x9 = lbind(contained, TWO)\n    x10 = lbind(contained, THREE)\n    x11 = compose(invert, ulcorner)\n    x12 = lbind(compose, x11)\n    x13 = lbind(rbind, sfilter)\n    x14 = compose(x12, x13)\n    x15 = rbind(compose, center)\n    x16 = lbind(lbind, shift)\n    x17 = x14(x9)\n    x18 = x14(x10)\n    x19 = fork(shift, identity, x17)\n    x20 = fork(shift, identity, x18)\n    x21 = compose(x9, palette)\n    x22 = compose(x10, palette)\n    x23 = sfilter(x8, x21)\n    x24 = argmax(x23, size)\n    x25 = remove(x24, x23)\n    x26 = vmirror(x24)\n    x27 = chain(x15, x16, x19)\n    x28 = x27(x26)\n    x29 = replace(x28, ZERO, x24)\n    x30 = lbind(increment, x40)\n    x31 = lbind(greater, x24)\n    x32 = compose(x30, x31)\n    x33 = fork(astuple, x32, ulcorner)\n    x34 = fork(recolor, x33, x24)\n    x35 = mapply(x34, x25)\n    x36 = paint(x29, x35)\n    x37 = sfilter(x8, x36)\n    x38 = paint(x37, x28)\n    x39 = m"], [1.1, "def solve_122ef891(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, height)\n    x12 = sfilter(x1, x11)\n    x13 = chain(first, rgfrontier, hfrontier)\n    x14 = corners(x12)\n    x15 = argmax(x14, x14)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x12)\n    x18 = width(I)\n    x19 = divide(x18, THREE)\n    x20 = astuple(x19, x19)\n    x21 = x20(I)\n    x22 = other(x9, x21)\n    x23 = color(x22)\n    x24 = colorfilter(x1, x23)\n    x25 = rbind(leftmost, x15)\n    x26 = compose(x25, first)\n    x27 = argmax(x24, x26)\n    x28 = rightmost(x27)\n    x29 = compose(last, last)\n    x30 = argmax(x24, x29)\n    x31 = rightmost(x30)\n    x32 = compose(last, last)\n    x33 = matcher(first, x11)\n    x34 = sfilter(x31, x33)\n    x35 = rbind(leftmost, x13)\n    x36 = argmin(x34, x35)\n    x37 = matcher(first, x11)\n    x38 = fork(both, x34, x37)\n    x39 = sfilter(x36, x38)\n    x40 = difference(x09, x39)\n"], [1.1, "def solve_27080051(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_19766276(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_caa518dd(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = asobject(I)\n    x6 = colorfilter(x5, x4)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = branch(x8, height, width)\n    x11 = x10(I)\n    x12 = astuple(ONE, x11)\n    x13 = x9(I)\n    x14 = crop(x13, ORIGIN, x12)\n    x15 = extract(x14, x9)\n    x16 = mostcolor(x15)\n    x17 = palette(x15)\n    x18 = remove(x4, x17)\n    x19 = remove(x16, x18)\n    x20 = insert(x16, x19)\n    x21 = UNITY(x20)\n    x22 = other(x23, x21)\n    x23 = subgrid(x25, x19)\n    x24 = trim(x23)\n    x25 = asobject(x24)\n    x26 = shift(x25, UNITY)\n    x27 = occurrences(x26, x211)\n    x28 = mapply(first, x27)\n    x29 = last(x27)\n    x30 = toindices(x29)\n    x31 =77fd(x22, x30)\n    x32 = fgpartition(x31)\n    x33 = merge(x32)\n    x34 = toindices(x33)\n    x35 = vfrontier(x34)\n    x36 = fgpartition(x35)\n    x37 = merge(x36)\n    x38 = cover(x24, x37)\n    x39 = paint(x38, x35)\n    x40 = power(first, TEN)\n    x41 = astuple(ONE, x40)\n    x42 = canvas(x4, x41)\n    x43 ="], [1.1, "def solve_6a88faba(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = rbind(add, UNITY)\n    x4 = chain(x2, x3, lrcorner)\n    x5 = fork(recolor, color, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(add, UP_RIGHT)\n    x8 = chain(x6, x7, urcorner)\n    x9 = fork(recolor, color, x8)\n    x10 = rbind(shoot, NEG_UNITY)\n    x11 = rbind(add, NEG_UNITY)\n    x12 = chain(x10, x11, ulcorner)\n    x13 = fork(recolor, color, x12)\n    x14 = rbind(shoot, DOWN_LEFT)\n    x15 = rbind(add, DOWN_LEFT)\n    x16 = chain(x14, x15, llcorner)\n    x17 = fork(recolor, color, x16)\n    x18 = fork(remove, lrcorner, toindices)\n    x19 = fork(equality, toindices, x18)\n    x20 = sfilter(x1, x19)\n    x21 = fork(remove, urcorner, toindices)\n    x22 = fork(equality, toindices, x21)\n    x23 = fork(add, ulcorner, x22)\n    x24 = fork(equality, toindices, x23)\n    x25 = sfilter(x1, x24)\n    x26 = fork(remove, ulcorner, toindices)\n    x27 = fork(equality, toindices, x26)\n    x28 = sfilter(x1, x27)\n    x29 = fork(remove, llcorner, toindices)\n    x30 = fork(equality, toindices, x29)\n    x31 = sfilter(x1, x30)\n    x32 = fork(remove, urcorner, toindices)\n    x33 = fork(equality, toindices, x"], [1.1, "def solve_450a45f0(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = ulcorner(x3)\n    x8 = llcorner(x3)\n    x9 = branch(x8, lrcorner, ZERO_BY_TWO)\n    x10 = crop(x6, x9, x7)\n    x11 =218rcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = first(x12)\n    x14 = invert(x13)\n    x15 = shift(x11, x14)\n    x16 = ulcorner(x12)\n    x17 = lrcorner(x12)\n    x18 = shift(x15, x17)\n    x19 = ulcorner(x12)\n    x20 = llcorner(x12)\n    x21 =26(x19, x20)\n    x22 =5101(x21)\n    x23 = shift(x16, x22)\n    x24 = llcorner(x26)\n    x25 = lrcorner(x26)\n    x26 = shift(x23, x25)\n    x27 = llcorner(x25)\n    x28 = urcorner(x25)\n    x29 = shoot(x7, UNITY)\n    x30 = shoot(x24, DOWN_LEFT)\n    x31 = shoot(x27, UP_RIGHT)\n    x32 = shoot(x28, UP_RIGHT)\n    x33 = combine(x29, x31)\n    x34 = combine(x29, x32)\n    x35 = combine(x33, x34)\n    x36 = other(x35, x22)\n    x37 = fill(x6, THREE, x36)\n    x38 = paint(x37, x3)\n    x39 = astuple(x23, x6)\n    x40"], [1.1, "def solve_ad954a43(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, x8, x9)\n    x13 = ofcolor(x12, x6)\n    x14 = normalize(x13)\n    x15 = color(x14)\n    x16 = replace(x12, x6, x15)\n    x17 = replace(x16, x6, x4)\n    x18 = compress(x17)\n    x19 = ulcorner(x(x13)\n    x20 = decrement(x19)\n    x21 = shift(x18, x20)\n    x22 = toindices(x21)\n    x23 = remove(x22, x10)\n    x24 = lbind(manhattan, x2)\n    x25 = argmin(x23, x24)\n    x26 = frontiers(x25)\n    x27 = sfilter(x26, vline)\n    x28 = difference(x26, x27)\n    x29 = ofcolor(x12, x6)\n    x30 = increment(x29)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x28)\n    x33 = argmin(x32, width)\n    x34 = remove(x33, x32)\n    x35 =ark head(x34, x33)\n    x36 = ofcolor(x12, x6)\n    x37 = shift(x36, x31)\n    x38 = ofcolor(x12, x6)\n    x39 = leftmost(x38)\n    x40 = shift(x39, x31)\n"], [1.1, "def solve_926c352b(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(bordering, toindices)\n    x4 = argmin(x2, x3)\n    x5 = fork(adjacent, x4, outbox)\n    x6 = compose(x5, initset)\n    x7 = mfilter(x2, x6)\n    x8 = sfilter(x1, x7)\n    x9 = difference(x1, x8)\n    x10 = fill(I, THREE, x9)\n    x11 = mapply(x4, x8)\n    x12 = paint(x10, x11)\n    x13 = leftmost(x9)\n    x14 = leftmost(x12)\n    x15 = greater(x13, x14)\n    x16 = greater(x37, x15)\n    x17 = rightmost(x9)\n    x18 = rightmost(x12)\n    x19 = greater(x17, x18)\n    x20 = greater(x37, x19)\n    x21 = rightmost(x9)\n    x22 = uppermost(x21)\n    x23 = rightmost(x12)\n    x24 = greater(x23, x22)\n    x25 = both(x19, x24)\n    x26 = branch(x25, identity, hmirror)\n    x27 = x26(x12)\n    x28 = interval(ONE, SEVEN, ONE)\n    x29 = lbind(201to, EIGHT)\n    x30 = rbind(compose, initset)\n    x31 = lbind(rbind, manhattan)\n    x32 = compose(x30, x31)\n    x33 = lbind(compose, initset)\n    x34 = lbind(rbind, sfilter)\n    x35 = compose(x33, x34)\n    x36 = product(x38, x32)\n    x37 = sfilter(x36, x5)\n    x38 = apply(toindices, x37)\n    x39 = compose(x29,"], [1.1, "def solve_9130a0b8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(x15, x25)\n    x27 = apply(toivec, x3)\n    x28 = apply(x26, x27)\n    x29 = argmax(x28, width)\n    x30 = remove(x29, x28)\n    x31 = ulcorner(x29)\n    x32 = invert(x31)\n    x33 = shift(x29, x32)\n    x34 = asindices(I)\n    x35 = center(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = width(I)\n    x39 = double(x38)\n    x40 = tojvec(x39)\n    x"], [1.1, "def solve_ad98b417(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmax(x4, size)\n    x6 = argmin(x4, size)\n    x7 = rbind(greater, ONE)\n    x8 = compose(x7, first)\n    x9 = sfilter(x4, x8)\n    x10 = difference(x1, x9)\n    x11 = apply(feca, x9)\n    x12 = sfilter(x10, identity)\n    x13 = mapply(palette, x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = other(x15, x14)\n    x17 = subgrid(x13, I)\n    x18 = trim(x17)\n    x19 = tophalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 =0(x21)\n    x23 = color(x22)\n    x24 = palette(x18)\n    x25 = remove(x23, x24)\n    x26 = ulcorner(x25)\n    x27 = lrcorner(x25)\n    x28 = llcorner(x25)\n    x29 = urcorner(x25)\n    x30 = ulcorner(x25)\n    x31 = shoot(x26, UNITY)\n    x32 = shoot(x27, DOWN_LEFT)\n    x33 = shoot(x28, UP_RIGHT)\n    x34 = shoot(x29, DOWN_LEFT)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    x38 = height(x23)\n    x39 = multiply(x38, THREE)\n    x40 = height(x28)\n    x41 = divide(x39, x40"], [1.1, "def solve_982cd668(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(decrement, width)\n    x27 = fork(greater, x26, x25)\n    x28 = toivec(NEG_TWO)\n    x29 = rbind(apply, x28)\n    x30 = chain(x29, vfrontier, x27)\n    x31 = leastcolor(I)\n    x32 = rbind(astuple, x31)\n    x33 =11(x32)\n    x34 = apply(x33, x3)\n    x35 = merge(x34)\n    x36 = apply(x358, x35)\n    x37 = urcorner(x36)\n    x38 = shoot(x37, UP_RIGHT)\n    x39 = shoot(x36,"], [1.1, "def solve_8221c706(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_6d7b713c(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = astuple(dedupe, cmirror)\n    x4 = initset(x3)\n    x5 = insert(insert, x4)\n    x6 = insert(dmirror, x5)\n    x7 = combine(x2, x6)\n    x8 = rbind(contained, x7)\n    x9 = chain(flip, x8, neighbors)\n    x10 = sfilter(x1, x9)\n    x11 = fork(combine, hfrontier, vfrontier)\n    x12 = mapply(x11, x10)\n    x13 = paint(I, x12)\n    x14 = height(I)\n    x15 = width(I)\n    x16 = vsplit(I, x15)\n    x17 =8efilter(x16, x13)\n    x18 =312(x17, x14)\n    x19 = divide(x18, x9)\n    x20 =equality(x19, ONE)\n    x21 = branch(x20, identity, dmirror)\n    x22 = x21(x16)\n    x23 = x21(x22)\n    x24 = double(x18)\n    x25 = positive(x24)\n    x26 = double(x25)\n    x27 = branch(x20, identity, height)\n    x28 = x27(x26)\n    x29 = x27(x28)\n    x30 = x27(x23)\n    x31 = x27(x30)\n    x32 = lbind(contained, x12)\n    x33 = compose(x32, toindices)\n    x34 = fork(add, height, x33)\n    x35 = compose(decrement, x34)\n    x36 = order(x07, x35)\n    x37 = apply(x61, x36)\n    x38 = size(x37)\n    x39 = astuple(x38, x49)\n    x40 = crop(x37, DOWN, x39)\n    x41 ="], [1.1, "def solve_c503965f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_f072499c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(leftmost, x8)\n    x10 = matcher(x9, x7)\n    x11 = sfilter(x1, x10)\n    x12 = compose(leftmost, x11)\n    x13 = matcher(x12, ZERO)\n    x14 = sfilter(x1, x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, color)\n    x17 = sfilter(x1, x16)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = sfilter(x1, x15)\n    x21 = size(x20)\n    x22 = equality(x21, TWO)\n    x23 = sfilter(x1, x17)\n    x24 = size(x23)\n    x25 = equality(x24, TWO)\n    x26 = sfilter(x1, x15)\n    x27 = size(x26)\n    x28 = equality(x27, TWO)\n    x29 = sfilter(x1, x14)\n    x30 = size(x29)\n    x31 = equality(x30, TWO)\n    x32 = sfilter(x1, x17)\n    x33 = size(x32)\n    x34 = equality(x33, TWO)\n    x35 = either(x19, x200)\n    x36 = branch(x35, hmirror, vmirror)\n    x37 = multiply(x25, xdmirror)\n    x38 = multiply(x28, x305)\n    x39 = branch(x37, x38, x37)\n    x40 = multiply(x34,"], [1.1, "def solve_3086e428(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = last(x1)\n    x4 = color(x2)\n    x5 = color(x3)\n    x6 = equality(x4, x5)\n    x7 = combine(x2, x3)\n    x8 = height(x7)\n    x9 = subtract(x8, THREE)\n    x10 = astuple(x9, ONE)\n    x11 = connect(x7, x10)\n    x12 = lefthalf(x11)\n    x13 = righthalf(x11)\n    x14 =077022001111(x12)\n    x15 =07702200111111113333\n    x16 = pair(x14, x13)\n    x17 = combine(x14, x16)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = sfilter(x17, x20)\n    x22 = chain(last, first, last)\n    x23 = compose(last, first)\n    x24 = fork(equality, x22, x23)\n    x25 = sfilter(x21, x24)\n    x26 = combine(x21, x25)\n    x27 = fork(subtract, first, last)\n    x28 = fork(27min, x22, x27)\n    x29 = fork(87astuple, x28, x22)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x21)\n    x32 = paint(I, x31)\n    x33 = mapply(x32, x25)\n    O = paint(x33, x25)\n    return O"], [1.1, "def solve_16d9eda8(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = dmirror(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(dmirror, x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x2, x8)\n    x10 = increment(x199)\n    x11 = argmin(x9, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = color(x11)\n    x14 = ofcolor(x11, x13)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x33, x13)\n    x17 = difference(x16, x15)\n    x18 = compose(first, urcorner)\n    x19 = apply(x18, x17)\n    x20 = rbind(argmin, x17)\n    x21 = apply(x20, x20)\n    x22 =20(x21)\n    x23 =20(x22)\n    x24 =807 leftmost(x15)\n    x25 =    positive(x24)\n    x25 = branch(x25, mostcolor, x83)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x33)\n    x28 = matcher(first, x13)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(first, vmirror, x29)\n    x31 = rbind(sfilter, x30)\n    x32 = compose(x31, x26)\n    x33 = apply(x32, x15)\n    x34 = paint(x27, x33)\n    O = x30(x34)\n    return O"], [1.1, "def solve_8d6beccb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    x4 = add(TWO, x3)\n    x5 = canvas(x2, x4)\n    x6 = asobject(I)\n    x7 = shift(x6, UNITY)\n    x8 = paint(x5, x7)\n    x9 = repeat(identity, ONE)\n    x10 = dmirror(x8)\n    x11 = width(x10)\n    x12 = dmirror(x8)\n    x13 = interval(ZERO, x11, ONE)\n    x14 = pair(x12, x13)\n    x15 =725(x14)\n    x16 = astuple(x15, x12)\n    x17 = lbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x7)\n    x20 = mapply(x19, x18)\n    O = paint(x8, x20)\n    return O"], [1.1, "def solve_399a6361(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(vmatching, toindices, box)\n    x7 = mfilter(x5, x6)\n    x8 = mostcolor(I)\n    x9 = fill(I, x8, x7)\n    x10 = asobject(x7)\n    x11 = replace(x9, x10, ZERO)\n    x12 = asobject(x8)\n    x13 = recolor(x12, x10)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x9, x14)\n    x16 =shift(x15, ulcorner)\n    x17 = subgrid(x16, x15)\n    x18 = paint(x17, x18)\n    x19 = replace(x18, x10, ZERO)\n    x20 = dmirror(x19)\n    x21 = asindices(x20)\n    x22 = lbind(shift, x21)\n    x23 =8877(x22)\n    x24 = height(x11)\n    x25 = divide(x24, x24)\n    x26 = increment(x25)\n    x27 = width(x11)\n    x28 = divide(x27, x24)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x24, x424)\n    x38 = canvas(x8, x37)\n    x39 = paint(x38, x36)\n    O = switch(x39, EIGHT, NINE)\n    return O"], [1.1, "def solve_731c7c21(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = fork(vmatching, first, last)\n    x10 =\n    x11 = fork(both, x9, x9)\n    x12 = sfilter(x1, x11)\n    O = fill(x8, SEVEN, x12)\n    return O"], [1.1, "def solve_bb6889d7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = objects(I, T, F, F)\n    x3 = halve(x1)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(x5, x6)\n    x8 = double(x3)\n    x9 = add(x8, TWO)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = astuple(x1, x2)\n    x13 = lbind(multiply, x12)\n    x14 = apply(x13, x11)\n    x15 = lbind(shift, x7)\n    x16 = mapply(x15, x14)\n    x17 = paint(x7, x16)\n    x18 = uppermost(x7)\n    x19 = leftmost(x7)\n    x20 = palette(I)\n    x21 =04ide(x20)\n    x22 = interval(x18, x19, ONE)\n    x23 = product(x22, x22)\n    x24 = sfilter(x23, first)\n    x25 = mapply(last, x24)\n    O = paint(x17, x25)\n    return O"], [1.1, "def solve_c1c72e5f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = compress(I)\n    x2 =8777778810001, insert7577867)\n    x3 =2\n    x4 = upscale(x1, TWO)\n    x4 = neighbors(ORIGIN)\n    x5 = insert(ORIGIN, x4)\n    x6 = vmirror(x5)\n    x7 = hconcat(x3, x6)\n    x8 = hmirror(x7)\n    x9 = vconcat(x7, x8)\n    x10 = compress(x9)\n    x11 = decrement(x1)\n    x12 = subtract(x11, x10)\n    x13 = upscale(x10, x12)\n    x14 = tojvec(x1)\n    x15 = shift(x13, x14)\n    x16 = height(I)\n    x17 = equality(x16, FOUR)\n    x18 = subgrid(x17, I)\n    x19 = trim(x18)\n    x20 =00000(x1)\n    x21 = cover(x19, x20)\n    x22 = tojvec(x1)\n    x23 = shift(x5, x22)\n    x24 = ofcolor(x18, FIVE)\n    x25 = recolor(FIVE, x24)\n    x26 = vconcat(x21, x25)\n    O = replace(x26, ZERO, FOUR)\n    return O"], [1.1, "def solve_4295569c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = decrement(x11)\n    x13 = apply(x12, x10)\n    x14 = size(x2)\n    x15 = increment(x14)\n    x16 =\n    x17 = interval(x15, ONE, ONE)\n    x18 = apply(toivec, x17)\n    x19 = lbind(shift, x12)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.1, "def solve_9b49b838(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = remove(x2, x1)\n    x8 = argmax(x7, size)\n    x9 = lrcorner(x8)\n    x10 =652(x9, normalize)\n    x11 = ulcorner(x8)\n    x12 = llcorner(x8)\n    x13 = shoot(x11, NEG_UNITY)\n    x14 = shoot(x12, DOWN_LEFT)\n    x15 = shoot(x13, UP_RIGHT)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = combine(x13, x16)\n    x18 = combine(x12, x17)\n    x19 = underfill(I, x3, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(shift, x5)\n    x23 = mapply(x22, x21)\n    O = paint(x19, x23)\n    return O"], [1.1, "def solve_e387ad6a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height, +)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.1, "def solve_9e2a0462(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = palette(I)\n    x7 = sfilter(x6, x5)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = remove(x8, x7)\n    x11 = argmax(x10, x5)\n    x12 = other(x10, x8)\n    x13 = ofcolor(I, x12)\n    x14 = recolor(x11, x13)\n    x15 =20 subgrid(x14, I)\n    x16 = lbind(1992, trim)\n    x17 = lbind(mapply, x16)\n    x18 =22l43(x17)\n    x19 =39(x18)\n    x20 = dmirror(x15)\n    x21 = matcher(x17, x20)\n    x22 = rbind(sfilter, x21)\n    x23 = compose(x22, cmirror)\n    x24 = ofcolor(x15, x1)\n    x25 = subgrid(x24, x15)\n    x26 = lefthalf(x25)\n    x27 = cover(x26, x25)\n    x28 = mapply(x23, x27)\n    O = paint(x27, x28)\n    return O"], [1.1, "def solve_337ee2b6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = lbind(recolor, ZERO)\n    x12 = compose(x11, outbox)\n    x13 = fork(combine, identity, x12)\n    x14 = lbind(occurrences, I)\n    x15 = lbind(rbind, subtract)\n    x16 = lbind(apply, increment)\n    x17 = lbind(O = chain(x15, x16, x6)\n    x18 = fork(mapply, x17, x15)\n    x19 = lbind(lbind, shift)\n    x20 = compose(x19, toindices)\n    x21 = fork(mapply, x20, x18)\n    x22 = fork(mapply, x21, x13)\n    x23 = fork(mapply, x22, xI)\n    x24 = fork(mapply, x23, x15)\n    x25 = lbind(lbind, mapply)\n    x26 = compose(x25, x48)\n    x27 = fork(mapply, x26, x25)\n    x28 = fork(mapply, x27, x28)\n    x29 = mapply(x27, x10)\n    x30 = vmirror(x29)\n    x31 = papply(pair, x29, x30)\n    x32 = leastcolor(x31)\n    x33 = ofcolor(I, x32)\n    x34 = mapply(x27, x33)\n    O = fill(I, x32, x34)\n    return O"], [1.1, "def solve_2a54af2b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = sizefilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = extract(x3, x5)\n    x7 = remove(x6, x3)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = lbind(ofcolor, x8)\n    x11 =56(difference)\n    x12 = portrait(x8)\n    x13 = branch(x12, x10, x11)\n    x14 = ofcolor(I, x8)\n    x15 = subgrid(x14, I)\n    x16 = trim(x15)\n    x17 = extract(x16, x5)\n    x18 = subgrid(x17, I)\n    x19 = trim(x18)\n    x20 = palette(x19)\n    x21 = intersection(x8, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = apply(invert, x23)\n    x25 = apply(tojvec, x24)\n    x26 = mapply(shift, x25)\n    O = fill(I, x22, x26)\n    return O"], [1.1, "def solve_87fc7877(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(bordering, frontiers)\n    x4 = extract(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = positive(x5)\n    x7 = branch(x6, leftmost, rightmost)\n    x8 = x7(x4)\n    x9 = width(I)\n    x10 =661\n    Example output:\n    0000000000000000000000000\n    000222222288200200000000\n    000222222288200200000000\n    00000000008800020000000\n    00000000008800020000000\n    00000000008800020000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0008800000000888800000000\n    0008800000000888800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(x8, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = neighbors(UNITY)\n    x9 = colorfilter(x1, x6)\n    x10 = apply(initset, x9)\n    x11 = ofcolor(I, x4)\n    x12 = sizefilter(x10, x11)\n    x13 = mapply(neighbors, x12)\n    x14 = apply(toobject, x1)\n    x15 = lbind(shift, x13)\n    x16 = mapply(x15, x14)\n    O = paint(I, x16)\n    return O"], [1.1, "def solve_6b355b63(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =355(I)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = box(x4)\n    x6 = rbind(toobject, I)\n    x7 = lbind(rbind, manhattan)\n    x8 = chain(x6, x7, initset)\n    x9 = chain(normalize, x6, x8)\n    x10 = fork(astuple, x9, identity)\n    x11 = apply(x10, x5)\n    x12 = subtract(Deserence, x5)\n    x13 = positive(x12)\n    x14 = branch(x13, identity, x11)\n    x15 = branch(x13, identity, x14)\n    x16 = x15(x9)\n    x17 = x15(I)\n    x18 = lefthalf(x16)\n    x19 = righthalf(x16)\n    x20 = palette(x18)\n    x21 = palette(x19)\n    x22 = intersection(x20, x21)\n    x23 = first(x22)\n    x24 = ofcolor(x18, x23)\n    x25 = ofcolor(x19, x23)\n    x26 = intersection(x24, x25)\n    x27 = canvas(x23, x10)\n    O = fill(x27, THREE, x26)\n    return O"], [1.1, "def solve_5d025844(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = color(x7)\n    x10 = subgrid(x6, I)\n    x11 =1888(x10)\n    x12 = replace(x11, x8, x9)\n    x13 = compress(x12)\n    x14 = asobject(x13)\n    x15 = occurrences(x14, x6)\n    x16 = vperiod(x15)\n    x17 = halve(x16)\n    x18 = increment(x17)\n    x19 = lbind(shift, x14)\n    x20 = occurrences(x41, x7)\n    x21 = VALmax(x20, x19)\n    x22 = toindices(x21)\n    x23 = x19(x22)\n    x24 = asindices(x5)\n    x25 = ofcolor(x5, x8)\n    x26 = difference(x24, x25)\n    x27 = fill(x14, x6, x27)\n    x28 =573apply(x19, x23)\n    x29 = urcorner(x28)\n    x30 = shift(x29, UNITY)\n    x31 = apply(x19, x30)\n    x32 = toindices(x50)\n    x33 = x39(x32)\n    x34 = asindices(x5)\n    x35 = equality(x33, x34)\n    x36 = combine(x31, x35)\n    x37 = fill(x35, x8, x36)\n    x38 = identity(x35)\n    x39 = apply(x38, x33)\n    x40 = mapply(x27, x39)\n    O = fill(x37, x9, x40)\n    return O"], [1.1, "def solve_e5940aea(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = apply(equality, x2)\n    x4 = extract(x3,\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = rbind(greater, THREE)\n    x8 = rbind(toobject, I)\n    x9 = chain(x7, x8, palette)\n    x10 = branch(x5, x6, x9)\n    x11 = initset(x10)\n    x12 = dmirror(I)\n    x13 = insert(x6, x12)\n    x14 = insert(x13, x119)\n    x15 = dmirror(x14)\n    x16 = cellwise(x15, x6, x125)\n    x17 = replace(x16, x6, x5)\n    x18 = combine(x15, x17)\n    O = x19(x18)\n    return O"], [1.1, "def solve_663b02b8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = E2627a790100\n    08 connect00000010000000000000\n    \"\"\"\n    x1 = sfilter(x1, square)\n    x2 = difference(x1, x1)\n    x3 = compose(even, width)\n    x4 = rbind(greater, ONE)\n    x5 = chain(x4, x3, vmirror)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(compose, flip)\n    x8 = lbind(matcher, first)\n    x9 = chain(x7, x8, dmirror)\n    x10 = lbind(paint, I)\n    x11 = chain(x10, x9, identity)\n    x12 = chain(x11, hmirror, vmirror)\n    x13 = compose(normal, x12)\n    x14 = chain(x11, vmirror, x13)\n    x15 = rapply(x2, x1)\n    x16 = mapply(x14, x15)\n    O = paint(I, x16)\n    return O"], [1.1, "def solve_39b53674(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = mostcommon(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x7, x11)\n    x13 = combine(x9, x12)\n    x14 = mapply(dneighbors, x13)\n    x15 = difference(x1, x14)\n    x16 = toobject(x15, I)\n    x17 = mostcolor(x16)\n    x18 = cellwise(I, x17, x9)\n    x19 =d364(x18)\n    x20 = rbind(objects, x19)\n    x21 = rbind(x20, F)\n    x22 = rbind(x21, T)\n    x23 = rbind(subgrid, x18)\n    x24 = astuple(x22, x23)\n    x25 =429(x24)\n    x26 = replace(x18, x25, x9)\n    x27 =46f25fbde4(x26)\n    x28 = matcher(first, x18)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x27, x29,partition)\n    x31 = mapply(x30, x24)\n    x32 = combine(x31, x22)\n    x33 = mapply(x32, x27)\n    x34 = fill(x26, x21, x33)\n    x35 = fill(x34, x20, x29)\n    O = fill(x35, x17, x34)\n    return O"], [1.1, "def solve_d4979171(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = palette(I)\n    x2 = halve(x1)\n    x3 = dneighbors(x2)\n    x4 = insert(x2, x3)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(first,(x5)\n    x7 = compose(x6, last)\n    x8 = fork(equality, x6, x7)\n    x9 = sfilter(x4, x8)\n    x10 = difference(x4, x9)\n    x11 = compose(x5, first)\n    x12 = same(x10)\n    x13 = sfilter(x4, x11)\n    x14 = compose(last, last)\n    x15 = fork(equality, x12, x14)\n    x16 = sfilter(x13, x15)\n    x17 = compose(invert, order)\n    x18 = fork( shift, x17, x16)\n    x19 = apply(x18, x9)\n    O = cover(I, x19)\n    return O"], [1.1, "def solve_2c32c2e5(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = argmax(x4, size)\n    x6 = other(x4, x5)\n    x7 = subgrid(x6, I)\n    x8 = llcorner(x5)\n    x9 = replace(x7, x8, x6)\n    x10 = branch(x8, x9, x5)\n    x11 = crement(x10)\n    x12 = replace(x7, x5, x6)\n    x13 = leastcolor(x12)\n    x14 = ofcolor(x12, x13)\n    x15 = inbox(x5)\n    x16 = recolor(x3, x15)\n    x17 = mapply(dneighbors, x16)\n    x18 = color(x3)\n    x19 = fill(x17, x18, x15)\n    x20 =O = fill(x19, x13, x15)\n    x21 =048(x11)\n    x22 = width(x20)\n    x23 = shouldFGilter(x21, x22)\n    x24 = insert(ZERO, x23)\n    x25 = dmirror(x24)\n    x26 = width(x20)\n    x27 = equality(x26, x25)\n    x28 = branch(x27, ZERO, x25)\n    O = canvas(x28, x18)\n    return O"], [1.1, "def solve_ffb4fd8d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0002200000880000000000000\n    0002200000880000000000000\n    0000000000000000000000000\n    0000088000000000000880000\n    0000088000000000000880000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000880008800000000\n    0000000000880008800000000\n    0000000000000000000000000\n    0000000000000000000008800\n    0000000000000000000008800\n    0000000000000000000000000\n    0008800000000008800000000\n    0008800000000008800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0002277777880000000000000\n    0002277777880000000000000\n    0000000000770000000000000\n    0000088000770000000880000\n    0000088000770000000880000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0000000000770000000000000\n    0008800000880000000000000\n    0008800000880000000000000\n    0007700000770000000000000\n    0007700000770000000000000\n    0007700000887778800000000\n    0007700000887778800000000\n    0007700000000007700000000\n    0007700000000007700008800\n    0007700000000007700008800\n    0007700000000007700000000\n    0008877777777778800000000\n    0008877777777778800000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = center(x2)\n    x4 = neighbors(x3)\n    x5 = center(x4)\n    x6 = color(x5)\n    x7 = astuple(dmirror, x6)\n    x8 = astuple(cmirror, x6)\n    x9 = astuple(hmirror, x8)\n    x10 = astuple(vmirror, x9)\n    x11 = combine(x7, x10)\n    x12 = multiply(x11, THREE)\n    x13 = tojvec(x12)\n    x14 =\n    x15 = shift(x1, x13)\n    x16 = fill(I, x6, x14)\n    x17 = objects(x16, T, F, T)\n    x18 = lbind(urcorner, x17)\n    x19 = compose(x18, llcorner)\n    x20 = rbind(colorcount, x6)\n    x21 = chain(x20, x19, astuple)\n    x22 = argmax(x15, x21)\n    x23 = add(x22, DOWN)\n    x24 = replace(x16, x23, x6)\n    x25 = shift(x18, UNITY)\n    x26 = paint(x24, x25)\n    x27 = repeat(x26, ONE)\n    x28 = merge(x27)\n    x29 = width(x22)\n    x30 = hsplit(x88, x29)\n    x31 = invert(x30)\n    x32 = position(x26, x31)\n    x33 = hmirror(x29)\n    x34 = shape(x28)\n    x35 = add(x34, TWO)\n    x36 = hmirror(x29)\n    x37 = shift(x28, x36)\n    x38 = combine(x33, x37)\n    O = paint(x26, x38)\n    return O"], [1.1, "def solve_01d1f742(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, le, rmirror)\n    x8 = x7(I)\n    x9 = partition(x8)\n    x10 = matcher(color, ZERO)\n    x11 = extract(x9, x10)\n    x12 = remove(x11, x9)\n    x13 = argmin(x12, shape)\n    x14 = crop(x13, ORIGIN, x13)\n    x15 = palette(x14)\n    x16 = other(x15, ZERO)\n    x17 = palette(x16)\n    x18 = compose(first, vmirror)\n    x19 = matcher(x18, x16)\n    x20 = rbind(extract, x19)\n    x21 = compose(last, x20)\n    x22 = apply(x21, x12)\n    x23 = leftmost(x11)\n    x24 = leftmost(x5)\n    x25 = greater(x23, x24)\n    x26 = leftmost(x11)\n    x27 = leftmost(x5)\n    x28 = greater(x26, x27)\n    x29 = rbind(toobject, x25)\n    x30 = chain(x29, palette, delta)\n    x31 =38(x14)\n    x32 = matcher(first, x15)\n    x33 = rbind(sfilter, x31)\n    x34 = chain(double, x32, x33)\n    x35 = fork(equality, x34, identity)\n    x36 = compose(x35, x30)\n    x37 =fc(recolor, x36)\n    x38 = mapply(x37, x22)\n    x39 = paint(x38, x38)\n    O = x7(x39)\n    return O"], [1.1, "def solve_9675cdac(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =755(I, TWO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = rightmost(x8)\n    x10 = valmax(x1, TWO)\n    x11 = equality(x10, x9)\n    x12 = branch(x5, vmirror, hmirror)\n    x13 = x12(I)\n    x14 = remove(ZERO, x1)\n    x15 = other(x14, x13)\n    x16 = ulcorner(x8)\n    x17 = lrcorner(x8)\n    x18 = shape(x13)\n    x19 = add(x16, x18)\n    x20 = shift(x15, x19)\n    x21 = branch(x5, subgrid, x20)\n    O = x21(x13)\n    return O"], [1.1, "def solve_dde9b64c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = color(I)\n    x22 = canvas(x21, x12)\n    x23 = matcher(first, x11)\n    x24 = compose(flip, x23)\n    x25 =\n    x26(I)\n    x26 = fork(both, x23, x24)\n    x27 = sfilter(x22, x26)\n    O = fill(x22, TWO, x27)\n    return O"], [1.1, "def solve_683a97c3(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = lbind(matcher, identity)\n    x5 = chain(x3, x4, size)\n    x6 =replace(I, TWO, SIX)\n    x7 = Fgpartition(x6)\n    x8 = merge(x7)\n    x9 = order(x8, identity)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x6, T, F, T)\n    x13 = colorfilter(x12, TWO)\n    x14 = merge(x13)\n    x15 =762(x14)\n    x16 = urcorner(x15)\n    x17 = ulcorner(x15)\n    x18 = shoot(x16, UNITY)\n    x19 = shoot(x17, NEG_UNITY)\n    x20 = combine(x18, x19)\n    x21 = first(x20)\n    x22 = vmirror(x21)\n    x23 = objects(x6, T, F, T)\n    x24 = merge(x23)\n    x25 = colorfilter(x2, TWO)\n    x26 = square sfilter(x25, x24)\n    x27 = first(x26)\n    x28 = vmirror(x27)\n    x29 = objects(x6, T, F, T)\n    x30 = rbind(shoot, x27)\n    x31 = mapply(x30, x29)\n    x32 = combine(x31, x28)\n    x33 = x35(x32)\n    x34 = fill(x6, x17, x33)\n    x35 = x36(x34)\n    x36 = ofcolor(x35, TWO)\n    x37 = fill(x35, x10, x36)\n    O = fill(x37, x11, x37)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_948291cf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_42dc5c00(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_4db7c70c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_1bad274a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_4c9cf916(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_4cf9479c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_9644ef4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.29814814814814816, "def solve_402f8eba(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_919952b0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_589758a3(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.29814814814814816, "def solve_86abea68(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.30490196078431375, "def solve_ed68aee5(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.32027505446623095, "def solve_3ad0e4d3(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.32027505446623095, "def solve_997bcac5(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.32027505446623095, "def solve_ca163f1d(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.32027505446623095, "def solve_33a8d853(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.32027505446623095, "def solve_7cd12254(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_26f8b9e8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_637e7f87(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_cad19e41(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_ba3412c3(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_40c0831c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3215686274509804, "def solve_a5d8b4fd(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_ac9f2299(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_4828fbba(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3215686274509804, "def solve_5d60229e(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(toindices, normalize)\n    x7 = rbind(upscale, TWO)\n    x8 = chain(toindices, x7, normalize)\n    x9 = x6(x4)\n    x10 = rbind(intersection, x9)\n    x11 = chain(size, x10, x8)\n    x12 = argmax(x5, x11)\n    x13 = subgrid(x12, x1)\n    O = vmirror(x13)\n    return O"], [0.3215686274509804, "def solve_ca41f3a1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_769aa83b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_fb509e96(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_fd2983a3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_21ba4946(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_52b9038d(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_f10eaa95(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_84a7af4c(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [0.3215686274509804, "def solve_e10c1aac(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_6a09f148(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_48e25272(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3296296296296296, "def solve_96dd912d(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [0.3296296296296296, "def solve_077c78e7(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_c692eb42(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_5a8c8075(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_c51733ff(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_bb785a36(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_f382c9bc(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_1c65d596(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_7c86178f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_07ab7c50(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3296296296296296, "def solve_ad2c80eb(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.3333333333333333, "def solve_44cbaa14(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.3333333333333333, "def solve_5becab5d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.3333333333333333, "def solve_f7c34178(I):\n    x1 = objects(I, T, F, F)\n    x2 = contained(ONE, x1)\n    x3 = contained(TWO, x1)\n    x4 = branch(x2, UNITY, TWO_BY_TWO)\n    x5 = branch(x3, RIGHT, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x8, FIVE, x7)\n    return O"], [0.3380952380952381, "def solve_abebe5b9(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.3380952380952381, "def solve_ee07a79d(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.3382352941176471, "def solve_c39e1e48(I):\n    x1 = partition(I)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = order(x1, leftmost)\n    x5 = apply(color, x4)\n    x6 = rbind(canvas, UNITY)\n    x7 = apply(x6, x5)\n    x8 = merge(x7)\n    x9 = dmirror(x8)\n    x10 = subtract(NINE, x3)\n    x11 = astuple(ONE, x10)\n    x12 = canvas(ZERO, x11)\n    x13 = hconcat(x9, x12)\n    x14 = hsplit(x13, THREE)\n    x15 = merge(x14)\n    x16 = crop(x15, ORIGIN, x2)\n    x17 = crop(x15, DOWN, x2)\n    x18 = crop(x15, TWO_BY_ZERO, x2)\n    x19 = vmirror(x17)\n    x20 = vconcat(x16, x19)\n    O = vconcat(x20, x18)\n    return O"], [0.3666824618736384, "def solve_e1b895be(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.36851851851851847, "def solve_76c9a494(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_ac7f0f1f(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_b48bdc52(I):\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O"], [0.36851851851851847, "def solve_6126b575(I):\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = equality(x2, ONE)\n    x4 = equality(x2, FOUR)\n    x5 = equality(x2, FIVE)\n    x6 = branch(x3, TWO, ONE)\n    x7 = branch(x4, THREE, x6)\n    x8 = branch(x5, SIX, x7)\n    O = canvas(x8, UNITY)\n    return O"], [0.36851851851851847, "def solve_de07a748(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, T)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.36851851851851847, "def solve_0659cd0f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, T)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.37559912854030497, "def solve_f6ee4ce0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, dmirror)\n    x3 = extract(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.37559912854030497, "def solve_db8668a3(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = rbind(subgrid, I)\n    x4 = apply(x3, x2)\n    x5 = apply(vmirror, x4)\n    x6 = papply(equality, x4, x5)\n    x7 = pair(x4, x6)\n    x8 = extract(x7, last)\n    O = first(x8)\n    return O"], [0.3931917211328976, "def solve_beaffc71(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3985185185185185, "def solve_4c981481(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = merge(x1)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = shape(I)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = hconcat(x5, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = rbind(other, x3)\n    x11 = compose(x10, palette)\n    x12 = fork(astuple, x11, ulcorner)\n    x13 = apply(x12, x9)\n    x14 = merge(x9)\n    x15 = fill(I, x3, x14)\n    x16 = paint(x15, x13)\n    O = compress(x16)\n    return O"], [0.4, "def solve_9dad0c1d(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.40763616557734206, "def solve_e4be7c13(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_4d0157d7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41333791996330693, "def solve_83a97981(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_c2a05fc7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_179aa94e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_8c4e2aa0(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_09adf43f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_e90a1155(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41333791996330693, "def solve_d0587476(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.4148148148148148, "def solve_301472f4(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_fee185a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_435a062d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.4148148148148148, "def solve_866e2ca9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = lbind(shift, x6)\n    x11 = occurrences(I, x6)\n    x12 = mapply(x10, x11)\n    O = paint(x5, x12)\n    return O"], [0.4148148148148148, "def solve_739a8ff6(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.42592592592592593, "def solve_477fa8a6(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_540d981c(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_4ed2380f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_7f58db42(I):\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_e723a25c(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_01cbd1a3(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.42592592592592593, "def solve_d7ba2833(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4296296296296296, "def solve_4836f9cd(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_5d0f70c0(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.4296296296296296, "def solve_b1b29220(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_7d503583(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.4296296296296296, "def solve_c60e9562(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.4296296296296296, "def solve_db215094(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(extract, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = totuple(x1)\n    x7 = apply(x5, x6)\n    x8 = mostcommon(x7)\n    x9 = canvas(x8, UNITY)\n    x10 = matcher(x5, x8)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x1, x11)\n    O = fill(x9, TWO, x12)\n    return O"], [0.4296296296296296, "def solve_a3b82b30(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_aeb609c6(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_8699cf09(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.43504273504273505, "def solve_cbfcc863(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.43504273504273505, "def solve_0bfcd272(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = hconcat(x3, x3)\n    x5 = hconcat(x4, x3)\n    x6 = vconcat(x5, x5)\n    x7 = vconcat(x6, x5)\n    O = cellwise(x4, x7, ZERO)\n    return O"], [0.4715975529100529, "def solve_ef27b99d(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_f348befa(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_394b73ba(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_e56ef1d1(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_4f7c0152(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_111bbe6c(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_f639098b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_51c2c37b(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.4715975529100529, "def solve_e95d9ab0(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5013227513227514, "def solve_cf4821db(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_3487b656(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_b9fb678d(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5013227513227514, "def solve_3725fbdd(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5495485154576063, "def solve_16ec8ee2(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = mostcolor(I)\n    x5 = canvas(x4, x3)\n    x6 = shoot(ORIGIN, UNITY)\n    x7 = leastcolor(I)\n    O = fill(x5, x7, x6)\n    return O"], [0.5722260195944406, "def solve_f9970b47(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_c0ab9fa3(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_ed2ffaae(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_f434a4da(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_ace243c3(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5722260195944406, "def solve_8fd8a13b(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.5831018518518518, "def solve_dd585431(I):\n    x1 = width(I)\n    x2 = astuple(ONE, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x1)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [0.5900055192264699, "def solve_9b3031ee(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5936739417989418, "def solve_04e82438(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.5936739417989418, "def solve_413a62ff(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.5936739417989418, "def solve_f4d52316(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.5982804232804233, "def solve_bca208fb(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5982804232804233, "def solve_dc0107fe(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.6199160165858457, "def solve_cf0b7fbb(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6249629629629629, "def solve_5d62711e(I):\n    x1 = objects(I, F, F, T)\n    x2 = order(x1,numcolors)\n    x3 = astuple(ONE, FIVE)\n    x4 = rbind(canvas, x3)\n    x5 = apply(x4, x2)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6428952122854562, "def solve_b29149fc(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6428952122854562, "def solve_a7e2f5e8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6428952122854562, "def solve_3773a819(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6600575299564271, "def solve_ed3f2029(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.660134929337232, "def solve_3d9199b7(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.6645751998060916, "def solve_d2284d26(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_aca18b45(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_00a46c66(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_31d46aa5(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_1a2c65a6(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.6645751998060916, "def solve_98a5f7a5(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.674180469289165, "def solve_e69f3abc(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.7049042145593869, "def solve_ecce4e29(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = size(x1)\n    x5 = positive(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = palette(x8)\n    x11 = palette(x9)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = shape(x8)\n    x15 = canvas(x13, x14)\n    x16 = ofcolor(x8, x13)\n    x17 = ofcolor(x9, x13)\n    x18 = combine(x16, x17)\n    O = fill(x15, ZERO, x18)\n    return O"], [0.7065603378103378, "def solve_b28c2ddb(I):\n    x1 = leastcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7085292022792022, "def solve_5a810d95(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.7088151265460183, "def solve_31bd7b50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = first(x2)\n    x4 = neighbors(x3)\n    x5 = mostcolor(I)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = initset(x3)\n    x9 = fill(x7, x1, x8)\n    O = fill(x9, TWO, x4)\n    return O"], [0.709133597883598, "def solve_a80dd746(I):\n    x1 = leastcolor(I)\n    x2 = fgpartition(I)\n    x3 = merge(x2)\n    x4 = fill(I, x1, x3)\n    x5 = merge(x2)\n    x6 = fill(x4, TWO, x5)\n    x7 = urcorner(x3)\n    x8 = ulcorner(x3)\n    x9 = shoot(x7, UNITY)\n    x10 = shoot(x8, NEG_UNITY)\n    x11 = fill(x6, TWO, x9)\n    O = fill(x11, ONE, x10)\n    return O"], [0.709172269403161, "def solve_cb6b630a(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_5700b639(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_51d64936(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_2a94d582(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7117372649464244, "def solve_74a1bcd5(I):\n    x1 = compress(I)\n    O = vmirror(x1)\n    return O"], [0.7130931327125136, "def solve_85e41512(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7167554635380722, "def solve_855e0873(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7208389360698277, "def solve_97ef0a2a(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7208389360698277, "def solve_2649213f(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7208389360698277, "def solve_931ded78(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7208389360698277, "def solve_7173d338(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7241016188672439, "def solve_5d24f1cc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_200618b7(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_13e56846(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_9b64f63a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_7200da98(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_3ff0d9c1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_296c98c4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_b9465b9f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_4d3889b1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_82efdbaa(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_e25248d1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_2d494462(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_841a0ea1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_22a4e815(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_a6d7f51c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7267267267267268, "def solve_8edbb5f0(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, height)\n    x3 = valmax(x1, height)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [0.7389341741650659, "def solve_a2210984(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = argmax(x1, x2)\n    x4 = valmin(x1, x2)\n    x5 = sizefilter(x1, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.7389341741650659, "def solve_52bfc8c6(I):\n    x1 = objects(I, F, T, T)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = other(x1, x4)\n    x6 = gravitate(x5, x4)\n    O = move(I, x5, x6)\n    return O"], [0.7400296972330871, "def solve_8d72295e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.741832732082732, "def solve_10e3d468(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.7424669312169312, "def solve_c29e716a(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = compose(first, dmirror)\n    x5 = chain(size, dedupe, x4)\n    x6 = rbind(rapply, I)\n    x7 = compose(first, x6)\n    x8 = chain(x5, x7, initset)\n    x9 = argmax(x3, x8)\n    x10 = x9(I)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = ofcolor(x10, ZERO)\n    x14 = astuple(x11, ONE)\n    x15 = crop(x10, ORIGIN, x14)\n    x16 = hupscale(x15, x12)\n    x17 = fill(x16, ZERO, x13)\n    O = x9(x17)\n    return O"], [0.7429792330488345, "def solve_5c662060(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, ulcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [0.7433389360698277, "def solve_6f55c284(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(bordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [0.7433389360698277, "def solve_b2fed4cb(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.7433389360698277, "def solve_c5ecbff0(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.7436574074074074, "def solve_9cae4216(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [0.7436960789269706, "def solve_eadf4bf2(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_7bd3d04a(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_5173ea56(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7436960789269706, "def solve_18199252(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.7436960789269706, "def solve_895432e6(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.7436960789269706, "def solve_b64779cc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_3a754b7e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_570f9e6e(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, THREE, x6)\n    return O"], [0.7436960789269706, "def solve_f7b75c8d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_4a36e1b8(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, T, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.7436960789269706, "def solve_6b6c2a25(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.7436960789269706, "def solve_643ccf76(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.7436960789269706, "def solve_4ec91390(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x44 = mostcolor(I)\n    O = fill(I, x44, x3)\n    return O"], [0.7436960789269706, "def solve_4b36483c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_2dad55da(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_d6dda612(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [0.7436960789269706, "def solve_ba46ba80(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7436960789269706, "def solve_d2a8f4b4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_9fc380e0(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = apply(toindices, x2)\n    x4 = fork(either, vline, hline)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, EIGHT, x8)\n    return O"], [0.7436960789269706, "def solve_d7d6047e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = matcher(first, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, x3, x9)\n    return O"], [0.7436960789269706, "def solve_3839e766(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_dfbb897e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_1221692c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_2501f05d(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.7436960789269706, "def solve_3245f9c3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_ffe6729d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.7436960789269706, "def solve_4fdfe288(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7436960789269706, "def solve_162bf2f0(I):\n    x1 = ofcolor(I, TWO)\n    x2 = prapply(connect, x1, x1)\n    x3 = rbind(greater, ONE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(either, vline, hline)\n    x7 = mfilter(x5, x6)\n    x8 = fill(I, THREE, x7)\n    O = fill(x8, TWO, x1)\n    return O"], [0.7436960789269706, "def solve_511ddf3b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.7436960789269706, "def solve_9e8360e0(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, partition)\n    x4 = fork(sfilter, toindices, x3)\n    x5 = compose(normalize, x4)\n    x6 = lbind(recolor, FIVE)\n    x7 = compose(x6, x5)\n    x8 = fork(combine, x5, x7)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [0.7436960789269706, "def solve_4475173d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_36186d23(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_d57415ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7436960789269706, "def solve_e7590794(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_0d37f1fd(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.7436960789269706, "def solve_56e8d1a9(I):\n    x1 = fgpartition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    O = paint(I, x4)\n    return O"], [0.7436960789269706, "def solve_6d049ea2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7436960789269706, "def solve_2d0ec9f7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.7436960789269706, "def solve_029cac68(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.7436960789269706, "def solve_d9bf4c99(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.7436960789269706, "def solve_3293aad6(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x2, x5)\n    O = subgrid(x6, I)\n    return O"], [0.7436960789269706, "def solve_19eb7b27(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_820bf5cc(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.7436960789269706, "def solve_84d04bbf(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, astuple)\n    x3 = lbind(colorfilter, x1)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = lbind(sfilter, x1)\n    x7 = lbind(matcher, x5)\n    x8 = compose(x6, x7)\n    x9 = fork(intersection, x8, size)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, FOUR)\n    x12 = lbind(sfilter, x1)\n    x13 = lbind(matcher, x5)\n    x14 = compose(x12, x13)\n    x15 = fork(intersection, x8, x14)\n    x16 = fork(recolor, color, x15)\n    x17 = mapply(x16, x1)\n    O = paint(I, x17)\n    return O"], [0.7436960789269706, "def solve_024b0bb0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7459101546601546, "def solve_cc2ac93d(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7472675074983992, "def solve_beeeaba7(I):\n    x1 = objects(I, T, F, F)\n    x2 = index(I, ORIGIN)\n    x3 = colorfilter(x1, x2)\n    x4 = fork(equality, toindices, backdrop)\n    x5 = sfilter(x3, x4)\n    x6 = lbind(mapply, dneighbors)\n    x7 = chain(x6, corners, outbox)\n    x8 = fork(difference, x7, outbox)\n    x9 = leastcolor(I)\n    x10 = ofcolor(I, x9)\n    x11 = rbind(intersection, x10)\n    x12 = matcher(size, ZERO)\n    x13 = chain(x12, x11, x8)\n    x14 = mfilter(x5, x13)\n    O = fill(I, FOUR, x14)\n    return O"], [0.7472675074983992, "def solve_c344360b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_9e3761fa(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.7475859788359789, "def solve_9ced2687(I):\n    x1 = objects(I, T, F, F)\n    x2 = index(I, ORIGIN)\n    x3 = colorfilter(x1, x2)\n    x4 = apply(toindices, x3)\n    x5 = rbind(bordering, I)\n    x6 = compose(flip, x5)\n    x7 = extract(x4, x6)\n    x8 = remove(x7, x4)\n    x9 = lbind(vmatching, x7)\n    x10 = lbind(hmatching, x7)\n    x11 = sfilter(x8, x9)\n    x12 = sfilter(x8, x10)\n    x13 = argmin(x11, uppermost)\n    x14 = argmax(x11, uppermost)\n    x15 = argmin(x12, leftmost)\n    x16 = argmax(x12, leftmost)\n    x17 = fill(I, SIX, x7)\n    x18 = fill(x17, TWO, x13)\n    x19 = fill(x18, ONE, x14)\n    x20 = fill(x19, FOUR, x15)\n    O = fill(x20, THREE, x16)\n    return O"], [0.7482270044770045, "def solve_968b7369(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_2a483a04(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_6e6d7c07(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_7f719f83(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_35f1c0ea(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_55885a59(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_52325dac(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_25ee2bdc(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_87552f35(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7482270044770045, "def solve_25505156(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7504817932126848, "def solve_bd21fd8f(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [0.7504817932126848, "def solve_7d764810(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = merge(x6)\n    x9 = fill(I, x7, x8)\n    x10 = compose(hfrontier, center)\n    x11 = compose(vfrontier, center)\n    x12 = fork(combine, x10, x11)\n    x13 = fork(intersection, x12, backdrop)\n    x14 = mapply(x13, x6)\n    O = fill(x9, TWO, x14)\n    return O"], [0.7508389360698278, "def solve_65895700(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [0.7532198884507801, "def solve_d9692686(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_e4964923(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.7532198884507801, "def solve_e48ebe99(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.7579817932126849, "def solve_95fd47c9(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7615532217841134, "def solve_e8902bdf(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7615532217841134, "def solve_aa0f0412(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7615532217841134, "def solve_084ccd44(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7615532217841134, "def solve_c74e393f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_f88ccb68(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7615532217841134, "def solve_f300ffd6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7615532217841134, "def solve_e04cd11e(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7707743846330803, "def solve_c7113ceb(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7707743846330803, "def solve_0c26cd78(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7722675074983991, "def solve_ba0a744b(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7722675074983991, "def solve_d7289ac1(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7722675074983991, "def solve_a50908e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.7724299455488776, "def solve_b830744d(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, F)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = chain(positive, decrement, size)\n    x6 = colorfilter(x2, x1)\n    x7 = fork(both, x4, x5)\n    x8 = sfilter(x6, x7)\n    x9 = merge(x8)\n    x10 = ofcolor(I, x1)\n    x11 = fill(I, FOUR, x10)\n    O = fill(x11,11, x9)\n    return O"], [0.7725859788359788, "def solve_058ce17c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_df9b8e82(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_e1a4f256(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_f69f4ad6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_ac6d4582(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.8732328974604937, "def solve_eb8f6880(I):\n    x1 = compose(dmirror, dedupe)\n    x2 = x1(I)\n    x3 = x1(x2)\n    x4 = fork(remove, last, identity)\n    x5 = compose(hmirror, x4)\n    x6 = fork(vconcat, identity, x5)\n    x7 = x6(x3)\n    x8 = dmirror(x7)\n    O = x6(x8)\n    return O"], [1.0, "def solve_6bb9e6fa(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = rbind(add, UNITY)\n    x4 = chain(x2, initset, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_cccf0685(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(adjacent, x2)\n    x4 = extract(x2, x3)\n    x5 = color(x4)\n    x6 = rbind(contained, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x1, x7)\n    x9 = totuple(x8)\n    x10 = sfilter(x1, first)\n    x11 = apply(first, x10)\n    x12 = size(x11)\n    x13 = dedupe(x11)\n    x14 = size(x13)\n    x15 = equality(x12, x14)\n    x16 = compose(size, first)\n    x17 = totuple(x11)\n    x18 = sfilter(x17, x16)\n    x19 = fill(I, x5, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply( color, x20)\n    x22 = vmirror(x21)\n    x23 = argmin(x22, x5)\n    O = fill(x19, x5, x23)\n    return O"], [1.0, "def solve_77e2e26e(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(connect, x12, x9)\n    x14 = fork(recolor, color, x13)\n    x15 = mapply(x14, x10)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_f267eb3c(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    O = crop(x9, decrement, x1)\n    return O"], [1.0, "def solve_e18c0433(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_e2a31652(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(ONE, THREE)\n    x4 = astuple(FIVE, ONE)\n    x5 = astuple(TWO, SIX)\n    x6 = initset(x3)\n    x7 = insert(x4, x6)\n    x8 = insert(x5, x7)\n    x9 = rbind(contained, x8)\n    x10 = lbind(index, I)\n    x11 = compose(x4, x9)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(compose, x12)\n    x14 = chain(x9, x13, x11)\n    x15 = height(x2)\n    x16 = lbind(multiply, x15)\n    x17 = chain(x14, x16, x11)\n    x18 = compose(x4, x17)\n    x19 = lbind(shift, x2)\n    x20 = fork(recolor, color, x18)\n    x21 = mapply(x20, x2)\n    x22 = paint(I, x21)\n    O = downpaint(x22, x2)\n    return O"], [1.0, "def solve_5dc371c9(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, TWO)\n    x3 = lbind(contained, TWO)\n    x4 = chain(flip, x3, palette)\n    x5 = mfilter(x2, x4)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = asobject(x8)\n    x11 = asobject(x9)\n    x12 = vperiod(x10)\n    x13 = hperiod(x11)\n    x14 = neighbors(ORIGIN)\n    x15 = mapply(neighbors, x14)\n    x16 = astuple(x12, x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x5)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = subgrid(x5, x21)\n    return O"], [1.0, "def solve_f22db609(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = palette(x3)\n    x5 = other(x4, ZERO)\n    x6 = colorcount(I, x5)\n    x7 = neighbors(ORIGIN)\n    x8 = insert(x6, x7)\n    x9 = order(x8, identity)\n    x10 = last(x9)\n    x11 = remove(x10, x9)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = divide(x6, x13)\n    x15 = astuple(x14, x14)\n    x16 = canvas(x15, x12)\n    x17 = interval(ONE, FIVE, ONE)\n    x18 = invert(x16)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x17)\n    x21 = lbind(shift, x10)\n    x22 = mapply(x21, x20)\n    O = fill(x16, ONE, x22)\n    return O"], [1.0, "def solve_afca9e99(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_9332468d(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(positive, size)\n    x3 = lbind(intersection, x2)\n    x4 = chain(x2, x3, dneighbors)\n    x5 = compose(positive, size)\n    x6 = lbind(intersection, x1)\n    x7 = chain(x5, x6, toindices)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = sfilter(x1, x9)\n    x11 = compose(size, x10)\n    x12 = matcher(x11, ONE)\n    x13 = sfilter(x51, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = lbind(placeobject, I)\n    x19 = chain(d13, x17, x18)\n    x20 = rbind(colorcount, x15)\n    x21 = valmax(x20, x19)\n    x22 = matcher(x19, x21)\n    x23 = fork(both, x21, x22)\n    x24 = mfilter(x10, x23)\n    O = fill(I, x15, x24)\n    return O"], [1.0, "def solve_9dbda547(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, rightmost)\n    x15 = extract(x13, leftmost)\n    x16 = subgrid(x14, I)\n    x17 = extract(x16, x15)\n    x18 = subgrid(x17, I)\n    x19 = hmirror(x18)\n    x20 = vmirror(x18)\n    x21 = fgpartition(x17)\n    x22 = merge(x21)\n    x23 = subgrid(x22, x18)\n    x24 = asobject(x23)\n    x25 = shape(x24)\n    x26 = shift(x24, x25)\n    O = paint(I, x26)\n    return O"], [1.0, "def solve_662a416c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmost(x1)\n    x4 = color(x3)\n    x5 = difference(x1, x2)\n    x6 = colorfilter(x5, x4)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = sfilter(x6, x8)\n    x10 = increment(x3)\n    x11 = rbind(add, x10)\n    x12 = compose(x11, last)\n    x13 = fork(subtract, first, x12)\n    x14 = fork(shoot, x4, x13)\n    x15 = mapply(x14, x9)\n    O = fill(I, x4, x15)\n    return O"], [1.0, "def solve_129203cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NEG_TWO, NEG_TWO)\n    x4 = papply(shift, x2, x3)\n    x5 = rbind(shoot, UP)\n    x6 = mapply(x5, x4)\n    x7 = fill(I, FOUR, x6)\n    x8 = mapply(x5, x1)\n    O = fill(x7, NEG_ONE, x8)\n    return O"], [1.0, "def solve_7baff803(I):\n    x1 = toindices(x1)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, identity, dmirror)\n    x23 = x22(x6)\n    x24 = x22(x13)\n    x25 = x22(x24)\n    x26 = x22(x25)\n    x27 = lefthalf(x23)\n    x28 = righthalf(x24)\n    x29 = righthalf(x28)\n    x30 = ofcolor(x27, x18)\n    x31 = subgrid(x30, hmirror)\n    x32 = ofcolor(x27, x18)\n    x33 = center(x31)\n    x34 = hmirror(x32)\n    x35 = objects(x27, T, T, T)\n    x36 = vmirror(x25)\n    x37 = shift(x36, x33)\n    x38 = paint(x31, x37)\n    O = paint(x38, x6)\n    return O"], [1.0, "def solve_02c888e8(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_8dff5d40(I):\n    x1 = objects(I, T, T, T)\n    x2 = rbind(valmax, TWO)\n    x3 = lbind(normalize, x1)\n    x4 = chain(x2, x3, color)\n    x5 = mostcolor(I)\n    x6 = ofcolor(I, x5)\n    x7 = lbind(recolor, EIGHT)\n    x8 = rbind(ofcolor, x5)\n    x9 = chain(x7, x8, shape)\n    x10 = fork(paint, identity, x9)\n    x11 = height(x10)\n    x12 = vsplit(x10, x11)\n    x13 = mapply(x12, xmost)\n    x14 = ofcolor(x13, EIGHT)\n    x15 = box(x14)\n    x16 = difference(x15, x14)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_f575546e(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = apply(subtract, x1)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, ONE, x5)\n    x7 = compose(halve, width)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, x7)\n    x10 = matcher(x7, THREE)\n    x11 = power(outbox, TWO)\n    x12 = power(outbox, THREE)\n    x13 = mapply(outbox, x3)\n    x14 = sfilter(x3, x9)\n    x15 = sfilter(x3, x10)\n    x16 = mapply(x11, x14)\n    x17 = mapply(x12, x15)\n    x18 = fill(x6, THREE, x13)\n    x19 = fill(x18, THREE, x16)\n    O = fill(x19, THREE, x17)\n    return O"], [1.0, "def solve_6ca10c50(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_a56340a8(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = other(x1, x4)\n    x6 = color(x5)\n    x7 = toindices(x5)\n    x8 = outbox(x4)\n    x9 = lbind(argmin, x8)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x9, x11, x10)\n    x13 = compose(x12, initset)\n    x14 = apply(x13, x7)\n    x15 = cover(I, x5)\n    O = fill(x15, x6, x14)\n    return O"], [1.0, "def solve_26b6110a(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, last)\n    x12 = sfilter(x1, x11)\n    x13 = normalize(x12)\n    x14 = colorfilter(x1, x4)\n    x15 = argmin(x14, x13)\n    x16 = remove(x6, x14)\n    x17 = rbind(adjacent, x15)\n    x18 = fork(both, x17, x13)\n    x19 = sfilter(x16, x18)\n    x20 = paint(I, x19)\n    x21 = ofcolor(x20, x4)\n    x22 = objects(x20, T, F, T)\n    x23 = colorfilter(x22, x4)\n    x24 = rbind(adjacent, x515)\n    x25 = fork(both, x24, x12)\n    x26 = sfilter(x23, x25)\n    x27 = fork(recolor, color, x12)\n    x28 = mapply(x27, x26)\n    O = paint(x20, x28)\n    return O"], [1.0, "def solve_fdc7ceed(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x6, outbox)\n    x8 = fork(combine, x7, outbox)\n    x9 = apply(x8, x5)\n    x10 = minimum(x9)\n    x11 = ofcolor(I, x4)\n    x12 = lrcorner(x11)\n    x13 = invert(x12)\n    x14 = shift(x11, x13)\n    x15 = urcorner(x14)\n    x16 = shoot(x12, UNITY)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = shoot(x17, NEG_UNITY)\n    x20 = combine(x16, x17)\n    x21 = combine(x18, x19)\n    x22 = combine(x20, x21)\n    x23 = mapply(x22, x29)\n    O = fill(I,4, x23)\n    return O"], [1.0, "def solve_2607ca25(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_eda9019a(I):\n    x1 = interviewerrcorner(I)\n    x2 = neighbors(ORIGIN)\n    x3 = insert(DOWN, x2)\n    x4 = apply(first, x3)\n    x5 = astuple(ONE, THREE)\n    x6 = astuple(FOUR, ZERO)\n    x7 = astuple(tojvec, x6)\n    x8 = initset(x7)\n    x9 = insert(x5, x8)\n    x10 = insert(x4, x9)\n    x11 = apply(tojvec, x10)\n    x12 = astuple(ONE, THREE)\n    x13 = palette(I)\n    x14 = crop(I, x12, x13)\n    x15 = hsplit(x14, TWO)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = vmirror(x17)\n    x19 = hconcat(x16, x18)\n    x20 = hsplit(x19, TWO)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = vmirror(x22)\n    x24 = hconcat(x21, x23)\n    x25 = hsplit(x24, TWO)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = vmirror(x27)\n    x29 = hconcat(x26, x28)\n    x30 = hsplit(x29, TWO)\n    x31 = vmirror(x30)\n    x32 = hconcat(x29, x31)\n    x33 = hsplit(x32, TWO)\n    O = partition(x33)\n    return O"], [1.0, "def solve_92bbbb27(I):\n    x1 = objects(I, F, T, T)\n    x2 = order(x1, TWO)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_b106e6c7(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_0b4430b6(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = lbind(sfilter, x6)\n    x10 = lbind(matcher, color)\n    x11 = compose(x9, x10)\n    x12 = chain(size, x9, x11)\n    x13 = argmin(x7, x12)\n    x14 = repeat(x13, ONE)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = apply(double, x16)\n    x18 = apply(increment, x17)\n    x19 = lbind(apply, toivec)\n    x20 = lbind(shift, x6)\n    x21 = mapply(x19, x21)\n    O = paint(x5, x21)\n    return O"], [1.0, "def solve_31751520(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = lbind(shift, x2)\n    x4 = mapply(x3, x1)\n    x5 = fill(I, EIGHT, x4)\n    x6 = switch(x5, ONE, TWO)\n    O = replace(x6, EIGHT, ZERO)\n    return O"], [1.0, "def solve_453aa966(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x38, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_209f823e(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_e2e68de4(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = astuple(THREE, ONE)\n    x4 = decrement(x2)\n    x5 = astuple(TWO, x4)\n    x6 = crop(x1, ORIGIN, x5)\n    x7 = crop(x1, TWO_BY_ZERO, x5)\n    x8 = crop(x1, TWO_BY_TWO, x5)\n    x9 = vmirror(x6)\n    x10 = vconcat(x9, x8)\n    O = vconcat(x10, x9)\n    return O"], [1.0, "def solve_5ea692c1(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = fork(subtract, identity, x6)\n    x8 = fork(insert, identity, x7)\n    x9 = fork(insert, x3, x8)\n    x10 = compose(backdrop, x9)\n    x11 = mapply(x10, x4)\n    x12 = fill(x4, x3, x11)\n    x13 = mapply(x9, x1)\n    O = fill(x12, x3, x13)\n    return O"], [1.0, "def solve_1da83400(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(colorcount, x1)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = ZERO(x1)\n    x7 = toobject(x6, I)\n    x8 = mostcolor(x7)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(adjacent, x4)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = positive(x12)\n    x14 = branch(x13, subgrid, I)\n    x15 = branch(x13, uppermost, leftmost)\n    x16 = order(x11, x15)\n    x17 = numcolors(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, bottom, uppermost)\n    x20 = x19(x4)\n    x21 = x19(x7)\n    x22 = x19(x8)\n    x23 = x20(x21)\n    x24 = ulcorner(x4)\n    x25 = llcorner(x7)\n    x26 = urcorner(x7)\n    x27 = shoot(x26, UNITY)\n    x28 = shoot(x25, DOWN_LEFT)\n    x29 = combine(x27, x28)\n    x30 = intersection(x22, x29)\n    O = fill(I, x10, x30)\n    return O"], [1.0, "def solve_c869cf73(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = neighbors(x8)\n    x10 = lbind(mapply, x9)\n    x11 = rbind(occurrences, x7)\n    x12 = compose(x10, x11)\n    x13 = lbind(Lbind, shift)\n    x14 = rbind(occurrences, x7)\n    x15 =Introduced(x14)\n    x16 = lbind(x12, x15)\n    x17 = chain(x13, x16, delta)\n    x18 = rbind(ofcolor, x6)\n    x19 = fork(recolor, color, x18)\n    x20 = mapply(x19, x15)\n    O = paint(x7, x20)\n    return O"], [1.0, "def solve_f7859d46(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_ad621c40(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = ONE(x2)\n    x4 = halve(x3)\n    x5 = dneighbors(x4)\n    x6 = insert(x4, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [1.0, "def solve_1ba12fe3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 =ize(I)\n    x13 =canvas(x8, x12)\n    x14 = colorfilter(x13, x4)\n    x15 = difference(x1, x14)\n    x16 = toobject(x15, I)\n    x17 = mostcolor(x16)\n    x18 = ulcorner(x14)\n    x19 = shoot(x18, UNITY)\n    x20 = rbind(shoot, NEG_UNITY)\n    x21 = lrcorner(x14)\n    x22 = shoot(x21, UNITY)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = llcorner(x14)\n    x25 = shoot(x24, UP_RIGHT)\n    x26 = combine(x19, x25)\n    x27 = rbind(shoot, DOWN_LEFT)\n    x28 = rbind(shoot, DOWN_LEFT)\n    x29 = combine(x27, x28)\n    x30 = mapply(dneighbors, x27)\n    x31 = mapply(ineighbors, x27)\n    x32 = combine(x30, x31)\n    x33 = fill(x11, x4, x32)\n    O = fill(x33, x8, x3)\n    return O"], [1.0, "def solve_efe390f6(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, leastcolor, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_cbf3d9f2(I):\n    x1 = objects(I, T, T, T)\n    x2 = ofcolor(I, TWO)\n    x3 = vmirror(x2)\n    x4 = equality(x2, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(x1)\n    x7 = multiply(x6, THREE)\n    x8 = tojvec(x7)\n    x9 = x5(x6)\n    x10 = shift(x9, x8)\n    x11 = fill(I, SEVEN, x10)\n    x12 = lbind(shift, x5)\n    x13 = apply(x12, x11)\n    x14 = merge(x13)\n    O = paint(x11, x14)\n    return O"], [1.0, "def solve_5782bdc7(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(max, x1)\n    x3 = apply(min, x1)\n    x4 = merge(x2)\n    x5 = fill(I,444, x4)\n    x6 = recolor(ONE, x2)\n    x7 = paint(x5, x6)\n    O = replace(x7, ONE, TWO)\n    return O"], [1.0, "def solve_776b3d22(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_1ee20db4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(x10, I)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(x13)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(x13, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x23, x32)\n    return O"], [1.0, "def solve_cf8999ab(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = width(x7)\n    x13 = matcher(x11, x12)\n    x14 = height(x7)\n    x15 = subtract(x14, x12)\n    x16 = trim(x7)\n    x17 = invert(x16)\n    x18 = shift(x16, x17)\n    x19 = objects(x6, T, T, T)\n    x20 = colorfilter(x19, x4)\n    x21 = difference(x19, x20)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x18)\n    x24 = shift(x23, UNITY)\n    x25 = combine(x20, x24)\n    x26 = mapply(x5, x25)\n    O = fill(x7, x6, x26)\n    return O"], [1.0, "def solve_23fab4cc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_619e1053(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_281a3b59(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x3)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x3)\n    x25 = palette(x23)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x16)\n    x28 = ofcolor(x13, x27)\n    x29 = ofcolor(x23, x27)\n    x30 = rapply(neighbors, x28)\n    x31 = remove(x30, x28)\n    x32 = other(x31, x22)\n    x33 = x12(x32)\n    x34 = ofcolor(x13, x27)\n    x35 = color(x3)\n    x36 = center(x34)\n    x37 = ofcolor(x13, x27)\n    x38 = center(x37)\n    x39 = contained(x16, x38)\n    x40 = shift(x31, x39)\n    O = fill(x77, x27, x40)\n    return O"], [1.0, "def solve_9a4619c5(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x1)\n    x4 = compose(x3, toindices)\n    x5 = fork(extract, identity, x4)\n    x6 = compose(x5, DOWN)\n    x7 = compose(x5, size)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x6, x8)\n    x10 = fork(difference, x9, toindices)\n    x11 = mapply(x10, x5)\n    O = fill(I, FOUR, x11)\n    return O"], [1.0, "def solve_dad0424e(I):\n    x1 = compose(flip, dmirror)\n    x2 = dmirror(I)\n    x3 = connect(x1, x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = shape(x8)\n    x20 = canvas(x18, x19)\n    x21 = ofcolor(x7, x16)\n    x22 = ofcolor(x8, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [1.0, "def solve_7994305e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = color(I)\n    x9 = canvas(x8, UNITY)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x14)\n    x16 = increment(x15)\n    x17 = subgrid(x13, I)\n    x18 = interval(x16, x17, ONE)\n    x19 = lbind(shift, x14)\n    x20 = mapply(x19, x18)\n    x21 = ofcolor(x10, x7)\n    x22 = sizefilter(x21, x20)\n    x23 = mapply(x22, x21)\n    x24 = fill(x10, x3, x23)\n    x25 = ofcolor(x24, x7)\n    x26 = ulcorner(x14)\n    x27 = llcorner(x12)\n    x28 = shoot(x26, NEG_UNITY)\n    x29 = shoot(x27, UP_RIGHT)\n    x30 = shoot(x28, DOWN_LEFT)\n    x31 = combine(x29, x30)\n    x32 = fill(x24, x3, x31)\n    O = fill(x32, x7, x36)\n    return O"], [1.0, "def solve_657b5092(I):\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_7c99ac11(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, F)\n    x5 = sizefilter(x4, TWO)\n    x6 = apply(color, x5)\n    x7 = merge(x6)\n    O = fill(I, TWO, x7)\n    return O"], [1.0, "def solve_24f6a10d(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, double)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_b887d70b(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, TWO)\n    x5 = mfilter(x1, x4)\n    x6 = colorfilter(x1, TWO)\n    x7 = gravitate(x5, x6)\n    x8 = insert(x5, x6)\n    x9 = gravitate(x8, x7)\n    x10 = cellwise(x9, x8, x7)\n    x11 = replace(x10, ONE, SIX)\n    x12 = lbind(shift, x11)\n    x13 = occurrences(x11, x12)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.0, "def solve_779d004f(I):\n    x1 = lbind(split, I)\n    x2 = rbind(rapply, I)\n    x3 = compose(initset, x2)\n    x4 = fork(rapply, x3, x1)\n    x5 = compose(first, x4)\n    x6 = compose(last, x4)\n    x7 = fork(ofcolor, x5, x6)\n    x8 = fork(rapply, x7, identity)\n    x9 = compose(first, x8)\n    x10 = power(x9, TWO)\n    x11 = fork( both, x7, x10)\n    x12 = extract(x1, x11)\n    x13 = x12(I)\n    x14 = ofcolor(x13, x5)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = ofcolor(x16, x12)\n    x18 = shift(x17, UP_RIGHT)\n    x19 = paint(x16, x18)\n    x20 = ofcolor(x19, x12)\n    x21 = rbind(adjacent, x15)\n    x22 = chain(x21, initset, last)\n    x23 = fork(extract, x22, x22)\n    x24 = chain(first, x17, x23)\n    x25 = mapply(x24, x19)\n    x26 = fill(x16, x5, x25)\n    x27 = fill(x26, x12, x22)\n    O = replace(x27, x12, x25)\n    return O"], [1.0, "def solve_1437d45e(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = divide(x14, x11)\n    x16 = increment(x15)\n    x17 = width(x12)\n    x18 = divide(x17, x10)\n    x19 = increment(x18)\n    x20 = hupscale(x10, x16)\n    x21 = vupscale(x20, x12)\n    x22 = asobject(x21)\n    x23 = occurrences(I, x2)\n    x24 = lbind(shift, x2)\n    x25 = mapply(x24, x23)\n    x26 = occurrences(I, x2)\n    x27 = lbind(shift, x2)\n    x28 = mapply(x27, x26)\n    x29 = combine(x25, x28)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_eb10dd0a(I):\n    x1 = compose(flip, dmirror)\n    x2 = contained(ONE, x1)\n    x3 = power(x1, TWO)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = palette(x6)\n    x8 = objects(x4, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = lbind(colorfilter, x8)\n    x11 = compose(first, x10)\n    x12 = argmax(x9, x11)\n    x13 = remove(x12, x9)\n    x14 = lbind(hfrontier, x12)\n    x15 = lbind(mapply, x14)\n    x16 = lbind(ooting, x12)\n    x17 = chain(x15, x16, x15)\n    x18 = fork(recolor, color, x17)\n    x19 = mapply(x18, x13)\n    O = paint(x4, x19)\n    return O"], [1.0, "def solve_3ee373cb(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(size, dedupe, toindices)\n    x3 = matcher(x2, ONE)\n    x4 = fork(both, x3, x3)\n    x5 = sfilter(x1, x4)\n    x6 = argmax(x5, size)\n    x7 = color(x6)\n    x8 = toindices(x6)\n    x9 = fork(either, hline, vline)\n    x10 = prapply(connect, x8, x9)\n    x11 = sfilter(x10, x9)\n    x12 = combine(x6, x11)\n    x13 = mfilter(x12, corners)\n    x14 = difference(x12, x13)\n    x15 = colorfilter(x14, x7)\n    x16 = mapply(x12, x15)\n    x17 = paint(I, x16)\n    x18 = height(x6)\n    x19 = width(x6)\n    x20 = vsplit(x17, x19)\n    x21 = apply(hfrontier, x20)\n    x22 = toivec(x17)\n    x23 = shift(x21, x22)\n    x24 = ofcolor(x15, x7)\n    x25 = asindices(x15)\n    x26 = apply(urcorner, x25)\n    x27 = increment(x12)\n    x28 = rbind(add, x27)\n    x29 = tojvec(x17)\n    x30 = shift(x28, x29)\n    O = fill(x17, x7, x30)\n    return O"], [1.0, "def solve_e8653696(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(size, dedupe)\n    x4 = x3(x2)\n    x5 = rbind(repeat, x4)\n    x6 = chain(x5, merge, x5)\n    x7 = rbind(add, DOWN)\n    x8 = compose(x7, x6)\n    x9 = fork(equality, x4, x8)\n    x10 = sfilter(x1, x9)\n    O = compose(maximum, shape)\n    x13 = argmin(x10, x14)\n    x14 = mostcolor(I)\n    x15 = canvas(x14, x13)\n    x16 = paint(x15, x1)\n    O = paint(x16, x5)\n    return O"], [1.0, "def solve_173d68b2(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, llcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = compose(x6, x4)\n    x8 = lbind(recolor, ZERO)\n    x9 = compose(x8, x7)\n    x10 = fork(combine, x7, x9)\n    x11 = mapply(x10, x1)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_e16bf8ae(I):\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subgrid(x3, I)\n    x8 = backdrop(x3)\n    x9 = lbind(extract, x8)\n    x10 = lbind(matcher, first)\n    x11 = chain(x9, x10, last)\n    x12 = compose(x11, first)\n    x13 = fork(subtract, first, x12)\n    x14 = fork(multiply, height, width)\n    x15 = x13(x7)\n    x16 = matcher(x14, x15)\n    x17 = fork(both, x13, x16)\n    x18 = extract(x4, x17)\n    x19 = remove(x18, x4)\n    x20 = vmirror(x19)\n    x21 = subgrid(x20, I)\n    x22 = lbind(multiply, x17)\n    x23 = apply(x22, x21)\n    x24 = asindices(x23)\n    x25 = ofcolor(x23, x6)\n    x26 = difference(x24, x25)\n    x27 = subgrid(x23, x67)\n    x28 = asindices(x27)\n    x29 = corners(x28)\n    x30 = mapply(x29, x26)\n    x31 = subgrid(x30, x27)\n    x32 = ofcolor(x31, x6)\n    x33 = combine(x27, x31)\n    x34 = mapply(x33, x32)\n    O = fill(x31, x6, x34)\n    return O"], [1.0, "def solve_91af6439(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = last(x2)\n    x5 = remove(x4, x2)\n    x6 = repeat(x4, ONE)\n    x7 = combine(x6, x5)\n    x8 = mpapply(recolor, x7, x3)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_5e16fdee(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_fcd07c3f(I):\n    x1 = asindices(I)\n    x2 = apply(first, x1)\n    x3 = size(x2)\n    x4 = increment(x3)\n    x5 = difference(x1, x2)\n    x6 = increment(x5)\n    x7 = interval(ZERO, x6, apply)\n    x8 = lbind(shift, x1)\n    x9 = rbind(multiply, x4)\n    x10 = chain(x8, x9, last)\n    x11 = apply(x10, x7)\n    x12 = mapply(x5, x11)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_5a892be7(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = rbind(objects, F)\n    x8 = rbind(x7, F)\n    x9 = rbind(x8, T)\n    x10 = lbind(argmin, x75)\n    x11 = lbind(x10, x8)\n    x12 = lbind(x13, x5)\n    x13 = rbind(x11, x12)\n    x14 = lbind(argmin, x1)\n    x15 = lbind(rbind, x8)\n    x16 = lbind(compose, x9)\n    x17 = chain(x14, x15, x16)\n    x18 = compose(x17, x15)\n    x19 = fork(subtract, x18, size)\n    x20 = compose(x13, x19)\n    x21 = fork(subtract, x16, x20)\n    x22 = fork(multiply, x15, x21)\n    x23 = compose(x11, x22)\n    x24 = fork(remove, x23, x12)\n    x25 = compose(x23, x24)\n    x26 = fork(combine, x20, x25)\n    x27 = remove(x5, x1)\n    x28 = positive(x27)\n    x29 = branch(x28, x26, x25)\n    x30 = fork(recolor, x21, x29)\n    x31 = mapply(x30, x29)\n    O = paint(I, x31)\n    return O"], [1.0, "def solve_5aeb4dde(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = x32(89)\n    x34 = ofcolor(I, x6)\n    x35 = x33(x34)\n    x36 = shift(x35, x39)\n    O = fill(x10, x6, x36)\n    return O"], [1.0, "def solve_67795751(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = frontiers(I)\n    x6 = sfilter(x5, hline)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = x9(I)\n    x11 = objects(x10, T, F, T)\n    x12 = color(x11)\n    x13 = TWO(x12, x24)\n    x14 = lefthalf(x13)\n    x15 = vmirror(x14)\n    x16 = width(x11)\n    x17 = hsplit(x15, x16)\n    x18 = output(x17, x12)\n    x19 = objects(x18, T, F, T)\n    x20 = matcher(color, x12)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = merge(x22)\n    O = paint(x10, x23)\n    return O"], [1.0, "def solve_45062531(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = lbind(sfilter, x1)\n    x4 = rbind(compose, palette)\n    x5 = lbind(lbind, contained)\n    x6 = chain(x3, x4, x5)\n    x7 = compose(size, x6)\n    x8 = argmax(x2, x7)\n    x9 = rbind(colorcount, x8)\n    x10 = apply(x9, x1)\n    x11 = minimum(x10)\n    x12 = rbind(colorcount, x8)\n    x13 = matcher(x12, x11)\n    x14 = sfilter(x1, x13)\n    x15 = argmax(x14, size)\n    x16 = matcher(first, x8)\n    x17 = rbind(sfilter, x16)\n    x18 = lbind(upscale, x15)\n    x19 = chain(x18, width, x17)\n    x20 = compose(ulcorner, x17)\n    x21 = chain(ulcorner, x17, x19)\n    x22 = fork(subtract, x20, x21)\n    x23 = fork(shift, x19, x22)\n    x24 = rbind(other, x8)\n    x25 = compose(x24, palette)\n    x26 = compose(x17, x23)\n    x27 = fork(difference, x23, x26)\n    x28 = fork(recolor, x25, x27)\n    x29 = compose(x17, x23)\n    x30 = fork(combine, x29, x28)\n    x31 = remove(x15, x1)\n    x32 = mapply(x30, x31)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_3c0cab0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(matcher, size)\n    x3 = compose(x2, color)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = compose(initset, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = chain(backdrop, first, x18)\n    x20 = fork(recolor, color, x14)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, color, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_cf460752(I):\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = totuple(x2)\n    x4 = apply(color, x3)\n    x5 = mostcommon(x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(x5, x6)\n    x8 = fill(x7, ZERO, x3)\n    O = replace(x8, FIVE, ZERO)\n    return O"], [1.0, "def solve_1b224e2a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_0a0d93a6(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(subgrid, I)\n    x3 = chain(maximum, x2, partition)\n    x4 = apply(x3, x1)\n    x5 = fork(add, height, width)\n    x6 = compose(decrement, x5)\n    x7 = compose(x6, size)\n    x8 = rbind(repeat, x4)\n    x9 = compose(x8, x7)\n    O = fork(combine, x7, x9)\n    return O"], [1.0, "def solve_f7fb4a0b(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWNtLEFT, x12)\n    return O"], [1.0, "def solve_dbe8705e(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_8e58f19d(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_46f25649(I):\n    x1 = rot180(I)\n    x2 = crop(x1, ORIGIN, x1)\n    O = rot180(x2)\n    return O"], [1.0, "def solve_95fdd245(I):\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = box(x2)\n    x4 = difference(x3, x2)\n    x5 = fork(equality, identity, hmirror)\n    x6 = chain(x5, double, width)\n    x7 = switch(I, x6, EIGHT)\n    x8 = switch(x7, TWO, ZERO)\n    x9 = switch(x8, THREE, x4)\n    O = switch(x9, FOUR, ZERO)\n    return O"], [1.0, "def solve_4982f210(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = height(x1)\n    x4 = halve(x3)\n    x5 = interval(ZERO, x4, ONE)\n    x6 = width(x1)\n    x7 = halve(x6)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = width(x1)\n    x10 = halve(x9)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = combine(x5, x11)\n    x13 = repeat(x12, ONE)\n    x14 = combine(x13, x12)\n    x15 = apply(dedupe, x14)\n    x16 = mapply(d687, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [1.0, "def solve_6af7871b(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = argmax(x1, size)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = product(x2, x5)\n    x7 = fork(compose, color, backdrop)\n    x8 = apply(x7, x6)\n    x9 = matcher(color, ZERO)\n    x10 = sfilter(x8, x9)\n    x11 = lbind(colorfilter, x5)\n    x12 = compose(x11, color)\n    x13 = fork(sfilter, x12, recolor)\n    x14 = lbind(prapply, x5)\n    x15 = lbind(14, x13)\n    x16 = fork(apply, x15, x14)\n    x17 = fork(mapply, x12, x16)\n    x18 = fork(paint, x5, x17)\n    x19 = compose(x5, x18)\n    x20 = fork(remove, x19, first)\n    x21 = fork(astuple, x20, x19)\n    x22 = size(x10)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = pair(x23, x5)\n    x25 = fork(multiply, first, last)\n    x26 = apply(x21, x24)\n    x27 = interval(ZERO, x22, ONE)\n    x28 = pair(x27, x27)\n    x29 = mpapply(recolor, x28, x45)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_14748b69(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_fdfe1558(I):\n    x1 = trim(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = tophalf(x3)\n    x5 = bottomhalf(x2)\n    x6 = bottomhalf(x5)\n    x7 = astuple(x4, x6)\n    x8 = ofcolor(x8, ZERO)\n    x9 = ofcolor(x8, ONE)\n    x10 = combine(x8, x9)\n    x11 = cover(x3, x10)\n    x12 = tojvec(SIX)\n    O = fill(x11, ZERO, x12)\n    return O"], [1.0, "def solve_70a35328(I):\n    x1 = frontiers(I)\n    x2 = difference(x1, x2)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = sfilter(x2, x3)\n    x5 = argmin(x4, size)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = mostcolor(I)\n    x12 = shape(I)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(I, x13)\n    x15 = objects(x14, F, F, T)\n    x16 = argmax(x15, numcolors)\n    x17 = normalize(x16)\n    x18 = remove(x16, x1)\n    x19 = toindices(x18)\n    x20 = lbind(intersection, x19)\n    x21 = chain(size, x20, toindices)\n    x22 = argmax(x12, x21)\n    x23 = difference(x17, x22)\n    x24 = color(x23)\n    x25 = lbind(recolor, x24)\n    x26 = lbind(mapply, initset)\n    x27 = chain(x26, x25, x30)\n    x28 = objects(x14, T, F, T)\n    x29 = rbind(order, leftmost)\n    x30 = compose(last, last)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x1)\n    x33 = chain(x31, x32, x29)\n    x34 = fork( mapply, x33, x24)\n    x35 = fork(connect, first, x34)\n    x36 = mapply(x35, x24)\n    O = paint(x13, x36)\n    return O"], [1.0, "def solve_56cbf8e3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = paint(I, x7)\n    x9 = compress(x8)\n    x10 = identity(x9)\n    x11 = decrement(x10)\n    x12 = width(x9)\n    x13 = halve(x12)\n    x14 = tojvec(x13)\n    x15 = height(x9)\n    x16 = decrement(x15)\n    x17 = lbind(astuple, x16)\n    x18 = chain(x17, toivec, halve)\n    x19 = rbind(shoot, x14)\n    x20 = mapply(x19, x4)\n    x21 = fill(x8, FOUR, x20)\n    x22 = replace(x21, FIVE, ZERO)\n    x23 = ofcolor(x22, FIVE)\n    x24 = asindices(x22)\n    x25 = urcorner(x24)\n    x26 = toindices(x25)\n    x27 = rbind(shift, x26)\n    x28 = mapply(x27, x23)\n    x29 = fill(x22, FOUR, x28)\n    x30 = mapply(x29, x25)\n    x31 = fill(x29, FOUR, x30)\n    O = mapply(x31, x26)\n    return O"], [1.0, "def solve_12ab56c8(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, height)\n    x3 = mostcolor(I)\n    x4 = valmax(x1, height)\n    x5 = valmax(x1, width)\n    x6 = astuple(x4, x5)\n    x7 = mostcolor(I)\n    x8 = canvas(x7, x6)\n    x9 = asindices(x8)\n    x10 = matcher(first, x39)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = compose(toindices, normalize)\n    x16 = matcher(x15, x14)\n    x17 = mfilter(x1, x16)\n    O = fill(I, x3, x17)\n    return O"], [1.0, "def solve_86bb916a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_6e67b96f(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, UNITY)\n    x3 = sfilter(x1, x2)\n    x4 = matcher(height, ONE)\n    x5 = sfilter(x3, x4)\n    x6 = matcher(width, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = extract(x4, x7)\n    x9 = center(x8)\n    x10 =dneighbors(x9)\n    x11 = insert(x9, x10)\n    O = trim(x11)\n    return O"], [1.0, "def solve_c3643143(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = normalize(x6)\n    x8 = toindices(x7)\n    x9 = x8(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = sizefilter(x5, ONE)\n    x15 = apply(center, x14)\n    x16 = lbind(shift, x13)\n    x17 = mapply(x16, x15)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_e37c068f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(double, halve)\n    x4 = fork(equality, identity, x3)\n    x5 = compose(last, last)\n    x6 = chain( preciseighbors, x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = compose(x8, last)\n    x10 = argmin(x1, x9)\n    x11 = x10(x10)\n    x12 = toindices(x11)\n    x13 = x10(x12)\n    x14 = normalize(x11)\n    x15 = shift(x14, x13)\n    x16 = ulcorner(x15)\n    x17 = paint(I, x16)\n    x18 = toindices(x11)\n    x19 = remove(x18, x18)\n    x20 = lbind(shift, x19)\n    x21 = objects(x17, T, F, T)\n    x22 = compose(x20, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, xf)\n    O = paint(x17, x24)\n    return O"], [1.0, "def solve_bb61bc8d(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = rbind(colorcount, x4)\n    x14 = order(x12, x13)\n    x15 = apply(color, x14)\n    x16 = astuple(x11, x15)\n    x17 = hmirror(x16)\n    x18 = vmirror(x16)\n    x19 = objects(x18, T, T, T)\n    x20 = merge(x19)\n    x21 = rbind(colorcount, x4)\n    x22 = chain(x21, invert, x22)\n    x23 = hmirror(x12)\n    x24 = vmirror(x12)\n    x25 = objects(x23, T, T, T)\n    x26 = astuple(x24, x25)\n    x27 = shift(x15, x26)\n    x28 = paint(x10, x27)\n    x29 = normalize(x27)\n    x30 = shape(x28)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x29)\n    x33 = rbind(shift, x29)\n    x34 = mapply(x33, x32)\n    O = paint(x28, x34)\n    return O"], [1.0, "def solve_a80245cd(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_ab1f2b02(I):\n    x1 = compose(flip, dmirror)\n    x2 = astuple(NEG_TWO, NEG_TWO)\n    x3 = rbind(ofcolor, ZERO)\n    x4 = compose(lowermost, x3)\n    x5 = matcher(x4, ZERO)\n    x6 = compose(flip, x5)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = compose(lowermost, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x5, x6)\n    x11 = sfilter(x1, x10)\n    x12 = difference(x1, x11)\n    x13 = power(outbox, TWO)\n    x14 = fork(rapply, x13, x12)\n    x15 = compose(first, x14)\n    x16 = apply(x15, x12)\n    x17 = fork(combine, x12, x16)\n    x18 = mapply(x17, x6)\n    O = fill(I, ZERO, x18)\n    return O"], [1.0, "def solve_5c02b4b4(I):\n    x1 = doublecolors(I)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = rbind(equality, I)\n    x4 = rbind(pair, ZERO)\n    x5 = chain(x3, x4, last)\n    x6 = chain(x5, first, first)\n    x7 = astuple(TEN, TEN)\n    x8 = canvas(ZERO, x7)\n    x9 = pair(x4, x8)\n    x10 = power(x9, FOUR)\n    x11 = chain(first, last, first)\n    x12 = compose(decrement, x11)\n    x13 = power(x12, TWO)\n    x14 = astuple(x10, x13)\n    x15 = fork(astuple, x14, x6)\n    x16 = apply(x15, x9)\n    O = paint(x8, x16)\n    return O"], [1.0, "def solve_c3093c8c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_f54fd400(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = frontiers(I)\n    x6 = sfilter(x5, hline)\n    x7 = size(x6)\n    x8 = positive(x7)\n    x9 = branch(x8, dmirror, identity)\n    x10 = x9(I)\n    x11 = color(x3)\n    x12 = palette(I)\n    x13 = remove(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = chain(cmirror, vmirror, hmirror)\n    x19 = chain(first, x17, x18)\n    x20 = apply(x19, x179)\n    x21 = delta(x3)\n    x22 = apply(x19, x21)\n    x23 = fill(x10, x11, x22)\n    x24 = ofcolor(x23, x15)\n    x25 = subgrid(x24, x23)\n    x26 = ofcolor(x25, x15)\n    x27 = fill(x23, x11, x26)\n    x28 = ofcolor(x27, x15)\n    x29 = subgrid(x28, x27)\n    x30 = mapply(vfrontier, x28)\n    x31 = mapply(hfrontier, x28)\n    x32 = size(x30)\n    x33 = size(x31)\n    x34 = greater(x32, x33)\n    x35 = branch(x34, x22, x25)\n    O = fill(x35, x11, x20)\n    return O"], [1.0, "def solve_fcef4dc2(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_6527567c(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = width(I)\n    x6 = increment(x5)\n    x7 = outbox(x3)\n    x8 = center(x3)\n    x9 = lbind(contained, ZERO)\n    x10 = compose(x9, palette)\n    x11 = height(I)\n    x12 = decrement(x11)\n    x13 = lbind(multiply, x12)\n    x14 = height(I)\n    x15 = interval(x14, x4, ONE)\n    x16 = lbind(shift, x4)\n    x17 = height(I)\n    x18 = interval(x16, x4, ONE)\n    x19 = pair(x15, x18)\n    x20 = mapply(x17, x19)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_25711acc(I):\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, leastcolor)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(center, x4)\n    x6 = compose(dneighbors, x5)\n    x7 = fork(difference, x6, toindices)\n    x8 = compose(first, x7)\n    x9 = fork(subtract, x8, x5)\n    x10 = compose(invert, x9)\n    x11 = fork(shoot, x5, x10)\n    x12 = fork(intersection, toindices, x11)\n    x13 = chain(decrement, size, x12)\n    x14 = fork(shoot, x5, x9)\n    x15 = lbind(power, outbox)\n    x16 = compose(x15, x13)\n    x17 = chain(initset, x14, x16)\n    x18 = fork(rapply, x17, x14)\n    x19 = compose(first, x18)\n    x20 = fork(recolor, leastcolor, x19)\n    x21 = fork(difference, x19, x14)\n    x22 = fork(recolor, mostcolor, x21)\n    x23 = fork(combine, x20, x22)\n    x24 = mapply(x23, x1)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_45017c07(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = equality(x1, x2)\n    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x5 = branch(x3, x2, x4)\n    x6 = vconcat(I, x5)\n    O = replace(x6, ONE, TWO)\n    return O"], [1.0, "def solve_c59a67a1(I):\n    O = upscale(I, TWO)\n    return O"], [1.0, "def solve_4cbba0ed(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = compose(color, palette)\n    x4 = lbind(sfilter, x1)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_584763fd(I):\n    x1 = trim(I)\n    x2 = fork(equality, toindices, box)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = fork(multiply, height, width)\n    x7 = compose(x6, width)\n    x8 = extract(x5, x7)\n    x9 = height(x4)\n    x10 = trim(x8)\n    x11 = decrement(x9)\n    x12 = subtract(x11, x10)\n    x13 = crop(x6, x12, x2)\n    x14 = branch(x12, x13, x6)\n    x15 = x14(x4)\n    x16 = subgrid(x15, x15)\n    O = trim(x16)\n    return O"], [1.0, "def solve_fcaada69(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_93ecc456(I):\n    x1 = objects(I, F, F, T)\n    x2 =Napply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, EIGHT)\n    x5 = fork(gravitate, identity, x4)\n    x6 = compose(crement, x5)\n    x7 = compose(center, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_4249fb77(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_984a42b0(I):\n    x1 = initset(identity)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = other(x15, x17)\n    x19 = color(x18)\n    x20 = astuple(x19, RIGHT)\n    x21 = initset(ZERO_BY_TWO)\n    x22 = insert(ORIGIN, x21)\n    x23 = recolor(x4, x22)\n    x24 = insert(x20, x23)\n    x25 = dmirror(x24)\n    x26 = lbind(shift, x24)\n    x27 = occurrences(x10, x24)\n    x28 = mapply(x26, x27)\n    x29 = lbind(shift, x25)\n    x30 = occurrences(x10, x25)\n    x31 = mapply(x29, x30)\n    x32 = combine(x28, x31)\n    x33 = fill(x10, x4, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = gravitate(x34, x17)\n    x36 = replace(x10, x19, x4)\n    x37 = shift(x34, x35)\n    x38 = fill(x36, x19, x37)\n    O = trim(x38)\n    return O"], [1.1, "def solve_342a2c19(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(x21, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 ="], [1.1, "def solve_3c1ec5af(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_46638ed4(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = vsplit(x3, TWO)\n    x6 = apply(x2, x5)\n    x7 = urcorner(x6)\n    x8 = papply(x7, x6)\n    x9 = hmirror(x8)\n    x10 = papply(x10, x7)\n    x11 = width(x9)\n    x12 = vsplit(x9, x11)\n    x13 = mapply(x12, x10)\n    x14 = papply(x17, x13)\n    x15 = palette(x14)\n    x16 = combine(x4, x15)\n    x17 = lbind(colorcount, x14)\n    x18 = argmax(x16, x17)\n    x19 = remove(x18, x16)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, size)\n    x22 = rbind(compose, x21)\n    x23 = lbind(rbind, contained)\n    x24 = chain(x22, x23, x9)\n    x25 = rbind(apply, x10)\n    x26 = lbind(lbind, shift)\n    x27 = chain(x26, x25, x24)\n    x28 = rbind(apply, x10)\n    x29 = lbind(lbind, shift)\n    x30 = chain(x28, x29, x27)\n    x31 = compose(x30, x24)\n    x32 = fork(sfilter, identity, x31)\n    x33 = chain(x22, delta, x32)\n    x34 = fork(mapply, x33, x65)\n    x35 = x34(x5)\n    x36 = first(x35)\n    x37 = last(x35)\n    x38 = subgrid(x36, x37)\n    x39 = palette("], [1.1, "def solve_939d3923(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_7022b323(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = astuple(x19, x6)\n    x20 = astuple(x18, x6)\n    x21 = combine(x19, x20)\n    x22 = apply(toindices, x21)\n    x23 = rbind(difference, x22)\n    x24 = lbind(ofcolor, I)\n    x25 = chain(size, x23, x24)\n    x26 = matcher(x25, ZERO)\n    x27 = fork(both, x24, x26)\n    x28 = extract(x21, x27)\n    x29 = rbind(subtract, x28)\n    x30 = chain(size, x29, first)\n    x31 = matcher(x30, ZERO)\n    x32 = extract(x22, x31)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = x33(x1)\n    x36 = x25(x35)\n    x37 = invert(x36)\n    x38 = shift(x31, x37)\n    x39 = rbind(multiply, x38)\n    x40 ="], [1.1, "def solve_e5712e8c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 =552255(x16, x15)\n    x18 = fgpartition(x17)\n    x19 = merge(x18)\n    x20 = center(x19)\n    x21 = subtract(x20, DOWN)\n    x22 = astuple(x21, x22)\n    x23 = other(x23, x11)\n    x24 = objects(x5, T, F, T)\n    x25 = colorfilter(x24, x11)\n    x26 = difference(x24, x25)\n    x27 = colorfilter(x26, x11)\n    x28 = rbind(manhattan, x18)\n    x29 = chain(uppermost, x28, initset)\n    x30 = order(x25, x29)\n    x31 = hsplit(x30, THREE)\n    x32 = merge(x31)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = equality(x33, x34)\n    x36 = branch(x35, identity, dmirror)\n    x37 = x36(x22)\n    x38 = height(x37)\n    x39 = x36(x54)\n    x40 = divide(x38, x39)\n    x41 = width(x37)\n    x42 = subtract(x34,"], [1.1, "def solve_e5e565f6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(first, x15)\n    x17 = chain(size, x14, x16)\n    x18 = argmax(x14, x17)\n    x19 = x18(I)\n    x20 = height(x19)\n    x21 = double(x20)\n    x22 = width(x19)\n    x23 = divide(x21, x22)\n    x24 = astuple(x26, x23)\n    x25 = canvas(ZERO, x24)\n    x26 = ofcolor(x19, ZERO)\n    x27 = rbind(upscale, x25)\n    x28 = compose(x27, x26)\n    x29 = numcolors(x19)\n    x30 = power(x28, x29)\n    x31 = asobject(x19)\n    x32 = height(x31)\n    x33 = increment(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = lbind(shift, x31)\n    x36 = astuple(x34, x35)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x32)\n    x39 = mapply(x38, x34)\n    x"], [1.1, "def solve_9774580a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = colorfilter(x8, x6)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = height(x3)\n    x14 = vsplit(x3, x13)\n    x15 = hconcat(x14, x14)\n    x16 = vconcat(x15, x15)\n    x17 = vconcat(x16, x16)\n    x18 = ofcolor(x18, x6)\n    x19 = asindices(x18)\n    x20 = ofcolor(x18, x4)\n    x21 = difference(x19, x20)\n    x22 = first(x21)\n    x23 = color(x22)\n    x24 = Confine(x18)\n    x25 = rbind(toobject, x24)\n    x26 = difference(x19, x21)\n    x27 = rbind(colorcount, x6)\n    x28 = chain(x27, x25, x9)\n    x29 = matcher(x28, EIGHT)\n    x30 = rbind(colorcount, x6)\n    x31 = fork(equality, x30, x29)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, x32)\n    x34 = lbind(rbind, contained)\n    x35 = chain(x33, x34, xdneighbors)\n    x36 =73251(x26)\n    x37 = sfilter(x36, x35)\n    x38 =71000(x37)\n    x39 = multiply(x38, THREE)\n    x40"], [1.1, "def solve_b9833352(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = interval(x20, FOR, ONE)\n    x23 = rbind(toobject, x14)\n    x24 =\n    x17 = apply(x23, x22)\n    x25 = matcher(first, x6)\n    x26 = sfilter(x24, x25)\n    x27 = lbind(fork, FOUR)\n    x28 = lbind(x27, identity)\n    x29 = lbind(lbind, add)\n    x30 = chain(x26, x28, x29)\n    x31 = lbind(colorfilter, x17)\n    x32 = chain(first, x31, x30)\n    x33 = fork(subtract, x32, rot90)\n    x34 = fork(divide, x33, x30)\n    x35 = fork(equality, x34, x28)\n    x36 = sfilter(x26, x35)\n    x37 = lbind(fork, vmir"], [1.1, "def solve_66db07af(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b3d79b4d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_cb790dea(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_0cfdbb4a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, T, F, F)\n    x3 = vmirror(x2)\n    x4 = fgpartition(x3)\n    x5 = merge(x4)\n    x6 = toindices(x5)\n    x7 = compose(double, halve)\n    x8 = fork(equality, identity, x7)\n    x9 = chain(x8, last, last)\n    x10 = sfilter(x6, x9)\n    x11 = extract(x10, x9)\n    x12 = x11(x1)\n    x13 = palette(x12)\n    x14 = center(x12)\n    x15 = vmirror(x12)\n    x16 = remove(x14, x8)\n    x17 = center(x11)\n    x18 = hmirror(x12)\n    x19 = color(x12)\n    x20 = remove(x18, x2)\n    x21 = normalize(x12)\n    x22 = objects(x13, T, F, F)\n    x23 = colorfilter(x22, x19)\n    x24 = Steinatching(x11)\n    x25 = subtract(x24, x17)\n    x26 =58(x25)\n    x27 = mostcolor(x13)\n    x28 = colorfilter(x26, x17)\n    x29 = compose(toindices, normalize)\n    x30 = toindices(x11)\n    x31 = normalize(x30)\n    x32 = objects(x38, T, F, F)\n    x33 = colorfilter(x32, x19)\n    x34 = rbind(contained, x33)\n    x35 = chain(x34, first, last)\n    x36 = sfilter(x6, x35)\n    x37 = paint(x1, x36)\n    x38 = fork(connect, ulcorner, urcorner)\n    x39 = fork(connect, ulcorner, llcorner)\n    x40 = fork(combine, x38, x39)\n"], [1.1, "def solve_ab7048de(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = Libraries(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x39 = extract(x32, x36)\n    x40 = last(x39)\n    x41 = matcher(first, TWO)\n    x42 = extract(x32, x41)\n    x43 = last(x42)\n    x44 = vmirror("], [1.1, "def solve_a83d0c38(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_06708e62(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, last)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_18f1b58e(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_2b274705(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_03520da9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_502c9c7a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_a65f373b(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity,Rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shoot(x26, UP_RIGHT)\n    x28 = add(x25, DOWN_LEFT)\n    x29 = shoot(x28, DOWN_LEFT)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x30, x27)\n    x32 = rbind(shoot, LEFT)\n    x33 = mapply(x32, x29)\n    x34 = width(x23)\n    x35 = invert(x34)\n    x36 = tojvec(x35)\n    x37 = shift(x31, x36)\n    x38 = combine(x31, x37)\n    x39 ="], [1.1, "def solve_2872d90d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_5cb2ebae(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_fb1e9b05(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, order)\n    x5 = size(x4)\n    x6 =cher(x6, ONE)\n    x7 = branch(x5, x4, x6)\n    x8 = argmax(x7, x6)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = lbind(shift, x10)\n    x12 = normalize(x8)\n    x13 = mapply(x11, x12)\n    x14 = corners(x8)\n    x15 = toindices(x4)\n    x16 = lbind(shift, x15)\n    x17 = normalize(x4)\n    x18 = Nbind(difference, x17)\n    x19 = chain(size, x18, toindices)\n    x20 = matcher(x19, ZERO)\n    x21 = fork(both, x14, x20)\n    x22 = extract(x14, x21)\n    x23 = argmin(x22, x9)\n    x24 = apply(ulcorner, x22)\n    x25 = normalize(x24)\n    x26 = lbind(shift, x25)\n    x27 = toindices(x26)\n    x28 = mapply(x27, x24)\n    x29 = paint(I, x28)\n    x30 = objects(x29, T, F, T)\n    x31 = colorfilter(x30, x9)\n    x32 = first(x31)\n    x33 = difference(x30, x31)\n    x34 = rbind(toobject, x32)\n    x35 = compose(x34, dneighbors)\n    x36 = rbind(colorcount, x9)\n    x37 = rbind(x36, EIGHT)\n    x38 = chain(x37, x34, dneighbors)\n    x39 = sfilter(x33,"], [1.1, "def solve_eaf9da9a(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_ba4c0ff9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_391daa82(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_ad08671a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41"], [1.1, "def solve_b2001c59(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, x230)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, LEFT)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_7138865a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = asindices(I)\n    x30 = objects(x27, x27, partition)\n    x31 = sizefilter(x30, ONE)\n    x32 = lbind(toobject, x27)\n    x33 = fork(shift, x52, x32)\n    x34 = compose(x33, color)\n    x35 = paint(x27, x34)\n    x36 = order(x31, x35)\n    x37 = product(x36, x36)\n    x38 = last(x37)\n    x39 = remove(x38, x"], [1.1, "def solve_c95fa83f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = shape(I)\n    x3 = partition(I)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = canvas(x5, x2)\n    x7 = colorcount(I, ONE)\n    x8 = argmax(x3, x7)\n    x9 = repeat(x6, ONE)\n    x10 = combine(x8, x9)\n    x11 = matcher(first, x1)\n    x12 = compose(flip, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = rbind(multiply, x13)\n    x18 = rbind(divide, x13)\n    x19 = compose(x17, x18)\n    x20 =795(equality, x14, x19)\n    x21 = compose(x11, first)\n    x22 = rbind(multiply, x26)\n    x23 = rbind(divide, x26)\n    x24 = compose(x22, x23)\n    x25 = fork(equality, x21, x24)\n    x26 = compose(x15, first)\n    x27 = rbind(multiply, x13)\n    x28 = rbind(divide, x13)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, x26, x29)\n    x31 = compose(x30, last)\n    x32 = lbind(apply, first)\n    x33 = rbind(sfilter, x35)\n    x34 = rbind(pair, x21)\n    x35 = chain(x32, x33, x34)\n    x36 = compose(x32, last)\n    x37 = fork(add, first, x36)\n    x38 = fork(connect, x35, x37)\n    x39 = compose(x32, x38)\n    x40 = fork("], [1.1, "def solve_00a51e55(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip,5)\n    x7 = sfilter(x6, x2)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_2d936e5b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = power(outbox, x15)\n    x17 = x16(x9)\n    x18 = inbox(x6)\n    x19 = ulcorner(x6)\n    x20 = llcorner(x6)\n    x21 = urcorner(x7)\n    x22 = ulcorner(x7)\n    x23 = shoot(x19, UNITY)\n    x24 = shoot(x20, DOWN_LEFT)\n    x25 = shoot(x21, UP_RIGHT)\n    x26 = shoot(x22, NEG_UNITY)\n    x27 = combine(x23, x26)\n    x28 = combine(x24, x25)\n    x29 = combine(x27, x28)\n    x30 = branch(x6, x21, x29)\n    x31 = branch(x7, x22, x30)\n    x32 = fork(combine, identity, vmirror)\n    x33 = x32(x31)\n    x34 = itnumcolors, x33)\n    x35 = FOUR(x34)\n    x36 = matcher(first, x35)\n    x37 = sfilter(x33, x36)\n    x38 = lbind(colorcount, I)\n    x39 = argmin(x37,"], [1.1, "def solve_b798bc8e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply,last)\n    x3 = order(x1, x2)\n    x4 = lbind(sfilter, x1)\n    x5 = lbind(matcher, normalize)\n    x6 = chain(x4, x5, mostcolor)\n    x7 = upscale(x3, THREE)\n    x8 = x6(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(x11, x6)\n    x13 = rbind(sfilter, x12)\n    x14 = compose(x13, x4)\n    x15 = fork(combine, x12, x14)\n    x16 = fork(combine, x12, x15)\n    x17 = palette(x3)\n    x18 = lbind(repeat, x17)\n    x19 = ofcolor(I, x12)\n    x20 = rbind(add, RIGHT)\n    x21 = rightmost(x19)\n    x22 = rightmost(x18)\n    x23 = subtract(x21, x22)\n    x24 = add(x23, xrbind)\n    x25 = argmax(x19, x24)\n    x26 = astuple(x21, x26)\n    x27 = canvas(x15, x26)\n    x28 = asindices(x27)\n    x29 = recolor(x12, x28)\n    x30 = paint(x27, x29)\n    x31 = rbind(add, increment)\n    x32 = rbind(add, DOWN)\n    x33 = rbind(subtract, x35)\n    x34 = initset(x35)\n    x35 = lbind(toobject, x34)\n    x36 = compose(x32, x35)\n    x37 = lbind(paint, x30)\n    x38 = compose(x37, x36)\n    x39 = rbind(remove, x27)"], [1.1, "def solve_7701b388(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_ed8083cb(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_8b98df0a(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_c7786baa(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = lbind(compose, flip)\n    x3 = lbind(matcher, first)\n    x4 = chain(x2, x3,lbind)\n    x5 = fork(47, identity, x4)\n    x6 = fork(compose, identity, x5)\n    x7 = urcorner(x1)\n    x8 = ulcorner(x1)\n    x9 = index(I, x7)\n    x10 = equality(x9, ZERO)\n    x11 = branch(x10,x8, x9)\n    x12 = fork(difference, asindices, x11)\n    x13 = compose(size, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = fork(both, x14, x9)\n    x16 = extract(x1, x15)\n    x17 = x16(I)\n    x18 = objects(x17, T, F, T)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = color(x19)\n    x22 = subgrid(x19, x17)\n    x23 = trim(x22)\n    x24 = leastcolor(x23)\n    x25 = palette(x23)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x14)\n    x28 = ulcorner(x24)\n    x29 = colorfilter(x18, x27)\n    x30 = rbind(toobject, x23)\n    x31 = UNITY(x30)\n    x32 = outbox(x31)\n    x33 = fork(combine, vfrontier, hfrontier)\n    x34 = mapply(x33, x32)\n    x35 = fill(x17, x27, x34)\n    x36 = ofcolor(x35, x24)\n    x37 = dmirror(x35)\n    x38 = replace(x35, x24, x3333)\n    x39 = toindices(x38)\n    x40 = compose("], [1.1, "def solve_4a1e9c4c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_8800c8a0(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_07a0322f(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = astuple(x8,x8)\n    x10 = subtract(x9, I)\n    x11 = increment(x10)\n    x12 = repeat(x11, ONE)\n    x13 = merge(x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x4, x15)\n    x16 = other(x16, x14)\n    x17 = subtract(x9, I)\n    x18 =607(x17)\n    x19 = multiply(x18, x18)\n    x20 =607(x17)\n    x21 =     crop(x19, ORIGIN, x20)\n    x22 = hmirror(x21)\n    x23 = objects(x22, T, F, F)\n    x24 = colorfilter(x23, x4)\n    x25 = vmirror(x24)\n    x26 = objects(x25, T, F, F)\n    x27 = height(x36)\n    x28 = subtract(x27, DOWN)\n    x29 = astuple(ONE, x28)\n    x30 = mostcolor(x36)\n    x31 = ofcolor(x22, x30)\n    x32 = vmirror(x28)\n    x33 = hmirror(x28)\n    x34 = astuple(x32, x33)\n    x35 = combine(x31, x34)\n    x36 = combine(x35, x24)\n    x37 =O = fill(x22, x36, x)\n    x38 = ofcolor(x32, x50)\n    x39 = asindices(x38)\n    x40 ="], [1.1, "def solve_2ba51c49(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 =040(x1)\n    x9 = rot180(x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(x10, x9, x11)\n    x13 = rbind(ofcolor, x12)\n    x14 = mapply(x13, x7)\n    x15 = fill(I, x12, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, x12)\n    x18 = rbind(adjacent, x17)\n    x19 = mfilter(x17, x18)\n    x20 = toindices(x19)\n    x21 = rbind(manhattan, x50)\n    x22 = chain(even, x21, initset)\n    x23 = sfilter(x20, x22)\n    x24 = fill(x15, x12, x23)\n    x25 = objects(x24, T, F, T)\n    x26 = fork(add, height, width)\n    x27 = compose(decrement, x26)\n    x28 = fork(equality, size, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = compose(x29, delta)\n    x31 = rbind(\",\" Typicallyise, x30)\n    x32 = compose(x31, width)\n    x33 = fork(subtract, x32, x37)\n    x34 = fork(add, x33, x30)\n    x35 = fork(equality, x34, x29)\n    x36 = lbind(apply, first)\n    x37 = chain(x20"], [1.1, "def solve_80180dd3(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = remove(x3, x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(x6, x10)\n    x13 = leftmost(x12)\n    x14 = ofcolor(x6, x11)\n    x15 = leftmost(x14)\n    x16 = greater(x13, x15)\n    x17 = uppermost(x12)\n    x18 = decrement(x17)\n    x19 = index(x6, x18)\n    x20 = equality(x19, x12)\n    x21 = branch(x20, identity, initset)\n    x22 = branch(x20, decrement, identity)\n    x23 = order(x1, x22)\n    x24 = rbind(contained, x23)\n    x25 = compose(x24, last)\n    x26 = sfilter(x26, x25)\n    x27 =44(x26)\n    x28 = x27(x24)\n    x29 = equality(x28, x12)\n    x30 = branch(x29, identity, initset)\n    x31 = branch(x29, identity, x30)\n    x32 = identity(x31)\n    x33 = ofcolor(x32, x10)\n    x34 = sfilter(x33, x25)\n    x35 = subgrid(x34, x36)\n    x36 = height(x35)\n    x37 = equality(x36, ZERO)\n    x38 = branch(x37, identity, neighbors)\n    x39 = x38(x35)\n    x40 = branch(x37, lbind, outbox)\n    x41 = x40(x39)\n    x42 = inits"], [1.1, "def solve_32279db9(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_e37c6ab3(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_87269eb0(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = palette(x2)\n    x4 = remove(x2, x3)\n    x5 = lbind(colorcount, I)\n    x6 = argmax(x4, x5)\n    x7 = remove(x6, x4)\n    x8 = lbind(ofcolor, I)\n    x9 = mapply(x8, x7)\n    x10 = subgrid(x9, I)\n    x11 = objects(x10, F, T, T)\n    x12 = first(x11)\n    x13 = subgrid(x12, x10)\n    x14 = height(x13)\n    x15 = width(x13)\n    x16 = divide(x14, x15)\n    x17 = increment(x16)\n    x18 = interval(FOUR, x17, FOUR)\n    x19 = matcher(first, x6)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = asobject(x21)\n    x23 = difference(x22, x2)\n    x24 = vperiod(x23)\n    x25 = objects(x10, F, T, T)\n    x26 = sizefilter(x25, ONE)\n    x27 = lbind(contained, x6)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = asobject(x29)\n    x31 = hperiod(x30)\n    x32 = neighbors(ORIGIN)\n    x33 =extract(x32, x282)\n    x34 = asindices(x33)\n    x35 = box(x34)\n    x36 = intersection(x32, x34)\n    x37 = fill(x10, x6, x36)\n    x38 = astuple(x31, x31)\n    x39 = paint(x37, x38)\n    x40 = I(x39,"], [1.1, "def solve_41e2df40(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_5317f1d6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x7)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x21, x20)\n    x23 = normalize(x4)\n    x24 = paint(x22, x23)\n    x25 = normalize(x7)\n    x26 = width(x7)\n    x27 = subtract(x19, x26)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = normalize(x10)\n    x32 = height(x10)\n    x33 = subtract(x16, x32)\n    x34 = toivec(x33)\n    x35 = shift(x31, x34)\n    x36 = paint(x30, x35)\n    x37 = normalize(x13)\n    x38 = shape(x13)\n    x39 = subtract(x20, x38)\n    x40 = shift(x37, x39)\n    O = paint(x36, x40"], [1.1, "def solve_ef64a875(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_813edb99(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d936a284(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, first)\n    x24 = lbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_20dbaf08(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_e6fd5619(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =5622\n    x2 =5622\n    x4445\n    59994\n    44944\n    444445\n    59994\n    549945\n    44944\n    444445\n    \"\"\"\n    x1 =5622\n    x2 =5622\n    x44)\n    x5 = trim(I)\n    x6 = mostcolor(x5)\n    x7 = repeat(x6, ONE)\n    x8 = lbind(repeat, x7)\n    x9 = compose(x8, size)\n    x10 = x9(I)\n    x11 = objects(x10, F, F, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x10)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = rbind(add, DOWN)\n    x16 = apply(x15, x14)\n    x17 = rbind(add, RIGHT)\n    x18 = apply(x17, x14)\n    x19 = fork(either, x16, x18)\n    x20 = rbind(add, UP)\n    x21 =993af interval(ZERO, FOUR, ONE)\n    x22 = rbind(add, DOWN)\n    x23 = THREE(x12, x27)\n    x24 = rbind(add, LEFT)\n    x25 = rbind(add, UP)\n    x26 = objects(x22, T, F, T)\n    x27 = compose(x26, x19)\n    x28 = argmax(x25, x27)\n    x29 = rbind(subgrid, x50)\n    x30 = apply(x29, x28)\n    x31 = apply(toivec, x30)\n    x32 = apply(x31, x30)\n    x33 = merge(x32)\n    x34 = rot90(x30)\n    x35 = downscale(x34, x32)\n    x36 = rot90(x35)\n    x37 = shape(x23bordering\n    x38 = add(x37, UP)\n    x39 = in"], [1.1, "def solve_071e4b3d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_c0caf285(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x8, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_9402c334(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_193c2576(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_e1f05116(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_3835aa25(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_c31366d4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x1)\n    x11 = matcher(x9, x10)\n    x12 = palette(I)\n    x13 = sfilter(x12, x11)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, first)\n    x19 = fork(remove, x18, first)\n    x20 = rbind(compose, initset)\n    x21 = lbind(rbind, manhattan)\n    x22 = compose(initset, x18)\n    x23 = chain(x20, x21, x22)\n    x24 = fork(argmin, x19, x23)\n    x25 = compose(last, x18)\n    x26 = compose(first, x24)\n    x27 = fork(astuple, x26, x25)\n    x28 = fork(insert, x27, x19)\n    x29 = compose(last, last)\n    x30 = rbind(argmin, x29)\n    x31 = rbind(sfilter, x16)\n    x32 = compose(first, last)\n    x33 = chain(x30, x31, x32)\n    x34 = compose(flip, x16)\n    x35 = rbind(sfilter, x34)\n    x36 = compose(first, last)\n    x37 = fork(remove, x33, x36)\n    x38 = compose(x35, x37)\n    "], [1.1, "def solve_764f5adb(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = compose(size, dedupe)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)\n    "], [1.1, "def solve_8f0c8e63(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmin(x5, x2)\n    x7 =363(x6)\n    x8 = llcorner(x6)\n    x9 = lrcorner(x6)\n    x10 = connect(x8, x9)\n    x11 =1974(x10)\n    x12 = toindices(x11)\n    x13 = center(x12)\n    x14 = subtract(x13, x2)\n    x15 = branch(x13, height, width)\n    x16 = x15(x6)\n    x17 = rot90(x16)\n    x18 = subtract(x17, x2)\n    x19 = normalize(x11)\n    x20 = x18(x19)\n    x21 = invert(x13)\n    x22 = hmirror(x21)\n    x23 = asindices(x22)\n    x24 = center(x23)\n    x25 = subtract(x24, x23)\n    x26 = shift(x23, x25)\n    x27 = paint(I, x26)\n    x28 = objects(x27, T, F, F)\n    x29 = color(x2)\n    x30 =725(x26)\n    x31 = valmax(x30, height)\n    x32 = valmax(x30, width)\n    x33 =600(x31, x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x304)\n    x36 = combine(x26, x35)\n    x37 = multiply(x345, x36)\n    x38 = astuple(x37, x344)\n    x39 = canvas(x30, x38)\n    x40 = ulcorner(x2)\n    x41 = shift(x33, x40)\n    x42 = lbind(shift, x"], [1.1, "def solve_481c73b5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = first(x2)\n    x4 = normalize(x3)\n    x5 = last(x2)\n    x6 = normalize(x5)\n    x7 = color(x4)\n    x8 = color(x6)\n    x9 = toindices(x4)\n    x10 = toindices(x6)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = lbind(shift, x9)\n    x14 = lbind(shift, x10)\n    x15 = compose(x13, first)\n    x16 = compose(x14, last)\n    x17 = fork(intersection, x15, x16)\n    x18 = compose(size, x17)\n    x19 = compose(x13, first)\n    x20 = compose(x14, last)\n    x21 = fork(combine, x19, x20)\n    x22 = compose(x12, x21)\n    x23 = matcher(x18, ZERO)\n    x24 = fork(both, x23, x22)\n    x25 = valmax(x2, height)\n    x26 = valmax(x2, width)\n    x27 = interval(ZERO, x25, ONE)\n    x28 = interval(ZERO, x26, ONE)\n    x29 = product(x27, x28)\n    x30 = product(x29, x29)\n    x31 = argmax(x30, x24)\n    x32 = first(x31)\n    x33 = shift(x9, x32)\n    x34 = last(x31)\n    x35 = shift(x10, x34)\n    x36 = combine(x33, x35)\n    x37 = shape(x36)\n    x38 = canvas(x8, x37)\n    x39 = ulcorner(x36)\n    x40 = invert(x39)\n    x41 = shift(x33, x40"], [1.1, "def solve_a7a64e6d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_c0315987(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d7152fff(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = product(x1, x1)\n    x3 = fork(equality, first, last)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(adjacent, first, last)\n    x7 = compose(flip, x6)\n    x8 = extract(x5, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = combine(x10, x11)\n    x13 = leftmost(x12)\n    x14 = increment(x13)\n    x15 = rightmost(x12)\n    x16 = decrement(x15)\n    x17 = apply(uppermost, x9)\n    x18 = maximum(x17)\n    x19 = increment(x18)\n    x20 = apply(lowermost, x9)\n    x21 = minimum(x20)\n    x22 = decrement(x21)\n    x23 = apply(leftmost, x9)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = apply(rightmost, x9)\n    x27 = minimum(x26)\n    x28 = decrement(x27)\n    x29 = uppermost(x12)\n    x30 = increment(x29)\n    x31 = lowermost(x12)\n    x32 = decrement(x31)\n    x33 = hmatching(x10, x11)\n    x34 = branch(x33, x14, x25)\n    x35 = branch(x33, x16, x28)\n    x36 = branch(x33, x22, x32)\n    x37 = branch(x33, x19, x30)\n    x38 = astuple(x36, x35)\n    x39 = astuple(x37, x34)\n    x40 = initset(x39)\n    x41 = insert(x38, x40)\n    x42 = backdrop(x41)\n    x43 = merge"], [1.1, "def solve_15254349(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = flip(x33)\n    x35 = branch(x34, hmirror, vmirror)\n    x36 = x35(x16)\n    x37 =75(x36)\n    x38 = dedupe(x37)\n    x39 = rot90(x38)\n    x40 ="], [1.1, "def solve_197d2e97(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)\n    x41 ="], [1.1, "def solve_083f49e5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_0e27c748(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = lbind(matcher, first)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, identity, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = fork(equality, identity, x5)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x6, x8)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = fork(multiply, first, last)\n    x15 = apply(x14, x13)\n    x16 = valmax(x15, x12)\n    x17 = lbind(add, x16)\n    x18 = height(I)\n    x19 = increment(x18)\n    x20 = width(I)\n    x21 = increment(x20)\n    x22 = add(x21, x26)\n    x23 = halve(x22)\n    x24 = canvas(ZERO, x13)\n    x25 = asindices(x24)\n    x26 = rbind(toobject, I)\n    x27 = lbind(shift, x25)\n    x28 = compose(x27, x26)\n    x29 = compose(x28, x26)\n    x30 = toindices(x29)\n    x31 = rbind(x38, x30)\n    x32 = lbind( mapply, x32)\n    x33 = compose(x32, x29)\n    x34 = fork(paint, identity, x33)\n    x35 = equality(x38, x34)\n    x36 = branch(x35, x33, x30)\n    x37 = paint(x26, x36)\n    x38 = ofcolor(x37, ZERO)\n    x39 = rbind(toobject, I)\n    x40 = decrement(x39)\n    x41 =1999(x40)"], [1.1, "def solve_baad0174(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, maximum)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37,"], [1.1, "def solve_a0571d66(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = difference(x5, x3)\n    x7 = mostcolor(I)\n    x8 = fill(I, x7, x6)\n    x9 = normalize(x8)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = matcher(first, x11)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x9, x13)\n    x15 = center(x14)\n    x16 = color(x10)\n    x17 = shift(x9, x16)\n    x18 = paint(x3, x17)\n    x19 = normalize(x8)\n    x20 = shape(x19)\n    x21 = canvas(x8, x20)\n    x22 = normalize(x19)\n    x23 = paint(x21, x22)\n    x24 = repeat(ZERO, ONE)\n    x25 = merge(x24)\n    x26 = cover(x23, x25)\n    x27 = branch(x12, dmirror, identity)\n    x28 = x27(x27)\n    x29 = height(x28)\n    x30 = increment(x29)\n    x31 = double(x30)\n    x32 = add(x31, x29)\n    x33 = connect(x38, x32)\n    x34 = fill(x28, x25, x33)\n    x35 = ofcolor(x34, x525)\n    x36 = subgrid(x35, x34)\n    x37 = leftmost(x35)\n    x38 = rightmost(x35)\n    x39 = lbind(greater, x38)\n    x40 = compose(x39, last)\n    x41 = rbind(greater, x40)\n"], [1.1, "def solve_193a2e4c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = cover(I, x9)\n    x11 = normalize(x9)\n    x12 = remove(x9, x8)\n    x13 = toindices(x11)\n    x14 = lbind(intersection, x13)\n    x15 = chain(x14, dneighbors, last)\n    x16 = rbind(greater, ONE)\n    x17 = chain(x16, size, x15)\n    x18 = sfilter(x11, x17)\n    x19 = center(x18)\n    x20 = matcher(last, x19)\n    x21 = extract(x18, x20)\n    x22 = first(x21)\n    x23 = difference(x11, x18)\n    x24 = color(x23)\n    x25 = center(x18)\n    x26 = invert(x25)\n    x27 = shift(x11, x26)\n    x28 = invert(x25)\n    x29 = shift(x23, x28)\n    x30 = toindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shoot)\n    x33 = compose(x31, x32)\n    x34 = power(outbox, TWO)\n    x35 = chain(backdrop, x34, initset)\n    x36 = fork(difference, x33, x35)\n    x37 = lbind(recolor, x24)\n    x38 = compose(x37, x36)\n    x39 = lbind(shift, x27)\n    x40 = fork(combine"], [1.1, "def solve_672b43c4(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_79af90aa(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = matcher(first, TWO)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x22, x24)\n    x26 = matcher(first, TWO)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x22, x27)\n    x29 = matcher(first, TWO)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = apply(most, x31)\n    x33 = size(x52)\n    x34 = equality(x33, ONE)\n    x35 = branch(x34, tophalf, lefthalf)\n    x36 = branch(x34, bottomhalf, righthalf)\n    x37 = x35(I)\n    x38 = x36(I)\n    x39 = shape(x37)\n    x"], [1.1, "def solve_c54f7561(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_2b985f94(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_e03f87fb(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_40727c3d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, shape)\n    x3 =2(I)\n    x4 = lbind(multiply, x3)\n    x5 = chain(x2, x4, shape)\n    x6 = lbind(apply, x5)\n    x7 = rbind(chain, first)\n    x8 = lbind(x7, x5)\n    x9 = rbind(x8, x4)\n    x10 = lbind(apply, x9)\n    x11 = chain(x16, x9, x10)\n    x12 = lbind(ofcolor, I)\n    x13 = compose(x12, x5)\n    x14 = fork(paint, x13, x11)\n    x15 = connect(ORIGIN, x8)\n    x16 = cover(I, x15)\n    x17 = rbind(toobject, x16)\n    x18 = fork(either, x17, x13)\n    x19 = width(I)\n    x20 = rbind(repeat, x19)\n    x21 = compose(x20, x18)\n    x22 = rbind(multiply, x3)\n    x23 = compose(x22, x18)\n    x24 = chain(x20, x23, x20)\n    x25 = rbind(apply, x21)\n    x26 = lbind(rbind, multiply)\n    x27 = chain(x25, x26, x24)\n    x28 = fork(apply, x26, x27)\n    x29 = compose(x15, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(connect, x17)\n    x32 = chain(x31, x30, x29)\n    x33 = compose(x32, x32)\n    x34 = fork(combine, x30, x33)\n    x35 = compose(x307, x34)\n    x36 = fork(recolor, x35, x32)\n    x37 = mapply(x36, x1)\n    O = paint(x16"], [1.1, "def solve_cb693c51(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0b88ef42(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_91c44480(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = extract(x2, x3)\n    x5 = color(x4)\n    x6 = subgrid(x4, I)\n    x7 = chain(x5, lefthalf, tophalf)\n    x8 = vmirror(x6)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = objects(x11, T, F, F)\n    x13 = rbind(adjacent, x4)\n    x14 = compose(x13, toindices)\n    x15 = fork(both, x12, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(contained, x16)\n    x18 = compose(x17, size)\n    x19 = sfilter(x1, x18)\n    x20 = increment(x5)\n    x21 = add(x5, THREE)\n    x22 = interval(x20, x21, ONE)\n    x23 = product(x22, x22)\n    x24 = pair(x16, x23)\n    x25 = mapply(tojvec, x24)\n    x26 = apply(x28, x25)\n    x27 = flip(x26)\n    x28 = asobject(x27)\n    x29 = chain(dmirror, lefthalf, toindices)\n    x30 = pair(x29, x27)\n    x31 = apply(dmirror, x30)\n    x32 = flip(x31)\n    x33 = asobject(x32)\n    x34 = lbind(shift, x28)\n    x35 = mapply(x34, x31)\n    x36 = paint(I, x35)\n    x37 =O = x7(x36)\n    x38 = objects(x37, T, F, F)\n    x39 ="], [1.1, "def solve_2dbf5365(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = ofcolor(I, x9)\n    x11 = ofcolor(I, x5)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x10, x13)\n    x15 = colorfilter(x14, x9)\n    x16 = argmax(x15, x2)\n    x17 = difference(x15, x16)\n    x18 = vline(x16)\n    x19 = rbind(subgrid, I)\n    x20 = chain(hmirror, vmirror, x19)\n    x21 =\n    mirror(x16)\n    x22 = objects(x8, T, T, T)\n    x23 = colorfilter(x22, x9)\n    x24 = sizefilter(x23, TWO)\n    x25 = vmirror(x24)\n    x26 = toindices(x25)\n    x27 = subgrid(x26, I)\n    x28 = shape(x25)\n    x29 = add(TWO, x28)\n    x30 = x29(x27)\n    x31 = asobject(x30)\n    x32 = shift(x31, UNITY)\n    x33 = paint(x21, x32)\n    x34 = rbind(adjacent, x26)\n    x35 = mfilter(x34, x33)\n    x36 = cover(x3, x35)\n    x37 = sfilter(x34, x36)\n    x38 = size(x37)\n    x39 = positive(x38)\n    x40 = branch(x39, x33, x34)\n"], [1.1, "def solve_8ebbf1a6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = lbind(colorfilter, x6)\n    x8 = compose(size, x7)\n    x9 = valmax(x3, x8)\n    x10 = matcher(x8, x9)\n    x11 = sfilter(x3, x10)\n    x12 = lbind(colorcount, I)\n    x13 = argmin(x11, x12)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x13)\n    x17 = rbind(contained, x16)\n    x18 = compose(x17, color)\n    x19 = sfilter(x16, x18)\n    x20 = lbind(colorcount, x14)\n    x21 = argmin(x19, x20)\n    x22 = subgrid(x21, I)\n    x23 = colorfilter(x22, x13)\n    x24 = rbind(contained, x23)\n    x25 = compose(x24, normalize)\n    x26 = sfilter(x16, x25)\n    x27 =oscope(x26)\n    x28 = totuple(x27)\n    x29 = apply(first, x28)\n    x30 = repeat(x9, ONE)\n    x31 = file(x30)\n    x32 =sfilter(x16, x25)\n    x33 = repeat(x31, ONE)\n    x34 = combine(x29, x33)\n    x35 =13(x34)\n    x36 = hmirror(x35)\n    x37 = combine(x32, x36)\n    x38 = x25(x37)\n    x39 = tojvec(x38)\n    x40 = shift(x39, UNITY)\n    O = fill(I, x"], [1.1, "def solve_ad408f78(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_a927ed8c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = objects(I, T, F, T)\n    x5 = apply(izefilter, x4)\n    x6 = rbind(valmax, width)\n    x7 = lbind(shift, x2)\n    x8 = chain(x7, x6, x5)\n    x9 = compose(maximum, shape)\n    x10 = lbind(ptract, x3)\n    x11 = chain(x10, x9, x8)\n    x12 = lbind(colorfilter, x4)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x9, x13)\n    x15 = extract(x5, x14)\n    x16 = other(x15, x3)\n    x17 = palette(I)\n    x18 = lrcorner(x2)\n    x19 = add(x18, UNITY)\n    x20 = initset(x19)\n    x21 = palette(I)\n    x22 =404(x21)\n    x23 = colorfilter(x4, x12)\n    x24 = insert(x13, x23)\n    x25 = merge(x24)\n    x26 = cover(I, x25)\n    x27 = apply(ulcorner, x2)\n    x28 = lbind(shift, x25)\n    x29 = add(x28, UNITY)\n    x30 = initset(x29)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(x31, initset)\n    x33 = fork(add, x32, x37)\n    x34 = compose(initset, x33)\n    x35 = fork(insert, x76, x34)\n    x36 = fork(insert, xrbind, x35)\n    x37 = fork(insert, x cmirror, x36)\n    x38 = fork(insert, x74, x37)\n    x39 = fork(insert, x39, x"], [1.1, "def solve_49747b3d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_4eabc388(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(double, halve)\n    x8 = invert(x7)\n    x9 = insert(x8, x6)\n    x10 = insert(x5, x9)\n    x11 = prapply(connect, x10, x8)\n    x12 = argmax(x11, size)\n    x13 = other(x1, x12)\n    x14 = vline(x13)\n    x15 = branch(x14, x7, x12)\n    x16 = branch(x13, x6, x15)\n    x17 = x15(x16)\n    x18 = initset(x17)\n    x19 = palette(x18)\n    x20 = lbind(chain, connect)\n    x21 = lbind(x20, x18)\n    x22 = lbind(lbind, gravitate)\n    x23 = lbind(lbind, shift)\n    x24 = chain(x22, x23, x111)\n    x25 = lbind(colorcount, x18)\n    x26 = compose(x25, x14)\n    x27 = argmax(x19, x26)\n    x28 = matcher(normalize, x27)\n    x29 = objects(x28, T, F, T)\n    x30 = lbind(colorfilter, x29)\n    x31 = rbind(sfilter, x28)\n    x32 = compose(x30, x31)\n    x33 = rbind(valmax, rightmost)\n    x34 = rbind(sfilter, x28)\n    x35 = compose(x33, x34)\n    x36 = fork(add, x32, x35)\n    x37 = apply(x36, x30)\n    x38 = rbind(valmax, rightmost)\n    x39 = rbind(sfilter"], [1.1, "def solve_32d3f9d7(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_82971f49(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x11)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_2a38f671(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(invert, x18)\n    x20 = fork(intersection, x17, x19)\n    x21 = compose(size, x20)\n    x22 = compose(positive, size)\n    x23 = lbind(intersection, x2)\n    x24 = chain(x22, x23, x15)\n    x25 = compose(size, x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = fork(multiply, first, last)\n    x28 = fork(multiply, x26, x27)\n    x29 = lbind(intersection, x2)\n    x30 = chain(x29, x28, last)\n    x31 = compose(size, x30)\n    x32 = lbind(chain, last)\n    x33 = rbind(x32, x21)\n    x34 = lbind(rbind, add)\n    x35 = chain(x34, x33, x30)\n    x36 = fork( apply, x35, x30)\n    x37 = lbind(chain, first"], [1.1, "def solve_2ab0b914(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, T, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_8ebe0183(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = mostcolor(I)\n    x8 = shape(6)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x6, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = subgrid(x12, I)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot180)\n    x17 = rbind(rapply, x13)\n    x18 = initset(x15)\n    x19 = lbind(rapply, x18)\n    x20 = chain(first, x17, x19)\n    x21 = rbind(rapply, x13)\n    x22 = initset(x16)\n    x23 = lbind(rapply, x22)\n    x24 = chain(first, x21, x23)\n    x25 = rbind(apply, x4)\n    x26 = lbind(colorfilter, x11)\n    x27 = compose(x26, x25)\n    x28 = chain(invert, x17, x27)\n    x29 = order(x18, x28)\n    x30 = apply(x22, x29)\n    x31 = ofcolor(x30, x7)\n    x32 = sizefilter(x31, ONE)\n    x33 = lbind(vmatching, x17)\n    x34 = rbind(vmatching, x12)\n    x35 = fork(either, x33, x34)\n    x36 = compose(x35, x31)\n    x37 = sfilter(x32, x36)\n    x38 = rbind("], [1.1, "def solve_6343638c(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_95561608(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = inbox(x3)\n    x6 = backdrop(x5)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = colorfilter(x8, x4)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, tophalf, lefthalf)\n    x13 = x12(I)\n    x14 = color(x13)\n    x15 = palette(x13)\n    x16 = remove(x4, x15)\n    x17 = other(x16, x14)\n    x18 =949(x17, x9)\n    x19 = palette(x13)\n    x20 = remove(x14, x19)\n    x21 = other(x20, x17)\n    x22 = switch(x13, x21, x19)\n    x23 = rbind(ofcolor, x17)\n    x24 = colorfilter(x23, x4)\n    x25 =879(x24)\n    x26 = subgrid(x25, x13)\n    x27 = asobject(x26)\n    x28 = matcher(first, x17)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x27, x29)\n    x31 = merge(x30)\n    x32 = palette(x31)\n    x33 = totuple(x32)\n    x34 = lbind(colorcount, x13)\n    x35 = apply(x34, x33)\n    x36 = contained(x337, x35)\n    x37 = branch(x36, height, width)\n    x38 = x37(I)\n    x39 = asobject(x38)\n    x40 = matcher(first, x14)\n    x41 = compose(flip, x40)\n    x42 ="], [1.1, "def solve_2262cba3(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0404b782(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(TWO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x48)\n    x36 = chain(x34, x35, first)\n    x37 = lbind(pair, x21)\n    x38 = chain(size, x37, first)\n    x39 = pair(x38, x23)\n    x40 = sfilter(x39, x"], [1.1, "def solve_bc3a4279(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(subgrid, I)\n    x4 = compose(x3, palette)\n    x5 = fork(equality, identity, x4)\n    x6 = extract(x2, x5)\n    x7 =6(x6)\n    x8 = objects(I, T, F, T)\n    x9 = rbind(colorcount, x8)\n    x10 = argmin(x10, x9)\n    x11 = matcher(first, x13)\n    x12 = rbind(colorcount, x10)\n    x13 = valmax(x12, x12)\n    x14 = rbind(toobject, I)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x13)\n    x17 = matcher(x14, x10)\n    x18 = fork(both, x16, x17)\n    x19 = sfilter(x8, x18)\n    x20 = apply(normalize, x19)\n    x21 = double(x13)\n    x22 = lbind(greater, x21)\n    x23 = chain(x22, asindices, x8)\n    x24 = sfilter(x20, x23)\n    x25 =0040(x24)\n    x26 = matcher(first, x10)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(invert, ulcorner, x27)\n    x29 = fork(shift, identity, x28)\n    x30 = mapply(x29, x25)\n    x31 = normalize(x30)\n    x32 = lbind(shift, x31)\n    x33 = compose(x32, x2)\n    x34 = rbind(multiply, x31)\n    x35 = compose(x34, x30)\n    x36 = argmax(x29, x35)\n    x37 = rbind(shift, x36)\n    x38 = mapply(x37, x22)\n"], [1.1, "def solve_939ec184(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_035c44bb(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, identity, hmirror)\n    x3 = extract(x1, x2)\n    x4 = color(x3)\n    x5 = merge(x1)\n    x6 = compose(hmirror, vmirror)\n    x7 = initset(x6)\n    x8 = insert(vmirror, x7)\n    x9 = insert(hmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 =ette(I)\n    x12 =Ju(x11)\n    x13 = lbind(extract, x12)\n    x14 = lbind(matcher, first)\n    x15 = compose(x13, x14)\n    x16 = extract(x1, x15)\n    x17 = lowermost(x16)\n    x18 = lowermost(x16)\n    x19 = greater(x17, x18)\n    x20 = uppermost(x16)\n    x21 = uppermost(x16)\n    x22 = greater(x20, x21)\n    x23 = rbind(rapply, I)\n    x24 = chain(first, x23, initset)\n    x25 = branch(x19, x24, x22)\n    x26 = branch(x32, x25, x25)\n    x27 = branch(x8, x26, x25)\n    x28 = branch(x4, x27, x25)\n    x29 = branch(x6, x28, x27)\n    x30 = branch(x7, x29, x25)\n    x31 = compose(last, last)\n    x30 = uppermost(x16)\n    x31 = rightmost(x16)\n    x32 = equality(x30, x31)\n    x33 = leftmost(x16)\n    x34 = rightmost(x16)\n    x35 = equality(x33, x34)\n    x36 = astuple(x32, x35)\n    x37 = branch(x34, x36, x34)\n    x"], [1.1, "def solve_06714aad(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = partition(I)\n    x10 = color(x9)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, size)\n    x13 = sfilter(x9, x12)\n    x14 = argmin(x13, size)\n    x15 = remove(x14, x13)\n    x16 = vmirror(x15)\n    x17 = cellwise(x16, x14, x16)\n    x18 = rbind(shoot, UNITY)\n    x19 =17(x18)\n    x20 = lrcorner(x15)\n    x21 = color(x20)\n    x22 = rbind(shoot, x21)\n    x23 =17(x22)\n    x24 = color(x23)\n    x25 = either(x19, x24)\n    x26 = branch(x25, x20, x23)\n    x27 = colorfilter(x1, x6)\n    x28 = rbind(shoot, x DOWN)\n    x29 =17(x28)\n    x30 = rbind(shoot, x29)\n    x31 =17(x30)\n    x32 = width(x16)\n    x33 = rbind(repeat, x32)\n    x34 = chain(x33, x29, first)\n    x35 = rbind(remove, x16)\n    x36 = compose(x35, x34)\n    x37 = power(x36, TWO)\n    x38 = x37(x26)\n    x39 = first(x38)\n    x40 = last(x38)\n    x41 = recolor(x4, x39)\n    x42 = recolor(x5, x40)\n"], [1.1, "def solve_a9078e4d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = lbind(contained, F)\n    x3 = chain(flip, x2, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = sfilter(x1, x5)\n    x7 = difference(x1, x6)\n    x8 = merge(x6)\n    x9 = fill(I, EIGHT, x8)\n    x10 = chain(positive, size, x4)\n    x11 =105(I, TWO)\n    x12 = snfilter(x7, x10)\n    x13 = hmirror(x12)\n    x14 = shift(x13, x12)\n    x15 = merge(x12)\n    x16 = paint(x9, x15)\n    x17 = trim(x16)\n    x18 = branch(x11, x17, x8)\n    x19 = x18(x14)\n    x20 = shift(x19, x15)\n    x21 = UNITY(x20)\n    x22 = color(x21)\n    x23 = palette(x21)\n    x24 = remove(x22, x23)\n    x25 = lbind(colorcount, x8)\n    x26 = argmin(x24, x25)\n    x27 = other(x24, x26)\n    x28 = ofcolor(x18, x27)\n    x29 = ofcolor(x18, x22)\n    x30 = prapply(connect, x28, x29)\n    x31 = mfilter(x30, vline)\n    x32 = difference(x30, x31)\n    x33 = toindices(x31)\n    x34 = apply(urcorner, x33)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x16, x27)\n    x37 = difference(x16, x36)\n    x38 = intersection(x35, x37)\n    x39 = fill(x38, NEG_ONE, x31)\n    "], [1.1, "def solve_c429a5b6(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(multiply, THREE)\n    x4 = rbind(divide, THREE)\n    x5 = compose(x3, x4)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x2, x7)\n    x9 = fork(multiply, first, last)\n    x10 = argmax(x8, x9)\n    x11 = mostcolor(x10)\n    x12 = initset(x11)\n    x13 = subgrid(x12, I)\n    x14 = backdrop(x13)\n    x15 = replace(x14, x11, x15)\n    x16 = compress(x15)\n    x17 = ulcorner(x6)\n    x18 = initset(x17)\n    x19 = toindices(x18)\n    x20 = shift(x19, UNITY)\n    x21 = llcorner(x6)\n    x22 = normalize(x21)\n    x23 = lrcorner(x6)\n    x24 = height(x12)\n    x25 = invert(x24)\n    x26 = toindices(x25)\n    x27 =lrcorner(x6)\n    x28 = normalize(x22)\n    x29 = lbind(shift, x28)\n    x30 = apply(x29, x26)\n    x31 = rbind(multiply, THREE)\n    x32 = rbind(divide, THREE)\n    x33 = papply(equality, x30, x31)\n    x34 = lbind(apply, x22)\n    x35 = lbind(index, x20)\n    x36 = rbind(add, x25)\n    x37 = chain(x34, x35, x36)\n    x38 = fork(recolor, x33, x37)\n    x39 = pair(x19, x8)\n    x40 = mapply(x38, x"], [1.1, "def solve_5c2464d4(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valment(equality, FOUR)\n    x3 = branch(x2, x1, x5)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = astuple(NEG_TWO, ONE)\n    x7 = initset(x6)\n    x8 = insert(x3, x7)\n    x9 = insert(x5, x8)\n    x10 = insert(x4, x9)\n    x11 = finalbox(x10)\n    x12 = ulcorner(x4)\n    x13 = subgrid(x11, I)\n    x14 = halve(x13)\n    x15 = decrement(x14)\n    x16 = height(x114)\n    x17 = halve(x16)\n    x18 = increment(x17)\n    x19 = rbind(subtract, x18)\n    x20 = tojvec(xg)\n    x21 = tojvec(x10)\n    x22 = add(x20, x21)\n    x23 = add(x22, x2)\n    x24 = canvas(x5, x6)\n    x25 = x19(x24)\n    x26 = insert(x13, x25)\n    x27 = subgrid(x26, I)\n    x28 = halve(x17)\n    x29 = tojvec(x28)\n    x30 = tojvec(x21)\n    x31 = add(x29, x30)\n    x32 = initset(x31)\n    x33 = insert(x27, x32)\n    x34 = recolor(x25, x33)\n    x35 = tojvec(x28)\n    x36 = sign(x35)\n    x37 = add(x31, x36)\n    x38 = height(x42)\n    x39 = width(x42)\n    x40 = astuple(x38, x39)\n    x41 = add(x40, x36)\n    x42 = tojvec(x"], [1.1, "def solve_26f6182e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_64f60a86(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rbind(ordering, I)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = rbind(branch, x6)\n    x17 = rbind(x16, x13)\n    x18 = lbind(contained, x3)\n    x19 = compose(x18, x17)\n    x20 = lbind(contained, x7)\n    x21 = compose(x20, x13)\n    x22 = fork(add, identity, x19)\n    x23 = compose(x22, x21)\n    x24 = rbind(add, DOWN)\n    x25 = compose(x24, x23)\n    x26 = rbind(add, UP)\n    x27 = compose(x26, x21)\n    x28 = fork(add, x25, x27)\n    x29 = fork(add, x28, x21)\n    x30 = compose(x11, x22)\n    x31 = fork(add, x19, x30)\n    x32 = fork(astuple, x30, x31)\n    x33 = size(x1)\n    x34 = power(x32, x33)\n    x35 = astuple(x23, x6)\n    x36 = astuple(x48, x22)\n    x37 = combine(x35, x36)\n    x38 = rbind(toobject, x7)\n    x39 = matcher(x38, x39)\n    x40 = extract"], [1.1, "def solve_76977a81(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_a3f54b6d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_91178abf(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_ff6e75f2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_57833c6b(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 =mirror(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(equality, toindices, box)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, toindices, corners)\n    x7 = sfilter(x5, x6)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x8)\n    x10 = insert(x4, x9)\n    x11 = lbind(fork, insert)\n    x12 = lbind(x11, identity)\n    x13 = rbind(compose, x10)\n    x14 = chain(x12, x13, x6)\n    x15 = fork(compose, x4, x9)\n    x16 = fork(x14, x15, x11)\n    x17 = lbind(fork, both)\n    x18 = rbind(compose, x10)\n    x19 = chain(x18, x17, x16)\n    x20 = fork(sfilter, x16, x19)\n    x21 = fork(cce, x20, x6)\n    x22 = compose(x11, x21)\n    x23 = fork(subtract, identity, x22)\n    x24 = chain(invert, ulcorner, x23)\n    x25 = fork(shift, x24, x6)\n    x26 = height(x25)\n    x27 = subtract(x26, x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = rbind(compose, x10)\n    x31 = lbind(compose, x29)\n    x32 = lbind(rbind, sfilter)\n    x33 = compose(x31, x32)\n    x34 = lbind(remove, x29)\n    x35 = chain(x30, x34, x51)\n    x36 = lbind(compose, x31)\n    x37 = lbind(lbind"], [1.1, "def solve_044ad624(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = normalize(x8)\n    x11 = apply(first, x10)\n    x12 = remove(x8, x11)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x15)\n    x17 = lbind(16, x15)\n    x18 = compose(x17, last)\n    x19 = lbind(multiply, x5)\n    x20 = compose(x19, x18)\n    x21 = fork(add, x17, x20)\n    x22 = compose(x17, x21)\n    x23 = fork(equality, identity, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(last, centerofmass)\n    x26 = argmin(x24, x25)\n    x27 = mostcolor(I)\n    x28 = initset(x8)\n    x29 =insert(x77, x28)\n    x30 = insert(x26, x29)\n    x31 = width(I)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = invert(x26)\n    x34 = interval(x30, x33, ZERO)\n    x35 = product(x32, x34)\n    x36 = astuple(x47, x19)\n    x37 = lbind(multiply, x36)\n    x38 = add(x37, x25)\n    x39 = canvas(x27, x38)\n    x40 = apply(x"], [1.1, "def solve_ea8c3c9e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, dmirror)\n    x9 = astuple(cmirror, hmirror)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, vmirror)\n    x12 = astuple(cmirror, hmirror)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = width(x22)\n    x24 = decrement(x23)\n    x25 = tojvec(x24)\n    x26 = index(x22, x25)\n    x27 = asobject(x22)\n    x28 = matcher(first, x26)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x27, x29)\n    x31 = vmirror(x30)\n    x32 = hconcat(x22, x31)\n    x33 = hmirror(x32)\n    x34 = sfilter(x33, x29)\n    x35 = vmirror(x34)\n    x36 = hconcat(x32, x35)\n    x37 = hmirror(x36)\n    x38 = sfilter(x34, x29)\n    x39 = vmirror(x38)"], [1.1, "def solve_6b562355(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = last(x4)\n    x6 = argmin(x5, x2)\n    x7 = last(x6)\n    x8 = normalize(x6)\n    x9 = color(x3)\n    x10 = fill(I, x9, x8)\n    x11 = objects(x10, T, F, T)\n    x12 = argmax(x11, size)\n    x13 = shift(x12, UNITY)\n    x14 = paint(x10, x13)\n    x15 = color(x4)\n    x16 = astuple(x15, x13)\n    x17 = canvas(x16, x14)\n    x18 = shoot(x7, UNITY)\n    x19 = shoot(x7, NEG_UNITY)\n    x20 = combine(x18, x19)\n    x21 = combine(x3, x20)\n    x22 = recolor(x10, x21)\n    x23 = ulcorner(x12)\n    x24 = llcorner(x12)\n    x25 = urcorner(x12)\n    x26 = shoot(x23, UP_RIGHT)\n    x27 = shoot(x23, DOWN_LEFT)\n    x28 = combine(x26, x27)\n    x29 = combine(x25, x28)\n    x30 = underfill(x14, x3, x29)\n    x31 = ulcorner(x12)\n    x32 =740\n     in shifting(x31, x24)\n    x33 = smirror(x32)\n    x34 = shift(x33, x31)\n    x35 =174(x24)\n    x36 =348(x35, x26)\n    x37 = objects(x30, T, F, T)\n    x38 = insert(x37, x37)\n    x39 =262 hash(x38)\n    x40 = shift"], [1.1, "def solve_a6878a86(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, Orn same)\n    x2 = astuple(revline, hline)\n    x3 = astuple(x1, x2)\n    x4 = rbind(ofcolor, ZERO)\n    x5 = compose(center, x4)\n    x6 = fork(subtract, x5, initset)\n    x7 = fork(insert, x6, x4)\n    x8 = compose(backdrop, x7)\n    x9 = mapply(x8, x4)\n    O = fill(I, ZERO, x9)\n    return O"], [1.1, "def solve_88256e35(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = chain(x4, shape, dedupe)\n    x6 = matcher(x5, TWO)\n    x7 = extract(x3, x6)\n    x8 = color(x7)\n    x9 = palette(I)\n    x10 = compose(maximum, shape)\n    x11 = lbind(lbind, manhattan)\n    x12 = rbind(x11, RIGHT)\n    x13 = compose(x12, leftmost)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x9, x14)\n    x16 = difference(x9, x15)\n    x17 = mostcolor(I)\n    x18 = recolor(x17, x16)\n    x19 = apply(initset, x15)\n    x20 = insert(x8, x19)\n    x21 = insert(x5, x20)\n    x22 = backdrop(x21)\n    x23 = cover(I, x22)\n    x24 = fgpartition(x23)\n    x25 = merge(x24)\n    x26 = normalize(x25)\n    x27 = ulcorner(x28)\n    x28 = toindices(x28)\n    x29 = lbind(shift, x28)\n    x30 = height(x12)\n    x31 = matcher(valmax, x30)\n    x32 =7(x31)\n    x33 = mapply(x29, x32)\n    x34 = paint(x23, x33)\n    x35 = combine(x00000000, x28)\n    x36 = cover(x35, x22)\n    O = paint(x36, x22)\n    return O"], [1.1, "def solve_99dae4ee(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = colorfilter(x3, x4)\n    x6 = difference(x1, x5)\n    x7 = compose(ineighbors, center)\n    x8 = rbind(bordering, I)\n    x9 = compose(x8, recolor)\n    x10 = totuple(x5)\n    x11 = apply(x9, x10)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x5)\n    x14 = combine(x12, x5)\n    x15 = repeat(x14, ONE)\n    x16 = combine(x13, x15)\n    x17 = merge(x16)\n    x18 = palette(x17)\n    x19 = lbind(colorcount, x17)\n    x20 = compose(invert, x19)\n    x21 = argmin(x18, x20)\n    x22 = rbind(toobject, I)\n    x23 = apply(x22, x6)\n    x24 = (%)21(x23)\n    x25 = dmirror(x24)\n    x26 = fgpartition(x25)\n    x27 = merge(x26)\n    x28 = cover(I, x27)\n    x29 = chain(double, halve, width)\n    x30 = x29(x28)\n    x31 = invert(x30)\n    x32 = shift(x25, x31)\n    x33 = toivec(x32)\n    x34 = mapply(x22, x27)\n    x35 = lbind(shift, x28)\n    x36 = apply(x35, x34)\n    x37 = mapply(x33, x36)\n    O = paint(x27, x37)\n    return O"], [1.1, "def solve_e2cf8926(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = power(color, TWO)\n    x4 = remove(x2, x1)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = width(I)\n    x8 = interval(ZERO, x7, ONE)\n    x9 = width(I)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = rbind(multiply, x10)\n    x12 = rbind(divide, x10)\n    x13 = compose(x11, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x8, x15)\n    x17 = increment(x16)\n    x18 = canvas(x6, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = rbind(multiply, x10)\n    x21 = compose(x20, first)\n    x22 = argmax(x19, x21)\n    x23 = remove(x22, x19)\n    x24 = lbind(astuple, x10)\n    x25 = lbind(argmax, x23)\n    x26 = lbind(matcher, first)\n    x27 = chain(x24, x25, x26)\n    x28 = apply(x27, x23)\n    x29 = maximum(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = apply(x27, x30)\n    x32 = papply(add, x29, x31)\n    x33 = lbind(shift, x22)\n    x34 = mapply(x33, x3)\n    x35 = shift(x34, x UNITY)\n    O = paint(I, x35)\n    return O"], [1.1, "def solve_77961acf(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = trim(I)\n    x2 = compose(decmirror, merge)\n    x3 = flip(x1)\n    x4 = branch(x3, x2, x5)\n    x5 = x4(I)\n    x6 = objects(x6, T, F, F)\n    x7 = colorfilter(x6, ZERO)\n    x8 = compose(last, toindices)\n    x9 = order(x7, x8)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = astuple(NINE, FOUR)\n    x16 = canvas(ZERO, x15)\n    x17 = increment(x16)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = product(x14, x18)\n    x20 = fork(multiply, first, last)\n    x21 = apply(x20, x19)\n    x22 = lbind(sfilter, x21)\n    x23 = lbind(matcher, first)\n    x24 = compose(x23, x22)\n    x25 = fork(sfilter, identity, x24)\n    x26 = lbind(occurrences, x16)\n    x27 = lbind(rbind, shift)\n    x28 = compose(x26, x27)\n    x29 = fork(mapply, x25, x28)\n    x30 = compose(rot90, x29)\n    x31 = fork(shift, x30, x27)\n    x32 = pair(x27, x workaround)\n    x33 = mapply(x31, x32)\n    O = paint(x16, x33)\n    return O"], [1.1, "def solve_04f31682(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = palette(I)\n    x5 = other(x4, ZERO)\n    x6 = color(x3)\n    x7 = palette(I)\n    x8 = remove(x5, x7)\n    x9 = other(x8, x6)\n    x10 =12(x3)\n    x11 = ofcolor(I, x9)\n    x12 = ofcolor(I, x10)\n    x13 = toindices(x3)\n    x14 =1699(x13)\n    x15 = difference(x11, x14)\n    x16 = objects(I, T, F, T)\n    x17 = colorfilter(x16, x9)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    x20 = cover(I, x19)\n    O = fill(x20, x9, x15)\n    return O"], [1.1, "def solve_bf6d95f4(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = extract(x1, x2)\n    x4 = other(x1, x3)\n    x5 = toindices(x3)\n    x6 = box(x5)\n    x7 = equality(x6,O = fill(I, x4, x5)\n    x8 = llcorner(x3)\n    x9 =89900(x8, x8)\n    x10 = branch(x6, x7, x9)\n    x11 = branch(x6, x4, x5)\n    x12 = branch(x6, x7, x11)\n    x13 = fork(contained, x12, toindices)\n    x14 = extract(x6, x13)\n    x15 = subgrid(x14, x7)\n    x16 = asobject(x15)\n    x17 = shape(x36)\n    x18 = shift(x16, x17)\n    O = paint(x7, x18)\n    return O"], [1.1, "def solve_bd45947d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 =649(x4)\n    O = canvas(x4, x5)\n    return O"], [1.1, "def solve_48dfea2f(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = valmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = color(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x3)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x3)\n    x9 = paint(x7, x8)\n    x10 = height(x2)\n    x11 = width(x2)\n    x12 = normalize(x2)\n    x13 = divide(x10, x11)\n    x14 = divide(x9, x12)\n    x15 = shift(x12, x14)\n    x16 =207(x15)\n    x17 = normalize(x13)\n    x18 = other(x1, x4)\n    x19 = shift(x17, x18)\n    O = paint(x9, x19)\n    return O"], [1.1, "def solve_2b8ff744(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = totuple(x1)\n    x3 = apply(normalize, x2)\n    x4 = mostcommon(x3)\n    x5 = astuple(NEG_TWO, ONE)\n    x6 = astuple(NEG_ONE, ONE)\n    x7 = combine(x5, x6)\n    x8 = rbind(shoot, UNITY)\n    x9 = mapply(x8, x7)\n    x10 = fill(I, ONE, x9)\n    x11 = objects(x10, T, T, T)\n    x12 = apply(normalize, x11)\n    x13 = mapply(x8, x12)\n    x14 = combine(x13, x7)\n    x15 = union(x14, x7)\n    x16 = difference(x9, x15)\n    x17 = toobject(x16, x10)\n    x18 = mostcolor(x17)\n    x19 = fill(x10, x18, x15)\n    x20 = apply(normalize, x12)\n    x21 = rbind(toobject, x19)\n    x22 = apply(x21, x20)\n    x23 = chain(numcolors, x21, box)\n    x24 = matcher(x23, ONE)\n    x25 = fork(both, x24, x22)\n    x26 = extract(x25, x25)\n    x27 = subgrid(x26, x19)\n    x28 = typical printing(x27)\n    x29 = replace(x28, x18, x25)\n    x30 = shift(x29, UNITY)\n    O = paint(x10, x30)\n    return O"], [1.1, "def solve_91321ce3(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(index, I)\n    x4 = compose(x3, color)\n    x5 = fork(recolor, x4, outbox)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(xrcorner, NEG_UNITY)\n    x9 = initset(x8)\n    x10 = insert(x77, x9)\n    x11 =146(x10)\n    x12 = subgrid(x11, x7)\n    x13 = width(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(tojvec, x14)\n    x16 = lbind(shift, x12)\n    x17 = mapply(x16, x15)\n    O = fill(x7, ZERO, x17)\n    return O"], [1.1, "def solve_923dc873(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 =\n    x323 = fill(I, x10, x32)\n    O = fill(x33, x11, x30)\n    return O"], [1.1, "def solve_1ec353d6(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = frontiers(x7)\n    x9 = colorfilter(x8, x4)\n    x10 = sfilter(x9, hline)\n    x11 =\n    x12 = size(x10)\n    x13 = positive(x12)\n    x14 = branch(x13, identity, dmirror)\n    x15 = x14(x4)\n    x16 = subgrid(x15, x7)\n    x17 = shape(x16)\n    x18 = hsplit(x16, x17)\n    x19 = argmin(x18, identity)\n    x20 = x19(x16)\n    x21 = first(x20)\n    x22 = last(x21)\n    x23 = x19(x22)\n    x24 = ofcolor(x23, x4)\n    x25 = subgrid(x24, x16)\n    x26 = asobject(x25)\n    x27 = shift(x26, UNITY)\n    x28 = paint(x27, x27)\n    O = x19(x28)\n    return O"], [1.1, "def solve_43a15052(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, vmirror)\n    x4 = astuple(NEG_TWO, NEG_TWO)\n    x5 = rbind(shift, x4)\n    x6 = apply(x5, x1)\n    x7 = rbind(other, FIVE)\n    x8 = compose(x7, dmirror)\n    x9 = astuple(x3, x8)\n    x10 = x9(UNITY)\n    x11 = size(x10)\n    x12 = decrement(x11)\n    x13 = toindices(x12)\n    x14 = rbind(4444, x13)\n    x15 = toindices(x12)\n    x16 =314(x15, x20)\n    x17 = remove(x16, x15)\n    x18 = fill(I, EIGHT, x17)\n    x19 = x38(x14)\n    x20 = x38(x16)\n    x21 = paint(x18, x19)\n    x22 = urcorner(x20)\n    x23 = ulcorner(x16)\n    x24 = shoot(x22, UP_RIGHT)\n    x25 = shoot(x23, DOWN_LEFT)\n    x26 = branch(x24, x22, x25)\n    O = x22(x26)\n    return O"], [1.1, "def solve_c13298f7(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = lbind(delta, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = chain(size, x4, delta)\n    x6 = matcher(x5, ONE)\n    x7 = fork(both, x4, x6)\n    x8 = sfilter(x1, x7)\n    x9 = difference(x1, x8)\n    x10 = merge(x9)\n    x11 =88885555double(x10)\n    x12 = merge(x8)\n    x13 =8888555562165834\n    x14 = fill(I, SIX, x12)\n    x15 = fill(x14, SEVEN, x13)\n    O = fill(x15, FIVE, x14)\n    return O"], [1.1, "def solve_58fdde77(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subgrid(x3, I)\n    x8 = backdrop(x7)\n    x9 = cover(I, x8)\n    x10 = subgrid(x3, I)\n    x11 =\n    13\n    1001\n    \"\"\"\n    x1 = replace(x9, x11, x10)\n    x2 = objects(x8, T, T, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = normalize(x3)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = sizefilter(x7, x4)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(x9, x4, x10)\n    return O"], [1.1, "def solve_0dd68fec(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor,I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = vsplit(x14, TWO)\n    x16 = hsplit(x15, TWO)\n    x17 = neighbors(x16)\n    x18 = inneighbors(x17)\n    x19 =2ddneighbors(x18)\n    x20 = insert(x19, x8)\n    x21 = rbind(contained, x20)\n    x22 = compose(x21, ulcorner)\n    x23 = sfilter(x16, x22)\n    x24 =olecolor(x23)\n    x25 = order(x23, x24)\n    x26 = last(x25)\n    x27 = ofcolor(x16, x6)\n    x28 = shoot(x26, UP)\n    x29 = shoot(x26, DOWN)\n    x30 = combine(x28, x29)\n    x31 = intersection(x27, x30)\n    x32 = fill(x16, x6, x31)\n    O = fill(x32, x10, x3)\n    return O"], [1.1, "def solve_ad111641(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = backdrop(I)\n    x3 = toobject(x2, I)\n    x4 = matcher(first, x1)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = sizefilter(x6, ONE)\n    x8 = merge(x7)\n    x9 = fill(I, THREE, x8)\n    x10 = compose(dmirror, merge)\n    x11 = x10(x8)\n    x12 = dmirror(x11)\n    x13 = shape(x12)\n    x14 = add(TWO, x13)\n    x15 = crop(x12,IVE, x14)\n    x16 = asobject(x15)\n    x17 = shift(x16, UNITY)\n    O = fill(x9,(34, x17)\n    return O"], [1.1, "def solve_dc27ace2(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =877700(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = apply(x3, x3)\n    x5 = color(x4)\n    x6 = ofcolor(I, x5)\n    x7 = lbind(shift, x6)\n    x8 = rbind(difference, x6)\n    x9 = chain(size, x8, toindices)\n    x10 = argmax(x4, x9)\n    x11 = x9(x10)\n    x12 = difference(x7, x11)\n    x13 = fill(I, x5, x12)\n    O = fill(x13, color, x3)\n    return O"], [1.1, "def solve_f8dd864c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = matcher(x13, x15)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 =93(x10)\n    x20 = sfilter(x17, x16)\n    x21 = mapply(x19, x20)\n    x22 = pair(x21, x3)\n    x23 = sfilter(x22, first)\n    x24 = toindices(x23)\n    x25 = sfilter(x22, last)\n    x26 = fill(x7, x4, x24)\n    x27 = combine(x26, x25)\n    x28 = intersection(x29, x25)\n    x29 = fill(x28, x4, x27)\n    O = fill(x29, x4, x28)\n    return O"], [1.1, "def solve_97104124(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = FIGiers(x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, first)\n    x15 = sfilter(x11, x14)\n    x16 = color(x15)\n    x17 = width(I)\n    x18 = astuple(x17, x16)\n    x19 = canvas(x9, x18)\n    x20 =ath authentic(x17)\n    x21 = matcher(first, x16)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = color(x23)\n    x25 = initset(x24)\n    x26 = cover(I, x25)\n    x27 = insert(x8, x26)\n    x28 = box(x27)\n    x29 = double(x17)\n    x30 = toindices(x27)\n    x31 = fgpartition(x30)\n    x32 = merge(x31)\n    x33 = center(x32)\n    x34 = initset(x33)\n    x35 =477(x24)\n    x36 = shift(x34, x35)\n    x37 = lbind(hfrontier, x36)\n    x38 = compose(x37, center)\n    x39 = fork(recolor, x28, x38)\n    x40 = mapply(x39, x31)\n    O = paint(x20, x40)\n    return O"], [1.1, "def solve_7d617016(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 =467(x4)\n    x6 =44(x5)\n    x7 = repeat(x6, ONE)\n    x8 = combine(x6, x7)\n    x9 = combine(x5, x8)\n    x10 = repeat(x9, ONE)\n    x11 = combine(x4, x10)\n    x12 = combine(x7, x11)\n    x13 = apply(color, x12)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = shift(x15, NEG_UNITY)\n    x17 = fill(I, x4, x16)\n    x18 = shift(x15, UNITY)\n    x19 = fill(x17, x4, x18)\n    x20 = shift(x15, DOWN_LEFT)\n    x21 = fill(x19, x4, x20)\n    x22 = shift(x15, UP_RIGHT)\n    x23 = fill(x21, x4, x22)\n    x24 = shift(x15, RIGHT)\n    x25 = fill(x23, x4, x24)\n    x26 = shift(x15, LEFT)\n    O = fill(x25, x4, x26)\n    return O"], [1.1, "def solve_60a943e4(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, T, T)\n    x3 = first(x2)\n    x4 = mostcolor(x3)\n    x5 = toindices(x3)\n    x6 = contained(ZERO, x5)\n    x7 = toindices(x3)\n    x8 = compose(double, halve)\n    x9 = rbind(matcher, x8)\n    x10 = compose(x9, identity)\n    x11 =452(x5, x6)\n    x12 =452(x5, x10)\n    x13 = argmax(x11, size)\n    x14 = argmax(x11, size)\n    x15 = subgrid(x13, I)\n    x16 = subgrid(x14, I)\n    x17 = width(x9)\n    x18 = halve(x17)\n    x19 = astuple(x18, x18)\n    x20 = objects(x9, T, T, T)\n    x21 =upscale(x20, increment)\n    x22 = height(x23)\n    x23 = halve(x22)\n    x24 = matcher(x11, x23)\n    x25 = sfilter(x23, x24)\n    x26 = height(x25)\n    x27 = halve(x26)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = sfilter(x25, x28)\n    x31 = lbind(shift, x29)\n    x32 = mapply(x31, x30)\n    O = paint(x15, x32)\n    return O"], [1.1, "def solve_c280f601(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmax(x5, x2)\n    x7 = other(x5, x6)\n    x8 = palette(x7)\n    x9 = matchindices(x7)\n    x10 = inbox(x6)\n    x11 = center(x6)\n    x12 = increment(x11)\n    x13 = shift(x10, x12)\n    x14 = difference(x9, x13)\n    x15 =71(x14)\n    x16 = partition(I)\n    x17 = colorcount(I, x7)\n    x18 = carriagement(x17)\n    x19 = invert(x18)\n    x20 = shift(x13, x19)\n    x21 = apply(initset, x20)\n    x22 = rbind(compose, initset)\n    x23 = lbind(rbind, manhattan)\n    x24 = compose(x22, x23)\n    x25 = fork(x24, color, x22)\n    x26 = lbind(shift, x21)\n    x27 = mapply(x26, x25)\n    x28 = astuple(x19, x13)\n    x29 = astuple(x24, x27)\n    x30 = shift(x27, x29)\n    x31 = apply(ulcorner, x25)\n    x32 = mapply(x31, x30)\n    x33 = combine(x27, x32)\n    x34 = shift(x33, x29)\n    x35 = paint(I, x24)\n    O = fill(x35, x7, x34)\n    return O"], [1.1, "def solve_5d0590d1(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = subtract(x2, TWO)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = rbind(shift, x4)\n    x6 = interval(ZERO, x5, FOUR)\n    x7 = rbind(shift, x6)\n    x8 = multiply(x freedom, FOUR)\n    x9 = rbind(toobject, I)\n    x10 = lbind(ofcolor, I)\n    x11 = compose(x9, x10)\n    x12 = lbind(apply, numcolors)\n    x13 = chain(x11, x12, x11)\n    x14 = lbind(mapply, shape)\n    x15 = chain(x14, x13, x11)\n    x16 = compose(x11, x15)\n    x17 = fork(recolor, x16, x14)\n    x18 = mapply(x17, x2)\n    O = paint(I, x18)\n    return O"], [1.1, "def solve_eb7a7667(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 =431(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = x4(x4)\n    x6 = objects(I, T, F, F)\n    x7 = colorfilter(x6, NEG_ONE)\n    x8 = rbind(bordering, I)\n    x9 = compose(flip, x8)\n    x10 = mfilter(x7, x9)\n    x11 = outbox(x5)\n    x12 = backdrop(x11)\n    x13 = subgrid(x12, I)\n    O = hconcat(x13, x4)\n    return O"], [1.1, "def solve_f6d8bc73(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x2)\n    x5 = paint(I, x4)\n    x6 = mapply(toindices, x2)\n    x7 = box(x6)\n    x8 = difference(x7, x6)\n    x9 =441\n     EIGHT(x8)\n    x10 = cover(x5, x9)\n    x11 = mapply(toindices, x6)\n    x12 = box(x11)\n    O = fill(x10, EIGHT, x12)\n    return O"], [1.1, "def solve_cecddfc9(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = corners(x4)\n    x8 = toobject(x7, I)\n    x9 = colorfilter(x8, x5)\n    x10 = argmax(x9, size)\n    x11 = subgrid(x10, I)\n    x12 = increment(x11)\n    x13 = replace(x11, x5, x12)\n    x14 = hmirror(x13)\n    x15 = ulcorner(x10)\n    x16 = remove(x15, x10)\n    x17 = lbind(shift, x16)\n    x18 = height(x11)\n    x19 = divide(x18, x14)\n    x20 = increment(x19)\n    x21 = width(x11)\n    x22 = divide(x21, x14)\n    x23 = increment(x22)\n    x24 = divide(x34, x23)\n    x25 = decrement(x24)\n    x26 = lbind(multiply, x25)\n    x27 = compose(x26, x17)\n    x28 = fork(divide, identity, x27)\n    x29 = equality(x19, x20)\n    x30 = branch(x29, x28, x28)\n    x31 = replace(x30, x5, x10)\n    x32 =707mirror(x31)\n    x33 =7733(x32, x11)\n    x34 = mapply(x33, x6)\n    O = paint(x34, x34)\n    return O"]], "2037f2c7": [[0.4304424599047025, "def solve_329ac679(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = size(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.44973539413730296, "def solve_7dad4e27(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_5269ba31(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_e5ad9a5d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_975f91a7(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_c436538a(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_f6b9a538(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_6b0a524d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_ffb8e6f7(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4733155843162237, "def solve_c5ba83ae(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4898750873388554, "def solve_30883463(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [0.4923960902221772, "def solve_61525be1(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.4923960902221772, "def solve_154f2907(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.5083086331274738, "def solve_58501a55(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5083086331274738, "def solve_59024951(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ZERO, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5124660219282645, "def solve_5808f876(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = crop(x9, ORIGIN, THREE_BY_THREE)\n    O = x8(x10)\n    return O"], [0.5180496905134585, "def solve_ec4594f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5180496905134585, "def solve_680e0654(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5182413270369292, "def solve_2dd93a33(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x2)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5251570172671126, "def solve_6558e738(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5251570172671126, "def solve_119a0a00(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5251570172671126, "def solve_a0ae0bb1(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5341705127937012, "def solve_94fa7f35(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_676d1d48(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_1b0cc30e(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_fa55799d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_d77d7f3f(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5371766746404427, "def solve_294ac5de(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5371766746404427, "def solve_954d3345(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.5389342090692021, "def solve_0c4ccd87(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_d1dadcda(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_871abf89(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5389342090692021, "def solve_030304b2(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.562653757943613, "def solve_82c159f4(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_4bb167d4(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_7a98512f(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_01ca6bdb(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_5a745da3(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_ac571204(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_39459d99(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_bbffd6e0(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.562653757943613, "def solve_c361d17d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.5654205127937012, "def solve_fdc6756e(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.5654205127937012, "def solve_4da37db6(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = rbind(subgrid, I)\n    x6 = apply(x5, x4)\n    x7 = rbind(colorcount, x1)\n    x8 = argmax(x6, x7)\n    x9 = mostcolor(x8)\n    O = canvas(x9, UNITY)\n    return O"], [0.5654205127937012, "def solve_f765d942(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.5675038461270346, "def solve_8257d027(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmin(x1, size)\n    x3 = rbind(adjacent, x2)\n    x4 = remove(x2, x1)\n    x5 = extract(x4, x3)\n    x6 = color(x5)\n    O = canvas(x6, UNITY)\n    return O"], [0.5696230758236387, "def solve_94a61232(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_e0ae06e1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_8322dfa9(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_8706eab6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_4818e176(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_47400a40(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_04790d4a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_7117fca4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5696230758236387, "def solve_562bbe0d(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.570627582735852, "def solve_74a90280(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [0.5862614030933166, "def solve_32ed3b0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5870737823636375, "def solve_f4b4324a(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5870737823636375, "def solve_706f8e2c(I):\n    x1 = compress(I)\n    x2 = astuple(ONE, THREE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5870737823636375, "def solve_f7d3d220(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5870737823636375, "def solve_e6b81a11(I):\n    x1 = compress(I)\n    x2 = astuple(THREE, ONE)\n    x3 = palette(x1)\n    x4 = lbind(colorcount, x1)\n    x5 = compose(invert, x4)\n    x6 = order(x3, x5)\n    x7 = rbind(canvas, UNITY)\n    x8 = apply(x7, x6)\n    x9 = merge(x8)\n    x10 = size(x3)\n    x11 = decrement(x10)\n    x12 = astuple(x11, ONE)\n    O = crop(x9, DOWN, x12)\n    return O"], [0.5962408498640382, "def solve_32ec2de2(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_9ee52ac9(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_29e77463(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_783fe5f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_0b878716(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962408498640382, "def solve_82e2f6b9(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.5962853437491119, "def solve_085192fa(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.5980018302732818, "def solve_933c9dd4(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_95cbcabe(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_ef7ca464(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_3d894e7c(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5980018302732818, "def solve_ccf8f866(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.6057341869347498, "def solve_6901f0de(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.6057341869347498, "def solve_ae660799(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.6076921592043171, "def solve_59db5486(I):\n    x1 = width(I)\n    x2 = astuple(NINE, x1)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = rbind(colorcount, TWO)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.6076921592043171, "def solve_ed1477c9(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6076921592043171, "def solve_96b55e54(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6145641931873815, "def solve_2277f380(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(colorcount, TWO)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.6201635964679443, "def solve_1a5381ef(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.6352501765545244, "def solve_045ccd4d(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6352501765545244, "def solve_6863884c(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6352501765545244, "def solve_d0002638(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.6400120813164292, "def solve_54437ebb(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.6576956120611123, "def solve_658888fd(I):\n    x1 = width(I)\n    x2 = astuple(ONE, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x1)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [0.6595666947116222, "def solve_6f7475de(I):\n    x1 = objects(I, T, T, F)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = upscale(x3, TWO)\n    return O"], [0.6906801139687889, "def solve_cfae83c8(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6906801139687889, "def solve_9848984a(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6906801139687889, "def solve_b9fde2a4(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6906801139687889, "def solve_abfa8b41(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6938245927181472, "def solve_74cfd883(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.6938245927181472, "def solve_edf38271(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.6942200029366766, "def solve_506888b7(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(backdrop, x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7120675270985976, "def solve_d0dbdfc4(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, TWO)\n    x3 = argmin(x1, size)\n    x4 = subgrid(x2, I)\n    x5 = width(x4)\n    x6 = divide(x5, THREE)\n    x7 = upscale(x3, x6)\n    x8 = normalize(x7)\n    x9 = shift(x8, UNITY)\n    O = paint(x4, x9)\n    return O"], [0.7162621771437624, "def solve_0f35b872(I):\n    x1 = objects(I, T, T, F)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7162621771437624, "def solve_3f0cbdb0(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7330246028575503, "def solve_976e87a3(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, F)\n    x3 = vmirror(x1)\n    x4 = valmin(x2, width)\n    O = downscale(x3, x4)\n    return O"], [0.7482042298308174, "def solve_1d9ea605(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = sizefilter(x8, ONE)\n    x10 = merge(x9)\n    O = fill(x5, x7, x10)\n    return O"], [0.7635614912120104, "def solve_fd7ea4d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x8 = mostcolor(I)\n    O = replace(x3, x8, ZERO)\n    return O"], [0.7654076693569447, "def solve_3fb4df6d(I):\n    x1 = compress(I)\n    x2 = objects(I, T, F, T)\n    x3 = compose(backdrop, inbox)\n    x4 = mapply(x3, x2)\n    x5 = fill(x1, TWO, x4)\n    x6 = replace(x5, ZERO, THREE)\n    O = replace(x6, EIGHT, ONE)\n    return O"], [0.7702994509699451, "def solve_3e3464d0(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_c18d4ccd(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_4d02fcf0(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_b4ae5e12(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7702994509699451, "def solve_d33eff07(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_efb2d1d1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_f46e6fa5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_f01319bf(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = mostcolor(x3)\n    O = switch(x3, x4, x5)\n    return O"], [0.7702994509699451, "def solve_f4615557(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7946931652854432, "def solve_7f64990d(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7946931652854432, "def solve_7c90d219(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7946931652854432, "def solve_bacb6439(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.7946931652854432, "def solve_05b805e6(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x6)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [0.8078379565261865, "def solve_eb5ef017(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.8141732132799135, "def solve_a01395d7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8141732132799135, "def solve_e10a7d29(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8141732132799135, "def solve_b79ec602(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8141732132799135, "def solve_d958ee0d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8244257510642915, "def solve_328380c5(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, THREE)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8245794848741997, "def solve_9cb8e070(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.8245794848741997, "def solve_70f8e22d(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.8264892431277836, "def solve_419cf3cc(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = fork(equality, identity, box)\n    x7 = mfilter(x5, x6)\n    O = fill(I, EIGHT, x7)\n    return O"], [0.8277875214971026, "def solve_4840ffc8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8333207685307377, "def solve_01697ab7(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.8372035288420694, "def solve_ed854e1b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.8376932799217021, "def solve_744ccda7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8376932799217021, "def solve_c856c9da(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8446931652854431, "def solve_e87f26a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.8447284563617042, "def solve_e2baa4ed(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [0.8477590843976248, "def solve_f0dd812d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8477590843976248, "def solve_eea5fd08(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8477590843976248, "def solve_eea22200(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8477590843976248, "def solve_eb6b8fa0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8477590843976248, "def solve_2a37d4d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8477590843976248, "def solve_f298f903(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8504311697771865, "def solve_51d87073(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.8504311697771865, "def solve_b33ff441(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.8504311697771865, "def solve_9a92f619(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.8504311697771865, "def solve_7bae9125(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = ofcolor(I, x4)\n    x6 = backdrop(x5)\n    O = fill(I, x4, x6)\n    return O"], [0.8531128635303015, "def solve_5290cdca(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8546978599078291, "def solve_a0eef828(I):\n    x1 = ofcolor(I, TWO)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    x3 = asobject(x2)\n    x4 = lbind(shift, x3)\n    x5 = compose(x4, decrement)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.8586145385877236, "def solve_93a00f75(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = toindices(x2)\n    x4 = normalize(x2)\n    x5 = lbind(shift, x4)\n    x6 = apply(x5, x3)\n    x7 = repeat(x6, ONE)\n    x8 = merge(x1)\n    x9 = paint(I, x8)\n    x10 = shift(x4, DOWN)\n    x11 = paint(x9, x10)\n    x12 = shift(x4, UP)\n    x13 = paint(x11, x12)\n    x14 = shift(x4, RIGHT)\n    x15 = paint(x13, x14)\n    x16 = shift(x4, LEFT)\n    O = paint(x15, x16)\n    return O"], [0.8612587503377638, "def solve_fa769a50(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.8616512583526341, "def solve_0250efdb(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.8616512583526341, "def solve_b7cbbeff(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.8619084413077417, "def solve_c160d500(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEG_ONE, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [0.8619789768786953, "def solve_8057208a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_be55e3bd(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_1c8cd661(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8619789768786953, "def solve_3d599034(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8621335034579425, "def solve_4b937612(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8624266748550173, "def solve_9d100782(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sizefilter(x2, ONE)\n    x4 = difference(x2, x3)\n    x5 = merge(x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8625732149936057, "def solve_8c491ec2(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.8626797193182597, "def solve_6ec58236(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8626797193182597, "def solve_2a7bc0c7(I):\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8626797193182597, "def solve_76cb3a5b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [0.8630873730164433, "def solve_d8f616f6(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    O = replace(x6, ONE, SIX)\n    return O"], [0.8631048928254786, "def solve_e135d3d2(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.8631105583205274, "def solve_92bc64c1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_d05e911f(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_413acdd0(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_8fef82d7(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_8ddbfcbd(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_077cbea7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_46ed6fc9(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8632741339415183, "def solve_5c77c0d2(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, ulcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [0.8632741339415183, "def solve_5ad20741(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = lbind(recolor, ONE)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = chain(x7, x8, ulcorner)\n    x10 = mapply(x6, x2)\n    x11 = mapply(x9, x3)\n    x12 = combine(x10, x11)\n    O = paint(I, x12)\n    return O"], [0.8632787798855505, "def solve_590639ab(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, T)\n    x3 = fork(equality, toindices, backdrop)\n    x4 = sfilter(x2, x3)\n    x5 = lbind(mapply, dneighbors)\n    x6 = chain(x5, corners, outbox)\n    x7 = fork(difference, x6, outbox)\n    x8 = ofcolor(x1, ZERO)\n    x9 = rbind(intersection, x8)\n    x10 = matcher(size, ZERO)\n    x11 = chain(x10, x9, x7)\n    x12 = mfilter(x4, x11)\n    O = fill(x1, ZERO, x12)\n    return O"], [0.8634207638517514, "def solve_5ca7b37f(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = lbind(toobject, x1)\n    x4 = compose(x2, x3)\n    x5 = vmirror(I)\n    x6 = hmirror(I)\n    x7 = astuple(x5, x6)\n    x8 = argmin(x7, x4)\n    O = subgrid(x1, x8)\n    return O"], [0.8635849561251593, "def solve_978d56a4(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = merge(x1)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O"], [0.8635849561251593, "def solve_ad2a022d(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = merge(x1)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O"], [0.8636023351419029, "def solve_a5d59e74(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.863678348633302, "def solve_d0615518(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.8637655013322291, "def solve_79f12711(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.8637655013322291, "def solve_293dbbc7(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.8637895706662064, "def solve_627ee064(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = difference(x2, x5)\n    x7 = compose(hfrontier, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [0.8638448240547932, "def solve_66f08405(I):\n    x1 = vmirror(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = sizefilter(x2, ONE)\n    x6 = apply(initset, x4)\n    x7 = lbind(argmin, x6)\n    x8 = lbind(rbind, manhattan)\n    x9 = compose(x7, x8)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x5)\n    x12 = merge(x5)\n    x13 = cover(I, x12)\n    O = paint(x13, x11)\n    return O"], [0.8638448240547932, "def solve_4a07175d(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = mapply(x11, x7)\n    x13 = merge(x2)\n    x14 = cover(I, x13)\n    O = paint(x14, x12)\n    return O"], [0.8638701955087361, "def solve_65a5738c(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    O = fill(I, ONE, x4)\n    return O"], [0.8638701955087361, "def solve_ee94e22a(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, urcorner)\n    x19 = fork(recolor, x8, toindices)\n    x20 = fork(combine, x18, x19)\n    x21 = lbind(shift, x11)\n    x22 = compose(x21, x20)\n    x23 = fork(recolor, x7, x22)\n    x24 = fork(combine, x20, x23)\n    x25 = lbind(gravitate, x4)\n    x26 = compose(x25, x4)\n    x27 = fork(add, x26, x25)\n    x28 = fork(paint, identity, x27)\n    x29 = rbind(other, x9)\n    x30 = compose(x29, palette)\n    x31 = fork(9, x30, box)\n    x32 = fork(difference, x31, x30)\n    x33 = fork(recolor, x30, x32)\n    x34 = mapply(x33, x12)\n    O = paint(I, x34)\n    return O"], [0.8638701955087361, "def solve_94555d57(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_d7cdeac4(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.8638701955087361, "def solve_143ac7a0(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_9ad194bb(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_5e09e502(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = astuple(TWO, FOUR)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, first)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, normalize)\n    x12 = chain(x8, x6, normalize)\n    x13 = fork(apply, x11, x12)\n    x14 = compose(x9, normalize)\n    x15 = fork(mapply, x14, x13)\n    x16 = astuple(cmirror, dmirror)\n    x17 = astuple(hmirror, vmirror)\n    x18 = combine(x16, x17)\n    x19 = product(x18, x18)\n    x20 = fork(compose, first, last)\n    x21 = apply(x20, x19)\n    x22 = totuple(x21)\n    x23 = combine(x18, x22)\n    x24 = rapply(x23, x2)\n    x25 = mapply(x15, x24)\n    O = paint(I, x25)\n    return O"], [0.8638701955087361, "def solve_868d7400(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.8638701955087361, "def solve_bbbac286(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, TWO, x8)\n    return O"], [0.8638701955087361, "def solve_5c0dc248(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_99f30dc0(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = rbind(contained, x2)\n    x4 = compose(x3, palette)\n    x5 = sfilter(x1, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(first, x6, color)\n    x8 = fork(gravitate, identity, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, x5)\n    x11 = merge(x5)\n    x12 = cover(I, x11)\n    O = paint(x12, x10)\n    return O"], [0.8638701955087361, "def solve_8e87cccf(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.8638701955087361, "def solve_a05665fc(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 = toivec(x4)\n    x7 = tojvec(x5)\n    x8 = add(x7, ZERO_BY_TWO)\n    x9 = add(x6, TWO_BY_ZERO)\n    x10 = shift(x3, x8)\n    x11 = fill(I, TWO, x10)\n    x12 = ofcolor(x11, TWO)\n    x13 = hmirror(x12)\n    x14 = shift(x13, x9)\n    x15 = fill(x11, TWO, x14)\n    x16 = size(x1)\n    x17 = greater(x16, FOUR)\n    O = branch(x17, I, x15)\n    return O"], [0.8638701955087361, "def solve_3f8f4ae2(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.8638701955087361, "def solve_92cc7fd7(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8638701955087361, "def solve_ad77ac8f(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = sizefilter(x2, ONE)\n    x4 = product(x3, x3)\n    x5 = fork(vmatching, first, last)\n    x6 = sfilter(x4, x5)\n    x7 = compose(color, first)\n    x8 = fork(recolor, x7, last)\n    x9 = mapply(x8, x6)\n    O = paint(I, x9)\n    return O"], [0.8638763240862932, "def solve_01d8625f(I):\n    x1 = objects(I, T, T, T)\n    x2 = apply(delta, x1)\n    x3 = mfilter(x2, square)\n    O = fill(I, TWO, x3)\n    return O"], [0.8638763240862932, "def solve_0f0aa5d5(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8638942227796885, "def solve_423bd1a0(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = merge(x3)\n    x5 = delta(x4)\n    x6 = first(x5)\n    x7 = neighbors(x6)\n    O = fill(I, FOUR, x7)\n    return O"], [0.8639170099334305, "def solve_249b45a4(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.8639438916538609, "def solve_e1110901(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_e6c0cfd5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_ecc10dbf(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_ee001fc8(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_bbccdc36(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_a6fef1d5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_eecc6e67(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_7e66e451(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_085c22b1(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_4206cc57(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639835741935432, "def solve_a8143d0d(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_0622d357(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8640364842464535, "def solve_6423b941(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8641055374445505, "def solve_3b7f1aae(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, leftmost)\n    x6 = argmax(x4, leftmost)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = leftmost(x5)\n    x10 = leftmost(x6)\n    x11 = subtract(x10, x9)\n    x12 = double(x11)\n    x13 = multiply(THREE, TEN)\n    x14 = interval(x9, x13, x12)\n    x15 = interval(x10, x13, x12)\n    x16 = compose(vfrontier, tojvec)\n    x17 = mapply(x16, x14)\n    x18 = mapply(x16, x15)\n    x19 = recolor(x7, x17)\n    x20 = recolor(x8, x18)\n    x21 = combine(x19, x20)\n    x22 = paint(x3, x21)\n    O = x2(x22)\n    return O"], [0.8641055374445505, "def solve_e0ef740f(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, leftmost)\n    x6 = argmax(x4, leftmost)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = leftmost(x5)\n    x10 = leftmost(x6)\n    x11 = subtract(x10, x9)\n    x12 = double(x11)\n    x13 = multiply(THREE, TEN)\n    x14 = interval(x9, x13, x12)\n    x15 = interval(x10, x13, x12)\n    x16 = compose(vfrontier, tojvec)\n    x17 = mapply(x16, x14)\n    x18 = mapply(x16, x15)\n    x19 = recolor(x7, x17)\n    x20 = recolor(x8, x18)\n    x21 = combine(x19, x20)\n    x22 = paint(x3, x21)\n    O = x2(x22)\n    return O"], [0.864145266847158, "def solve_31be3881(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(shift, x2)\n    x5 = lbind(mapply, x4)\n    x6 = double(TEN)\n    x7 = interval(FOUR, x6, FOUR)\n    x8 = rbind(apply, x7)\n    x9 = lbind(position, x2)\n    x10 = lbind(rbind, multiply)\n    x11 = chain(x8, x10, x9)\n    x12 = compose(x5, x11)\n    x13 = fork(recolor, color, x12)\n    x14 = mapply(x13, x3)\n    O = paint(I, x14)\n    return O"], [0.8641683969811057, "def solve_d85dfa50(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = equality(x2, ONE)\n    x4 = interval(ONE, NINE, ONE)\n    x5 = apply(double, x4)\n    x6 = apply(decrement, x5)\n    x7 = papply(astuple, x6, x5)\n    x8 = apply(ulcorner, x1)\n    x9 = lbind(shift, x7)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8642201225067311, "def solve_001c9a13(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8642201225067311, "def solve_829e05ed(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8642201225067311, "def solve_66a8c18f(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8643350082204696, "def solve_88860d29(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643350082204696, "def solve_ed649a75(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643350082204696, "def solve_8649cd61(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643350082204696, "def solve_8242172e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.8643386284959661, "def solve_1fb0fa68(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_194809c8(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643386284959661, "def solve_15802919(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8643498745598436, "def solve_200905ad(I):\n    x1 = fgpartition(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(other, TWO)\n    x4 = extract(x2, x3)\n    x5 = color(x4)\n    x6 = merge(x2)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.8644874226901992, "def solve_0a6f067b(I):\n    x1 = portrait(I)\n    x2 = branch(x1, dmirror, identity)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, leftmost)\n    x6 = argmax(x4, leftmost)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = leftmost(x5)\n    x10 = leftmost(x6)\n    x11 = subtract(x10, x9)\n    x12 = double(x11)\n    x13 = multiply(THREE, TEN)\n    x14 = interval(x9, x13, x12)\n    x15 = interval(x10, x13, x12)\n    x16 = compose(vfrontier, tojvec)\n    x17 = mapply(x16, x14)\n    x18 = mapply(x16, x15)\n    x19 = recolor(x7, x17)\n    x20 = recolor(x8, x18)\n    x21 = combine(x19, x20)\n    x22 = paint(x3, x21)\n    O = x2(x22)\n    return O"], [0.8651967139847488, "def solve_b66e773f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.8656237858337551, "def solve_4f85f238(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.8656237858337551, "def solve_51c0bd89(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = mapply(outbox, x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.8670447986833393, "def solve_48549828(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.8670447986833393, "def solve_645b7298(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x1, size)\n    x4 = valmin(x1, size)\n    x5 = sizefilter(x2, x4)\n    x6 = recolor(ONE, x3)\n    x7 = merge(x5)\n    x8 = paint(I, x6)\n    O = fill(x8, EIGHT, x7)\n    return O"], [0.867234982283661, "def solve_e99097b3(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(ulcorner, x1)\n    x3 = apply(urcorner, x1)\n    x4 = apply(llcorner, x1)\n    x5 = apply(lrcorner, x1)\n    x6 = shift(x2, NEG_UNITY)\n    x7 = shift(x3, UP_RIGHT)\n    x8 = shift(x4, DOWN_LEFT)\n    x9 = shift(x5, UNITY)\n    x10 = fill(I, ONE, x7)\n    x11 = fill(x10, TWO, x8)\n    x12 = fill(x11, THREE, x9)\n    O = fill(x12, FOUR, x9)\n    return O"], [0.8675050263928483, "def solve_d734b4ff(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = width(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = interval(x10, x11, FOUR)\n    x13 = add(x4, THREE)\n    x14 = width(I)\n    x15 = interval(x13, x14, FOUR)\n    x16 = apply(tojvec, x12)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = lbind(astuple, x18)\n    x20 = apply(x19, x15)\n    x21 = combine(x16, x20)\n    O = fill(x9, FIVE, x21)\n    return O"], [0.895840777338116, "def solve_df7f17c7(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.895840777338116, "def solve_3377862c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_2db9667f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_8d5a3316(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert( hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.895840777338116, "def solve_2d52eeaf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_9adc7bbf(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = merge(x3)\n    x6 = recolor(ONE, x5)\n    x7 = merge(x4)\n    x8 = recolor(TWO, x7)\n    x9 = paint(I, x6)\n    O = paint(x9, x8)\n    return O"], [1.0, "def solve_ae243571(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x4(I)\n    x8 = x5(I)\n    x9 = index(x7, ORIGIN)\n    x10 = shape(x8)\n    x11 = decrement(x10)\n    x12 = index(x8, x11)\n    x13 = first(x12)\n    x14 = mostcolor(x13)\n    x15 = mostcolor(x8)\n    x16 = palette(I)\n    x17 = remove(x14, x16)\n    x18 = remove(x13, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x7, x19)\n    x22 = ofcolor(x8, x20)\n    x23 = intersection(x21, x22)\n    x24 = canvas(ZERO, x14)\n    O = fill(x24, THREE, x23)\n    return O"], [1.0, "def solve_46fe873f(I):\n    x1 = rot180(I)\n    x2 = rot270(I)\n    x3 = hconcat(I, x1)\n    x4 = hconcat(x3, x2)\n    O = vconcat(x4, x4)\n    return O"], [1.0, "def solve_981b4f43(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argip, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_7c9c9007(I):\n    x1 = objects(I, T, F, F)\n    x2 = objects(I, F, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(remove, x3)\n    x9 = compose(x8, last)\n    x10 = fork(connect, first, x9)\n    x11 = rbind(branch, registry)\n    x12 = rbind(colorcount, x1)\n    x13 = chain(most, x11, x12)\n    x14 = fork(subtract, x7, x13)\n    x15 = fork(shoot, identity, x14)\n    x16 = mapply(x15, x4)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_955a37d4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = valmax(x4, size)\n    x6 = apply(color, x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_1c289a1a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = argmax(x2, size)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = difference(x1, x5)\n    x7 = toobject(x6, I)\n    x8 = color(x7)\n    x9 = mostcolor(I)\n    x10 = matcher(first, x8)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(recolor, x9)\n    x14 = chain(x12, x13, x8)\n    x15 = fork(paint, identity, x14)\n    x16 = lbind(remove, x5)\n    x17 = compose(x16, palette)\n    x18 = fork(remove, x17, x24)\n    x19 = chain(x16, x17, x18)\n    x20 = chain(x5, x17, x19)\n    x21 = fork(combine, x19, x20)\n    x22 = lbind(apply, x21)\n    x23 = lbind(ofcolor, x4)\n    x24 = compose(x23, x22)\n    x25 = fork(product, x23, x24)\n    x26 = compose(x5, x22)\n    x27 = fork(power, x25, x26)\n    x28 = lbind(mapply, x21)\n    x29 = lbind(ofcolor, x4)\n    x30 = compose(x28, x29)\n    x31 = fork(307, x27, x30)\n    x32 = mapply(x31, x2)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_8b9ceea5(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = decrement(x3)\n    x5 = tojvec(x4)\n    x6 = rbind(shoot, x5)\n    x7 = mapply(x6, x2)\n    x8 = fill(I, EIGHT, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = hconcat(x9, x9)\n    O = vconcat(x10, x10)\n    return O"], [1.0, "def solve_36266b70(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = chain(first, last, first)\n    x6 = x5(x4)\n    x7 = lbind(matcher, first)\n    x8 = compose(x7, x6)\n    x9 = chain(last, x7, x8)\n    x10 = fork(subtract, identity, x9)\n    x11 = fork(shoot, identity, x10)\n    x12 = lbind(power, outbox)\n    x13 = chain(x12, x11, x9)\n    x14 = fork(rapply, x13, identity)\n    x15 = compose(x14, x9)\n    x16 = fork(combine, x11, x15)\n    x17 = fork(recolor, x10, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_e90815f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, hmirror)\n    x8 = x7(I)\n    x9 = objects(x8, T, F, T)\n    x10 = compose(dmirror, merge)\n    x11 = center(x10)\n    x12 = x11(x9)\n    x13 = x7(x12)\n    x14 = x7(x13)\n    x15 = intersection(x7, x14)\n    x16 = outbox(x15)\n    x17 = center(x16)\n    x18 = difference(x19, x17)\n    x19 = objects(x8, T, F, T)\n    x20 = sfilter(x19, x3)\n    x21 = compose(hmirror, center)\n    x22 =cat(x20, x21)\n    x23 = x7(x22)\n    x24 = ofcolor(x23, ZERO)\n    x25 = asindices(x23)\n    x26 = outbox(x25)\n    x27 = ulcorner(x26)\n    x28 = invert(x27)\n    x29 = shift(x25, x28)\n    O = paint(x23, x29)\n    return O"], [1.0, "def solve_d21edb08(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = other(x2, x5)\n    x7 = height(x5)\n    x8 = width(x5)\n    x9 = color(x6)\n    x10 = ofcolor(I, x9)\n    x11 = ofcolor(I, x1)\n    x12 = position(x11, x10)\n    x13 = shape(x5)\n    x14 = canvas(x9, x13)\n    x15 = normalize(x5)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x12)\n    O = fill(x14, x10, x17)\n    return O"], [1.0, "def solve_322a9df1(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(vfrontier, x2)\n    x4 = underfill(I, EIGHT, x3)\n    x5 = hconcat(x4, x4)\n    O = vconcat(x5, x5)\n    return O"], [1.0, "def solve_8f2ed3ce(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_5b554944(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = greater(x14, x13)\n    x16 = substgrid(x15, x7)\n    x17 = height(x7)\n    x18 = decrement(x17)\n    x19 = lbind(subtract, x18)\n    x20 = compose(normalize, toindices)\n    x21 = chain(x19, x20, last)\n    x22 = fork(equality, first, x21)\n    x23 = sfilter(x6, x22)\n    x24 = repeat(x23, ONE)\n    x25 = combine(x3, x24)\n    x26 = interval( SEVEN, ONE, ONE)\n    x27 = pair(x26, x25)\n    x28 = sfilter(x27, first)\n    x29 = compose(last, last)\n    x30 = pair(x28, x29)\n    x31 = compose(first, last)\n    x32 = fork(add, x31, x21)\n    x33 = fork(connect, x29, x32)\n    x34 = fork(recolor, first, x33)\n    x35 = mapply(x34, x21)\n    x36 = paint(x7, x35)\n    O = cover(x36, x85)\n    return O"], [1.0, "def solve_c4051af4(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_2a250db2(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, numcolors)\n    x6 = sfilter(x1, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = switch(x3, TWO, ZERO)\n    x9 = lbind(occurrences, x8)\n    x10 = lbind(lbind, shift)\n    x11 = compose(x7, ulcorner)\n    x12 = matcher(first, TWO)\n    x13 = compose(flip, x12)\n    x14 = rbind(sfilter, x12)\n    x15 = rbind(sfilter, x13)\n    x16 = lbind(index, x8)\n    x17 = compose(x16, x15)\n    x18 = chain(e179, x17, ulcorner)\n    x19 = matcher(x18, ZERO)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(x191, x21, ulcorner)\n    x23 = lbind(rbind, shift)\n    x24 = chain(x22, x23, xcorner)\n    x25 = fork(combine, x20, x24)\n    x26 = fork(recolor, x21, x25)\n    x27 = mapply(x26, x6)\n    O = paint(x3, x27)\n    return O"], [1.0, "def solve_cd1a9930(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = lbind(apply, x3)\n    x5 = chain(even, maximum, x4)\n    x6 = lbind(sfilter, x1)\n    x7 = fork(add, first, last)\n    x8 = rbind(remove, x2)\n    x9 = compose(center, last)\n    x10 = fork(subtract, first, x9)\n    x11 = compose(x5, x10)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(argmin, x2)\n    x14 = chain(x7, x4, x10)\n    x15 = lbind(lbind, astuple)\n    x16 = lbind(rbind, astuple)\n    x17 = lbind(compose, x11)\n    x18 = lbind(compose, x14)\n    x19 = compose(x18, x15)\n    x20 = compose(x18, x16)\n    x21 = compose(x13, x19)\n    x22 = rbind(compose, x21)\n    x23 = lbind(lbind, valmin)\n    x24 = rbind(compose, x19)\n    x25 = chain(x24, x23, x8)\n    x26 = lbind(fork, greater)\n    x27 = fork(x26, x25, x20)\n    x28 = chain(x6, x17, x16)\n    x29 = chain(x6, x22, x12)\n    x30 = fork(intersection, x28, x29)\n    x31 = compose(x6, x27)\n    x32 = fork(intersection, x30, x31)\n    x33 = fork(recolor, color, x32)\n    x34 = mapply(x33, x2)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_208d58a7(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher( x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_9e34513c(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(ONE, THREE)\n    x3 = size(x1)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = shoot(x2, x5)\n    x7 = remove(ZERO, x1)\n    x8 = other(x7, x6)\n    x9 = papply(recolor, x8, x7)\n    x10 = mapply(delta, x9)\n    x11 = cover(I, x10)\n    x12 = first(x1)\n    x13 = shape(x12)\n    x14 = subtract(x12, x13)\n    x15 = first(x14)\n    x16 = first(x12)\n    x17 = center(x12)\n    x18 = sign(x12)\n    x19 = branch(x18, x16, x17)\n    O = move(x11, x19, x10)\n    return O"], [1.0, "def solve_49719227(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(sordering, I)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = mostcolor(I)\n    x9 = colorfilter(x1, x8)\n    x10 = rbind(bordering, I)\n    x11 = compose(flip, x10)\n    x12 = mfilter(x9, x11)\n    O = fill(I, ONE, x12)\n    return O"], [1.0, "def solve_23b492a8(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_8a1db069(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x8)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, x1)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_03953fb5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = height(x2)\n    x7 = width(x2)\n    x8 = divide(x6, x7)\n    x9 = width(x2)\n    x10 = divide(x7, x9)\n    x11 = width(x2)\n    x12 = divide(x10, x11)\n    x13 = ratioscorner(x2)\n    x14 = normalize(x2)\n    x15 = lbind(shift, x14)\n    x16 = height(x2)\n    x17 = equality(x16, x8)\n    x18 = difference(x15, x17)\n    x19 = color(x3)\n    x20 = recolor(x19, x18)\n    x21 = normalize(x2)\n    x22 = lbind(shift, x21)\n    x23 = height(x2)\n    x24 = rbind(multiply, x23)\n    x25 = portrait(x2)\n    x26 = branch(x25, x24, x25)\n    x27 = paint(I, x26)\n    O = switch(x27, x10, EIGHT)\n    return O"], [1.0, "def solve_ceadfa55(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_c9bc08f0(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, vline)\n    x6 = sfilter(x2, hline)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x7)\n    x9 = fill(x8, THREE, x6)\n    O = fill(x9, FOUR, x5)\n    return O"], [1.0, "def solve_864f108d(I):\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = uppermost(x4)\n    x9 = remove(x8, x4)\n    x10 = height(x6)\n    x11 = width(x6)\n    x12 = interval(ZERO, x10, x11)\n    x13 = increment(x8)\n    x14 = interval(ZERO, x11, x13)\n    x15 = product(x12, x14)\n    x16 = lbind(sfilter, x12)\n    x17 = lbind(matcher, compose)\n    x18 = compose(x16, x17)\n    x19 = apply(x18, x15)\n    x20 = lbind(shift, x4)\n    x21 = mapply(x20, x19)\n    x22 = paint(I, x21)\n    x23 = urcorner(x4)\n    x24 = lbind(shift, x4)\n    x25 = mapply(x24, x23)\n    x26 = paint(x22, x25)\n    x27 = objects(x26, T, F, T)\n    x28 = apply(toivec, x27)\n    x29 = shift(x28, x2)\n    O = paint(x26, x29)\n    return O"], [1.0, "def solve_186b2e65(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_23e2b74d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = argmin(x4, x2)\n    O = subgrid(x5, I)\n    return O"], [1.0, "def solve_ae2a0af4(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(subgrid, I)\n    x3 = chain(palette, trim, x2)\n    x4 = objects(I, T, F, T)\n    x5 = sfilter(x4, x3)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = mostcolor(x7)\n    x9 = merge(x6)\n    x10 = fill(I, x8, x9)\n    x11 = compose(flip, x6)\n    x12 = sfilter(x7, x11)\n    x13 = merge(x12)\n    x14 = fill(x10, x8, x13)\n    x15 = compose(flip, x6)\n    x16 = sfilter(x14, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, x15, x16)\n    x20 = canvas(x8, THREE_BY_THREE)\n    x21 = compose(color, first)\n    x22 = rbind(remove, x21)\n    x23 = compose(x22, first)\n    x24 = fork(remove, last, x23)\n    x25 = compose(leftmost, x24)\n    x26 = compose(tojvec, x25)\n    x27 = fork(mapply, x26, x25)\n    x28 = fork(recolor, x21, x27)\n    x29 = mapply(x28, x3)\n    O = paint(x19, x29)\n    return O"], [1.0, "def solve_231ab1e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_a7a9e2d6(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = toindices(x4)\n    x6 = lbind(contained, ZERO)\n    x7 = compose(x6, outbox)\n    x8 = fork(multiply, height, width)\n    x9 = compose(decrement, x8)\n    x10 = lbind(greater, x5)\n    x11 = compose(x10, x7)\n    x12 = fork(00000000, height, x11)\n    x13 = fork(vconcat, identity, x12)\n    x14 = lbind(\n     decrement, x9)\n    x15 = lbind(toobject, x4)\n    x16 = compose(x14, x15)\n    x17 = compose(x7, x16)\n    x18 = sfilter(x1, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = chain(x21, positive, decrement)\n    x23 = rbind(toobject, x3)\n    x24 = compose(x22, x23)\n    x25 = sfilter(x2, x24)\n    x26 = lbind(colorcount, I)\n    x27 = argmin(x25, x26)\n    x28 = ofcolor(x13, x27)\n    x29 = ofcolor(x18, x27)\n    x30 = combine(x28, x29)\n    x31 = mapply(x30, x30)\n    x32 = difference(x31, x2)\n    O = fill(x3, x27, x32)\n    return O"], [1.0, "def solve_aea1bb7d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = argmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_e5f2b1f9(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = extract(x3, x2)\n    x5 = color(x4)\n    x6 = extract(x1, x2)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, x5, x8)\n    return O"], [1.0, "def solve_37ee6427(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = shape(x2)\n    x8 = add(x7, TWO_BY_TWO)\n    x9 = canvas(ZERO, x8)\n    x10 = asobject(x2)\n    x11 = shift(x10, UNITY)\n    x12 = paint(x9, x11)\n    x13 = interval(ONE, SIX, ONE)\n    x14 = paint(x12, x13)\n    x15 = fork(shift, identity, dmirror)\n    x16 = x15(x14)\n    x17 = lbind(shift, x14)\n    x18 = compose(x17, tojvec)\n    x19 = rbind(compose, initset)\n    x20 = lbind(rbind, manhattan)\n    x21 = chain(x19, x20, toindices)\n    x22 = chain(x18, x21, leftmost)\n    x23 = fork(shift, identity, x22)\n    x24 = compose(x19, x23)\n    x25 = rbind(other, x5)\n    x26 = compose(x25, palette)\n    x27 = fork(recolor, x24, x26)\n    x28 = apply(x27, x3)\n    x29 = mapply(x28, x2)\n    O = paint(x12, x29)\n    return O"], [1.0, "def solve_77701a1a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [1.0, "def solve_443001ba(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, SIX)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, center, x11)\n    x13 = mapply(x12, x3)\n    x14 = fill(x5, ONE, x13)\n    O = paint(x14, x2)\n    return O"], [1.0, "def solve_b93ab304(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = leastcolor(I)\n    x5 = mostcolor(I)\n    x6 = ofcolor(I, x4)\n    x7 = inbox(x6)\n    x8 = fill(I, x4, x7)\n    x9 = mapply(dneighbors, x6)\n    x10 = leastcolor(I)\n    x11 = fill(x8, x10, x10)\n    x12 = solve(urcorner, x6)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x11, x14)\n    x16 = ofcolor(x15, x4)\n    x17 = box(x16)\n    x18 = fill(x15, x4, x17)\n    x19 = mapply(dneighbors, x16)\n    x20 = box(x19)\n    O = fill(x18, x4, x20)\n    return O"], [1.0, "def solve_da4a58dd(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [1.0, "def solve_5f5c3f34(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = urcorner(x2)\n    x4 = shoot(x3, UP_RIGHT)\n    x5 = shoot(x3, DOWN_LEFT)\n    x6 = rbind(shoot, UNITY)\n    x7 = mapply(x6, x4)\n    x8 = subgrid(x7, I)\n    O = replace(x8, EIGHT, ONE)\n    return O"], [1.0, "def solve_b17cc63a(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = other(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x2)\n    x6 = shift(x5, UNITY)\n    x7 = toindices(x6)\n    x8 = normalize(x3)\n    x9 = lbind(argmin, x8)\n    x11 = lbind(rbind, manhattan)\n    x12 = rbind(compose, initset)\n    x13 = chain(x12, x11, initset)\n    x14 = chain(first, x9, x13)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x7)\n    x17 = paint(x4, x16)\n    x18 = fork(connect, ulcorner, lrcorner)\n    x19 = x18(x7)\n    x20 = fork(combine, identity, vmirror)\n    x21 = x20(x19)\n    x22 = intersection(x7, x21)\n    O = fill(x17, EIGHT, x22)\n    return O"], [1.0, "def solve_bfda462c(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = hconcat(x3, x3)\n    x5 = hconcat(x4, x3)\n    x6 = vconcat(x5, x5)\n    x7 = vconcat(x6, x5)\n    O = cellwise(x2, x7, ZERO)\n    return O"], [1.0, "def solve_462d47cf(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = argmax(x5, size)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = subgrid(x7, I)\n    x10 = subgrid(x6, I)\n    x11 = width(x9)\n    x12 = matcher(width, x11)\n    x13 = fork( subtract, first, last)\n    x14 = ulcorner(x6)\n    x15 = lbind(subtract, x14)\n    x16 = subgrid(x6, x9)\n    x17 = rbind(multiply, x15)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = argmax(x12, x18)\n    x20 = remove(x19, x12)\n    x21 = rbind(colorcount, x4)\n    x22 = argmax(x20, x21)\n    x23 = rbind(colorcount, x4)\n    x24 = valmax(x23, x18)\n    x25 = matcher(x24, x22)\n    x26 = sfilter(x2, x25)\n    x27 = argmax(x26, x28)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = lbind(upscale, x27)\n    x31 = chain(x30, x29, width)\n    x32 = fork(2200, x31, x31)\n    x33 = chain(invert, x30, x32)\n    x34 = fork(shoot, identity, x33)\n    x35 = mapply(x34, x22)\n    x36 = combine(x35, x31)\n    O = fill(x9, ONE, x36)\n    return O"], [1.0, "def solve_a3b57390(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = fork(equality, toindices, corners)\n    x4 = fork(multiply, height, width)\n    x5 = sfilter(x1, x3)\n    x6 = argmax(x5, x4)\n    x7 = difference(x2, x6)\n    x8 = mostcolor(I)\n    x9 = fill(I, x8, x7)\n    x10 = normalize(x7)\n    x11 = ulcorner(x6)\n    x12 = increment(x11)\n    x13 = shift(x10, x12)\n    O = paint(x9, x13)\n    return O"], [1.0, "def solve_079e7ee3(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(ulcorner, frontiers)\n    x6 = lbind(shift, x4)\n    x7 = compose(x6, toindices)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_3aa24c68(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(bordering, x1)\n    x3 = compose(flip, x2)\n    x4 = mfilter(x1, x3)\n    x5 = fill(I, TWO, x4)\n    O = replace(x5, ONE, SIX)\n    return O"], [1.0, "def solve_04c3eb5c(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = chain(dmirror, merge, x3)\n    x5 = x4(x3)\n    x6 = lbind(chain, cellwise)\n    x7 = lbind(x6, x4)\n    x8 = lbind(rbind, occurrences)\n    x9 = chain(x7, x8, ZERO)\n    x10 = matcher(x9, TWO)\n    x11 = mfilter(x1, x10)\n    x12 = leastcolor(x11)\n    x13 = trim(x11)\n    x14 = box(x13)\n    x15 = fill(I, x12, x14)\n    x16 = inbox(x13)\n    x17 = palette(x16)\n    x18 = objects(x15, T, F, T)\n    x19 = colorfilter(x18, x12)\n    x20 = argmax(x19, size)\n    x21 = delta(x20)\n    x22 = first(x21)\n    x23 = vmirror(x22)\n    x24 = asobject(x23)\n    x25 = shape(x20)\n    x26 = lbind(shift, x24)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x19)\n    x29 = mapply(x24, x28)\n    O = paint(x15, x29)\n    return O"], [1.0, "def solve_97a01a3a(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = lbind(shift, x4)\n    x6 = objects(x5, F, F, T)\n    x7 = argmax(x6, width)\n    x8 = ulcorner(x7)\n    x9 = llcorner(x7)\n    x10 = paint(x1, x9)\n    x11 = NEG_UNITY(x1)\n    x12 = height(x7)\n    x13 = increment(x12)\n    x14 = interval(ZERO, x13,555)\n    x15 = lbind(shift, x7)\n    x16 = height(x5)\n    x17 = increment(x16)\n    x18 = interval(ZERO, x17, ONE)\n    x19 = mapply(x15, x14)\n    x20 = mapply(x19, x18)\n    x21 = cover(x10, x17)\n    x22 = fill(x21, ONE, x19)\n    x23 = fill(x22, THREE, x20)\n    x24 = fill(x23, TWO, x12)\n    x25 = objects(x24, T, F, T)\n    x26 = add(x25, DOWN)\n    x27 = fill(x24, THREE, x26)\n    x28 = astuple(x27, x26)\n    x29 = canvas(ZERO, x28)\n    x30 = paint(x29, x27)\n    O = fill(x30, EIGHT, x29)\n    return O"], [1.0, "def solve_3871ad4b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rot90(I)\n    x4 = power(identity, TWO)\n    x5 = rbind(ofcolor, TWO)\n    x6 = mapply(x5, x3)\n    O = fill(x3, ZERO, x6)\n    return O"], [1.0, "def solve_f08dd272(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(dedupe, x1)\n    x3 = size(x2)\n    x4 = decrement(x3)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = interval(ZERO, x5, ONE)\n    x8 = outbox(x7)\n    x9 = rbind(multiply, THREE)\n    x10 = apply(x9, x8)\n    x11 = lbind(shift, x8)\n    x12 = mapply(x11, x10)\n    O = fill(x6, ONE, x12)\n    return O"], [1.0, "def solve_f9983737(I):\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = compose(x5, x13)\n    x15 = fork(recolor, color, x14)\n    x16 = fork(mapply, x15, x13)\n    x17 = mapply(x16, x4)\n    O = paint(x1, x17)\n    return O"], [1.0, "def solve_c4d30074(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_4fe99047(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_f0e21961(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_ec85907e(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_575889cd(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = argmax(x1, x3)\n    x5 = fork(divide, height, width)\n    x6 = lbind(equality, x4)\n    x7 = compose(x6, x5)\n    x8 = fork(multiply, x5, x7)\n    x9 = palette(x4)\n    x10 = sfilter(x9, x8)\n    x11 = argmax(x10, x7)\n    x12 = leastcolor(x11)\n    x13 = ofcolor(I, x12)\n    x14 = colorfilter(x1, x12)\n    x15 = rbind(adjacent, x13)\n    x16 = rbind(adjacent, x14)\n    x17 = mfilter(x14, x15)\n    x18 = mfilter(x16, x16)\n    x19 = fill(I, x12, x17)\n    O = fill(x19, x11, x18)\n    return O"], [1.0, "def solve_3f770aa5(I):\n    x1 = fgpartition(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(both, vfrontier, hfrontier)\n    x7 = mapply(x6, x5)\n    O = underfill(I, EIGHT, x7)\n    return O"], [1.0, "def solve_8e42f2e1(I):\n    x1 = objects(I, T, F, F)\n    x2 = matcher(size, ONE)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = matcher(color, ONE)\n    x6 = sfilter(x4, x5)\n    x7 = argmin(x6, size)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 = toivec(x8)\n    x11 = ulcorner(x7)\n    x12 = increment(x11)\n    x13 = add(x12, DOWN)\n    x14 = fill(I, ONE, x13)\n    x15 = height(x7)\n    x16 = width(x7)\n    x17 = subtract(x15, x16)\n    x18 = add(x17, increment)\n    x19 = canvas(ZERO, x18)\n    x20 = asobject(x19)\n    x21 = shift(x20, UNITY)\n    x22 = paint(x14, x21)\n    x23 = rbind(multiply, THREE)\n    x24 = apply(x23, x22)\n    x25 = rbind(toobject, I)\n    x26 = AFTER(x22, x25)\n    x27 = fill(x22, EIGHT, x26)\n    x28 = fgpartition(x27)\n    x29 = merge(x28)\n    x30 = cover(x27, x29)\n    x31 = paint(x30, x27)\n    x32 = shift(x29, DOWN)\n    x33 = fill(x31, EIGHT, x32)\n    x34 = shift(x29, UP)\n    x35 = fill(x33, TWO, x34)\n    x36 = shift(x29, RIGHT)\n    x37 = fill(x35, SIX, x36)\n    x38 = shift(x29, LEFT)\n    O = fill(x37, SEVEN, x38)\n    return O"], [1.0, "def solve_f8340482(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_af500b56(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(subtract, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = toindices(x3)\n    x6 = prapply(recolor, x5, x4)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_4aa4544d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(combine, vfrontier, hfrontier)\n    x7 = x6(x2)\n    x8 = mapply(x7, x3)\n    O = fill(x5, x4, x8)\n    return O"], [1.0, "def solve_d59a6ae4(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = lbind(sfilter, x3)\n    x5 = lbind(matcher, identity)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = sfilter(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = matcher(color, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_ee87651b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(mapply, x4)\n    x7 = lbind(ofcolor, I)\n    x8 = compose(x6, x7)\n    x9 = fork(intersection, x8, last)\n    x10 = compose(positive, size)\n    x11 = lbind(astuple, x10)\n    x12 = lbind(intersection, x4)\n    x13 = compose(x11, x12)\n    x14 = argmax(x5, x13)\n    x15 = other(x5, x14)\n    x16 = ofcolor(I, x15)\n    x17 = last(x16)\n    x18 = compose(backdrop, inbox)\n    x19 = mapply(x18, x17)\n    O = fill(I, EIGHT, x19)\n    return O"], [1.0, "def solve_49c4c3ed(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 =equality(x4, x5)\n    x7 = fork(equality, identity, hmirror)\n    x8 = extract(x5, x7)\n    x9 = extract(x5, x8)\n    x10 = center(x9)\n    x11 = ulcorner(x9)\n    x12 = subgrid(x9, I)\n    x13 = add(x11, x12)\n    x14 = upscale(x12, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = totuple(x15)\n    x17 = apply(center, x16)\n    x18 = lbind(sfilter, x17)\n    x19 = lbind(matcher, normalize)\n    x20 = compose(x18, x19)\n    x21 = lbind(mapply, x20)\n    x22 = ofcolor(x14, FIVE)\n    x23 = colorfilter(x2, FIVE)\n    x24 = rbind(manhattan, x10)\n    x25 = chain(even, x24, initset)\n    x26 = sfilter(x23, x25)\n    x27 = fill(x14, EIGHT, x26)\n    x28 = merge(x2)\n    x29 = fill(x27, TWO, x28)\n    x30 = insert(x10, x21)\n    x31 = argmin(x30, size)\n    x32 = rbind(intersection, x31)\n    x33 = rbind(shoot, x30)\n    x34 = chain(x32, x33, x33)\n    x35 = fill(x29, ZERO, x34)\n    O = fill(x35, EIGHT, x31)\n    return O"], [1.0, "def solve_f4d036c0(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = ofcolor(I, ZERO)\n    x5 = difference(x1, x4)\n    x6 = subgrid(x5, I)\n    x7 = frontiers(x6)\n    x8 = mfilter(x7, hline)\n    x9 = mfilter(x7, vline)\n    x10 = ulcorner(x8)\n    x11 = ulcorner(x9)\n    x12 = lrcorner(x8)\n    x13 = llcorner(x9)\n    x14 = add(x12, x13)\n    x15 = increment(x14)\n    x16 = x11(x15)\n    x17 = rot90(x16)\n    x18 = shape(x8)\n    x19 = canvas(ZERO, x18)\n    x20 = ofcolor(x81, ZERO)\n    x21 = rbind(colorcount, ZERO)\n    x22 = rbind(toobject, x1)\n    x23 = compose(x21, x22)\n    x24 = subtract(x16, x23)\n    x25 = shift(x4, x24)\n    x26 = paint(x19, x25)\n    x27 = repeat(x26, ONE)\n    x28 = rbind(argmin, x13)\n    x29 = remove(x71, x1)\n    x30 = remove(x42, x1)\n    x31 = compose(x29, other)\n    x32 = lbind(fork, greater)\n    x33 = compose(x31, x31)\n    x34 = fork(x32, x33,box)\n    x35 = apply(x34, x30)\n    x36 = mapply(corners, x35)\n    O = underfill(x26, ONE, x36)\n    return O"], [1.0, "def solve_a574b71a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(add, leftmost)\n    x9 = compose(x8, size)\n    x10 = fork(connect, x7, x9)\n    x11 = fork(recolor, color, x10)\n    x12 = mapply(x11, x4)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_c507efff(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_1895feb9(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = order(x3, uppermost)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = rbind(shoot, x6)\n    x8 = mapply(x7, x5)\n    O = underfill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_6892e319(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = fork(equality, toindices, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, hmirror)\n    x8 = compose(flip, x3)\n    x9 = extract(x4, x8)\n    x10 = replace(I, FIVE, ZERO)\n    O = fill(x10, EIGHT, x9)\n    return O"], [1.0, "def solve_15b9cb58(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_a4094044(I):\n    x1 = fgpartition(I)\n    x2 = argmin(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(combine, leastcolor, palette)\n    x7 = x6(x5)\n    x8 = ofcolor(x5, x7)\n    x9 = mapply(vfrontier, x8)\n    x10 = underfill(x5, EIGHT, x9)\n    x11 = leastcolor(x10)\n    x12 = merge(x1)\n    x13 = objects(x6, T, F, T)\n    x14 = insert(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = subgrid(x15, x5)\n    O = replace(x16, x11, x5)\n    return O"], [1.0, "def solve_64b133f6(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = argmax(x4, size)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 = divide(x8, x9)\n    x11 = add(x10, TWO)\n    x12 = invert(x11)\n    x13 = shift(x5, x12)\n    x14 = shift(x13, x11)\n    x15 = rot90(x14)\n    x16 = rot180(x14)\n    x17 = rot270(x16)\n    x18 = hconcat(x15, x17)\n    x19 = hconcat(x18, x14)\n    O = vconcat(x19, x15)\n    return O"], [1.0, "def solve_c2bb8ace(I):\n    x1 = fgpartition(I)\n    x2 = mapply(neighbors, x1)\n    x3 = first(x1)\n    x4 = difference(x1, x2)\n    x5 = mostcolor(I)\n    x6 = shape(x3)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [1.0, "def solve_b3587c73(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = rot90(x2)\n    x4 = normalize(x2)\n    x5 = lbind(shift, x4)\n    x6 = occurrences(I, x4)\n    x7 = mapply(x5, x6)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_0eb96338(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = chain(remove, last, first)\n    x4 = compose(last, x3)\n    x5 = power(x4, TWO)\n    x6 = initset(x5)\n    x7 = x4(x6)\n    x8 = center(x7)\n    x9 = dneighbors(x8)\n    x10 = insert(x8, x9)\n    x11 = lbind(greater, THREE)\n    x12 = compose(x11, size)\n    x13 = fork(add, positive, x12)\n    x14 = chain(rbind, decrement, x3)\n    x15 = order(x10, x14)\n    x16 = apply(x5, x15)\n    x17 = contained(x8, x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(I)\n    x21 = ofcolor(x20, ZERO)\n    x22 = branch(x18, identity, vmirror)\n    x23 = x22(x20)\n    x24 = dmirror(x23)\n    x25 = chain(positive, size, x24)\n    x26 = sfilter(x21, x25)\n    x27 = branch(x18, identity, vmirror)\n    x28 = x27(x20)\n    x29 = hmirror(x28)\n    x30 = shift(x29, x8)\n    x31 = apply(x5, x30)\n    x32 = combine(x31, x22)\n    x33 = mapply(x19, x32)\n    O = fill(x20, THREE, x33)\n    return O"], [1.0, "def solve_128dd2ee(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = center(x14)\n    x16 = subgrid(x14, I)\n    x17 = hmirror(x16)\n    x18 = objects(x17, T, F, F)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = other(x20, ZERO)\n    x22 = ofcolor(x17, x21)\n    x23 = subgrid(x22, x17)\n    x24 = vmirror(x23)\n    x25 = cover(x17, x24)\n    x26 = ofcolor(x24, x21)\n    x27 = subgrid(x26, x24)\n    x28 = vmirror(x27)\n    x29 = hmirror(x28)\n    x30 = merge(x29)\n    x31 = fill(x25, x21, x30)\n    x32 = subgrid(x28, x31)\n    x33 = vmirror(x32)\n    x34 = asobject(x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x31, x37)\n    O = x10(x38)\n    return O"], [1.0, "def solve_fd152446(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_15fea01c(I):\n    x1 = rot90(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = rot270(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = rot90(I)\n    x8 = rbind(greater, ONE)\n    x9 = compose(x8, numcolors)\n    x10 = sfilter(x3, x9)\n    x11 = difference(x3, x10)\n    x12 = apply(color, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind(matcher, vline)\n    x17 = lbind(shift, x3)\n    x18 = chain(x16, x17, x15)\n    x19 = lbind(rbind, greater)\n    x20 = chain(x19, camera, x18)\n    x21 = lbind(rbind, branch)\n    x22 = fork(x21, identity, x20)\n    x23 = compose(x22, x18)\n    x24 = compose(x17, x23)\n    x25 = fork(add, x24, x20)\n    x26 = compose(invert, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = fork(combine, x25, x27)\n    x29 = fork(shift, identity, x28)\n    x30 = mapply(x29, x3)\n    O = paint(x1, x30)\n    return O"], [1.0, "def solve_6097dd9f(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, T, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_865d7852(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = argmin(x3, size)\n    x5 = argmax(x3, size)\n    x6 = remove(x4, x3)\n    x7 = remove(x5, x6)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x8)\n    x10 = fill(x9, SIX, x5)\n    O = fill(x10, SEVEN, x6)\n    return O"], [1.0, "def solve_bd52b0f3(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [1.0, "def solve_a514fca4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = canvas(x3, TWO_BY_TWO)\n    x5 =O = fill(x4, EIGHT, x2)\n    x6 = hconcat(x5, I)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(x5, x12)\n    return O"], [1.0, "def solve_16255931(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = other(x1, x5)\n    x7 = color(x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = colorfilter(x11, x6)\n    x13 = argmin(x12, lbind)\n    x14 = normalize(x13)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x12)\n    O = paint(x9, x16)\n    return O"], [1.0, "def solve_67b43298(I):\n    x1 = vmirror(I)\n    x2 = objects(I, T, T, T)\n    x3 = order(x2, uppermost)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(last, last)\n    x7 = rbind(argmin, x6)\n    x8 = chain(x7, x5, x6)\n    x9 = merge(x8)\n    x10 = objects(x1, T, F, T)\n    x11 = difference(x10, x5)\n    x12 = compose(first, last)\n    x13 = chain(x12, x11, x8)\n    x14 = rbind(sfilter, x13)\n    x15 = compose(last, last)\n    x16 = chain(flip, x18, x15)\n    x17 = mapply(x16, x12)\n    x18 = sizefilter(x17, ONE)\n    x19 = merge(x18)\n    O = paint(x1, x19)\n    return O"], [1.0, "def solve_6908cd28(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(color, x2)\n    x4 = difference(x1, x2)\n    x5 = apply(color, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = ofcolor(I, x7)\n    x10 = rbind(shoot, UNITY)\n    x11 = rbind(shoot, NEG_UNITY)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = fork(combine, x10, x11)\n    x15 = fork(combine, x12, x13)\n    x16 = fork(combine, x14, x15)\n    x17 = compose(x16, center)\n    x18 = mapply(x17, x2)\n    x19 = intersection(x8, x18)\n    x20 = intersection(x9, x18)\n    x21 = first(x2)\n    x22 = color(x21)\n    x23 = center(x21)\n    x24 = neighbors(x23)\n    x25 = toobject(x24, I)\n    x26 = mostcolor(x25)\n    x27 = other(x3, x22)\n    x28 = equality(x26, x6)\n    x29 = branch(x28, x22, x27)\n    x30 = branch(x28, x27, x22)\n    x31 = fill(I, x29, x19)\n    O = fill(x31, x30, x20)\n    return O"], [1.0, "def solve_ff656215(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_d23a7c99(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(size, FOUR)\n    x4 = fork(both, x3, x3)\n    x5 = extract(x2, x4)\n    x6 = other(x2, x5)\n    x7 = objects(I, T, F, F)\n    x8 = colorfilter(x7, x6)\n    x9 = merge(x8)\n    x10 = delta(x9)\n    x11 = first(x10)\n    x12 = invert(x11)\n    x13 = subgrid(x9, I)\n    x14 = hconcat(x13, x12)\n    x15 = hconcat(x14, x12)\n    x16 = vconcat(x15, x15)\n    x17 = vconcat(x16, x16)\n    O = cellwise(x17, x6, RIGHT)\n    return O"], [1.0, "def solve_ea83b065(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = chain( width, dedupe, last)\n    x5 = x4(x3)\n    x6 = compose(last, x5)\n    x7 = fork(subtract, x6, ZERO)\n    x8 = chain(decrement, minimum, x7)\n    x9 = order(x1, x8)\n    x10 = fork(multiply, first, last)\n    x11 = order(x9, x10)\n    x12 = lbind(contained, x9)\n    x13 = compose(x12, last)\n    x14 = fork( sfilter, x13, x11)\n    x15 = height(x3)\n    x16 = vsplit(x15, x15)\n    x17 = mapply(x14, x16)\n    x18 = combine(x11, x17)\n    x19 = paint(I, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(urcorner, x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x19, x22)\n    return O"], [1.0, "def solve_6851042c(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = objects(x7, T, F, T)\n    x10 = palette(x9)\n    x11 =(x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = ofcolor(x13, x12)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x13)\n    x19 = canvas(x12, x18)\n    O = fill(x19,88712, x17)\n    return O"], [1.0, "def solve_192f7370(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(printapply, normalize)\n    x3 = lbind(occurrences, I)\n    x4 = chain(x2, x3, palette)\n    x5 = compose(normalize, x4)\n    x6 = lbind(lbind, shift)\n    x7 = rbind(occurrences, I)\n    x8 = chain(x7, x6, asobject)\n    x9 = compose(x8, x5)\n    x10 = fork(mapply, x9, x5)\n    x11 = mapply(x10, x1)\n    x12 = paint(I, x11)\n    x13 = objects(x12, T, F, T)\n    x14 = first(x13)\n    x15 = last(x13)\n    x16 = subgrid(x14, x12)\n    x17 = trim(x16)\n    x18 = mostcolor(x17)\n    x19 = palette(x1)\n    x20 = remove(x18, x19)\n    x21 = other(x20, x18)\n    x22 = switch(x15, x21, x18)\n    x23 = objects(x22, T, F, T)\n    x24 =mapply(toindices, x23)\n    x25 = box(x14)\n    x26 = intersection(x25, x24)\n    x27 = fill(x22, x21, x26)\n    x28 = objects(x27, T, F, T)\n    x29 = rbind(colorcount, x18)\n    x30 = order(x28, x29)\n    x31 = apply(llcorner, x30)\n    x32 = size(x31)\n    x33 = rbind(colorcount, x18)\n    x34 = valmax(x30, x33)\n    x35 = matcher(x32, x34)\n    x36 = extract(x31, x35)\n    x37 = subgrid(x36, x27)\n    O = trim(x37)\n    return O"], [1.0, "def solve_4f808960(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = palette(x6)\n    x8 = compose(leastcolor, x7)\n    x9 = matcher(x8, x4)\n    x10 = extract(x1, x9)\n    x11 = lbind(colorfilter, x5)\n    x12 = compose(size, x11)\n    x13 = matcher(x12, TWO)\n    x14 = mfilter(x1, x13)\n    x15 = fill(I, EIGHT, x14)\n    x16 = replace(x15, x4, THREE)\n    O = downscale(x16, TWO)\n    return O"], [1.0, "def solve_4bd9482f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_3fae2b3c(I):\n    x1 = objects(I, T, F, T)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(ZERO, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = mapply(x8, x1)\n    O = paint(x5, x9)\n    return O"], [1.0, "def solve_5bfd0708(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmin(x2, size)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mapply(x8, x2)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_18a13e19(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = mostcolor(x4)\n    x6 = toindices(x4)\n    x7 = objects(x6, T, F, T)\n    x8 = lbind(shift, x6)\n    x9 = mapply(x8, x7)\n    O = paint(x3, x9)\n    return O"], [1.0, "def solve_3c0b3d09(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = subgrid(x2, I)\n    x4 = normalize(x3)\n    x5 = replace(x3, F8, ZERO)\n    x6 = objects(x5, T, F, T)\n    x7 = merge(x6)\n    x8 = width(x7)\n    x9 = astuple(ONE, x8)\n    x10 = branch(x7, ZERO, x9)\n    x11 = ulcorner(x2)\n    x12 = invert(x11)\n    x13 = shift(x4, x12)\n    x14 = divide(x5, x13)\n    x15 = cover(x3, x5)\n    x16 = shift(x9, x15)\n    x17 = combine(x2, x16)\n    x18 = paint(x15, x17)\n    O = rot180(x18)\n    return O"], [1.0, "def solve_73f4be60(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = extract(x1, x2)\n    x4 = ulcorner(x3)\n    x5 = subtract(x4, DOWN)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(I, x5, x7)\n    return O"], [1.0, "def solve_a17eee0c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_ddfcb2a2(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(connect, toindices, backdrop)\n    x3 = compose(x2, x1)\n    x4 = mfilter(x1, x3)\n    O = fill(I, EIGHT, x4)\n    return O"], [1.0, "def solve_3461d23e(I):\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = dmirror(I)\n    x5 = sfilter(x4, x2)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, center)\n    x8 = mapply(x7, x5)\n    O = underfill(x4, EIGHT, x8)\n    return O"], [1.0, "def solve_bcb1146b(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [1.0, "def solve_bfafd15f(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [1.0, "def solve_a63304f7(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, ZERO)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [1.0, "def solve_719a40f9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_a2d6a123(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = center(x4)\n    x6 = other(x1, x2)\n    x7 = shift(x4, x6)\n    x8 = color(x2)\n    x9 = fill(I, x8, x7)\n    x10 = shift(x7, x8)\n    x11 = fill(x9, TWO, x10)\n    O = rot180(x11)\n    return O"], [1.0, "def solve_27eb785d(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = power(color, TWO)\n    x4 = initset(x2)\n    x5 = lbind(insert, DOWN)\n    x6 = lbind( spit, LEFT)\n    x7 = lbind(x6, ZERO)\n    x8 = chain(x3, x7, x5)\n    x9 = chain(x3, x7, x6)\n    x10 = fork(combine, x8, x9)\n    x11 = fork(90358, x5, x10)\n    x12 = compose(maximum, x11)\n    x13 = apply(x12, x1)\n    x14 = order(x13, identity)\n    x15 = apply(x14, x7)\n    x16 = mpapply(recolor, x15, x13)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_07234f88(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(cmirror, x12)\n    x14 = insert(hmirror, x13)\n    x15 = insert(vmirror, x14)\n    x16 = combine(x10, x15)\n    x17 = lbind(matcher, first)\n    x18 = compose(first, x17)\n    x19 = fork(sfilter, identity, x18)\n    x20 = pair(x16, x8)\n    x21 = mapply(x19, x20)\n    x22 = paint(I, x21)\n    O = downscale(x22, TWO)\n    return O"], [1.0, "def solve_facb6261(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x6, normalize)\n    x8 = fork(vfrontier, x7, normalize)\n    x9 = mapply(x8, x5)\n    x10 = fill(I, EIGHT, x9)\n    O = fill(x10, TWO, x4)\n    return O"], [1.0, "def solve_6f09de2e(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(NEG_TWO, NEG_TWO)\n    x3 = rbind(shift, x2)\n    x4 = compose(x3, normalize)\n    x5 = rbind(mapply, x4)\n    x6 = lbind(rbind, shift)\n    x7 = compose(x5, x6)\n    x8 = fork(shift, x7, last)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_fe8ed985(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [1.0, "def solve_3c62ca69(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = compose(double, height)\n    x4 = fork(equality, x3, size)\n    x5 = compose(double, width)\n    x6 = fork(equality, x5, size)\n    x7 = fork(either, x4, x6)\n    x8 = rbind(equality, TWO)\n    x9 = lbind(colorfilter, x2)\n    x10 = rbind(sfilter, vline)\n    x11 = rbind(sfilter, hline)\n    x12 = chain(x10, x9, color)\n    x13 = chain(x8, size, x12)\n    x14 = chain(x11, x9, color)\n    x15 = chain(x8, size, x14)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x7, x16)\n    x18 = extract(x1, x17)\n    x19 = color(x18)\n    x20 = colorfilter(x2, x19)\n    x21 = first(x20)\n    x22 = vline(x21)\n    x23 = ulcorner(x18)\n    x24 = lrcorner(x18)\n    x25 = branch(x22, UP, LEFT)\n    x26 = add(x23, x25)\n    x27 = branch(x22, DOWN, RIGHT)\n    x28 = add(x24, x27)\n    x29 = initset(x28)\n    x30 = insert(x26, x29)\n    O = subgrid(x30, I)\n    return O"], [1.0, "def solve_21652b3a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = lbind(subtract, x1)\n    x4 = chain(halve, x3, shape)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_9d84b444(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_d2550d1d(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NEG_TWO, NEG_TWO)\n    x4 = papply(shift, x2, x3)\n    x5 = rbind(shift, x4)\n    x6 = papply(x5, x4, TWO_BY_TWO)\n    x7 = rbind(shoot, UNITY)\n    x8 = lbind(compose, x7)\n    x9 = x8(x6)\n    x10 = initset(x9)\n    x11 = lbind(rbind, manhattan)\n    x12 = lbind(compose, initset)\n    x13 = chain(x11, x12, backdrop)\n    x14 = lbind(rbind, val103)\n    x15 = chain(x14, x13, x11)\n    x16 = lbind(fork, greater)\n    x17 = lbind(x16, sfilter)\n    x18 = compose(x17, x9)\n    x19 = fork(compose, x18, x15)\n    x20 = compose(x17, x19)\n    x21 = fork(compose, x18, x20)\n    x22 = compose(x17, x21)\n    x23 = fork(combine, x19, x22)\n    x24 = fork(recolor, color, x23)\n    x25 = mapply(x24, x4)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_1c273a33(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmin(x2, size)\n    x4 = backdrop(x3)\n    x5 = toobject(x4, I)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = mapply(x8, x2)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_4dc7b39d(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = subgrid(x3, I)\n    x5 = fork(multiply, height, width)\n    x6 = argmax(x1, x5)\n    x7 = mostcolor(x6)\n    x8 = normalize(x6)\n    x9 = toindices(x8)\n    x10 = lbind(shift, x9)\n    x11 = mapply(x10, x18)\n    x12 = fill(I, x7, x11)\n    x13 = height(x6)\n    x14 = width(x6)\n    x15 = divide(x13, x14)\n    x16 = width(x4)\n    x17 = interval(x15, x16, ONE)\n    x18 = mapply(x10, x17)\n    x19 = fill(x12, x7, x18)\n    O = fill(x19, x7, x15)\n    return O"], [1.0, "def solve_3f6145a0(I):\n    x1 = fgpartition(I)\n    x2 = mapply(toindices, x1)\n    x3 = objects(I, T, F, T)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = remove(x4, x1)\n    x7 = compose(hmirror, merge)\n    x8 = fork(vmirror, identity, x7)\n    x9 = lbind(occurrences, I)\n    x10 = lbind(lbind, shift)\n    x11 = compose(x10, x8)\n    x12 = lbind(lbind, occurrences)\n    x13 = compose(x12, x8)\n    x14 = fork(mapply, x11, x13)\n    x15 = fork(paint, identity, x14)\n    x16 = mapply(x15, x2)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_3c2f9754(I):\n    x1 = objects(I, T, F, T)\n    x2 = rot180(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(SIX, SIX)\n    x9 = astuple(EIGHT, x8)\n    x10 = mostcolor(I)\n    x11 = canvas(x10, x9)\n    x12 = asobject(x11)\n    x13 = paint(x7, x12)\n    x14 = rot180(x13)\n    x15 = astuple(x4, x14)\n    x16 = shift(x12, x15)\n    O = paint(x13, x16)\n    return O"], [1.0, "def solve_210f59b0(I):\n    x1 = objects(I, T, F, T)\n    x2 = order(x1, leftmost)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_cdbb5804(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_2a0fa88c(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(x9)\n    x11 = x8(x10)\n    x12 = x3(x11)\n    x13 = shape(x12)\n    x14 = subtract(x13, DOWN)\n    x15 = crop(x12, DOWN, x14)\n    x16 = multiply(x13, THREE)\n    x17 = mostcolor(I)\n    x18 = ofcolor(x15, x17)\n    x19 = lefthalf(x16)\n    x20 = righthalf(x16)\n    x21 = rmirror(x20)\n    x22 = vconcat(x19, x21)\n    x23 = hmirror(x22)\n    x24 =O = vconcat(x23, x22)\n    x25 = asobject(x24)\n    x26 = multiply(UNITY, THREE)\n    x27 = shift(x25, x26)\n    O = paint(x12, x27)\n    return O"], [1.0, "def solve_1fda6d93(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = outbox(x5)\n    x7 = subgrid(x6, I)\n    x8 = fgpartition(x7)\n    x9 = argmax(x8, size)\n    x10 = color(x9)\n    x11 = toindices(x9)\n    x12 = prapply(connect, x11, x11)\n    x13 = mfilter(x12, vline)\n    x14 = mfilter(x12, hline)\n    x15 = size(x13)\n    x16 = size(x14)\n    x17 = greater(x15, x16)\n    x18 = branch(x17, x13, x14)\n    O = fill(x7, x10, x18)\n    return O"], [1.0, "def solve_78db9314(I):\n    x1 = palette(I)\n    x2 = objects(I, T, T, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = subgrid(x3, I)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = x8(x7)\n    x10 = lbind(mapply, x4)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = solve(x12, x2)\n    x14 = power(x13, FOUR)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x12)\n    O = paint(x7, x16)\n    return O"], [1.0, "def solve_29abaa3c(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = replace(x10, FIVE, ZERO)\n    x13 = fill(x12, EIGHT, x9)\n    x14 = fill(x13, TWO, x12)\n    x15 = branch(x6, width, height)\n    x16 = x15(I)\n    x17 = ulcorner(x16)\n    x18 = index(x9, x17)\n    x19 = x15(I)\n    x20 = decrement(x19)\n    x21 = index(x11, x20)\n    x22 = subgrid(x12, x11)\n    x23 = x17(x22)\n    x24 = replace(x23, FIVE, ZERO)\n    x25 = dmirror(x24)\n    x26 = x17(x25)\n    x27 = vconcat(x26, x25)\n    x28 = upscale(x27, LEFT)\n    x29 = lbind(multiply, x5)\n    x30 = apply(x29, x28)\n    x31 = lbind(shift, x28)\n    x32 = mapply(x31, x30)\n    x33 = fill(x12, TWO, x32)\n    O = replace(x33, ZERO, TWO)\n    return O"], [1.0, "def solve_25c78a18(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, normalize)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = matcher(x6, EIGHT)\n    x8 = lbind(colorfilter, x1)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, TWO)\n    x11 = fork(both, x7, x10)\n    x12 = fork(both, x11, x5)\n    x13 = palette(I)\n    x14 = extract(x13, x12)\n    x15 = colorfilter(x1, x14)\n    x16 = totuple(x15)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(I)\n    x20 = remove(ZERO, x19)\n    x21 = remove(x14, x20)\n    x22 = first(x21)\n    x23 = colorfilter(x1, x22)\n    x24 = rbind(adjacent, x17)\n    x25 = rbind(adjacent, x18)\n    x26 = fork(both, x24, x25)\n    x27 = sfilter(x23, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, x22, ZERO)\n    O = canvas(x30, UNITY)\n    return O"], [1.0, "def solve_e43e63b0(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_455b17ef(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = interval(min, x4, TWO)\n    x6 = apply(tojvec, x5)\n    x7 = mapply(vfrontier, x6)\n    x8 = fill(I, x3, x7)\n    x9 = increment(x4)\n    x10 = width(I)\n    x11 = add(x9, x10)\n    x12 = increment(x11)\n    x13 = width(I)\n    x14 = interval(x12, x13, x4)\n    x15 = apply(tojvec, x14)\n    x16 = mapply(vfrontier, x15)\n    x17 = fill(x8, x3, x16)\n    x18 = increment(x4)\n    x19 = width(I)\n    x20 = interval(x18, x19, FOUR)\n    x21 = apply(tojvec, x20)\n    x22 = height(I)\n    x23 = decrement(x22)\n    x24 = lbind(astuple, x23)\n    x25 = apply(x24, x21)\n    x26 = fill(x17, x3, x25)\n    x27 = astuple(x26, x19)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = lbind(shift, x30)\n    x32 = mapply(x31, x25)\n    O = fill(x28, x3, x32)\n    return O"], [1.0, "def solve_0cec38e8(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(contained, x16)\n    x18 = compose(x17, color)\n    x19 = sfilter(x19, x18)\n    x20 = lbind(colorcount, I)\n    x21 = argmin(x19, x20)\n    x22 = asobject(I)\n    x23 = matcher(first, x21)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x22, x24)\n    x26 = difference(x22, x25)\n    x27 = fill(I, x21, x26)\n    x28 = paint(x27, x25)\n    O = fill(x28, ZERO, x26)\n    return O"], [1.0, "def solve_f6e95ad2(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = canvas(x3, UNITY)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = colorfilter(x1, x6)\n    x7 = rbind(shoot, DOWN)\n    x8 = mapply(x7, x6)\n    x9 = fill(x4, TWO, x8)\n    x10 = replace(x9, x4, ZERO)\n    O = replace(x10, x4, x9)\n    return O"], [1.0, "def solve_16fda64e(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = extract(x3, hperiod)\n    x5 = other(x1, x4)\n    x6 = ulcorner(x4)\n    x7 = compose(first, last)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(decrement, x8, first)\n    x10 = fork(shift, identity, x9)\n    x11 = compose(x10, last)\n    x12 = lbind(ofcolor, I)\n    x13 = compose(x12, x11)\n    x14 = fork(combine, first, x13)\n    x15 = fork(recolor, x14, x12)\n    x16 = mapply(x15, x5)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_51e679cd(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_af27ecb7(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmin(x1, DOWN)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [1.0, "def solve_defd3497(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmin(x5, x2)\n    x7 = last(x6)\n    x8 = subgrid(x7, I)\n    x9 = palette(x8)\n    x10 = contained(x9, x7)\n    x11 = branch(x10, identity, dmirror)\n    x12 = x11(x8)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = hupscale(x13, x14)\n    x16 = ulcorner(x7)\n    x17 = vupscale(x15, x16)\n    x18 = asobject(x17)\n    x19 = matcher(first, x13)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = paint(x5, x21)\n    O = subgrid(x7, x22)\n    return O"], [1.0, "def solve_1b6935d2(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = first(x2)\n    x4 = difference(x1, x2)\n    x5 = first(x4)\n    x6 = color(x3)\n    x7 = color(x5)\n    x8 = subgrid(x3, I)\n    x9 = trim(x8)\n    O = replace(x9, x7, x6)\n    return O"], [1.0, "def solve_29ceb05d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_8c2852d1(I):\n    x1 = objects(I, T, F, F)\n    x2 = compose(normalize, toindices)\n    x3 = compose(x2, normalize)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = ulcorner(x4)\n    x9 = lrcorner(x4)\n    x10 = shoot(x8, NEG_UNITY)\n    x11 = shoot(x9, UNITY)\n    x12 = rbind(shoot, x8)\n    x13 = rbind(shoot, x9)\n    x14 = fork(astuple, x12, x13)\n    x15 = fork(shoot, identity, x14)\n    x16 = fork(multiply, decrement, height)\n    x17 = fork(decrement, x16, width)\n    x18 = matcher(x17, THREE)\n    x19 = rbind(shoot, x8)\n    x20 = rbind(shoot, x9)\n    x21 = fork( astuple, x19, x20)\n    x22 = fork(mapply, x18, x21)\n    x23 = mapply(x22, x5)\n    x24 = fill(I, EIGHT, x23)\n    x25 = fill(x24, TWO, x22)\n    O = fill(x25, ONE, x25)\n    return O"], [1.0, "def solve_f1085d64(I):\n    x1 = fgpartition(I)\n    x2 = compose(dneighbors, center)\n    x3 = fork(difference, backdrop, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = matcher(size, FIVE)\n    x6 = fork(both, x4, x5)\n    x7 = extract(x1, x6)\n    x8 = color(x7)\n    x9 = merge(x1)\n    x10 = compose(hmirror, vmirror)\n    x11 = initset(x10)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = rapply(x13, x9)\n    x15 = ulcorner(x7)\n    x16 = lbind(subtract, x15)\n    x17 = matcher(first, x8)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x16, ulcorner, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = mapply(x20, x14)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_937b0865(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [1.0, "def solve_f599a014(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = first(x2)\n    x4 = center(x3)\n    x5 = dneighbors(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = matcher(first, x7)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x1, x9)\n    x11 = difference(x1, x10)\n    x12 = fill(I, TWO, x11)\n    x13 = lbind(recolor, TWO)\n    x14 = rbind(ofcolor, x12)\n    x15 = chain(x13, x14, backdrop)\n    x16 = fork(paint, identity, x15)\n    x17 = height(x12)\n    x18 = vsplit(x12, x17)\n    x19 = mapply(x16, x18)\n    x20 = ofcolor(x19, x7)\n    x21 = dmirror(x20)\n    x22 = width(x21)\n    x23 = vsplit(x21, x22)\n    x24 = mapply(x16, x23)\n    x25 = dmirror(x24)\n    x26 = ofcolor(x25, x7)\n    x27 = combine(x20, x26)\n    x28 = difference(x27, x2)\n    O = fill(x24, EIGHT, x28)\n    return O"], [1.0, "def solve_6977e319(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [1.0, "def solve_31dc3fab(I):\n    x1 = leastcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = colorfilter(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(hfrontier, center, x4)\n    x7 = x6(x5)\n    x8 = hfrontier(x7)\n    x9 = mapply(x8, x4)\n    x10 = fill(x5, x1, x9)\n    O = replace(x10, x1, x5)\n    return O"], [1.0, "def solve_43b945b7(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = index(x3, ORIGIN)\n    x5 = gravitate(x4, x5)\n    x6 = replace(x3, EIGHT, x4)\n    x7 = replace(x6, TWO, x5)\n    x8 = compress(x7)\n    x9 = width(x800)\n    x10 = decrement(x9)\n    x11 = upscale(x8, x10)\n    x12 = asobject(x11)\n    x13 = occurrences(x4, x12)\n    x14 = branch(x5, UNITY, ONE)\n    x15 = branch(x5, TWO, x5)\n    x16 = branch(x5, THREE, x5)\n    x17 = astuple(x14, x15)\n    x18 = ulcorner(x15)\n    x19 = invert(x18)\n    x20 = shift(x12, x19)\n    x21 = apply(ulcorner, x15)\n    x22 = lbind(shift, x10)\n    x23 = mapply(x22, x21)\n    O = paint(x3, x23)\n    return O"], [1.0, "def solve_3e7cc6aa(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_63f0f3e0(I):\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x10 = shape(x6)\n    x11 = canvas(x9, x10)\n    x12 = normalize(x6)\n    x13 = paint(x11, x12)\n    x14 = upscale(x13, TWO)\n    x15 = shape(x7)\n    x16 = canvas(x9, x15)\n    x17 = normalize(x7)\n    x18 = paint(x16, x17)\n    x19 = upscale(x18, TWO)\n    x20 = shape(x3)\n    x21 = canvas(x9, x20)\n    x22 = normalize(x3)\n    x23 = paint(x21, x22)\n    x24 = color(x3)\n    x25 = replace(x23, x24, x8)\n    x26 = asobject(x25)\n    x27 = occurrences(x14, x26)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = downscale(x14, TWO)\n    x31 = downscale(x19, TWO)\n    O = branch(x29, x30, x31)\n    return O"], [1.0, "def solve_f44d005a(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = subgrid(x13, I)\n    x15 = branch(x11, x14, x12)\n    x16 = difference(x1, x13)\n    x17 = crop(x15, x16, x12)\n    x18 = vmirror(x17)\n    x19 = hconcat(x17, x18)\n    x20 = hmirror(x19)\n    x21 = vconcat(x19, x20)\n    x22 = vconcat(x21, x07)\n    O = replace(x22, x12, ZERO)\n    return O"], [1.0, "def solve_2ac7f33a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = chain(asobject, first, last)\n    x8 = x7(x6)\n    x9 = height(x8)\n    x10 = decrement(x9)\n    x11 = lbind(astuple, x10)\n    x12 = lbind(shift, x8)\n    x13 = mapply(x12, x11)\n    FOUR(x13)\n    return O"], [1.0, "def solve_9a1adf2d(I):\n    x1 = ofcolor(I, FOUR)\n    x2 = ofcolor(I, EIGHT)\n    x3 = center(x1)\n    x4 = center(x2)\n    x5 = hfrontier(x3)\n    x6 = vfrontier(x4)\n    x7 = intersection(x5, x6)\n    x8 = fill(I, TWO, x5)\n    x9 = fill(x8, THREE, x6)\n    O = fill(x9, FOUR, x7)\n    return O"], [1.0, "def solve_b043bf05(I):\n    x1 = objects(I, T, F, T)\n    x2 = replace(I, EIGHT, ZERO)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(x5)\n    x8 = dmirror(x7)\n    x9 = papply(pair, x8, x7)\n    x10 = lbind(apply, maximum)\n    x11 = apply(x10, x9)\n    x12 = cmirror(x11)\n    x13 = papply(pair, x11, x12)\n    x14 = apply(x10, x13)\n    x15 = branch(x5, x14, identity)\n    x16 = apply(x15, x9)\n    O = subgrid(x16, x15)\n    return O"], [1.0, "def solve_a83112d1(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = difference(x1, x2)\n    x9 = compose(normalize, toindices)\n    x10 = x9(x6)\n    x11 = x9(x7)\n    x12 = matcher(x9, x10)\n    x13 = matcher(x9, x11)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x6)\n    x17 = ulcorner(x7)\n    x18 = ulcorner(x14)\n    x19 = ulcorner(x15)\n    x20 = subtract(x16, x18)\n    x21 = subtract(x17, x19)\n    x22 = move(I, x14, x20)\n    O = move(x22, x15, x21)\n    return O"], [1.0, "def solve_64d57c60(I):\n    x1 = objects(I, T, F, T)\n    x2 = astuple(FOUR, FOUR)\n    x3 = canvas(ZERO, x2)\n    x4 = argmin(x1, size)\n    x5 = normalize(x4)\n    x6 = color(x5)\n    x7 = toindices(x5)\n    x8 = compose(toindices, normalize)\n    x9 = rbind(difference, x8)\n    x10 = inindices(x4)\n    x11 = apply(x9, x10)\n    x12 = rbind(greater, ONE)\n    x13 = compose(x12, size)\n    x14 = sfilter(x11, x13)\n    x15 = totuple(x14)\n    x16 = apply(color, x15)\n    x17 = mostcommon(x16)\n    x18 = dedupe(x17)\n    x19 = size(x18)\n    x20 = equality(x19, ONE)\n    x21 = compose(size, delta)\n    x22 = compose(x21, size)\n    x23 = repeating(x4, x22)\n    x24 = mapply(x17, x23)\n    x25 = shift(x4, x24)\n    O = paint(x3, x25)\n    return O"], [1.0, "def solve_78cabc5e(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(first, last, frontiers)\n    x7 = x6(x2)\n    x8 = objects(x5, T, F, F)\n    x9 = color(x8)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x8, x10)\n    x12 = difference(x8, x11)\n    x13 = toobject(x12, I)\n    x14 = color(x13)\n    x15 = lbind(mfilter, x11)\n    x16 = lbind(matcher, first)\n    x17 = chain(x15, x16, x11)\n    x18 = fork(recolor, color, x17)\n    x19 = mapply(x18, x14)\n    x20 = paint(x5, x19)\n    O = downscale(x20, TWO)\n    return O"], [1.0, "def solve_cf48cd96(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = apply(normalize, x2)\n    x4 = astuple(ONE, THREE)\n    x5 = size(x3)\n    x6 = order(x3, leftmost)\n    x7 = fill(I, EIGHT, x4)\n    x8 = apply(ulcorner, x6)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    O = fill(x7, TWO, x10)\n    return O"], [1.0, "def solve_6ddd42fe(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = mostcolor(I)\n    x7 = shape(x5)\n    x8 = canvas(x6, x7)\n    x9 = normalize(x5)\n    x10 = paint(x8, x9)\n    x11 = height(x9)\n    x12 = width(x9)\n    x13 = neighbors(ORIGIN)\n    x14 = toindices(x9)\n    x15 = astuple(x11, x12)\n    x16 = lbind(shift, x10)\n    x17 = mapply(x16, x13)\n    O = fill(x10, x6, x17)\n    return O"], [1.0, "def solve_2c1f5650(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = outbox(x5)\n    return O"], [1.1, "def solve_05829df6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = portrait(x2)\n    x4 = branch(x3, identity, dmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, identity)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = insert(x20, x21)\n    x23 = toobject(x22, x19)\n    x24 = astuple(ZERO, NEG_TWO)\n    x25 = shift(x23, ZERO_BY_TWO)\n    x26 = shift(x23, x24)\n    x27 = combine(x25, x26)\n    x28 = ulcorner(x27)\n    x29 = urcorner(x27)\n    x30 = connect(x28, x29)\n    x31 = shift(x30, UP)\n    x32 = llcorner(x27)\n    x33 = lrcorner(x27)\n    x34 = connect(x32, x33)\n    x35 = shift(x34, DOWN)\n    x36 = paint(x19, x27)\n    x37 = fill(x36, x10, x31)\n    x38 = fill(x37, x11, x35)\n    x39 = cover(x38, x22)\n    O = x4(x39)\n"], [1.1, "def solve_3c3f7e7c(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(flip, x27)\n    x29 = rbind(multiply, x11)\n    x30 = rbind(divide, x11)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(flip, x32)\n    x34 = extract(x15, x28)\n    x35 = extract(x34, x33)\n    x36 = ofcolor(x37, x4)\n    x37 = fork(combine, vfrontier, hfrontier)\n    x38 = insert(x37, x36)\n    x39 = box(x1)\n    x40 = fill(x37,"], [1.1, "def solve_0f7774b2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 ="], [1.1, "def solve_bb55ed43(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_1098e34d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_ab79cc7d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bdf0045d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, normalize)"], [1.1, "def solve_c6555ef6(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_208e646b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(contained, ONE, last)\n    x3 = colorfilter(x1, ZERO)\n    x4 = compose(flip, x2)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = divide(x6, ONE)\n    x8 = astuple(ONE, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = astuple(ONE, TWO)\n    x11 = initset(x10)\n    x12 = insert(ZERO, x11)\n    x13 = rbind(toobject, I)\n    x14 = chain(first, x13, delta)\n    x15 = rbind(colorcount, ZERO)\n    x16 = matcher(x15, FOUR)\n    x17 = chain(first, x13, delta)\n    x18 = matcher(x17, TWO)\n    x19 = fork(both, x16, x18)\n    x20 = fork(both, x31, x19)\n    x21 = ofcolor(I, FIVE)\n    x22 = extract(x21, x20)\n    x23 = ulcorner(x22)\n    x24 = ulcorner(x28)\n    x25 = subtract(x24, x23)\n    x26 = objects(I, T, F, F)\n    x27 =colorfilter(x26, ZERO)\n    x28 = rbind(toobject, I)\n    x29 = chain(first, x28, delta)\n    x30 = matcher(x29, TWO)\n    x31 = extract(x27, x30)\n    x32 = subgrid(x31, I)\n    x33 = branch(x32, x31, x dmirror)\n    x34 = ofcolor(x33, FIVE)\n    x35 = subgrid(x34, x33)\n    x36 = trim(x35)\n    x37 = dmirror(x36)\n    x38 = lbind(insert, x33)\n    x39 = branch(lrcorner, asindices"], [1.1, "def solve_dde51617(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_f2b1557e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = leftmost(x2)\n    x5 = height(I)\n    x6 = interval(x4, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = mapply(vfrontier, x7)\n    x9 = fill(I, x3, x8)\n    x10 = increment(x4)\n    x11 = width(I)\n    x12 = halve(x11)\n    x13 = increment(x12)\n    x14 = width(I)\n    x15 = halve(x14)\n    x16 = add(x12, x15)\n    x17 = width(I)\n    x18 = halve(x17)\n    x19 = increment(x18)\n    x20 = height(I)\n    x21 = halve(x20)\n    x22 = add(x19, x21)\n    x23 = astuple(x26, x22)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = interval(x24, x25, ONE)\n    x27 = invert(x22)\n    x28 = add(x25, x27)\n    x29 = interval(x28, x27, ONE)\n    x30 = product(x26, x29)\n    x31 = initset(x15)\n    x32 = insert(x14, x31)\n    x33 = product(x30, x32)\n    x34 = astuple(x55, x43)\n    x35 = lbind(intersection, x34)\n    x36 = lbind(shift, x33)\n    x37 = compose(x35, x36)\n    x38 = chain(size, x33, x37)\n    x39 =positive(x38)\n    x40 = lbind(intersection, x33)\n    x41 = lbind(shift, x33)\n    x42 = compose(x40, x41)\n    x43 = chain"], [1.1, "def solve_daabd82c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x42 = lbind(apply, x29)\n    x43 = rbind(sfilter, x27)\n    x44 =pair(x43, x31)\n    x45 = mpapply(dae9d44, x29)\n    x46 = matcher(first, x6)\n    x47 = compose(flip, x46)\n    x48 = sfilter("], [1.1, "def solve_0d3467d7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_3d91b5b2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_e7bb6784(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_3d0d79ba(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_4d8374c2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = remove(x5, x2)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = color(x7)\n    x10 =color(x8)\n    x11 = color ofcolor(I, x9)\n    x12 =5000(contained, x11)\n    x13 = toindices(x5)\n    x14 = combine(x13, x12)\n    x15 = subgrid(x14, I)\n    x16 = vmirror(x15)\n    x17 = hmirror(x16)\n    x18 = cellwise(x17, x16, x8)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = cellwise(x20, x16, x8)\n    x22 = hmirror(x21)\n    x23 = hmirror(x22)\n    x24 = combine(x14, x23)\n    x25 = shift(x24, UNITY)\n    x26 = delta(x25)\n    x27 =4(x26)\n    x28 =438(x25, x27)\n    x29 = fill(I, x9, x25)\n    x30 = power(outbox, TWO)\n    x31 = ofcolor(x29, x30)\n    x32 = asindices(x29)\n    x33 = box(x32)\n    x34 = shift(x33, x30)\n    x35 = toobject(x34, x29)\n    x36 = mostcolor(x35)\n    x37 = palette(x23)\n    x38 = combine(x36, x34)\n    x39 = paint(x29, x38)\n    x40 = subgrid(x39, x19)\n    x41 = ofcolor(x40, x40)\n    x42"], [1.1, "def solve_832ef61d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, TWO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = flip(x23)\n    x25 = asindices(x24)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x25)\n    x29 = rbind(toobject, x25)\n    x30 = mapply(x29, x28)\n    x31 =545(x30)\n    x32 =99(x31, x22)\n    x33 = palette(x32)\n    x34 = remove(x29, x33)\n    x35 = lbind(colorcount, x277)\n    x36 = argmax(x34, x35)\n    x37 = other(x34, x36)\n    x38 = astuple(x38, x37)\n    x39 = contained(x38, x111)\n    x40 = branch(x"], [1.1, "def solve_6ed07402(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(contained, x16)\n    x29 = compose(x28, first)\n    x30 = sfilter(x27, x29)\n    x31 = EIGHT(x30)\n    x32 =\n    neighbors(UNITY)\n    x33 = pair(x27, x32)\n    x34 = sfilter(x33, x12)\n    x35 = apply(initset, x12)\n    x36 = rbind(upscale, TWO)\n    x37 = chain(x36, halve, width)\n    x38 = fork(apply, x37, height)\n    x39 = x38(x94)\n    x40 = lbind(I, x39)\n    x41 = chain(x33, x"], [1.1, "def solve_c3a93f38(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bce19042(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x777, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = toivec(x22)\n    x24 = branch(x17, width, height)\n    x25 = x24(x5)\n    x26 = subtract(x25, x22)\n    x27 = decrement(x26)\n    x28 = tojvec(x27)\n    x29 = invert(x28)\n    x30 = tojvec(x27)\n    x31 = invert(x30)\n    x32 = shift(x29, x31)\n    x33 = initset(x32)\n    x34 = remove(x23, x1)\n    x35 = cover(I, x34)\n    x36 = toindices(x3)\n    x37 = lbind(adjacent, x36)\n    x38 = sfilter(x35, x37)\n    x39 = fill(x35, TWO, x38)\n    x40 = objects(x39, T, F, T)\n    x41 = colorfilter(x40,"], [1.1, "def solve_56755d55(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_1caeb119(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(x5)\n    x14 = x12(x6)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = equality(x13, x16)\n    x18 = matcher(color, x16)\n    x19 = extract(x18, x17)\n    x20 = lbind(gravitate, x19)\n    x21 = compose(crement, x20)\n    x22 = rbind(add, UNITY)\n    x23 = branch(x22, identity, x21)\n    x24 = fork(connect, identity, x23)\n    x25 = maximum(x15)\n    x26 = inbox(x25)\n    x27 =toobject(x26, x5)\n    x28 = matcher(first, ZERO)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x27, x29)\n    x31 = dmirror(x30)\n    x32 = merge(x31)\n    x33 = chain(first, cmirror, dmirror)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = combine(x30, x35)\n    x37 = fill(x5, TWO, x36)\n    x38 = lrcorner(x2)\n    x39 = paint(x37, x38)\n    x40 =279(x35)\n    x41 =99"], [1.1, "def solve_edac7b62(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = other(x3, x4)\n    x6 = ofcolor(I, x4)\n    x7 = frontiers(I)\n    x8 = colorfilter(x7, x4)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = height(I)\n    x13 = toivec(x12)\n    x14 = hfrontier(x13)\n    x15 = toivec(NEG_ONE)\n    x16 = hfrontier(x15)\n    x17 = insert(x16, x8)\n    x18 = insert(x14, x17)\n    x19 = width(I)\n    x20 = tojvec(x19)\n    x21 = vfrontier(x20)\n    x22 = tojvec(NEG_ONE)\n    x23 = vfrontier(x22)\n    x24 = insert(x23, x8)\n    x25 = insert(x21, x24)\n    x26 = branch(x11, x18, x25)\n    x27 = lbind(argmin, x26)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x26)\n    x32 = compose(x31, x30)\n    x33 = fork(argmin, x32, x29)\n    x34 = fork(gravitate, initset, x30)\n    x35 = compose(crement, x34)\n    x36 = fork(add, identity, x35)\n    x37 = fork(gravitate, initset, x33)\n    x38 = compose(crement, x37)\n    x39 = fork(add, identity, x38)\n    x40 = ofcolor("], [1.1, "def solve_6864e94e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_d10b0c20(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = pair(x7, x10)\n    x12 = combine(x6, x11)\n    x13 = combine(x12, x12)\n    x14 = partition(I)\n    x15 = remove(x13, x14)\n    x16 = lbind(colorcount, I)\n    x17 = argmax(x15, x16)\n    x18 = remove(x17, x15)\n    x19 = height(x13)\n    x20 = increment(x19)\n    x21 = frontiers(I)\n    x22 = sfilter(x21, hline)\n    x23 = size(x22)\n    x24 = increment(x23)\n    x25 = divide(x20, x24)\n    x26 = width(x13)\n    x27 = increment(x26)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, vline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = ulcorner(x15)\n    x34 = matcher(first, x33)\n    x35 = shift(x32, x34)\n    x36 = last(x35)\n    x37 = remove(x36, x35)\n    x38 = last(x37)\n    x39 = first(x38)\n    x40 = shift(x34, x39)\n    x41 =19(x40)\n    x42 = shape(I)\n    x43 = add(x42, x40)\n    x44 = canvas(x38, x43)\n    x45 = shift"], [1.1, "def solve_f93cc39a(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = size(x7)\n    x9 = determined(x8, positive)\n    x10 = branch(x9, height, width)\n    x11 = x10(I)\n    x12 = subtract(x11, ONE)\n    x13 = branch(x9, size, height)\n    x14 = x13(I)\n    x15 = subtract(x14, TWO)\n    x16 = color(x3)\n    x17 = palette(I)\n    x18 = colorfilter(x17, x16)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = chain(positive, decrement, x21)\n    x23 = rbind(toobject, I)\n    x24 = chain(x9, x23, backdrop)\n    x25 = compose(x22, x24)\n    x26 = chain(x15, x25, dneighbors)\n    x27 = extract(x16, x26)\n    x28 = fork(combine, x27, x22)\n    x29 = rbind(contained, x17)\n    x30 = compose(x29, first)\n    x31 = rfilter(x27, x30)\n    x32 = equality(x31, x20)\n    x33 = branch(x32, x30, x27)\n    x34 = outbox(x28)\n    x35 = x34(x28)\n    x36 = initset(x35)\n    x37 = objects(x34, T, F, T)\n    x38 = insert(x47, x37)\n    x39 = sfilter(x38, x36)\n"], [1.1, "def solve_6a77717e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = subgrid(x1, I)\n    x3 = argmax(x1, width)\n    x4 = uppermost(x3)\n    x5 = leftmost(x3)\n    x6 = width(x2)\n    x7 = maximum(x6)\n    x8 = uppermost(x3)\n    x9 = subtract(x8, x7)\n    x10 = leftmost(x3)\n    x11 = height(x2)\n    x12 = maximum(x11)\n    x13 = uppermost(x3)\n    x14 = subtract(x12, x13)\n    x15 = rightmost(x3)\n    x16 = maximum(x15)\n    x17 = vmirror(x2)\n    x18 = vmirror(x26)\n    x19 = ofcolor(x14, ZERO)\n    x20 = toindices(x3)\n    x21 = combine(x19, x20)\n    x22 = hmirror(x21)\n    x23 = ulcorner(x2)\n    x24 = lrcorner(x2)\n    x25 = connect(x23, x24)\n    x26 = center(x2)\n    x27 = invert(x26)\n    x28 = toivec(x22)\n    x29 = shoot(x28, x27)\n    x30 = shift(x22, x29)\n    x31 = hmirror(x10)\n    x32 = vmirror(x31)\n    x33 = ofcolor(x31, ZERO)\n    x34 = astuple(x32, x33)\n    x35 = combine(x30, x34)\n    x36 = vmirror(x32)\n    x37 =597(x35, x36)\n    x38 = shift(x35, x37)\n    x39 = apply(toindices, x38)\n    x40 = rbind(shoot, x38)\n    x41 = mapply(x40, x39)\n    x42 = fill(x1, ONE, x41)"], [1.1, "def solve_34f62db3(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_c8b74777(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmin(x2, size)\n    x4 = color(x3)\n    x5 = toindices(x3)\n    x6 = normalize(x5)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = interval(TWO, x8, NEG_ONE)\n    x10 = apply(tojvec, x9)\n    x11 = rbind(apply, x10)\n    x12 = lbind(compose, size)\n    x13 = lbind(shift, x6)\n    x14 = rbind(\ufffd12, x13)\n    x15 = lbind(compose, x11)\n    x16 = x15(x14)\n    x17 = lbind(shift, x6)\n    x18 = rbind(x17, x16)\n    x19 = lbind(compose, x12)\n    x20 = x19(ORIGIN)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(x21, x8)\n    x23 = fork(contained, x22, identity)\n    x24 = sfilter(x5, x23)\n    x25 = compose(last, x22)\n    x26 = compose(toivec, x25)\n    x27 = fork(shift, x26, x24)\n    x28 = fork(insert, x27, ulcorner)\n    x29 = compose(last, x28)\n    x30 = fork(astuple, x29, identity)\n    x31 = size(x1)\n    x32 = decrement(x31)\n    x33 = power(x30, x32)\n    x34 = astuple(x33, x24)\n    x35 = crop(I, x14, x34)\n    x36 =astuple(x349, x92)\n    x37 = combine(x36, x35)\n    x38 = repeat(x37, ONE)\n    x39 = lbind(compose,"], [1.1, "def solve_729994cf(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_4ac6118b(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_e3e984fd(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, lowermost, uppermost)\n    x8 = x7(x2)\n    x9 = toivec(x8)\n    x10 = uppermost(x2)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x6, uppermost, rightmost)\n    x13 = x12(x2)\n    x14 = subtract(x13, x18)\n    x15 = branch(x11, ulcorner, lowermost)\n    x16 = x15(x2)\n    x17 = shift(x4, x16)\n    x18 = underfill(I, THREE, x17)\n    x19 = objects(x18, T, F, T)\n    x20 = rbind(other, TWO)\n    x21 = compose(x20, palette)\n    x22 = argmax(x19, x21)\n    x23 = other(x19, x22)\n    x24 = shape(x23)\n    x25 = canvas(x23, x24)\n    x26 = normalize(x23)\n    x27 = objects(x25, T, F, T)\n    x28 = colorfilter(x27, x23)\n    x29 = lbind(adjacent, x22)\n    x30 = sfilter(x28, x29)\n    x31 = objects(x25, T, F, T)\n    x32 = colorfilter(x31, x23)\n    x33 = rbind(adjacent, x2)\n    x34 = sfilter(x32, x33)\n    x35 = rbind(shift, x3)\n    x36 = shape(x35)\n    x37 = double(x36)\n    x38 = rbind(multiply, x37)\n    x39 = apply(x38, x34)\n    x40 = rbind"], [1.1, "def solve_b0cc33b2(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x8 = insert(x6, x17)\n    x9 = lbind(intersection, x8)\n    x10 = chain(positive, size, x9)\n    x11 = chain(positive, decrement, size)\n    x12 = rbind(greater, ONE)\n    x13 = chain(x14, x12, x10)\n    x14 = rbind(sfilter, x13)\n    x15 = chain(palette, x14, x414)\n    x16 = compose(x15, x9)\n    x17 = fork(subtract, x16, width)\n    x18 = lbind(apply, last)\n    x19 = chain(positive, decrement, x18)\n    x20 = lbind(lbind, astuple)\n    x21 = rbind(subtract, x20)\n    x22 = compose(x21, x17)\n    x23 = fork(sfilter, x17, x22)\n    x24 = rbind( WORK, x6)\n    x25 = compose(x24, x23)\n    x26 = chain(x19, x24, x25)\n    x27 = fork(mapply, x26, x23)\n"], [1.1, "def solve_4c7ed649(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =5032804\n    43803003\n    44348233\n    780040078\n    8083303c\n    80005208\n    000000880\n    000000008\n    000000008\n    x\"\"\"\n    x1 = argmax(x1, size)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = lefthalf(x3)\n    x5 = vmirror(x4)\n    x6 = objects(x5, T, F, F)\n    x7 = lbind(colorfilter, x6)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ONE)\n    x10 = extract(x1, x9)\n    x11 = color(x10)\n    x12 =285(x5)\n    x13 = rbind(toobject, x12)\n    x14 = rbind(colorcount, x11)\n    x15 = chain(x14, valmax, palette)\n    x16 = matcher(x15, x11)\n    x17 = mfilter(x12, x16)\n    x18 = replace(x2, x11, x8)\n    x19 = objects(x18, T, F, F)\n    x20 = colorfilter(x19, x11)\n    x21 = apply(toindices, x20)\n    x22 = chain(x17, first, x21)\n    x23 = mapply(x22, x21)\n    x24 = colorfilter(x21, x11)\n    x25 = apply(toindices, x24)\n    x26 = lbind(lbind, contained)\n    x27 = compose(x26, last)\n    x28 = argmax(x24, x27)\n    x29 = remove(x28, x24)\n    x30 = rbind(compose, initset)\n    x31 = lbind(rbind, manhattan)\n    x32 = compose(initset, x31)\n    x33 = lbind(argmin, x29)\n"], [1.1, "def solve_e9e8c041(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x1)\n    x4 = compose(x3, toindices)\n    x5 = fork(extract, x4, identity)\n    x6 = compose(rot90, x5)\n    x7 = power(x6, FOUR)\n    x8 = chain(rot90, x5, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = rot90(I)\n    x11 = apply(x9, x10)\n    x12 = rbind(rapply, I)\n    x13 = compose(x12, initset)\n    x14 = chain(first, x12, x13)\n    x15 = branch(x11, x14, x8)\n    x16 = branch(x12, height, width)\n    x17 = x16(I)\n    x18 = matcher(rot90, x17)\n    x19 = power(x18, FOUR)\n    x20 = x19(I)\n    x21 = ofcolor(x20, FIVE)\n    x22 = fill(x20, ZERO, x21)\n    x23 = apply(x22, x13)\n    x24 = asobject(x23)\n    x25 = divide(x17, THREE)\n    x26 = astuple(x25, x25)\n    x27 = shift(x24, x26)\n    x28 = paint(x22, x27)\n    x29 = rbind(compose, last)\n    x30 = lbind(rbind, contained)\n    x31 = chain(x29, x30, last)\n    x32 = rbind(compose, initset)\n    x33 = chain(x32, x31, x31)\n    x34 = fork(sfilter, cellwise, x33)\n    x35 = compose(x34, first)\n    x36 = compose(x34, last)\n    x37 = fork(compose, x35, x36)\n    x38 = fork(shift, x"], [1.1, "def solve_08443b1d(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(matcher, x10)\n    x12 = compose(x11, x9)\n    x13 = chain(flip, x12, x10)\n    x14 = sfilter(x4, x12)\n    x15 = sfilter(x4, x13)\n    x16 =matcher(x15, ulcorner)\n    x17 = fork(intersection, toindices, x16)\n    x18 = mapply(x17, x14)\n    x19 = fill(I, TWO, x18)\n    x20 = objects(x19, T, F, F)\n    x21 = compose(toindices, x18)\n    x22 = sfilter(x40, x21)\n    x23 = difference(x40, x22)\n    x24 = fill(x19, THREE, x23)\n    x25 = colorfilter(x20, TWO)\n    x26 = lbind(index, x25)\n    x27 = compose(x26, urcorner)\n    x28 = matcher(x27, ZERO)\n    x29 = extract(x25, x28)\n    x30 = rbind(subgrid, x19)\n    x31 = chain(x30, x29, first)\n    x32 = matcher(first, x29)\n    x33 = extract(x25, x32)\n    x34 = ulcorner(x33)\n    x35 = initset(x34)\n    x36 = subgrid(x35, x19)\n    x37 = uppermost(x33)\n"], [1.1, "def solve_abb7caa3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x5, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, last)\n    x37 = rbind(order, leftmost)\n    x38 = lbind(sfilter, x16)\n    x39 = lbind(matcher, uppermost)\n    x40 = compose(x39, x37)\n    x41 = chain(x32, x40, x29)\n    x42 = apply(x41"], [1.1, "def solve_34af6fdb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d935f9df(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0b3796c5(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = chain(cmirror, dmirror, merge)\n    x8 = x7(x6)\n    x9 = objects(x8, T, F, T)\n    x10 = color(x3)\n    x11 = compose(hmirror, vmirror)\n    x12 = x11(x10)\n    x13 = first(x12)\n    x14 = ofcolor(x13, x10)\n    x15 = lrcorner(x3)\n    x16 = other(x15, x13)\n    x17 = rbind(subtract, x15)\n    x18 = chain(even, x17, last)\n    x19 = sfilter(x14, x18)\n    x20 = sfilter(x14, x16)\n    x21 = sfilter(x20, x12)\n    x22 = ulcorner(x3)\n    x23 = other(x21, x22)\n    x24 = rbind(subtract, x15)\n    x25 = chain(even, x24, first)\n    x26 = sfilter(x19, x25)\n    x27 = sfilter(x19, x26)\n    x28 = fork(multiply, first, last)\n    x29 = fork(equality, x28, identity)\n    x30 = sfilter(x14, x29)\n    x31 = argmax(x30, x29)\n    x32 = outbox(x31)\n    x33 = chain(flip, x30, x32)\n    x34 = sfilter(x32, x33)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = objects(x36, T, F, T)\n    x38 = merge(x37)\n    x39 = apply(ulcorner"], [1.1, "def solve_07ddaf16(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_f5467c73(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_bb474b77(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, minimum)\n    x33 = rbind(sfilter, x31)\n    x34 = lbind(matcher, first)\n    x35 = lbind( compose, x24)\n    x36 = chain(x32, x33, x35)\n    x37 = compose(x32, x26)\n    x38 = fork(sfilter,"], [1.1, "def solve_a91b4b03(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = fork(contained, lrcorner, toindices)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = fork(contained, llcorner, toindices)\n    x6 = compose(flip, x5)\n    x7 = extract(x1, x6)\n    x8 = fork(contained, urcorner, toindices)\n    x9 = compose(flip, x8)\n    x10 = extract(x1, x9)\n    x11 = fork(contained, ulcorner, toindices)\n    x12 = compose(flip, x11)\n    x13 = extract(x1, x12)\n    x14 = height(x4)\n    x15 = height(x10)\n    x16 = add(x14, x15)\n    x17 = width(x4)\n    x18 = width(x7)\n    x19 = add(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = mostcolor(I)\n    x22 = canvas(x11, x20)\n    x23 = normalize(x4)\n    x24 = paint(x22, x23)\n    x25 = normalize(x7)\n    x26 = width(x7)\n    x27 = subtract(x19, x26)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = normalize(x10)\n    x32 = height(x10)\n    x33 = subtract(x16, x32)\n    x34 = toivec(x33)\n    x35 = shift(x31, x34)\n    x36 = paint(x30, x35)\n    x37 = normalize(x13)\n    x38 = shape(x13)\n    x39 = subtract(x20, x38)\n    x40 = shift(x37, x39)\n    O = paint(x36, x40"], [1.1, "def solve_69b3b735(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x32)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = rbind(divide, x38)\n    x41 = compose(x39, x40)\n"], [1.1, "def solve_7f49279c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid of x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_bd6ff578(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(positive, size, asindices)\n    x7 = lbind(contained, ZERO)\n    x8 = compose(x7, x6)\n    x9 = rbind(sfilter, x28)\n    x10 = lbind(compose, x8)\n    x11 = chain(x10, x9, x8)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x12, x11)\n    x14 = lbind(rbind, upscale)\n    x15 = chain(x14, x12, x11)\n    x16 = fork(upscale, x13, x15)\n    x17 = fork(hconcat, x16, ulcorner)\n    x18 = compose(x17, x6)\n    x19 = fork(vconcat, x18, ulcorner)\n    x20 = compose(x19, x6)\n    x21 = fork(connect, x20, urcorner)\n    x22 = fork(remove, x21, outbox)\n    x23 = fork(contained, x22, outbox)\n    x24 = compose(x23, x7)\n    x25 = mfilter(x3, x24)\n    x26 = height(x25)\n    x27 = fill(x15, ZERO, x26)\n    x28 = height(x25)\n    x29 = divide(x28, x31)\n    x30 = width(x25)\n    x31 =avesc(x30, x29)\n    x32 = ofcolor(x31, ZERO)\n    x33 = compose(last, last)\n    x34 = compose(first, last)\n    x35 = either(x32, x34)\n    x36 = branch(x35, x33, x34)\n    x37 = fill(x27, ZERO, x36)\n    x38"], [1.1, "def solve_d2f0d5c2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_25a67aa9(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = astuple(NINE, NINE)\n    x3 = canvas(ZERO, x2)\n    x4 = astuple(THREE, ONE)\n    x5 = merge(x1)\n    x6 = rbind(colorcount, ZERO)\n    x7 = compose(x6, palette)\n    x8 = merge(x1)\n    x9 = compose(x7, x8)\n    x10 = x9(BY_THREE)\n    x11 = initset(x10)\n    x12 = insert(ZERO, x11)\n    x13 = product(x12, x12)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(apply, last)\n    x18 = lbind(occurrences, I)\n    x19 = chain(x17, x18, frontiers)\n    x20 = fork(lbind, x18, shape)\n    x21 = compose(size, x20)\n    x22 = matcher(x21, ONE)\n    x23 = sfilter(x19, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = matcher(first, x25)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x23, x27)\n    x29 = width(x28)\n    x30 = increment(x29)\n    x31 = matcher(first, x30)\n    x32 = sfilter(x28, x31)\n    x33 = rbind(toobject, I)\n    x34 = chain(size, x33, first)\n    x35 = argmin(x32, x34)\n    x36 = width(x28)\n    x37 = increment(x36)\n    x38 = interval(ZERO, x37, ONE)\n    x39 = width(x28)\n    x40 = interval(ZERO, x39, ONE"], [1.1, "def solve_aeed2d0c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = valmax(x5, size)\n    x7 = other(x5, x6)\n    x8 = interval(ZERO, x2, ONE)\n    x9 = extract(x8, x7)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x7)\n    x13 = toindices(x10)\n    x14 = lbind(index, I)\n    x15 = compose(x14, mostcolor)\n    x16 = asindices(I)\n    x17 = ofcolor(I, x7)\n    x18 = rbind(toobject, I)\n    x19 = compose(x18, mostcolor)\n    x20 = apply(x19, x17)\n    x21 = rbind(adjacent, x10)\n    x22 = mfilter(x20, x21)\n    x23 = rbind(adjacent, x11)\n    x24 = mfilter(x23, x22)\n    x25 = combine(x22, x24)\n    x26 = fill(I, x7, x25)\n    x27 = asindices(I)\n    x28 = center(x27)\n    x29 = initset(x28)\n    x30 = fill(x26, x1, x29)\n    x31 = rot90(x30)\n    x32 = recolor(x31, x22)\n    x33 = rot180(x32)\n    x34 = recolor(x33, x22)\n    x35 = initset(x28)\n    x36 = insert(x29, x35)\n    x37 = backdrop(x36)\n    x38 = lbind(shift, x37)\n    x39 = occurrences(x26, x38)\n    x40 = mapply(x38, x39)\n    x41 = fill(x36, x3, x40"], [1.1, "def solve_e73539aa(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_2402b3b4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shoot(x26, UP_RIGHT)\n    x28 = mostcolor(I)\n    x29 = rbind(shoot, DOWN)\n    x30 = shoot(x27, DOWN_LEFT)\n    x31 = intersection(x29, x30)\n    x32 = fill(x23, x28, x31)\n    x33 = combine(x27, x35)\n    x34 = recolor(x33, x32)\n    x35 =\n    x34 =\n     interpreting802033\n    x3110303\n    x33 = lbind(shift, x32)\n    x34 = mapply(x31, x34)\n    x35 = shift"], [1.1, "def solve_4e5bbfff(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_a52fdcfb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, lrcorner)\n    x3 = x2(x1)\n    x4 = fork(equality, toindices, x3)\n    x5 = sfilter(x1, x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = branch(x7, identity, hmirror)\n    x9 = x8(I)\n    x10 = objects(x9, T, F, T)\n    x11 = compose(flip, x4)\n    x12 = sfilter(x10, x11)\n    x13 = rbind(shoot, UNITY)\n    x14 = rbind(shoot, NEG_UNITY)\n    x15 = fork(combine, x13, x14)\n    x16 = rbind(branch, llcorner)\n    x17 = rbind(x16, urcorner)\n    x18 = rbind(branch, DOWN_LEFT)\n    x19 = rbind(x18, UP_RIGHT)\n    x20 = rbind(branch, RIGHT)\n    x21 = rbind(x20, DOWN)\n    x22 = fork(contained, urcorner, toindices)\n    x23 = lbind(index, x9)\n    x24 = compose(x21, x22)\n    x25 = fork(add, ulcorner, x24)\n    x26 = compose(x23, x25)\n    x27 = chain(initset, x17, x22)\n    x28 = fork(rapply, x27, identity)\n    x29 = compose(first, x28)\n    x30 = compose(x19, x22)\n    x31 = fork(add, x29, x30)\n    x32 = compose(x15, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x12)\n    x35 = merge(x12)\n    x36 = cover(x9, x35)\n    x37 = paint("], [1.1, "def solve_bfd78d37(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = trim(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = remove(x3, x1)\n    x5 = argmax(x4, width)\n    x6 = uppermost(x5)\n    x7 =900(x6, toivec)\n    x8 = leftmost(x5)\n    x9 =900(x8, tojvec)\n    x10 = add(x7, x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = add(x7, x12)\n    x14 = add(x41, x13)\n    x15 = tojvec(x14)\n    x16 = lowermost(x5)\n    x17 = rightmost(x5)\n    x18 = center(x16)\n    x19 = add(x17, x18)\n    x20 = shift(x12, x19)\n    x21 = toivec(x20)\n    x22 = lowermost(x5)\n    x23 = rightmost(x5)\n    x24 = shift(x23, x22)\n    x25 = tojvec(x24)\n    x26 = rightmost(x5)\n    x27 = rightmost(x5)\n    x28 = subtract(x26, x27)\n    x29 = leftmost(x5)\n    x30 = shift(x28, x29)\n    x31 = toivec(x30)\n    x32 = invert(x30)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = shift(x31, x33)\n    x35 = tojvec(x34)\n    x36 = invert(x35)\n    x37 = shift(x34, x36)\n    x38 = toivec(x37)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    x41 = tojvec(x40)\n    x42 = invert(x41)\n    x43 = shift(x33"], [1.1, "def solve_77e1dbe8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = size(x5)\n    x7 = positive(x6)\n    x8 = astuple(color, x5)\n    x9 = astuple(leastcolor, x3)\n    x10 = branch(x7, x8, x9)\n    x11 = compose(initset, first)\n    x12 = fork(rapply, x11, last)\n    x13 = compose(first, x12)\n    x14 = x13(x10)\n    x15 = normalize(x3)\n    x16 = matcher(first, x14)\n    x17 = sfilter(x15, x16)\n    x18 = ulcorner(x17)\n    x19 = invert(x18)\n    x20 = shift(x15, x19)\n    x21 = lbind(shift, x20)\n    x22 = objects(x1, T, F, T)\n    x23 = colorfilter(x22, x14)\n    x24 = apply(first, x23)\n    x25 = mapply(x21, x24)\n    x26 = paint(x1, x25)\n    x27 = height(x1)\n    x28 = frontiers(I)\n    x29 = sfilter(x28, hline)\n    x30 = size(x29)\n    x31 = increment(x30)\n    x32 = divide(x27, x31)\n    x33 = width(x1)\n    x34 = frontiers(I)\n    x35 = sfilter(x34, vline)\n    x36 = size(x35)\n    x37 = increment(x36)\n    x38 = divide(x33, x37)\n    x39 = rbind(multiply, x38)\n    x40 = rbind(divide, x38)\n    x41 = compose(x39, x40)\n    x"], [1.1, "def solve_08c993a5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, size)\n    x6 = lbind(x5, dneighbors)\n    x7 = lbind(lbind, intersection)\n    x8 = lbind(lbind, x4)\n    x9 = chain(x6, x7, x8)\n    x10 = lbind(sfilter, x4)\n    x11 = chain(size, x10, x9)\n    x12 = rbind(greater, TWO)\n    x13 = compose(x12, frontiers)\n    x14 = rbind(sfilter, x13)\n    x15 = chain(size, x14, toindices)\n    x16 = lbind(greater, TWO)\n    x17 = compose(x16, x15)\n    x18 = rbind(sfilter, x17)\n    x19 = chain(x15, x18, toindices)\n    x20 = rbind(greater, ONE)\n    x21 = compose(x20, x19)\n    x22 = lbind(apply, x21)\n    x23 = lbind(colorfilter, x4)\n    x24 = chain(x10, x22, x23)\n    x25 = fork(sfilter, identity, x24)\n    x26 = compose(x25, x21)\n    x27 = palette(I)\n    x28 = argmax(x27, x26)\n    x29 = objects(x250, T, F, F)\n    x30 = colorfilter(x29, x28)\n    x31 = difference(x29, x30)\n    x32 = rbind(subgrid, I)\n    x33 = apply(x32, x31)\n    x34 = rbind(colorcount, x28)\n    x35 = argmax(x33, x34)\n    x36 = remove(x35, x33)\n    x37 = lbind(4344328, x35"], [1.1, "def solve_d6752731(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, either)\n    x18 = lbind(x17, first)\n    x19 = rbind(sfilter, x18)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(shift, x4)\n    x22 = chain(x20, x19, x21)\n    x23 = fork(argmin, x15, x22)\n    x24 = fork(argmin, x16, x22)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(mapply, x25, x21)\n    x27 = fork(paint, identity, x26)\n    x28 =\n    x29 = apply(x27, x5)\n    x30 = combine(x28, x5)\n    x31 = mapply(x30, x13)\n    x32 = ofcolor(I, TWO)\n    x33 = x3213upe(x32)\n    x34 = power(first, FOUR)\n    x35 = x34(x3333)\n    x36 = x34(x39)\n    x37 = apply(last, x33)\n    x38 = apply(x36, x39)\n    x39 = combine(x37, x38)\n    "], [1.1, "def solve_e3529046(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_3b6967b2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_4ae75064(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = subgrid(x2, I)\n    x4 = rbind(contained, ONE)\n    x5 = compose(x4, sfilter)\n    x6 = sfilter(x1, x5)\n    x7 = rot90(x6)\n    x8 = sfilter(x6, x5)\n    x9 = rot180(x6)\n    x10 = sfilter(x8, x9)\n    x11 = lefthalf(x10)\n    x12 = righthalf(x11)\n    x13 = subgrid(x12, x3)\n    x14 = sfilter(x11, hline)\n    x15 = replace(x13, ZERO, ONE)\n    x16 = extract(x14, hsplit)\n    x17 = ulcorner(x16)\n    x18 = width(x12)\n    x19 = divide(x18, THREE)\n    x20 = increment(x19)\n    x21 = width(x12)\n    x22 = divide(x21, THREE)\n    x23 = increment(x22)\n    x24 = canvas(ZERO, x3)\n    x25 = asindices(x24)\n    x26 = ofcolor(x12, ZERO)\n    x27 = asindices(x12)\n    x28 = center(x27)\n    x29 = initset(x28)\n    x30 = fill(x24, ZERO, x29)\n    x311 = product(x26, x30)\n    x32 = rbind(intersection, x2)\n    x33 = fork(size, x2, ZERO)\n    x34 = compose(x33, x2)\n    x35 = sfilter(x11, x34)\n    x36 = center(x2)\n    x37 = initset(x32)\n    x38 = shift(x35, x37)\n    x39 = toobject(x38, x12)\n    x40 = mapply(x38, x39)\n    O = fill("], [1.1, "def solve_440e39cc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = rbind(sfilter, hline)\n    x11 = rbind(sfilter, vline)\n    x12 = chain(x10, x11, shape)\n    x13 = lbind(lbind, shift)\n    x14 = chain(x12, x13, uppermost)\n    x15 = rbind(sfilter, x17)\n    x16 = lbind(lbind, shift)\n    x17 = chain(x15, x16, ulcorner)\n    x18 = fork(argmax, x14, x17)\n    x19 = fork(orig solve, x18, identity)\n    x20 = apply(x19, x9)\n    x21 =O = paint(x5, x20)\n    x22 = chain(x3, x17, x20)\n    x23 = apply(x22, x10)\n    x24 =arraymax(x23, x2)\n    x25 = matcher(x22, x24)\n    x26 = sfilter(x3, x25)\n    x27 = lbind(upscale, x6)\n    x28 = chain(x27, height, width)\n    x29 = compose(x28, rot90)\n    x30 = power(x29, TWO)\n    x31 = initset(x2)\n    x32 = insert(x000, x31)\n    x33 = insert(x30, x32)\n    x34 = merge(x33)\n    x35 = rot90(x14)\n    x36 = repeat(x35, ONE)\n    x37 = combine(x35, x36)\n    x38 = fork(combine, x29, x37)\n"], [1.1, "def solve_5ce70c23(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rbind(bordering, I)\n    x3 = extract(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = totuple(x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = color(x6)\n    x9 = mostcolor(I)\n    x50 = shape(x6)\n    x51 = canvas(x9, x50)\n    x52 = normalize(x6)\n    x53 = paint(x51, x52)\n    x54 = upscale(x53, TWO)\n    x55 = shape(x7)\n    x56 = canvas(x9, x55)\n    x57 = normalize(x7)\n    x58 = paint(x56, x57)\n    x59 =\n    ulcorner(x6)\n    x50 = shift(x59, NEG_UNITY)\n    x51 = shape(x6)\n    x52 = increment(x31)\n    x53 = multiply(x50, x52)\n    x54 = shift(x51, x53)\n    x55 = combine(x20, x54)\n    x56 = intersection(x22, x55)\n    x57 = recolor(x6, x53)\n    x58 = outbox(x13)\n    x59 = backdrop(x58)\n    x60 = recolor(x6, x52)\n    x61 = outbox(x13)\n    x62 = combine(x60, x61)\n    x63 = recolor(x7, x52)\n    x64 = box(x33)\n    x65 = combine(x63, x64)\n    x66 = recolor(x8, x65)\n    x67 = box(x33)\n    x68 = cover(x33, x67)\n    x69 = paint(x68, x66)\n    x70 = height(x67)\n    x71 = width(x67)\n    x72 = interval(ZERO, x71, ONE)\n    x73 = combine(x70"], [1.1, "def solve_9bfc9739(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = toindices(x3)\n    x5 = sizefilter(x1, ONE)\n    x6 = difference(x1, x5)\n    x7 = color(x3)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = other(x9, x11)\n    x13 = colorfilter(x1, x12)\n    x14 = argmin(x13, first)\n    x15 = matcher(first, x14)\n    x16 = sfilter(x49, x15)\n    x17 = difference(x49, x16)\n    x18 = colorfilter(x17, x12)\n    x19 = cover(I, x16)\n    x20 =887(x19)\n    x21 = branch(x20, DOWN, RIGHT)\n    x22 = apply(uppermost, x21)\n    x23 = size(x22)\n    x24 = equality(x23, TWO)\n    x25 = branch(x20, lowermost, uppermost)\n    x26 = apply(x25, x22)\n    x27 = remove(ZERO, x26)\n    x28 = other(x27, x24)\n    x29 = remove(x28, x26)\n    x30 = rbind(manhattan, x28)\n    x31 = other(x30, initset)\n    x32 = lowermost(x31)\n    x33 = hline(x32)\n    x34 = branch(x33, x22, x25)\n    x35 = x34(x)\n    x36 = other(x35, x24)\n    x37 = fill(x19, x21, x36)\n    x38 = lowermost(x31)\n    x39 = rightmost(x31)\n    x40 = subtract(x38,"], [1.1, "def solve_a192dd38(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, pos, RIGHT)\n    x8 = branch(x6, uppermost, leftmost)\n    x9 = x7(x8)\n    x10 = shape(x2)\n    x11 = subtract(x10, x9)\n    x12 = repeat(x9, x11)\n    x13 = merge(x12)\n    x14 = hmirror(x13)\n    x15 = vmirror(x13)\n    x16 = as8899999(x14)\n    x17 = as886968898(146)\n    x18 = initset(x15)\n    x19 = insert(x16, x18)\n    x20 = insert(x17, x19)\n    x21 = output:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    x20000000000000000000000\n    x250000000000000000000000\n    2250000000000000000000000\n    x24)\n    x15 =0000000000000000000000\n    68280000000000000000000000\n    Example output:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    8080000000000000000000000\n    080000000000000000000000\n    8250000000000000000000000\n    x240000000000000000000000\n    x18000000000000000008800\n    082248000000000800000080\n    \"\"\"\n    x1 = extract(x1, x18)\n    x2 = ulcorner(x2)\n    x3 = llcorner(x2)\n    x4 = connect(x2, x3)\n    x5 = toobject(x4, I)\n    x6 = color(x5)\n    x7 = subgrid("], [1.1, "def solve_1de8480d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(contained, x25)\n    x32 = rbind(subtract, x26)\n    x33 = lbind(cmirror, x30)\n    x34 = compose(x32, x33)\n    x35 = fork(0000000, x34, first)\n    x36 = compose(x21, first)\n    x37 = fork(remove, x36, last)\n    x38 = lbind(lbind, shift)\n    x39 = lbind(occurrences"], [1.1, "def solve_823ad94f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_ff79406e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, T, T)\n    x3 = first(x2)\n    x4 = colorfilter(x3, FOUR)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = subtract(x5, x6)\n    x8 = x7(x7)\n    x9 = x7(x6)\n    x10 = fill(I, ONE, x9)\n    x11 = fill(x10, TWO, x8)\n    x12 = size(x1)\n    x13 = positive(x12)\n    x14 = branch(x13, dmirror, identity)\n    x15 = x14(x11)\n    x16 = downscale(x15, x6)\n    x17 = objects(x16, F, F, T)\n    x18 = rbind(colorcount, TWO)\n    x19 = argmax(x17, x18)\n    x20 = remove(x19, x17)\n    x21 = first(x20)\n    x22 = subgrid(x21, x15)\n    x23 = objects(x22, F, T, T)\n    x24 = argmax(x23, numcolors)\n    x25 = subgrid(x24, x22)\n    x26 = objects(x25, T, F, T)\n    x27 = neighbors(ORIGIN)\n    x28 = insert(ORIGIN, x27)\n    x29 = rbind(contained, x28)\n    x30 = chain(flip, x29, ulcorner)\n    x31 = sfilter(x27, x30)\n    x32 =48(x31)\n    x33 = matcher(first, TWO)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(toindices, x34)\n    x36 = chain(x32, x35, x35)\n    x37 = fork(84, fgpartition, x36)\n    x38 = fork(recolor, color, x37)\n    x39 = mapply"], [1.1, "def solve_5e5b7fa2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_409f6278(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_fce1b740(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(normalize, x16)\n    x18 = astuple(NEG_TWO, NEG_TWO)\n    x19 = canvas(ZERO, x18)\n    x20 = asindices(x19)\n    x21 = box(x20)\n    x22 = paint(x19, x21)\n    x23 = subgrid(x15, x22)\n    x24 = ofcolor(x23, x14)\n    x25 = normalize(x24)\n    x26 = matcher(first, x14)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = normalize(x28)\n    x30 = matcher(first, x14)\n    x31 = compose(flip, x30)\n    x32 = sfilter(x29, x31)\n    x33 =normalize(x32)\n    x34 = recolor(x14, x33)\n    x35 = shift(x34, UNITY)\n    x36 = paint(x23, x35)\n    x37 = sizefilter(x21, x36)\n    x38 = objects(x37, T, F, T)\n    x39 = apply(urcorner,"], [1.1, "def solve_8fbeb578(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_d368edf7(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_4589b872(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_5ece6e7c(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = lbind(apply, x3)\n    x5 = chain(even, maximum, x4)\n    x6 = lbind(sfilter, x1)\n    x7 = fork(add, first, last)\n    x8 = rbind(remove, x2)\n    x9 = compose(center, last)\n    x10 = fork(subtract, first, x9)\n    x11 = compose(x5, x10)\n    x12 = lbind(rbind, equality)\n    x13 = lbind(argmin, x2)\n    x14 = chain(x7, x4, x10)\n    x15 = lbind(lbind, astuple)\n    x16 = lbind(rbind, astuple)\n    x17 = lbind(compose, x11)\n    x18 = lbind(compose, x14)\n    x19 = compose(x18, x15)\n    x20 = compose(x18, x16)\n    x21 = compose(x13, x19)\n    x22 = rbind(compose, x21)\n    x23 = lbind(lbind, equality)\n    x24 = rbind(compose, x19)\n    x25 = chain(x24, x23, x8)\n    x26 = lbind(fork, greater)\n    x27 = compose(x26, x25)\n    x28 = fork(sfilter, toindices, x27)\n    x29 = rbind(add, RIGHT)\n    x30 = compose(x29, x28)\n    x31 = fork(add, LEFT, x30)\n    x32 = rbind(add, DOWN)\n    x33 = compose(x32, x31)\n    x34 = fork(extract, x30, x33)\n    x35 = fork(insert, x29, x14)\n    x36 = compose(x31, x35)\n    x37 = fork(insert, x33, x36)\n    x38 ="], [1.1, "def solve_da715430(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x37 = lbind(apply, x29)\n    x38 = rbind(order, leftmost)\n    x39 = lbind(sfilter, x16)\n    x40 = lbind(matcher, uppermost)\n    x41 = compose(x39, x40)\n    x42 = chain(x338, x37, x41)\n    x43 = apply(x"], [1.1, "def solve_38851157(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_8dde18b6(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_4af2521d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bade78c6(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_cbea22bf(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = astuple(ONE, THREE)\n    x3 = canvas(ZERO, x2)\n    x4 = vconcat(x3, x3)\n    x5 = objects(x4, T, T, T)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = vmirror(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = compose(double, halve)\n    x14 = fork(equality, identity, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(multiply, THREE)\n    x18 = rbind(intersection, x13)\n    x19 = chain(x17, x18, dneighbors)\n    x20 = fork(both, x18, x19)\n    x21 = extract(x16, x20)\n    x22 = objects(x4, T, T, T)\n    x23 = colorfilter(x22, ONE)\n    x24 = merge(x23)\n    x25 = difference(x22, x23)\n    x26 = product(x25, x25)\n    x27 = sfilter(x26, x18)\n    x28 = first(x27)\n    x29 = paint(x7, x28)\n    x30 = branch(x28, x22, x extract)\n    x31 = x30(x30)\n    x32 = initset(x31)\n    x33 = insert(x29, x32)\n    x34 = backdrop(x33)\n    x35 = merge(x34)\n    x36 = double(x50)\n    x37 = add(x36, UNITY)\n    x38 = initset(x37)\n    x39 = insert(x28, x38)\n    x40 = backdrop(x39)\n    x41 =0014"], [1.1, "def solve_b43cc446(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = width(x4)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(x2)\n    x10 = maximum(x9)\n    x11 = double(x10)\n    x12 = interval(ONE, x11, TWO)\n    x13 = matcher(first, ZERO)\n    x14 = compose(flip, x13)\n    x15 = rbind(sfilter, x14)\n    x16 = lbind(upscale, x4)\n    x17 = chain(x16, width, hupscale)\n    x18 = lbind(ipscale, x12)\n    x19 = chain(x18, vupscale, hupscale)\n    x20 = x17(x12)\n    x21 = rot90(x20)\n    x22 = rot180(x20)\n    x23 = rot270(x22)\n    x24 = ofcolor(x20, ONE)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x24, ONE)\n    x27 = rightmost(x26)\n    x28 = astuple(x25, x27)\n    x29 = ofcolor(x20, ONE)\n    x30 = lbind( argmin, x29)\n    x31 = rbind(colorcount, x25)\n    x32 = decrement(x31)\n    x33 = rbind(astuple, x32)\n    x34 = lbind(subtract, x27)\n    x35 = rbind(shoot, x4)\n    x36 = rightmost(x24)\n    x37 = lbind(subtract, x26)\n    x38 = shoot(x35, x36)\n    x39 = shoot(x39, x37)\n    x40 = fill(x24, x29, x38)\n    x41 = fill"], [1.1, "def solve_8c32d409(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x28)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x29)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_7a796100(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_2d953f5b(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(recolor, combine)\n    x6 = lbind(mapply, paint)\n    x7 = rbind(compose, x3)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x7, x8, backdrop)\n    x10 = chain(x5, x6, x9)\n    x11 = fork(paint, identity, x10)\n    x12 = rbind(branch, identity)\n    x13 =\n    x12, x11)\n    x14 = chain(size, dedupe, x13)\n    x15 = matcher(x14, ONE)\n    x16 = fork(both, x15, x13)\n    x17 = sfilter(x4, x16)\n    x18 = argmax(x17, x7)\n    x19 = color(x18)\n    x20 = sfilter(x4, x15)\n    x21 = other(x20, x19)\n    x22 = subgrid(x18, I)\n    x23 = objects(x22, T, F, T)\n    x24 = colorfilter(x23, x21)\n    x25 = difference(x23, x24)\n    x26 = chain(positive, size, x09629)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(indices, x29, outbox)\n    x31 = chain(x26, x27, x30)\n    x32 = rbind(matcher, ZERO)\n    x33 = compose(x32, x31)\n    x34 = fork(sfilter, x30, x33)\n    x35 = rbind(shift, RIGHT)\n    x36 = rbind(shift, LEFT)\n    x37 = compose(x35, x"], [1.1, "def solve_b704385a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = argmin(x1, size)\n    x6 = other(x1, x5)\n    x7 = color(x6)\n    x8 = extract(x1, x2)\n    x9 = ulcorner(x8)\n    x10 = llcorner(x8)\n    x11 = urcorner(x8)\n    x12 = shoot(x9, UNITY)\n    x13 = shoot(x10, DOWN_LEFT)\n    x14 = shoot(x11, UP_RIGHT)\n    x15 = shoot(x12, NEG_UNITY)\n    x16 = combine(x14, x15)\n    x17 = combine(x13, x16)\n    x18 = extract(x17, hline)\n    x19 = ulcorner(x8)\n    x20 = llcorner(x8)\n    x21 = asobject(x8)\n    x22 = asindices(x21)\n    x23 = urcorner(x8)\n    x24 = shoot(x19, UNITY)\n    x25 = shoot(x20, DOWN_LEFT)\n    x26 = shoot(x25, UP_RIGHT)\n    x27 = shoot(x26, NEG_UNITY)\n    x28 = combine(x24, x25)\n    x29 = combine(x24, x27)\n    x30 = color(x6)\n    x31 = combine(x29, x30)\n    x32 = vmirror(x24)\n    x33 = paint(x51, x32)\n    x34 = asobject(x33)\n    x35 = matcher(first, x7)\n    x36 = compose(flip, x35)\n    x37 = sfilter(x34, x36)\n    x38 = height(x37)\n    x39 = subtract(x38, THREE)\n    x40 = astuple(ONE, x39)\n    x"], [1.1, "def solve_956ff18b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, size)\n    x12 = sfilter(x1, x11)\n    x13 = argmin(x12, size)\n    x14 = color(x13)\n    x15 = colorfilter(x1, x14)\n    x16 = sizefilter(x15, ONE)\n    x17 = merge(x16)\n    x18 = colorfilter(x17, x14)\n    x19 = merge(x18)\n    x20 = fill(I, x1, x19)\n    x21 = fill(x20, x4, x19)\n    x22 = ofcolor(x21, x14)\n    x23 = subgrid(x22, x21)\n    x24 = asindices(x23)\n    x25 = sizefilter(x24, ONE)\n    x26 = replace(x25, x14, x8)\n    x27 = difference(x24, x25)\n    x28 = colorfilter(x27, x14)\n    x29 = fill(x28, apply, x26)\n    x30 = lbind(shift, x24)\n    x31 = mapply(x30, x29)\n    x32 = fill(x23, x4, x31)\n    x33 = toindices(x32)\n    x34 = box(x33)\n    x35 = difference(x33, x34)\n    x36 = subgrid(x35, x32)\n    x37 = asindices(x32)\n    x38 = replace(x37, x14, x8)\n    x39 = difference("], [1.1, "def solve_83bfd43a(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, sign, identity)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = colorfilter(x9, TWO)\n    x11 = lbind(colorfilter, x9)\n    x12 = chain(first, x11, color)\n    x13 = fork(colorfilter, x12, color)\n    x14 = extract(x10, x13)\n    x15 = subgrid(x14, I)\n    x16 = frontiers(x15)\n    x17 = last(x16)\n    x18 = toindices(x17)\n    x19 =607(x18)\n    x20 = shoot(x19, NEG_UNITY)\n    x21 = fgpartition(x20)\n    x22 = matcher(color, TWO)\n    x23 = compose(flip, x22)\n    x24 = extract(x21, x23)\n    x25 = colorfilter(x21, TWO)\n    x26 = lbind(colorfilter, x25)\n    x27 = compose(flip, x26)\n    x28 = fork(both, x26, x27)\n    x29 = rbind(contained, x17)\n    x30 = compose(x29, first)\n    x31 = rbind(sfilter, x30)\n    x32 = compose(x31, x28)\n    x33 = lbind(rbind, equality)\n    x34 = fork(valmin, x32, x33)\n    x35 = compose(x32, x28)\n    x36 = fork(both, x34, x35)\n    x37 = extract(x51, x36)\n    x38 = inbox(x73)\n    x39 = center(x38)\n    x40 = ofcolor"], [1.1, "def solve_32b3918b(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_ad25dd65(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = fork(equality, height, width)\n    x4 = argmin(x2, x3)\n    x5 = mostcolor(I)\n    x6 = shape(x4)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x4)\n    x9 = paint(x7, x8)\n    x10 = height(x4)\n    x11 = width(x4)\n    x12 = toivec(x10)\n    x13 = tojvec(x11)\n    x14 = divide(x11, x12)\n    x15 = divide(x11, x13)\n    x16 = width(x4)\n    x17 = width(x7)\n    x18 = astuple(x14, x15)\n    x19 = canvas(x5, x18)\n    x20 = normalize(x8)\n    x21 = lbind(shift, x20)\n    x22 = height(x7)\n    x23 = height(x28)\n    x24 = divide(x22, x39)\n    x25 = increment(x22)\n    x26 = increment(x25)\n    x27 = astuple(x24, x26)\n    x28 = canvas(x5, x27)\n    x29 = asobject(x28)\n    x30 = shift(x29, x27)\n    x31 = paint(x20, x30)\n    x32 = normalize(x13)\n    x33 = matcher(first, x5)\n    x34 = sfilter(x32, x33)\n    x35 = dmirror(x34)\n    x36 = papply(pair, x, x34)\n    x37 = lbind(compose, x590)\n    x38 = lbind(lbind, shift)\n    x39 = compose(x38, x35)\n    x40 = lbind(compose, x39)\n    x41 =99959948dmirror(x35)\n    x42 = x41000"], [1.1, "def solve_8152ae2d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_b1c1b9f0(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = palette(x2)\n    x24 = remove(ZERO, x23)\n    x25 = other(x24, leastcolor)\n    x26 = objects(x22, T, F, F)\n    x27 = colorfilter(x26, x25)\n    x28 = rbind(toobject, x55)\n    x29 = chain(xmin, x28, outbox)\n    x30 = mapply(x29, x27)\n    x31 = mapply(toindices, x30)\n    x32 = box(x2)\n    x33 = combine(x31, x32)\n    x34 = difference(x31, x33)\n    x35 = mapply(toobject, x34, x30)\n    x36 = ofcolor(x10, x25)\n    x37 = ofcolor(x10, x of)\n    x38 = intersection(x36, x37)"], [1.1, "def solve_b955f27b(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_849d6a29(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_af3e1b54(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_6d0b4497(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_bd4ae27f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = backdrop(x4)\n    x6 = lbind(148800\n    x7 = compose(increment, last)\n    x8 = rbind(subtract, TWO)\n    x9 = rbind(ofcolor, x4)\n    x10 = rbind(contained, x9)\n    x11 = chain(x8, x10, last)\n    x12 = merge(x1)\n    x13 = compose(first, last)\n    x14 = compose(decrement, increment)\n    x15 = fork(multiply, x13, x14)\n    x16 = fork(add, x17, x15)\n    x17 = height(x1)\n    x18 = maximum(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = apply(x16, x19)\n    x21 = rbind(contained, x20)\n    x22 = rbind(extract, x21)\n    x23 = lbind(extract, x21)\n    x24 = lbind(insert, x4)\n    x25 = chain(x23, x22, x24)\n    x26 = lbind(canvas, x24)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x27, x23)\n    x29 = fork(vconcat, x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x1, x30)\n    x32 = merge(x31)\n    x33 = toindices(x32)\n    x34 = rbind(contained, x33)\n    x35 = compose(flip, x34)\n    x36 = sfilter(x33, x35)\n    x37 = asindices(I)\n    x38 = lbind(astuple, x37)\n    x39 = height(I)\n    x40 = compose(x"], [1.1, "def solve_4f60537e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = lengths(x2)\n    x11 = divide(x10, x4)\n    x12 = DOWNscale(x2, x11)\n    x13 =0107(x12)\n    x14 = maximum(x3)\n    x15 = increment(x14)\n    x16 = interval(ONE, x15, ONE)\n    x17 = lbind(power, inbox)\n    x18 = rbind(rapply, x2)\n    x19 = compose(initset, x17)\n    x20 = chain(first, x18, x19)\n    x21 = multiply(x5, x4)\n    x22 = double(x21)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = apply(x20, x23)\n    x25 = rbind(toobject, I)\n    x26 = compose(x25, totuple)\n    x27 = lbind(apply, x26)\n    x28 = lbind(ofcolor, I)\n    x29 = lbind(prapply, connect)\n    x30 = fork(x29, x26, identity)\n    x31 = compose(x27, x30)\n    x32 = compose(x31, x28)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x24)\n    x35 = paint(I, x34)\n    x36 = merge(x2)\n    O = paint(x35, x36)\n    return O"], [1.1, "def solve_5e3001e5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = colorfilter(x1, ONE)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(shoot, UNITY)\n    x6 = chain(x4, x5, lrcorner)\n    x7 = matcher(x6, UNITY)\n    x8 =130(x2)\n    x9 = sfilter(x3, x7)\n    x10 = fork(combine, vfrontier, hfrontier)\n    x11 = compose(x10, center)\n    x12 = mapply(x11, x9)\n    O = underfill(I, EIGHT, x12)\n    return O"], [1.1, "def solve_6663cc15(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = chain(toivec, invert, height order)\n    x5 = fork(shift, identity, x4)\n    x6 = mapply(x5, x1)\n    O = paint(x3, x6)\n    return O"], [1.1, "def solve_b686e288(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = subgrid(x1, I)\n    x3 = replace(x2, ZERO, argmin)\n    x4 = normalize(x3)\n    x5 = dmirror(x4)\n    x6 = papply(pair, x4, x5)\n    x7 = lbind(apply, maximum)\n    x8 = apply(x7, x6)\n    x9 = cmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x7, x10)\n    x12 = smirror(x11)\n    x13 = papply(pair, x11, x12)\n    x14 = apply(x7, x13)\n    x15 =mirror(x14)\n    x16 = papply(pair, x14, x15)\n    x17 = apply(x7, x16)\n    x18 =14(x17)\n    x19 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x19, EIGHT, x18)\n    return O"], [1.1, "def solve_fae0a12d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 =176(I)\n    x2 = decrement(x1)\n    x3 = astuple(ZERO, x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = tojvec(x6)\n    x8 = height(I)\n    x9 = astuple(x8, minimum)\n    x10 = canvas(ZERO, x9)\n    x11 = connect(x7, x10)\n    x12 = shape(I)\n    x13 = halve(x12)\n    x14 = tojvec(x13)\n    x15 = height(I)\n    x16 = astuple(x15, x13)\n    x17 = connect(x14, x16)\n    x18 = compose(size, dedupe)\n    x19 = matcher(x18, ONE)\n    x20 = compose(x19, x7)\n    x21 = fork(rapply, x20, identity)\n    x22 =4220(x4)\n    x23 = branch(x19, x22, x17)\n    x24 = connect(x7, x23)\n    x25 = width(I)\n    x26 = halve(x25)\n    x27 = tojvec(x26)\n    x28 = height(I)\n    x29 = decrement(x28)\n    x30 = astuple(x29, x26)\n    x31 = connect(x27, x30)\n    x32 = compose(flip, x31)\n    x33 = rbind(ofcolor, ZERO)\n    x34 = mfilter(x33, x32)\n    x35 = fill(x10, EIGHT, x34)\n    x36 = shift(x34, x35)\n    O = paint(x35, x36)\n    return O"], [1.1, "def solve_fea3b589(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = astuple(x2, x2)\n    x4 = leftmost(x3)\n    x5 = shoot(x4, DOWN)\n    x6 = shoot(x4, uppermost)\n    x7 = shoot(x4, DOWN)\n    x8 = combine(x5, x6)\n    x9 = combine(x5, x7)\n    x10 = combine(x8, x9)\n    x11 = fork(combine, vfrontier, hfrontier)\n    x12 =zapply(x11, x10)\n    x13 = rbind(shoot, x4)\n    x14 =\n    x15 =\n    x16 = shoot(x4, x13)\n    x17 = combine(x14, x16)\n    x18 = mapply(x17, x12)\n    x19 = fill(I, EIGHT, x18)\n    O = fill(x19, TWO, x13)\n    return O"], [1.1, "def solve_2e73a6d3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, ONE)\n    x3 = extract(x1, x2)\n    x4 = lbind(adjacent, x3)\n    x5 = extract(x1, x4)\n    x6 = toindices(x5)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, size)\n    x9 = sfilter(x1, x8)\n    x10 = knockediers(x9)\n    x11 = fork(equality, toindices, box)\n    x12 = sfilter(x10, x11)\n    x13 = compose(initset, totuple)\n    x14 = fork(upscale, identity, x13)\n    x15 = compose(vupscale, x14)\n    x16 = fork(equality, size, x15)\n    x17 = sfilter(x12, x16)\n    x18 = fork(equality, toindices, backdrop)\n    x19 = sfilter(x12, x18)\n    x20 =312(x19, x15)\n    x21 = combine(x17, x20)\n    x22 = fork(combine, vfrontier, hfrontier)\n    x23 = mapply(x22, x21)\n    x24 = combine(x19, x23)\n    x25 = mapply(x21, x24)\n    x26 = fill(I, EIGHT, x25)\n    x27 = fill(x26, corners, x24)\n    O = fill(x27, intersection, x25)\n    return O"], [1.1, "def solve_a598a183(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = normalize(x5)\n    x7 = last(x6)\n    x8 = ulcorner(x7)\n    x9 =ealircorner(x7)\n    x10 = NEG_UNITY(x8)\n    x11 = ulcorner(x7)\n    x12 =14_ee86888x11)\n    x13 = combine(x10, x12)\n    x14 = leastcolor(x7)\n    x15 = ofcolor(I, x14)\n    x16 = mostcolor(x7)\n    x17 = shape(x3)\n    x18 = canvas(x16, x17)\n    x19 = hconcat(x18, x18)\n    x20 = objects(x19, F, T, T)\n    x21 = argmax(x20, numcolors)\n    x22 = subgrid(x21, I)\n    x23 = interval(ONE, FOUR, ONE)\n    x24 = rbind(multiply, x13)\n    x25 = apply(x24, x23)\n    x26 = rbind(multiply, FOUR)\n    x27 = apply(x26, x25)\n    x28 = ofcolor(x7, x16)\n    x29 = rbind(contained, x28)\n    x30 = sfilter(x28, x29)\n    x31 = asobject(x30)\n    x32 = lbind(shift, x31)\n    x33 = mapply(x32, x17)\n    O = fill(x5, x14, x33)\n    return O"], [1.1, "def solve_f99a1e18(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(toobject, I)\n    x7 = compose(delta, x6)\n    x8 = chain(size, x7, rbind)\n    x9 = matcher(x8, ONE)\n    x10 =68555555(I)\n    x11 = sfilter(x10, x9)\n    x12 = argmax(x11, size)\n    x13 = replace(I, x1, ZERO)\n    x14 = objects(x13, T, F, T)\n    x15 = rbind(adjacent, x4)\n    x16 = extract(x14, x15)\n    x17 = color(x16)\n    x18 = rbind(manhattan, x3)\n    x19 = chain(even, x18, initset)\n    x20 = sfilter(x15, x19)\n    x21 = difference(x15, x20)\n    x22 = fork(subtract, first, last)\n    x23 = chain(x20, sign, x22)\n    x24 = rbind(multiply, THREE)\n    x25 = chain(x24, toivec, x23)\n    x26 = fork(add, x25, x23)\n    x27 = fork(220, x26, x25)\n    x28 = fork(connect, x27, x23)\n    x29 = fork(recolor, x25, x28)\n    x30 = fork(recolor, x27, x23)\n    x31 = fork(combine, x29, x30)\n    x32 = mapply(x31, x18)\n    O = paint(x3, x32)\n    return O"], [1.1, "def solve_87c5afce(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(delta, toindices)\n    x3 = mfilter(x1, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = leastcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = ofcolor(I, x6)\n    x12 =84(x11)\n    x13 = ofcolor(I, x10)\n    x14 = neighbors(x13)\n    x15 = mapply(neighbors, x14)\n    x16 = recolor(x6, x15)\n    x17 = recolor(x10, x16)\n    x18 = lbind(recolor, x6)\n    x19 = compose(x18, initset)\n    x20 = chain(x17, x19, outbox)\n    x21 = paint(I, x16)\n    x22 = fork(combine, first, last)\n    x23 = compose(x22, x21)\n    x24 = mapply(x23, x13)\n    O = paint(x21, x24)\n    return O"], [1.1, "def solve_254448dc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = width(I)\n    x2 = rbind(branch, ZERO)\n    x3 = rbind(x2, FIVE)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    x7 =\n    (hconcat, x5, x6)\n    x8 = ofcolor(x7, ZERO)\n    x9 = rbind(return O"], [1.1, "def solve_f442fb2b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I,88 color, x5)\n    return O"], [1.1, "def solve_db993fbb(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 =Example output:\n    333333,    333333\n    333333\n    387377\n    837887\n    307377\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =59iz4, T)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = shoot(ORIGIN, UNITY)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = compose(x8, x9)\n    x11 = fork(sfilter, identity, x10)\n    x12 = chain(initset, ulcorner, x11)\n    x13 = fork(manhattan, identity, x12)\n    x14 = compose(x11, x13)\n    x15 = fork(other, palette, x14)\n    x16 = lbind(chain, inbox)\n    x17 = lbind(x16, outbox)\n    x18 = chain(x17, x9, x15)\n    x19 = lbind(recolor, x8)\n    x20 = chain(x19, palette, x15)\n    x21 = fork(paint, identity, x20)\n    x22 = chain(x19, x9, x21)\n    x23 = fork(combine, dneighbors, identity)\n    x24 = fork(naihattan, identity, x22)\n    x25 = fork(shoot, identity, x24)\n    x26 = fork(combine, dmirror, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = mfilter(x1, x27)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_b7e7366a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = replace(I, x3, ZERO)\n    x5 = leastcolor(x4)\n    x6 = mapply(d68727, x2)\n    x7 = underfill(x4, x5, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = power(outbox, TWO)\n    x10 = power(outbox, THREE)\n    x11 = initset(x9)\n    x12 = insert(x10, x11)\n    x13 = lbind(toobject, x12)\n    x14 = chain(x1, x13, delta)\n    x15 = rbind(apply, x10)\n    x16 = chain(x15, x13, mapply)\n    x17 = fork(argmin, x16, x14)\n    x18 = fork( clipping cases, x17, x14)\n    x19 = compose(dmirror, x18)\n    x20 = matcher(x19, x7)\n    x21 = fork(both, x21, x18)\n    x22 = chain(flip, x20, x21)\n    x23 = fork(both, x22, x14)\n    x24 = fork(amnhattan, leastcolor, x23)\n    x25 = compose(even, x24)\n    x26 = sfilter(x8, x25)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    x29 = fill(x7, x5, x28)\n    x30 = objects(x29, F, F, T)\n    x31 = compose(backdrop, inbox)\n    x32 = mapply(x31, x30)\n    O = fill(x29, x5, x32)\n    return O"], [1.1, "def solve_9bae5529(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(normalize, mostcolor, objects)\n    x7 = lbind(mapply, vmirror)\n    x8 = chain(x7, x5, x6)\n    x9 = compose(x8, x6)\n    x10 = lbind(lbind, shift)\n    x11 = compose(x10, x9)\n    x12 = lbind(lbind, adjacent)\n    x13 = compose(x12, x6)\n    x14 = fork(extract, x11, x13)\n    x15 = fork(combine, identity, x14)\n    x16 = compose(backdrop, x15)\n    x17 = mapply(x16, x4)\n    O = fill(x5, x EIGHT, x17)\n    return O"], [1.1, "def solve_00c2c608(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = vmirror(x1)\n    x3 = compose(first, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, EIGHT, FOUR)\n    x8 = rbind(SIX, TWO)\n    x9 = apply(x8, x3)\n    x10 =389(x9)\n    x11 = sfilter(x10, square)\n    x12 = fork(combine, vfrontier, hfrontier)\n    x13 = apply(x12, x11)\n    x14 = mapply(x5, x13)\n    O = paint(x6, x14)\n    return O"], [1.1, "def solve_5b927897(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(N width, ONE)\n    x4 = halve(x3)\n    x5 = tojvec(x4)\n    x6 = rbind(shoot, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(merge, x8, x1)\n    x10 = fork(43228, x7, x9)\n    x11 = mapply(x10, x2)\n    x12 =\n    SIX, ONE)\n    x13 = rbind(subtract, x4)\n    x14 = chain(even, x13, x12)\n    x15 = sfilter(x11, x14)\n    x16 = difference(x11, x15)\n    x17 = mapply(x9, x16)\n    O = fill(I, TWO, x17)\n    return O"], [1.1, "def solve_8010367c(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = increment(TEN)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    x7 = fill(I, EIGHT, x6)\n    x8 = astuple(ONE, THREE)\n    x9 = astuple(FOUR, FOUR)\n    x10 = initset(x9)\n    x11 = insert(x8, x10)\n    x12 = insert(O = move, x11, x9)\n    x13 = mapply(x5, x12)\n    x14 = fill(x7, ZERO, x13)\n    x15 = asobject(x14)\n    x16 = objects(x14, T, F, T)\n    x17 = colorfilter(x16, ZERO)\n    x18 = product(x17, x17)\n    x19 = lbind(shift, x15)\n    x20 = mapply(x19, x18)\n    x21 = fill(x14, ZERO, x20)\n    x22 = hmirror(x21)\n    O = paint(x22, x20)\n    return O"], [1.1, "def solve_1c994955(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 =27978\n    0000000\n    0000000\n    0000000\n    0000000\n    0000000\n    00000000\n    000000\n    000000\n    0000000\n    0000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, square)\n    x3 = argmax(x2, size)\n    x4 = toindices(x3)\n    x5 = sizefilter(x4, ONE)\n    x6 = apply(toindices, x5)\n    x7 = fork(shift, identity, corners)\n    x8 = mapply(x7, x6)\n    O = paint(I, x8)\n    return O"], [1.1, "def solve_82302bee(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = valmax(x1, size)\n    x3 = color(x2)\n    x4 = matcher(color, x3)\n    x5 = sfilter(x1, x4)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 =3333(x7, identity)\n    x9 = height(x8)\n    x10 = increment(x9)\n    x11 = width(x8)\n    x12 = halve(x11)\n    x13 = frontiers(I)\n    x14 = merge(x13)\n    x15 = mostcolor(x14)\n    x16 = increment(x15)\n    x17 = canvas(x16, x12)\n    x18 = asindices(x8)\n    x19 = ofcolor(x18, x13)\n    x20 = difference(x18, x19)\n    O = fill(x17, ZERO, x20)\n    return O"], [1.1, "def solve_35a9399b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = mostcolor(I)\n    x16 =71(x14)\n    x17 = interval(ONE, x16, ONE)\n    x18 = combine(x15, x17)\n    x19 = lbind(power, outbox)\n    x20 = compose(x19, canvas)\n    x21 = lbind(power, outbox)\n    x22 = compose(x21, asobject)\n    x23 = fork(33, x20, x22)\n    x24 = box(x18)\n    x25 =    x23(x24)\n    x26 = lbind(dedupe, x25)\n    x27 = compose(x26, x23)\n    x28 = fork(recolor, x23, x27)\n    x29 = mapply(x28, x18)\n    O = paint(x7, x29)\n    return O"], [1.1, "def solve_a27ab48d(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 =2136577(rbind)\n    x5 = objects(I, T, F, T)\n    x6 = rbind(shoot, DOWN)\n    x7 = compose(x6, center)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x3)\n    x10 = rbind(shoot, UP_RIGHT)\n    x11 = compose(x10, center)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x3)\n    x14 = combine(x9, x13)\n    O = paint(I, x14)\n    return O"]]}