{"d56f2372": [[0.29037478188052895, "def solve_9ed2bf76(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_9283c07d(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29037478188052895, "def solve_782cf2c4(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(size, delta)\n    x4 = argmax(x2, x3)\n    O = subgrid(x4, I)\n    return O"], [0.29706172839506173, "def solve_a6c6443d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.29706172839506173, "def solve_31841715(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.41617597321745253, "def solve_461020f3(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = vmirror(x3)\n    return O"], [0.41617597321745253, "def solve_44c5e945(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41699831998382725, "def solve_7c251ea8(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(colorcount, TWO)\n    x3 = argmax(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.4245388866968078, "def solve_9571f8f9(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_3ca5ca4a(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4245388866968078, "def solve_c43fbbaa(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.45420349399449317, "def solve_451d8531(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = extract(x1, x5)\n    O = subgrid(x6, I)\n    return O"], [0.4616982777255581, "def solve_51a1b0d1(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = width(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.4647004005119946, "def solve_4bbcf2b1(I):\n    x1 = objects(I, F, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [0.48123445415925586, "def solve_91c811b7(I):\n    x1 = objects(I, F, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = dedupe(x3)\n    x5 = rot90(x4)\n    x6 = dedupe(x5)\n    O = rot270(x6)\n    return O"], [0.48602549247238863, "def solve_96400944(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = height(x7)\n    x9 = divide(x8, THREE)\n    O = downscale(x7, x9)\n    return O"], [0.6195255835046275, "def solve_407c7ed7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.6572952903476961, "def solve_e37483d5(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O"], [0.7067586932431068, "def solve_9532d315(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = compose(backdrop, inbox)\n    x5 = mapply(x4, x3)\n    x6 = merge(x1)\n    x7 = cover(I, x6)\n    O = fill(x7, EIGHT, x5)\n    return O"], [0.7209610573661548, "def solve_2d91a4cd(I):\n    x1 = rot90(I)\n    x2 = apply(mostcommon, I)\n    x3 = apply(mostcommon, x1)\n    x4 = repeat(x2, ONE)\n    x5 = repeat(x3, ONE)\n    x6 = compose(size, dedupe)\n    x7 = x6(x2)\n    x8 = x6(x3)\n    x9 = greater(x8, x7)\n    x10 = branch(x9, height, width)\n    x11 = x10(I)\n    x12 = rot90(x4)\n    x13 = branch(x9, x5, x12)\n    x14 = branch(x9, vupscale, hupscale)\n    O = x14(x13, x11)\n    return O"], [0.7400226558178445, "def solve_e1fc66c6(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400226558178445, "def solve_c124bd99(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.7400474142010353, "def solve_94283ccb(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, lrcorner)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = fork(recolor, x4, x6)\n    x8 = compose(x3, ulcorner)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = fork(recolor, x8, x9)\n    x11 = compose(x3, llcorner)\n    x12 = astuple(NEG_TWO, TWO)\n    x13 = rbind(shift, x12)\n    x14 = fork(recolor, x11, x13)\n    x15 = compose(x3, urcorner)\n    x16 = astuple(TWO, NEG_TWO)\n    x17 = rbind(shift, x16)\n    x18 = fork(recolor, x15, x17)\n    x19 = fork(combine, x7, x10)\n    x20 = fork(combine, x14, x18)\n    x21 = fork(combine, x19, x20)\n    x22 = mapply(x21, x2)\n    O = paint(I, x22)\n    return O"], [0.7413643800290229, "def solve_cca76f60(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, ONE, x2)\n    return O"], [0.7414654147115858, "def solve_03e4106b(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = normalize(x2)\n    x4 = shape(x2)\n    x5 = halve(x4)\n    x6 = invert(x5)\n    x7 = shift(x3, x6)\n    x8 = sizefilter(x1, ONE)\n    x9 = apply(center, x8)\n    x10 = lbind(shift, x7)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [0.7414654147115858, "def solve_cbc65043(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sizefilter, x1)\n    x3 = compose(merge, x2)\n    x4 = x3(TWO)\n    x5 = x3(THREE)\n    x6 = x3(FOUR)\n    x7 = fill(I, THREE, x4)\n    x8 = fill(x7, TWO, x5)\n    O = fill(x8, ONE, x6)\n    return O"], [0.7431714033758151, "def solve_a77f75a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = merge(x1)\n    x4 = lbind(colorfilter, x1)\n    x5 = rbind(argmax, rightmost)\n    x6 = compose(x5, x4)\n    x7 = mapply(x6, x2)\n    x8 = difference(x3, x7)\n    O = move(I, x8, RIGHT)\n    return O"], [0.7452006096033813, "def solve_a0062f01(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.7454216969955122, "def solve_494c251c(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7480057468975833, "def solve_c71c9a13(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.748403510005539, "def solve_31e7b5ef(I):\n    x1 = width(I)\n    x2 = rbind(branch, ZERO)\n    x3 = rbind(x2, FIVE)\n    x4 = compose(size, dedupe)\n    x5 = matcher(x4, ONE)\n    x6 = compose(x3, x5)\n    x7 = rbind(repeat, x1)\n    x8 = compose(x7, x6)\n    O = apply(x8, I)\n    return O"], [0.7493353556381898, "def solve_1f556ad0(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(corners, x1)\n    O = underfill(I, EIGHT, x2)\n    return O"], [0.7498948998515579, "def solve_5b1b1808(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.7513934538579946, "def solve_2d6aefa6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(toindices, x1)\n    x3 = box(x2)\n    O = fill(I, EIGHT, x3)\n    return O"], [0.7522366246475464, "def solve_08f2cd9d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, DOWN)\n    x5 = mapply(x4, x3)\n    x6 = underfill(I, ONE, x5)\n    x7 = lbind(power, outbox)\n    x8 = chain(x7, halve, width)\n    x9 = initset(x8)\n    x10 = lbind(rapply, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = compose(backdrop, x12)\n    x14 = fork(difference, x13, toindices)\n    x15 = mapply(x14, x1)\n    x16 = mostcolor(I)\n    x17 = ofcolor(I, x16)\n    x18 = intersection(x15, x17)\n    O = fill(x6, THREE, x18)\n    return O"], [0.7771381822376172, "def solve_6b074b69(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_04f839c9(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(x1)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, leftmost)\n    x8 = apply(color, x7)\n    x9 = repeat(x8, ONE)\n    O = x4(x9)\n    return O"], [1.0, "def solve_edb14f4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_27c05d83(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = objects(I, T, F, T)\n    x8 = combine(x6, x7)\n    x9 = mpapply(recolor, x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_3a0ce148(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(size, x1)\n    x3 = astuple(ONE, TWO)\n    x4 = canvas(ZERO, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, TWO)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_0975d92e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = toindices(x3)\n    x5 = normalize(x4)\n    x6 = lbind(argmin, x5)\n    x7 = lbind(rbind, manhattan)\n    x8 = chain(x7, initset, x6)\n    x9 = chain(x7,initset, x4)\n    x10 = fork(apply, x8, x9)\n    x11 = fork(gravitate, initset, x4)\n    x12 = fork(add, identity, x11)\n    x13 = fork(connect, identity, x12)\n    x14 = fork(recolor, color, x13)\n    x15 = mapply(x14, x5)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_678f4a32(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = compose(toindices, normalize)\n    x4 = lbind(matcher, x3)\n    x5 = compose(x4, normalize)\n    x6 = lbind(rbind, astuple)\n    x7 = rbind(compose, x5)\n    x8 = lbind(rbind, apply)\n    x9 = chain(x6, x7, x8)\n    x10 = lbind(sfilter, x2)\n    x11 = chain(size, x10, x9)\n    x12 =maximum(x2)\n    x13 = matcher(x11, x12)\n    x14 = sfilter(x2, x13)\n    x15 = objects(I, T, F, T)\n    x16 = totuple(x15)\n    x17 = apply(color, x16)\n    x18 = mostcommon(x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x16, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x17, x20)\n    x25 = apply(x23, x24)\n    x26 = combine(x21, x25)\n    x27 = outbox(x26)\n    x28 = backdrop(x27)\n    x29 = fill(I, ONE, x28)\n    x30 = increment(x12)\n    x31 = invert(x30)\n    x32 = shift(x29, x31)\n    O = fill(x29, x20, x32)\n    return O"], [1.0, "def solve_4b971308(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    x4 = leastcolor(x3)\n    x5 = replace(x3, x4, ZERO)\n    x6 = leastcolor(x5)\n    x7 = palette(x2)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(x5, x6, x1)\n    x11 = ofcolor(x10, x6)\n    x12 = lbind(adjacent, x11)\n    x13 = mfilter(x12, initset)\n    O = fill(x10, x13, x1)\n    return O"], [1.0, "def solve_0ffb2e78(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(canvas, x2)\n    x4 = last(x2)\n    x5 = remove(x4, x2)\n    x6 = repeat(x4, ONE)\n    x7 = combine(x6, x5)\n    x8 = merge(x3)\n    x9 = lbind(colorfilter, x9)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, TWO)\n    x12 = mfilter(x3, x11)\n    O = fill(I, THREE, x12)\n    return O"], [1.0, "def solve_c55c77a8(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_62b60d12(I):\n    x1 = objects(I, T, T, T)\n    x2 = vmirror(x1)\n    x3 = subgrid(x2, I)\n    O = hmirror(x3)\n    return O"], [1.0, "def solve_282828d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, both)\n    x14 = compose(x13, vmirror)\n    x15 = fork(sfilter, x12, x14)\n    x16 = fork(combine, delta, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_088d5d22(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = lbind(index, I)\n    x4 = compose(x3, NEG_UNITY)\n    x5 = astuple(NEG_TWO, NEG_TWO)\n    x6 = rbind(shift, x5)\n    x7 = compose(x6, x4)\n    x8 = fork(recolor, x7, x4)\n    x9 = mapply(x8, x2)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_31734e41(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(product, x2, identity)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = lbind(greater, THREE)\n    x7 = compose(x6, size)\n    x8 = sfilter(x1, x7)\n    x9 = fork(vmatching, identity, hmirror)\n    x10 = mfilter(x8, x9)\n    x11 = combine(x9, x10)\n    x12 = fill(I, x5, x11)\n    x13 = compose(decrement, height)\n    x14 = width(x41)\n    x15 = decrement(x14)\n    x16 = apply(x13, x15)\n    x17 = rbind( toobject, x12)\n    x18 = compose(x17, center)\n    x19 = apply(x18, x16)\n    O = paint(x12, x19)\n    return O"], [1.0, "def solve_c35b612b(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(color, x11)\n    x20 = fork(recolor, x19, identity)\n    x21 = mapply(x20, x18)\n    x22 = paint(x5, x21)\n    x23 = first(x9)\n    x24 = height(x23)\n    x25 = height(x5)\n    x26 = increment(x24)\n    x27 = interval(ZERO, x25, x26)\n    x28 = interval(ZERO, x25, ONE)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = lbind(apply, first)\n    x32 = rbind(sfilter, x30)\n    x33 = rbind(pair, x28)\n    x34 = chain(x31, x32, x33)\n    x35 = compose(dmirror, x34)\n    x36 = power(x35, TWO)\n    x37 = x36(x22)\n    O = downscale(x37, x24)\n    return O"], [1.0, "def solve_64b7e446(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, T, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = extract(x9, size)\n    x11 = trim(x10)\n    x12 = toindices(x11)\n    x13 = compose( outbox, initset)\n    x14 = corners(x12)\n    x15 = apply(x13, x14)\n    x16 = difference(x12, x15)\n    x17 = fill(I, ZERO, x15)\n    x18 = initset(x15)\n    x19 = position(x18, x18)\n    x20 = add(x19, UNITY)\n    x21 = shift(x20, UNITY)\n    x22 = fill(x17, ZERO, x21)\n    x23 = ulcorner(x15)\n    x24 = lrcorner(x15)\n    x25 = shoot(x23, UP_RIGHT)\n    x26 = shoot(x24, NEG_UNITY)\n    x27 = fill(x22, ZERO, x26)\n    O = fill(x27,33333, x25)\n    return O"], [1.0, "def solve_8df48462(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(toobject, I)\n    x4 = chain(leastcolor, x3, delta)\n    x5 = rbind(shift, UP)\n    x6 = compose(x5, backdrop)\n    x7 = fork(recolor, x4, x6)\n    x8 = mapply(x7, x2)\n    O = underpaint(I, x8)\n    return O"], [1.0, "def solve_9ba52717(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = canvas(x4, TWO_BY_TWO)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = matcher(identity, x4)\n    x9 = argmin(x7, x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = lbind(shift, x6)\n    x13 = occurrences(I, x4)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.0, "def solve_884aa8f7(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = argmin(x1, size)\n    x4 = subgrid(x2, I)\n    x5 = subgrid(x3, I)\n    x6 = width(x4)\n    x7 = width(x5)\n    x8 = divide(x6, x7)\n    x9 = downscale(x4, x8)\n    x10 = ofcolor(x9, ZERO)\n    O = fill(x5, ZERO, x10)\n    return O"], [1.0, "def solve_94e2eb1f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = upscale(x3, THREE)\n    x5 = hconcat(x3, x3)\n    x6 = hconcat(x5, x3)\n    x7 = vconcat(x6, x6)\n    x8 = vconcat(x7, x6)\n    O = cellwise(x4, x8, ZERO)\n    return O"], [1.0, "def solve_a8c3f802(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.1, "def solve_641e4c55(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = merge(x1)\n    x4 = toindices(x3)\n    x5 = normalize(x3)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(TWO, NEG_ONE, NEG_ONE)\n    x9 = apply(tojvec, x8)\n    x10 = rbind(apply, x9)\n    x11 = lbind(compose, size)\n    x12 = lbind(lbind, intersection)\n    x13 = compose(x11, x12)\n    x14 = lbind(chain, x10)\n    x15 = rbind(x14, x4)\n    x16 = lbind(rbind, add)\n    x17 = chain(x15, x16, x7)\n    x18 = fork(compose, x17, x13)\n    x19 = lbind(sfilter, x4)\n    x20 = compose(x19, x18)\n    x21 = fork(sfilter, x20, x17)\n    x22 = fork(compose, x21, x13)\n    x23 = lbind(apply, uppermost)\n    x24 = chain(x23, x22, x15)\n    x25 = fork(sfilter, x24, x17)\n    x26 = fork(compose, x17, x23)\n    x27 = fork(a65, x26, x25)\n    x28 = astuple(x2, x6)\n    x29 = x28(x2)\n    x30 = color(x3)\n    x31 = shift(x9, x30)\n    x32 = rbind(difference, x31)\n    x33 = compose(x32, x31)\n    x34 = fork(equality, x33, identity)\n    x35 = apply(x34, x31)\n    x36 = sfilter(x34, x35)\n    x37 = difference(x34, x36)\n"], [1.1, "def solve_f8c92cf8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = maximum(x26)\n    x28 = ulcorner(x8)\n    x29 = lrcorner(x8)\n    x30 = astuple(x27, x19)\n    x31 = double(EIGHT)\n    x32 = interval(ONE, x31, ONE)\n    x33 = lbind(subtract, x27)\n    x34 = rbind(multiply, x30)\n    x35 = compose(x33, x34)\n    x36 = lbind(add, x28)\n    x37 = rbind(multiply, x30)\n    x38 = chain(initset, x36, x37)\n    x39 = fork(insert, x35, x38)\n    x40 = compose(box, x39)\n    x41 = mapply"], [1.1, "def solve_a9f7bbc4(I):\n    \"\"\"\n    Example input:\n    0000000000000000\n    0000000000000000\n    0008080000000000\n    0000800000202000\n    0008880002222200\n    0088088000020000\n    0000000000220000\n    0000000000000000\n    0000000000000000\n    0000000000000100\n    0000000000001111\n    0000770770000110\n    0000070700000000\n    0000077770000000\n    0000777770000000\n    0000000000000000\n    0000000000000000\n    0000000006000000\n    0000000660660000\n    0000000660600000\n    0000000006000000\n    Example output:\n    08080\n    00800\n    08880\n    88088\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = power(color, TWO)\n    x4 = objects(I, T, F, T)\n    x5 = astuple(TWO, ONE)\n    x6 = palette(x2)\n    x7 = lbind(colorfilter, x4)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, TWO)\n    x10 = matcher(first, palette)\n    x11 = rbind(objects, T)\n    x12 = rbind(x11, F)\n    x13 = rbind(x12, F)\n    x14 = lbind(rbind, colorcount)\n    x15 = chain(x14, x13, x9)\n    x16 = rbind(apply, x2)\n    x17 = lbind(lbind, colorcount)\n    x18 = chain(x16, x17, x9)\n    x19 = rbind(remove, x2)\n    x20 = compose(x19, last)\n    x21 = fork(argmin, x20, x18)\n    x22 = compose(x16, x21)\n    x23 = fork(argmin, x22, x18)\n    x24 = compose(x13, x23)\n    x25 = fork(astuple, x24, x15)\n    x26 = fork(astuple, x23, x15)\n    x27 = fork(insert, x25, x76)\n    x28 = fork(insert, x26, x27)\n    x29 = rbind(subgrid, I)\n    x30 = compose(x29, x28)\n    x31 = apply(x30, x5)\n    x32 = matcher(first, TWO)\n    x33 = rbind(sfilter, x32)\n    x34 = compose(x33, x28)\n    x35 = rbind(compose, x34)\n    x36 = lbind(rbind, contained)\n    x37 = compose(x35, x36)\n    x38 = lbind(remove, x33)\n    x39 ="], [1.1, "def solve_fe372432(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = lbind(index, I)\n    x3 = compose(x2, frontiers)\n    x4 = matcher(x3, ZERO)\n    x5 = sfilter(x1, x4)\n    x6 = difference(x1, x5)\n    x7 =782(size, x6)\n    x8 = argmin(x7, size)\n    x9 = color(x8)\n    x10 = fill(I, x9, x7)\n    x11 = object(x10, T, F, T)\n    x12 = portrait(x11)\n    x13 = branch(x12, positive, branch)\n    x14 = branch(x12, dmirror, identity)\n    x15 = x14(x10)\n    x16 = pick(x15, x8)\n    x17 = x13(x16)\n    x18 = first(x16)\n    x19 = mostcolor(x18)\n    x20 = matcher(first, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x16, x21)\n    x23 = leftmost(x22)\n    x24 = width(x8)\n    x25 = lbind(repeat, x24)\n    x26 = compose(x25, x21)\n    x27 = rbind(compose, x26)\n    x28 = lbind(rbind, contained)\n    x29 = chain(size, x27, x28)\n    x30 = matcher(x29, x11)\n    x31 = fork(sfilter, identity, x30)\n    x32 = chain(merge, x27, x31)\n    x33 = fork(remove, last, identity)\n    x34 = fork(astuple, x33, x32)\n    x35 = size(x8)\n    x36 = power(x34, x35)\n    x37 = astuple(x23, x26)\n    x38 = x14(x37)\n    x39 = first(x38)\n    x40 = multiply(x19,"], [1.1, "def solve_e0c5dae8(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 =Example output:\n    666666\n    766999\n    656999\n    996611\n    996911\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, ZERO, x3)\n    return O"], [1.1, "def solve_c239dda8(I):\n    \"\"\"\n    Example input:\n    00000000000000000\n    00000000000000000\n    00020000000000000\n    00222000000000000\n    02202200000000000\n    00200000000000000\n    00000000000000000\n    00000000033030000\n    00000000033033000\n    00000000303330300\n    40040000003030000\n    44440000000000000\n    04400000000000000\n    44440000000000000\n    04400000000000000\n    04000000100000000\n    00000001110000000\n    00000011011000000\n    00000110001100000\n    00000011011000000\n    00000000100000000\n    00000000000000000\n    Example output:\n    0001000\n    0011100\n    0110110\n    1100011\n    0110110\n    0001000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = height(x3)\n    x5 = width(x3)\n    x6 =18888(x4, x5)\n    x7 = interval(ZERO, x5, ONE)\n    x8 = interval(ZERO, x5, FOUR)\n    x9 = pair(x7, x8)\n    x10 = mpapply(recolor, x9, x3)\n    O = paint(x3, x10)\n    return O"], [1.1, "def solve_978b049b(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = fork(subtract, first, last)\n    x4 = argmax(x2, x3)\n    x5 = color(x4)\n    x6 = subgrid(x4, I)\n    x7 = lbind(insert, DOWN)\n    x8 = compose(lrcorner, asindices)\n    x9 = chain(x7, initset, x8)\n    x10 = fork(subtract, initset, x9)\n    x11 = fork(insert, x10, identity)\n    x12 = compose(90, x11)\n    x13 = fork(toindices, x12,44f)\n    x14 = compose(x12, x13)\n    x15 = fork(subtract, x14, last)\n    x16 = fork(center, first, x15)\n    x17 = fork(contained, x16, last)\n    x18 = rbind(contained, x11)\n    x19 = compose(x18, first)\n    x20 = rbind(sfilter, x19)\n    x21 = compose(x20, last)\n    x22 = fork(toindices, x21, x17)\n    x23 = fork(4447, x22, x20)\n    x24 = fork(recolor, x21, x23)\n    x25 = mapply(x24, x4)\n    O = paint(x6, x25)\n    return O"], [1.1, "def solve_ea191fd4(I):\n    \"\"\"\n    Example input:\n    0000000000000000000\n    0000000000000000000\n    0066066000003000000\n    0006660000033333000\n    0006060000330303300\n    0000000000000300000\n    0000000000000000000\n    0000000000000000000\n    0000000000000000000\n    0000010100000000000\n    0000101010000000000\n    0000111100000000000\n    0000000000000000000\n    0000000000000770000\n    0000000000007077000\n    0000000000000000000\n    0000044400000000000\n    0000040400000000000\n    0000440440000000000\n    0000400040000000000\n    0000040000000000000\n    Example output:\n    66066\n    06660\n    06060\n    \"\"\"\n    x1 =Example output:\n    66066\n    06660\n    06060\n    00066\n    00060\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"]], "1e97544e": [[0.03276475738208417, "def solve_9ed0fc17(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, square)\n    x4 = difference(x2, x3)\n    x5 = merge(x3)\n    x6 = recolor(THREE, x5)\n    x7 = merge(x4)\n    x8 = recolor(FOUR, x7)\n    x9 = paint(I, x6)\n    O = paint(x9, x8)\n    return O"], [0.06555616266185658, "def solve_76329917(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_3ce530b6(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(greater, TWO)\n    x3 = chain(x2, minimum, shape)\n    x4 = fork(equality, toindices, box)\n    x5 = fork(both, x3, x4)\n    x6 = mfilter(x1, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_27eabc20(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = shape(x2)\n    x6 = halve(x5)\n    x7 = invert(x6)\n    x8 = shift(x4, x7)\n    x9 = sizefilter(x3, x8)\n    x10 = apply(center, x9)\n    x11 = lbind(shift, x8)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [0.06959741552663885, "def solve_99ed24da(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.07641808482315048, "def solve_90e16c73(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.08598473307451636, "def solve_d1875aa6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.09043595976481883, "def solve_6adfc03e(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = rbind(bordering, I)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, TWO, x9)\n    O = replace(x10, x5, THREE)\n    return O"], [0.09972248586286768, "def solve_c4103564(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = apply(x13, x12)\n    x15 = rbind(multiply, x6)\n    x16 = apply(x15, x12)\n    x17 = pair(x14, x16)\n    x18 = rbind(add, x7)\n    x19 = apply(invert, x17)\n    x20 = apply(x18, x19)\n    x21 = rbind(add, x8)\n    x22 = apply(x21, x17)\n    x23 = pair(x20, x22)\n    x24 = mapply(box, x23)\n    O = fill(I, x1, x24)\n    return O"], [0.10434388482560263, "def solve_275a3cdc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.1098717330267121, "def solve_231b76ab(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.15924388832696912, "def solve_5d7737dd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.18967220198830603, "def solve_1116cd4a(I):\n    x1 = palette(I)\n    x2 = mostcolor(I)\n    x3 = remove(x2, x1)\n    x4 = lbind(ofcolor, I)\n    x5 = lbind(prapply, connect)\n    x6 = fork(x5, x4, x4)\n    x7 = compose(merge, x6)\n    x8 = fork(recolor, identity, x7)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [0.218169885242275, "def solve_1f2cc309(I):\n    x1 = objects(I, T, F, F)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = apply(x4, x3)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    x9 = shift(x8, UP_RIGHT)\n    x10 = shift(x8, DOWN_LEFT)\n    x11 = paint(I, x8)\n    x12 = paint(x11, x9)\n    O = paint(x12, x10)\n    return O"], [0.2220602148198353, "def solve_f78a0afa(I):\n    x1 = compress(I)\n    x2 = leastcolor(x1)\n    x3 = mostcolor(x1)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = sfilter(x4, vline)\n    x9 = size(x8)\n    x10 = increment(x9)\n    x11 = height(I)\n    x12 = decrement(x7)\n    x13 = subtract(x11, x12)\n    x14 = divide(x13, x7)\n    x15 = width(I)\n    x16 = decrement(x10)\n    x17 = subtract(x15, x16)\n    x18 = divide(x17, x10)\n    x19 = astuple(x14, x18)\n    x20 = canvas(ZERO, x19)\n    x21 = asindices(x20)\n    x22 = astuple(x7, x10)\n    x23 = canvas(ZERO, x22)\n    x24 = asindices(x23)\n    x25 = astuple(x14, x18)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = rbind(toobject, I)\n    x30 = lbind(shift, x21)\n    x31 = compose(x29, x30)\n    x32 = apply(x31, x28)\n    x33 = rbind(colorcount, x2)\n    x34 = valmax(x32, x33)\n    x35 = rbind(colorcount, x2)\n    x36 = matcher(x35, x34)\n    x37 = mfilter(x32, x36)\n    x38 = replace(I, x2, x3)\n    O = fill(x38, x2, x37)\n    return O"], [0.2737085951518015, "def solve_80718998(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.2949368095103424, "def solve_abb5f122(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, hline)\n    x3 = chain(x1, x2, frontiers)\n    x4 = chain(size, dedupe, first)\n    x5 = chain(size, dedupe, last)\n    x6 = fork(greater, x4, x5)\n    x7 = fork(both, x3, x6)\n    x8 = astuple(identity, rot90)\n    x9 = astuple(rot180, rot270)\n    x10 = combine(x8, x9)\n    x11 = astuple(identity, rot270)\n    x12 = astuple(rot180, rot90)\n    x13 = combine(x11, x12)\n    x14 = pair(x10, x13)\n    x15 = rbind(rapply, I)\n    x16 = compose(initset, first)\n    x17 = chain(first, x15, x16)\n    x18 = compose(x7, x17)\n    x19 = extract(x14, x18)\n    x20 = first(x19)\n    x21 = last(x19)\n    x22 = x20(I)\n    x23 = first(x22)\n    x24 = repeat(x23, ONE)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    x35 = shift(x34, TWO_BY_ZERO)\n    x36 = paint(x22, x35)\n    O = x21(x36)\n    return O"], [0.29493888612223423, "def solve_dacee0b5(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.3082441023536176, "def solve_be19cfd7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_25774a36(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.31011174594270147, "def solve_4c29c571(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.35285797856791773, "def solve_5692875b(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35754184445555537, "def solve_1ff2fd47(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = mostcolor(I)\n    x4 = remove(x3, x2)\n    x5 = lbind(other, x4)\n    x6 = compose(x5, color)\n    x7 = fork(recolor, x6, outbox)\n    x8 = mapply(x7, x1)\n    x9 = mapply(toindices, x1)\n    x10 = box(x9)\n    x11 = difference(x10, x9)\n    x12 = lbind(argmin, x9)\n    x13 = rbind(compose, initset)\n    x14 = lbind(rbind, manhattan)\n    x15 = chain(x13, x14, initset)\n    x16 = chain(initset, x12, x15)\n    x17 = fork(manhattan, initset, x16)\n    x18 = compose(even, x17)\n    x19 = sfilter(x11, x18)\n    x20 = paint(I, x8)\n    O = fill(x20, FIVE, x19)\n    return O"], [0.49558828173922514, "def solve_d9cbf4bd(I):\n    x1 = objects(I, T, F, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.6185357460219338, "def solve_21745528(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_449a9ab2(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.7750262018683071, "def solve_cbf49bdc(I):\n    x1 = ofcolor(I, TWO)\n    x2 = dmirror(I)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [1.0, "def solve_522cd067(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = center(x3)\n    x5 = toobject(x4, I)\n    x6 = initset(x2)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [1.0, "def solve_85527242(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_181ffd71(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_384abd44(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = chain(flip, positive, size)\n    x7 = corners(x5)\n    x8 = argmax(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = POLrcorner(x8)\n    x11 = initset(x10)\n    x12 = insert(x6, x11)\n    x13 = backdrop(x12)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, ZERO)\n    x17 = rbind( masterpartition, x14)\n    x18 = chain(x17, initset, width)\n    x19 = fork(add, height, x18)\n    x20 = fork(insert, x19, ulcorner)\n    x21 = compose(x20, toindices)\n    x22 = fork(box, x21, urcorner)\n    x23 = fork(difference, x22, outbox)\n    x24 = mapply(x23, x16)\n    O = fill(x14, ZERO, x24)\n    return O"], [1.0, "def solve_a518ec3d(I):\n    x1 = asindices(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, ORIGIN)\n    x6 = chain(flip, x5, mostcolor)\n    x7 = fork(both, x4, x6)\n    x8 = sfilter(x1, x7)\n    x9 = totuple(x8)\n    x10 = rbind(add, TWO_BY_TWO)\n    x11 = chain(maximum, x10, shape)\n    x12 = matcher(x11, TWO_BY_TWO)\n    x13 = fork(both, x4, x12)\n    x14 = leastcolor(I)\n    x15 = ofcolor(I, x14)\n    x16 = mapply(vfrontier, x15)\n    x17 = mapply(hfrontier, x15)\n    x18 = combine(x16, x17)\n    x19 = fill(I, x14, x18)\n    x20 = difference(x19, x8)\n    O = fill(x17, TWO, x20)\n    return O"], [1.0, "def solve_66bcc545(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_05d5556b(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = sfilter(x7, x6)\n    x9 = lbind( colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = mostcolor(x10)\n    x12 = remove(x11, x8)\n    x13 = compose(hmirror, vmirror)\n    x14 = chain(x13, papply, x11)\n    x15 = fork(subtract, last, x14)\n    x16 = x15(x10)\n    x17 = x11(x16)\n    x18 = ulcorner(x11)\n    x19 = lbind(shift, x17)\n    x20 = occurrences(I, x12)\n    x21 = mapply(x19, x20)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_9268ef28(I):\n    x1 =Rmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = hmirror(x9)\n    return O"], [1.0, "def solve_82922c68(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_14a3af7c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_4b4067ff(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = other(x4, TWO)\n    x6 = color(x5)\n    x7 = subgrid(x5, I)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = mapply(x9, x4)\n    x11 =rcorner(x5)\n    x12 = lbind(subtract, x11)\n    x13 = chain(first, totuple, x12)\n    x14 = shift(x10, x13)\n    x15 = ofcolor(x7, x6)\n    x16 = difference(x14, x15)\n    x17 = mapply(x13, x16)\n    O = underfill(x7, x6, x17)\n    return O"], [1.0, "def solve_5f2208c6(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, vsplit, hsplit)\n    x12 = x11(I, TWO)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = palette(x13)\n    x16 = intersection(x15, x12)\n    x17 = palette(x14)\n    x18 = intersection(x17, x12)\n    x19 = first(x18)\n    x20 = shape(x13)\n    x21 = canvas(x19, x20)\n    x22 = ofcolor(x13, x19)\n    x23 = intersection(x22, x12)\n    O = fill(x21, FIVE, x23)\n    return O"], [1.0, "def solve_3f2024aa(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f4d28e1b(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ONE)\n    x6 = palette(I)\n    x7 = sfilter(x6, x5)\n    x8 = argmax(x7, size)\n    x9 = canvas(x8, x1)\n    O = trim(x9)\n    return O"], [1.0, "def solve_5e73ad0f(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_9cda1e29(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = lbind(contained, ZERO)\n    x4 = compose(flip, x3)\n    x5 = extract(x1, x4)\n    x6 = toobject(x5, I)\n    x7 = rbind(multiply, THREE)\n    x8 = compose(x7, size)\n    x9 = totuple(x6)\n    x10 = sfilter(x9, x8)\n    x11 = delta(x5)\n    x12 = center(x11)\n    x13 = subgrid(x5, I)\n    x14 = hmirror(x13)\n    x15 = ulcorner(x6)\n    x16 = add(x15, x12)\n    x17 = shift(x14, x16)\n    x18 = add(x14, x12)\n    x19 = shift(x17, x18)\n    x20 = shift(x19, x17)\n    x21 = paint(I, x17)\n    x22 = paint(x21, x16)\n    x23 = paint(x22, x19)\n    O = paint(x23, x20)\n    return O"], [1.0, "def solve_d1ad1f2f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = argmax(x4, x5)\n    x7 = color(x6)\n    x8 = leastcolor(I)\n    x9 = ofcolor(I, x8)\n    x10 = inbox(x6)\n    x11 = backdrop(x10)\n    x12 = fill(I, x7, x11)\n    x13 = mapply(dneighbors, x1)\n    x14 = ulcorner(x6)\n    x15 = shift(x13, x14)\n    x16 = mapply(hfrontier, x15)\n    x17 = mapply(vfrontier, x15)\n    x18 = combine(x16, x17)\n    O = underfill(x12, x8, x18)\n    return O"], [1.1, "def solve_08039959(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = double(TEN)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = connect(ORIGIN, ZERO)\n    x5 = toindices(x4)\n    x6 = lbind(shift, x5)\n    x7 = compose(x6, ulcorner)\n    x8 = interval(ZERO, NINE, ONE)\n    x9 = apply(x7, x8)\n    x10 = lbind(intersection, x5)\n    x11 = lbind(shift, x10)\n    x12 = compose(x11, toindices)\n    x13 = chain(size, x10, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = fork(add, first, last)\n    x16 = argmax(x9, x15)\n    x17 = x17(x16)\n    x18 = fork(subtract, first, last)\n    x19 = fork(multiply, x18, x17)\n    x20 = fork(add, x18, x19)\n    x21 = interval(ZERO, x1, ONE)\n    x22 = rbind(intersection, x21)\n    x23 = chain(x22, x17, x20)\n    x24 = lbind(fork, subtract)\n    x25 = lbind(chain, x12)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(chain, x12)\n    x30 = rbind(x29, x28)\n    x31 = lbind(lbind, shift)\n    x32 = compose(x30, x31)\n    x33 = lbind(apply, x32)\n    x34 = lbind(mapply, dneighbors)\n    x35 = fork(mapply, x33, x34)\n    x36 = compose(x35, x32)\n    x37 = fork(mapply, x32, x33)\n    x38 = fork"], [1.1, "def solve_4b4f8406(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = colorfilter(x1, x6)\n    x8 = argmin(x7, x2)\n    x9 = remove(x8, x7)\n    x10 = rbind(manhattan, x8)\n    x11 = argmin(x9, x10)\n    x12 = rightmost(x11)\n    x13 = rightmost(x8)\n    x14 = subtract(x12, x13)\n    x15 = leftmost(x8)\n    x16 = leftmost(x11)\n    x17 = subtract(x15, x16)\n    x18 = astuple(x14, x17)\n    x19 = maximum(x18)\n    x20 = lowermost(x11)\n    x21 = lowermost(x8)\n    x22 = subtract(x20, x21)\n    x23 = uppermost(x8)\n    x24 = uppermost(x11)\n    x25 = subtract(x23, x24)\n    x26 = astuple(x22, x25)\n    x27 = other(x9, x26)\n    x28 = rightmost(x8)\n    x29 = rightmost(x8)\n    x30 = subtract(x28, x29)\n    x31 = leftmost(x8)\n    x32 = leftmost(x11)\n    x33 = subtract(x31, x32)\n    x34 = astuple(x30, x33)\n    x35 = maximum(x34)\n    x36 = lowermost(x8)\n    x37 = lowermost(x8)\n    x38 = subtract(x36, x37)\n    x39 = uppermost(x8)\n    x40 = uppermost(x11)\n    x41 = subtract(x39, x40)\n    x42 = astuple(x37, x41)\n    x43 = maximum("], [1.1, "def solve_8f3d8ce9(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22,1111)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_76e69eae(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = valmax(x2, size)\n    x4 = apply(normalize, x3)\n    x5 = ONE(x3)\n    x6 = lbind(colorcount, I)\n    x7 = chain(x6, double, x3)\n    x8 = apply(normalize, x4)\n    x9 = rbind(toobject, I)\n    x10 = lbind(rbind, colorcount)\n    x11 = chain(x10, x9, x7)\n    x12 = matcher(x7, ZERO)\n    x13 = toindices(x12)\n    x14 = rbind(toobject, I)\n    x15 = lbind(remove, ZERO)\n    x16 = chain(x14, first, x15)\n    x17 = chain(size, x13, x16)\n    x18 = matcher(x17, ZERO)\n    x19 = fork(both, x12, x18)\n    x20 = sfilter(x11, x19)\n    x21 =444496149(x20)\n    x22 = fork(colorcount, x4, decrement)\n    x23 = matcher(x22, FOUR)\n    x24 = sfilter(x21, x23)\n    x25 = argmin(x24, x7)\n    x26 = ofcolor(I, x1)\n    x27 =222(x26, x25)\n    x28 = asindices(I)\n    x29 = subgrid(x28, I)\n    x30 = argmax(x29, x28)\n    x31 = rbind(contained, x30)\n    x32 = compose(x31, ulcorner)\n    x33 = rbind(trcorner, DOWN)\n    x34 = compose(x33, asindices)\n    x35 = fork(add, x32, x34)\n    x36 = fork(connect, x32, x35)\n    x37 = mapply(x36, x22)\n    x38 = fill(I, x"], [1.1, "def solve_bfcb0d02(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = leastcolor(x1)\n    x4 = leastcolor(x2)\n    x5 = ofcolor(I, x3)\n    x6 = center(x5)\n    x7 = ofcolor(I, x4)\n    x8 = center(x7)\n    x9 = height(I)\n    x10 = width(I)\n    x11 = hfrontier(x6)\n    x12 = fill(I, x3, x11)\n    x13 = hfrontier(x8)\n    x14 = fill(x12, x4, x13)\n    x15 = decrement(x10)\n    x16 = decrement(x9)\n    x17 = halve(x9)\n    x18 = tojvec(x15)\n    x19 = connect(ORIGIN, x18)\n    x20 = fill(x14, x3, x19)\n    x21 = toivec(x16)\n    x22 = astuple(x16, x15)\n    x23 = connect(x21, x22)\n    x24 = fill(x20, x4, x23)\n    x25 = decrement(x17)\n    x26 = toivec(x25)\n    x27 = connect(ORIGIN, x26)\n    x28 = fill(x24, x3, x27)\n     x29 = tojvec(x15)\n    x30 = decrement(x17)\n    x31 = astuple(x30, x15)\n    x32 = connect(x29, x31)\n    x33 = fill(x28, x3, x32)\n    x34 = toivec(x17)\n    x35 = toivec(x16)\n    x36 = connect(x34, x35)\n    x37 = fill(x33, x4, x36)\n    x38 = astuple(x17, x15)\n    x39 = astuple(x16, x15)\n    x40 = connect(x38, x39)\n    O = fill(x37,"], [1.1, "def solve_2539ee12(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, I, x2)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, FIVE)\n    x9 = apply(center, x8)\n    x10 = valmin(x9, first)\n    x11 = compose(first, center)\n    x12 = matcher(x11, x10)\n    x13 = compose(flip, x12)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x15)\n    x17 = ulcorner(x14)\n    x18 = subgrid(x17, x6)\n    x19 =877ind(add, DOWN)\n    x20 = compose(positive, size)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(x21, asindices, x18)\n    x23 = chain(size, x17, x22)\n    x24 = fork(greater, x23, x22)\n    x25 = fork(add, x23, x24)\n    x26 = x25(x11)\n    x27 = x25(x10)\n    x28 = x25(x24)\n    x29 = x25(x25)\n    x30 = hmirror(x8)\n    x31 = invert(x26)\n    x32 = interval(x31, x30, ONE)\n    x33 = invert(x27)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x11, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x8)\n    x40 = mapply(x39,"], [1.1, "def solve_094bbe63(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(greater, ONE)\n    x13 = compose(x12, x6)\n    x14 = lbind(apply, numcolors)\n    x15 = fork(intersection, x4, x14)\n    x16 = chain(x13, merge, x15)\n    x17 = compose(size, x16)\n    x18 = matcher(x17, TWO)\n    x19 = lbind(contained, TWO)\n    x20 = compose(minimum, shape)\n    x21 = lbind(apply, x20)\n    x22 = chain(x19, x21, x16)\n    x23 = fork(equality, x28, x22)\n    x24 = sfilter(x1, x23)\n    x25 = compose(size, first)\n    x26 = argmax(x24, x25)\n    x27 = fork(apply, x22, x26)\n    x28 = argmin(x6, x27)\n    x29 = partition(x28)\n    x30 = size(x29)\n    x31 = matcher(last, x22)\n    x32 = extract(x29, x31)\n    x33 = first(x32)\n    x34 = size(x33)\n    x35 = divide(x34, x30)\n    x36 = double(x35)\n    x37 = interval(ZERO, x36, ONE)\n    x38 = sfilter(x33, x37)\n    x39 = merge(x38)\n    x40 = fill(I, THREE,"], [1.1, "def solve_d9899221(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x6 = positive(x4)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = x7(I)\n    x10 = matcher(identity, x8)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x8, x12)\n    x14 = repeat(x13, ONE)\n    x15 = width(x14)\n    x16 = totuple(x15)\n    x17 = apply(color, x16)\n    x18 = repeat(x17, ONE)\n    x19 = combine(x13, x18)\n    x20 = asobject(x19)\n    x21 = matcher(first, x1)\n    x22 = compose(flip, x21)\n    x23 =object(x20, x22)\n    x24 = height(x23)\n    x25 = apply(last, x23)\n    x26 = matcher(first, x1)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = ONE(x28)\n    x30 = asobject(x29)\n    x31 = matcher(first, x1)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 = color(x33)\n    x35 = ofcolor(x33, x34)\n    x36 = repeat(x35, ONE)\n    x37 = dmirror(x36)\n    x38 = fgpartition(x37)\n    x39 = merge(x38)\n    x40 = objects(x38, T, F, T)\n    x41 = apply(toindices, x40)\n    x42 = fork(either, vline, hline)\n    x43 = mfilter(x41,"], [1.1, "def solve_e1ade565(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, ZERO)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_2eb491f3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 =192dbbrast(I)\n    x2 = height(I)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = compose( halve, width)\n    x10 = fork(last, last, x9)\n    x11 = compose(decrement, x10)\n    x12 =uple(x4, x6)\n    x13 = apply(x11, x12)\n    x14 = merge(x13)\n    x15 = index(I, x14)\n    x16 = mostcolor(I)\n    x17 = shape(I)\n    x18 = canvas(x16, x17)\n    x19 = hconcat(I, x18)\n    x20 = objects(x19, F, T, T)\n    x21 = argmax(x20, numcolors)\n    x22 = subgrid(x21, x19)\n    x23 = interval(THREE, x2, ONE)\n    x24 = pair(x23, x22)\n    x25 = sfilter(x24, mostcolor)\n    x26 = mapply(first, x25)\n    x27 = fill(x96, x16, x26)\n    x28 = astuple(x width, xbbc)\n    x29 = canvas(x16, x28)\n    x30 = vconcat(x29, x28)\n    x31 =75(x30)\n    x32 = asobject(x31)\n    x33 = matcher(first, x16)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 =\n    x37 = sfilter(x32, x35)\n    x38 = width(x36)\n    x39 = ulcorner(x35)\n    x40 = divide(x39, x38)\n    x41 = increment(x40)\n    x42 ="], [1.1, "def solve_a66fabce(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = leastcolor(I)\n    x3 = shape(I)\n    x4 = add(TWO, x3)\n    x5 = canvas(x1, x4)\n    x6 = asobject(I)\n    x7 = shift(x6, UNITY)\n    x8 = paint(x5, x7)\n    x9 = astuple(TWO, ONE)\n    x10 = dneighbors(UNITY)\n    x11 = remove(x9, x10)\n    x12 = recolor(x1, x11)\n    x13 = initset(UNITY)\n    x14 = recolor(x2, x13)\n    x15 = combine(x12, x14)\n    x16 = astuple(THREE, ONE)\n    x17 = connect(UNITY, x16)\n    x18 = recolor(TWO, x17)\n    x19 = initset(TWO_BY_TWO)\n    x20 = insert(UNITY, x19)\n    x21 = backdrop(x20)\n    x22 = astuple(TWO, THREE)\n    x23 = astuple(THREE, TWO)\n    x24 = initset(x23)\n    x25 = insert(x22, x24)\n    x26 = insert(THREE_BY_THREE, x25)\n    x27 = recolor(x2, x21)\n    x28 = outbox(x21)\n    x29 = difference(x28, x26)\n    x30 = recolor(x1, x29)\n    x31 = combine(x27, x30)\n    x32 = recolor(EIGHT, x21)\n    x33 = lbind(lbind, shift)\n    x34 = compose(x33, last)\n    x35 = lbind(fork, paint)\n    x36 = lbind(x35, identity)\n    x37 = lbind(lbind, mapply)\n    x38 = compose(x37, x34)\n    x39 = lbind(rbind, occurrences)\n    x40 = compose(x39, first)\n"], [1.1, "def solve_1e5ead1b(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = x32(I)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = astuple(x35, x31)\n    x37 = x36(I)\n    x38 = x34(x37)\n    x39 = x36(x38)\n    x40 = branch(x39, vmirror, hmirror)\n    x41 = x40(x34)\n    x42 = ofcolor(x41, x6)\n    x43 = shift(x42, UN"], [1.1, "def solve_b10e71f1(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, ZERO)\n    x16 = asindices(I)\n    x17 = difference(x16, x15)\n    x18 = NEG_ONE(x17)\n    x19 = dmirror(x18)\n    x20 = papply(pair, x17, x19)\n    x21 = apply(x4, x20)\n    x22 = ofcolor(I, ONE)\n    x23 =44613rement(x22)\n    x24 = flip(x23)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x4, x26)\n    x28 = asindices(I)\n    x29 = box(x28)\n    x30 =difference(x29)\n    x31 = fill(I, ONE, x30)\n    x32 = index(x31, ORIGIN)\n    x33 = equality(x32, ZERO)\n    x34 = branch(x33, x24, x28)\n    x35 = shift(x34, UNITY)\n    x36 = paint(x31, x35)\n    x37 = equality(x32, ZERO)\n    x38 = branch(x37, x24, x28)\n    x39 = shift(x38, x39)"], [1.1, "def solve_3d619420(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = inpaint(I, x24)\n    x26 = height(I)\n    x27 = decrement(x26)\n    x28 = toivec(x27)\n    x29 = invert(x28)\n    x30 = invert(x29)\n    x31 = shift(x25, x29)\n    x32 = astuple(x31, x17)\n    x33 = lbind(shift, x29)\n    x34 = rbind(compose, initset)\n    x35 = lbind(rbind, manhattan)\n    x36 = chain(x34, x35, initset)\n    x37 = compose(x33, x36)\n    x38 = fork(argmin, x37, x34)\n    x39 = fork(insert, x28, x34)\n    x40 = fork(insert, x30, x39)\n    "], [1.1, "def solve_c9bc97c3(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = dmirror(I)\n    x5 = lbind(shift, x3)\n    x6 = apply(x5, x4)\n    x7 = cmirror(I)\n    x8 = mapply(x7, x7)\n    x9 = mapply(x6, x8)\n    x10 = combine(x6, x9)\n    x11 = leastcolor(I)\n    x12 = palette(I)\n    x13 = remove(x11, x12)\n    x14 = order(x13, identity)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = flip(x16)\n    x18 = ofcolor(x17, x11)\n    x19 = ofcolor(x17, x10)\n    x20 = dmirror(x17)\n    x21 = mapply(x19, x20)\n    x22 = apply( Appendix, x181)\n    x23 = rbind(rapply, x17)\n    x24 = apply(x23, x22)\n    x25 = mapply(x21, x24)\n    x26 =9identity(x25)\n    x27 = dmirror(x25)\n    x28 = mapply(x24, x27)\n    x29 = fill(x17, x11, x28)\n    x30 = hline(x29)\n    O = vline(x30)\n    return O"], [1.1, "def solve_2fc75e97(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = leastcolor(x1)\n    x4 = leastcolor(x2)\n    x5 = ofcolor(I, x3)\n    x6 = center(x5)\n    x7 = ofcolor(I, x4)\n    x8 = center(x7)\n    x9 = height(I)\n    x10 = width(I)\n    x11 = hsplit(I, x9)\n    x12 = fill(x11, x3, x8)\n    x13 = astuple(x10, x12)\n    x14 = ulcorner(x5)\n    x15 =592246(x14, x13)\n    x16 = cover(I, x15)\n    x17 = palette(x16)\n    x18 = lbind(shift, x16)\n    x19 = mapply(x18, x17)\n    O = paint(x16, x19)\n    return O"], [1.1, "def solve_653d410c(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = IgSac146(I)\n    x2 =:\n    3343343334\n    4456712345\n    4556712345\n    4456712344\n    4567712345\n    4567712344\n    4567123444\n    4567123444\n    4455111114\n    4567111111\n    4567111111\n    4564111111\n    4564111111\n    4444111144\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.1, "def solve_ba059a0d(I):\n    \"\"\"\n    Example input:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712000671234\n    45677123456712000671234\n    45671123456712000671234\n    45671223456712000671234\n    45671233456712345671234\n    45671200000712345671234\n    45671200000712000671234\n    45671234566712000671234\n    45671234567712000671234\n    45670000067112005671234\n    45670000067122005671234\n    45670000067123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    Example output:\n    34567123456712345671234\n    44567123456712345671234\n    45567123456712345671234\n    45667123456712345671234\n    45677123456712345671234\n    45671123456712345671234\n    45671223456712345671234\n    45671233456712345671234\n    45671234456712345671234\n    45671234556712345671234\n    45671234566712345671234\n    45671234567712345671234\n    45671234567112345671234\n    45671234567122345671234\n    45671234567123345671234\n    45671234567123445671234\n    45671234567123455671234\n    45671234567123456671234\n    45671234567123456771234\n    45671234567123456711234\n    45671234567123456712234\n    45671234567123456712334\n    45671234567123456712344\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = asindices(I)\n    x3 = box(x2)\n    x4 = height(x2)\n    x5 = divide(x4, FIVE)\n    x6 = leftmost(x2)\n    x7 = interval( interval(x6, TEN, FOUR)\n    x8 = height(I)\n    x9 = interval(x8, TEN, FIVE)\n    x10 = lbind(astuple, x NINE)\n    x11 = apply(x10, x7)\n    x12 = apply(x10, x9)\n    x13 = combine(x11, x12)\n    x14 = mapply(b548, x13)\n    O = fill(I, FOUR, x14)\n    return O"], [1.1, "def solve_814a5122(I):\n    \"\"\"\n    Example input:\n    56780000567812345678123\n    66780000567812345678123\n    67780000567812345678123\n    67880000567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67000044567812345678123\n    67000045567812345678123\n    67000045667812345678123\n    67000045677812345678123\n    67812345678812300008123\n    67810045678112300008123\n    67810045678122300008123\n    67812345678123300008123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456670023\n    67812345678123456770023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456780023\n    67812345678123456781233\n    Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    67881234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678112345678123\n    67812345678122345678123\n    67812345678123345678123\n    67812345678123445678123\n    67812345678123455678123\n    67812345678123456678123\n    67812345678123456778123\n    67812345678123456788123\n    67812345678123456781123\n    67812345678123456781223\n    67812345678123456781233\n    \"\"\"\n    x1 =Example output:\n    56781234567812345678123\n    66781234567812345678123\n    67781234567812345678123\n    66781234567812345678123\n    67811234567812345678123\n    67812234567812345678123\n    67812334567812345678123\n    67812344567812345678123\n    67812345567812345678123\n    67812345667812345678123\n    67812345677812345678123\n    67812345678812345678123\n    67812345678122222228123\n    67812345678123322228123\n    67812345678123422228123\n    67812345678123322228123\n    67812345678123422228123\n    67812345678123322228123\n    68582244567812345678123\n    6781234567812345678123\n    6781234567812345678123\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [1.1, "def solve_55715fdf(I):\n    \"\"\"\n    Example input:\n    56123456123456000456123\n    66123456123456000456123\n    61123456123456000456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61000066123456123456123\n    61000061123456123456123\n    61000061223456123456123\n    61000061233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    60004561234561123456123\n    60004561200000223456123\n    60004561200000233456123\n    60004561200000234456123\n    61234561200000234556123\n    61234561234000234566123\n    61234561234000234561123\n    61234561234000234561223\n    61234561234561234561233\n    Example output:\n    56123456123456123456123\n    66123456123456123456123\n    61123456123456123456123\n    61223456123456123456123\n    61233456123456123456123\n    61234456123456123456123\n    61234556123456123456123\n    61234566123456123456123\n    61234561123456123456123\n    61234561223456123456123\n    61234561233456123456123\n    61234561234456123456123\n    61234561234556123456123\n    61234561234566123456123\n    61234561234561123456123\n    61234561234561223456123\n    61234561234561233456123\n    61234561234561234456123\n    61234561234561234556123\n    61234561234561234566123\n    61234561234561234561123\n    61234561234561234561223\n    61234561234561234561233\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = chain(positive, size, x2)\n    x4 = fork(recolor, color, x3)\n    x5 = rbind(remove, Faffsize)\n    x6 = rbind(compose, backdrop)\n    x7 = lbind(x6,44)\n    x8 = chain(x5, x7, toindices)\n    x9 = chain(x4, x8, dmirror)\n    x10 = fork(sfilter, identity, x9)\n    x11 = compose(color, x10)\n    x12 = leastcolor(I)\n    x13 = matcher(x11, x12)\n    x14 =06 height(I)\n    x15 = difference(x1, x14)\n    x16 = extract(x15, x13)\n    x17 = ulcorner(x16)\n    x18 = subgrid(x16, I)\n    x19 = leftmost(x16)\n    x20 = width(I)\n    x21 = subtract(x19, x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = combine(x22, x12)\n    x24 = rbind(contained, x23)\n    x25 = compose(x24, last)\n    x26 = sfilter(x25, x25)\n    x27 = increment(x18)\n    x28 = add(x17, x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = lbind(shift, x16)\n    x33 = mapply(x32, x31)\n    O = paint(I, x33)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_950936a6(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = leastcolor(x2)\n    x5 = ofcolor(x3, x4)\n    x6 = recolor(x4, x5)\n    x7 = merge(x1)\n    x8 = paint(x3, x7)\n    x9 = box(x2)\n    O = fill(x8, x4, x9)\n    return O"], [0.08173484697705038, "def solve_50e24aac(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_1a6944b7(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_a957e1fb(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.08173484697705038, "def solve_6820cc38(I):\n    x1 = fgpartition(I)\n    x2 = compose(last, first)\n    x3 = power(last, TWO)\n    x4 = fork(connect, x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [0.08173484697705038, "def solve_041c528a(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_7409b980(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.08173484697705038, "def solve_0def9d88(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(gravitate, x4)\n    x6 = compose(crement, x5)\n    x7 = fork(shift, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.08173484697705038, "def solve_7145bc8c(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.08173484697705038, "def solve_72527286(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [0.09909437803847193, "def solve_afb4bf67(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(connect, ulcorner, centerofmass)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, EIGHT, x3)\n    O = switch(x4, EIGHT, TWO)\n    return O"], [0.12814991617905258, "def solve_055e6f9e(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12993277496796057, "def solve_ea22ffdf(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = first(x2)\n    x4 = colorfilter(x1, EIGHT)\n    x5 = first(x4)\n    x6 = gravitate(x3, x5)\n    O = move(I, x3, x6)\n    return O"], [0.13468134728045977, "def solve_e0e91909(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = replace(I, x1, ZERO)\n    x4 = leastcolor(x3)\n    x5 = rbind(colorcount, x4)\n    x6 = chain(positive, decrement, x5)\n    x7 = rbind(toobject, x3)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x2, x8)\n    O = fill(x3, x4, x9)\n    return O"], [0.13468134728045977, "def solve_e43a3d32(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_aa691137(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.147039853263387, "def solve_9ebcb2f6(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_f2385ec1(I):\n    x1 = objects(I, T, F, T)\n    x2 = compose(backdrop, inbox)\n    x3 = mapply(x2, x1)\n    O = fill(I, TWO, x3)\n    return O"], [0.147039853263387, "def solve_de067c4f(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.167039853263387, "def solve_a233c738(I):\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = lbind(matcher, normalize)\n    x4 = compose(x3, normalize)\n    x5 = chain(size, x2, x4)\n    x6 = argmin(x1, x5)\n    x7 = remove(x6, x1)\n    x8 = merge(x7)\n    x9 = fill(I, TWO, x6)\n    O = fill(x9, ONE, x8)\n    return O"], [0.1705557794573261, "def solve_11593e21(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(position, x2)\n    x5 = fork(shoot, center, x4)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x3)\n    O = paint(I, x7)\n    return O"], [0.20977289344345568, "def solve_be7c9e87(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.20977289344345568, "def solve_e87a2a11(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.21724245422789054, "def solve_fa7328f6(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, F)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [0.25543417203130403, "def solve_3e9b3c42(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.2591731603200863, "def solve_623f2bec(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.26915094341200335, "def solve_5bb5457e(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.26915094341200335, "def solve_f449aee5(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = mapply(delta, x1)\n    O = fill(x3, FOUR, x4)\n    return O"], [0.28046050168233005, "def solve_63073016(I):\n    x1 = objects(I, T, F, T)\n    x2 = palette(I)\n    x3 = remove(ZERO, x2)\n    x4 = lbind(other, x3)\n    x5 = compose(x4, color)\n    x6 = fork(recolor, x5, outbox)\n    x7 = mapply(x6, x1)\n    x8 = mapply(toindices, x1)\n    x9 = box(x8)\n    x10 = difference(x9, x8)\n    x11 = lbind(argmin, x8)\n    x12 = rbind(compose, initset)\n    x13 = lbind(rbind, manhattan)\n    x14 = chain(x12, x13, initset)\n    x15 = chain(initset, x11, x14)\n    x16 = fork(manhattan, initset, x15)\n    x17 = compose(even, x16)\n    x18 = sfilter(x10, x17)\n    x19 = paint(I, x7)\n    O = fill(x19, FIVE, x18)\n    return O"], [0.31695206765709394, "def solve_177ac3e8(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(ineighbors, last, first)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = vsplit(x5, THREE)\n    x7 = first(x6)\n    x8 = vconcat(x7, x7)\n    O = vconcat(x7, x8)\n    return O"], [0.3702111384573228, "def solve_927dbd11(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.4853084736970792, "def solve_8dd06ee9(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.6014849716551933, "def solve_ed15feb6(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.7798655548566439, "def solve_fcefb39a(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [0.8861669143706862, "def solve_c9ef1502(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(x1)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [0.8998030983313668, "def solve_fea09ea6(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = double(x2)\n    x4 = interval(ZERO, x3, TWO)\n    x5 = apply(tojvec, x4)\n    x6 = astuple(ONE, NINE)\n    x7 = canvas(ZERO, x6)\n    x8 = fill(x7, ONE, x5)\n    x9 = hsplit(x8, THREE)\n    O = merge(x9)\n    return O"], [0.9183491285403049, "def solve_edf719b9(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = order(x2, size)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(toindices, normalize)\n    x7 = rbind(upscale, TWO)\n    x8 = chain(toindices, x7, normalize)\n    x9 = x6(x4)\n    x10 = rbind(intersection, x9)\n    x11 = chain(size, x10, x8)\n    x12 = argmax(x5, x11)\n    x13 = subgrid(x12, x1)\n    O = vmirror(x13)\n    return O"], [1.0, "def solve_1a5082be(I):\n    x1 = objects(I, T, F, T)\n    x2 = vmirror(I)\n    x3 = subtract(NINE, x1)\n    x4 = upscale(x2, x3)\n    O = undercolor(I, x4)\n    return O"], [1.0, "def solve_46f26b3d(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_4b6e09e0(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    x3 = first(x1)\n    x4 = toindices(x3)\n    x5 = rbind(contained, x4)\n    x6 = portrait(x3)\n    x7 = apply(first, x2)\n    x8 = apply(last, x2)\n    x9 = branch(x6, x7, x8)\n    x10 = branch(x6, RIGHT, DOWN)\n    x11 = delta(x3)\n    x12 = center(x11)\n    x13 = add(x12, x10)\n    x14 = x5(x13)\n    x15 = branch(x6, width, height)\n    x16 = branch(x6, rbind, lbind)\n    x17 = x15(I)\n    x18 = decrement(x17)\n    x19 = x16(astuple, x18)\n    x20 = branch(x6, toivec, tojvec)\n    x21 = branch(x14, x20, x19)\n    x22 = apply(x21, x9)\n    O = fill(I, FOUR, x22)\n    return O"], [1.0, "def solve_319aec7d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, color)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = ofcolor(I, ZERO)\n    x10 = amongapply(neighbors, x9)\n    x11 = remove(x10, x6)\n    x12 = lbind(colorcount, I)\n    x13 = apply(x12, x11)\n    x14 = argmin(x1, x13)\n    x15 = ofcolor(I, x14)\n    x16 = ofcolor(I, x14)\n    x17 = backdrop(x16)\n    x18 = initset(x17)\n    x19 = position(x18, x18)\n    x20 = multiply(TEN, TEN)\n    x21 = add(x20, x20)\n    x22 = rbind(multiply, x21)\n    x23 = apply(x22, x19)\n    x24 = box(x15)\n    x25 = mapply(neighbors, x24)\n    x26 = difference(x25, x23)\n    x27 = toobject(x26, I)\n    x28 = color(x27)\n    x29 = lbind(contained, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x15, x30)\n    x32 = difference(x15, x31)\n    x33 = ofcolor(I, x28)\n    x34 = mapply(neighbors, x33)\n    x35 = apply(toobject, x34)\n    x36 = lbind(shift, x23)\n    x37 = mapply(x36, x35)\n    x38 = combine(x31, x37)\n    O = paint(I, x38)\n    return O"], [1.0, "def solve_ba1619c5(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_4dafee27(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = remove(x4, x3)\n    x6 = lbind(position, x4)\n    x7 = chain(initset, x6, outbox)\n    x8 = fork(combine, identity, x7)\n    x9 = chain(decrement, height, x8)\n    x10 = decrement(x1)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = lbind(multiply, x11)\n    x13 = apply(x12, x110)\n    x14 = lbind(shift, x5)\n    x15 = mapply(x14, x13)\n    x16 = fill(I, x4, x15)\n    x17 = mapply(x8, x13)\n    O = fill(x16, x4, x17)\n    return O"], [1.0, "def solve_7c131b49(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(dneighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = merge(x5)\n    x7 = cover(I, x6)\n    x8 = rbind(adjacent, x5)\n    x9 = extract(x8, x8)\n    O = remove(x9, x8)\n    return O"], [1.0, "def solve_86bdcd9a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = add(TWO, x5)\n    x7 = canvas(x4, x6)\n    x8 = asobject(I)\n    x9 = shift(x8, UNITY)\n    x10 = paint(x7, x9)\n    x11 = palette(x10)\n    x12 = remove(x4, x11)\n    x13 = lbind(ofcolor, x10)\n    x14 = fork(recolor, identity, x13)\n    x15 = apply(x14, x12)\n    x16 = fork(equality, toindices, backdrop)\n    x17 = extract(x15, x16)\n    x18 = other(x15, x17)\n    x19 = color(x18)\n    x20 = astuple(x19, RIGHT)\n    x21 = initset(ZERO_BY_TWind)\n    x22 = insert(ORIGIN, x21)\n    x23 = recolor(x4, x22)\n    x24 = insert(x20, x23)\n    x25 = dmirror(x24)\n    x26 = lbind(shift, x24)\n    x27 = occurrences(x10, x24)\n    x28 = mapply(x26, x27)\n    x29 = lbind(shift, x25)\n    x30 = occurrences(x10, x25)\n    x31 = mapply(x29, x30)\n    x32 = combine(x28, x31)\n    x33 = fill(x10, x4, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = gravitate(x34, x17)\n    x36 = replace(x10, x19, x4)\n    x37 = shift(x34, x35)\n    x38 = fill(x36, x19, x37)\n    O = trim(x38)\n    return O"], [1.0, "def solve_c1b42f42(I):\n    x1 = width(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = lbind(intersection, x3)\n    x5 = compose(size, x4)\n    x6 = argmax(x1, x5)\n    x7 = difference(x2, x6)\n    x8 = prapply(recolor, x7, x4)\n    x9 = mapply(x8, x7)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_13f635d9(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(\n    x1, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(add, UNITY)\n    x5 = chain(x3, x4, decrement)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x1)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_2fe638d1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_98fcdedc(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, first)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [1.0, "def solve_41d94d56(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    x16 = fill(x14, SIX, x15)\n    x17 = merge(x12)\n    x18 = fill(x16, SEVEN, x17)\n    O = fill(x18, FIVE, x10)\n    return O"], [1.0, "def solve_a120d399(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = add(ZERO, x1)\n    x5 = insert(x4, x2)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = add(x6, x7)\n    x9 = height(I)\n    x10 = decrement(x9)\n    x11 = astuple(x10, x8)\n    x12 = add(x11, x8)\n    x13 = astuple(x6, x12)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = shoot(ORIGIN, x15)\n    x17 = numcolors(x16)\n    x18 = equality(x17, THREE)\n    x19 = canvas(x3, x11)\n    x20 = sfilter(x16, x18)\n    x21 = hmirror(x20)\n    x22 = vmirror(x21)\n    x23 = asindices(x22)\n    x24 = shift(x23, x8)\n    x25 = asindices(x24)\n    x26 = corners(x25)\n    x27 = combine(x24, x26)\n    x28 = astuple(x27, x8)\n    x29 = lbind(remove, x28)\n    x30 = lbind(mapply, neighbors)\n    x31 = compose(x29, first)\n    x32 = chain(x30, x31, last)\n    x33 = lbind(recolor, x3)\n    x34 = rbind(mapply, x33)\n    x35 = compose(x34, first)\n    x36 = fork(combine, x28, x35)\n    x37 = fork(paint, identity, x36)\n    x38 = mapply(x37, x50)\n    O = branch(x38, x20, extract)\n    return O"], [1.0, "def solve_d64af4d3(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = colorcount(I, x2)\n    x4 = vline(x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = ofcolor(x6, x2)\n    x8 = shoot(UNITY, UNITY)\n    x9 = shoot(NEG_UNITY,_2_BY_TWO)\n    x10 = combine(x8, x9)\n    x11 = outbox(x10)\n    x12 = difference(x7, x11)\n    O = fill(x6, x2, x12)\n    return O"], [1.0, "def solve_b08d39ac(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = matcher(x2, ONE)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = extract(x1, x3)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = astuple(x7, x8)\n    x10 = double(x9)\n    x11 = square(x10)\n    x12 = subtract(x9, x11)\n    x13 = multiply(x12, x9)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = remove(x4, x14)\n    x16 = difference(x1, x15)\n    x17 = rbind(recolor, x5)\n    x18 = compose(x17, last)\n    x19 = lbind(ofcolor, x4)\n    x20 = chain(decrement, x19, last)\n    x21 = fork(shift, first, x20)\n    x22 = mapply(x21, x16)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_793bbd35(I):\n    x1 = objects(I, T, F, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = x3(vline)\n    x5 = x3(hline)\n    x6 = greater(x4, x5)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = x8(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    x18 = hconcat(x16, x17)\n    x19 = hconcat(x18, x10)\n    x20 = vconcat(x19, x17)\n    x21 = vconcat(x20, x10)\n    O = x9(x21)\n    return O"], [1.1, "def solve_3c0b9e80(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = first(x3)\n    x5 = portrait(x4)\n    x6 = branch(x5, I, x2)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, FIVE)\n    x9 = apply(center, x8)\n    x10 = valmin(x9, first)\n    x11 = compose(first, center)\n    x12 = matcher(x11, x10)\n    x13 = compose(flip, x12)\n    x14 = extract(x8, x12)\n    x15 = extract(x8, x13)\n    x16 = ulcorner(x14)\n    x17 = ulcorner(x15)\n    x18 = subgrid(x14, x6)\n    x19 = subgrid(x15, x6)\n    x20 = hmirror(x18)\n    x21 = hmirror(x19)\n    x22 = ofcolor(x20, FIVE)\n    x23 = recolor(FIVE, x22)\n    x24 = ofcolor(x21, FIVE)\n    x25 = recolor(FIVE, x24)\n    x26 = height(x23)\n    x27 = height(x25)\n    x28 = add(THREE, x6)\n    x29 = add(THREE, x27)\n    x30 = toivec(x28)\n    x31 = toivec(x29)\n    x32 = add(x16, x30)\n    x33 = subtract(x17, x31)\n    x34 = shift(x23, x32)\n    x35 = shift(x25, x33)\n    x36 = merge(x8)\n    x37 = cover(x6, x36)\n    x38 = paint(x37, x34)\n    x39 = paint(x38, x35)\n    x40 = rot270(x39)\n    O = branch(x5, x39"], [1.1, "def solve_75a128f2(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x38 = compose(initset, x18)\n    x39 = chain(first, x31, x38)\n    x40 = compose(invert, x30)\n    x41 = fork(shift, x30, x40)\n    x42 = compose(x20, x41)\n    x43 = compose(x21, x27)\n    x44 = fork("], [1.1, "def solve_41b02f9f(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_52e2c0c8(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = compose(normalize, toindices)\n    x3 = mapply(x2, x1)\n    x4 = partition(I)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = extract(x6, uppermost)\n    x8 = remove(x7, x6)\n    x9 = lbind(crop, I)\n    x10 = chain(size, x9, first)\n    x11 = argmax(x8, x10)\n    x12 = matcher(first, ZERO)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(flip, x12, x13)\n    x15 = sfilter(x6, x14)\n    x16 = ulcorner(x7)\n    x17 = rbind(subtract, x16)\n    x18 = double(x15)\n    x19 = rbind(multiply, x18)\n    x20 = chain(x17, x19, minimum)\n    x21 = lbind(apply, uppermost)\n    x22 = compose(x21, x10)\n    x23 = fork(add, x22, x20)\n    x24 = fork(connect, x18, x23)\n    x25 = fork(6443, x24, identity)\n    x26 = matcher(first, x11)\n    x27 = compose(flip, x26)\n    x28 = rbind(sfilter, x27)\n    x29 = rbind(matcher, x28)\n    x30 = chain(x20, x29, last)\n    x31 = fork(sfilter, x30, x29)\n    x32 = fork(connect, x40, x31)\n    x33 = fork(6443, x32, identity)\n    x34 = fork(recolor, x25, x33)\n    x35 = mapply(x34, x19)\n    x36 = paint(I, x35)\n    x37 = repeat(x36, ONE)\n    O"], [1.1, "def solve_33008ff5(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = rbind(multiply, THREE)\n    x5 = rbind(divide, THREE)\n    x6 = chain(x4, x5, maximum)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x1, x7)\n    x9 = chain(outbox, outbox, initset)\n    x10 = corners(x8)\n    x11 = mapply(x9, x10)\n    x12 = difference(x1, x8)\n    x13 = branch(x11, x12, x\n    x14 = mapply(x9, x8)\n    x15 = fill(x3, THREE, x5)\n    x16 = fill(x15, TWO, x13)\n    O = fill(x16, ONE, x14)\n    return O"], [1.1, "def solve_51918664(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000008800008800000\n    000008800008800000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000008800000000000\n    000008800000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000008877778800000\n    000008877778800000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000000000007700000\n    000008877778800000\n    000008877778800000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000007700000000000\n    000002200000000000\n    000002200000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, T)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(numcolors, x11)\n    x15 = compose(flip, x13)\n    x16 = matcher(x14, ONE)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x9, x17)\n    x19 = compose(flip, x15)\n    x20 = fork(both, x18, x19)\n    x21 = mfilter(x18, x20)\n    x22 = fill(x5, TWO, x21)\n    x23 = colorfilter(x8, ZERO)\n    x24 =DON mapped(x23, x22)\n    x25 = lbind(toobject, x25)\n    x26 = compose(first, x25)\n    x27 = chain(x33, x25, x26)\n    x28 = fork(recolor, x27, identity)\n    x29 = mapply(x28, x22)\n    O = paint(x22, x29)\n    return O"], [1.1, "def solve_f8e8a660(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 =62727(x9)\n    x11 = branch(x7, leftmost, uppermost)\n    x12 = x11(x6)\n    x13 = tojvec(x12)\n    x14 = shift(x9, x13)\n    x15 = double(x10)\n    x16 = add(x15, TWO)\n    x17 = mapply(x16, x14)\n    x18 = combine(x17, x7)\n    x19 = paint(I, x18)\n    O = x8(x19)\n    return O"], [1.1, "def solve_c558f96a(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = partition(I)\n    x2 =87700880088008800000000000\n    x3 = fork(equality, toindices, box)\n    x4 = extract(x1, x3)\n    x5 = inbox(x4)\n    x6 = subgrid(x5, I)\n    x7 = asobject(x6)\n    x8 = argmin(x1, size)\n    x9 = color(x8)\n    x10 = leftmost(x8)\n    x11 = width(I)\n    x12 = divide(x11, x10)\n    x13 = rightmost(x8)\n    x14 = height(I)\n    x15 = divide(x13, x14)\n    x16 = leftmost(x8)\n    x17 = width(I)\n    x18 = divide(x16, x17)\n    x19 = rbind(greater, x12)\n    x20 = compose(x19, color)\n    x21 = rbind(greater, x15)\n    x22 = compose(x21, width)\n    x23 = fork(either, x20, x22)\n    x24 = mfilter(x5, x23)\n    x25 = fill(I, x9, x24)\n    x26 =74ddulcorner(x5)\n    x27 = fill(x25, x9, x26)\n    O =74ddlytrim(x27)\n    return O"], [1.1, "def solve_1d2c7586(I):\n    \"\"\"\n    Example input:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002200088000\n    088000002200088000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    Example output:\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    088000002277788000\n    088000002277788000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    000000000000000000\n    \"\"\"\n    x1 = objects(I, x,,, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [1.1, "def solve_0c4c1d36(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800000000088000000000000\n    0008800000000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008800880000088000000000000\n    0008800880000088000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000008800\n    0000000880000000000000008800\n    0000000880000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0022000880000088000008800000\n    0022000880000088000008800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    Example output:\n    0000000000000000000000000000\n    0880000000000000000000000000\n    0880000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0008877777777788000000000000\n    0008877777777788000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0007700000000077000000000000\n    0008877880000088000000000000\n    0008877880000088000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000008800\n    0000000880000077000000008800\n    0000000880000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0000000770000077000000000000\n    0022777880000088777778800000\n    0022777880000088777778800000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    0000000000000000000000000000\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x1, x6)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = cover(I, x9)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = normalize(x12)\n    x14 = shift(x13, ulcorner)\n    x15 = paint(I, x14)\n    x16 = toindices(x14)\n    x17 = lbind(x16, NEG_UNITY)\n    x18 = shift(x16, x17)\n    x19 = lbind(shift, x18)\n    x20 = shape(I)\n    x21 = multiply(x20, x20)\n    x22 = canvas(ZERO, x21)\n    x23 = objects(x17, x22, compose)\n    x24 = lbind(colorcount, I)\n    x25 = multiply(x24, x26)\n    x26 =39(x25)\n    x27 = colorfilter(x23, x26)\n    x28 = rbind(contained, x27)\n    x29 = rbind(toobject, I)\n    x30 = chain(x28, x29, delta)\n    x31 = apply(x30, x27)\n    x32 = mfilter(x31, x30)\n    x33 = paint(x15, x32)\n    O = replace(x33, x3, x5)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_ad8f1c09(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.29814814814814816, "def solve_afe54b49(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [0.32027505446623095, "def solve_16626451(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_0bd75b6f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    O = subgrid(x3, I)\n    return O"], [0.3215686274509804, "def solve_ac15e622(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_cbd27c6e(I):\n    x1 = partition(I)\n    x2 = lbind(contained, ONE)\n    x3 = chain(flip, x2, shape)\n    x4 = sfilter(x1, x3)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = fork(multiply, height, width)\n    x8 = argmin(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.3666824618736384, "def solve_e4a780d7(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.40763616557734206, "def solve_e4ce6112(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_e719232a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41333791996330693, "def solve_43b650d5(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.4296296296296296, "def solve_d998e88f(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.4296296296296296, "def solve_a216a2d6(I):\n    x1 = fgpartition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    O = canvas(x5, UNITY)\n    return O"], [0.4296296296296296, "def solve_f82b2f94(I):\n    x1 = objects(I, T, F, F)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = size(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x4, x6)\n    x8 = compose(leastcolor, merge)\n    x9 = lbind(apply, color)\n    x10 = chain(mostcommon, x9, totuple)\n    x11 = branch(x7, x8, x10)\n    x12 = x11(x1)\n    x13 = objects(I, T, F, F)\n    x14 = colorfilter(x13, x12)\n    x15 = difference(x13, x14)\n    x16 = rbind(subgrid, I)\n    x17 = apply(x16, x15)\n    x18 = rbind(colorcount, x12)\n    x19 = argmax(x17, x18)\n    x20 = mostcolor(x19)\n    O = canvas(x20, UNITY)\n    return O"], [0.4296296296296296, "def solve_f7c3d605(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, TWO)\n    x3 = compose(x2, palette)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ZERO, EIGHT)\n    O = canvas(x7, UNITY)\n    return O"], [0.6163211951447245, "def solve_8f67f9ff(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.7088151265460183, "def solve_145d9505(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = merge(x1)\n    x5 = cover(I, x4)\n    x6 = fill(x5, ONE, x2)\n    O = fill(x6, TWO, x3)\n    return O"], [0.709172269403161, "def solve_51e00571(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_f61045b8(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.709172269403161, "def solve_e6ca1906(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7241016188672439, "def solve_ab3c60a4(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_8e4fccce(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7436960789269706, "def solve_0bdd4fba(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_35e07ee2(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(greater, THREE)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = mapply(toindices, x5)\n    x7 = fill(I, x1, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = fork(recolor, color, backdrop)\n    x10 = mapply(x9, x8)\n    O = paint(x7, x10)\n    return O"], [0.7436960789269706, "def solve_e72581d3(I):\n    x1 = objects(I, T, F, F)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = apply(x4, x3)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    x9 = shift(x8, UP_RIGHT)\n    x10 = shift(x8, DOWN_LEFT)\n    x11 = paint(I, x8)\n    x12 = paint(x11, x9)\n    O = paint(x12, x10)\n    return O"], [0.7436960789269706, "def solve_166a9452(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.7436960789269706, "def solve_3e44f00f(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30, lbind, rbind)\n    x33 = lbind(x32, astuple)\n    x34 = branch(x30, height, width)\n    x35 = x34(I)\n    x36 = decrement(x35)\n    x37 = either(x16, x23)\n    x38 = branch(x37, ZERO, x36)\n    x39 = x33(x38)\n    x40 = apply(x39, x31)\n    O = fill(x10, x6, x40)\n    return O"], [0.7436960789269706, "def solve_1413606b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(difference, toindices, box)\n    x3 = mapply(x2, x1)\n    x4 = mostcolor(I)\n    O = fill(I, x4, x3)\n    return O"], [0.7725859788359788, "def solve_4d0876e0(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_4d837d75(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [1.0, "def solve_de072652(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = apply(color, x2)\n    x4 = difference(x1, x2)\n    x5 = apply(color, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = ofcolor(I, x6)\n    x9 = ofcolor(I, x7)\n    x10 = rbind(shoot, UNITY)\n    x11 = rbind(shoot, NEG_UNITY)\n    x12 = rbind(shoot, DOWN_LEFT)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = rbind(shoot, DOWN_LEFT)\n    x15 = rbind(shoot, UNITY)\n    x16 = rbind(shoot, NEG_UNITY)\n    x17 = fork(combine, x10, x11)\n    x18 = fork(combine, x12, x13)\n    x19 = fork(combine, x14, x15)\n    x20 = compose(x17, x9)\n    x21 = compose(x18, x19)\n    x22 =ramemax(x3, x20)\n    x23 = rbind(subgrid, I)\n    x24 = apply(x23, x3)\n    x25 = mapply(vmirror, x24)\n    x26 = mapply(hmirror, x24)\n    x27 = fill(I, x6, x25)\n    O = fill(x27, x7, x26)\n    return O"], [1.0, "def solve_e0e99c49(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_97612253(I):\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(outbox, merge,44)\n    x5 = chain(backdrop, inbox, x4)\n    x6 = mapply(x5, x3)\n    O = fill(I, FOUR, x6)\n    return O"], [1.0, "def solve_70e5b83a(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x18 = apply(x15, x14)\n    x19 = rbind(subgrid, I)\n    x20 = apply(x19, x18)\n    x21 = double(TEN)\n    x22 = palette(x20)\n    x23 = lbind(colorcount, x20)\n    x24 = argmin(x22, x23)\n    x25 = other(x22, x24)\n    x26 = ofcolor(x20, x24)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x24)\n    x29 = fill(I, x24, x27)\n    x30 = fill(x29, x25, x28)\n    O = fill(x30, x25, x29)\n    return O"], [1.0, "def solve_f13e11a4(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_36f54525(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 = mfilter(x1, x17)\n    O = fill(I, x14, x18)\n    return O"], [1.0, "def solve_1dfe9885(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_f39c73dc(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_3acab47c(I):\n    x1 = objects(I, T, F, T)\n    x2 = chain(size, dedupe, dmirror)\n    x3 = x2(x1)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(x1)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_58134035(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = mostcolor(I)\n    x7 = inbox(x5)\n    x8 = backdrop(x7)\n    x9 = toobject(x8, I)\n    x10 = matcher(first, x6)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = normalize(x12)\n    x14 = color(x13)\n    x15 = toindices(x13)\n    x16 = compose(toindices, normalize)\n    x17 = matcher(x16, x15)\n    x18 =flip(x10, x17)\n    x19 = sfilter(x19, x18)\n    x20 = shape(x13)\n    x21 = apply(ulcorner, x20)\n    x22 = lbind(shift, x13)\n    x23 = mapply(x22, x21)\n    x24 = fill(I, x14, x23)\n    x25 = paint(x24, x3)\n    O = paint(x25, x3)\n    return O"], [1.0, "def solve_521d05c2(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(subtract, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, size)\n    x12 = sfilter(x1, x11)\n    x13 = argmax(x12, size)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x4, x15)\n    x17 = other(x16, x14)\n    x18 = subgrid(x17, I)\n    x19 = vmirror(x18)\n    x20 = hmirror(x18)\n    x21 = shape(x20)\n    x22 = maximum(x21)\n    x23 =vert(x22)\n    x24 = objects(x19, T, F, T)\n    x25 = colorfilter(x24, x4)\n    x26 = lbind(adjacent, x13)\n    x27 = sfilter(x25, x26)\n    x28 = apply(toindices, x27)\n    x29 = rbind(mapply, x28)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x29, x30)\n    x32 = fork(recolor, x31, mostcolor)\n    x33 = mapply(x32, x27)\n    O = paint(x18, x33)\n    return O"], [1.0, "def solve_ff5f96ad(I):\n    x1 = palette(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 =    x4(I)\n    x6 = mostcolor(x5)\n    x7 = palette(I)\n    x8 = lrcorner(x3)\n    x9 = add(x8, UNITY)\n    x10 = llcorner(x3)\n    x11 = add(x10, DOWN_LEFT)\n    x12 = urcorner(x3)\n    x13 = add(x12, UP_RIGHT)\n    x14 = ulcorner(x3)\n    x15 = add(x14, NEG_UNITY)\n    x16 = shoot(x9, UNITY)\n    x17 = shoot(x11, DOWN_LEFT)\n    x18 = shoot(x13, UP_RIGHT)\n    x19 = shoot(x15, NEG_UNITY)\n    x20 = combine(x16, x17)\n    x21 = combine(x18, x19)\n    x22 = combine(x20, x21)\n    x23 = color(x3)\n    O = fill(I, x23, x22)\n    return O"], [1.0, "def solve_0fbc0fcc(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(color, x1)\n    x3 = lbind(sfilter, x2)\n    x4 = lbind(matcher, identity)\n    x5 = chain(size, x3, x4)\n    x6 = matcher(x5, ONE)\n    x7 = fork(both, x4, x6)\n    x8 = extract(x1, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_db68488c(I):\n    x1 = objects(I, T, F, T)\n    x2 = toindices(x1)\n    x3 = lbind(contained, ZERO)\n    x4 = compose(x3, palette)\n    x5 = fork(manhattan, identity, x4)\n    x6 = compose(even, x5)\n    x7 = sfilter(x2, x6)\n    x8 = fork(difference, identity, x4)\n    x9 = leastcolor(I)\n    x10 = ofcolor(I, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 = difference(x11, x10)\n    x13 = toobject(x12, I)\n    x14 = mostcolor(x13)\n    x15 = ofcolor(I, x14)\n    x16 = mapply(dneighbors, x15)\n    x17 = mapply(toindices, x16)\n    x18 = box(x15)\n    x19 = difference(x17, x18)\n    x20 = intersection(x15, x19)\n    x21 = fill(I, x14, x20)\n    x22 = difference(x17, x21)\n    x23 = fill(x21, x9, x22)\n    x24 = replace(x23, x14, x12)\n    x25 = dmirror(x24)\n    x26 = replace(x25, x14, x12)\n    x27 = vmirror(x26)\n    x28 = cellwise(x27, x25, x25)\n    O = vmirror(x28)\n    return O"], [1.0, "def solve_03dee1a5(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = leastcolor(x27)\n    x29 = ofcolor(x27, x28)\n    x30 = partition(x27)\n    x31 = compose(increment, first)\n    x32 = fork(greater, last, x31)\n    x33 = chain(invert, asobject, x32)\n    x34 = fork(shift, x33, x34)\n    x35 = mapply(x45, x29)\n    x36 = fill(x27, x28, x35)\n    x37 = leastcolor(x36)\n    O = ofcolor(x36, x37)\n    return O"], [1.1, "def solve_1e6dfe3d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shoot(x26, UP_RIGHT)\n    x28 = add(x25, DOWN_LEFT)\n    x29 = shoot(x28, DOWN_LEFT)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x30, x27)\n    x32 = rbind(shoot, LEFT)\n    x33 = mapply(x32, x29)\n    x34 = width(x23)\n    x35 = invert(x34)\n    x36 = tojvec(x35)\n    x37 = shift(x31, x36)\n    x38 = combine(x31, x37)\n    x39 ="], [1.1, "def solve_58b70100(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, totuple)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_c6b9d67d(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_057ce20e(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_04b38bd7(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = sizefilter(x15, ONE)\n    x17 =17(x16)\n    x18 = color(x17)\n    x19 = subgrid(x17, I)\n    x20 = shoot(x10, UNITY)\n    x21 = lrcorner(x16)\n    x22 = shoot(x17, NEG_UNITY)\n    x23 = combine(x21, x22)\n    x24 = rbind(shoot, x207)\n    x25 = mapply(x24, x23)\n    x26 = combine(x21, x25)\n    x27 = fill(x19, x6, x26)\n    x28 = objects(x27, T, F, T)\n    x29 = rbind(colorcount, x28)\n    x30 = argmax(x29, lrcorner)\n    x31 = matcher(first, x30)\n    x32 = rbind(sfilter, x31)\n    x33 = compose(dmirror, x32)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(dmirror, x34)\n    x36 = x35(x16)\n    x37 = mapply(x33, x36)\n    x38 = x23(x37)\n    "], [1.1, "def solve_7c6751ab(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(fcc8, dmirror, merge)\n    x7 = x6(x5)\n    x8 = compose(vmirror, dmirror)\n    x9 = x8(x7)\n    x10 =583000000(x9)\n    x11 = power(x8, THREE)\n    x12 = x9(x4)\n    x13 = matcher(first, ZERO)\n    x14 = rbind(sfilter, x13)\n    x15 = lbind(compose, x14)\n    x16 = lbind(upscale, x10)\n    x17 = chain(x15, x15, x16)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x18, toindices, x15)\n    x20 = fork(mapply, x17, x19)\n    x21 = x20(x10)\n    x22 = x8(x21)\n    x23 = argmin(x22, uppermost)\n    x24 = argmin(x22, leftmost)\n    x25 = apply(x22, x22)\n    x26 = x22(x25)\n    x27 = hmirror(x26)\n    x28 = normalize(x27)\n    x29 = double(x26)\n    x30 = hmirror(x28)\n    x31 = shift(x29, x30)\n    x32 = leastcolor(x25)\n    x33 = palette(x28)\n    x40 = remove(x32, x33)\n    x41 = lbind(ofcolor, x28)\n    x42 = lbind(prapply, connect)\n    x43 = fork(x42, x41, x41)\n    x44 = compose(merge, x43)\n    x45 = fork(recolor, identity, x44)\n    x46 = m"], [1.1, "def solve_788491e9(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = frontiers(x5)\n    x7 = palette(x6)\n    x8 = remove(x4, x7)\n    x9 = lbind(colorcount, x5)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x5, T, F, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x7)\n    x19 = toindices(x18)\n    x20 = sfilter(x12, x14)\n    x21 = size(x20)\n    x22 = increment(x21)\n    x23 = rbind(divide, x22)\n    x24 = sfilter(x12, x17)\n    x25 = size(x24)\n    x26 = increment(x25)\n    x27 = rbind(multiply, x26)\n    x28 = apply(x27, x24)\n    x29 = astuple(x24, x25)\n    x30 = rbind(multiply, x29)\n    x31 = apply(x30, x28)\n    x32 = rbind(vsplit, x30)\n    x33 = rbind(hsplit, x30)\n    x34 = apply(x32, x33)\n    x35 = combine(x29, x34)\n    x36 = rbind(hconcat, x35)\n    x37 = lbind(canvas, x10)\n    x38 = lbind(occurrences, x5)\n    x39 = compose(x37, x38)\n    x40 = fork"], [1.1, "def solve_fca284d4(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_544a993d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_9ba320e3(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = matcher(x13, x15)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = lbind(astuple, x11)\n    x20 = lbind(matcher, x4)\n    x21 = compose(x19, x20)\n    x22 = apply(x21, x18)\n    x23 = lbind(multiply, x5)\n    x24 = chain(x22, x23, dneighbors)\n    x25 = objects(x7, T, F, F)\n    x26 = sfilter(x25, x24)\n    x27 = fork(subtract, last, identity)\n    x28 = lbind(multiply, x5)\n    x29 = compose(x28, x27)\n    x30 = fork(add, identity, x29)\n    x31 = lbind(multiply, x6)\n    x32 = compose(x31, x22)\n    x33 = fork(add, identity, x32)\n    x34 = fork(2222, x33, x30)\n    x35 = fork(connect, identity, x34)\n    x36 =3333(x10, x6)\n    x37 = leastcolor(x36)\n    x38 = ofcolor(x36, x37)\n    x39 = ofcolor"], [1.1, "def solve_838760e5(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 =888888888888\n    x9 = palette(x7)\n    x10 = matcher(identity, x6)\n    x11 = sfilter(x9, x10)\n    x12 = argmin(x11, uppermost)\n    x13 = argmax(x11, uppermost)\n    x14 = color(x13)\n    x15 = color(x14)\n    x16 = subgrid(x13, x14)\n    x17 =8888888888888888\n    x18 = arg84(x16)\n    x19 = lowermost(x18)\n    x20 = add(x19, x17)\n    x21 = invert(x20)\n    x22 = objects(x16, T, F, T)\n    x23 = colorfilter(x22, x6)\n    x24 = rbind(bordering, x16)\n    x25 = compose(flip, x24)\n    x26 = sfilter(x23, x25)\n    x27 = remove(x26, x23)\n    x28 = merge(x27)\n    x29 = add(x20, x28)\n    x30 = invert(x29)\n    x31 = invert(x30)\n    x32 = subgrid(x29, x7)\n    x33 = hconcat(x31, x32)\n    x34 = hmirror(x33)\n    x35 = vconcat(x33, x34)\n    x36 = x2(x35)\n    x37 = sfilter(x36, x25)\n    x38 = objects(x37, T, F, T)\n    x39 = rbind(adjacent, x38)\n    x40 = mfilter(x38, x39)\n    O = vconcat"], [1.1, "def solve_7d994dc1(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = difference(x3, x2)\n    x5 = NEG_ONE(x4)\n    x6 = shape(I)\n    x7 = canvas(x2, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, F, T)\n    x10 = argmax(x9, numcolors)\n    x11 = normalize(x10)\n    x12 = remove(x11, x9)\n    x13 = merge(x12)\n    x14 = mostcolor(x13)\n    x15 = palette(x11)\n    x16 = matcher(identity, x14)\n    x17 = argmin(x15, x16)\n    x18 = matcher(first, x14)\n    x19 = sfilter(x11, x18)\n    x20 = matcher(first, x17)\n    x21 = sfilter(x11, x20)\n    x22 = toindices(x21)\n    x23 = combine(x19, x22)\n    x24 = lbind(argmin, x23)\n    x25 = lbind(shift, x11)\n    x26 = lbind(mapply, x25)\n    x27 = rbind(occurrences, x41)\n    x28 = lbind(lfilter, x41)\n    x29 = compose(x28, x27)\n    x30 = chain(x26, x25, x29)\n    x31 = rbind(mapply, x21)\n    x32 = compose(x31, x30)\n    x33 = fork(paint, identity, x32)\n    x34 = interval( ONE, FOUR, ONE)\n    x35 = rbind(apply, x33)\n    x36 = lbind(index, x41)\n    x37 = compose(x35, x36)\n    x38 = chain(x33, x37, x34)\n    x39 = lbind(apply, x43)\n    x40"], [1.1, "def solve_eff6f5aa(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_bf80c459(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = compose(positive, size)\n    x2 = lbind(rbind, equality)\n    x3 = rbind(compose, dmirror)\n    x4 = lbind(compose, x1)\n    x5 = chain(x3, x4, x1)\n    x6 = chain(x5, x3, apply(x3, I)\n    x7 = x5(x6)\n    x8 = fork(color, x7, identity)\n    x9 = lbind(contained, ZERO)\n    x10 = compose(x9, palette)\n    x11 = fork(sfilter, x10, x8)\n    x12 = compose(size, x11)\n    x13 =ridden0(x1)\n    x14 = chain(x13, x12, x1)\n    x15 = branch(x5, x14, x6)\n    x16 = x15(x4)\n    x17 = x15(x6)\n    x18 = shape(x16)\n    x19 = canvas(ZERO, x18)\n    x20 = paint(x19, x16)\n    x21 = objects(x20, F, T, T)\n    x22 = first(x21)\n    x23 = subgrid(x22, x20)\n    x24 = argmax(x23, lowermost)\n    x25 = normalize(x24)\n    x26 = width(x27)\n    x27 = ulcorner(x25)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = height(x225)\n    x31 = divide(x30, x26)\n    x32 = rbind(multiply, x31)\n    x33 = chain(toindices, x32, x29)\n    x34 = mapply(x33, x29)\n    x35 = fill(x24, x24, x34)\n    x36 = lbind(shift, x24)\n    x37 = height(x225)\n    x38 = divide(x37, x31)\n    x39 = width(x225)\n    x"], [1.1, "def solve_c0ab2966(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = lbind(sfilter, x1)\n    x3 = compose(size, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = sfilter(x1, x4)\n    x6 = lbind(matcher, normalize)\n    x7 = compose(x6, sfilter)\n    x8 = argmin(x5, x7)\n    x9 = asindices(x8)\n    x10 = center(x9)\n    x11 = outbox(x10)\n    x12 = lbind(difference, x11)\n    x13 = chain(size, x12, toindices)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x11, x14)\n    x16 = lbind(rbind, manhattan)\n    x17 = lbind(argmin, x5)\n    x18 = chain(x16, x17, x8)\n    x19 = fork(both, x14, x18)\n    x20 = fork(both, x17, x19)\n    x21 = fork(both, x15, x20)\n    x22 = fork(both, x21, x5)\n    x23 = fork(connect, x22, ulcorner)\n    x24 = fork(x22, x23, toindices)\n    x25 = fork(combine, x24, x20)\n    x26 = fork(apply, x29, x21)\n    x27 = fork(lrcorner, x25, x26)\n    x28 = rbind(shoot, x10)\n    x29 = compose(x28, last)\n    x30 = fork(recolor, first, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(I, x31)\n    x33 = interval(ZERO, x12, ONE)\n    x34 = prapply(astuple, x33, x18)\n    x35 = lbind(apply, last)\n    x36 = compose(x35, first)\n    "], [1.1, "def solve_eda73696(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = reviewer(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37, x31)\n    "], [1.1, "def solve_8c3faa4d(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(lowermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = lbind(compose, x4)\n    x7 = compose(initset, x6)\n    x8 = chain(first, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x3, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = invert(x16)\n    x18 = toivec(x17)\n    x19 = invert(x18)\n    x20 = tojvec(x19)\n    x21 = invert(x20)\n    x22 = increment(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = height(x11)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = lbind(shift, x11)\n    x28 = height(x11)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = pair(x26, x29)\n    x31 = mapply(x27, x30)\n    x32 = astuple(x15, x13)\n    x33 = x10(x32)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x34)\n    x36 = mapply(x27, x35)\n    x37 = fill(x11, FOUR, x36)\n    x38 = astuple(x33, x3333)\n    x39 = shift(x37, x"], [1.1, "def solve_fc965f54(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = ofcolor(x7, x6)\n    x9 = asindices(x7)\n    x10 = outbox(x3)\n    x11 = lbind(contained, x10)\n    x12 = compose(x11, hcorner)\n    x13 =048(x8, x12)\n    x14 = rbind(greater, x13)\n    x15 = compose(x14, vperiod)\n    x16 = sfilter(x9, x15)\n    x17 = rbind(greater, THREE)\n    x18 = compose(x17, vperiod)\n    x19 = sfilter(x16, x18)\n    x20 = rot90(x19)\n    x21 = initset(x20)\n    x22 = insert(x6, x21)\n    x23 = neighbors(ORIGIN)\n    x24 = mapply(neighbors, x23)\n    x25 = insert(x7, x24)\n    x26 = sfilter(x22, x25)\n    x27 = combine(x19, x26)\n    x28 = rot270(x27)\n    x29 = mapply(x28, x6)\n    x30 = shape(x29)\n    x31 = canvas(x6, x30)\n    x32 = initset(x30)\n    x33 = insert(x32, x31)\n    x34 = corners(x33)\n    x35 = combine(x32, x34)\n    x36 = recolor(x6, x35)\n    x37 = fill(x31, x6, x36)\n    O = paint(x37, x34)\n    return O"], [1.1, "def solve_3af16e7c(I):\n    \"\"\"\n    Example input:\n    5555555555555555\n    5888555555555555\n    5858555555522255\n    5888555555525255\n    5555555555522255\n    5555555555555555\n    5555333555555555\n    5555353555555555\n    5555333577775577\n    5555555575555555\n    5555555555111555\n    5555555575151555\n    5555555575111555\n    5666555575555555\n    5656555575555555\n    5666555555555555\n    5555555575555555\n    Example output:\n    111\n    151\n    111\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = objects(x16, T, F, T)\n    x18 = apply(ulcorner, x17)\n    x19 = normalize(x18)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x18)\n    x22 = paint(x16, x21)\n    x23 = astuple(x6, x19)\n    x24 = astuple(x22, x23)\n    x25 = double(x24)\n    x26 = astuple(x25, x mostcolor)\n    x27 = canvas(x9, x26)\n    x28 = astuple(x23, x22)\n    x29 = canvas(x9, x28)\n    x30 = mapply(x12, x29)\n    x31 = paint(x27, x30)\n    x32 = merge(x1)\n    x33 = cover(x21, x32)\n    O = paint(x31, x33)\n    return O"], [1.1, "def solve_97adc3ed(I):\n    \"\"\"\n    Example input:\n    555555555555555555\n    551115555555555555\n    551515555555555555\n    551115555555555555\n    555555533355555555\n    555555535355555555\n    555555533355552225\n    577757775555552525\n    575555575555552225\n    575444575555555555\n    555454555555555555\n    575444575555555555\n    575555555555555555\n    575555555555555555\n    575555575558885555\n    555555575558585555\n    575555575558885555\n    Example output:\n    444\n    454\n    444\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = x10(I)\n    x15 =355(x14)\n    x16 = subgrid(x15, I)\n    x17 = objects(x16, T, F, T)\n    x18 = rbind(subgrid, x16)\n    x19 = apply(x18, x17)\n    x20 = vmirror(x19)\n    x21 = papply(equality, x19, x20)\n    x22 = pair(x19, x21)\n    x23 = mapply(hmirror, x22)\n    x24 = papply(vmirror, x22)\n    x25 = width(x16)\n    x26 = papply(vfrontier, x25)\n    x27 = pair(x26, x26)\n    x28 = mapply(vfrontier, x27)\n    x29 = combine(x23, x28)\n    x30 = cover(x16, x29)\n    O = fill(x30, x6, x29)\n    return O"]], "2037f2c7": [[0.5083086331274738, "def solve_dd820a45(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5083086331274738, "def solve_5ed4aaa6(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ONE)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = sfilter(x3, x4)\n    x6 = size(x5)\n    x7 = subtract(FIVE, x6)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = canvas(x11, x10)\n    O = hconcat(x9, x12)\n    return O"], [0.5124660219282645, "def solve_285c03fe(I):\n    x1 = rot270(I)\n    x2 = objects(x1, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = argmin(x2, size)\n    x5 = color(x4)\n    x6 = canvas(x5, THREE_BY_THREE)\n    x7 = normalize(x3)\n    x8 = paint(x6, x7)\n    O = rot90(x8)\n    return O"], [0.562653757943613, "def solve_2c29ddeb(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.5696230758236387, "def solve_4281f362(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5951113969229912, "def solve_32bfef83(I):\n    x1 = objects(I, T, T, T)\n    x2 = first(x1)\n    x3 = subgrid(x2, I)\n    O = hconcat(x3, x3)\n    return O"], [0.7702994509699451, "def solve_15b068a2(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5,I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.8151970280461364, "def solve_53f3b1ab(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork(add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, EIGHT, x29)\n    return O"], [0.8617758284953654, "def solve_4f6ab67b(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.8631105583205274, "def solve_234d2fc6(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8631105583205274, "def solve_1c4c008f(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = apply(ulcorner, x3)\n    x6 = lbind(shift, x4)\n    x7 = mapply(x6, x5)\n    x8 = paint(I, x7)\n    O = cover(x8, x2)\n    return O"], [0.8632787798855505, "def solve_a5a1e741(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, T, T)\n    x3 = first(x2)\n    x4 = mostcolor(x3)\n    x5 = toivec(NEG_TWO)\n    x6 = interval(ZERO, NEG_ONE, ONE)\n    x7 = product(x6, x6)\n    x8 = rbind(multiply, THREE)\n    x9 = apply(x8, x7)\n    x10 = matcher(first, x4)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = rbind(toobject, I)\n    x14 = lbind(shift, x3)\n    x15 = chain(x12, x13, x14)\n    x16 = compose(color, x15)\n    x17 = lbind(mapply, neighbors)\n    x18 = compose(x17, toindices)\n    x19 = fork(difference, x18, toindices)\n    x20 = compose(x18, x19)\n    x21 = mapply(x20, x9)\n    x22 = paint(I, x21)\n    O = rot90(x22)\n    return O"], [0.8638763240862932, "def solve_f823daf4(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, FOUR)\n    x3 = compose(backdrop, inbox)\n    x4 = argmin(x2, size)\n    x5 = argmax(x2, size)\n    x6 = x3(x4)\n    x7 = x3(x5)\n    x8 = fill(I, ONE, x6)\n    O = fill(x8, TWO, x7)\n    return O"], [0.863900032004738, "def solve_6e7d5291(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = center(x2)\n    x4 = dneighbors(x3)\n    x5 = insert(x3, x4)\n    O = fill(I, THREE, x5)\n    return O"], [0.8639438916538609, "def solve_661c1fca(I):\n    x1 = objects(I, F, F, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8640364842464535, "def solve_7a5a441d(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = uppermost(x2)\n    x7 = rbind(greater, x6)\n    x8 = compose(x7, uppermost)\n    x9 = rbind(vmatching, x2)\n    x10 = fork(both, x9, x8)\n    x11 = sfilter(x3, x10)\n    x12 = increment(x6)\n    x13 = rbind(greater, x12)\n    x14 = compose(x13, first)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x15, vfrontier, center)\n    x17 = mapply(x16, x11)\n    O = underfill(I, x5, x17)\n    return O"], [0.8642201225067311, "def solve_726290fc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [0.8643350082204696, "def solve_762cff36(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = color(x4)\n    x6 = lbind(position, x4)\n    x7 = fork(shoot, center, x6)\n    x8 = mapply(x7, x2)\n    O = fill(I, x5, x8)\n    return O"], [0.895840777338116, "def solve_2e1555f0(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_9f758491(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = compose(last, center)\n    x4 = order(x2, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, last)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_546eca56(I):\n    x1 = objects(I, T, F, T)\n    x2 = size(x1)\n    x3 = argmax(x1, size)\n    x4 = interval(ONE, x2, ONE)\n    x5 = apply(double, x4)\n    x6 = apply(decrement, x5)\n    x7 = papply(astuple, x6, x3)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, EIGHT, x9)\n    x11 = lbind(shift, x3)\n    x12 = apply(x11, x10)\n    x13 = mapply(x12, x3)\n    O = paint(x10, x13)\n    return O"], [1.0, "def solve_b78f4e8b(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_4f865f8d(I):\n    x1 = objects(I, T, T, T)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_be984d92(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = lbind(rbind, manhattan)\n    x5 = lbind(argmax, x3)\n    x6 = chain(x5, x4, x4)\n    x7 = compose(color, x6)\n    x8 = fork(recolor, x7, identity)\n    x9 = mapply(x8, x3)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_8835177f(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = rbind(contained, x2)\n    x4 = normalize(x2)\n    x5 = apply(x3, x4)\n    x6 = merge(x5)\n    x7 = width(x6)\n    x8 = rbind(repeat, x7)\n    x9 = ZERO(x2)\n    x10 = rbind(matcher, x9)\n    x11 = normalize(x6)\n    x12 = chain(x10, x11, initset)\n    x13 = upscale(x6, x12)\n    x14 = branch(x8, x13, x3)\n    x15 = shape(x6)\n    x16 = subtract(x15, x16)\n    x17 = normalize(x6)\n    x18 = mostcolor(I)\n    x19 = canvas(x18, x19)\n    x20 = paint(x19, x17)\n    x21 = objects(x20, F, T, T)\n    x22 = interval(ONE, x16, ONE)\n    x23 = difference(x22, x21)\n    x24 = apply(toivec, x23)\n    x25 = lbind(shift, x20)\n    x26 = mapply(x25, x24)\n    x27 = paint(x20, x26)\n    x28 = interval(ONE, x16, ONE)\n    x29 = paint(x27, x28)\n    x30 = tojvec(x29)\n    x31 = index(x27, x30)\n    x32 = equality(x31, x31)\n    x33 = flip(x32)\n    x34 = asindices(x27)\n    x35 = ofcolor(x27, x62)\n    x36 = intersection(x34, x35)\n    O = fill(x27, EIGHT, x36)\n    return O"], [1.0, "def solve_1c58e3da(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_77f80827(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = normalize(x8)\n    x11 = apply(first, x10)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = canvas(x8, UNITY)\n    x15 = fill(x14, x4, x13)\n    x16 = ofcolor(x15, x4)\n    x17 = ulcorner(x16)\n    x18 = shoot(x17, UNITY)\n    O = underfill(x15, EIGHT, x18)\n    return O"], [1.0, "def solve_6b4845f0(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = argmax(x4, width)\n    x6 = hsplit(x5, TWO)\n    x7 = merge(x6)\n    x8 = paint(x7, x7)\n    x9 = fill(x8, x3, x7)\n    O = fill(x9, ZERO, x2)\n    return O"], [1.0, "def solve_d59108ef(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(remove, last)\n    x4 = last(x2)\n    x5 = remove(x4, x2)\n    x6 = greater(x5, ONE)\n    x7 = branch(x6, ulcorner, lrcorner)\n    x8 = branch(x6, llcorner, urcorner)\n    x9 = branch(x6, ulcorner, llcorner)\n    x10 = branch(x6, urcorner, UP_RIGHT)\n    x11 = branch(x6, llcorner, linear_x11)\n    x12 = branch(x6, x7, x8)\n    x13 = branch(x6, x10, x12)\n    x14 = branch(x6, x9, x8)\n    x15 = connect(x13, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x16, center)\n    x18 = mapply(x17, x15)\n    O = underfill(I, EIGHT, x18)\n    return O"], [1.0, "def solve_fbba76bf(I):\n    x1 =compose(enumighalf)\n    x2 = fgpartition(I)\n    x3 = order(x2, x1)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = compose(last, last)\n    x7 = rbind(argmin, x6)\n    x8 = compose(first, x7)\n    x9 = extract(x5, x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = x10(x4)\n    x13 = x10(x4)\n    x14 = fill(I, NEG_ONE, x12)\n    x15 = fill(x14, THREE, x13)\n    x16 = fill(x15, FOUR, x14)\n    x17 = fill(x16, EIGHT, x12)\n    x18 = fill(x17, FOUR, x14)\n    x19 = fill(x18, THREE, x16)\n    x20 = fill(x19, SIX, x13)\n    x21 = fill(x20, EIGHT, x12)\n    x22 = fill(x21, FOUR, x14)\n    x23 = fill(x22, THREE, x16)\n    x24 = fill(x23, TWO, x14)\n    x25 = fill(x24, THREE, x13)\n    x26 = fill(x25, FOUR, x14)\n    O = fill(x26, EIGHT, x12)\n    return O"], [1.0, "def solve_a4f003a9(I):\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, TWO)\n    x3 = replace(I, EIGHT, FOUR)\n    x4 = colorfilter(x2, EIGHT)\n    x5 = argmin(x4, size)\n    x6 = apply(color, x4)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, color)\n    x9 = sfilter(x4, x8)\n    x10 = increment(x9)\n    x11 = add(x8, x10)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x5)\n    x14 = combine(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = astuple(x15, x14)\n    x17 = normalize(x16)\n    x18 = paint(x3, x17)\n    x19 = height(x15)\n    x20 = width(x15)\n    x21 = astuple(x19, x20)\n    x22 = crop(x18, ORIGIN, x21)\n    x23 = ofcolor(x22, FIVE)\n    x24 = dmirror(x23)\n    x25 = normalize(x24)\n    x26 = width(x25)\n    x27 = astuple(x26, x25)\n    x28 = connect(x22, x27)\n    x29 = fill(x18, ZERO, x28)\n    x30 = upscale(x29, x12)\n    x31 = ofcolor(x30, FIVE)\n    x32 = vmirror(x31)\n    x33 = ofcolor(x32, ZERO)\n    x34 = astuple(x33, x25)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x35, FIVE)\n    x37 = mapply(neighbors, x36)\n    x38 = difference(x37, x35)\n    O = fill(x179, ONE, x38)\n    return O"], [1.0, "def solve_83a3bd39(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(outbox, x1)\n    x3 = fill(I, THREE, x2)\n    x4 = objects(x3, T, F, T)\n    x5 = fork(connect, ulcorner, lrcorner)\n    x6 = fork(equality, toindices, x5)\n    x7 = sfilter(x4, x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, hmirror)\n    x11 = x10(x7)\n    x12 = objects(x11, T, F, T)\n    x13 = compose(flip, x6)\n    x14 = sfilter(x12, x13)\n    x15 = totuple(x14)\n    x16 = apply(color, x15)\n    x17 = last(x16)\n    x18 = objects(x11, T, F, F)\n    x19 = sizefilter(x18, x17)\n    x20 = combine(x16, x19)\n    x21 = lbind(colorcount, x20)\n    x22 = chain(mostcommon, x21, color)\n    x23 = fork(subtract, identity, x22)\n    x24 = chain(invert, ulcorner, x23)\n    x25 = fork(shift, identity, x24)\n    x26 = compose(x21, x25)\n    x27 = fork(subtract, identity, x26)\n    x28 = ofcolor(x11, x17)\n    x29 = rbind(subtract, x13)\n    x30 = rbind(argmax, x27)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x28)\n    O = fill(x3, x17, x33)\n    return O"], [1.0, "def solve_fc4135a3(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(contained, F)\n    x3 = compose(flip, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = lbind(apply, x4)\n    x6 = lbind(colorfilter, x1)\n    x7 = chain(x3, x5, x6)\n    x8 = rbind(greater, TWO)\n    x9 = compose(minimum, shape)\n    x10 = lbind(apply, x9)\n    x11 = chain(x8, minimum, x10)\n    x12 = lbind(colorfilter, x1)\n    x13 = compose(x11, x12)\n    x14 = fork(both, x7, x13)\n    x15 = palette(I)\n    x16 = extract(x15, x14)\n    x17 = palette(I)\n    x18 = remove(x16, x17)\n    x19 = lbind(colorcount, I)\n    x20 = argmin(x18, x19)\n    x21 = rbind(colorcount, x20)\n    x22 = rbind(toobject, I)\n    x23 = chain(x21, x22, backdrop)\n    x24 = colorfilter(x1, x16)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, I)\n    O = replace(x26, x16, x20)\n    return O"], [1.0, "def solve_4fe9d19a(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = color(x16)\n    x18 = mapply(dneighbors, x15)\n    x19 = apply(lrcorner, x18)\n    x20 = insert(x19, x15)\n    x21 = insert(x16, x20)\n    x22 = cover(x1, x21)\n    x23 = difference(x18, x21)\n    x24 = toobject(x23, x22)\n    x25 = color(x24)\n    x26 = unconditionalle(x25)\n    x27 = shift(x24, x26)\n    x28 = mapply(x12, x27)\n    O = paint(x22, x28)\n    return O"], [1.0, "def solve_04a0329e(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = lbind(power, maximum)\n    x5 = lbind(subtract, DOWN)\n    x6 = chain(x4, x5, width)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x1)\n    O = paint(x3, x8)\n    return O"], [1.0, "def solve_91b063bb(I):\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = fork(equality, height, width)\n    x4 = extract(x2, x3)\n    x5 = other(x2, x4)\n    x6 = color(x5)\n    x7 = rbind(greater, THREE)\n    x8 = rbind(toobject, I)\n    x9 = rbind(colorcount, x6)\n    x10 = chain(x8, ineighbors, last)\n    x11 = chain(x7, x9, x10)\n    x12 = sfilter(x5, x11)\n    x13 = outbox(x12)\n    x14 = backdrop(x13)\n    x15 = cover(I, x5)\n    x16 = gravitate(x14, x4)\n    x17 = shift(x14, x16)\n    O = fill(x15, x6, x17)\n    return O"], [1.0, "def solve_c568e9c1(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [1.0, "def solve_5b6a8c95(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(bordering, x1)\n    x3 = leastcolor(I)\n    x4 = objects(I, T, F, F)\n    x5 = merge(x4)\n    x6 =ad(x2, x5)\n    x7 = compose(even, x6)\n    x8 = sfilter(x3, x7)\n    x9 = fill(I, x3, x8)\n    x10 = ofcolor(x9, x4)\n    x11 = leastcolor(x10)\n    x12 = ofcolor(x10, x11)\n    x13 = fill(x9, x11, x12)\n    x14 = mapply(toindices, x1)\n    x15 = mapply(toindices, x10)\n    x16 = Iconcat(x13, x14)\n    x17 = mapply(x16, x15)\n    x18 = fill(x9, x11, x17)\n    O = fill(x18, x10, x6)\n    return O"], [1.0, "def solve_16578b28(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = normalize(x2)\n    x5 = compose(last, last)\n    x6 = rbind(argmin, x5)\n    x7 = compose(first, x6)\n    x8 = fork(other, palette, x7)\n    x9 = x7(x4)\n    x10 = matcher(first, x9)\n    x11 = sfilter(x4, x10)\n    x12 = difference(x4, x11)\n    x13 = compose(toivec, uppermost)\n    x14 = lbind(shift, x11)\n    x15 = lbind(shift, x12)\n    x16 = compose(x14, x13)\n    x17 = compose(x15, x13)\n    x18 = fork(recolor, x7, x16)\n    x19 = fork(recolor, x8, x17)\n    x20 = fork(combine, x18, x19)\n    x21 = mapply(x20, x3)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_17b43535(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = objects(I, T, F, T)\n    x7 = compose(increment, width)\n    x8 = fork(greater, x7, identity)\n    x9 = compose(x8, last)\n    x10 = mfilter(x6, x9)\n    x11 = paint(I, x10)\n    x12 = replace(x11, ONE, SIX)\n    O = replace(x12, EIGHT, SEVEN)\n    return O"], [1.0, "def solve_76023bfa(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = fgpartition(I)\n    x5 = merge(x4)\n    x6 = color(x3)\n    x7 = palette(x5)\n    x8 = difference(x5, x7)\n    x9 = power(outbox, TWO)\n    x10 = x9(x4)\n    x11 = power(outbox, TWO)\n    x12 = x11(x10)\n    x13 = x11(x9)\n    x14 = fork(connect, x12, x13)\n    x15 = x14(x11)\n    x16 = x14(x10)\n    x17 = fork(both, x14, x16)\n    x18 = leastcolor(I)\n    x19 = palette(I)\n    x20 = remove(x18, x19)\n    x21 = other(x20, x7)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x22, x18)\n    x24 = rbind(manhattan, x15)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(I, x18)\n    x28 = colorfilter(x27, x25)\n    x29 = rbind(manhattan, x15)\n    x30 = argmin(x28, x29)\n    x31 = rbind(sizefilter, x515)\n    x32 = other(x31, x30)\n    x33 = equality(x32, x31)\n    x34 = mfilter(x34, x33)\n    x35 = fill(I, x21, x32)\n    O = fill(x35, x22, x34)\n    return O"], [1.0, "def solve_a831e9d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(normalize, x1)\n    x3 = astuple(NINE, NINE)\n    x4 = canvas(ZERO, x3)\n    x5 = ulcorner(x2)\n    x6 = lbind(subtract, x5)\n    x7 = rbind(multiply, x4)\n    x8 = apply(x7, x2)\n    x9 = astuple(NEG_ONE, NEG_UNITY)\n    x10 = combine(x8, x9)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x6)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_8e5d3d6f(I):\n    x1 = rot90(I)\n    x2 = astuple(x1, ONE)\n    x3 = canvas(ZERO, x2)\n    x4 = rot180(I)\n    x5 = astuple(x4, ONE)\n    x6 = canvas(ZERO, x5)\n    x7 = hconcat(x3, x6)\n    x8 = upscale(x7, TWO)\n    x9 = objects(x8, T, F, T)\n    x10 = colorfilter(x9, TWO)\n    x11 = size(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = product(x12, x12)\n    x14 = rbind(ac0, I)\n    x15 = apply(x14, x13)\n    x16 = rbind(b548, I)\n    x17 = mapply(x16, x15)\n    O = rot180(x17)\n    return O"], [1.0, "def solve_e86f91f2(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, F)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = lbind(lbind, shift)\n    x21 = chain(x19, x20, toindices)\n    x22 = fork(shift, identity, x21)\n    x23 = toindices(x5)\n    x24 = apply(x22, x23)\n    x25 = lbind(lbind, contained)\n    x26 = lbind(shift, x5)\n    x27 = chain(x25, x26, x24)\n    x28 = fork(difference, x27,314)\n    x29 = fork(astuple, x27, x28)\n    x30 = apply(x29, x24)\n    x31 = fork(connect, x29, x30)\n    x32 = mapply(x31, x16)\n    O = fill(x14, x6, x32)\n    return O"], [1.0, "def solve_10e5c1ca(I):\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(x2, vmirror, hmirror)\n    x7 = x6(x5)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    O = fill(x5, x1, x9)\n    return O"], [1.1, "def solve_b2ffa5bc(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(first, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x79, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork("], [1.1, "def solve_9d740880(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_ad797d4f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sizefilter(x2, ONE)\n    x4 = merge(x3)\n    x5 = fill(I, EIGHT, x4)\n    x6 = difference(x1, x3)\n    x7 = compose(size, first)\n    x8 = argmax(x6, x7)\n    x9 = first(x8)\n    x10 = last(x8)\n    x11 = center(x9)\n    x12 = connect(ORIGIN, DOWN)\n    x13 = height(x9)\n    x14 = equality(x13, x12)\n    x15 = branch(x14, vsplit, hsplit)\n    x16 = x15(I, TWO)\n    x17 = first(x16)\n    x18 = last(x16)\n    x19 = palette(x17)\n    x20 = lbind(colorcount, x17)\n    x21 = argmin(x19, x20)\n    x22 = other(x21, x19)\n    x23 = colorfilter(x1, x22)\n    x24 = apply(uppermost, x23)\n    x25 = size(x24)\n    x26 = apply(lowermost, x23)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = maximum(x28)\n    x30 = increment(x29)\n    x31 = interval(ZERO, x30, ONE)\n    x32 = pair(x31, x22)\n    x33 = lbind(apply, vupscale)\n    x34 = rbind(ofcolor, x22)\n    x35 = chain(x33, x34, decrement)\n    x36 = matcher(x35, x22)\n    x37 = sfilter(x32, x36)\n    x38 = lbind(shift, x17)\n    x39 = shape(x38)\n    x40 = crop(x39, x39, x ofcolor)\n    x41 = m"], [1.1, "def solve_9e5ed309(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x23)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_51d01a9f(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(increment, last, first)\n    x7 = compose(greater, x6)\n    x8 = fork(vmatching, x2, x7)\n    x9 = sfilter(x3, x8)\n    x10 = center(x9)\n    x11 = matcher(first, x10)\n    x12 = sfilter(x9, x11)\n    x13 = objects(x5, T, F, T)\n    x14 = color(x12)\n    x15 = center(x12)\n    x16 = matcher(first, x15)\n    x17 = sfilter(x13, x16)\n    x18 = center(x17)\n    x19 = matcher(first, x18)\n    x20 = sfilter(x13, x19)\n    x21 = center(x20)\n    x22 = matcher(first, x21)\n    x23 = sfilter(x13, x22)\n    x24 = center(x23)\n    x25 = subtract(x24, x21)\n    x26 = add(x25, x20)\n    x27 = crop(x5, x6, x26)\n    x28 = ofcolor(x27, x4)\n    x29 =invert(x28)\n    x30 = shift(x28, x29)\n    x31 = asobject(x30)\n    x32 = prapply(shift, x31)\n    x33 = mapply(dneighbors, x32)\n    x34 = sfilter(x33, last)\n    x35 = toindices(x34)\n    x36 = matcher(first, x1)\n    x37 = sfilter(x35, x36)\n    x38 = center(x37)\n    x39 = matcher(first, x18)\n    x40 = sfilter(x35, x39"], [1.1, "def solve_c60d1775(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = matcher(size, x2)\n    x4 = fork(equality, toindices, backdrop)\n    x5 = compose(x3, x4)\n    x6 = color(x2)\n    x7 = palette(I)\n    x8 = extract(x7, x5)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x9, x6)\n    x11 = remove(x10, x1)\n    x12 = lbind(ofcolor, I)\n    x13 = first(x11)\n    x14 = lbind(prapply, connect)\n    x15 = fork(x14, x13, x12)\n    x16 = compose(x15, initset)\n    x17 =77(x9)\n    x18 = fork(difference, x16, x12)\n    x19 = matcher(x18, ZERO)\n    x20 = fork(both, x19, x17)\n    x21 = extract(x19, x20)\n    x22 = fork(connect, ulcorner, lrcorner)\n    x23 = fork(toobject, x22, identity)\n    x24 = size(x1)\n    x25 = positive(x24)\n    x26 = size(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = pair(x27, x27)\n    x29 = lbind(fork, both)\n    x30 = astuple(x25, x29)\n    x31 = hsplit(I, x30)\n    x32 =279(x31)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = flip(x33)\n    x36 = multiply(x34, x31)\n    x37 = shift(x9, x36)\n    x38 = paint(I, x37)\n    x39 = ofcolor(x33, x10)\n    x40 = rbind(shoot, x10)\n    x41 ="], [1.1, "def solve_65733992(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = apply(toindices, x1)\n    x3 = fork(either, vline, hline)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(x4, center)\n    x6 = rbind(difference, x1)\n    x7 = compose(x6, mostcolor)\n    x8 = fork(matcher, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(initset, x10, x8)\n    x12 = fork(rapply, x11, identity)\n    x13 = compose(x12, initset)\n    x14 = extract(x2, x13)\n    x15 = rightmost(x14)\n    x16 = rightmost(x14)\n    x17 = equality(x15, x16)\n    x18 = leftmost(x14)\n    x19 = leftmost(x14)\n    x20 = equality(x18, x19)\n    x21 = branch(x17, x20, x14)\n    x22 = branch(x18, x20, x21)\n    x23 =476(x22, UP)\n    x24 = hupscale(x23, TWO)\n    x25 = branch(x17, x23, x24)\n    x26 = branch(x18, x23, x25)\n    x27 = x26(x26)\n    x28 = canvas(ZERO, THREE_BY_THREE)\n    x29 = asindices(x28)\n    x30 = corners(x29)\n    x31 = combine(x30, x30)\n    x32 = mapply(x22, x31)\n    x33 = fill(x28, ONE, x32)\n    x34 = intersection(x31, x33)\n    x35 = fill(x33, TWO, x34)\n    x36 = fgpartition(x35)\n    x37 = merge(x36)\n    x38 =shift(x37, UN"], [1.1, "def solve_b98588f2(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = repeat(identity, ONE)\n    x7 = astuple(cmirror, dmirror)\n    x8 = astuple(vmirror, hmirror)\n    x9 = combine(x7, x8)\n    x10 = combine(x6, x9)\n    x11 = fork(compose, first, last)\n    x12 = product(x10, x10)\n    x13 = apply(x11, x12)\n    x14 = rbind(contained, x5)\n    x15 = compose(x14, first)\n    x16 = rbind(sfilter, x15)\n    x17 = lbind(chain, ulcorner)\n    x18 = lbind(x17, x16)\n    x19 = lbind(fork, shift)\n    x20 = lbind(lbind, shift)\n    x21 = lbind(occurrences, I)\n    x22 = rbind(rapply, x2)\n    x23 = chain(x20, x22, initset)\n    x24 = lbind(compose, invert)\n    x25 = compose(x24, x18)\n    x26 = lbind(compose, x16)\n    x27 = fork(x19, x26, x25)\n    x28 = compose(x23, x27)\n    x29 = rbind(rapply, x2)\n    x30 = chain(first, x29, initset)\n    x31 = rbind(rapply, x2)\n    x32 = compose(initset, x18)\n    x33 = chain(first, x31, x32)\n    x34 = compose(invert, x33)\n    x35 = fork(shift, x30, x34)\n    x36 = compose(x20, x35)\n    x37 = compose(x21, x28)\n    x38 = fork"], [1.1, "def solve_a1369e16(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmax(x8, x9)\n    x11 = remove(x10, x8)\n    x12 = lbind(ofcolor, I)\n    x13 = mapply(x12, x11)\n    x14 = subgrid(x13, I)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x6)\n    x17 = initset(x10)\n    x18 = insert(x6, x17)\n    x19 = lbind(intersection, x18)\n    x20 = chain(positive, size, x19)\n    x21 = chain(positive, decrement, size)\n    x22 = fork(either, x20, x21)\n    x23 = rbind(toobject, x14)\n    x24 = compose(corners, outbox)\n    x25 = chain(palette, x23, x24)\n    x26 = rbind(branch, x6)\n    x27 = chain(flip, x22, x25)\n    x28 = compose(first, x25)\n    x29 = fork(x26, x27, x28)\n    x30 = apply(uppermost, x16)\n    x31 = order(x30, identity)\n    x32 = lbind(apply, x29)\n    x33 = rbind(order, leftmost)\n    x34 = lbind(sfilter, x16)\n    x35 = lbind(matcher, uppermost)\n    x36 = compose(x34, x35)\n    x37 = chain(x32, x33, x36)\n    O = apply(x37"], [1.1, "def solve_19373f2b(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fgpartition(I)\n    x3 = compose(hfrontier, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = add(x6, DOWN)\n    x8 = shoot(x7, UP_RIGHT)\n    x9 = power(x7, LEFT)\n    x10 = shoot(x9, DOWN)\n    x11 = combine(x8, x10)\n    x12 = combine(x3, x11)\n    x13 = hfrontier(x12)\n    x14 = mapply(x4, x13)\n    x15 = underpaint(x6, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = apply(urcorner, x16)\n    x18 = shift(x17, UNITY)\n    x19 = paint(x15, x18)\n    x20 = toindices(x18)\n    x21 = remove(x20, x20)\n    x22 = lbind(equality, x20)\n    x23 = argmin(x21, x22)\n    x24 =, x23(UNITY)\n    x25 = color(x23)\n    x26 = ofcolor(x19, x25)\n    x27 = ofcolor(x19, x22)\n    x28 = combine(x26, x27)\n    x29 = fill(x19, NEG_ONE, x28)\n    x30 = ofcolor(x29, x25)\n    x31 = ofcolor(x29, x22)\n    x32 = recolor(x25, x31)\n    x33 = recolor(x22, x32)\n    x34 = height(x30)\n    x35 = width(x30)\n    x36 = height(x28)\n    x37 = interval(x34, x35, x36)\n    x38 = lbind(shift, x30)\n    x39 = rbind(multip"], [1.1, "def solve_b054ef96(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_375105b8(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0a4ed778(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_8465057e(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = subgrid(x29, x13)\n    x31 = leftmost(x30)\n    x32 = decrement(x31)\n    x33 =\n    \"\"\"\n    x1 = shift(x16, x32)\n    x2 = objects(x30, T, F, F)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = x11(x5)\n    x7 = manhattan(x6, x5)\n    x8 = shoot(x4, x7)\n    x9 = mapply(x8, x8)\n    x10 = fill(x6,"], [1.1, "def solve_7a6b3ebe(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_68aa1c4a(I):\n    \"\"\"\n    Example input:\n    0000000000000044400000000\n    0000000000003346433000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000000000003246423000000\n    0000044400003246423000000\n    0003346433003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003246423000000\n    0003246423003346433000000\n    0000246420000044400000000\n    0000046400000000000000000\n    0000246420000000000000000\n    0003246423000000000000000\n    0003346433000000000000000\n    0000044400000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    8000008\n    8800088\n    8000008\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = objects(x6, T, F, F)\n    x16 = lbind(argmin, x15)\n    x17 = lbind(rbind, manhattan)\n    x18 = compose(x16, x17)\n    x19 = fork(recolor, color, x18)\n    x20 = mapply(x19, x19)\n    x21 = paint(x6, x20)\n    x22 = incremental HDcenter(x2)\n    x23 = astuple(x22, x3)\n    x24 = initset(x23)\n    x25 = insert(x13, x24)\n    x26 = insert(x19, x25)\n    x27 = width(x6)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(tojvec, x28)\n    x30 = lbind(shift, x6)\n    x31 = mapply(x30, x29)\n    x32 = paint(x21, x31)\n    x33 = rot90(x32)\n    x34 = lbind(shift, x6)\n    x35 = mapply(x34, x33)\n    x36 = shift(x23, x1)\n    x37 = combine(x33, x36)\n    x38 = apply(mostcommon, x37)\n    x39 =sfilter(x38, x30)\n    x40 = ofcolor(x, FIVE)\n    x41"], [1.1, "def solve_84f6aea3(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = center(x5)\n    x7 = difference(x1, x5)\n    x8 = center(x7)\n    x9 = color(x10)\n    x10 = fill(I, x9, x7)\n    x11 = objects(x10, T, F, T)\n    x12 = merge(x11)\n    x13 = center(x12)\n    x14 = subtract(x13, x6)\n    x15 = shift(x12, x14)\n    x16 = paint(x10, x15)\n    x17 = objects(x16, T, F, T)\n    x18 = rbind(adjacent, x17)\n    x19 = rbind(adjacent, x18)\n    x20 = sfilter(x17, x19)\n    x21 =222(x20, x16)\n    x22 =002(x21, x5)\n    x23 =002(x21, x8)\n    x24 = fork(both, x22, x23)\n    x25 = mfilter(x18, x24)\n    O = paint(x17, x25)\n    return O"], [1.1, "def solve_ee6b511e(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000\n    0000000000000000000000\n    0000000000000000000000\n    0003333330000000000000\n    0004444440000000000000\n    0000333300000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0002377320000000000000\n    0000377300000000000000\n    0000333300000000000000\n    0000000000000000000000\n    0000000000000033333300\n    0000000000000044444400\n    0000000000000003333000\n    0000000000000023773200\n    0000000000000023773200\n    0000000000000000070000\n    0000000000000003073000\n    0000000000000003333000\n    0000000000000000000000\n    0000000000000000000000\n    Example output:\n    888088\n    008000\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = box(x2)\n    x4 = intersection(x3, x2)\n    x5 = uppermost(x2)\n    x6 = inbox(x2)\n    x7 = center(x6)\n    x8 = initset(x7)\n    x9 = lbind(insert, x8)\n    x10 = lbind(related toobject, I)\n    x11 = compose(x9, x10)\n    x12 = lbind(apply, numcolors)\n    x13 = chain(x12, toindices, x11)\n    x14 = lbind( matcher, first)\n    x15 = compose(x14, x13)\n    x16 = fork(sfilter, identity, x15)\n    x17 = fork(sfilter, identity, x16)\n    x18 = lbind(fork, both)\n    x19 = lbind(x18, greater)\n    x20 = lbind(rbind, astuple)\n    x21 = lbind(compose, x19)\n    x22 = compose(x21, x17)\n    x23 = lbind(rbind, sfilter)\n    x24 = compose(x23, x17)\n    x25 = fork(compose, x22, x24)\n    x26 = lbind(compose, x5)\n    x27 = compose(x26, x177)\n    x28 = fork(sfilter, identity, x27)\n    x29 = chain(x20, x28, x223)\n    x30 = fork(combine, x28, x29)\n    x31 = compose(x30, x15)\n    x32 = fork(recolor, x21, x31)\n    x33 = mapply(x32, x4)\n    O = paint(I, x33)\n    return O"], [1.1, "def solve_7201ade2(I):\n    \"\"\"\n    Example input:\n    0000000000000000000000000\n    0000000000000000000000000\n    0000044440000000000000000\n    0001146641100000000000000\n    0003333333300000000000000\n    0001346643100000000000000\n    0001046640000000000000000\n    0000000600000000000000000\n    0001306643000000000000000\n    0001146641000000044440000\n    0002447744200001146641100\n    0002447744200003333333300\n    0002007700200001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001346643100\n    0000000000000001146641100\n    0000000000000002447744200\n    0000000000000002447744200\n    0000000000000002007700200\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    0000000000000000000000000\n    Example output:\n    08000088\n    88880888\n    00800008\n    00000008\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = objects(I, T, F, F)\n    x11 = lrcorner(x6)\n    x12 = lrcorner(x6)\n    x13 = connect(x11, x12)\n    x14 = combine(x10, x13)\n    x15 = toindices(x6)\n    x16 = inbox(x6)\n    x17 = intersection(x15, x16)\n    x18 = fork(subtract, first, last)\n    x19 = solve181\n    x20 = fork(multiply, sign, identity)\n    x21 = rbind(206, x6)\n    x22 = chain(x19, x21, palette)\n    x23 = fork(apply, x20, x22)\n    x24 = lbind(sfilter, x17)\n    x25 = rbind(compose, palette)\n    x26 = lbind(lbind, contained)\n    x27 = chain(x24, x25, x26)\n    x29 = rbind(sfilter, x17)\n    x30 = compose(x29, x27)\n    x31 = chain(min, x23, x30)\n    x32 = extract(x47, x31)\n    x33 =32(x32)\n    x34 = ofcolor(I, x33)\n    x35 = gravitate(x34, x32)\n    x36 = replace(I, x33, x5)\n    O = fill(x36, x33, x36)\n    return O"]]}