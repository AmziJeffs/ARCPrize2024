{"d56f2372": [[0.273995593168007, "def solve_6dbb6863(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.29037478188052895, "def solve_363c9896(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.29706172839506173, "def solve_d1f415d7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.32625362023912746, "def solve_fb3f508d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3346827117477524, "def solve_14424f72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_f1a4a8f3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_19e93b86(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_7d20db21(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_8dd9a0f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_7c5d5318(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_0f67723b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_1cd1c801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_df209154(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_0b4e2894(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_f8e3f5ed(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_1fadd532(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41617597321745253, "def solve_42e056ec(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.41699831998382725, "def solve_353e5a4b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.42558143469661397, "def solve_16678d0e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.42558143469661397, "def solve_960122e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.42558143469661397, "def solve_76830682(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.45081110243456496, "def solve_9f80af8e(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.47145600561542583, "def solve_881da893(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4744327528950218, "def solve_6dd03f15(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.4744327528950218, "def solve_3dc52985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.47887719733946615, "def solve_05a9b810(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.47968970642883685, "def solve_f24b9c81(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.4923226657936803, "def solve_7cf03094(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, T, F, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.49325354355789136, "def solve_b55feb1a(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.49704719435154215, "def solve_01d0ebb5(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_f5bd6aab(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_896bcc9d(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_5ad7f1a7(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_d67c7304(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_641f9ec3(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_7bd39526(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_2466f39e(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5056030890741036, "def solve_0744f58c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_12f80178(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_b3d39f30(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5130794983512649, "def solve_72cde99e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5307798906710026, "def solve_bc06d494(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_20bde5d9(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_5a85a4c0(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_724cfa4f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5450090089879535, "def solve_50ffae8b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x3, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x4, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.5494137973603254, "def solve_43b470fd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x3, x7)\n    return O"], [0.5585024261811583, "def solve_29be50d3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_d98a660c(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5630106282310804, "def solve_a9fc4fdd(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = ofcolor(x4, ZERO)\n    x6 = ofcolor(x2, ZERO)\n    x7 = intersection(x5, x6)\n    x8 = shape(x3)\n    x9 = canvas(ZERO, x8)\n    O = fill(x9, THREE, x7)\n    return O"], [0.5652441058672942, "def solve_fe53566c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5652441058672942, "def solve_bac9365e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5766800033031917, "def solve_ba210909(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.597602058740802, "def solve_b493dfd6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.5985774392006277, "def solve_63a25bc0(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.5985774392006277, "def solve_ef5bc955(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.6073074298499347, "def solve_239be59f(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6181018953185965, "def solve_d82ab65e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_8fc26d0f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_966c3959(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_90c82262(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6285917506761496, "def solve_cf5e8e00(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6291436647232063, "def solve_c63a5c72(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_7b4af5af(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_b3d4c9c9(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_7a3592b6(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_2a7f068d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_db2101a9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_88d26863(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_b555df2e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_e6613122(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_1910037e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_82a0b75d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_e35470f2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_a7d1865b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6307531254528715, "def solve_cec4d0e5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6307531254528715, "def solve_2f30089b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6411654239156103, "def solve_fb4099f9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.6416977053214553, "def solve_e3e4a528(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6572952903476961, "def solve_e7bb5665(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6602138625163511, "def solve_0832912d(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_0f590ebb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6602138625163511, "def solve_64681a5f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_e4d9aa9e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_4f220bec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = shape(x6)\n    x13 = canvas(x11, x12)\n    x14 = ofcolor(x6, x11)\n    x15 = ofcolor(x7, x11)\n    x16 = intersection(x14, x15)\n    O = fill(x13, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_14acc4b7(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6605108990960981, "def solve_e65f80d5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6914717472228128, "def solve_7ae35f95(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = dedupe(x3)\n    return O"], [0.6960644532404631, "def solve_6b2138cd(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.6978401405853463, "def solve_ba922e50(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.6987437235862725, "def solve_9459ea6c(I):\n    O = trim(I)\n    return O"], [0.7092132972493429, "def solve_a8fd49cd(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7092132972493429, "def solve_b63cb71d(I):\n    x1 = replace(I, NINE, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7209610573661548, "def solve_f52ac5ae(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7209610573661548, "def solve_45bb8e4e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7209610573661548, "def solve_a3173aad(I):\n    x1 = shape(I)\n    x2 = asindices(I)\n    x3 = objects(I, T, F, F)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, x1)\n    x8 = paint(x7, x4)\n    x9 = mostcolor(I)\n    x10 = color(x4)\n    x11 = astuple(x9, ORIGIN)\n    x12 = astuple(x10, RIGHT)\n    x13 = astuple(x9, ZERO_BY_TWO)\n    x14 = initset(x13)\n    x15 = insert(x12, x14)\n    x16 = insert(x11, x15)\n    x17 = dmirror(x16)\n    x18 = toindices(x16)\n    x19 = lbind(shift, x18)\n    x20 = occurrences(x8, x16)\n    x21 = mapply(x19, x20)\n    x22 = toindices(x17)\n    x23 = lbind(shift, x22)\n    x24 = occurrences(x8, x17)\n    x25 = mapply(x23, x24)\n    x26 = combine(x21, x25)\n    O = fill(x8, x9, x26)\n    return O"], [0.7209610573661548, "def solve_2319a64a(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7220296100651739, "def solve_9ea6fe03(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7238790406598726, "def solve_a126ec1f(I):\n    x1 = replace(I, EIGHT, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7265166129217103, "def solve_02ac69d9(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.728049799593843, "def solve_c42446ab(I):\n    O = replace(I, FOUR, ZERO)\n    return O"], [0.7314575112668639, "def solve_7d664772(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = sfilter(x13, x10)\n    x15 = size(x14)\n    x16 = greater(x12, x15)\n    x17 = branch(x16, hmirror, identity)\n    x18 = x17(x6)\n    x19 = partition(x18)\n    x20 = matcher(color, x8)\n    x21 = extract(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = argmin(x22, uppermost)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = color(x24)\n    x27 = fill(x18, TWO, x21)\n    x28 = fill(x27, ONE, x24)\n    x29 = fill(x28, ZERO, x23)\n    x30 = rbind(order, identity)\n    x31 = dmirror(x29)\n    x32 = apply(x30, x31)\n    x33 = dmirror(x32)\n    x34 = x17(x33)\n    x35 = x5(x34)\n    x36 = ofcolor(x35, TWO)\n    x37 = fill(x35, x8, x36)\n    x38 = ofcolor(x35, ONE)\n    x39 = fill(x37, x26, x38)\n    x40 = ofcolor(x35, ZERO)\n    O = fill(x39, x25, x40)\n    return O"], [0.7320721684772659, "def solve_bd425757(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.7331007965983799, "def solve_3049583f(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = asobject(I)\n    x6 = difference(x5, x4)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = paint(I, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = mapply(delta, x9)\n    O = fill(x8, ZERO, x10)\n    return O"], [0.7348261017318624, "def solve_b6a0d229(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.739396261410893, "def solve_2a75e1ef(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, TWO, x3)\n    return O"], [0.7404490111303094, "def solve_f012a851(I):\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = interval(x33, x29, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x22)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.7410390952301974, "def solve_fcb97da4(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_9fc7c0a8(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_d8208217(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_73f802f1(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_263a58cd(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_f73a17bb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410481494354517, "def solve_e848cd8e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7410481494354517, "def solve_161cf03a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7410481494354517, "def solve_540e1458(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7411341780448716, "def solve_a74bd57c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_1054c2f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_4b677b91(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_4d5fce32(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_b54fc6ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c972eccc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_357caa72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c2932f76(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7414654147115858, "def solve_88a16f69(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.7414654147115858, "def solve_fbaaf83e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7414654147115858, "def solve_4821dd5c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = subgrid(x3, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, x1, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, x1, x16)\n    return O"], [0.7414654147115858, "def solve_c75e5496(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.7414654147115858, "def solve_b6129454(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, last)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_e9562815(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_7b19ecb9(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.7414654147115858, "def solve_50b6b36c(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_850c53d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_1f170a64(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7414654147115858, "def solve_07ad5d03(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7414654147115858, "def solve_5155b3b6(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7415879821341823, "def solve_cdaf8146(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7415879821341823, "def solve_caacc226(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7419294883893283, "def solve_05dd9d12(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_f0ea4f02(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_47df6898(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_36d223d8(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_5f7a68b7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_19fd0a58(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_885ddf67(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_ea32005f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_c2281b96(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_90565e03(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_5f45f139(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_04574a5a(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_600e8b37(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_99d2a7b3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_5effc4d7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_c5488d26(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_3f266eba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_a01e786b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_194a097f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7424486197279571, "def solve_839f398e(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.7426428869018613, "def solve_477ff01d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = mapply(x24, x19)\n    O = paint(I, x25)\n    return O"], [0.7426909638249383, "def solve_f8867b30(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_75279b56(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_ed258f16(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_d29215b7(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_fa0bbc5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_eadf6f49(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7435915732269925, "def solve_397ed6e5(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.7435915732269925, "def solve_ee65841b(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.7448582669813657, "def solve_85e53d92(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7450712646640288, "def solve_ea53f5a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.746036831698095, "def solve_0a7bc089(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7461098366866447, "def solve_6fd190e8(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.7462669862994846, "def solve_37cf8237(I):\n    O = dmirror(I)\n    return O"], [0.7462669862994846, "def solve_cdf59cea(I):\n    O = dmirror(I)\n    return O"], [0.7464740545096182, "def solve_1700566c(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_3d77ebc9(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_058b3b0d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_6b61d368(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_15cee853(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_70089b3d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_817f4653(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_5089002f(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_2f02e199(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7471075059718015, "def solve_c465c00b(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7471075059718015, "def solve_05da2b43(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7471075059718015, "def solve_29340112(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7476233794761621, "def solve_e1c9bd3f(I):\n    O = rot180(I)\n    return O"], [0.7476233794761621, "def solve_11c3c0ac(I):\n    O = rot180(I)\n    return O"], [0.7476233794761621, "def solve_65506423(I):\n    O = rot180(I)\n    return O"], [0.7476233794761621, "def solve_dd30881e(I):\n    x1 = dmirror(I)\n    O = cmirror(x1)\n    return O"], [0.7477763311629623, "def solve_bc81486c(I):\n    x1 = replace(I, ZERO, ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480057468975833, "def solve_6c0c3a38(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7481170341881848, "def solve_4ac730df(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_f1c132e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_4074f730(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_576710ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_50ad09e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_11d0edd1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_3673afd6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7482565735643151, "def solve_6e0e6ffd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_2f2fcf1a(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_6f1b2970(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_86ed03ba(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_6f0730c0(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7485427567125599, "def solve_d6959afb(I):\n    O = vmirror(I)\n    return O"], [0.7487022635082722, "def solve_f1b42bfb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7487035816092084, "def solve_6c239764(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7487035816092084, "def solve_211e4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7487035816092084, "def solve_1d799efa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7487035816092084, "def solve_c1e1f707(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7487035816092084, "def solve_e81ccc4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.749321253046244, "def solve_1031dae9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_e5a41df3(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_abb9653c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_ad996615(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_36ca63a9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7498499462550435, "def solve_8e0b6c55(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7498499462550435, "def solve_2e0a94bc(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7498499462550435, "def solve_1e2562e5(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7498847791973963, "def solve_b3135066(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.7510262228317041, "def solve_6ca9257e(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = astuple(x2, ONE)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = shoot(x5, RIGHT)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, FOUR, x7)\n    return O"], [0.7516087933992682, "def solve_1879f635(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7518753424364076, "def solve_6f3a6e0e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7523838742319264, "def solve_ea5df16d(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [0.7598499462550435, "def solve_6931f7de(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7598499462550435, "def solve_d273b463(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.770283578319142, "def solve_9124b818(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_70383862(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_7468d487(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_4b9601e6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_64d1e023(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7790633012367362, "def solve_19535a00(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_b421dfbd(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.7790633012367362, "def solve_f129703e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_a98d59b6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.7790633012367362, "def solve_2907a38e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_95e41dd6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.7829819910175547, "def solve_2584e703(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.7829819910175547, "def solve_ead53366(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [1.0, "def solve_88054beb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_603d0c64(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x7)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = increment(x15)\n    x17 = shift(x15, x16)\n    x18 = rbind(gravitate, x17)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(x11, x7, x22)\n    return O"], [1.0, "def solve_6b569afe(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_00be2bd9(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_53c3e3fd(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = compose(dneighbors, shape)\n    x4 = fork(difference, backdrop, x3)\n    x5 = toobject(x2, I)\n    x6 = matcher(first, x1)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = colorfilter(x13, x1)\n    x15 = argmax(x14, numcolors)\n    x16 = matcher(first, x1)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = remove(x19, x18)\n    x21 = lbind(shift, x19)\n    x22 = mapply(x21, x20)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_08933e2e(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x13 = rbind(shoot, NEG_UNITY)\n    x14 = fork(combine, x6, x13)\n    x15 = fork(combine, x5, x14)\n    x16 = index(I, x2)\n    x17 = x15(x2)\n    x18 = ulcorner(x2)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = subgrid(x2, I)\n    x24 = objects(x23, x22, x23)\n    x25 = merge(x24)\n    x26 = cover(x23, x25)\n    x27 = subgrid(x2, x26)\n    x28 = objects(x27, x24, x23)\n    x29 = rbind(toobject, x27)\n    x30 = chain(x29, corners, outbox)\n    x31 = fork(both, x28, x30)\n    x32 = extract(x28, x31)\n    O = fill(x27, ONE, x32)\n    return O"], [1.0, "def solve_b551fc17(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_1a9da7d1(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = chain(x2, x3, palette)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(palette, x5)\n    x7 = lbind(apply, x6)\n    x8 = chain(flip, x7, x5)\n    x9 = sfilter(I, x8)\n    x10 = fork(recolor, x6, x3)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_753ad728(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = toivec(x2)\n    x4 = crop(I, x3, x2)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [1.0, "def solve_786af6da(I):\n    x1 = Vision(I)\n    x2 = lbind(contained, TWO)\n    x3 = chain(x2, dmirror, identity)\n    x4 = compose(x1, x3)\n    x5 = astuple(vsplit, hsplit)\n    x6 = x4(I, TWO)\n    x7 = order(x5, x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = product(x8, x9)\n    x11 = matcher(x4, x8)\n    x12 = compose(flip, x11)\n    x13 = extract(x10, x12)\n    x14 = lbind(sfilter, x10)\n    x15 = compose(first, last)\n    x16 = lbind(matcher, x15)\n    x17 = chain(x14, x16, leftmost)\n    x18 = fork(4488, x17, last)\n    x19 = fork(sfilter, x18, first)\n    x20 = compose(last, last)\n    x21 = compose(flip, x20)\n    x22 = fork(recolor, x18, x21)\n    x23 = mapply(x22, x13)\n    O = paint(x6, x23)\n    return O"], [1.0, "def solve_2fea53ed(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_53c824b7(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c3ad5459(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b8386a1b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_48d9d2dc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = matcher(first, x1)\n    x12 = sfilter(x10, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = first(x13)\n    x15 = divide(x4, x5)\n    x16 = downscale(x14, x15)\n    x17 = objects(x16, F, F, T)\n    x18 = color(x2)\n    x19 = ofcolor(x16, x18)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(x16, x21)\n    return O"], [1.0, "def solve_e0e7797b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(x2, frontiers)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, hsplit, vsplit)\n    x8 = x7(I, TWO)\n    x9 = argmin(x8, numcolors)\n    x10 = asindices(x9)\n    x11 = apply(first, x10)\n    x12 = last(x10)\n    x13 = remove(x11, x10)\n    x14 = x12(x13)\n    x15 = toobject(x14, x9)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = x17(x12)\n    x19 = rbind(multiply, x18)\n    x20 = apply(x19, x323)\n    x21 = mapply(x17, x20)\n    x22 = paint(I, x21)\n    O = downscale(x22, TWO)\n    return O"], [1.0, "def solve_4db0a922(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_aedae3c4(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_25a4218a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = objects(x2, T, F, F)\n    x4 = compress(x3)\n    x5 = toindices(x4)\n    x6 = box(x5)\n    x7 = fill(x1, EIGHT, x6)\n    x8 = difference(x5, x4)\n    O = fill(x7, TWO, x8)\n    return O"], [1.0, "def solve_77dc6175(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = index(x2, ORIGIN)\n    x4 = replace(I, ZERO, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = apply(ulcorner, x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = paint(x4, x8)\n    return O"], [1.0, "def solve_51cabb50(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 = compose(x26, x27)\n    x29 = fork(equality, identity, x28)\n    x30 = sfilter(x25, x29)\n    x31 = apply(x24, x30)\n    x32 = sfilter(x25, x31)\n    x33 = merge(x32)\n    x34 = fill(x14, x13, x33)\n    x35 = difference(x34, x32)\n    O = fill(x35, x10, x35)\n    return O"], [1.0, "def solve_d42f922b(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_09e47d1f(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, frontiers)\n    x3 = mfilter(x2, hline)\n    x4 = mfilter(x2, vline)\n    x5 = x4(I)\n    x6 = x4(I)\n    x7 = color(x3)\n    x8 = palette(x5)\n    x9 = remove(x7, x8)\n    x10 = lbind(shift, x5)\n    x11 = mapply(x10, x9)\n    x12 = palette(x6)\n    x13 = remove(x7, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(merge, x18)\n    x20 = size(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = apply(toivec, x21)\n    x23 = mpapply(shift, x19, x22)\n    x24 = canvas(ZERO, UNITY)\n    x25 = lbind(shift, x24)\n    x26 = matcher(x25, FOUR)\n    x27 = mfilter(x23, x26)\n    O = paint(x17, x27)\n    return O"], [1.0, "def solve_f05195db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(THREE, x2)\n    x4 = rbind(shift, x3)\n    x5 = compose(x4, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, x5)\n    x8 = fork(mapply, x7, x5)\n    O = apply(x8, x1)\n    return O"], [1.0, "def solve_35d72955(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(d23, x3)\n    x5 = fill(I, FOUR, x4)\n    x6 = compose(last, first)\n    x7 = power(last, TWO)\n    x8 = fork(equality, x6, x7)\n    x9 = sfilter(x4, x8)\n    O = fill(x5, FOUR, x9)\n    return O"], [1.0, "def solve_12cda30b(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x5 = positive(x4)\n    x6 = branch(x5, vsplit, hsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = equality(x8, x9)\n    x11 = branch(x10, vmirror, hmirror)\n    x12 = x11(x8)\n    x13 = x11(x9)\n    x14 = partition(x12)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x16)\n    x18 = fafffa47(x13)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = paint(x7, x20)\n    x22 = x11(x21)\n    x23 = replace(x22, ZERO, x17)\n    x24 = replace(x23, x18, x20)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    O = paint(x12, x34)\n    return O"], [1.0, "def solve_a5e9d17d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_5d21886c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = mostcolor(I)\n    return O"], [1.0, "def solve_5278c22e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_5d65c7ec(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x12)\n    O = paint(x4, x3)\n    return O"], [1.0, "def solve_222fc3f0(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = chain(x4, first, last)\n    x6 = compose(x5, x3)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_af481828(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(camirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2e54c034(I):\n    x1 = frontiers(I)\n    x2 = matcher(size, ZERO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, x4, normalize)\n    x6 = mapply(x5, x1)\n    x7 = fill(I, EIGHT, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, x7)\n    return O"], [1.0, "def solve_bdf1df30(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, leastcolor)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x4, x11)\n    x13 = lbind(colorcount, x3)\n    x14 = argmin(x12, x13)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x3, x15)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, x3)\n    x19 = matcher(first, x15)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = lbind(recolor, x17)\n    x23 = chain(x22, ulcorner, x20)\n    x24 = chain(x21, x23, x20)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(recolor, identity, x25)\n    x27 = mapply(x26, x12)\n    O = paint(x3, x27)\n    return O"], [1.0, "def solve_2ae0ddbf(I):\n    x1 = ofcolor(I, ONE)\n    x2 = rbind(difference, x1)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = compose(50,    4)\n    x6 = objects(I, T, F, T)\n    x7 = sfilter(x6, x5)\n    x8 = totuple(x7)\n    x9 = apply(color, x8)\n    x10 = apply(center, x8)\n    x11 = pair(x9, x10)\n    x12 = sfilter(x11, x5)\n    x13 = compose(leftmost, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = difference(x2, x12)\n    x16 = extract(x15, x14)\n    x17 = ulcorner(x16)\n    x18 = subgrid(x16, I)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x18, x20)\n    x22 = replace(x2, ONE, ZERO)\n    x23 = sfilter(x21, x22)\n    x24 = correctmax(x23, x7)\n    x25 = dmirror(x24)\n    x26 = replace(x21, ONE, ZERO)\n    x27 = lbind(recolor, DOWN)\n    x28 = chain(x27, color, x8)\n    x29 = fork(combine, x28, x24)\n    x30 = chain(x29, x25, x28)\n    x31 = merge(x26)\n    x32 = cover(x11, x31)\n    x33 = paint(x32, x22)\n    O = x30(x33)\n    return O"], [1.0, "def solve_18e89320(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30,52378, x31)\n    x33 = x21(x32)\n    x34 = shift(x33, x33)\n    O = fill(x10, x6, x34)\n    return O"], [1.0, "def solve_b4992ae7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_34783792(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_7f34fba6(I):\n    x1 = lbind(toobject, I)\n    x2 = compose(increment, double)\n    x3 = chain(toivec, x1, x2)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(decrement, double)\n    x6 = chain(tojvec, x5, x4)\n    x7 = fork(shift, identity, x6)\n    x8 = compose(hmirror, x7)\n    x9 = mapply(x8, I)\n    x10 = shift(x9, UP)\n    x11 = apply(x9, x10)\n    x12 = size(x11)\n    x13 = positive(x12)\n    x14 = branch(x13, x7, x6)\n    x15 = x14(I)\n    x16 = subgrid(x15, x15)\n    O = partition(x16)\n    return O"], [1.0, "def solve_cc0c100c(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a419a2e9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_5af7008f(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [1.0, "def solve_6e6a340f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = fork(both, x1, x6)\n    x8 = mfilter(x5, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_f636b2e5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_48659c9a(I):\n    UNITY = frontiers(I)\n    x1 = sfilter(x4, hline)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x74 = branch(x3, dmirror, identity)\n    x5 = x7(I)\n    x6 = frontiers(I)\n    x7 = x6(I)\n    x8 = mostcolor(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = argmin(x6, x11)\n    O = x12(I)\n    return O"], [1.0, "def solve_26d2a3d0(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = ofcolor(I, ZERO)\n    x6 = switch(x4, EIGHT, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = hconcat(x7, x7)\n    O = vconcat(x8, x8)\n    return O"], [1.0, "def solve_1a6f0a43(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dbffac02(I):\n    x1 = frontiers(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = sfilter(x1, x6)\n    x8 = merge(x7)\n    x9 = color(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = argmin(x13, numcolors)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x9, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x24)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x24)\n    O = paint(I, x27)\n    return O"], [1.0, "def solve_8ba66fe9(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2a867826(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, x4, x9)\n    x11 = paint(x10, x8)\n    x12 = rbind(hmirror, x8)\n    x13 = rbind(vmatching, x8)\n    x14 = fork(either, x12, x13)\n    x15 = compose(x14, initset)\n    x16 = matcher(x15, x4)\n    x17 = sfilter(x11, x16)\n    x18 = merge(x17)\n    x19 = fill(x11, TWO, x18)\n    x20 = size(x11)\n    x21 = invert(x20)\n    x22 = tojvec(x21)\n    x23 = shift(x11, x22)\n    O = fill(x19, TWO, x23)\n    return O"], [1.0, "def solve_ff1ed23f(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x50)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [1.0, "def solve_44742002(I):\n    x1 = argmin(I, size)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = recolor(ZERO, x3)\n    x5 = dmirror(x2)\n    x6 = occurrences(x5, x4)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    O = fill(x2, ZERO, x8)\n    return O"], [1.0, "def solve_f59928f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8dd1db36(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_34bf83c9(I):\n    x1 = frontiers(I)\n    x2 = Tfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_60b5c352(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_4ab8494a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_f04a5ca3(I):\n    x1 = canvas(Faff, TWO_BY_TWO)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = mapply(x2, x1)\n    O = fill(x1, ZERO, x3)\n    return O"], [1.0, "def solve_ced0df89(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(toobject, I)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x6, initset)\n    x8 = chain(x5, x7, dneighbors)\n    x9 = matcher(x8, UNITY)\n    x10 = compose(flip, x9)\n    x11 = fork(both, x3, x10)\n    x12 = sfilter(x4, x11)\n    x13 = objects(I, T, F, T)\n    x14 = fork(connect, ulcorner, lrcorner)\n    x15 = fork(connect, llcorner, urcorner)\n    x16 = fork(combine, x14, x15)\n    x17 = mapply(x16, x12)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_db027320(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(maximum, x2)\n    x4 = lbind(apply, x3)\n    x5 = chain(x1, x4, decrement)\n    x6 = fork(toivec, identity, x5)\n    x7 = compose(x4, x6)\n    x8 = fork(add, identity, x7)\n    x9 = fork(connect, identity, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(225, x10, x5)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(subtract, identity, x12)\n    x14 = fork(shift, identity, x13)\n    x15 = mapply(x14, x10)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_0e79fde3(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = hconcat(x3, x1)\n    return O"], [1.0, "def solve_bac87b3d(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [1.0, "def solve_86eccaae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(manhattan, x4)\n    x6 = compose(even, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, size)\n    x9 = canvas(x8, UNITY)\n    x10 = fill(x9, TWO, x7)\n    x11 = fill(x10, ONE, x8)\n    x12 = fill(x11, NEG_ONE, x8)\n    x13 = fill(x12, FOUR, x7)\n    x14 = fill(x13, ONE, x8)\n    x15 = fill(x14, THREE, x9)\n    O = fill(x15, TWO, x13)\n    return O"], [1.0, "def solve_1499c086(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = frontiers(I)\n    x6 = color(x5)\n    x7 = x2(I)\n    x8 = paint(x7, x4)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = astuple(x9, x10)\n    x12 = add(x11, NEG_UNITY)\n    x13 = uppermost(x7)\n    x14 = rightmost(x7)\n    x15 = astuple(x13, x14)\n    x16 = add(x15, UP_RIGHT)\n    x17 = lowermost(x7)\n    x18 = leftmost(x7)\n    x19 = astuple(x17, x18)\n    x20 = add(x19, DOWN_LEFT)\n    x21 = lowermost(x7)\n    x22 = llcorner(x21)\n    x23 = urcorner(x21)\n    x24 = shoot(x11, UNITY)\n    x25 = shoot(x11, DOWN_LEFT)\n    x26 = shoot(x11, UP_RIGHT)\n    x27 = shoot(x11, NEG_UNITY)\n    x28 = combine(x24, x25)\n    x29 = combine(x26, x27)\n    x30 = combine(x28, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_414dfc9f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_649c03a4(I):\n    x1 = remove(I, x2)\n    x2 = lbind(ofcolor, I)\n    x3 = compose(x2, frontiers)\n    x4 = fork(recolor, x3, leastcolor)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_0b97eaa5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c3bbcb8(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = Fgpartition(I)\n    x12 = merge(x11)\n    x13 = rbind(colorcount, x12)\n    x14 = matcher(x13, x10)\n    x15 = fork(both, x14, x9)\n    x16 = sfilter(x8, x15)\n    x17 = compose(x12, normalize)\n    x18 = apply(x17, x16)\n    x19 = merge(x8)\n    x20 = cover(I, x19)\n    x21 = paint(x20, x18)\n    x22 = asindices(x21)\n    x23 = x17(x22)\n    x24 = shift(x23, x24)\n    x25 = fork(mapply, x17, x24)\n    x26 = mapply(x25, x24)\n    O = fill(x21, x19, x26)\n    return O"], [1.0, "def solve_77437bd6(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_7e48552b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e8cdfe05(I):\n    x1 = astuple(I, I)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [1.0, "def solve_110d246c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_efbfa85d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(first, x3)\n    x5 = lbind(intersection, x2)\n    x6 = chain(positive, size, x5)\n    x7 = rbind(matcher, ZERO)\n    x8 = compose(x7, x4)\n    x9 = chain(flip, x6, x8)\n    x10 = sfilter(x2, x9)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_16e409c7(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_4207d701(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_baf8a095(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_a2052ebf(I):\n    O =88888888\n    return O"], [1.0, "def solve_203f7775(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(interval, ZERO)\n    x5 = rbind(x4, ONE)\n    x6 = compose(x5, x3)\n    x7 = fork(pair, x6, identity)\n    x8 = compose(x1, x7)\n    x9 = asindices(I)\n    x10 = x8(x9)\n    x11 = leastcolor(I)\n    x12 = ofcolor(I, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x10, x14)\n    x16 = difference(x10, x15)\n    x17 = fill(I, ZERO, x16)\n    x18 = intersection(x15, x16)\n    x19 = cover(x17, x18)\n    x20 = intersection(x15, x16)\n    O = fill(x19, x11, x20)\n    return O"], [1.0, "def solve_4376de90(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = astuple(x4, x5)\n    x9 = add(x8, UNITY)\n    x10 = initset(x9)\n    x11 =255256225\n    x102011148\n    2216808224\n    O = fill(I, x7, x10)\n    return O"], [1.0, "def solve_d74cad8d(I):\n    x1 = astuple(ONE, THREE)\n    x2 = size(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x7, x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = upscale(x6, delta)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = intersection(x7, x9)\n    O = fill(x9, FOUR, x10)\n    return O"], [1.0, "def solve_b12e5c03(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = upscale(x3, THREE)\n    x5 = ONE(x4)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = rbind(toobject, I)\n    x8 = compose(x7, frontiers)\n    x9 = sfilter(x6, x8)\n    x10 = pair(x9, x4)\n    x11 = apply(x11, x10)\n    x12 = mapply(x8, x11)\n    x13 = argmin(x5, x12)\n    x14 = add(x13, x11)\n    x15 = canvas(ZERO, x14)\n    x16 = asobject(x12)\n    x17 = shift(x16, x14)\n    x18 = paint(x15, x17)\n    O = rot180(x18)\n    return O"], [1.0, "def solve_7d1b62f9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x11, x14)\n    x16 = interval(ONE, SEVEN, ONE)\n    x17 = lbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_dd436da0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = product(x11, x11)\n    x13 = compose(last, first)\n    x14 = compose(last, last)\n    x15 = fork(astuple, x13, x14)\n    x16 = fork(shoot, identity, x15)\n    x17 = mapply(x16, x12)\n    x18 = combine(x17, x13)\n    x19 = fill(I, ZERO, x18)\n    O = paint(x19, x2)\n    return O"], [1.0, "def solve_0ff1a65a(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_c8537b77(I):\n    O = astuple(SIX, SIX)\n    return O"], [1.0, "def solve_fae1fa70(I):\n    x1 = halve(TEN)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_20acbac9(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(ff805, x5)\n    x7 = lbind( chain, backdrop)\n    x8 = lbind(x7, dneighbors)\n    x9 = chain(x5, x8, toindices)\n    x10 = apply(x9, x5)\n    x11 = fork(subtract, maximum, minimum)\n    x12 = x11(x10)\n    x13 = toivec(x12)\n    x14 = tojvec(x12)\n    x15 = connect(x13, x14)\n    x16 = astuple(x12, x12)\n    x17 = connect(x15, x16)\n    x18 = combine(x15, x17)\n    x19 = fill(I, ONE, x18)\n    x20 = leastcolor(x19)\n    O = ofcolor(x19, x20)\n    return O"], [1.0, "def solve_3ac16334(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0bbc9be7(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = greater(x5, TWO)\n    x7 = branch(x6, height, width)\n    x8 = x7(x1)\n    x9 = x7(x2)\n    x10 = branch(x6, vsplit, hsplit)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_256c9445(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d4788e87(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = increment(x2)\n    x4 = bottomhalf(I)\n    x5 = lefthalf(x3)\n    x6 = righthalf(x3)\n    x7 = tophalf(x6)\n    x8 = increment(x7)\n    x9 = bottomhalf(x7)\n    x10 = decrement(x3)\n    x11 = height(x5)\n    x12 = increase(x5, x11)\n    x13 = tojvec(x10)\n    x14 = decrement(x13)\n    x15 = height(x6)\n    x16 = add(x14, x15)\n    x17 = tojvec(x12)\n    x18 = decrement(x17)\n    x19 = width(x5)\n    x20 = decrement(x19)\n    x21 = tojvec(x12)\n    x22 = decrement(x21)\n    x23 = astuple(x18, x20)\n    x24 = astuple(x24, x22)\n    x25 = combine(x23, x24)\n    x26 = intersection(x23, x25)\n    x27 = fill(I, FOUR, x25)\n    O = fill(x27, THREE, x26)\n    return O"], [1.0, "def solve_f4a2000c(I):\n    x1 = height(I)\n    x2 = ofcolor(I, ZERO)\n    x3 =asindices(I)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, ZERO, x9)\n    x11 = asobject(x10)\n    O = paint(x11, x9)\n    return O"], [1.0, "def solve_83290309(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_2093494c(I):\n    x1 = lbind(contained, ORIGIN)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = lbind(contained, TWO)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x4)\n    x9 = fork(both, x4, x6)\n    x10 = fork(both, x7, x8)\n    x11 = fork(both, x9, x10)\n    x12 = compose(flip, x4)\n    x13 = fork(both, x12, x11)\n    x14 = fork(both, x12, x12)\n    x15 = compose(flip, x4)\n    x16 = fork(both, x14, x15)\n    x17 = fork(both, x12, x16)\n    x18 = fork(either, x17, x14)\n    x19 = fork(either, x12, x16)\n    x20 = fork(either, x13, x16)\n    x21 = fork(add, ulcorner, x20)\n    x22 = fork(add, llcorner, x21)\n    x23 = fork(connect, x20, x22)\n    x24 = decrement(x70)\n    x25 = lbind(multiply, x24)\n    x26 = compose(x25, x23)\n    x27 = fork(add, lrcorner, x26)\n    x28 = fork(connect, x27, x24)\n    x29 = fork(upscale, x28, x14)\n    x30 = fork(connect, x27, x29)\n    x31 = fork(54400, x23, x30)\n    x32 = fork(combine, x29, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x1)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_6e48fd31(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = asobject(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = normalize(x6)\n    x8 = width(I)\n    x9 = subtract(x8, TWO)\n    x10 = multiply(x9, THREE)\n    x11 = increment(x10)\n    x12 = width(I)\n    x13 = subtract(x12, x6)\n    x14 = multiply(x13, x4)\n    x15 = shift(x7, x14)\n    x16 = paint(I, x15)\n    x17 = repeat(x16, ONE)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_f57dc630(I):\n    x1 = palette(I)\n    x2 = contained(I, x1)\n    x3 = contained(x2, x1)\n    x4 = branch(x3, UNITY, SEVEN)\n    x5 = branch(x3, vmirror, hmirror)\n    x6 = x4(x5)\n    x7 = width(I)\n    x8 = branch(x3, UNITY, NEG_ONE)\n    x9 = multiply(x7, x8)\n    x10 = shift(x6, x9)\n    x11 = canvas(ZERO, x9)\n    x12 = paint(x11, x10)\n    O = x4(x12)\n    return O"], [1.0, "def solve_fdc75963(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = compose(maximum, shape)\n    x11 = order(x9, x10)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x11, x15)\n    x17 = multiply(TEN, TEN)\n    x18 = canvas(x4, x17)\n    x19 = double(x18)\n    x20 = asobject(x19)\n    x21 = shift(x20, UNITY)\n    O = paint(x17, x21)\n    return O"], [1.0, "def solve_6166a010(I):\n    x1 = lbind(toindices, I)\n    x2 = lbind(toobject, I)\n    x3 = compose(first, x1)\n    x4 = chain( mostcolor, x2, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = compose(last, x1)\n    x7 = chain(decrement, x5, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = compose(first, x8)\n    x10 = fork(remove, x6, x9)\n    x11 = compose(last, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, x11, x13)\n    x15 = fork(combine, x11, x14)\n    x16 = fork(intersection, x15, x8)\n    x17 = mapply(x16, x1)\n    O = fill(I, ZERO, x17)\n    return O"], [1.0, "def solve_7b05a020(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_27bc8324(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, center)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = compose(x6, palette)\n    x8 = argmax(x5, x7)\n    x9 = remove(x8, x5)\n    x10 = merge(x9)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, color)\n    x13 = sfilter(x1, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, normalize)\n    x19 = lbind(apply, x18)\n    x20 = chain(x179, x18, x19)\n    x21 = rbind(remove, x20)\n    x22 = compose(x21, normalize)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(compose, initset)\n    x25 = lbind(rbind, manhattan)\n    x26 = chain(x24, x25, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x75, x27)\n    x29 = compose(x25, x28)\n    x30 = fork(mapply, x23, x29)\n    x31 = fork(recolor, x30, x29)\n    x32 = mapply(x31, x13)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_19daf05a(I):\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = increment(x33)\n    x35 = astuple(x33, x34)\n    x36 = shift(x22, x35)\n    x37 = shift(x25, x36)\n    x38 = paint(I, x37)\n    x39 = combine(x28, x38)\n    x40 = ofcolor(x39, ZERO)\n    O = mapply(x39, x40)\n    return O"], [1.0, "def solve_abb6ea0d(I):\n    x1 = initset(ORIGIN)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = uppermost(x3)\n    x7 = lbind(subtract, x6)\n    x8 = chain(size, x7, double)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    O = underfill(x5, ONE, x10)\n    return O"], [1.0, "def solve_5b10c675(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d1b2c416(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_967e69fe(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_d792c8d1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_854608fe(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEGim, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [1.0, "def solve_82f6621a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_577be18e(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, decrement)\n    x3 = mapply(x2, I)\n    O = objects(I, T, F, T)\n    return O"], [1.0, "def solve_b3a6eefe(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(TWO, LEFT)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, ONE)\n    x10 = astuple(THREE, TWO)\n    x11 = connect(x9, x10)\n    x12 = combine(x8, x11)\n    x13 = combine(x5, x12)\n    x14 = recolor(THREE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_587c08c7(I):\n    x1 = palette(I)\n    x2 = SEVEN(I)\n    x3 = EIGHT(x2)\n    x4 = vmirror(I)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = lbind(colorfilter, x5)\n    x8 = compose(x7, color)\n    x9 = sfilter(x1, x8)\n    x10 = chain(invert, size, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = apply(x11, x9)\n    x13 = rbind(argmax, x12)\n    x14 = apply(x13, x12)\n    x15 = merge(x14)\n    x16 = cover(I, x15)\n    x17 = mapply(x11, x13)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_722fe31d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0115b112(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x6)\n    x8 = crop(I, x7, x4)\n    x9 = asobject(x8)\n    x10 = hperiod(x9)\n    x11 = vperiod(x9)\n    x12 = index(I, x11)\n    x13 = asobject(I)\n    x14 = hperiod(x13)\n    x15 = vperiod(x13)\n    x16 = astuple(x14, x15)\n    x17 = ulcorner(x9)\n    x18 = crop(I, x17, x16)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = asobject(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = hperiod(x23)\n    x25 = vperiod(x24)\n    x26 = astuple(x24, x25)\n    x27 = ulcorner(x9)\n    x28 = crop(I, x27, x26)\n    x29 = vmirror(x28)\n    x30 = asobject(x29)\n    x31 = asobject(x30)\n    x32 = vperiod(x31)\n    x33 = hperiod(x31)\n    x34 = astuple(x33, x32)\n    x35 = lbind(multiply, x34)\n    x36 = neighbors(ORIGIN)\n    x37 = mapply(neighbors, x36)\n    x38 = apply(x35, x37)\n    x39 = lbind(shift, x33)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_d1823fb9(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_def17ece(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_adb1e25e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4d62b463(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x10 = x9(x6)\n    x11 = paint(x3, x10)\n    x12 = paint(x11, x11)\n    O = paint(x12, x10)\n    return O"], [1.0, "def solve_116dd1c0(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1365ca38(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = argmax(x5, size)\n    O = subgrid(x6, I)\n    return O"], [1.0, "def solve_63955891(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    O = asobject(x1)\n    return O"], [1.0, "def solve_1352c8fa(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_5c6e012b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4e0ca6f7(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8c91ed98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = dmirror(I)\n    x5 = x4(I)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [1.0, "def solve_d754ecc6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, UNITY)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = toobject(x6, I)\n    x8 = normalize(x7)\n    x9 = lbind(shift, x8)\n    x10 = compose(x9, shape)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, x10)\n    x14 = fork(equality, identity, x13)\n    x15 = mfilter(x6, x14)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_06640b30(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_461ed799(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(50, x25)\n    x27 = compose(first, x25)\n    x28 = fork(recolor, x26, x27)\n    x29 = mapply(x28, x3)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_17a52f40(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = order(x1, x2)\n    x4 = apply(last, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, first)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [1.0, "def solve_f9fa61d0(I):\n    x1 = hsplit(I, THREE)\n    x2 = insert(first, x1)\n    x3 = order(x2, identity)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = ofcolor(x4, NINE)\n    x7 = ofcolor(x5, ONE)\n    x8 = combine(x6, x7)\n    x9 = fill(x4, THREE, x8)\n    x10 = ofcolor(x9, NINE)\n    x11 = fill(x9, ONE, x10)\n    O = fill(x11,3333, x8)\n    return O"], [1.0, "def solve_e8fafdea(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_7f76e0d7(I):\n    x1 =884286214\n    x2 = dmirror(I)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, ZERO)\n    x16 = rbind(contained, x15)\n    x17 = apply(x16, x14)\n    x18 = sfilter(x17, vline)\n    x19 = difference(x17, x18)\n    O = apply(size, x19)\n    return O"], [1.0, "def solve_d6d73890(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_b1f393f2(I):\n    x1 = astuple(SIX, THREE)\n    x2 = astuple(dmirror, I)\n    x3 = astuple(TWO, ONE)\n    x4 = combine(x1, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x6)\n    x8 = chain(lowermost, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x4, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_157c2546(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x5, x6)\n    x8 = argmin(x5, x7)\n    x9 = x6(x8)\n    x10 = string(x8, x9)\n    x11 = cover(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = colorfilter(x12, x4)\n    x14 = difference(x12, x13)\n    x15 = divide(x10, x14)\n    x16 = apply(uppermost, x15)\n    x17 = lowermost(x15)\n    x18 = astuple(x17, x15)\n    x19 = add(x18, invert)\n    x20 = lowermost(x15)\n    x21 = rightmost(x15)\n    x22 = astuple(x20, x21)\n    x23 = add(x22, astuple)\n    x24 = rbind(subtract, x23)\n    x25 = rbind(shoot, x19)\n    x26 = compose(x24, x25)\n    x27 = fork(combine, x26, x24)\n    x28 = mapply(x27, x15)\n    O = fill(x11, ZERO, x28)\n    return O"], [1.0, "def solve_cc2d74a7(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_27377936(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =elta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = corners(x6)\n    x8 = insert(ZERO_BY_TWO, x7)\n    x9 = insert(RIGHT, x8)\n    x10 = insert(TWO_BY_TWO, x9)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = interval(TWO, x12, ONE)\n    x16 = pair(x14, x15)\n    x17 = mapply(x13, x16)\n    O = paint(x4, x17)\n    return O"], [1.0, "def solve_ce0d4df4(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = toindices(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = fork(multiply, last, identity)\n    x8 = apply(x7, x6)\n    x9 = partition(I)\n    x10 = sfilter(x9, x6)\n    x11 = mapply(toindices, x10)\n    x12 = corners(x11)\n    x13 = combine(x12, x11)\n    x14 = difference(x13, x12)\n    x15 = mapply(x8, x14)\n    x16 = combine(x15, x11)\n    x17 = fill(I, x2, x16)\n    x18 = hmirror(x17)\n    x19 = mostcolor(I)\n    O = fill(x17, x19, x18)\n    return O"], [1.0, "def solve_8d9cd7de(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = combine(x5, x4)\n    x7 = power(outbox, TWO)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, initset)\n    x10 = power(x9, FOUR)\n    x11 = fork(connect, x7, x10)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x2)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_560918e5(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = I(x3)\n    x5 = dmirror(x4)\n    x6 = papply(equality, x4, x5)\n    x7 = branch(x6, ONE, SEVEN)\n    O = canvas(x7, x7)\n    return O"], [1.0, "def solve_51822bb6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, asobject)\n    x4 = lbind(apply, numcolors)\n    x5 = chain(x4, asobject, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(size, x6)\n    x8 = chain(increment, x5, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, I)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_22c390eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_e31e1135(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(inter000, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_56c7c989(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_6b2426c4(I):\n    x1 = astuple(THREE, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_cfe3a8fe(I):\n    x1 = paint(I, x1)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = canvas(x3, x5)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x6, x8)\n    return O"], [1.0, "def solve_13515f6e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = insert(x8, x11)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x4)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(x14)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, TWO)\n    x21 = merge(x20)\n    x22 = decrement(x21)\n    x23 = input(x22, x21)\n    x24 = tophalf(x23)\n    x25 = shift(x21, x24)\n    x26 = lefthalf(x25)\n    x27 = tophalf(x26)\n    x28 = vmirror(x27)\n    x29 = hmirror(x28)\n    x30 = insert(x26, x21)\n    x31 = insert(x29, x30)\n    x32 = combine(x30, x31)\n    x33 = paint(x16, x32)\n    x34 = hmirror(x33)\n    O = vmirror(x34)\n    return O"], [1.0, "def solve_9278ba19(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_36c0b8e0(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a547d3bd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, toindices)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, x3)\n    x8 = fork(insert, vmirror, identity)\n    x9 = lbind(insert, x7)\n    x10 = compose(x9, x8)\n    x11 = power(x10, TWO)\n    x12 = x11(x9)\n    x13 = lbind(remove, x6)\n    x14 = compose(x13, x12)\n    x15 = fork(compose, x11, x14)\n    x16 = lbind(lbind, shift)\n    x17 = lbind(occurrences, x6)\n    x18 = compose(x16, x17)\n    x19 = fork(mapply, x18, x16)\n    x20 = rapply(x19, x4)\n    x21 = mapply(x16, x20)\n    O = paint(x3, x21)\n    return O"], [1.1, "def solve_66cd0eb0(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7a9c61d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(FOUR, FOUR)\n    x2 = portrait(I)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = asindices(x4)\n    x6 = ofcolor(x4, ZERO)\n    x7 = difference(x5, x6)\n    x8 = rbind(toobject, x4)\n    x9 = compose(x8, delta)\n    x10 = interval(x2, FIVE, ZERO)\n    x11 = rbind(multiply, width)\n    x12 = compose(x11, tojvec)\n    x13 = chain(x10, x12, initset)\n    x14 = lbind(fork, greater)\n    x15 = lbind(chain, flip)\n    x16 = lbind(x15, x13)\n    x17 = lbind(x16, astuple)\n    x18 = compose(x16, x17)\n    x19 = compose(x13, x18)\n    x20 = extract(x9, x19)\n    x21 = center(x20)\n    x22 = initset(x21)\n    x23 = center(x22)\n    x24 = subgrid(x226, x4)\n    x25 = fork(equality, identity, rot90)\n    x26 = compose(x25, x20)\n    x27 = fork(equality, identity, rot270)\n    x28 = compose(x27, x21)\n    x29 = fork(equality, identity, rot90)\n    x30 = compose(x29, x21)\n    x31 = fork(equality, identity, rot270)\n    x32 = compose(x31, x21)\n    x33 = fork(both, x26, x25)\n    x34 = fork(both, x24, x28)\n    x35 = fork(both, x33, x34)\n    x36 = astuple(x36, x35)\n    x37 = extract(x32, x36)\n    x38 = center(x37)\n    x39 = initset(x38)"], [1.1, "def solve_6798fd94(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 =8000(dae9001fccofdne22(I)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x6, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x4)\n    x16 = backdrop(x15)\n    x17 = toobject(x16, I)\n    x18 = identity(x17)\n    x19 = chain(x14, x10, x18)\n    x20 = rbind(contained, x11)\n    x21 = compose(x20, color)\n    x22 = sfilter(x15, x21)\n    x23 = size(x22)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, identity)\n    x26 = canvas(x25, UNITY)\n    x27 = asindices(x26)\n    x28 = center(x27)\n    x29 = dmirror(I)\n    x30 = initset(x22)\n    x31 = insert(x28, x30)\n    x32 = insert(x29, x31)\n    x33 = dmirror(x32)\n    x34 = asindices(x33)\n    x35 = center(x34)\n    x36 = initset(x35)\n    x37 = insert(x16, x36)\n    x38 = insert(x33, x37)\n    x39 = fill(x26, x4, x38)\n    x40 = fill(x39, x33, x34)\n    x41 = fill"], [1.1, "def solve_9dd5e7c1(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_2815a7f0(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, insert)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_ba15fdbb(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7666ef79(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = lowermost(x7)\n    x9 = compose(minimum, shape)\n    x10 = lowermost(x7)\n    x11 =1900(x9, x10)\n    x12 = power(x11, TWO)\n    x13 = uppermost(x7)\n    x14 =970(x12, x13)\n    x15 = astuple(x14, x414)\n    x16 = ulcorner(x7)\n    x17 = palette(x15)\n    x18 = palette(x10)\n    x19 = argmax(x17, x18)\n    x20 = remove(x19, x17)\n    x21 = other(x20, x19)\n    x22 = rbind(colorcount, x21)\n    x23 = colorcount(I, x21)\n    x24 = rbind(toobject, I)\n    x25 = compose(x22, delta)\n    x26 = rbind(colorcount, x21)\n    x27 = valmax(x21, x26)\n    x28 = matcher(x25, x27)\n    x29 = sfilter(x24, x28)\n    x30 = difference(x19, x29)\n    x31 = apply(e961498330, x29)\n    x32 = rbind(colorcount, x21)\n    x33 = rbind(toobject, I)\n    x34 = chain(x32, x33, backdrop)\n    x35 = apply(x34, x31)\n    x36 = sfilter(x3, x35)\n    x37 = apply(x22, x36)\n    x38 = size(x37)\n    x39 = subtract(x38, x37)\n    x40 = frontiers("], [1.1, "def solve_53d40512(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = matcher(first, FOUR)\n    x38 = sfilter(x28, x37)\n    x39 = center(x38)\n    x40 = matcher(first, NEG_ONE)\n    x41 = sfilter("], [1.1, "def solve_201f73f0(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8ee1277f(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_f3727679(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_e6afb92a(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_770b125f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_b16928d7(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_72918c35(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f824d0d5(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0cffd2b2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_26948c91(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f6db8f2f(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_08d2c6f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_b05c68ca(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_e77d2eca(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(56129min, x27)\n    x39 = chain(size, x38, T)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_a80e03a5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = color(x23)\n    x25 = palette(x22)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x6)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = ofcolor(x22, x24)\n    x31 = ofcolor(x22, x6)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = lowermost(x30)\n    x35 = dneighbors(ORIGIN)\n    x36 = remove(DOWN, x35)\n    x37 = rbind(mapply, x36)\n    x38 = lbind(chain, x37)\n    "], [1.1, "def solve_a817586e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(I, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(greater, THREE)\n    x5 = chain(x4, size, dedupe)\n    x6 = compose(x5, x3)\n    x7 = fork(both, x7, x6)\n    x8 = sfilter(x1, x6)\n    x9 = difference(x1, x8)\n    x10 = insert(x10, x8)\n    x11 = apply(most, x10)\n    x12 = condition(x11, ZERO)\n    x13 = argmin(x1, size)\n    x14 = remove(x13, x10)\n    x15 = argmin(x14, size)\n    x16 = width(x12)\n    x17 = decrement(x16)\n    x18 = tojvec(x17)\n    x19 = height(x12)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = fork(subtract, x22, increment)\n    x24 = chain(increment, x17, x23)\n    x25 = shoot(x13, x18)\n    x26 = shoot(x15, x20)\n    x27 = combine(x25, x26)\n    x28 = combine(x71, x24)\n    x29 = combine(x27, x28)\n    x30 = tojvec(x29)\n    x31 = asobject(x19)\n    x32 = mapply(x23, x61)\n    x33 = asobject(x15)\n    x34 = toobject(x33, I)\n    x35 = asobject(x34)\n    x36 = height(x32)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = invert(x38)\n    x40 = shift(x31, x39)\n    x41 = fill"], [1.1, "def solve_4184d06b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =644(x2)\n    x4 = shape(I)\n    x5 = canvas(center, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(equality, x12, toindices)\n    x14 = chain(x9, x13, ulcorner)\n    x15 = fork(multiply, x14, toindices)\n    x16 = chain(x13, x15, rbind(subtract, FOUR)\n    x17 = fork(divide, x15, x16)\n    x18 = fork(equality, identity, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = mostcolor(I)\n    x21 = matcher(x21, x20)\n    x22 = fork(both, x19, x21)\n    x23 = sfilter(x7, x22)\n    x24 = sfilter(x7, x18)\n    x25 = argmax(x23, minimum)\n    x26 = argmax(x24, width)\n    x27 = ulcorner(x25)\n    x28 = llcorner(x27)\n    x29 = add(x27, x28)\n    x30 = shift(x25, x29)\n    x31 = color(x30)\n    x32 = ofcolor(x23, x31)\n    x33 = argmax(x32, x23)\n    x34 = vmirror(x33)\n    x35 = normalize(x34)\n    x36 = color(x23)\n    x37 = increment(x6)\n    x38 = add(x37, x31)\n    x39 = shift(x35"], [1.1, "def solve_39655996(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = rot270(I)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = lbind(rbind, subtract)\n    x5 = lbind(x3, x4)\n    x6 = lbind(canvas, ZERO)\n    x7 = compose(x5, x6)\n    x8 = fork(paint, x7, last)\n    x9 = compose(x4, x8)\n    x10 = lbind(sfilter, x1)\n    x11 = rbind(compose, last)\n    x12 = lbind(rbind, sfilter)\n    x13 = chain(x11, x10, x12)\n    x14 = lbind(apply, first)\n    x15 = chain(lowermost, x13, x14)\n    x16 = lbind(rightbind, astuple)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x14)\n    x19 = compose(x4, x18)\n    x20 = compose(x1, cmirror)\n    x21 = fork(remove, x20, x14)\n    x22 = compose(last, x21)\n    x23 = fork(last, first, x22)\n    x24 = compose(lowermost, x23)\n    x25 = compose(rightmost, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x27, x23)\n    x29 = fork(argmin, x26, x28)\n    x30 = fork(astuple, x29, identity)\n    x31 = remove(x30, x1)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(multiply, x34, x309)\n    x36 = compose(x35, x29)\n    x37 = fork(apply, x36, x31"], [1.1, "def solve_4d53bcb2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_d8b93e60(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_572bf88e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_0305bd26(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(canvas, ZERO)\n    x5 = compose(x4, x3)\n    x6 = fork(paint, x5, x3)\n    x7 = compose(rot90, x6)\n    x8 = power(x7, FOUR)\n    x9 = rot180(I)\n    x10 = dedupe(x9)\n    x11 = rot180(I)\n    x12 = dedupe(x11)\n    x13 = rot180(I)\n    x14 = dedupe(x13)\n    x15 = rot180(I)\n    x16 = dedupe(x15)\n    x17 = size(x10)\n    x18 = size(x12)\n    x19 = positive(x17)\n    x20 = branch(x19, x15, x14)\n    x21 = branch(x19, x16, x20)\n    x22 = compose(x4, x21)\n    x23 = argmax(x23, x22)\n    x24 = apply(x23, x18)\n    x25 = size(x24)\n    x26 = equality(x25, ONE)\n    x27 = branch(x26, x23, x24)\n    x28 = branch(x26, x228, x27)\n    x29 = branch(x26, x23, x24)\n    x30 = branch(x26, x22, x29)\n    x31 = multiply(TEN, TEN)\n    x32 = add(x31, TWO)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = branch(x33, x28, x30)\n    x35 = ZERO(x34)\n    x36 =44(x35)\n    x37 = shift(x36, x31)\n    x38 = paint(I, x37)\n    x39 = rot90(x38)\n    x40 = paint(x39, x37)\n    x41 = rot90(x40"], [1.1, "def solve_4c90c5bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_e8df6493(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_4fb61fc2(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = difference(x1, x9)\n    x11 = rbind(subgrid, I)\n    x12 = apply(x11, x10)\n    x13 = lbind(rbind,colorcount)\n    x14 = argmax(x12, x13)\n    x15 = palette(x14)\n    x16 = remove(x4, x15)\n    x17 = lbind(colorcount, x14)\n    x18 = argmin(x16, x17)\n    x19 = subgrid(x18, x6)\n    x20 = increment(x14)\n    x21 = rbind(greater, x20)\n    x22 = compose(x21, first)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = lbind(rbind, subtract)\n    x26 = lbind(occurrences, x24)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x27, last)\n    x29 = lbind(rbind, adjacent)\n    x30 = fork(extract, first, x28)\n    x31 = compose(x29, x30)\n    x32 = fork( compose, x24, x31)\n    x33 = fork(apply, x38, x32)\n    x34 = rbind(intersection, x33)\n    x35 = compose(size, x34)\n    x36 = argmax(x21, x35)\n    x37 = rbind(shift, x36)\n    x38 =87(x37)\n    x39 = TWO(x38, x34)\n    x"], [1.1, "def solve_8381c246(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_80faa289(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = vmirror(x2)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = chain(position, lefthalf, tophalf)\n    x9 = fgpartition(x4)\n    x10 = merge(x9)\n    x11 = normalize(x10)\n    x12 = lbind(shift, x11)\n    x13 = height(x2)\n    x14 = height(x11)\n    x15 = divide(x13, x14)\n    x16 = width(x2)\n    x17 = width(x11)\n    x18 = divide(x16, x17)\n    x19 = vmirror(x8)\n    x20 = hmirror(x8)\n    x21 = shift(x19, x20)\n    x22 = SEVEN(x21)\n    x23 = argmax(x3, x22)\n    x24 = leastcolor(x23)\n    x25 = matcher(first, x24)\n    x26 = sfilter(x22, x25)\n    x27 = replace(x7, x24, x655)\n    x28 = argmin(x26, identity)\n    x29 = argmax(x28, identity)\n    x30 = ulcorner(x28)\n    x31 = rbind(subtract, x30)\n    x32 = height(x28)\n    x33 = rbind(multiply, x32)\n    x34 = chain(outbox, x31, x33)\n    x35 = width(x29)\n    x36 = divide(x35, x31)\n    x37 = increment(x36)\n    x38 = interval(ONE, x37, ONE)\n    x39 = sfilter(x38, x34)\n    x40 = invert(x39)\n    x41 =71(x40)\n    "], [1.1, "def solve_f2c8140e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = extract(x30, x31)\n    x33 = last(x32)\n    x34 = matcher(first, x11)\n    x35 = sfilter(x34, x24)\n    x36 = center(x35)\n    x37 = vfrontier(x36)\n    x38 = sfilter(x1, x22)\n    x39 = lbind(fork, intersection)\n    x40 = lbind(x39, outbox)\n    x41 = lbind(compose, x38"], [1.1, "def solve_b0a39c2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_fcb49c5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply,numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_afd89778(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(extract, x1)\n    x3 = compose(x2, x1)\n    x4 = rbind(compose, initset)\n    x5 = lbind(rbind, manhattan)\n    x6 = chain(x4, x5, x3)\n    x7 = fork(sfilter, identity, x6)\n    x8 = compose(rot90, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = rot270(I)\n    x11 = fork(shift, identity, x10)\n    x12 = compose(rot90, x11)\n    x13 = fork(shift, identity, x12)\n    x14 = size(I)\n    x15 = maximum(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = product(x16, x16)\n    x18 = rbind(multiply, THREE)\n    x19 = compose(x18, first)\n    x20 = rbind(multiply, TEN)\n    x21 = compose(x20, last)\n    x22 = fork(add, x19, x21)\n    x23 = fork(astuple, x19, x22)\n    x24 = lbind(canvas, NEG_ONE)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(connect, x23, x26)\n    x28 = rbind(contained, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(extract, x27)\n    x31 = compose(x30, x29)\n    x32 = fork(add, last, x31)\n    x33 = fork(astuple, x29, x32)\n    x34 = fork(connect, x33, x33)\n    x35 = rbind(branch, x730)\n    x36 = rbind(x35, x34)\n    x37 = rbind(contained, x51)\n    x38 = compose(x"], [1.1, "def solve_7d729b16(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = backdrop(x6)\n    x8 = shoot(x4, UNITY)\n    x9 = initset(x2)\n    x10 = insert(x7, x9)\n    x11 = mostcolor(I)\n    x12 = mapply(d43, x10)\n    x13 =insert(x7, x10)\n    x14 = width(I)\n    x15 = greater(x14, TWO)\n    x16 = insert(x15, x13)\n    x17 = mapply(dneighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = matcher(first, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x12, x21)\n    x23 = difference(x12, x22)\n    x24 = fill(x5, TWO, x23)\n    x25 =\n    x26 = width(x24)\n    x26 = greater(x25, TWO)\n    x27 = increment(x26)\n    x28 =455(x22)\n    x29 = double(x28)\n    x30 = insert(x27, x29)\n    x31 = branch(x30, x22, x27)\n    x32 = branch(x30, x26, x27)\n    x33 = branch(x30, UP, LEFT)\n    x34 = x31(x33)\n    x35 =box(x34)\n    x36 = intersection(x31, x35)\n    x37 = fill(x24, TWO, x36)\n    x38 = replace(x37, x19, ONE)\n    x39 = lbind(contained, TWO)\n    x40 = compose(x39, palette)\n    x41 = sfilter(x34,"], [1.1, "def solve_4bdbff07(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_76782b65(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_919be0bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_cb02f1a6(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(add, leftmost, uppermost)\n    x7 = compose(toivec, x6)\n    x8 = fork(add, x5, x7)\n    x9 =2000(x5)\n    x10 = dmirror(x8)\n    x11 = numcolors(x10)\n    x12 = decrement(x11)\n    x13 = order(x1, x12)\n    x14 = leftmost(x13)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, FOUR)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(greater, x14)\n    x20 = compose(x19, last)\n    x21 = apply(x20, x3)\n    x22 = combine(x18, x21)\n    x23 = rbind(repeat, x22)\n    x24 = compose(x23, tojvec)\n    x25 = apply(x24, x3)\n    x26 = combine(x17, x25)\n    x27 = hmirror(x26)\n    x28 = lbind(repeat, x27)\n    x29 = apply(x28, x3)\n    x30 = astuple(x11, x13)\n    x31 = x12(x30)\n    x32 = pair(x26, x31)\n    x33 = compose(size, last)\n    x34 = matcher(x33, ZERO)\n    x35 = sfilter(x32, x34)\n    x36 = lbind(compose, x5)\n    x37 = lbind(lbind, greater)\n    x38 = chain(x36,x37, last)\n    x39 = pair(x35, x35)\n    x40 ="], [1.1, "def solve_822eacbc(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, cmirror)\n    x2 = hmirror(I)\n    x3 = index(x2, ORIGIN)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = recolor(x3, x4)\n    x6 = index(x2, x5)\n    x7 = subgrid(x5, x2)\n    x8 = remove(x7, x5)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = colorobject(x11, x10)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = subgrid(x13, x2)\n    x16 = height(x15)\n    x17 = increment(x16)\n    x18 = subgrid(x13, x15)\n    x19 = hmirror(x18)\n    x20 = increment(x19)\n    x21 = replace(x19, x10, x11)\n    x22 =1cf801(x21, x20)\n    x23 = x22(x2)\n    x24 = replace(x23, x10, x4)\n    x25 = ofcolor(x24, x10)\n    x26 = subgrid(x25, x24)\n    x27 = mapply(vfrontier, x25)\n    x28 = mapply(hfrontier, x25)\n    x29 = size(x27)\n    x30 = size(x28)\n    x31 = greater(x29, x30)\n    x32 = branch(x31, x28, x27)\n    x33 = fill(x26, x11, x32)\n    x34 =recolor(x33, x10)\n    x35 = mapply(x29, x28)\n    x36 = paint(x20, x35)\n    x37 =607 solve48678497ad(x33)\n    x38 =7745(x37)\n    x39 = recolor(x10, x38)\n"], [1.1, "def solve_94ac28e3(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(THREE, x4)\n    x6 = asobject(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = power(x9, x10)\n    x12 = astuple(x3, x11)\n    x13 = astuple(x12, first)\n    x14 = astuple(x12, ZERO)\n    x15 = initset(x13)\n    x16 = insert(x14, x15)\n    x17 = backdrop(x16)\n    x18 = lbind(position, x17)\n    x19 = compose(x18, initset)\n    x20 = lowermost(x17)\n    x21 = rightmost(x17)\n    x22 = astuple(x20, x21)\n    x23 = lbind(greater, x22)\n    x24 = compose(x23, x19)\n    x25 = sfilter(x6, x24)\n    x26 = apply(x19, x25)\n    x27 = merge(x26)\n    x28 = apply(x25, x26)\n    x29 = compose(double, halve)\n    x30 = compose(double, last)\n    x31 = fork(equality, x29, x30)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(equality, x32, x33)\n    x35 = fork(either, x31, x34)\n    x36 = sfilter(x26, x35)\n    x37 = apply(x19, x36)\n    x38 = merge(x36)\n    x39 = cover(I, x38)\n    x40 =8925(x39)\n    x41 = mostcolor(x40)\n    O"], [1.1, "def solve_5dc739ab(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_7cbbcb87(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =76fgically(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = hmirror(x3)\n    x5 = vmirror(x3)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = vmirror(x7)\n    x9 = hmirror(x8)\n    x10 = astuple(x4, x5)\n    x11 = astuple(x9, x10)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x13)\n    x15 = asobject(x14)\n    x16 = height(x15)\n    x17 = width(x15)\n    x18 = decrement(x16)\n    x19 = astuple(x18, x17)\n    x20 = connect(ORIGIN, x19)\n    x21 = outbox(x20)\n    x22 = astuple(x17, x15)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = connect(ORIGIN, x24)\n    x26 = double(x17)\n    x27 = connect(ORIGIN, x26)\n    x28 = astuple(x24, x15)\n    x29 = astuple(x27, x15)\n    x30 = connect(x28, x29)\n    x31 = initset(ORIGIN)\n    x32 = box(x31)\n    x33 = difference(x32, x30)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = palette(I)\n    x37 = remove(x35, x36)\n    x38 = other(x37, x35)\n    x39 = ofcolor(x26, x38)\n    x40 = ofcolor(x25, x38)\n    x41 = combine(x39, x40)\n    x42 = intersection(x39,"], [1.1, "def solve_ee5755c3(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(remove, TWO)\n    x5 = chain(x4, x3, x2)\n    x6 = fork( chain,x1, x5)\n    x7 = lbind(canvas, ZERO)\n    x8 = compose(x7, x6)\n    x9 = fork(4612d687, x8, shape)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = lbind(497 either, ONE)\n    x13 = compose(x12, x11)\n    x14 = fork(both, x13, x7)\n    x15 = sfilter(x1, x14)\n    x16 = difference(x1, x15)\n    x17 = merge(x16)\n    x18 =66666666(x17, THREE)\n    x19 = mostcolor(I)\n    x20 = ofcolor(x18, x19)\n    x21 = apply(initset, x20)\n    x22 = rbind(manhattan, x3)\n    x23 = compose(x22, initset)\n    x24 = argmin(x21, x23)\n    x25 = ofcolor(x18, x19)\n    x26 =manhattan(x24, x25)\n    x27 = increment(x26)\n    x28 = injvec(x27)\n    x29 = shift(x25, x28)\n    x30 = toindices, x29)\n    x31 = rbind(shoot, x30)\n    x32 = mapply(x31, x28)\n    x33 = fill(x18, FOUR, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = size(x34)\n    x36 = intersection(x28, x35)\n    x37 = fill(x33, ZERO, x36)\n    x38 = astuple(x19, x23)\n    x39 = canvas(ZERO"], [1.1, "def solve_84918bad(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x10)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x12)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d3dbb4ac(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f1e24483(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b93ddf6b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, ZERO, x1)\n    x3 = normalize(x2)\n    x4 = occurrences(x2, x3)\n    x5 = lbind(shift, x3)\n    x6 = apply(x5, x4)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(FIVE, ONE)\n    x9 = astuple(TWO, SIX)\n    x10 = initset(x7)\n    x11 = insert(x8, x10)\n    x12 = insert(x9, x11)\n    x13 = rbind(contained, x12)\n    x14 = chain(flip, x13, ulcorner)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = height(x16)\n    x18 = vsplit(x16, x17)\n    x19 = hsplit(x18, x17)\n    x20 = extract(x19, x14)\n    x21 = extract(x19, x20)\n    x22 = width(x16)\n    x23 = divide(x22, THREE)\n    x24 = area(x16)\n    x25 = last(x24)\n    x26 = width(x12)\n    x27 = divide(x26, THREE)\n    x28 = astuple(x23, x27)\n    x29 = maximum(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(multiply, x30)\n    x32 = mapply(x31, x3)\n    x33 = canvas(x236, x32)\n    x34 = lbind(shift, x16)\n    x35 = mapply(x34, x30)\n    x36 = fill(x33, FOUR, x35)\n    x37 = shift(x3, x Tools)\n    x38 = occurrences(x32, x37)\n    x39 = fill(x36, FOUR, x38)\n    O = mapply(x39, x"], [1.1, "def solve_3158d264(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bb93ee37(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_71a186b1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_79d79473(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = chain(positive, size, dmirror)\n    x7 = x6(I)\n    x8 = chain(x4, first, x7)\n    x9 = sfilter(x5, x8)\n    x10 = asindices(x9)\n    x11 = ofcolor(x9, x4)\n    x12 = toindices(x11)\n    x13 = mapply(first, x12)\n    x14 = fill(x9, ZERO, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x16, x14)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x19)\n    x25 = rbind(divide, x18)\n    x26 = apply(x24, x15)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = apply(x27, x28)\n    x30 = hconcat(x17, x17)\n    x31 = hconcat(x29, x27)\n    x32 = vconcat(x30, x31)\n    x33 = vconcat(x32, x17)\n    x34 = ofcolor(x33, ONE)\n    x35 =314(x34)\n    x36 = subgrid(x35, x33)\n    x37 = increment(x38)\n    x38 = branch(x37, x35, x37)\n    x39 = lbind(mapply, x36)\n    x40 = lbind"], [1.1, "def solve_e75aea00(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = delta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = delta(x2)\n    x6 = box(x2)\n    x7 = intersection(x5, x6)\n    x8 = uppermost(x7)\n    x9 = uppermost(x2)\n    x10 = equality(x8, x9)\n    x11 = leftmost(x7)\n    x12 = leftmost(x2)\n    x13 = equality(x11, x12)\n    x14 = lowermost(x7)\n    x15 = lowermost(x2)\n    x16 = equality(x14, x15)\n    x17 = rightmost(x7)\n    x18 = rightmost(x2)\n    x19 = equality(x17, x18)\n    x20 = urcorner(x7)\n    x21 = ulcorner(x7)\n    x22 = llcorner(x7)\n    x23 = lrcorner(x7)\n    x24 = branch(x16, x22, x23)\n    x25 = branch(x13, x21, x24)\n    x26 = branch(x10, x20, x25)\n    x27 = branch(x16, x23, x20)\n    x28 = branch(x13, x22, x27)\n    x29 = branch(x10, x21, x28)\n    x30 = branch(x16, DOWN_LEFT, UNITY)\n    x31 = branch(x13, NEG_UNITY, x30)\n    x32 = branch(x10, UP_RIGHT, x31)\n    x33 = branch(x16, UNITY, UP_RIGHT)\n    x34 = branch(x13, DOWN_LEFT, x33)\n    x35 = branch(x10, NEG_UNITY, x34)\n    x36 = branch(x16, DOWN, RIGHT)\n    x37 = branch(x13, LEFT, x36)\n    x38 = branch(x10"], [1.1, "def solve_1f6763bc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x38, first)\n    x40 = fork(paint, x38, x39)\n    x41 = rbind(contained, x17"], [1.1, "def solve_02364e0a(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = rbind(toobject, I)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(colorcount, x1)\n    x7 = matcher(x6, EIGHT)\n    x8 = rbind(toobject, I)\n    x9 = matcher(x8,0000000)\n    x10 = rbind(colorcount, x1)\n    x11 = matcher(x10, EIGHT)\n    x12 = chain(x9, x11, backdrop)\n    x13 = lbind(fork, paint)\n    x14 = lbind(x13, identity)\n    x15 = lbind(rbind, colorcount)\n    x16 = compose(x14, x15)\n    x17 = lbind(colorfilter, x5)\n    x18 = chain(x16, x17, x16)\n    x19 = lbind(rbind, costgrid)\n    x20 = chain(x19, width, x8)\n    x21 = chain(corners, x18, x20)\n    x22 = lbind(chain, x21)\n    x23 = rbind(x22,asobject)\n    x24 = lbind(rbind, x contained)\n    x25 = chain(first, x23, x24)\n    x26 =997(x1, x25)\n    x27 = chain(x07, x25, xdmirror)\n    x28 = astuple(x26, x26)\n    x29 = astuple(NEG_TWO, x28)\n    x30 = astuple(x31, x29)\n    x31 = x17(x30)\n    x32 = papply(x27, x31)\n    x33 = papply(x29, x32)\n    x34 = ofcolor(I, x1)\n    x35 = combine(x34, x52)\n    x36 = intersection(x34, x35)\n    x37 = fill(I, ZERO, x36)"], [1.1, "def solve_217ad3e7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_06605e29(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =885(I)\n    x2 =887(x1, FOUR)\n    x3 = argmin(x2, size)\n    x4 = astuple(ONE, THREE)\n    x5 = astuple(TWO, FOUR)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x3, x7)\n    x9 = tojvec(x8)\n    x10 = tojvec(x1)\n    x11 = double(x10)\n    x12 = double(x11)\n    x13 = tojvec(x12)\n    x14 = tojvec(x11)\n    x15 = double(x9)\n    x16 = repeat(x13, x15)\n    x17 = Flake ring(x16)\n    x18 = compose(normalize, first)\n    x19 = fork(subtract, x18, last)\n    x20 = upscale(x17, x19)\n    x21 = asobject(x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = decrement(x23)\n    x25 = height(x21)\n    x26 = subtract(x24, x25)\n    x27 = width(x21)\n    x28 = decrement(x27)\n    x29 = width(x21)\n    x30 = subtract(x28, x29)\n    x31 = astuple(x26, x30)\n    x32 = canvas(ZERO, x31)\n    x33 = ulcorner(x2)\n    x34 = invert(x33)\n    x35 = shift(x34, x31)\n    x36 = ofcolor(I, x23)\n    x37 = lbind(shift, x35)\n    x38 = interval(x32, x32, ONE)\n    x39 = apply(x38, x36)\n    x40 = mapply(x37, x39)\n    x41 = astuple(x43, x40)\n    x42 = canvas(ZERO, x41)\n    O"], [1.1, "def solve_103b8b19(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_311eb51c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(sfilter, x1)\n    x2 = lbind(matcher, flip)\n    x3 = compose(x2, leastcolor)\n    x4 = chain(normalize, mostcolor, x3)\n    x5 = x4(I)\n    x6 = astuple(cmirror, dmirror)\n    x7 = astuple(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(x6, x8)\n    x10 = insert(x9, x8)\n    x11 = apply(x4, x10)\n    x12 = product(x11, x11)\n    x13 = sfilter(x12, first)\n    x14 = compose(last, first)\n    x15 = difference(x12, x13)\n    x16 = compose(last, last)\n    x17 = matcher(x14, x55)\n    x18 = sfilter(x15, x17)\n    x19 = lbind(recolor, TWO)\n    x20 = lbind(ofcolor, I)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, x21, x19)\n    x23 = compose(x19, x22)\n    x24 = fork(paint, x23, x12)\n    x25 = chain(x39, x40, x24)\n    x26 = mapply(x25, x13)\n    x27 = objects(x26, T, T, T)\n    x28 = mapply(toindices, x27)\n    x29 = box(x28)\n    x30 = difference(x29, x28)\n    x31 = intersection(x30, x28)\n    x32 = first(x31)\n    x33 = x30(x32)\n    x34 = ofcolor(I, TWO)\n    x35 =contained(ZERO, x34)\n    x36 = lbind(contained, TWO)\n    x37 = compose(x36, last)\n    x38 = sfilter(x34, x37)\n    x39 = center(x38)\n"], [1.1, "def solve_aa198d92(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_e763443b(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_124b60c7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained,ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(0520, x2)\n    x4 = lbind(equality, NINE)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(size, cmirror)\n    x8 = chain(DEPrement, x7, x6)\n    x9 = argmax(x10, x8)\n    x10 = multiply(x19, x9)\n    x11 = chain(x17, minimum, x10)\n    x12 = argmin(x00, x11)\n    x13 = other(x1, x12)\n    x14 = flip(x13)\n    x15 = branch(x14, identity, vmirror)\n    x16 = x15(x12)\n    x17 = objects(x16, T, T, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, x18)\n    x20 = chain(19, toindices, x19)\n    x21 = fork(add, first, x20)\n    x22 = chain(flip, x6, x21)\n    x23 = sfilter(x18, x22)\n    x24 = fork(contained, x23, identity)\n    x25 = normalize(x12)\n    x26 = lbind(shift, x25)\n    x27 = compose(x26, ulcorner)\n    x28 = fork(equality, identity, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(multiply, x30)\n    x31 = rbind(shift, x30)\n    x32 = compose(x30, x31)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = rbind(multiply, x30)\n    x36 = rbind(shift, x33)\n    x37 = fork(connect, x35, x36)\n    x38 = compose("], [1.1, "def solve_c0d850cb(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_2eb5a999(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = remove(UNITY, x1)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = divide(x3, x7)\n    x9 = width(I)\n    x10 = halve(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, vline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = halve(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, x26)\n    x32 = lbind(index, I)\n    x33 = lbind(compose, x12)\n    x34 = compose(x33, x25)\n    x35 = chain(x32, x34, x29)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, x25)\n    x38 = fork(equality, x37, x30)\n    x39 = palette(I)\n    x40 = sfilter(x39, x38)\n    x41 = lbind(colorcount, I)\n    x42 = argmin(x40, x41"], [1.1, "def solve_9424a4b5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = last(x2)\n    x6 = ofcolor(I, x5)\n    x7 = asindices(I)\n    x8 = center(x7)\n    x9 = initset(x8)\n    x10 = insert(x4, x9)\n    x11 = insert(x5, x10)\n    x12 = frontiers(I)\n    x13 = sfilter(x12, hline)\n    x14 = size(x13)\n    x15 = positive(x14)\n    x16 = branch(x15, identity, dmirror)\n    x17 = x16(I)\n    x18 = rbind(multiply, x1)\n    x19 = compose(x18, identity)\n    x20 = shape(x17)\n    x21 = canvas(x20, x20)\n    x22 = lbind(greater, x21)\n    x23 = compose(x22, first)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(positive, size, x24)\n    x26 = rbind(compose, x00)\n    x27 = lbind(x26, x17)\n    x28 = rbind(compose, x23)\n    x29 = lbind(rbind, contained)\n    x30 = chain(x27, x28, x29)\n    x31 = lbind(fork, x22)\n    x32 = lbind(x31, identity)\n    x33 = lbind(rbind,compose)\n    x34 = chain(x32, x33, x30)\n    x35 = lbind(fork, x26)\n    x36 = fork(x55, x23, x32)\n    x37 = fork(compose, x36, x34)\n    x38 = lbind(matcher, x25)\n    x39 = compose(x38, x37)\n    x40 = fork(sfilter, x35, x39"], [1.1, "def solve_0c887db4(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(address, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_1f52ebbd(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x21)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_d40d1ff0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = Fgpartition(I)\n    x2 = merge(x1)\n    x3 = box(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = subgrid(x2, x4)\n    x6 = argmax(x1, width)\n    x7 = uppermost(x6)\n    x8 = leftmost(x6)\n    x9 = height(x5)\n    x10 = width(x5)\n    x11 = divide(x9, x10)\n    x12 = add(x8, UNITY)\n    x13 = subtract(x12, x11)\n    x14 = uppermost(x6)\n    x15 = width(x6)\n    x16 = interval(x14, x15, ZERO)\n    x17 = add(x8, x16)\n    x18 = hsplit(x11, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = compose(x21, first)\n    x23 = rbind(colorcount, x20)\n    x24 = matcher(x23, x22)\n    x25 = mfilter(x19, x24)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x5)\n    x28 = matcher(first, x20)\n    x29 = compose(flip, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = compose(x30, x15)\n    x32 = rbind(sfilter, x111)\n    x33 = compose(x32, x152)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x19)\n    x36 = lbind(e98196)\n    x37 = compose(x36, x30)\n    x38 = fork(apply, x37, x31)\n    x39 = fork(mapply, x35, x38)\n    x40 = fork(difference, x38, ZERO)\n    x41"], [1.1, "def solve_ae28a374(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =8900076363e21)\n    x6 = neighbors(UNITY)\n    x7 = toindices(x6)\n    x8 = box(x7)\n    x9 = rbind(825efilter, x8)\n    x10 =411170(x9)\n    x11 = x9(x10)\n    x12 = fill(I, x4, x11)\n    x13 = x9(x12)\n    x14 = interval(ONE, FIVE, ONE)\n    x15 = downscale(x13, x14)\n    x16 = objects(x12, F, F, T)\n    x17 = rbind(toobject, x15)\n    x18 = compose(vperiod, x17)\n    x19 = height(x12)\n    x20 = rbind(multiply, x19)\n    x21 = chain(x20, toindices, x18)\n    x22 = lbind(add, x5)\n    x23 = compose(x22, x21)\n    x24 = fork(add, first, x23)\n    x25 = compose(x17, x24)\n    x26 = shape(x15)\n    x27 = multiply(x26, x26)\n    x28 = lbind(multiply, x27)\n    x29 = x28(x15)\n    x30 = shift(x15, x29)\n    x31 = rbind(multiply, x30)\n    x32 = compose(x31, x241)\n    x33 = rbind(multiply, x32)\n    x34 = fork(add, x33, x24)\n    x35 = rbind(multiply, x30)\n    x36 = compose(x35, x24)\n    x37 = fork(add, x36, x37)\n    x38 = fork(equality, x38, x34)\n    x39 = sfilter(x18, x38)\n    x"], [1.1, "def solve_cd122d5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_2c434bab(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = x1(I)\n    x2 = objects(x1, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, minimum, shape)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = mostcolor(I)\n    x9 = palette(x7)\n    x10 = matcher(identity, x8)\n    x11 = argmin(x9, x10)\n    x12 = color(x11)\n    x13 = subgrid(x11, x1)\n    x14 = hmirror(x13)\n    x15 = argmin(x12, x14)\n    x16 = remove(x11, x15)\n    x17 =348(x16)\n    x18 = subgrid(x17, x1)\n    x19 = index(x18, DOWN)\n    x20 = lowermost(x15)\n    x21 = add(x20, x20)\n    x22 = width(x7)\n    x23 = rightmost(x15)\n    x24 = add(x23, x2)\n    x25 = height(x7)\n    x26 = *rightmost(x7)\n    x27 = width(x7)\n    x28 = interval(x26, x27, ONE)\n    x29 = add(x24, x27)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = lbind(shift, x17)\n    x33 = mapply(x32, x31)\n    x34 = interval(decrement, x22, ONE)\n    x35 = lbind(hmirror, x24)\n    x36 = astuple(x35, x)\n    x37 = lbind(cmirror, x17)\n    x38 = add(x37, x349)\n    x39 = x10(x38)\n    x40 = dmirror(x39)\n    x"], [1.1, "def solve_591f345a(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = shape(I)\n    x3 = maximum(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = interval(ONE, x3, ONE)\n    x6 = rbind(toobject, I)\n    x7 = rbind(shoot, RIGHT)\n    x8 = rbind(shoot, LEFT)\n    x9 = objects(x7, T, F, F)\n    x10 = rbind(shoot, DOWN)\n    x11 = rbind(shoot, UP)\n    x12 = rbind(shoot, DOWN)\n    x13 = mapply(x11, x9)\n    x14 = mapply(x12, x10)\n    x15 = combine(x13, x14)\n    x16 = apply(x15, x15)\n    x17 = lbind(canvas, ZERO)\n    x18 = lbind(occurrences, I)\n    x19 = compose(x17, x18)\n    x20 = lbind(recolor, ONE)\n    x21 = chain(x20,paint, x19)\n    x22 = lbind(ofcolor, I)\n    x23 = fork(size, x22, x21)\n    x24 = compose(maximum, x23)\n    x25 = apply(x24, x16)\n    x26 = repeat(x25, ONE)\n    x27 =047676(x26)\n    x28 = partition(x27)\n    x29 = lbind(colorcount, x27)\n    x30 = argmax(x28, x29)\n    x31 = apply(x30, x29)\n    x32 = matcher(contained, x31)\n    x33 = sfilter(x32, x32)\n    x34 = apply(color, x33)\n    x35 =64(x34)\n    x36 = astuple(ONE, THREE)\n    x37 = rbind(subtract, x36)\n    x38 = chain(halve, x37, x36)\n    x39 = fork(shift, x33, x38)\n    x40 = mapply"], [1.1, "def solve_f0cf962c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = objects(x26, s, F, T)\n    x28 = colorfilter(x27, x7)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = sfilter(x28, x30)\n    x32 = sfilter(x28, x24)\n    x33 = extract(x31, x32)\n    x34 = first(x33)\n    x35 = last(x33)\n    x36 = gravitate(x34, x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x16, x37)\n    x39 = leftmost(x37)\n    x40 = rightmost(x37)\n    x41 = astuple(x39,"], [1.1, "def solve_aefdb417(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = switch(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = fork(add, height, width)\n    x4 = rbind(decrement, x3)\n    x5 = chain(decrement, x4, shape)\n    x6 = fork(equality, size, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, x5)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(I, x9)\n    x11 = center(x10)\n    x12 = multiply(x11, x4)\n    x13 = shift(x12, x11)\n    x14 = fill(I, x9, x13)\n    x15 = toindices(x13)\n    x16 = lbind(\"\"\"\n    x17 = box(x13)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = toindices(x4)\n    x21 = lbind(intersection, x20)\n    x22 = chain(x19, size, x21)\n    x23 = argmax(x15, x22)\n    x24 = lbind(colorcount, x14)\n    x25 = argmin(x23, x24)\n    x26 = replace(x14, x25, x9)\n    x27 = color(x13)\n    x28 = colorfilter(x25, x27)\n    x29 = fill(x26, x39, x28)\n    x30 = argmin(x29, x22)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(halve, x31)\n    x33 = fork(add, first, x32)\n    x34 = x33(x26)\n    x35 = x33(x24)\n    x36 = x33(x30)\n    x37 = fill(x29, x35, x36)\n    x38 = fill(x37, x41, x34)\n    x39 =fill("], [1.1, "def solve_06011d54(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(ppaint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_27375e2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_52889f0d(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = shape(x27)\n    x30 = multiply(x29, THREE)\n    x31 = x26(I)\n    x32 = maximum(x30)\n    x33 = lbind(astuple, x32)\n    x34 = lbind(shoot, x27)\n    x35 = rightmost(x27)\n    x36 = equality(x32, x35)\n    x37 = branch(x36, x33, x34)\n    x38 = apply(x37, x39)\n    x39 = leftmost(x27)\n    x40 = decrement(x39"], [1.1, "def solve_ecd5ad9d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0008f503(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, rot90)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, size)\n    x27 = fork(sfilter, x25, x26)\n    x28 = lbind(colorcount, I)\n    x29 = argmax(x17, x28)\n    x30 = rbind(canvas, x3)\n    x31 = compose(x30, x22)\n    x32 = rbind(multiply, x6)\n    x33 = compose(x32, x19)\n    x34 = fork(equality, x33, x21)\n    x35 = rbind(n28, x34)\n    x36 = lbind(apply, x21)\n    x37 = chain(x131, x35, x36)\n    x38 = fork(sfilter, x27, x37)\n    x39 = fork(difference, x28, x38)\n"], [1.1, "def solve_6a535df9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = vsplit(I, TWO)\n    x7 = switch(x6, EIGHT, FOUR)\n    x8 = apply(x5, x7)\n    x9 = order(x8, identity)\n    x10 = last(x9)\n    x11 = remove(x10, x9)\n    x12 = compose(hmirror, merge)\n    x13 = lbind(compose, flip)\n    x14 = lbind(matcher, first)\n    x15 = chain(x13, x14, mostcolor)\n    x16 = fork(sfilter, identity, x15)\n    x17 = chain(increment, tojvec, x16)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x17, x18, identity)\n    x20 = lbind(fork, greater)\n    x21 = compose(x20, last)\n    x22 = lbind(rbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x21)\n    x25 = lbind(rbind, x24)\n    x26 = chain(x19, x24, x25)\n    x27 = compose(x5, x2)\n    x28 = fork(sfilter, identity, x27)\n    x29 = chain(first, x13, x28)\n    x30 = fork(compose, x29, x23)\n    x31 = compose(x5, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x360, x11)\n    x34 = mapply(x32, x10)\n    x35 = combine(x33, x34)\n    x36 = mapply(x32, x20)\n    x37 = mapply(x32, x27)\n    x38 = m"], [1.1, "def solve_94f0ea96(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(5521, UNITY)\n    x3 = rbind(subgrid, I)\n    x4 = chain(numcolors, x2)\n    x5 = matcher(x4, ONE)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = chain(positive, size, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(dmirror, merge)\n    x11 = chain(normalize, x10, x8)\n    x12 = chain(ff28, x11, x9)\n    x13 = chain(dmirror, x11, x12)\n    x14 = fork(concat, x11, x13)\n    x15 = fork(compose, x14, x11)\n    x16 = lbind(chain, size)\n    x17 = lbind(x16, x10)\n    x18 = rbind(compose, x17)\n    x19 = lbind(rbind, subtract)\n    x20 = chain(x18, x19, x15)\n    x21 = rbind(rapply, I)\n    x22 = initset(x7)\n    x23 = lbind(rapply, x22)\n    x24 = chain(first, x21, x23)\n    x25 = compose(x20, x24)\n    x26 = argmax(x9, x25)\n    x27 = first(x26)\n    x28 = last(x26)\n    x29 = x27(I)\n    x30 = x27(x28)\n    x31 = palette(x30)\n    x32 = shape(x30)\n    x33 = lbind(apply, first)\n    x34 = lbind(ofcolor, x30)\n    x35 = chain(x33, x34, x28)\n    x36 = replace(x30, SIX, ZERO)\n    x37 = apply(x35, x36)\n    x38 = astuple(x31, x"], [1.1, "def solve_45e52190(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = compose(normalize, toindices)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x4)\n    x9 = paint(x7, x8)\n    x10 = shape(x4)\n    x11 = width(x9)\n    x12 = height(x9)\n    x13 = normalize(x4)\n    x14 = interval(x11, x12, ONE)\n    x15 = paint(x9, x14)\n    x16 = shape(x4)\n    x17 = interval(x13, x16, ONE)\n    x18 = rbind(toobject, x9)\n    x19 = lbind(278, multiply)\n    x20 = chain(x18, x19, mostcolor)\n    x21 = rbind(afivec, x10)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(canvas, x5)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(remove, x23, x26)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(chain, x18)\n    x30 = lbind(x29, normalize)\n    x31 = lbind(x30, x27)\n    x32 = rbind(difference, x15)\n    x33 = compose(x31, x32)\n    x34 = rbind(apply, x15)\n    x35 = chain(size, x34, x28)\n    x36 = argmax(x17, x35)\n    x37 =06(x36, x31)\n    x38 = color(x37)\n    x39 =O = paint(x37, x38)\n    x40 = height("], [1.1, "def solve_01af9c72(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 =11e(I)\n    x8 = hmatching(x7, x4)\n    x9 = branch(x8, identity, vmirror)\n    x10 = x9(I)\n    x11 = trim(x10)\n    x12 = palette(x11)\n    x13 = matcher(identity, x12)\n    x14 = vmirror(x11)\n    x15 = hmirror(x11)\n    x16 = vmirror(x15)\n    x17 = asindices(x16)\n    x18 = shift(x17, UNITY)\n    x19 = paint(x10, x18)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = center(x21)\n    x23 = dmirror(x21)\n    x24 = shift(x23, x22)\n    x25 = paint(x19, x24)\n    x26 = toindices(x24)\n    x27 = initset(x26)\n    x28 = remove(x25, x20)\n    x29 = insert(x28, x26)\n    x30 = product(x27, x29)\n    x31 = rbind(intersection, x22)\n    x32 = compose(size, x31)\n    x33 = matcher(x32, ZERO)\n    x34 = branch(x33, x44, x25)\n    x35 = flip(x34)\n    x36 = branch(x35, x24, x25)\n    x37 = branch(x35, x16, x25)\n    x38 = branch(x35, x22, x25)\n    x39 = branch(x35, x19, x27)\n    x40 = branch(x35, x36, x31)\n    x41 = branch("], [1.1, "def solve_8db7e957(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13) extract(x16, identity)\n    x17 = last(x16)\n    x18 = remove(x4, x16)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x13, x19)\n    x21 = rbind(first, x15)\n    x22 = compose(first, backdrop)\n    x23 = fork(compose, x21, x22)\n    x24 = lbind(lbind, shift)\n    x25 = height(x19)\n    x26 = matcher(x25, ZERO)\n    x27 = lbind(fork, both)\n    x28 = rbind(x27, x26)\n    x29 = extract(x15, x28)\n    x30 = center(x29)\n    x31 = matcher(last, x30)\n    x32 = compose(flip, x31)\n    x33 = center(x29)\n    x34 = initset(x33)\n    x35 = insert(x16, x34)\n    x36 = insert(x31, x35)\n    x37 = dmirror(x36)\n    x38 = lbind(shift, x37)\n    x39 = occurrences(x38, x38)\n    x40 = mapply(x38, x39)\n    x41 = fill"], [1.1, "def solve_97a8ed05(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_397bb0d0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_355127f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2770d49d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a73b4210(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = objects(I, T, F, T)\n    x32 = apply(toindices, x31)\n    x33 = lbind(compose, normalize)\n    x34 = lbind(rbind, contained)\n    x35 = chain(x33, x34, leftmost)\n    x36 = chain(size, x32, x35)\n    x37 = equality(x36, ONE)\n    x38 = mapply(x37, x29)\n    x39"], [1.1, "def solve_064317bd(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =675(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = width(I)\n    x7 = equality(x5, x6)\n    x8 = toivec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = shape(I)\n    x11 = halve(x10)\n    x12 = canvas(ZERO, x11)\n    x13 = ofcolor(I, ZERO)\n    x14 = asindices(x13)\n    x15 = difference(x14, x13)\n    x16 = rbind(toobject, I)\n    x17 = compose(first, x16)\n    x18 = apply(x17, x15)\n    x19 = interval(ZERO, x5, ONE)\n    x20 = product(x19, x19)\n    x21 = apply(last, x20)\n    x22 = lbind(recolor, ZERO)\n    x23 = compose(x22,\n    x24 = matcher(first, ZERO)\n    x25 = rbind(sfilter, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = chain(x26, x25, x25)\n    x28 = chain(x27, x26, x25)\n    x29 = lbind(shift, x14)\n    x30 = fork(combine, x29, x28)\n    x31 = compose(x30, x23)\n    x32 = fork(mapply, x31, x29)\n    x33 = mapply(x32, x21)\n    O = paint(x12, x33)\n    return O"], [1.1, "def solve_3aa3d87a(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(remove, ZERO)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 =7523(I)\n    x5 = lbind(occurrences, x4)\n    x6 = compose(x5, x3)\n    x7 = fork(mapply, x3, x6)\n    x8 = compose(cmirror, x7)\n    x9 = fork(occurrences, x8, toindices)\n    x10 = compose(lrcorner, x9)\n    x11 = fork(shift, x10, x8)\n    x12 = compose(UNITY, x11)\n    x13 = leastcolor(I)\n    x14 = ofcolor(I, x13)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(I, x13, x19)\n    O = mapply(x12, x4)\n    return O"], [1.1, "def solve_03679c68(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = rbind(contained, x5)\n    x7 = compose(x6, first)\n    x8 = rbind(sfilter, x7)\n    x9 = lbind(rbind, subtract)\n    x10 = lbind(occ):\n    x11 = apply(x9, x5)\n    x12 = lbind(lbind, shift)\n    x13 = x17(x11)\n    x14 = x12(x12)\n    x15 = fork(apply, x7, x8)\n    x16 = fork(apply, x12, x14)\n    x17 = fork(paint, identity, x15)\n    x18 = identity(x16)\n    x19 = dmirror(I)\n    x20 = papply(pair, x19, x8)\n    x21 = lbind(apply, x17)\n    x22 = apply(x21, x20)\n    x23 = argmin(x22, x7)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = replace(x19, x25, x24)\n    x27 = apply(x16, x26)\n    x28 = color(x27)\n    x29 = ofcolor(x25, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    O = fill(x45, x28, x33)\n    return O"], [1.1, "def solve_d41d2edc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =6879641\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = width(x12)\n    x14 = subtract(x13, ONE)\n    x15 = divide(x14, TWO)\n    x16 = height(x12)\n    x17 = subtract(x16, TWO)\n    x18 =160(x17)\n    x19 = lbind(shift, x12)\n    x20 = rbind(multiply, x15)\n    x21 = chain(x19, x20, x19)\n    x22 = astuple(x16, x18)\n    x23 = rbind(multiply, x22)\n    x24 =10(x23)\n    x25 = lbind(shift, x12)\n    x26 = rbind(multiply, x25)\n    x27 = chain(x24, x26, x19)\n    x28 = astuple(x18, x17)\n    x29 = rbind(multiply, x28)\n    x30 =10(x29)\n    x31 = lbind(shift, x12)\n    x32 = rbind(multiply, x15)\n    x33 = chain(x31, x32, x19)\n    x34 = combine(x26, x33)\n    x35 = mapply(x21, x34)\n    x36 = paint(I, x35)\n    O = subgrid(x3, x36)\n    return O"], [1.1, "def solve_56f45d23(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot197, merge)\n    x3 = valmax(x1, height)\n    x4 = matcher(size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 =1884615096444f830(I):\n    O = fill(I, FIVE, x8)\n    return O"], [1.1, "def solve_f19f03ad(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = rbind(Example output:\n    8224669124\n    2872000837\n    6213758198\n    5239174079\n    8895626318\n    2128321892\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    \"\"\"\n    x2 =92(ofcolor, I)\n    x3 = compose(first, last)\n    x4 = rbind(subgrid, I)\n    x5 = chain(x4, mostcolor, x3)\n    x6 = fork(650, x5, x4)\n    x7 = lbind(greater, THREE)\n    x8 = compose(x7, x6)\n    x9 = sfilter(x2, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.1, "def solve_3e58962e(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = fork(both, x3, x4)\n    x6 = extract(x3, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = backdrop(x6)\n    x9 =6666(x8, identity)\n    x10 = initset(x7)\n    x11 = matcher(x7, x10)\n    x12 = sfilter(x6, x11)\n    x13 = difference(x6, x12)\n    x14 = toobject(x13, I)\n    x15 = matcher(first, x1)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x14, x16)\n    x18 = merge(x17)\n    x19 = fill(I, TWO, x18)\n    x20 = color(x6)\n    O = fill(x19, x20, x2)\n    return O"], [1.1, "def solve_cd025170(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =9af4ty694\n    d687934510\n    4006941674\n    1100490694\n    8995020098\n    9706069391\n    975d9001ae(99fa2020\n    8097267001\n    7231163527\n    9214080289\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = ofcolor(I, ONE)\n    x5 = subgrid(x4, x2)\n    x6 = argmax(x4, width)\n    x7 = subgrid(x6, x3)\n    x8 = subgrid(x7, x2)\n    x9 = height(x8)\n    x10 = lowermost(x8)\n    x11 = width(x8)\n    x12 = divide(x9, x11)\n    x13 = upscale(x5, x12)\n    x14 = ofcolor(x13, ONE)\n    x15 = subgrid(x14, x8)\n    x16 = colorcount(x15, ZERO)\n    x17 = rightmost(x16)\n    x18 = add(x17, x10)\n    x19 = tojvec(x18)\n    x20 = vmirror(x15)\n    x21 = invert(x20)\n    x22 = shift(x20, x21)\n    x23 = apply(x22, x16)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = astuple(x26, x22)\n    x28 = lbind(multiply, x27)\n    x29 = apply(x28, x26)\n    x30 = interval(ZERO, x5, ONE)\n    x31 = pair(x30, x30)\n    x32 = mapply(box, x31)\n    O = fill(x15, FOUR, x32)\n    return O"], [1.1, "def solve_73822e19(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(6696, TWO)\n    x7 = rbind(colorcount, TWO)\n    x8 = argmax(x5, x7)\n    x9 = subgrid(x8, I)\n    x10 = rbind(contained, x4)\n    x11 = rbind(subtract, x4)\n    x12 = chain(x10, x11, minimum)\n    x13 = rbind(greater, ONE)\n    x14 = rbind(x13, TWO)\n    x15 = chain(x14, x11, normalize)\n    x16 = lbind(contained, TWO)\n    x17 =12(x16)\n    x18 = rbind(gravitate, x8)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(I, x4, x22)\n    return O"], [1.1, "def solve_36a6ad3e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = fork(combine, x13, x17)\n    x19 = fork( apply(x18, x3)\n    x20 = rbind(argmin, lrcorner)\n    x21 = compose(x20, delta)\n    x22 = fork(subtract, x21, x15)\n    x23 = fork(shift, x17, x22)\n    x24 = rbind(x23, RIGHT)\n    x25 = compose(x24, ulcorner)\n    x26 = x25(x2)\n    x27 = fork(subtract, x26, x24)\n    x28 = fork(shift, x22, x27)\n    x29 = fork(combine, x28, x21)\n    x30 = mapply(x29, x3)\n    O = underfill(I, EIGHT, x30)\n    return O"], [1.1, "def solve_9ad341d6(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = totuple(x6)\n    x8 =66666666(x5, x7)\n    x9 = lbind(lbind, astuple)\n    x10 = lbind(chain, x9)\n    x11 = compose(x10, x4)\n    x12 = lbind(lbind, mapply)\n    x13 = x11(x12)\n    x14 = combine(x8, x13)\n    x15 = difference(x7, x14)\n    x16 = apply(x11, x15)\n    x17 = ofcolor(I, x5)\n    x18 = intersection(x17, x16)\n    O = fill(I, TWO, x18)\n    return O"], [1.1, "def solve_cfa5a811(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =9097(I)\n    x2 = dmirror(I)\n    x3 = papply(pair, I, x1)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(x14, ZERO)\n    x16 = subgrid(x15, x14)\n    x17 = apply(x4, x16)\n    x18 = hmirror(x17)\n    x19 = papply(pair, x17, x18)\n    x20 = apply(x4, x19)\n    x21 = vmirror(x20)\n    x22 = papply(pair, x21, x20)\n    O = apply(x4, x22)\n    return O"], [1.1, "def solve_e45ea913(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = normalize(I)\n    x3 = mostcolor(I)\n    x4 = canvas(x3, x1)\n    x5 = objects(I, F, F, T)\n    x6 =65(x5)\n    x7 = mostcolor(x6)\n    x8 = first(x5)\n    x9 = matcher(first, x7)\n    x10 = sfilter(x8, x9)\n    x11 = normalize(x10)\n    x12 = objects(I, T, F, T)\n    x13 = compose(toindices, lrcorner)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x12, x14)\n    x16 = normalize(x15)\n    x17 = objects(I, T, F, T)\n    x18 = sizefilter(x17, TWO)\n    x19 = apply(invert, x18)\n    x20 = shift(x19, x17)\n    x21 = merge(x80)\n    x22 = fill(I, x7, x21)\n    x23 = shift(x20, x17)\n    x24 = fill(x22, x7, x23)\n    x25 = shift(x21, x17)\n    x26 = fill(x24, x7, x25)\n    O = paint(x26, x20)\n    return O"], [1.1, "def solve_b08cc038(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [1.1, "def solve_fd237548(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = rbind(adjacent, DOWN)\n    x11 = sfilter(x9, x10)\n    x12 =444(x11)\n    x13 =002(x12,80)\n    x14 = vmirror(x13)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x4)\n    x17 = rbind(bordering, I)\n    x18 = compose(flip, x17)\n    x19 = mfilter(x16, x18)\n    O = fill(I, EIGHT, x19)\n    return O"], [1.1, "def solve_ad949fc9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = ONE(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = palette(x3)\n    x5 =71e2676(x4)\n    x6 = palette(x3)\n    x7 = intersection(x5, x6)\n    x8 =711219723(x2)\n    x9 = shape(x3)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(x3, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = FOUR(x13)\n    x15 = subgrid(x13, x14)\n    x16 = interval(ONE, FOUR, ONE)\n    x17 = lbind(power, rot90)\n    x18 = initset(x17)\n    x19 = chain(x18, repeat, fgpartition)\n    x20 = lbind(lbind, shift)\n    x21 = occurrences(x15, x16)\n    x22 = mapply(x20, x21)\n    O = paint(x10, x22)\n    return O"], [1.1, "def solve_d8dc42ad(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = argmax(I, size)\n    x2 = color(x1)\n    x3 = subgrid(x1, I)\n    x4 = objects(x3, F, T, T)\n    x5 = argmin(x4, size)\n    x6 = subgrid(x5, I)\n    x7 = normalize(x6)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 = ZERO(x8)\n    x11 = astuple(x10, x9)\n    x12 = add(x11, ORIGIN)\n    x13 = hupscale(x3, x12)\n    x14 = output:\n    x13, x7)\n    x15 = width(x7)\n    x16 = height(x7)\n    x17 = tojvec(x16)\n    x18 = lbind(shift, x7)\n    x19 = compose(x18, toivec)\n    x20 = height(x7)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = apply(x19, x22)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x23)\n    x26 = combine(x28, x25)\n    x27 = paint(x3, x26)\n    x28 = lbind(shift, x7)\n    x29 = rapply(x28, x25)\n    x30 = mapply(x29, x28)\n    x31 = paint(x27, x30)\n    O = branch(x5, x30, x31)\n    return O"], [1.1, "def solve_17defa96(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(shift, I)\n    x2 = lbind(multiply, THREE)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = chain(decrement, dmirror, x4)\n    x6 = fork(equality, toindices, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = x5(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 =565(x10)\n    x13 = in2005(x12)\n    x14 =730(x10)\n    x15 = lefthalf(x14)\n    x16 = righthalf(x14)\n    x17 = rbind(order, leftmost)\n    x18 = compose(x17, x16)\n    x19 = rbind(order, rightmost)\n    x20 = compose(x19, x16)\n    x21 = rbind(order, ZERO_BY_TWO)\n    x22 = compose(x21, x19)\n    x23 = fork(combine, x18, x20)\n    x24 = fork(combine, x23, x22)\n    x25 = compose(x24, backdrop)\n    x26 = fork(recolor, x25, x20)\n    x27 = mapply(x26, x8)\n    x28 = paint(x10, x27)\n    x29 = dmirror(x28)\n    x30 = objects(x29, T, F, T)\n    x31 =907(x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = pair(x33, x30)\n    x35 = mapply(last, x34)\n    x36 = paint(x27, x35)\n    O = x5(x36)\n    return O"], [1.1, "def solve_ecc72f4c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 =81(I)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(x5, x6)\n    x8 = double(x2)\n    x9 = compose(multiply, last)\n    x10 = argmin(x7, x9)\n    O = mostcolor(x10)\n    return O"], [1.1, "def solve_4da80f6c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = replace(x6, NEG_ONE, ZERO)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter, x21, x17)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.1, "def solve_24147c9c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =782(x2)\n    x4 = apply(color, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x5)\n    O = fill(x6, TWO, x8)\n    return O"], [1.1, "def solve_cbd0aacf(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = ofcolor(I, x8)\n    x10 = urcorner(x9)\n    x11 = ulcorner(x9)\n    x12 = shoot(x11, NEG_UNITY)\n    x13 = shoot(x11, UP_RIGHT)\n    x14 = combine(x12, x13)\n    x15 = underfill(I, ZERO, x14)\n    x16 = objects(x15, T, F, T)\n    x17 =597158(x16, merge)\n    x18 = center(x17)\n    x19 = shoot(x18, DOWN_LEFT)\n    x20 = shoot(x18, UNITY)\n    x21 = combine(x19, x20)\n    x22 =47(x21)\n    x23 = asindices(x11)\n    x24 = ofcolor(x11, x8)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    x29 = asindices(I)\n    x30 = shape(x11)\n    x31 = intersection(x29, x30)\n    x32 = fill(x11, x8, x31)\n    x33 = compose(first, last)\n    x34 = fork(recolor, x33, first)\n    x35 = mapply(x34, x28)\n    x36 = paint(x32, x35)\n    O = replace(x36, x8, x5)\n    return O"], [1.1, "def solve_386042f0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 =755522455\n    0942255522\n    4285065628\n    1980568079\n    9599496669\n    2740694924\n    9595380864\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [1.1, "def solve_0e1c23e2(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = chain(x4, x3, cmirror)\n    x6 = matcher(x5, ZERO)\n    x7 = extract(x1, x6)\n    x8 =49810(x7)\n    x9 = argmax(x8, identity)\n    x10 = leastcolor(x9)\n    x11 = matcher(first, x10)\n    x12 = sfilter(x8, x11)\n    x13 = merge(x12)\n    x14 = vmirror(x13)\n    x15 = mostcolor(I)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = fill(x17, x10, x14)\n    x19 = lbind(e179, x10)\n    x20 = lbind(occurrences, x18)\n    x21 = lbind(lbind, shift)\n    x22 = compose(x21, toindices)\n    x23 = chain(x19, x21, x22)\n    x24 = lbind(mapply, x23)\n    x25 = rbind(occurrences, x18)\n    x26 = lbind(mapply, x24)\n    x27 = chain(x25, x26, x22)\n    x28 = astuple(cmirror, dmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = combine(x28, x29)\n    x31 = product(x30, x30)\n    x32 = fork(compose, first, last)\n    x33 = apply(x32, x31)\n    x34 =0191524 x33)\n    x35 = combine(xsIX, x34)\n    x36 = paint(x20, x35)\n    O = paint(x36, x36)\n    return O"], [1.1, "def solve_faca5f25(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x NEG_UNITY)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    x36 = fill(x35, x11, x34)\n    O = fill(x36, x10, x35)\n    return O"], [1.1, "def solve_a1e40878(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =48(I)\n    x3 = replace(I, x1, ZERO)\n    x4 = compose(dmirror, merge)\n    x5 = x4(x3)\n    x6 = astuple(NEG_TWO, NEG_TWO)\n    x7 = shift(x5, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = mapply(x8, x7)\n    O = underfill(x3, x1, x9)\n    return O"], [1.1, "def solve_6e045321(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(x1, ZERO)\n    x3 = astuple(ZERO, ORIGIN)\n    x4 = initset(x3)\n    x5 = upscale(x4, TWO)\n    x6 = portrait(x5)\n    x7 = branch(x6, ZERO, RIGHT)\n    x8 = ulcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = shift(x9, TWO_BY_TWO)\n    x11 = branch(x6, toindices, box)\n    x12 = fork(combine, hfrontier, vfrontier)\n    x13 = x12(x110)\n    x14 = corners(x5)\n    x15 = ofcolor(x14, ZERO)\n    x16 = mapply(x12, x15)\n    x17 = difference(x10, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x19, x20)\n    x22 = other(x21, x1)\n    x23 = ofcolor(x18, x22)\n    x24 = lbind(shift, x18)\n    x25 = halve(x4)\n    x26 =345(x25)\n    x27 = subgrid(x23, x26)\n    O = trim(x27)\n    return O"], [1.1, "def solve_e4b21d87(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =44mirror(x2)\n    x4 = replace(I, NINE, ZERO)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = color(x3)\n    x7 = lbind(shift, x3)\n    x8 = apply(x7, x5)\n    x9 = mapply(x8, x4)\n    O = paint(x4, x9)\n    return O"], [1.1, "def solve_16354b3c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =52(I)\n    x5 = matcher(first, x3)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    O = fill(I, NINE, x9)\n    return O"], [1.1, "def solve_d9e6655e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width761259726\n    70721528170\n    0583544745\n    5784467579\n    5526432855\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_ff971bee(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(d687, toindices, x4)\n    x6 = lbind(difference, x1)\n    x7 = compose(x6, toindices)\n    x8 = chain(positive, size, x7)\n    x9 = lbind(lbind, shift)\n    x10 = apply(x9, x8)\n    x11 =552299b230(x10)\n    x12 = lbind(ofcolor, x4)\n    x13 = compose(x12, x8)\n    x14 = fork(recolor, x13, identity)\n    x15 = mapply(x14, x12)\n    x16 = paint(I, x15)\n    x17 =Revppaint(x16, x1)\n    O = objects(x17, T, F, T)\n    return O"]], "1e97544e": [[0.03516084518623489, "def solve_ea5df16d(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [0.05090373268510345, "def solve_6e0e6ffd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_2f2fcf1a(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_6f1b2970(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_86ed03ba(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_6f0730c0(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05978427658322649, "def solve_397ed6e5(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.05978427658322649, "def solve_ee65841b(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.06555616266185658, "def solve_fbaaf83e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_fcb97da4(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_9fc7c0a8(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_d8208217(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_73f802f1(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_263a58cd(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_e9562815(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_50b6b36c(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_f73a17bb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_07ad5d03(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_5155b3b6(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06676341038177405, "def solve_c972eccc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.06701134115995361, "def solve_4821dd5c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = subgrid(x3, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, x1, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, x1, x16)\n    return O"], [0.06927348904207718, "def solve_1f170a64(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.06959741552663885, "def solve_0a7bc089(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0709170432415734, "def solve_1031dae9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_e5a41df3(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_abb9653c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_ad996615(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_36ca63a9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.07215121867613122, "def solve_850c53d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.07443857865203833, "def solve_211e4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.07443857865203833, "def solve_c1e1f707(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.07641808482315048, "def solve_d82ab65e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_8fc26d0f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_966c3959(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_90c82262(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07909280166991962, "def solve_6c239764(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.07909280166991962, "def solve_1d799efa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.07909280166991962, "def solve_e81ccc4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.08283557492092357, "def solve_8e0b6c55(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_2e0a94bc(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08283557492092357, "def solve_1e2562e5(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.0868238750835419, "def solve_05dd9d12(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_f0ea4f02(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_47df6898(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_36d223d8(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_5f7a68b7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_19fd0a58(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_885ddf67(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_ea32005f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_c2281b96(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_90565e03(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_5f45f139(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_04574a5a(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_600e8b37(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_99d2a7b3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_5effc4d7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_c5488d26(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_3f266eba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_a01e786b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_194a097f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08682836705741089, "def solve_6ca9257e(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = astuple(x2, ONE)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = shoot(x5, RIGHT)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, FOUR, x7)\n    return O"], [0.09320112108071621, "def solve_16e409c7(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09320112108071621, "def solve_d1823fb9(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.10708488465520712, "def solve_c75e5496(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.11129810647119638, "def solve_e848cd8e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.11129810647119638, "def solve_161cf03a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.11129810647119638, "def solve_540e1458(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.11873730483078786, "def solve_a74bd57c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_1054c2f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_4b677b91(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_4d5fce32(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_b54fc6ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_357caa72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_c2932f76(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.1217171472815362, "def solve_88a16f69(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.1217171472815362, "def solve_7b19ecb9(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.1239852807263826, "def solve_6f3a6e0e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.12484931582933405, "def solve_c42446ab(I):\n    O = replace(I, FOUR, ZERO)\n    return O"], [0.12583356972621706, "def solve_b6a0d229(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.1316993167720556, "def solve_b3135066(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.13256015955962436, "def solve_6fd190e8(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.13931408711647267, "def solve_ea53f5a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.14085477486846634, "def solve_2a75e1ef(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, TWO, x3)\n    return O"], [0.14494807219729935, "def solve_85e53d92(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.15595293774320831, "def solve_cdaf8146(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15595293774320831, "def solve_caacc226(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15924388832696912, "def solve_4ac730df(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_f1c132e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_4074f730(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_576710ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_50ad09e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_11d0edd1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_3673afd6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.16903724504454612, "def solve_f8867b30(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_75279b56(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_ed258f16(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_d29215b7(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_fa0bbc5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_eadf6f49(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.17500947338981918, "def solve_7d664772(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = sfilter(x13, x10)\n    x15 = size(x14)\n    x16 = greater(x12, x15)\n    x17 = branch(x16, hmirror, identity)\n    x18 = x17(x6)\n    x19 = partition(x18)\n    x20 = matcher(color, x8)\n    x21 = extract(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = argmin(x22, uppermost)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = color(x24)\n    x27 = fill(x18, TWO, x21)\n    x28 = fill(x27, ONE, x24)\n    x29 = fill(x28, ZERO, x23)\n    x30 = rbind(order, identity)\n    x31 = dmirror(x29)\n    x32 = apply(x30, x31)\n    x33 = dmirror(x32)\n    x34 = x17(x33)\n    x35 = x5(x34)\n    x36 = ofcolor(x35, TWO)\n    x37 = fill(x35, x8, x36)\n    x38 = ofcolor(x35, ONE)\n    x39 = fill(x37, x26, x38)\n    x40 = ofcolor(x35, ZERO)\n    O = fill(x39, x25, x40)\n    return O"], [0.1773065582183363, "def solve_353e5a4b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1829495478214238, "def solve_a126ec1f(I):\n    x1 = replace(I, EIGHT, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.18335650834767755, "def solve_6931f7de(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18335650834767755, "def solve_d273b463(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.1864033961481744, "def solve_477ff01d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = mapply(x24, x19)\n    O = paint(I, x25)\n    return O"], [0.19250362516778263, "def solve_bc81486c(I):\n    x1 = replace(I, ZERO, ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.19250362516778263, "def solve_b63cb71d(I):\n    x1 = replace(I, NINE, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.20306126840468763, "def solve_37cf8237(I):\n    O = dmirror(I)\n    return O"], [0.20306126840468763, "def solve_cdf59cea(I):\n    O = dmirror(I)\n    return O"], [0.2095323090756712, "def solve_d6959afb(I):\n    O = vmirror(I)\n    return O"], [0.2159483903946915, "def solve_a8fd49cd(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.21638004878380004, "def solve_3049583f(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = asobject(I)\n    x6 = difference(x5, x4)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = paint(I, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = mapply(delta, x9)\n    O = fill(x8, ZERO, x10)\n    return O"], [0.21904040042169512, "def solve_e1c9bd3f(I):\n    O = rot180(I)\n    return O"], [0.21904040042169512, "def solve_11c3c0ac(I):\n    O = rot180(I)\n    return O"], [0.21904040042169512, "def solve_65506423(I):\n    O = rot180(I)\n    return O"], [0.21904040042169512, "def solve_dd30881e(I):\n    x1 = dmirror(I)\n    O = cmirror(x1)\n    return O"], [0.22765109031506503, "def solve_6c0c3a38(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.22840986411980327, "def solve_2584e703(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.22840986411980327, "def solve_ead53366(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.24133801648130837, "def solve_6b2138cd(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.24600419379632574, "def solve_9f80af8e(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.2537260279414613, "def solve_c63a5c72(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_7b4af5af(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_7a3592b6(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_2a7f068d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_db2101a9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_88d26863(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_b555df2e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_e6613122(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_1910037e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_82a0b75d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_e35470f2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_a7d1865b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.25570919672274256, "def solve_b3d4c9c9(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2560237279066034, "def solve_7ae35f95(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = dedupe(x3)\n    return O"], [0.2616281866281866, "def solve_9459ea6c(I):\n    O = trim(I)\n    return O"], [0.2686091447400782, "def solve_9ea6fe03(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2704028721250951, "def solve_ba922e50(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.2737085951518015, "def solve_363c9896(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.2737085951518015, "def solve_6dbb6863(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.29118241282602314, "def solve_19535a00(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_b421dfbd(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.29118241282602314, "def solve_f129703e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_a98d59b6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.29118241282602314, "def solve_2907a38e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_95e41dd6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.29493888612223423, "def solve_02ac69d9(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2969700117912533, "def solve_fb3f508d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.2981947872945874, "def solve_e65f80d5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3063136421137608, "def solve_f1b42bfb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3082441023536176, "def solve_1879f635(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.31011174594270147, "def solve_9124b818(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_70383862(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_7468d487(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_64d1e023(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.3104501482052144, "def solve_1700566c(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_3d77ebc9(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_058b3b0d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_6b61d368(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_15cee853(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_70089b3d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_817f4653(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_5089002f(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_2f02e199(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.31313111917950626, "def solve_b493dfd6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.3204614475119984, "def solve_b4992ae7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [0.3204614475119984, "def solve_9278ba19(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [0.3314449532924934, "def solve_e3e4a528(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.33324150002846714, "def solve_bd425757(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.33518039153875073, "def solve_a3173aad(I):\n    x1 = shape(I)\n    x2 = asindices(I)\n    x3 = objects(I, T, F, F)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, x1)\n    x8 = paint(x7, x4)\n    x9 = mostcolor(I)\n    x10 = color(x4)\n    x11 = astuple(x9, ORIGIN)\n    x12 = astuple(x10, RIGHT)\n    x13 = astuple(x9, ZERO_BY_TWO)\n    x14 = initset(x13)\n    x15 = insert(x12, x14)\n    x16 = insert(x11, x15)\n    x17 = dmirror(x16)\n    x18 = toindices(x16)\n    x19 = lbind(shift, x18)\n    x20 = occurrences(x8, x16)\n    x21 = mapply(x19, x20)\n    x22 = toindices(x17)\n    x23 = lbind(shift, x22)\n    x24 = occurrences(x8, x17)\n    x25 = mapply(x23, x24)\n    x26 = combine(x21, x25)\n    O = fill(x8, x9, x26)\n    return O"], [0.3384341187221576, "def solve_e7bb5665(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.33873283589633685, "def solve_c465c00b(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.33873283589633685, "def solve_05da2b43(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.33873283589633685, "def solve_29340112(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.35285797856791773, "def solve_f52ac5ae(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35285797856791773, "def solve_45bb8e4e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35285797856791773, "def solve_2319a64a(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3646584896584897, "def solve_05a9b810(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.40995162868139406, "def solve_29be50d3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.4170310435194296, "def solve_d98a660c(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.4231949243417133, "def solve_881da893(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.43035369154772135, "def solve_42e056ec(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.43903257950773705, "def solve_50ffae8b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x3, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x4, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.48269935405826175, "def solve_cec4d0e5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.48269935405826175, "def solve_2f30089b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.48382635882635877, "def solve_cf5e8e00(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.5064013204664738, "def solve_239be59f(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.5455548516524127, "def solve_d1f415d7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5586554186554187, "def solve_0832912d(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_0f590ebb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.5586554186554187, "def solve_64681a5f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_e4d9aa9e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_14acc4b7(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5801077246461932, "def solve_bc06d494(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_20bde5d9(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_5a85a4c0(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_724cfa4f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6185357460219338, "def solve_72cde99e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.635016835016835, "def solve_4f220bec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = shape(x6)\n    x13 = canvas(x11, x12)\n    x14 = ofcolor(x6, x11)\n    x15 = ofcolor(x7, x11)\n    x16 = intersection(x14, x15)\n    O = fill(x13, THREE, x16)\n    return O"], [0.6767316017316017, "def solve_01d0ebb5(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_f5bd6aab(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_896bcc9d(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_5ad7f1a7(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_d67c7304(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_641f9ec3(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_7bd39526(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_2466f39e(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6793066105327229, "def solve_b55feb1a(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.7047029674817701, "def solve_f24b9c81(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.7349775533108867, "def solve_ba210909(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.7419913419913419, "def solve_a9fc4fdd(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = ofcolor(x4, ZERO)\n    x6 = ofcolor(x2, ZERO)\n    x7 = intersection(x5, x6)\n    x8 = shape(x3)\n    x9 = canvas(ZERO, x8)\n    O = fill(x9, THREE, x7)\n    return O"], [0.7635281385281386, "def solve_0744f58c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_12f80178(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_b3d39f30(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7710317460317461, "def solve_fe53566c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.7821428571428571, "def solve_63a25bc0(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.7821428571428571, "def solve_ef5bc955(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.8406445406445405, "def solve_7cf03094(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, T, F, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.8704545454545455, "def solve_6dd03f15(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.8704545454545455, "def solve_3dc52985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_88054beb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_603d0c64(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x7)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = increment(x15)\n    x17 = shift(x15, x16)\n    x18 = rbind(gravitate, x17)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(x11, x7, x22)\n    return O"], [1.0, "def solve_6b569afe(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_00be2bd9(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_53c3e3fd(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = compose(dneighbors, shape)\n    x4 = fork(difference, backdrop, x3)\n    x5 = toobject(x2, I)\n    x6 = matcher(first, x1)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = colorfilter(x13, x1)\n    x15 = argmax(x14, numcolors)\n    x16 = matcher(first, x1)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = remove(x19, x18)\n    x21 = lbind(shift, x19)\n    x22 = mapply(x21, x20)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_08933e2e(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x13 = rbind(shoot, NEG_UNITY)\n    x14 = fork(combine, x6, x13)\n    x15 = fork(combine, x5, x14)\n    x16 = index(I, x2)\n    x17 = x15(x2)\n    x18 = ulcorner(x2)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = subgrid(x2, I)\n    x24 = objects(x23, x22, x23)\n    x25 = merge(x24)\n    x26 = cover(x23, x25)\n    x27 = subgrid(x2, x26)\n    x28 = objects(x27, x24, x23)\n    x29 = rbind(toobject, x27)\n    x30 = chain(x29, corners, outbox)\n    x31 = fork(both, x28, x30)\n    x32 = extract(x28, x31)\n    O = fill(x27, ONE, x32)\n    return O"], [1.0, "def solve_b551fc17(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_1a9da7d1(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = chain(x2, x3, palette)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(palette, x5)\n    x7 = lbind(apply, x6)\n    x8 = chain(flip, x7, x5)\n    x9 = sfilter(I, x8)\n    x10 = fork(recolor, x6, x3)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_16678d0e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_753ad728(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = toivec(x2)\n    x4 = crop(I, x3, x2)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [1.0, "def solve_786af6da(I):\n    x1 = Vision(I)\n    x2 = lbind(contained, TWO)\n    x3 = chain(x2, dmirror, identity)\n    x4 = compose(x1, x3)\n    x5 = astuple(vsplit, hsplit)\n    x6 = x4(I, TWO)\n    x7 = order(x5, x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = product(x8, x9)\n    x11 = matcher(x4, x8)\n    x12 = compose(flip, x11)\n    x13 = extract(x10, x12)\n    x14 = lbind(sfilter, x10)\n    x15 = compose(first, last)\n    x16 = lbind(matcher, x15)\n    x17 = chain(x14, x16, leftmost)\n    x18 = fork(4488, x17, last)\n    x19 = fork(sfilter, x18, first)\n    x20 = compose(last, last)\n    x21 = compose(flip, x20)\n    x22 = fork(recolor, x18, x21)\n    x23 = mapply(x22, x13)\n    O = paint(x6, x23)\n    return O"], [1.0, "def solve_2fea53ed(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_53c824b7(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c3ad5459(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b8386a1b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_48d9d2dc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = matcher(first, x1)\n    x12 = sfilter(x10, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = first(x13)\n    x15 = divide(x4, x5)\n    x16 = downscale(x14, x15)\n    x17 = objects(x16, F, F, T)\n    x18 = color(x2)\n    x19 = ofcolor(x16, x18)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(x16, x21)\n    return O"], [1.0, "def solve_e0e7797b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(x2, frontiers)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, hsplit, vsplit)\n    x8 = x7(I, TWO)\n    x9 = argmin(x8, numcolors)\n    x10 = asindices(x9)\n    x11 = apply(first, x10)\n    x12 = last(x10)\n    x13 = remove(x11, x10)\n    x14 = x12(x13)\n    x15 = toobject(x14, x9)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = x17(x12)\n    x19 = rbind(multiply, x18)\n    x20 = apply(x19, x323)\n    x21 = mapply(x17, x20)\n    x22 = paint(I, x21)\n    O = downscale(x22, TWO)\n    return O"], [1.0, "def solve_4db0a922(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_aedae3c4(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_25a4218a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = objects(x2, T, F, F)\n    x4 = compress(x3)\n    x5 = toindices(x4)\n    x6 = box(x5)\n    x7 = fill(x1, EIGHT, x6)\n    x8 = difference(x5, x4)\n    O = fill(x7, TWO, x8)\n    return O"], [1.0, "def solve_14424f72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_77dc6175(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = index(x2, ORIGIN)\n    x4 = replace(I, ZERO, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = apply(ulcorner, x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = paint(x4, x8)\n    return O"], [1.0, "def solve_51cabb50(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 = compose(x26, x27)\n    x29 = fork(equality, identity, x28)\n    x30 = sfilter(x25, x29)\n    x31 = apply(x24, x30)\n    x32 = sfilter(x25, x31)\n    x33 = merge(x32)\n    x34 = fill(x14, x13, x33)\n    x35 = difference(x34, x32)\n    O = fill(x35, x10, x35)\n    return O"], [1.0, "def solve_43b470fd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x3, x7)\n    return O"], [1.0, "def solve_d42f922b(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_09e47d1f(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, frontiers)\n    x3 = mfilter(x2, hline)\n    x4 = mfilter(x2, vline)\n    x5 = x4(I)\n    x6 = x4(I)\n    x7 = color(x3)\n    x8 = palette(x5)\n    x9 = remove(x7, x8)\n    x10 = lbind(shift, x5)\n    x11 = mapply(x10, x9)\n    x12 = palette(x6)\n    x13 = remove(x7, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(merge, x18)\n    x20 = size(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = apply(toivec, x21)\n    x23 = mpapply(shift, x19, x22)\n    x24 = canvas(ZERO, UNITY)\n    x25 = lbind(shift, x24)\n    x26 = matcher(x25, FOUR)\n    x27 = mfilter(x23, x26)\n    O = paint(x17, x27)\n    return O"], [1.0, "def solve_f05195db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(THREE, x2)\n    x4 = rbind(shift, x3)\n    x5 = compose(x4, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, x5)\n    x8 = fork(mapply, x7, x5)\n    O = apply(x8, x1)\n    return O"], [1.0, "def solve_35d72955(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(d23, x3)\n    x5 = fill(I, FOUR, x4)\n    x6 = compose(last, first)\n    x7 = power(last, TWO)\n    x8 = fork(equality, x6, x7)\n    x9 = sfilter(x4, x8)\n    O = fill(x5, FOUR, x9)\n    return O"], [1.0, "def solve_12cda30b(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x5 = positive(x4)\n    x6 = branch(x5, vsplit, hsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = equality(x8, x9)\n    x11 = branch(x10, vmirror, hmirror)\n    x12 = x11(x8)\n    x13 = x11(x9)\n    x14 = partition(x12)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x16)\n    x18 = fafffa47(x13)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = paint(x7, x20)\n    x22 = x11(x21)\n    x23 = replace(x22, ZERO, x17)\n    x24 = replace(x23, x18, x20)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    O = paint(x12, x34)\n    return O"], [1.0, "def solve_a5e9d17d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_5d21886c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = mostcolor(I)\n    return O"], [1.0, "def solve_5278c22e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_5d65c7ec(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x12)\n    O = paint(x4, x3)\n    return O"], [1.0, "def solve_f1a4a8f3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_222fc3f0(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = chain(x4, first, last)\n    x6 = compose(x5, x3)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_af481828(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(camirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2e54c034(I):\n    x1 = frontiers(I)\n    x2 = matcher(size, ZERO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, x4, normalize)\n    x6 = mapply(x5, x1)\n    x7 = fill(I, EIGHT, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, x7)\n    return O"], [1.0, "def solve_19e93b86(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_bdf1df30(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, leastcolor)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x4, x11)\n    x13 = lbind(colorcount, x3)\n    x14 = argmin(x12, x13)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x3, x15)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, x3)\n    x19 = matcher(first, x15)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = lbind(recolor, x17)\n    x23 = chain(x22, ulcorner, x20)\n    x24 = chain(x21, x23, x20)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(recolor, identity, x25)\n    x27 = mapply(x26, x12)\n    O = paint(x3, x27)\n    return O"], [1.0, "def solve_7d20db21(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_2ae0ddbf(I):\n    x1 = ofcolor(I, ONE)\n    x2 = rbind(difference, x1)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = compose(50,    4)\n    x6 = objects(I, T, F, T)\n    x7 = sfilter(x6, x5)\n    x8 = totuple(x7)\n    x9 = apply(color, x8)\n    x10 = apply(center, x8)\n    x11 = pair(x9, x10)\n    x12 = sfilter(x11, x5)\n    x13 = compose(leftmost, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = difference(x2, x12)\n    x16 = extract(x15, x14)\n    x17 = ulcorner(x16)\n    x18 = subgrid(x16, I)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x18, x20)\n    x22 = replace(x2, ONE, ZERO)\n    x23 = sfilter(x21, x22)\n    x24 = correctmax(x23, x7)\n    x25 = dmirror(x24)\n    x26 = replace(x21, ONE, ZERO)\n    x27 = lbind(recolor, DOWN)\n    x28 = chain(x27, color, x8)\n    x29 = fork(combine, x28, x24)\n    x30 = chain(x29, x25, x28)\n    x31 = merge(x26)\n    x32 = cover(x11, x31)\n    x33 = paint(x32, x22)\n    O = x30(x33)\n    return O"], [1.0, "def solve_8dd9a0f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_18e89320(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30,52378, x31)\n    x33 = x21(x32)\n    x34 = shift(x33, x33)\n    O = fill(x10, x6, x34)\n    return O"], [1.0, "def solve_b6129454(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, last)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [1.0, "def solve_34783792(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_7f34fba6(I):\n    x1 = lbind(toobject, I)\n    x2 = compose(increment, double)\n    x3 = chain(toivec, x1, x2)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(decrement, double)\n    x6 = chain(tojvec, x5, x4)\n    x7 = fork(shift, identity, x6)\n    x8 = compose(hmirror, x7)\n    x9 = mapply(x8, I)\n    x10 = shift(x9, UP)\n    x11 = apply(x9, x10)\n    x12 = size(x11)\n    x13 = positive(x12)\n    x14 = branch(x13, x7, x6)\n    x15 = x14(I)\n    x16 = subgrid(x15, x15)\n    O = partition(x16)\n    return O"], [1.0, "def solve_cc0c100c(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a419a2e9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_5af7008f(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [1.0, "def solve_6e6a340f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = fork(both, x1, x6)\n    x8 = mfilter(x5, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_f636b2e5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_48659c9a(I):\n    UNITY = frontiers(I)\n    x1 = sfilter(x4, hline)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x74 = branch(x3, dmirror, identity)\n    x5 = x7(I)\n    x6 = frontiers(I)\n    x7 = x6(I)\n    x8 = mostcolor(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = argmin(x6, x11)\n    O = x12(I)\n    return O"], [1.0, "def solve_26d2a3d0(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = ofcolor(I, ZERO)\n    x6 = switch(x4, EIGHT, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = hconcat(x7, x7)\n    O = vconcat(x8, x8)\n    return O"], [1.0, "def solve_1a6f0a43(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dbffac02(I):\n    x1 = frontiers(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = sfilter(x1, x6)\n    x8 = merge(x7)\n    x9 = color(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = argmin(x13, numcolors)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x9, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x24)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x24)\n    O = paint(I, x27)\n    return O"], [1.0, "def solve_8ba66fe9(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2a867826(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, x4, x9)\n    x11 = paint(x10, x8)\n    x12 = rbind(hmirror, x8)\n    x13 = rbind(vmatching, x8)\n    x14 = fork(either, x12, x13)\n    x15 = compose(x14, initset)\n    x16 = matcher(x15, x4)\n    x17 = sfilter(x11, x16)\n    x18 = merge(x17)\n    x19 = fill(x11, TWO, x18)\n    x20 = size(x11)\n    x21 = invert(x20)\n    x22 = tojvec(x21)\n    x23 = shift(x11, x22)\n    O = fill(x19, TWO, x23)\n    return O"], [1.0, "def solve_7c5d5318(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_ff1ed23f(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x50)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [1.0, "def solve_44742002(I):\n    x1 = argmin(I, size)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = recolor(ZERO, x3)\n    x5 = dmirror(x2)\n    x6 = occurrences(x5, x4)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    O = fill(x2, ZERO, x8)\n    return O"], [1.0, "def solve_f59928f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8dd1db36(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_34bf83c9(I):\n    x1 = frontiers(I)\n    x2 = Tfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_60b5c352(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_4ab8494a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_f04a5ca3(I):\n    x1 = canvas(Faff, TWO_BY_TWO)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = mapply(x2, x1)\n    O = fill(x1, ZERO, x3)\n    return O"], [1.0, "def solve_ced0df89(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(toobject, I)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x6, initset)\n    x8 = chain(x5, x7, dneighbors)\n    x9 = matcher(x8, UNITY)\n    x10 = compose(flip, x9)\n    x11 = fork(both, x3, x10)\n    x12 = sfilter(x4, x11)\n    x13 = objects(I, T, F, T)\n    x14 = fork(connect, ulcorner, lrcorner)\n    x15 = fork(connect, llcorner, urcorner)\n    x16 = fork(combine, x14, x15)\n    x17 = mapply(x16, x12)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_db027320(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(maximum, x2)\n    x4 = lbind(apply, x3)\n    x5 = chain(x1, x4, decrement)\n    x6 = fork(toivec, identity, x5)\n    x7 = compose(x4, x6)\n    x8 = fork(add, identity, x7)\n    x9 = fork(connect, identity, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(225, x10, x5)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(subtract, identity, x12)\n    x14 = fork(shift, identity, x13)\n    x15 = mapply(x14, x10)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_0e79fde3(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = hconcat(x3, x1)\n    return O"], [1.0, "def solve_0f67723b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_bac87b3d(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [1.0, "def solve_86eccaae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(manhattan, x4)\n    x6 = compose(even, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, size)\n    x9 = canvas(x8, UNITY)\n    x10 = fill(x9, TWO, x7)\n    x11 = fill(x10, ONE, x8)\n    x12 = fill(x11, NEG_ONE, x8)\n    x13 = fill(x12, FOUR, x7)\n    x14 = fill(x13, ONE, x8)\n    x15 = fill(x14, THREE, x9)\n    O = fill(x15, TWO, x13)\n    return O"], [1.0, "def solve_1499c086(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = frontiers(I)\n    x6 = color(x5)\n    x7 = x2(I)\n    x8 = paint(x7, x4)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = astuple(x9, x10)\n    x12 = add(x11, NEG_UNITY)\n    x13 = uppermost(x7)\n    x14 = rightmost(x7)\n    x15 = astuple(x13, x14)\n    x16 = add(x15, UP_RIGHT)\n    x17 = lowermost(x7)\n    x18 = leftmost(x7)\n    x19 = astuple(x17, x18)\n    x20 = add(x19, DOWN_LEFT)\n    x21 = lowermost(x7)\n    x22 = llcorner(x21)\n    x23 = urcorner(x21)\n    x24 = shoot(x11, UNITY)\n    x25 = shoot(x11, DOWN_LEFT)\n    x26 = shoot(x11, UP_RIGHT)\n    x27 = shoot(x11, NEG_UNITY)\n    x28 = combine(x24, x25)\n    x29 = combine(x26, x27)\n    x30 = combine(x28, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_414dfc9f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_649c03a4(I):\n    x1 = remove(I, x2)\n    x2 = lbind(ofcolor, I)\n    x3 = compose(x2, frontiers)\n    x4 = fork(recolor, x3, leastcolor)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_0b97eaa5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c3bbcb8(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = Fgpartition(I)\n    x12 = merge(x11)\n    x13 = rbind(colorcount, x12)\n    x14 = matcher(x13, x10)\n    x15 = fork(both, x14, x9)\n    x16 = sfilter(x8, x15)\n    x17 = compose(x12, normalize)\n    x18 = apply(x17, x16)\n    x19 = merge(x8)\n    x20 = cover(I, x19)\n    x21 = paint(x20, x18)\n    x22 = asindices(x21)\n    x23 = x17(x22)\n    x24 = shift(x23, x24)\n    x25 = fork(mapply, x17, x24)\n    x26 = mapply(x25, x24)\n    O = fill(x21, x19, x26)\n    return O"], [1.0, "def solve_77437bd6(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_7e48552b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e8cdfe05(I):\n    x1 = astuple(I, I)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [1.0, "def solve_110d246c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_1cd1c801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_df209154(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_efbfa85d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(first, x3)\n    x5 = lbind(intersection, x2)\n    x6 = chain(positive, size, x5)\n    x7 = rbind(matcher, ZERO)\n    x8 = compose(x7, x4)\n    x9 = chain(flip, x6, x8)\n    x10 = sfilter(x2, x9)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_4207d701(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_baf8a095(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_a2052ebf(I):\n    O =88888888\n    return O"], [1.0, "def solve_203f7775(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(interval, ZERO)\n    x5 = rbind(x4, ONE)\n    x6 = compose(x5, x3)\n    x7 = fork(pair, x6, identity)\n    x8 = compose(x1, x7)\n    x9 = asindices(I)\n    x10 = x8(x9)\n    x11 = leastcolor(I)\n    x12 = ofcolor(I, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x10, x14)\n    x16 = difference(x10, x15)\n    x17 = fill(I, ZERO, x16)\n    x18 = intersection(x15, x16)\n    x19 = cover(x17, x18)\n    x20 = intersection(x15, x16)\n    O = fill(x19, x11, x20)\n    return O"], [1.0, "def solve_4376de90(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = astuple(x4, x5)\n    x9 = add(x8, UNITY)\n    x10 = initset(x9)\n    x11 =255256225\n    x102011148\n    2216808224\n    O = fill(I, x7, x10)\n    return O"], [1.0, "def solve_d74cad8d(I):\n    x1 = astuple(ONE, THREE)\n    x2 = size(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x7, x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = upscale(x6, delta)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = intersection(x7, x9)\n    O = fill(x9, FOUR, x10)\n    return O"], [1.0, "def solve_b12e5c03(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = upscale(x3, THREE)\n    x5 = ONE(x4)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = rbind(toobject, I)\n    x8 = compose(x7, frontiers)\n    x9 = sfilter(x6, x8)\n    x10 = pair(x9, x4)\n    x11 = apply(x11, x10)\n    x12 = mapply(x8, x11)\n    x13 = argmin(x5, x12)\n    x14 = add(x13, x11)\n    x15 = canvas(ZERO, x14)\n    x16 = asobject(x12)\n    x17 = shift(x16, x14)\n    x18 = paint(x15, x17)\n    O = rot180(x18)\n    return O"], [1.0, "def solve_7d1b62f9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x11, x14)\n    x16 = interval(ONE, SEVEN, ONE)\n    x17 = lbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_dd436da0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = product(x11, x11)\n    x13 = compose(last, first)\n    x14 = compose(last, last)\n    x15 = fork(astuple, x13, x14)\n    x16 = fork(shoot, identity, x15)\n    x17 = mapply(x16, x12)\n    x18 = combine(x17, x13)\n    x19 = fill(I, ZERO, x18)\n    O = paint(x19, x2)\n    return O"], [1.0, "def solve_0ff1a65a(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_c8537b77(I):\n    O = astuple(SIX, SIX)\n    return O"], [1.0, "def solve_fae1fa70(I):\n    x1 = halve(TEN)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_20acbac9(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(ff805, x5)\n    x7 = lbind( chain, backdrop)\n    x8 = lbind(x7, dneighbors)\n    x9 = chain(x5, x8, toindices)\n    x10 = apply(x9, x5)\n    x11 = fork(subtract, maximum, minimum)\n    x12 = x11(x10)\n    x13 = toivec(x12)\n    x14 = tojvec(x12)\n    x15 = connect(x13, x14)\n    x16 = astuple(x12, x12)\n    x17 = connect(x15, x16)\n    x18 = combine(x15, x17)\n    x19 = fill(I, ONE, x18)\n    x20 = leastcolor(x19)\n    O = ofcolor(x19, x20)\n    return O"], [1.0, "def solve_3ac16334(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4b9601e6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_0bbc9be7(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = greater(x5, TWO)\n    x7 = branch(x6, height, width)\n    x8 = x7(x1)\n    x9 = x7(x2)\n    x10 = branch(x6, vsplit, hsplit)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_256c9445(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d4788e87(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = increment(x2)\n    x4 = bottomhalf(I)\n    x5 = lefthalf(x3)\n    x6 = righthalf(x3)\n    x7 = tophalf(x6)\n    x8 = increment(x7)\n    x9 = bottomhalf(x7)\n    x10 = decrement(x3)\n    x11 = height(x5)\n    x12 = increase(x5, x11)\n    x13 = tojvec(x10)\n    x14 = decrement(x13)\n    x15 = height(x6)\n    x16 = add(x14, x15)\n    x17 = tojvec(x12)\n    x18 = decrement(x17)\n    x19 = width(x5)\n    x20 = decrement(x19)\n    x21 = tojvec(x12)\n    x22 = decrement(x21)\n    x23 = astuple(x18, x20)\n    x24 = astuple(x24, x22)\n    x25 = combine(x23, x24)\n    x26 = intersection(x23, x25)\n    x27 = fill(I, FOUR, x25)\n    O = fill(x27, THREE, x26)\n    return O"], [1.0, "def solve_f4a2000c(I):\n    x1 = height(I)\n    x2 = ofcolor(I, ZERO)\n    x3 =asindices(I)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, ZERO, x9)\n    x11 = asobject(x10)\n    O = paint(x11, x9)\n    return O"], [1.0, "def solve_83290309(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_2093494c(I):\n    x1 = lbind(contained, ORIGIN)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = lbind(contained, TWO)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x4)\n    x9 = fork(both, x4, x6)\n    x10 = fork(both, x7, x8)\n    x11 = fork(both, x9, x10)\n    x12 = compose(flip, x4)\n    x13 = fork(both, x12, x11)\n    x14 = fork(both, x12, x12)\n    x15 = compose(flip, x4)\n    x16 = fork(both, x14, x15)\n    x17 = fork(both, x12, x16)\n    x18 = fork(either, x17, x14)\n    x19 = fork(either, x12, x16)\n    x20 = fork(either, x13, x16)\n    x21 = fork(add, ulcorner, x20)\n    x22 = fork(add, llcorner, x21)\n    x23 = fork(connect, x20, x22)\n    x24 = decrement(x70)\n    x25 = lbind(multiply, x24)\n    x26 = compose(x25, x23)\n    x27 = fork(add, lrcorner, x26)\n    x28 = fork(connect, x27, x24)\n    x29 = fork(upscale, x28, x14)\n    x30 = fork(connect, x27, x29)\n    x31 = fork(54400, x23, x30)\n    x32 = fork(combine, x29, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x1)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_6e48fd31(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = asobject(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = normalize(x6)\n    x8 = width(I)\n    x9 = subtract(x8, TWO)\n    x10 = multiply(x9, THREE)\n    x11 = increment(x10)\n    x12 = width(I)\n    x13 = subtract(x12, x6)\n    x14 = multiply(x13, x4)\n    x15 = shift(x7, x14)\n    x16 = paint(I, x15)\n    x17 = repeat(x16, ONE)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_f57dc630(I):\n    x1 = palette(I)\n    x2 = contained(I, x1)\n    x3 = contained(x2, x1)\n    x4 = branch(x3, UNITY, SEVEN)\n    x5 = branch(x3, vmirror, hmirror)\n    x6 = x4(x5)\n    x7 = width(I)\n    x8 = branch(x3, UNITY, NEG_ONE)\n    x9 = multiply(x7, x8)\n    x10 = shift(x6, x9)\n    x11 = canvas(ZERO, x9)\n    x12 = paint(x11, x10)\n    O = x4(x12)\n    return O"], [1.0, "def solve_fdc75963(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = compose(maximum, shape)\n    x11 = order(x9, x10)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x11, x15)\n    x17 = multiply(TEN, TEN)\n    x18 = canvas(x4, x17)\n    x19 = double(x18)\n    x20 = asobject(x19)\n    x21 = shift(x20, UNITY)\n    O = paint(x17, x21)\n    return O"], [1.0, "def solve_6166a010(I):\n    x1 = lbind(toindices, I)\n    x2 = lbind(toobject, I)\n    x3 = compose(first, x1)\n    x4 = chain( mostcolor, x2, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = compose(last, x1)\n    x7 = chain(decrement, x5, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = compose(first, x8)\n    x10 = fork(remove, x6, x9)\n    x11 = compose(last, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, x11, x13)\n    x15 = fork(combine, x11, x14)\n    x16 = fork(intersection, x15, x8)\n    x17 = mapply(x16, x1)\n    O = fill(I, ZERO, x17)\n    return O"], [1.0, "def solve_7b05a020(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_27bc8324(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, center)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = compose(x6, palette)\n    x8 = argmax(x5, x7)\n    x9 = remove(x8, x5)\n    x10 = merge(x9)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, color)\n    x13 = sfilter(x1, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, normalize)\n    x19 = lbind(apply, x18)\n    x20 = chain(x179, x18, x19)\n    x21 = rbind(remove, x20)\n    x22 = compose(x21, normalize)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(compose, initset)\n    x25 = lbind(rbind, manhattan)\n    x26 = chain(x24, x25, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x75, x27)\n    x29 = compose(x25, x28)\n    x30 = fork(mapply, x23, x29)\n    x31 = fork(recolor, x30, x29)\n    x32 = mapply(x31, x13)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_19daf05a(I):\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = increment(x33)\n    x35 = astuple(x33, x34)\n    x36 = shift(x22, x35)\n    x37 = shift(x25, x36)\n    x38 = paint(I, x37)\n    x39 = combine(x28, x38)\n    x40 = ofcolor(x39, ZERO)\n    O = mapply(x39, x40)\n    return O"], [1.0, "def solve_abb6ea0d(I):\n    x1 = initset(ORIGIN)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = uppermost(x3)\n    x7 = lbind(subtract, x6)\n    x8 = chain(size, x7, double)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    O = underfill(x5, ONE, x10)\n    return O"], [1.0, "def solve_0b4e2894(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5b10c675(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d1b2c416(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_967e69fe(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_d792c8d1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_854608fe(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEGim, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [1.0, "def solve_839f398e(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [1.0, "def solve_82f6621a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_577be18e(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, decrement)\n    x3 = mapply(x2, I)\n    O = objects(I, T, F, T)\n    return O"], [1.0, "def solve_b3a6eefe(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(TWO, LEFT)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, ONE)\n    x10 = astuple(THREE, TWO)\n    x11 = connect(x9, x10)\n    x12 = combine(x8, x11)\n    x13 = combine(x5, x12)\n    x14 = recolor(THREE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_587c08c7(I):\n    x1 = palette(I)\n    x2 = SEVEN(I)\n    x3 = EIGHT(x2)\n    x4 = vmirror(I)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = lbind(colorfilter, x5)\n    x8 = compose(x7, color)\n    x9 = sfilter(x1, x8)\n    x10 = chain(invert, size, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = apply(x11, x9)\n    x13 = rbind(argmax, x12)\n    x14 = apply(x13, x12)\n    x15 = merge(x14)\n    x16 = cover(I, x15)\n    x17 = mapply(x11, x13)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_722fe31d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0115b112(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x6)\n    x8 = crop(I, x7, x4)\n    x9 = asobject(x8)\n    x10 = hperiod(x9)\n    x11 = vperiod(x9)\n    x12 = index(I, x11)\n    x13 = asobject(I)\n    x14 = hperiod(x13)\n    x15 = vperiod(x13)\n    x16 = astuple(x14, x15)\n    x17 = ulcorner(x9)\n    x18 = crop(I, x17, x16)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = asobject(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = hperiod(x23)\n    x25 = vperiod(x24)\n    x26 = astuple(x24, x25)\n    x27 = ulcorner(x9)\n    x28 = crop(I, x27, x26)\n    x29 = vmirror(x28)\n    x30 = asobject(x29)\n    x31 = asobject(x30)\n    x32 = vperiod(x31)\n    x33 = hperiod(x31)\n    x34 = astuple(x33, x32)\n    x35 = lbind(multiply, x34)\n    x36 = neighbors(ORIGIN)\n    x37 = mapply(neighbors, x36)\n    x38 = apply(x35, x37)\n    x39 = lbind(shift, x33)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_def17ece(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_bac9365e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_adb1e25e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f8e3f5ed(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_1fadd532(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_4d62b463(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x10 = x9(x6)\n    x11 = paint(x3, x10)\n    x12 = paint(x11, x11)\n    O = paint(x12, x10)\n    return O"], [1.0, "def solve_116dd1c0(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1365ca38(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = argmax(x5, size)\n    O = subgrid(x6, I)\n    return O"], [1.0, "def solve_63955891(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    O = asobject(x1)\n    return O"], [1.0, "def solve_f012a851(I):\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = interval(x33, x29, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x22)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_1352c8fa(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_fb4099f9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_5c6e012b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_960122e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_4e0ca6f7(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8c91ed98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = dmirror(I)\n    x5 = x4(I)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [1.0, "def solve_d754ecc6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, UNITY)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = toobject(x6, I)\n    x8 = normalize(x7)\n    x9 = lbind(shift, x8)\n    x10 = compose(x9, shape)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, x10)\n    x14 = fork(equality, identity, x13)\n    x15 = mfilter(x6, x14)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_06640b30(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_461ed799(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(50, x25)\n    x27 = compose(first, x25)\n    x28 = fork(recolor, x26, x27)\n    x29 = mapply(x28, x3)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_17a52f40(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = order(x1, x2)\n    x4 = apply(last, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, first)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [1.0, "def solve_f9fa61d0(I):\n    x1 = hsplit(I, THREE)\n    x2 = insert(first, x1)\n    x3 = order(x2, identity)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = ofcolor(x4, NINE)\n    x7 = ofcolor(x5, ONE)\n    x8 = combine(x6, x7)\n    x9 = fill(x4, THREE, x8)\n    x10 = ofcolor(x9, NINE)\n    x11 = fill(x9, ONE, x10)\n    O = fill(x11,3333, x8)\n    return O"], [1.0, "def solve_e8fafdea(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_7f76e0d7(I):\n    x1 =884286214\n    x2 = dmirror(I)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, ZERO)\n    x16 = rbind(contained, x15)\n    x17 = apply(x16, x14)\n    x18 = sfilter(x17, vline)\n    x19 = difference(x17, x18)\n    O = apply(size, x19)\n    return O"], [1.0, "def solve_76830682(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_d6d73890(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_b1f393f2(I):\n    x1 = astuple(SIX, THREE)\n    x2 = astuple(dmirror, I)\n    x3 = astuple(TWO, ONE)\n    x4 = combine(x1, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x6)\n    x8 = chain(lowermost, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x4, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_157c2546(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x5, x6)\n    x8 = argmin(x5, x7)\n    x9 = x6(x8)\n    x10 = string(x8, x9)\n    x11 = cover(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = colorfilter(x12, x4)\n    x14 = difference(x12, x13)\n    x15 = divide(x10, x14)\n    x16 = apply(uppermost, x15)\n    x17 = lowermost(x15)\n    x18 = astuple(x17, x15)\n    x19 = add(x18, invert)\n    x20 = lowermost(x15)\n    x21 = rightmost(x15)\n    x22 = astuple(x20, x21)\n    x23 = add(x22, astuple)\n    x24 = rbind(subtract, x23)\n    x25 = rbind(shoot, x19)\n    x26 = compose(x24, x25)\n    x27 = fork(combine, x26, x24)\n    x28 = mapply(x27, x15)\n    O = fill(x11, ZERO, x28)\n    return O"], [1.0, "def solve_cc2d74a7(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_27377936(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =elta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = corners(x6)\n    x8 = insert(ZERO_BY_TWO, x7)\n    x9 = insert(RIGHT, x8)\n    x10 = insert(TWO_BY_TWO, x9)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = interval(TWO, x12, ONE)\n    x16 = pair(x14, x15)\n    x17 = mapply(x13, x16)\n    O = paint(x4, x17)\n    return O"], [1.0, "def solve_ce0d4df4(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = toindices(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = fork(multiply, last, identity)\n    x8 = apply(x7, x6)\n    x9 = partition(I)\n    x10 = sfilter(x9, x6)\n    x11 = mapply(toindices, x10)\n    x12 = corners(x11)\n    x13 = combine(x12, x11)\n    x14 = difference(x13, x12)\n    x15 = mapply(x8, x14)\n    x16 = combine(x15, x11)\n    x17 = fill(I, x2, x16)\n    x18 = hmirror(x17)\n    x19 = mostcolor(I)\n    O = fill(x17, x19, x18)\n    return O"], [1.0, "def solve_8d9cd7de(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = combine(x5, x4)\n    x7 = power(outbox, TWO)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, initset)\n    x10 = power(x9, FOUR)\n    x11 = fork(connect, x7, x10)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x2)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_560918e5(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = I(x3)\n    x5 = dmirror(x4)\n    x6 = papply(equality, x4, x5)\n    x7 = branch(x6, ONE, SEVEN)\n    O = canvas(x7, x7)\n    return O"], [1.0, "def solve_51822bb6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, asobject)\n    x4 = lbind(apply, numcolors)\n    x5 = chain(x4, asobject, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(size, x6)\n    x8 = chain(increment, x5, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, I)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_22c390eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_e31e1135(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(inter000, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_56c7c989(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_6b2426c4(I):\n    x1 = astuple(THREE, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_cfe3a8fe(I):\n    x1 = paint(I, x1)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = canvas(x3, x5)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x6, x8)\n    return O"], [1.0, "def solve_13515f6e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = insert(x8, x11)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x4)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(x14)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, TWO)\n    x21 = merge(x20)\n    x22 = decrement(x21)\n    x23 = input(x22, x21)\n    x24 = tophalf(x23)\n    x25 = shift(x21, x24)\n    x26 = lefthalf(x25)\n    x27 = tophalf(x26)\n    x28 = vmirror(x27)\n    x29 = hmirror(x28)\n    x30 = insert(x26, x21)\n    x31 = insert(x29, x30)\n    x32 = combine(x30, x31)\n    x33 = paint(x16, x32)\n    x34 = hmirror(x33)\n    O = vmirror(x34)\n    return O"], [1.0, "def solve_36c0b8e0(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a547d3bd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, toindices)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, x3)\n    x8 = fork(insert, vmirror, identity)\n    x9 = lbind(insert, x7)\n    x10 = compose(x9, x8)\n    x11 = power(x10, TWO)\n    x12 = x11(x9)\n    x13 = lbind(remove, x6)\n    x14 = compose(x13, x12)\n    x15 = fork(compose, x11, x14)\n    x16 = lbind(lbind, shift)\n    x17 = lbind(occurrences, x6)\n    x18 = compose(x16, x17)\n    x19 = fork(mapply, x18, x16)\n    x20 = rapply(x19, x4)\n    x21 = mapply(x16, x20)\n    O = paint(x3, x21)\n    return O"], [1.1, "def solve_66cd0eb0(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7a9c61d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(FOUR, FOUR)\n    x2 = portrait(I)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = asindices(x4)\n    x6 = ofcolor(x4, ZERO)\n    x7 = difference(x5, x6)\n    x8 = rbind(toobject, x4)\n    x9 = compose(x8, delta)\n    x10 = interval(x2, FIVE, ZERO)\n    x11 = rbind(multiply, width)\n    x12 = compose(x11, tojvec)\n    x13 = chain(x10, x12, initset)\n    x14 = lbind(fork, greater)\n    x15 = lbind(chain, flip)\n    x16 = lbind(x15, x13)\n    x17 = lbind(x16, astuple)\n    x18 = compose(x16, x17)\n    x19 = compose(x13, x18)\n    x20 = extract(x9, x19)\n    x21 = center(x20)\n    x22 = initset(x21)\n    x23 = center(x22)\n    x24 = subgrid(x226, x4)\n    x25 = fork(equality, identity, rot90)\n    x26 = compose(x25, x20)\n    x27 = fork(equality, identity, rot270)\n    x28 = compose(x27, x21)\n    x29 = fork(equality, identity, rot90)\n    x30 = compose(x29, x21)\n    x31 = fork(equality, identity, rot270)\n    x32 = compose(x31, x21)\n    x33 = fork(both, x26, x25)\n    x34 = fork(both, x24, x28)\n    x35 = fork(both, x33, x34)\n    x36 = astuple(x36, x35)\n    x37 = extract(x32, x36)\n    x38 = center(x37)\n    x39 = initset(x38)"], [1.1, "def solve_6798fd94(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 =8000(dae9001fccofdne22(I)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x6, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x4)\n    x16 = backdrop(x15)\n    x17 = toobject(x16, I)\n    x18 = identity(x17)\n    x19 = chain(x14, x10, x18)\n    x20 = rbind(contained, x11)\n    x21 = compose(x20, color)\n    x22 = sfilter(x15, x21)\n    x23 = size(x22)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, identity)\n    x26 = canvas(x25, UNITY)\n    x27 = asindices(x26)\n    x28 = center(x27)\n    x29 = dmirror(I)\n    x30 = initset(x22)\n    x31 = insert(x28, x30)\n    x32 = insert(x29, x31)\n    x33 = dmirror(x32)\n    x34 = asindices(x33)\n    x35 = center(x34)\n    x36 = initset(x35)\n    x37 = insert(x16, x36)\n    x38 = insert(x33, x37)\n    x39 = fill(x26, x4, x38)\n    x40 = fill(x39, x33, x34)\n    x41 = fill"], [1.1, "def solve_9dd5e7c1(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_2815a7f0(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, insert)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_ba15fdbb(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7666ef79(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = lowermost(x7)\n    x9 = compose(minimum, shape)\n    x10 = lowermost(x7)\n    x11 =1900(x9, x10)\n    x12 = power(x11, TWO)\n    x13 = uppermost(x7)\n    x14 =970(x12, x13)\n    x15 = astuple(x14, x414)\n    x16 = ulcorner(x7)\n    x17 = palette(x15)\n    x18 = palette(x10)\n    x19 = argmax(x17, x18)\n    x20 = remove(x19, x17)\n    x21 = other(x20, x19)\n    x22 = rbind(colorcount, x21)\n    x23 = colorcount(I, x21)\n    x24 = rbind(toobject, I)\n    x25 = compose(x22, delta)\n    x26 = rbind(colorcount, x21)\n    x27 = valmax(x21, x26)\n    x28 = matcher(x25, x27)\n    x29 = sfilter(x24, x28)\n    x30 = difference(x19, x29)\n    x31 = apply(e961498330, x29)\n    x32 = rbind(colorcount, x21)\n    x33 = rbind(toobject, I)\n    x34 = chain(x32, x33, backdrop)\n    x35 = apply(x34, x31)\n    x36 = sfilter(x3, x35)\n    x37 = apply(x22, x36)\n    x38 = size(x37)\n    x39 = subtract(x38, x37)\n    x40 = frontiers("], [1.1, "def solve_53d40512(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = matcher(first, FOUR)\n    x38 = sfilter(x28, x37)\n    x39 = center(x38)\n    x40 = matcher(first, NEG_ONE)\n    x41 = sfilter("], [1.1, "def solve_201f73f0(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8ee1277f(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_f3727679(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_e6afb92a(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_770b125f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_b16928d7(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_72918c35(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f824d0d5(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0cffd2b2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_26948c91(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f6db8f2f(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_08d2c6f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_b05c68ca(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_e77d2eca(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(56129min, x27)\n    x39 = chain(size, x38, T)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_a80e03a5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = color(x23)\n    x25 = palette(x22)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x6)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = ofcolor(x22, x24)\n    x31 = ofcolor(x22, x6)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = lowermost(x30)\n    x35 = dneighbors(ORIGIN)\n    x36 = remove(DOWN, x35)\n    x37 = rbind(mapply, x36)\n    x38 = lbind(chain, x37)\n    "], [1.1, "def solve_a817586e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(I, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(greater, THREE)\n    x5 = chain(x4, size, dedupe)\n    x6 = compose(x5, x3)\n    x7 = fork(both, x7, x6)\n    x8 = sfilter(x1, x6)\n    x9 = difference(x1, x8)\n    x10 = insert(x10, x8)\n    x11 = apply(most, x10)\n    x12 = condition(x11, ZERO)\n    x13 = argmin(x1, size)\n    x14 = remove(x13, x10)\n    x15 = argmin(x14, size)\n    x16 = width(x12)\n    x17 = decrement(x16)\n    x18 = tojvec(x17)\n    x19 = height(x12)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = fork(subtract, x22, increment)\n    x24 = chain(increment, x17, x23)\n    x25 = shoot(x13, x18)\n    x26 = shoot(x15, x20)\n    x27 = combine(x25, x26)\n    x28 = combine(x71, x24)\n    x29 = combine(x27, x28)\n    x30 = tojvec(x29)\n    x31 = asobject(x19)\n    x32 = mapply(x23, x61)\n    x33 = asobject(x15)\n    x34 = toobject(x33, I)\n    x35 = asobject(x34)\n    x36 = height(x32)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = invert(x38)\n    x40 = shift(x31, x39)\n    x41 = fill"], [1.1, "def solve_4184d06b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =644(x2)\n    x4 = shape(I)\n    x5 = canvas(center, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(equality, x12, toindices)\n    x14 = chain(x9, x13, ulcorner)\n    x15 = fork(multiply, x14, toindices)\n    x16 = chain(x13, x15, rbind(subtract, FOUR)\n    x17 = fork(divide, x15, x16)\n    x18 = fork(equality, identity, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = mostcolor(I)\n    x21 = matcher(x21, x20)\n    x22 = fork(both, x19, x21)\n    x23 = sfilter(x7, x22)\n    x24 = sfilter(x7, x18)\n    x25 = argmax(x23, minimum)\n    x26 = argmax(x24, width)\n    x27 = ulcorner(x25)\n    x28 = llcorner(x27)\n    x29 = add(x27, x28)\n    x30 = shift(x25, x29)\n    x31 = color(x30)\n    x32 = ofcolor(x23, x31)\n    x33 = argmax(x32, x23)\n    x34 = vmirror(x33)\n    x35 = normalize(x34)\n    x36 = color(x23)\n    x37 = increment(x6)\n    x38 = add(x37, x31)\n    x39 = shift(x35"], [1.1, "def solve_39655996(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = rot270(I)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = lbind(rbind, subtract)\n    x5 = lbind(x3, x4)\n    x6 = lbind(canvas, ZERO)\n    x7 = compose(x5, x6)\n    x8 = fork(paint, x7, last)\n    x9 = compose(x4, x8)\n    x10 = lbind(sfilter, x1)\n    x11 = rbind(compose, last)\n    x12 = lbind(rbind, sfilter)\n    x13 = chain(x11, x10, x12)\n    x14 = lbind(apply, first)\n    x15 = chain(lowermost, x13, x14)\n    x16 = lbind(rightbind, astuple)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x14)\n    x19 = compose(x4, x18)\n    x20 = compose(x1, cmirror)\n    x21 = fork(remove, x20, x14)\n    x22 = compose(last, x21)\n    x23 = fork(last, first, x22)\n    x24 = compose(lowermost, x23)\n    x25 = compose(rightmost, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x27, x23)\n    x29 = fork(argmin, x26, x28)\n    x30 = fork(astuple, x29, identity)\n    x31 = remove(x30, x1)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(multiply, x34, x309)\n    x36 = compose(x35, x29)\n    x37 = fork(apply, x36, x31"], [1.1, "def solve_4d53bcb2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_d8b93e60(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_572bf88e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_0305bd26(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(canvas, ZERO)\n    x5 = compose(x4, x3)\n    x6 = fork(paint, x5, x3)\n    x7 = compose(rot90, x6)\n    x8 = power(x7, FOUR)\n    x9 = rot180(I)\n    x10 = dedupe(x9)\n    x11 = rot180(I)\n    x12 = dedupe(x11)\n    x13 = rot180(I)\n    x14 = dedupe(x13)\n    x15 = rot180(I)\n    x16 = dedupe(x15)\n    x17 = size(x10)\n    x18 = size(x12)\n    x19 = positive(x17)\n    x20 = branch(x19, x15, x14)\n    x21 = branch(x19, x16, x20)\n    x22 = compose(x4, x21)\n    x23 = argmax(x23, x22)\n    x24 = apply(x23, x18)\n    x25 = size(x24)\n    x26 = equality(x25, ONE)\n    x27 = branch(x26, x23, x24)\n    x28 = branch(x26, x228, x27)\n    x29 = branch(x26, x23, x24)\n    x30 = branch(x26, x22, x29)\n    x31 = multiply(TEN, TEN)\n    x32 = add(x31, TWO)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = branch(x33, x28, x30)\n    x35 = ZERO(x34)\n    x36 =44(x35)\n    x37 = shift(x36, x31)\n    x38 = paint(I, x37)\n    x39 = rot90(x38)\n    x40 = paint(x39, x37)\n    x41 = rot90(x40"], [1.1, "def solve_4c90c5bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_e8df6493(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_4fb61fc2(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = difference(x1, x9)\n    x11 = rbind(subgrid, I)\n    x12 = apply(x11, x10)\n    x13 = lbind(rbind,colorcount)\n    x14 = argmax(x12, x13)\n    x15 = palette(x14)\n    x16 = remove(x4, x15)\n    x17 = lbind(colorcount, x14)\n    x18 = argmin(x16, x17)\n    x19 = subgrid(x18, x6)\n    x20 = increment(x14)\n    x21 = rbind(greater, x20)\n    x22 = compose(x21, first)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = lbind(rbind, subtract)\n    x26 = lbind(occurrences, x24)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x27, last)\n    x29 = lbind(rbind, adjacent)\n    x30 = fork(extract, first, x28)\n    x31 = compose(x29, x30)\n    x32 = fork( compose, x24, x31)\n    x33 = fork(apply, x38, x32)\n    x34 = rbind(intersection, x33)\n    x35 = compose(size, x34)\n    x36 = argmax(x21, x35)\n    x37 = rbind(shift, x36)\n    x38 =87(x37)\n    x39 = TWO(x38, x34)\n    x"], [1.1, "def solve_8381c246(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_80faa289(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = vmirror(x2)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = chain(position, lefthalf, tophalf)\n    x9 = fgpartition(x4)\n    x10 = merge(x9)\n    x11 = normalize(x10)\n    x12 = lbind(shift, x11)\n    x13 = height(x2)\n    x14 = height(x11)\n    x15 = divide(x13, x14)\n    x16 = width(x2)\n    x17 = width(x11)\n    x18 = divide(x16, x17)\n    x19 = vmirror(x8)\n    x20 = hmirror(x8)\n    x21 = shift(x19, x20)\n    x22 = SEVEN(x21)\n    x23 = argmax(x3, x22)\n    x24 = leastcolor(x23)\n    x25 = matcher(first, x24)\n    x26 = sfilter(x22, x25)\n    x27 = replace(x7, x24, x655)\n    x28 = argmin(x26, identity)\n    x29 = argmax(x28, identity)\n    x30 = ulcorner(x28)\n    x31 = rbind(subtract, x30)\n    x32 = height(x28)\n    x33 = rbind(multiply, x32)\n    x34 = chain(outbox, x31, x33)\n    x35 = width(x29)\n    x36 = divide(x35, x31)\n    x37 = increment(x36)\n    x38 = interval(ONE, x37, ONE)\n    x39 = sfilter(x38, x34)\n    x40 = invert(x39)\n    x41 =71(x40)\n    "], [1.1, "def solve_f2c8140e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = extract(x30, x31)\n    x33 = last(x32)\n    x34 = matcher(first, x11)\n    x35 = sfilter(x34, x24)\n    x36 = center(x35)\n    x37 = vfrontier(x36)\n    x38 = sfilter(x1, x22)\n    x39 = lbind(fork, intersection)\n    x40 = lbind(x39, outbox)\n    x41 = lbind(compose, x38"], [1.1, "def solve_b0a39c2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_fcb49c5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply,numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_afd89778(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(extract, x1)\n    x3 = compose(x2, x1)\n    x4 = rbind(compose, initset)\n    x5 = lbind(rbind, manhattan)\n    x6 = chain(x4, x5, x3)\n    x7 = fork(sfilter, identity, x6)\n    x8 = compose(rot90, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = rot270(I)\n    x11 = fork(shift, identity, x10)\n    x12 = compose(rot90, x11)\n    x13 = fork(shift, identity, x12)\n    x14 = size(I)\n    x15 = maximum(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = product(x16, x16)\n    x18 = rbind(multiply, THREE)\n    x19 = compose(x18, first)\n    x20 = rbind(multiply, TEN)\n    x21 = compose(x20, last)\n    x22 = fork(add, x19, x21)\n    x23 = fork(astuple, x19, x22)\n    x24 = lbind(canvas, NEG_ONE)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(connect, x23, x26)\n    x28 = rbind(contained, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(extract, x27)\n    x31 = compose(x30, x29)\n    x32 = fork(add, last, x31)\n    x33 = fork(astuple, x29, x32)\n    x34 = fork(connect, x33, x33)\n    x35 = rbind(branch, x730)\n    x36 = rbind(x35, x34)\n    x37 = rbind(contained, x51)\n    x38 = compose(x"], [1.1, "def solve_7d729b16(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = backdrop(x6)\n    x8 = shoot(x4, UNITY)\n    x9 = initset(x2)\n    x10 = insert(x7, x9)\n    x11 = mostcolor(I)\n    x12 = mapply(d43, x10)\n    x13 =insert(x7, x10)\n    x14 = width(I)\n    x15 = greater(x14, TWO)\n    x16 = insert(x15, x13)\n    x17 = mapply(dneighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = matcher(first, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x12, x21)\n    x23 = difference(x12, x22)\n    x24 = fill(x5, TWO, x23)\n    x25 =\n    x26 = width(x24)\n    x26 = greater(x25, TWO)\n    x27 = increment(x26)\n    x28 =455(x22)\n    x29 = double(x28)\n    x30 = insert(x27, x29)\n    x31 = branch(x30, x22, x27)\n    x32 = branch(x30, x26, x27)\n    x33 = branch(x30, UP, LEFT)\n    x34 = x31(x33)\n    x35 =box(x34)\n    x36 = intersection(x31, x35)\n    x37 = fill(x24, TWO, x36)\n    x38 = replace(x37, x19, ONE)\n    x39 = lbind(contained, TWO)\n    x40 = compose(x39, palette)\n    x41 = sfilter(x34,"], [1.1, "def solve_4bdbff07(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_76782b65(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_919be0bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_cb02f1a6(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(add, leftmost, uppermost)\n    x7 = compose(toivec, x6)\n    x8 = fork(add, x5, x7)\n    x9 =2000(x5)\n    x10 = dmirror(x8)\n    x11 = numcolors(x10)\n    x12 = decrement(x11)\n    x13 = order(x1, x12)\n    x14 = leftmost(x13)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, FOUR)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(greater, x14)\n    x20 = compose(x19, last)\n    x21 = apply(x20, x3)\n    x22 = combine(x18, x21)\n    x23 = rbind(repeat, x22)\n    x24 = compose(x23, tojvec)\n    x25 = apply(x24, x3)\n    x26 = combine(x17, x25)\n    x27 = hmirror(x26)\n    x28 = lbind(repeat, x27)\n    x29 = apply(x28, x3)\n    x30 = astuple(x11, x13)\n    x31 = x12(x30)\n    x32 = pair(x26, x31)\n    x33 = compose(size, last)\n    x34 = matcher(x33, ZERO)\n    x35 = sfilter(x32, x34)\n    x36 = lbind(compose, x5)\n    x37 = lbind(lbind, greater)\n    x38 = chain(x36,x37, last)\n    x39 = pair(x35, x35)\n    x40 ="], [1.1, "def solve_822eacbc(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, cmirror)\n    x2 = hmirror(I)\n    x3 = index(x2, ORIGIN)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = recolor(x3, x4)\n    x6 = index(x2, x5)\n    x7 = subgrid(x5, x2)\n    x8 = remove(x7, x5)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = colorobject(x11, x10)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = subgrid(x13, x2)\n    x16 = height(x15)\n    x17 = increment(x16)\n    x18 = subgrid(x13, x15)\n    x19 = hmirror(x18)\n    x20 = increment(x19)\n    x21 = replace(x19, x10, x11)\n    x22 =1cf801(x21, x20)\n    x23 = x22(x2)\n    x24 = replace(x23, x10, x4)\n    x25 = ofcolor(x24, x10)\n    x26 = subgrid(x25, x24)\n    x27 = mapply(vfrontier, x25)\n    x28 = mapply(hfrontier, x25)\n    x29 = size(x27)\n    x30 = size(x28)\n    x31 = greater(x29, x30)\n    x32 = branch(x31, x28, x27)\n    x33 = fill(x26, x11, x32)\n    x34 =recolor(x33, x10)\n    x35 = mapply(x29, x28)\n    x36 = paint(x20, x35)\n    x37 =607 solve48678497ad(x33)\n    x38 =7745(x37)\n    x39 = recolor(x10, x38)\n"], [1.1, "def solve_94ac28e3(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(THREE, x4)\n    x6 = asobject(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = power(x9, x10)\n    x12 = astuple(x3, x11)\n    x13 = astuple(x12, first)\n    x14 = astuple(x12, ZERO)\n    x15 = initset(x13)\n    x16 = insert(x14, x15)\n    x17 = backdrop(x16)\n    x18 = lbind(position, x17)\n    x19 = compose(x18, initset)\n    x20 = lowermost(x17)\n    x21 = rightmost(x17)\n    x22 = astuple(x20, x21)\n    x23 = lbind(greater, x22)\n    x24 = compose(x23, x19)\n    x25 = sfilter(x6, x24)\n    x26 = apply(x19, x25)\n    x27 = merge(x26)\n    x28 = apply(x25, x26)\n    x29 = compose(double, halve)\n    x30 = compose(double, last)\n    x31 = fork(equality, x29, x30)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(equality, x32, x33)\n    x35 = fork(either, x31, x34)\n    x36 = sfilter(x26, x35)\n    x37 = apply(x19, x36)\n    x38 = merge(x36)\n    x39 = cover(I, x38)\n    x40 =8925(x39)\n    x41 = mostcolor(x40)\n    O"], [1.1, "def solve_5dc739ab(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_7cbbcb87(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =76fgically(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = hmirror(x3)\n    x5 = vmirror(x3)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = vmirror(x7)\n    x9 = hmirror(x8)\n    x10 = astuple(x4, x5)\n    x11 = astuple(x9, x10)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x13)\n    x15 = asobject(x14)\n    x16 = height(x15)\n    x17 = width(x15)\n    x18 = decrement(x16)\n    x19 = astuple(x18, x17)\n    x20 = connect(ORIGIN, x19)\n    x21 = outbox(x20)\n    x22 = astuple(x17, x15)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = connect(ORIGIN, x24)\n    x26 = double(x17)\n    x27 = connect(ORIGIN, x26)\n    x28 = astuple(x24, x15)\n    x29 = astuple(x27, x15)\n    x30 = connect(x28, x29)\n    x31 = initset(ORIGIN)\n    x32 = box(x31)\n    x33 = difference(x32, x30)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = palette(I)\n    x37 = remove(x35, x36)\n    x38 = other(x37, x35)\n    x39 = ofcolor(x26, x38)\n    x40 = ofcolor(x25, x38)\n    x41 = combine(x39, x40)\n    x42 = intersection(x39,"], [1.1, "def solve_ee5755c3(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(remove, TWO)\n    x5 = chain(x4, x3, x2)\n    x6 = fork( chain,x1, x5)\n    x7 = lbind(canvas, ZERO)\n    x8 = compose(x7, x6)\n    x9 = fork(4612d687, x8, shape)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = lbind(497 either, ONE)\n    x13 = compose(x12, x11)\n    x14 = fork(both, x13, x7)\n    x15 = sfilter(x1, x14)\n    x16 = difference(x1, x15)\n    x17 = merge(x16)\n    x18 =66666666(x17, THREE)\n    x19 = mostcolor(I)\n    x20 = ofcolor(x18, x19)\n    x21 = apply(initset, x20)\n    x22 = rbind(manhattan, x3)\n    x23 = compose(x22, initset)\n    x24 = argmin(x21, x23)\n    x25 = ofcolor(x18, x19)\n    x26 =manhattan(x24, x25)\n    x27 = increment(x26)\n    x28 = injvec(x27)\n    x29 = shift(x25, x28)\n    x30 = toindices, x29)\n    x31 = rbind(shoot, x30)\n    x32 = mapply(x31, x28)\n    x33 = fill(x18, FOUR, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = size(x34)\n    x36 = intersection(x28, x35)\n    x37 = fill(x33, ZERO, x36)\n    x38 = astuple(x19, x23)\n    x39 = canvas(ZERO"], [1.1, "def solve_84918bad(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x10)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x12)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d3dbb4ac(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f1e24483(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b93ddf6b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, ZERO, x1)\n    x3 = normalize(x2)\n    x4 = occurrences(x2, x3)\n    x5 = lbind(shift, x3)\n    x6 = apply(x5, x4)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(FIVE, ONE)\n    x9 = astuple(TWO, SIX)\n    x10 = initset(x7)\n    x11 = insert(x8, x10)\n    x12 = insert(x9, x11)\n    x13 = rbind(contained, x12)\n    x14 = chain(flip, x13, ulcorner)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = height(x16)\n    x18 = vsplit(x16, x17)\n    x19 = hsplit(x18, x17)\n    x20 = extract(x19, x14)\n    x21 = extract(x19, x20)\n    x22 = width(x16)\n    x23 = divide(x22, THREE)\n    x24 = area(x16)\n    x25 = last(x24)\n    x26 = width(x12)\n    x27 = divide(x26, THREE)\n    x28 = astuple(x23, x27)\n    x29 = maximum(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(multiply, x30)\n    x32 = mapply(x31, x3)\n    x33 = canvas(x236, x32)\n    x34 = lbind(shift, x16)\n    x35 = mapply(x34, x30)\n    x36 = fill(x33, FOUR, x35)\n    x37 = shift(x3, x Tools)\n    x38 = occurrences(x32, x37)\n    x39 = fill(x36, FOUR, x38)\n    O = mapply(x39, x"], [1.1, "def solve_3158d264(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bb93ee37(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_71a186b1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_79d79473(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = chain(positive, size, dmirror)\n    x7 = x6(I)\n    x8 = chain(x4, first, x7)\n    x9 = sfilter(x5, x8)\n    x10 = asindices(x9)\n    x11 = ofcolor(x9, x4)\n    x12 = toindices(x11)\n    x13 = mapply(first, x12)\n    x14 = fill(x9, ZERO, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x16, x14)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x19)\n    x25 = rbind(divide, x18)\n    x26 = apply(x24, x15)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = apply(x27, x28)\n    x30 = hconcat(x17, x17)\n    x31 = hconcat(x29, x27)\n    x32 = vconcat(x30, x31)\n    x33 = vconcat(x32, x17)\n    x34 = ofcolor(x33, ONE)\n    x35 =314(x34)\n    x36 = subgrid(x35, x33)\n    x37 = increment(x38)\n    x38 = branch(x37, x35, x37)\n    x39 = lbind(mapply, x36)\n    x40 = lbind"], [1.1, "def solve_e75aea00(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = delta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = delta(x2)\n    x6 = box(x2)\n    x7 = intersection(x5, x6)\n    x8 = uppermost(x7)\n    x9 = uppermost(x2)\n    x10 = equality(x8, x9)\n    x11 = leftmost(x7)\n    x12 = leftmost(x2)\n    x13 = equality(x11, x12)\n    x14 = lowermost(x7)\n    x15 = lowermost(x2)\n    x16 = equality(x14, x15)\n    x17 = rightmost(x7)\n    x18 = rightmost(x2)\n    x19 = equality(x17, x18)\n    x20 = urcorner(x7)\n    x21 = ulcorner(x7)\n    x22 = llcorner(x7)\n    x23 = lrcorner(x7)\n    x24 = branch(x16, x22, x23)\n    x25 = branch(x13, x21, x24)\n    x26 = branch(x10, x20, x25)\n    x27 = branch(x16, x23, x20)\n    x28 = branch(x13, x22, x27)\n    x29 = branch(x10, x21, x28)\n    x30 = branch(x16, DOWN_LEFT, UNITY)\n    x31 = branch(x13, NEG_UNITY, x30)\n    x32 = branch(x10, UP_RIGHT, x31)\n    x33 = branch(x16, UNITY, UP_RIGHT)\n    x34 = branch(x13, DOWN_LEFT, x33)\n    x35 = branch(x10, NEG_UNITY, x34)\n    x36 = branch(x16, DOWN, RIGHT)\n    x37 = branch(x13, LEFT, x36)\n    x38 = branch(x10"], [1.1, "def solve_1f6763bc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x38, first)\n    x40 = fork(paint, x38, x39)\n    x41 = rbind(contained, x17"], [1.1, "def solve_02364e0a(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = rbind(toobject, I)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(colorcount, x1)\n    x7 = matcher(x6, EIGHT)\n    x8 = rbind(toobject, I)\n    x9 = matcher(x8,0000000)\n    x10 = rbind(colorcount, x1)\n    x11 = matcher(x10, EIGHT)\n    x12 = chain(x9, x11, backdrop)\n    x13 = lbind(fork, paint)\n    x14 = lbind(x13, identity)\n    x15 = lbind(rbind, colorcount)\n    x16 = compose(x14, x15)\n    x17 = lbind(colorfilter, x5)\n    x18 = chain(x16, x17, x16)\n    x19 = lbind(rbind, costgrid)\n    x20 = chain(x19, width, x8)\n    x21 = chain(corners, x18, x20)\n    x22 = lbind(chain, x21)\n    x23 = rbind(x22,asobject)\n    x24 = lbind(rbind, x contained)\n    x25 = chain(first, x23, x24)\n    x26 =997(x1, x25)\n    x27 = chain(x07, x25, xdmirror)\n    x28 = astuple(x26, x26)\n    x29 = astuple(NEG_TWO, x28)\n    x30 = astuple(x31, x29)\n    x31 = x17(x30)\n    x32 = papply(x27, x31)\n    x33 = papply(x29, x32)\n    x34 = ofcolor(I, x1)\n    x35 = combine(x34, x52)\n    x36 = intersection(x34, x35)\n    x37 = fill(I, ZERO, x36)"], [1.1, "def solve_217ad3e7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_06605e29(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =885(I)\n    x2 =887(x1, FOUR)\n    x3 = argmin(x2, size)\n    x4 = astuple(ONE, THREE)\n    x5 = astuple(TWO, FOUR)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x3, x7)\n    x9 = tojvec(x8)\n    x10 = tojvec(x1)\n    x11 = double(x10)\n    x12 = double(x11)\n    x13 = tojvec(x12)\n    x14 = tojvec(x11)\n    x15 = double(x9)\n    x16 = repeat(x13, x15)\n    x17 = Flake ring(x16)\n    x18 = compose(normalize, first)\n    x19 = fork(subtract, x18, last)\n    x20 = upscale(x17, x19)\n    x21 = asobject(x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = decrement(x23)\n    x25 = height(x21)\n    x26 = subtract(x24, x25)\n    x27 = width(x21)\n    x28 = decrement(x27)\n    x29 = width(x21)\n    x30 = subtract(x28, x29)\n    x31 = astuple(x26, x30)\n    x32 = canvas(ZERO, x31)\n    x33 = ulcorner(x2)\n    x34 = invert(x33)\n    x35 = shift(x34, x31)\n    x36 = ofcolor(I, x23)\n    x37 = lbind(shift, x35)\n    x38 = interval(x32, x32, ONE)\n    x39 = apply(x38, x36)\n    x40 = mapply(x37, x39)\n    x41 = astuple(x43, x40)\n    x42 = canvas(ZERO, x41)\n    O"], [1.1, "def solve_103b8b19(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_311eb51c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(sfilter, x1)\n    x2 = lbind(matcher, flip)\n    x3 = compose(x2, leastcolor)\n    x4 = chain(normalize, mostcolor, x3)\n    x5 = x4(I)\n    x6 = astuple(cmirror, dmirror)\n    x7 = astuple(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(x6, x8)\n    x10 = insert(x9, x8)\n    x11 = apply(x4, x10)\n    x12 = product(x11, x11)\n    x13 = sfilter(x12, first)\n    x14 = compose(last, first)\n    x15 = difference(x12, x13)\n    x16 = compose(last, last)\n    x17 = matcher(x14, x55)\n    x18 = sfilter(x15, x17)\n    x19 = lbind(recolor, TWO)\n    x20 = lbind(ofcolor, I)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, x21, x19)\n    x23 = compose(x19, x22)\n    x24 = fork(paint, x23, x12)\n    x25 = chain(x39, x40, x24)\n    x26 = mapply(x25, x13)\n    x27 = objects(x26, T, T, T)\n    x28 = mapply(toindices, x27)\n    x29 = box(x28)\n    x30 = difference(x29, x28)\n    x31 = intersection(x30, x28)\n    x32 = first(x31)\n    x33 = x30(x32)\n    x34 = ofcolor(I, TWO)\n    x35 =contained(ZERO, x34)\n    x36 = lbind(contained, TWO)\n    x37 = compose(x36, last)\n    x38 = sfilter(x34, x37)\n    x39 = center(x38)\n"], [1.1, "def solve_aa198d92(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_e763443b(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_124b60c7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained,ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(0520, x2)\n    x4 = lbind(equality, NINE)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(size, cmirror)\n    x8 = chain(DEPrement, x7, x6)\n    x9 = argmax(x10, x8)\n    x10 = multiply(x19, x9)\n    x11 = chain(x17, minimum, x10)\n    x12 = argmin(x00, x11)\n    x13 = other(x1, x12)\n    x14 = flip(x13)\n    x15 = branch(x14, identity, vmirror)\n    x16 = x15(x12)\n    x17 = objects(x16, T, T, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, x18)\n    x20 = chain(19, toindices, x19)\n    x21 = fork(add, first, x20)\n    x22 = chain(flip, x6, x21)\n    x23 = sfilter(x18, x22)\n    x24 = fork(contained, x23, identity)\n    x25 = normalize(x12)\n    x26 = lbind(shift, x25)\n    x27 = compose(x26, ulcorner)\n    x28 = fork(equality, identity, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(multiply, x30)\n    x31 = rbind(shift, x30)\n    x32 = compose(x30, x31)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = rbind(multiply, x30)\n    x36 = rbind(shift, x33)\n    x37 = fork(connect, x35, x36)\n    x38 = compose("], [1.1, "def solve_c0d850cb(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_2eb5a999(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = remove(UNITY, x1)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = divide(x3, x7)\n    x9 = width(I)\n    x10 = halve(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, vline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = halve(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, x26)\n    x32 = lbind(index, I)\n    x33 = lbind(compose, x12)\n    x34 = compose(x33, x25)\n    x35 = chain(x32, x34, x29)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, x25)\n    x38 = fork(equality, x37, x30)\n    x39 = palette(I)\n    x40 = sfilter(x39, x38)\n    x41 = lbind(colorcount, I)\n    x42 = argmin(x40, x41"], [1.1, "def solve_9424a4b5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = last(x2)\n    x6 = ofcolor(I, x5)\n    x7 = asindices(I)\n    x8 = center(x7)\n    x9 = initset(x8)\n    x10 = insert(x4, x9)\n    x11 = insert(x5, x10)\n    x12 = frontiers(I)\n    x13 = sfilter(x12, hline)\n    x14 = size(x13)\n    x15 = positive(x14)\n    x16 = branch(x15, identity, dmirror)\n    x17 = x16(I)\n    x18 = rbind(multiply, x1)\n    x19 = compose(x18, identity)\n    x20 = shape(x17)\n    x21 = canvas(x20, x20)\n    x22 = lbind(greater, x21)\n    x23 = compose(x22, first)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(positive, size, x24)\n    x26 = rbind(compose, x00)\n    x27 = lbind(x26, x17)\n    x28 = rbind(compose, x23)\n    x29 = lbind(rbind, contained)\n    x30 = chain(x27, x28, x29)\n    x31 = lbind(fork, x22)\n    x32 = lbind(x31, identity)\n    x33 = lbind(rbind,compose)\n    x34 = chain(x32, x33, x30)\n    x35 = lbind(fork, x26)\n    x36 = fork(x55, x23, x32)\n    x37 = fork(compose, x36, x34)\n    x38 = lbind(matcher, x25)\n    x39 = compose(x38, x37)\n    x40 = fork(sfilter, x35, x39"], [1.1, "def solve_0c887db4(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(address, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_1f52ebbd(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x21)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_d40d1ff0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = Fgpartition(I)\n    x2 = merge(x1)\n    x3 = box(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = subgrid(x2, x4)\n    x6 = argmax(x1, width)\n    x7 = uppermost(x6)\n    x8 = leftmost(x6)\n    x9 = height(x5)\n    x10 = width(x5)\n    x11 = divide(x9, x10)\n    x12 = add(x8, UNITY)\n    x13 = subtract(x12, x11)\n    x14 = uppermost(x6)\n    x15 = width(x6)\n    x16 = interval(x14, x15, ZERO)\n    x17 = add(x8, x16)\n    x18 = hsplit(x11, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = compose(x21, first)\n    x23 = rbind(colorcount, x20)\n    x24 = matcher(x23, x22)\n    x25 = mfilter(x19, x24)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x5)\n    x28 = matcher(first, x20)\n    x29 = compose(flip, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = compose(x30, x15)\n    x32 = rbind(sfilter, x111)\n    x33 = compose(x32, x152)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x19)\n    x36 = lbind(e98196)\n    x37 = compose(x36, x30)\n    x38 = fork(apply, x37, x31)\n    x39 = fork(mapply, x35, x38)\n    x40 = fork(difference, x38, ZERO)\n    x41"], [1.1, "def solve_ae28a374(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =8900076363e21)\n    x6 = neighbors(UNITY)\n    x7 = toindices(x6)\n    x8 = box(x7)\n    x9 = rbind(825efilter, x8)\n    x10 =411170(x9)\n    x11 = x9(x10)\n    x12 = fill(I, x4, x11)\n    x13 = x9(x12)\n    x14 = interval(ONE, FIVE, ONE)\n    x15 = downscale(x13, x14)\n    x16 = objects(x12, F, F, T)\n    x17 = rbind(toobject, x15)\n    x18 = compose(vperiod, x17)\n    x19 = height(x12)\n    x20 = rbind(multiply, x19)\n    x21 = chain(x20, toindices, x18)\n    x22 = lbind(add, x5)\n    x23 = compose(x22, x21)\n    x24 = fork(add, first, x23)\n    x25 = compose(x17, x24)\n    x26 = shape(x15)\n    x27 = multiply(x26, x26)\n    x28 = lbind(multiply, x27)\n    x29 = x28(x15)\n    x30 = shift(x15, x29)\n    x31 = rbind(multiply, x30)\n    x32 = compose(x31, x241)\n    x33 = rbind(multiply, x32)\n    x34 = fork(add, x33, x24)\n    x35 = rbind(multiply, x30)\n    x36 = compose(x35, x24)\n    x37 = fork(add, x36, x37)\n    x38 = fork(equality, x38, x34)\n    x39 = sfilter(x18, x38)\n    x"], [1.1, "def solve_cd122d5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_2c434bab(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = x1(I)\n    x2 = objects(x1, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, minimum, shape)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = mostcolor(I)\n    x9 = palette(x7)\n    x10 = matcher(identity, x8)\n    x11 = argmin(x9, x10)\n    x12 = color(x11)\n    x13 = subgrid(x11, x1)\n    x14 = hmirror(x13)\n    x15 = argmin(x12, x14)\n    x16 = remove(x11, x15)\n    x17 =348(x16)\n    x18 = subgrid(x17, x1)\n    x19 = index(x18, DOWN)\n    x20 = lowermost(x15)\n    x21 = add(x20, x20)\n    x22 = width(x7)\n    x23 = rightmost(x15)\n    x24 = add(x23, x2)\n    x25 = height(x7)\n    x26 = *rightmost(x7)\n    x27 = width(x7)\n    x28 = interval(x26, x27, ONE)\n    x29 = add(x24, x27)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = lbind(shift, x17)\n    x33 = mapply(x32, x31)\n    x34 = interval(decrement, x22, ONE)\n    x35 = lbind(hmirror, x24)\n    x36 = astuple(x35, x)\n    x37 = lbind(cmirror, x17)\n    x38 = add(x37, x349)\n    x39 = x10(x38)\n    x40 = dmirror(x39)\n    x"], [1.1, "def solve_591f345a(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = shape(I)\n    x3 = maximum(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = interval(ONE, x3, ONE)\n    x6 = rbind(toobject, I)\n    x7 = rbind(shoot, RIGHT)\n    x8 = rbind(shoot, LEFT)\n    x9 = objects(x7, T, F, F)\n    x10 = rbind(shoot, DOWN)\n    x11 = rbind(shoot, UP)\n    x12 = rbind(shoot, DOWN)\n    x13 = mapply(x11, x9)\n    x14 = mapply(x12, x10)\n    x15 = combine(x13, x14)\n    x16 = apply(x15, x15)\n    x17 = lbind(canvas, ZERO)\n    x18 = lbind(occurrences, I)\n    x19 = compose(x17, x18)\n    x20 = lbind(recolor, ONE)\n    x21 = chain(x20,paint, x19)\n    x22 = lbind(ofcolor, I)\n    x23 = fork(size, x22, x21)\n    x24 = compose(maximum, x23)\n    x25 = apply(x24, x16)\n    x26 = repeat(x25, ONE)\n    x27 =047676(x26)\n    x28 = partition(x27)\n    x29 = lbind(colorcount, x27)\n    x30 = argmax(x28, x29)\n    x31 = apply(x30, x29)\n    x32 = matcher(contained, x31)\n    x33 = sfilter(x32, x32)\n    x34 = apply(color, x33)\n    x35 =64(x34)\n    x36 = astuple(ONE, THREE)\n    x37 = rbind(subtract, x36)\n    x38 = chain(halve, x37, x36)\n    x39 = fork(shift, x33, x38)\n    x40 = mapply"], [1.1, "def solve_f0cf962c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = objects(x26, s, F, T)\n    x28 = colorfilter(x27, x7)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = sfilter(x28, x30)\n    x32 = sfilter(x28, x24)\n    x33 = extract(x31, x32)\n    x34 = first(x33)\n    x35 = last(x33)\n    x36 = gravitate(x34, x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x16, x37)\n    x39 = leftmost(x37)\n    x40 = rightmost(x37)\n    x41 = astuple(x39,"], [1.1, "def solve_aefdb417(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = switch(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = fork(add, height, width)\n    x4 = rbind(decrement, x3)\n    x5 = chain(decrement, x4, shape)\n    x6 = fork(equality, size, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, x5)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(I, x9)\n    x11 = center(x10)\n    x12 = multiply(x11, x4)\n    x13 = shift(x12, x11)\n    x14 = fill(I, x9, x13)\n    x15 = toindices(x13)\n    x16 = lbind(\"\"\"\n    x17 = box(x13)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = toindices(x4)\n    x21 = lbind(intersection, x20)\n    x22 = chain(x19, size, x21)\n    x23 = argmax(x15, x22)\n    x24 = lbind(colorcount, x14)\n    x25 = argmin(x23, x24)\n    x26 = replace(x14, x25, x9)\n    x27 = color(x13)\n    x28 = colorfilter(x25, x27)\n    x29 = fill(x26, x39, x28)\n    x30 = argmin(x29, x22)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(halve, x31)\n    x33 = fork(add, first, x32)\n    x34 = x33(x26)\n    x35 = x33(x24)\n    x36 = x33(x30)\n    x37 = fill(x29, x35, x36)\n    x38 = fill(x37, x41, x34)\n    x39 =fill("], [1.1, "def solve_06011d54(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(ppaint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_27375e2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_52889f0d(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = shape(x27)\n    x30 = multiply(x29, THREE)\n    x31 = x26(I)\n    x32 = maximum(x30)\n    x33 = lbind(astuple, x32)\n    x34 = lbind(shoot, x27)\n    x35 = rightmost(x27)\n    x36 = equality(x32, x35)\n    x37 = branch(x36, x33, x34)\n    x38 = apply(x37, x39)\n    x39 = leftmost(x27)\n    x40 = decrement(x39"], [1.1, "def solve_ecd5ad9d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0008f503(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, rot90)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, size)\n    x27 = fork(sfilter, x25, x26)\n    x28 = lbind(colorcount, I)\n    x29 = argmax(x17, x28)\n    x30 = rbind(canvas, x3)\n    x31 = compose(x30, x22)\n    x32 = rbind(multiply, x6)\n    x33 = compose(x32, x19)\n    x34 = fork(equality, x33, x21)\n    x35 = rbind(n28, x34)\n    x36 = lbind(apply, x21)\n    x37 = chain(x131, x35, x36)\n    x38 = fork(sfilter, x27, x37)\n    x39 = fork(difference, x28, x38)\n"], [1.1, "def solve_6a535df9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = vsplit(I, TWO)\n    x7 = switch(x6, EIGHT, FOUR)\n    x8 = apply(x5, x7)\n    x9 = order(x8, identity)\n    x10 = last(x9)\n    x11 = remove(x10, x9)\n    x12 = compose(hmirror, merge)\n    x13 = lbind(compose, flip)\n    x14 = lbind(matcher, first)\n    x15 = chain(x13, x14, mostcolor)\n    x16 = fork(sfilter, identity, x15)\n    x17 = chain(increment, tojvec, x16)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x17, x18, identity)\n    x20 = lbind(fork, greater)\n    x21 = compose(x20, last)\n    x22 = lbind(rbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x21)\n    x25 = lbind(rbind, x24)\n    x26 = chain(x19, x24, x25)\n    x27 = compose(x5, x2)\n    x28 = fork(sfilter, identity, x27)\n    x29 = chain(first, x13, x28)\n    x30 = fork(compose, x29, x23)\n    x31 = compose(x5, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x360, x11)\n    x34 = mapply(x32, x10)\n    x35 = combine(x33, x34)\n    x36 = mapply(x32, x20)\n    x37 = mapply(x32, x27)\n    x38 = m"], [1.1, "def solve_94f0ea96(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(5521, UNITY)\n    x3 = rbind(subgrid, I)\n    x4 = chain(numcolors, x2)\n    x5 = matcher(x4, ONE)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = chain(positive, size, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(dmirror, merge)\n    x11 = chain(normalize, x10, x8)\n    x12 = chain(ff28, x11, x9)\n    x13 = chain(dmirror, x11, x12)\n    x14 = fork(concat, x11, x13)\n    x15 = fork(compose, x14, x11)\n    x16 = lbind(chain, size)\n    x17 = lbind(x16, x10)\n    x18 = rbind(compose, x17)\n    x19 = lbind(rbind, subtract)\n    x20 = chain(x18, x19, x15)\n    x21 = rbind(rapply, I)\n    x22 = initset(x7)\n    x23 = lbind(rapply, x22)\n    x24 = chain(first, x21, x23)\n    x25 = compose(x20, x24)\n    x26 = argmax(x9, x25)\n    x27 = first(x26)\n    x28 = last(x26)\n    x29 = x27(I)\n    x30 = x27(x28)\n    x31 = palette(x30)\n    x32 = shape(x30)\n    x33 = lbind(apply, first)\n    x34 = lbind(ofcolor, x30)\n    x35 = chain(x33, x34, x28)\n    x36 = replace(x30, SIX, ZERO)\n    x37 = apply(x35, x36)\n    x38 = astuple(x31, x"], [1.1, "def solve_45e52190(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = compose(normalize, toindices)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x4)\n    x9 = paint(x7, x8)\n    x10 = shape(x4)\n    x11 = width(x9)\n    x12 = height(x9)\n    x13 = normalize(x4)\n    x14 = interval(x11, x12, ONE)\n    x15 = paint(x9, x14)\n    x16 = shape(x4)\n    x17 = interval(x13, x16, ONE)\n    x18 = rbind(toobject, x9)\n    x19 = lbind(278, multiply)\n    x20 = chain(x18, x19, mostcolor)\n    x21 = rbind(afivec, x10)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(canvas, x5)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(remove, x23, x26)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(chain, x18)\n    x30 = lbind(x29, normalize)\n    x31 = lbind(x30, x27)\n    x32 = rbind(difference, x15)\n    x33 = compose(x31, x32)\n    x34 = rbind(apply, x15)\n    x35 = chain(size, x34, x28)\n    x36 = argmax(x17, x35)\n    x37 =06(x36, x31)\n    x38 = color(x37)\n    x39 =O = paint(x37, x38)\n    x40 = height("], [1.1, "def solve_01af9c72(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 =11e(I)\n    x8 = hmatching(x7, x4)\n    x9 = branch(x8, identity, vmirror)\n    x10 = x9(I)\n    x11 = trim(x10)\n    x12 = palette(x11)\n    x13 = matcher(identity, x12)\n    x14 = vmirror(x11)\n    x15 = hmirror(x11)\n    x16 = vmirror(x15)\n    x17 = asindices(x16)\n    x18 = shift(x17, UNITY)\n    x19 = paint(x10, x18)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = center(x21)\n    x23 = dmirror(x21)\n    x24 = shift(x23, x22)\n    x25 = paint(x19, x24)\n    x26 = toindices(x24)\n    x27 = initset(x26)\n    x28 = remove(x25, x20)\n    x29 = insert(x28, x26)\n    x30 = product(x27, x29)\n    x31 = rbind(intersection, x22)\n    x32 = compose(size, x31)\n    x33 = matcher(x32, ZERO)\n    x34 = branch(x33, x44, x25)\n    x35 = flip(x34)\n    x36 = branch(x35, x24, x25)\n    x37 = branch(x35, x16, x25)\n    x38 = branch(x35, x22, x25)\n    x39 = branch(x35, x19, x27)\n    x40 = branch(x35, x36, x31)\n    x41 = branch("], [1.1, "def solve_8db7e957(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13) extract(x16, identity)\n    x17 = last(x16)\n    x18 = remove(x4, x16)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x13, x19)\n    x21 = rbind(first, x15)\n    x22 = compose(first, backdrop)\n    x23 = fork(compose, x21, x22)\n    x24 = lbind(lbind, shift)\n    x25 = height(x19)\n    x26 = matcher(x25, ZERO)\n    x27 = lbind(fork, both)\n    x28 = rbind(x27, x26)\n    x29 = extract(x15, x28)\n    x30 = center(x29)\n    x31 = matcher(last, x30)\n    x32 = compose(flip, x31)\n    x33 = center(x29)\n    x34 = initset(x33)\n    x35 = insert(x16, x34)\n    x36 = insert(x31, x35)\n    x37 = dmirror(x36)\n    x38 = lbind(shift, x37)\n    x39 = occurrences(x38, x38)\n    x40 = mapply(x38, x39)\n    x41 = fill"], [1.1, "def solve_97a8ed05(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_397bb0d0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_355127f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2770d49d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a73b4210(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = objects(I, T, F, T)\n    x32 = apply(toindices, x31)\n    x33 = lbind(compose, normalize)\n    x34 = lbind(rbind, contained)\n    x35 = chain(x33, x34, leftmost)\n    x36 = chain(size, x32, x35)\n    x37 = equality(x36, ONE)\n    x38 = mapply(x37, x29)\n    x39"], [1.1, "def solve_064317bd(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =675(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = width(I)\n    x7 = equality(x5, x6)\n    x8 = toivec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = shape(I)\n    x11 = halve(x10)\n    x12 = canvas(ZERO, x11)\n    x13 = ofcolor(I, ZERO)\n    x14 = asindices(x13)\n    x15 = difference(x14, x13)\n    x16 = rbind(toobject, I)\n    x17 = compose(first, x16)\n    x18 = apply(x17, x15)\n    x19 = interval(ZERO, x5, ONE)\n    x20 = product(x19, x19)\n    x21 = apply(last, x20)\n    x22 = lbind(recolor, ZERO)\n    x23 = compose(x22,\n    x24 = matcher(first, ZERO)\n    x25 = rbind(sfilter, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = chain(x26, x25, x25)\n    x28 = chain(x27, x26, x25)\n    x29 = lbind(shift, x14)\n    x30 = fork(combine, x29, x28)\n    x31 = compose(x30, x23)\n    x32 = fork(mapply, x31, x29)\n    x33 = mapply(x32, x21)\n    O = paint(x12, x33)\n    return O"], [1.1, "def solve_3aa3d87a(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(remove, ZERO)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 =7523(I)\n    x5 = lbind(occurrences, x4)\n    x6 = compose(x5, x3)\n    x7 = fork(mapply, x3, x6)\n    x8 = compose(cmirror, x7)\n    x9 = fork(occurrences, x8, toindices)\n    x10 = compose(lrcorner, x9)\n    x11 = fork(shift, x10, x8)\n    x12 = compose(UNITY, x11)\n    x13 = leastcolor(I)\n    x14 = ofcolor(I, x13)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(I, x13, x19)\n    O = mapply(x12, x4)\n    return O"], [1.1, "def solve_03679c68(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = rbind(contained, x5)\n    x7 = compose(x6, first)\n    x8 = rbind(sfilter, x7)\n    x9 = lbind(rbind, subtract)\n    x10 = lbind(occ):\n    x11 = apply(x9, x5)\n    x12 = lbind(lbind, shift)\n    x13 = x17(x11)\n    x14 = x12(x12)\n    x15 = fork(apply, x7, x8)\n    x16 = fork(apply, x12, x14)\n    x17 = fork(paint, identity, x15)\n    x18 = identity(x16)\n    x19 = dmirror(I)\n    x20 = papply(pair, x19, x8)\n    x21 = lbind(apply, x17)\n    x22 = apply(x21, x20)\n    x23 = argmin(x22, x7)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = replace(x19, x25, x24)\n    x27 = apply(x16, x26)\n    x28 = color(x27)\n    x29 = ofcolor(x25, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    O = fill(x45, x28, x33)\n    return O"], [1.1, "def solve_d41d2edc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =6879641\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = width(x12)\n    x14 = subtract(x13, ONE)\n    x15 = divide(x14, TWO)\n    x16 = height(x12)\n    x17 = subtract(x16, TWO)\n    x18 =160(x17)\n    x19 = lbind(shift, x12)\n    x20 = rbind(multiply, x15)\n    x21 = chain(x19, x20, x19)\n    x22 = astuple(x16, x18)\n    x23 = rbind(multiply, x22)\n    x24 =10(x23)\n    x25 = lbind(shift, x12)\n    x26 = rbind(multiply, x25)\n    x27 = chain(x24, x26, x19)\n    x28 = astuple(x18, x17)\n    x29 = rbind(multiply, x28)\n    x30 =10(x29)\n    x31 = lbind(shift, x12)\n    x32 = rbind(multiply, x15)\n    x33 = chain(x31, x32, x19)\n    x34 = combine(x26, x33)\n    x35 = mapply(x21, x34)\n    x36 = paint(I, x35)\n    O = subgrid(x3, x36)\n    return O"], [1.1, "def solve_56f45d23(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot197, merge)\n    x3 = valmax(x1, height)\n    x4 = matcher(size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 =1884615096444f830(I):\n    O = fill(I, FIVE, x8)\n    return O"], [1.1, "def solve_f19f03ad(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = rbind(Example output:\n    8224669124\n    2872000837\n    6213758198\n    5239174079\n    8895626318\n    2128321892\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    \"\"\"\n    x2 =92(ofcolor, I)\n    x3 = compose(first, last)\n    x4 = rbind(subgrid, I)\n    x5 = chain(x4, mostcolor, x3)\n    x6 = fork(650, x5, x4)\n    x7 = lbind(greater, THREE)\n    x8 = compose(x7, x6)\n    x9 = sfilter(x2, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.1, "def solve_3e58962e(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = fork(both, x3, x4)\n    x6 = extract(x3, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = backdrop(x6)\n    x9 =6666(x8, identity)\n    x10 = initset(x7)\n    x11 = matcher(x7, x10)\n    x12 = sfilter(x6, x11)\n    x13 = difference(x6, x12)\n    x14 = toobject(x13, I)\n    x15 = matcher(first, x1)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x14, x16)\n    x18 = merge(x17)\n    x19 = fill(I, TWO, x18)\n    x20 = color(x6)\n    O = fill(x19, x20, x2)\n    return O"], [1.1, "def solve_cd025170(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =9af4ty694\n    d687934510\n    4006941674\n    1100490694\n    8995020098\n    9706069391\n    975d9001ae(99fa2020\n    8097267001\n    7231163527\n    9214080289\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = ofcolor(I, ONE)\n    x5 = subgrid(x4, x2)\n    x6 = argmax(x4, width)\n    x7 = subgrid(x6, x3)\n    x8 = subgrid(x7, x2)\n    x9 = height(x8)\n    x10 = lowermost(x8)\n    x11 = width(x8)\n    x12 = divide(x9, x11)\n    x13 = upscale(x5, x12)\n    x14 = ofcolor(x13, ONE)\n    x15 = subgrid(x14, x8)\n    x16 = colorcount(x15, ZERO)\n    x17 = rightmost(x16)\n    x18 = add(x17, x10)\n    x19 = tojvec(x18)\n    x20 = vmirror(x15)\n    x21 = invert(x20)\n    x22 = shift(x20, x21)\n    x23 = apply(x22, x16)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = astuple(x26, x22)\n    x28 = lbind(multiply, x27)\n    x29 = apply(x28, x26)\n    x30 = interval(ZERO, x5, ONE)\n    x31 = pair(x30, x30)\n    x32 = mapply(box, x31)\n    O = fill(x15, FOUR, x32)\n    return O"], [1.1, "def solve_73822e19(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(6696, TWO)\n    x7 = rbind(colorcount, TWO)\n    x8 = argmax(x5, x7)\n    x9 = subgrid(x8, I)\n    x10 = rbind(contained, x4)\n    x11 = rbind(subtract, x4)\n    x12 = chain(x10, x11, minimum)\n    x13 = rbind(greater, ONE)\n    x14 = rbind(x13, TWO)\n    x15 = chain(x14, x11, normalize)\n    x16 = lbind(contained, TWO)\n    x17 =12(x16)\n    x18 = rbind(gravitate, x8)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(I, x4, x22)\n    return O"], [1.1, "def solve_36a6ad3e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = fork(combine, x13, x17)\n    x19 = fork( apply(x18, x3)\n    x20 = rbind(argmin, lrcorner)\n    x21 = compose(x20, delta)\n    x22 = fork(subtract, x21, x15)\n    x23 = fork(shift, x17, x22)\n    x24 = rbind(x23, RIGHT)\n    x25 = compose(x24, ulcorner)\n    x26 = x25(x2)\n    x27 = fork(subtract, x26, x24)\n    x28 = fork(shift, x22, x27)\n    x29 = fork(combine, x28, x21)\n    x30 = mapply(x29, x3)\n    O = underfill(I, EIGHT, x30)\n    return O"], [1.1, "def solve_9ad341d6(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = totuple(x6)\n    x8 =66666666(x5, x7)\n    x9 = lbind(lbind, astuple)\n    x10 = lbind(chain, x9)\n    x11 = compose(x10, x4)\n    x12 = lbind(lbind, mapply)\n    x13 = x11(x12)\n    x14 = combine(x8, x13)\n    x15 = difference(x7, x14)\n    x16 = apply(x11, x15)\n    x17 = ofcolor(I, x5)\n    x18 = intersection(x17, x16)\n    O = fill(I, TWO, x18)\n    return O"], [1.1, "def solve_cfa5a811(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =9097(I)\n    x2 = dmirror(I)\n    x3 = papply(pair, I, x1)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(x14, ZERO)\n    x16 = subgrid(x15, x14)\n    x17 = apply(x4, x16)\n    x18 = hmirror(x17)\n    x19 = papply(pair, x17, x18)\n    x20 = apply(x4, x19)\n    x21 = vmirror(x20)\n    x22 = papply(pair, x21, x20)\n    O = apply(x4, x22)\n    return O"], [1.1, "def solve_e45ea913(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = normalize(I)\n    x3 = mostcolor(I)\n    x4 = canvas(x3, x1)\n    x5 = objects(I, F, F, T)\n    x6 =65(x5)\n    x7 = mostcolor(x6)\n    x8 = first(x5)\n    x9 = matcher(first, x7)\n    x10 = sfilter(x8, x9)\n    x11 = normalize(x10)\n    x12 = objects(I, T, F, T)\n    x13 = compose(toindices, lrcorner)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x12, x14)\n    x16 = normalize(x15)\n    x17 = objects(I, T, F, T)\n    x18 = sizefilter(x17, TWO)\n    x19 = apply(invert, x18)\n    x20 = shift(x19, x17)\n    x21 = merge(x80)\n    x22 = fill(I, x7, x21)\n    x23 = shift(x20, x17)\n    x24 = fill(x22, x7, x23)\n    x25 = shift(x21, x17)\n    x26 = fill(x24, x7, x25)\n    O = paint(x26, x20)\n    return O"], [1.1, "def solve_b08cc038(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [1.1, "def solve_fd237548(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = rbind(adjacent, DOWN)\n    x11 = sfilter(x9, x10)\n    x12 =444(x11)\n    x13 =002(x12,80)\n    x14 = vmirror(x13)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x4)\n    x17 = rbind(bordering, I)\n    x18 = compose(flip, x17)\n    x19 = mfilter(x16, x18)\n    O = fill(I, EIGHT, x19)\n    return O"], [1.1, "def solve_ad949fc9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = ONE(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = palette(x3)\n    x5 =71e2676(x4)\n    x6 = palette(x3)\n    x7 = intersection(x5, x6)\n    x8 =711219723(x2)\n    x9 = shape(x3)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(x3, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = FOUR(x13)\n    x15 = subgrid(x13, x14)\n    x16 = interval(ONE, FOUR, ONE)\n    x17 = lbind(power, rot90)\n    x18 = initset(x17)\n    x19 = chain(x18, repeat, fgpartition)\n    x20 = lbind(lbind, shift)\n    x21 = occurrences(x15, x16)\n    x22 = mapply(x20, x21)\n    O = paint(x10, x22)\n    return O"], [1.1, "def solve_d8dc42ad(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = argmax(I, size)\n    x2 = color(x1)\n    x3 = subgrid(x1, I)\n    x4 = objects(x3, F, T, T)\n    x5 = argmin(x4, size)\n    x6 = subgrid(x5, I)\n    x7 = normalize(x6)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 = ZERO(x8)\n    x11 = astuple(x10, x9)\n    x12 = add(x11, ORIGIN)\n    x13 = hupscale(x3, x12)\n    x14 = output:\n    x13, x7)\n    x15 = width(x7)\n    x16 = height(x7)\n    x17 = tojvec(x16)\n    x18 = lbind(shift, x7)\n    x19 = compose(x18, toivec)\n    x20 = height(x7)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = apply(x19, x22)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x23)\n    x26 = combine(x28, x25)\n    x27 = paint(x3, x26)\n    x28 = lbind(shift, x7)\n    x29 = rapply(x28, x25)\n    x30 = mapply(x29, x28)\n    x31 = paint(x27, x30)\n    O = branch(x5, x30, x31)\n    return O"], [1.1, "def solve_17defa96(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(shift, I)\n    x2 = lbind(multiply, THREE)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = chain(decrement, dmirror, x4)\n    x6 = fork(equality, toindices, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = x5(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 =565(x10)\n    x13 = in2005(x12)\n    x14 =730(x10)\n    x15 = lefthalf(x14)\n    x16 = righthalf(x14)\n    x17 = rbind(order, leftmost)\n    x18 = compose(x17, x16)\n    x19 = rbind(order, rightmost)\n    x20 = compose(x19, x16)\n    x21 = rbind(order, ZERO_BY_TWO)\n    x22 = compose(x21, x19)\n    x23 = fork(combine, x18, x20)\n    x24 = fork(combine, x23, x22)\n    x25 = compose(x24, backdrop)\n    x26 = fork(recolor, x25, x20)\n    x27 = mapply(x26, x8)\n    x28 = paint(x10, x27)\n    x29 = dmirror(x28)\n    x30 = objects(x29, T, F, T)\n    x31 =907(x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = pair(x33, x30)\n    x35 = mapply(last, x34)\n    x36 = paint(x27, x35)\n    O = x5(x36)\n    return O"], [1.1, "def solve_ecc72f4c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 =81(I)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(x5, x6)\n    x8 = double(x2)\n    x9 = compose(multiply, last)\n    x10 = argmin(x7, x9)\n    O = mostcolor(x10)\n    return O"], [1.1, "def solve_4da80f6c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = replace(x6, NEG_ONE, ZERO)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter, x21, x17)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.1, "def solve_24147c9c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =782(x2)\n    x4 = apply(color, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x5)\n    O = fill(x6, TWO, x8)\n    return O"], [1.1, "def solve_cbd0aacf(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = ofcolor(I, x8)\n    x10 = urcorner(x9)\n    x11 = ulcorner(x9)\n    x12 = shoot(x11, NEG_UNITY)\n    x13 = shoot(x11, UP_RIGHT)\n    x14 = combine(x12, x13)\n    x15 = underfill(I, ZERO, x14)\n    x16 = objects(x15, T, F, T)\n    x17 =597158(x16, merge)\n    x18 = center(x17)\n    x19 = shoot(x18, DOWN_LEFT)\n    x20 = shoot(x18, UNITY)\n    x21 = combine(x19, x20)\n    x22 =47(x21)\n    x23 = asindices(x11)\n    x24 = ofcolor(x11, x8)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    x29 = asindices(I)\n    x30 = shape(x11)\n    x31 = intersection(x29, x30)\n    x32 = fill(x11, x8, x31)\n    x33 = compose(first, last)\n    x34 = fork(recolor, x33, first)\n    x35 = mapply(x34, x28)\n    x36 = paint(x32, x35)\n    O = replace(x36, x8, x5)\n    return O"], [1.1, "def solve_386042f0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 =755522455\n    0942255522\n    4285065628\n    1980568079\n    9599496669\n    2740694924\n    9595380864\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [1.1, "def solve_0e1c23e2(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = chain(x4, x3, cmirror)\n    x6 = matcher(x5, ZERO)\n    x7 = extract(x1, x6)\n    x8 =49810(x7)\n    x9 = argmax(x8, identity)\n    x10 = leastcolor(x9)\n    x11 = matcher(first, x10)\n    x12 = sfilter(x8, x11)\n    x13 = merge(x12)\n    x14 = vmirror(x13)\n    x15 = mostcolor(I)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = fill(x17, x10, x14)\n    x19 = lbind(e179, x10)\n    x20 = lbind(occurrences, x18)\n    x21 = lbind(lbind, shift)\n    x22 = compose(x21, toindices)\n    x23 = chain(x19, x21, x22)\n    x24 = lbind(mapply, x23)\n    x25 = rbind(occurrences, x18)\n    x26 = lbind(mapply, x24)\n    x27 = chain(x25, x26, x22)\n    x28 = astuple(cmirror, dmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = combine(x28, x29)\n    x31 = product(x30, x30)\n    x32 = fork(compose, first, last)\n    x33 = apply(x32, x31)\n    x34 =0191524 x33)\n    x35 = combine(xsIX, x34)\n    x36 = paint(x20, x35)\n    O = paint(x36, x36)\n    return O"], [1.1, "def solve_faca5f25(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x NEG_UNITY)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    x36 = fill(x35, x11, x34)\n    O = fill(x36, x10, x35)\n    return O"], [1.1, "def solve_a1e40878(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =48(I)\n    x3 = replace(I, x1, ZERO)\n    x4 = compose(dmirror, merge)\n    x5 = x4(x3)\n    x6 = astuple(NEG_TWO, NEG_TWO)\n    x7 = shift(x5, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = mapply(x8, x7)\n    O = underfill(x3, x1, x9)\n    return O"], [1.1, "def solve_6e045321(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(x1, ZERO)\n    x3 = astuple(ZERO, ORIGIN)\n    x4 = initset(x3)\n    x5 = upscale(x4, TWO)\n    x6 = portrait(x5)\n    x7 = branch(x6, ZERO, RIGHT)\n    x8 = ulcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = shift(x9, TWO_BY_TWO)\n    x11 = branch(x6, toindices, box)\n    x12 = fork(combine, hfrontier, vfrontier)\n    x13 = x12(x110)\n    x14 = corners(x5)\n    x15 = ofcolor(x14, ZERO)\n    x16 = mapply(x12, x15)\n    x17 = difference(x10, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x19, x20)\n    x22 = other(x21, x1)\n    x23 = ofcolor(x18, x22)\n    x24 = lbind(shift, x18)\n    x25 = halve(x4)\n    x26 =345(x25)\n    x27 = subgrid(x23, x26)\n    O = trim(x27)\n    return O"], [1.1, "def solve_e4b21d87(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =44mirror(x2)\n    x4 = replace(I, NINE, ZERO)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = color(x3)\n    x7 = lbind(shift, x3)\n    x8 = apply(x7, x5)\n    x9 = mapply(x8, x4)\n    O = paint(x4, x9)\n    return O"], [1.1, "def solve_16354b3c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =52(I)\n    x5 = matcher(first, x3)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    O = fill(I, NINE, x9)\n    return O"], [1.1, "def solve_d9e6655e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width761259726\n    70721528170\n    0583544745\n    5784467579\n    5526432855\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_ff971bee(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(d687, toindices, x4)\n    x6 = lbind(difference, x1)\n    x7 = compose(x6, toindices)\n    x8 = chain(positive, size, x7)\n    x9 = lbind(lbind, shift)\n    x10 = apply(x9, x8)\n    x11 =552299b230(x10)\n    x12 = lbind(ofcolor, x4)\n    x13 = compose(x12, x8)\n    x14 = fork(recolor, x13, identity)\n    x15 = mapply(x14, x12)\n    x16 = paint(I, x15)\n    x17 =Revppaint(x16, x1)\n    O = objects(x17, T, F, T)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_e848cd8e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.08173484697705038, "def solve_161cf03a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.08173484697705038, "def solve_88a16f69(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_fbaaf83e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.08173484697705038, "def solve_4821dd5c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = subgrid(x3, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, x1, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, x1, x16)\n    return O"], [0.08173484697705038, "def solve_c75e5496(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.08173484697705038, "def solve_b6129454(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, last)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_c42446ab(I):\n    O = replace(I, FOUR, ZERO)\n    return O"], [0.08173484697705038, "def solve_e9562815(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_7b19ecb9(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_50b6b36c(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_540e1458(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.08173484697705038, "def solve_b3135066(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.08173484697705038, "def solve_2a75e1ef(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, TWO, x3)\n    return O"], [0.08173484697705038, "def solve_f012a851(I):\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = interval(x33, x29, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x22)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.08173484697705038, "def solve_07ad5d03(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.08173484697705038, "def solve_5155b3b6(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08318632736744225, "def solve_05dd9d12(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_f0ea4f02(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_47df6898(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_36d223d8(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_5f7a68b7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_19fd0a58(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_885ddf67(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_ea32005f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_c2281b96(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_90565e03(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_5f45f139(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_04574a5a(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_600e8b37(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_99d2a7b3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_5effc4d7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_c5488d26(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_3f266eba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_a01e786b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_194a097f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.1179007840135784, "def solve_6fd190e8(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.12284772253271087, "def solve_839f398e(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.12814991617905258, "def solve_6b569afe(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.13468134728045977, "def solve_4ac730df(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_a74bd57c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_f1c132e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_1054c2f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_4b677b91(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_4074f730(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_4d5fce32(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_b54fc6ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_576710ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_50ad09e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_c972eccc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_11d0edd1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_3673afd6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_357caa72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_c2932f76(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.14098233381512817, "def solve_b6a0d229(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.14633502634498852, "def solve_fcb97da4(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_9fc7c0a8(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_d8208217(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_73f802f1(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_263a58cd(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_f73a17bb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.147039853263387, "def solve_1f170a64(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.15329845560571315, "def solve_a5e9d17d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [0.15901156054075782, "def solve_477ff01d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = mapply(x24, x19)\n    O = paint(I, x25)\n    return O"], [0.1697728934434557, "def solve_9124b818(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_70383862(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_7468d487(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_4b9601e6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_64d1e023(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.17676372824140774, "def solve_397ed6e5(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.17676372824140774, "def solve_ee65841b(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.19697584298070395, "def solve_85e53d92(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.19986952115995066, "def solve_f1b42bfb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.2005586948668813, "def solve_ea53f5a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.20252763457609518, "def solve_f8867b30(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_75279b56(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_ed258f16(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_d29215b7(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_fa0bbc5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_eadf6f49(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20977289344345568, "def solve_c465c00b(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_1700566c(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_3d77ebc9(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_058b3b0d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_05da2b43(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_6b61d368(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_15cee853(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_70089b3d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_817f4653(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_29340112(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_850c53d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.20977289344345568, "def solve_5089002f(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_2f02e199(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_9ea6fe03(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2133114088199879, "def solve_6c0c3a38(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.2164395601101224, "def solve_2584e703(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.2164395601101224, "def solve_ead53366(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.22208695827893984, "def solve_1879f635(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.22284967714703272, "def solve_cdaf8146(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.22284967714703272, "def solve_caacc226(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.22355845739019234, "def solve_3049583f(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = asobject(I)\n    x6 = difference(x5, x4)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = paint(I, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = mapply(delta, x9)\n    O = fill(x8, ZERO, x10)\n    return O"], [0.22746637157822558, "def solve_d6959afb(I):\n    O = vmirror(I)\n    return O"], [0.2439602051018977, "def solve_6ca9257e(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = astuple(x2, ONE)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = shoot(x5, RIGHT)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, FOUR, x7)\n    return O"], [0.25543417203130403, "def solve_8e0b6c55(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.25543417203130403, "def solve_2e0a94bc(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.25543417203130403, "def solve_1e2562e5(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.26111179868866197, "def solve_7d664772(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = sfilter(x13, x10)\n    x15 = size(x14)\n    x16 = greater(x12, x15)\n    x17 = branch(x16, hmirror, identity)\n    x18 = x17(x6)\n    x19 = partition(x18)\n    x20 = matcher(color, x8)\n    x21 = extract(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = argmin(x22, uppermost)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = color(x24)\n    x27 = fill(x18, TWO, x21)\n    x28 = fill(x27, ONE, x24)\n    x29 = fill(x28, ZERO, x23)\n    x30 = rbind(order, identity)\n    x31 = dmirror(x29)\n    x32 = apply(x30, x31)\n    x33 = dmirror(x32)\n    x34 = x17(x33)\n    x35 = x5(x34)\n    x36 = ofcolor(x35, TWO)\n    x37 = fill(x35, x8, x36)\n    x38 = ofcolor(x35, ONE)\n    x39 = fill(x37, x26, x38)\n    x40 = ofcolor(x35, ZERO)\n    O = fill(x39, x25, x40)\n    return O"], [0.2730213103674518, "def solve_e1c9bd3f(I):\n    O = rot180(I)\n    return O"], [0.2730213103674518, "def solve_11c3c0ac(I):\n    O = rot180(I)\n    return O"], [0.2730213103674518, "def solve_65506423(I):\n    O = rot180(I)\n    return O"], [0.2730213103674518, "def solve_dd30881e(I):\n    x1 = dmirror(I)\n    O = cmirror(x1)\n    return O"], [0.2735505434325868, "def solve_02ac69d9(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2781097602204145, "def solve_b3d4c9c9(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.28257229929506134, "def solve_6f3a6e0e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28271352439090625, "def solve_19535a00(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_b421dfbd(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.28271352439090625, "def solve_f129703e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_a98d59b6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.28271352439090625, "def solve_2907a38e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_95e41dd6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.2912996173225872, "def solve_c63a5c72(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_7b4af5af(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_7a3592b6(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_2a7f068d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_db2101a9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_88d26863(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_b555df2e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_e6613122(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_1910037e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_82a0b75d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_e35470f2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_a7d1865b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.29175210347734337, "def solve_9459ea6c(I):\n    O = trim(I)\n    return O"], [0.2957105825141008, "def solve_6b2138cd(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2957105825141008, "def solve_a8fd49cd(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2957105825141008, "def solve_b63cb71d(I):\n    x1 = replace(I, NINE, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.29660861186373566, "def solve_1031dae9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_e5a41df3(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_abb9653c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_ad996615(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_36ca63a9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.31572456964802403, "def solve_e7bb5665(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.326168988805897, "def solve_e3e4a528(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3315011728051802, "def solve_ba922e50(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.34824203760771505, "def solve_e65f80d5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3562324758704612, "def solve_a126ec1f(I):\n    x1 = replace(I, EIGHT, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.36791347770439387, "def solve_37cf8237(I):\n    O = dmirror(I)\n    return O"], [0.36791347770439387, "def solve_cdf59cea(I):\n    O = dmirror(I)\n    return O"], [0.3997728934434557, "def solve_f52ac5ae(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_bd425757(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.3997728934434557, "def solve_6931f7de(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.3997728934434557, "def solve_45bb8e4e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_a3173aad(I):\n    x1 = shape(I)\n    x2 = asindices(I)\n    x3 = objects(I, T, F, F)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, x1)\n    x8 = paint(x7, x4)\n    x9 = mostcolor(I)\n    x10 = color(x4)\n    x11 = astuple(x9, ORIGIN)\n    x12 = astuple(x10, RIGHT)\n    x13 = astuple(x9, ZERO_BY_TWO)\n    x14 = initset(x13)\n    x15 = insert(x12, x14)\n    x16 = insert(x11, x15)\n    x17 = dmirror(x16)\n    x18 = toindices(x16)\n    x19 = lbind(shift, x18)\n    x20 = occurrences(x8, x16)\n    x21 = mapply(x19, x20)\n    x22 = toindices(x17)\n    x23 = lbind(shift, x22)\n    x24 = occurrences(x8, x17)\n    x25 = mapply(x23, x24)\n    x26 = combine(x21, x25)\n    O = fill(x8, x9, x26)\n    return O"], [0.3997728934434557, "def solve_d273b463(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.3997728934434557, "def solve_2319a64a(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.4121180954681841, "def solve_0a7bc089(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.41434496433667933, "def solve_ea5df16d(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [0.4221658498666133, "def solve_6c239764(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.4221658498666133, "def solve_1d799efa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.4221658498666133, "def solve_e81ccc4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.422860611640019, "def solve_b493dfd6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.44421029663584294, "def solve_6e0e6ffd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_2f2fcf1a(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_6f1b2970(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_86ed03ba(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_6f0730c0(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.4496658498666134, "def solve_211e4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.4496658498666134, "def solve_c1e1f707(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.5139167016098167, "def solve_9f80af8e(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.5212503898647081, "def solve_bc81486c(I):\n    x1 = replace(I, ZERO, ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.5235791174015115, "def solve_29be50d3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_d98a660c(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5542587288414367, "def solve_bc06d494(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_20bde5d9(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_5a85a4c0(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_724cfa4f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5641693586048402, "def solve_881da893(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5648229277707709, "def solve_fb3f508d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.6014849716551933, "def solve_72cde99e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6026882035589904, "def solve_7ae35f95(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = dedupe(x3)\n    return O"], [0.641276367065674, "def solve_0744f58c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_7cf03094(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, T, F, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_12f80178(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_b3d39f30(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.6460408141864922, "def solve_0832912d(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_0f590ebb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6460408141864922, "def solve_64681a5f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_e4d9aa9e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_4f220bec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = shape(x6)\n    x13 = canvas(x11, x12)\n    x14 = ofcolor(x6, x11)\n    x15 = ofcolor(x7, x11)\n    x16 = intersection(x14, x15)\n    O = fill(x13, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_14acc4b7(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6641334926126692, "def solve_50ffae8b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x3, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x4, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.7289340177498994, "def solve_a9fc4fdd(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = ofcolor(x4, ZERO)\n    x6 = ofcolor(x2, ZERO)\n    x7 = intersection(x5, x6)\n    x8 = shape(x3)\n    x9 = canvas(ZERO, x8)\n    O = fill(x9, THREE, x7)\n    return O"], [0.7540848163604722, "def solve_fb4099f9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7883072142336106, "def solve_43b470fd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x3, x7)\n    return O"], [0.7915392052312495, "def solve_d82ab65e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_8fc26d0f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_966c3959(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_90c82262(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.8642031835623443, "def solve_b55feb1a(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.9081403808721191, "def solve_01d0ebb5(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_f5bd6aab(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_896bcc9d(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_5ad7f1a7(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_d67c7304(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_641f9ec3(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_7bd39526(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_2466f39e(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9182807290875006, "def solve_16678d0e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_6dd03f15(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_14424f72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_f1a4a8f3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_19e93b86(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_7d20db21(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_8dd9a0f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_7c5d5318(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_0f67723b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_1cd1c801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_363c9896(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.9182807290875006, "def solve_df209154(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_42e056ec(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.9182807290875006, "def solve_0b4e2894(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_f8e3f5ed(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_1fadd532(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_3dc52985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_6dbb6863(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.9182807290875006, "def solve_d1f415d7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.9182807290875006, "def solve_960122e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_76830682(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_ba210909(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.9183491285403049, "def solve_353e5a4b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_05a9b810(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.9185740049506481, "def solve_f24b9c81(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.95, "def solve_fe53566c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.95, "def solve_63a25bc0(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.95, "def solve_ef5bc955(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.95, "def solve_bac9365e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_88054beb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_603d0c64(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x7)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = increment(x15)\n    x17 = shift(x15, x16)\n    x18 = rbind(gravitate, x17)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(x11, x7, x22)\n    return O"], [1.0, "def solve_00be2bd9(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_cf5e8e00(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [1.0, "def solve_53c3e3fd(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = compose(dneighbors, shape)\n    x4 = fork(difference, backdrop, x3)\n    x5 = toobject(x2, I)\n    x6 = matcher(first, x1)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = colorfilter(x13, x1)\n    x15 = argmax(x14, numcolors)\n    x16 = matcher(first, x1)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = remove(x19, x18)\n    x21 = lbind(shift, x19)\n    x22 = mapply(x21, x20)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_08933e2e(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x13 = rbind(shoot, NEG_UNITY)\n    x14 = fork(combine, x6, x13)\n    x15 = fork(combine, x5, x14)\n    x16 = index(I, x2)\n    x17 = x15(x2)\n    x18 = ulcorner(x2)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = subgrid(x2, I)\n    x24 = objects(x23, x22, x23)\n    x25 = merge(x24)\n    x26 = cover(x23, x25)\n    x27 = subgrid(x2, x26)\n    x28 = objects(x27, x24, x23)\n    x29 = rbind(toobject, x27)\n    x30 = chain(x29, corners, outbox)\n    x31 = fork(both, x28, x30)\n    x32 = extract(x28, x31)\n    O = fill(x27, ONE, x32)\n    return O"], [1.0, "def solve_b551fc17(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_cec4d0e5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_1a9da7d1(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = chain(x2, x3, palette)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(palette, x5)\n    x7 = lbind(apply, x6)\n    x8 = chain(flip, x7, x5)\n    x9 = sfilter(I, x8)\n    x10 = fork(recolor, x6, x3)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_753ad728(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = toivec(x2)\n    x4 = crop(I, x3, x2)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [1.0, "def solve_786af6da(I):\n    x1 = Vision(I)\n    x2 = lbind(contained, TWO)\n    x3 = chain(x2, dmirror, identity)\n    x4 = compose(x1, x3)\n    x5 = astuple(vsplit, hsplit)\n    x6 = x4(I, TWO)\n    x7 = order(x5, x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = product(x8, x9)\n    x11 = matcher(x4, x8)\n    x12 = compose(flip, x11)\n    x13 = extract(x10, x12)\n    x14 = lbind(sfilter, x10)\n    x15 = compose(first, last)\n    x16 = lbind(matcher, x15)\n    x17 = chain(x14, x16, leftmost)\n    x18 = fork(4488, x17, last)\n    x19 = fork(sfilter, x18, first)\n    x20 = compose(last, last)\n    x21 = compose(flip, x20)\n    x22 = fork(recolor, x18, x21)\n    x23 = mapply(x22, x13)\n    O = paint(x6, x23)\n    return O"], [1.0, "def solve_2fea53ed(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_53c824b7(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c3ad5459(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b8386a1b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_48d9d2dc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = matcher(first, x1)\n    x12 = sfilter(x10, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = first(x13)\n    x15 = divide(x4, x5)\n    x16 = downscale(x14, x15)\n    x17 = objects(x16, F, F, T)\n    x18 = color(x2)\n    x19 = ofcolor(x16, x18)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(x16, x21)\n    return O"], [1.0, "def solve_e0e7797b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(x2, frontiers)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, hsplit, vsplit)\n    x8 = x7(I, TWO)\n    x9 = argmin(x8, numcolors)\n    x10 = asindices(x9)\n    x11 = apply(first, x10)\n    x12 = last(x10)\n    x13 = remove(x11, x10)\n    x14 = x12(x13)\n    x15 = toobject(x14, x9)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = x17(x12)\n    x19 = rbind(multiply, x18)\n    x20 = apply(x19, x323)\n    x21 = mapply(x17, x20)\n    x22 = paint(I, x21)\n    O = downscale(x22, TWO)\n    return O"], [1.0, "def solve_4db0a922(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_aedae3c4(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_25a4218a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = objects(x2, T, F, F)\n    x4 = compress(x3)\n    x5 = toindices(x4)\n    x6 = box(x5)\n    x7 = fill(x1, EIGHT, x6)\n    x8 = difference(x5, x4)\n    O = fill(x7, TWO, x8)\n    return O"], [1.0, "def solve_77dc6175(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = index(x2, ORIGIN)\n    x4 = replace(I, ZERO, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = apply(ulcorner, x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = paint(x4, x8)\n    return O"], [1.0, "def solve_51cabb50(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 = compose(x26, x27)\n    x29 = fork(equality, identity, x28)\n    x30 = sfilter(x25, x29)\n    x31 = apply(x24, x30)\n    x32 = sfilter(x25, x31)\n    x33 = merge(x32)\n    x34 = fill(x14, x13, x33)\n    x35 = difference(x34, x32)\n    O = fill(x35, x10, x35)\n    return O"], [1.0, "def solve_d42f922b(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_09e47d1f(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, frontiers)\n    x3 = mfilter(x2, hline)\n    x4 = mfilter(x2, vline)\n    x5 = x4(I)\n    x6 = x4(I)\n    x7 = color(x3)\n    x8 = palette(x5)\n    x9 = remove(x7, x8)\n    x10 = lbind(shift, x5)\n    x11 = mapply(x10, x9)\n    x12 = palette(x6)\n    x13 = remove(x7, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(merge, x18)\n    x20 = size(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = apply(toivec, x21)\n    x23 = mpapply(shift, x19, x22)\n    x24 = canvas(ZERO, UNITY)\n    x25 = lbind(shift, x24)\n    x26 = matcher(x25, FOUR)\n    x27 = mfilter(x23, x26)\n    O = paint(x17, x27)\n    return O"], [1.0, "def solve_f05195db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(THREE, x2)\n    x4 = rbind(shift, x3)\n    x5 = compose(x4, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, x5)\n    x8 = fork(mapply, x7, x5)\n    O = apply(x8, x1)\n    return O"], [1.0, "def solve_35d72955(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(d23, x3)\n    x5 = fill(I, FOUR, x4)\n    x6 = compose(last, first)\n    x7 = power(last, TWO)\n    x8 = fork(equality, x6, x7)\n    x9 = sfilter(x4, x8)\n    O = fill(x5, FOUR, x9)\n    return O"], [1.0, "def solve_12cda30b(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x5 = positive(x4)\n    x6 = branch(x5, vsplit, hsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = equality(x8, x9)\n    x11 = branch(x10, vmirror, hmirror)\n    x12 = x11(x8)\n    x13 = x11(x9)\n    x14 = partition(x12)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x16)\n    x18 = fafffa47(x13)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = paint(x7, x20)\n    x22 = x11(x21)\n    x23 = replace(x22, ZERO, x17)\n    x24 = replace(x23, x18, x20)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    O = paint(x12, x34)\n    return O"], [1.0, "def solve_5d21886c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = mostcolor(I)\n    return O"], [1.0, "def solve_5278c22e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_5d65c7ec(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x12)\n    O = paint(x4, x3)\n    return O"], [1.0, "def solve_222fc3f0(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = chain(x4, first, last)\n    x6 = compose(x5, x3)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_af481828(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(camirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2e54c034(I):\n    x1 = frontiers(I)\n    x2 = matcher(size, ZERO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, x4, normalize)\n    x6 = mapply(x5, x1)\n    x7 = fill(I, EIGHT, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, x7)\n    return O"], [1.0, "def solve_bdf1df30(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, leastcolor)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x4, x11)\n    x13 = lbind(colorcount, x3)\n    x14 = argmin(x12, x13)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x3, x15)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, x3)\n    x19 = matcher(first, x15)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = lbind(recolor, x17)\n    x23 = chain(x22, ulcorner, x20)\n    x24 = chain(x21, x23, x20)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(recolor, identity, x25)\n    x27 = mapply(x26, x12)\n    O = paint(x3, x27)\n    return O"], [1.0, "def solve_2ae0ddbf(I):\n    x1 = ofcolor(I, ONE)\n    x2 = rbind(difference, x1)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = compose(50,    4)\n    x6 = objects(I, T, F, T)\n    x7 = sfilter(x6, x5)\n    x8 = totuple(x7)\n    x9 = apply(color, x8)\n    x10 = apply(center, x8)\n    x11 = pair(x9, x10)\n    x12 = sfilter(x11, x5)\n    x13 = compose(leftmost, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = difference(x2, x12)\n    x16 = extract(x15, x14)\n    x17 = ulcorner(x16)\n    x18 = subgrid(x16, I)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x18, x20)\n    x22 = replace(x2, ONE, ZERO)\n    x23 = sfilter(x21, x22)\n    x24 = correctmax(x23, x7)\n    x25 = dmirror(x24)\n    x26 = replace(x21, ONE, ZERO)\n    x27 = lbind(recolor, DOWN)\n    x28 = chain(x27, color, x8)\n    x29 = fork(combine, x28, x24)\n    x30 = chain(x29, x25, x28)\n    x31 = merge(x26)\n    x32 = cover(x11, x31)\n    x33 = paint(x32, x22)\n    O = x30(x33)\n    return O"], [1.0, "def solve_18e89320(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30,52378, x31)\n    x33 = x21(x32)\n    x34 = shift(x33, x33)\n    O = fill(x10, x6, x34)\n    return O"], [1.0, "def solve_b4992ae7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_34783792(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_7f34fba6(I):\n    x1 = lbind(toobject, I)\n    x2 = compose(increment, double)\n    x3 = chain(toivec, x1, x2)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(decrement, double)\n    x6 = chain(tojvec, x5, x4)\n    x7 = fork(shift, identity, x6)\n    x8 = compose(hmirror, x7)\n    x9 = mapply(x8, I)\n    x10 = shift(x9, UP)\n    x11 = apply(x9, x10)\n    x12 = size(x11)\n    x13 = positive(x12)\n    x14 = branch(x13, x7, x6)\n    x15 = x14(I)\n    x16 = subgrid(x15, x15)\n    O = partition(x16)\n    return O"], [1.0, "def solve_cc0c100c(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a419a2e9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_5af7008f(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [1.0, "def solve_6e6a340f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = fork(both, x1, x6)\n    x8 = mfilter(x5, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_f636b2e5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_48659c9a(I):\n    UNITY = frontiers(I)\n    x1 = sfilter(x4, hline)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x74 = branch(x3, dmirror, identity)\n    x5 = x7(I)\n    x6 = frontiers(I)\n    x7 = x6(I)\n    x8 = mostcolor(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = argmin(x6, x11)\n    O = x12(I)\n    return O"], [1.0, "def solve_26d2a3d0(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = ofcolor(I, ZERO)\n    x6 = switch(x4, EIGHT, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = hconcat(x7, x7)\n    O = vconcat(x8, x8)\n    return O"], [1.0, "def solve_1a6f0a43(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dbffac02(I):\n    x1 = frontiers(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = sfilter(x1, x6)\n    x8 = merge(x7)\n    x9 = color(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = argmin(x13, numcolors)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x9, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x24)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x24)\n    O = paint(I, x27)\n    return O"], [1.0, "def solve_8ba66fe9(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2a867826(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, x4, x9)\n    x11 = paint(x10, x8)\n    x12 = rbind(hmirror, x8)\n    x13 = rbind(vmatching, x8)\n    x14 = fork(either, x12, x13)\n    x15 = compose(x14, initset)\n    x16 = matcher(x15, x4)\n    x17 = sfilter(x11, x16)\n    x18 = merge(x17)\n    x19 = fill(x11, TWO, x18)\n    x20 = size(x11)\n    x21 = invert(x20)\n    x22 = tojvec(x21)\n    x23 = shift(x11, x22)\n    O = fill(x19, TWO, x23)\n    return O"], [1.0, "def solve_ff1ed23f(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x50)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [1.0, "def solve_44742002(I):\n    x1 = argmin(I, size)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = recolor(ZERO, x3)\n    x5 = dmirror(x2)\n    x6 = occurrences(x5, x4)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    O = fill(x2, ZERO, x8)\n    return O"], [1.0, "def solve_f59928f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8dd1db36(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_34bf83c9(I):\n    x1 = frontiers(I)\n    x2 = Tfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_60b5c352(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_4ab8494a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_f04a5ca3(I):\n    x1 = canvas(Faff, TWO_BY_TWO)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = mapply(x2, x1)\n    O = fill(x1, ZERO, x3)\n    return O"], [1.0, "def solve_ced0df89(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(toobject, I)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x6, initset)\n    x8 = chain(x5, x7, dneighbors)\n    x9 = matcher(x8, UNITY)\n    x10 = compose(flip, x9)\n    x11 = fork(both, x3, x10)\n    x12 = sfilter(x4, x11)\n    x13 = objects(I, T, F, T)\n    x14 = fork(connect, ulcorner, lrcorner)\n    x15 = fork(connect, llcorner, urcorner)\n    x16 = fork(combine, x14, x15)\n    x17 = mapply(x16, x12)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_db027320(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(maximum, x2)\n    x4 = lbind(apply, x3)\n    x5 = chain(x1, x4, decrement)\n    x6 = fork(toivec, identity, x5)\n    x7 = compose(x4, x6)\n    x8 = fork(add, identity, x7)\n    x9 = fork(connect, identity, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(225, x10, x5)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(subtract, identity, x12)\n    x14 = fork(shift, identity, x13)\n    x15 = mapply(x14, x10)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_0e79fde3(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = hconcat(x3, x1)\n    return O"], [1.0, "def solve_bac87b3d(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [1.0, "def solve_86eccaae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(manhattan, x4)\n    x6 = compose(even, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, size)\n    x9 = canvas(x8, UNITY)\n    x10 = fill(x9, TWO, x7)\n    x11 = fill(x10, ONE, x8)\n    x12 = fill(x11, NEG_ONE, x8)\n    x13 = fill(x12, FOUR, x7)\n    x14 = fill(x13, ONE, x8)\n    x15 = fill(x14, THREE, x9)\n    O = fill(x15, TWO, x13)\n    return O"], [1.0, "def solve_1499c086(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = frontiers(I)\n    x6 = color(x5)\n    x7 = x2(I)\n    x8 = paint(x7, x4)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = astuple(x9, x10)\n    x12 = add(x11, NEG_UNITY)\n    x13 = uppermost(x7)\n    x14 = rightmost(x7)\n    x15 = astuple(x13, x14)\n    x16 = add(x15, UP_RIGHT)\n    x17 = lowermost(x7)\n    x18 = leftmost(x7)\n    x19 = astuple(x17, x18)\n    x20 = add(x19, DOWN_LEFT)\n    x21 = lowermost(x7)\n    x22 = llcorner(x21)\n    x23 = urcorner(x21)\n    x24 = shoot(x11, UNITY)\n    x25 = shoot(x11, DOWN_LEFT)\n    x26 = shoot(x11, UP_RIGHT)\n    x27 = shoot(x11, NEG_UNITY)\n    x28 = combine(x24, x25)\n    x29 = combine(x26, x27)\n    x30 = combine(x28, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_414dfc9f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_649c03a4(I):\n    x1 = remove(I, x2)\n    x2 = lbind(ofcolor, I)\n    x3 = compose(x2, frontiers)\n    x4 = fork(recolor, x3, leastcolor)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_0b97eaa5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c3bbcb8(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = Fgpartition(I)\n    x12 = merge(x11)\n    x13 = rbind(colorcount, x12)\n    x14 = matcher(x13, x10)\n    x15 = fork(both, x14, x9)\n    x16 = sfilter(x8, x15)\n    x17 = compose(x12, normalize)\n    x18 = apply(x17, x16)\n    x19 = merge(x8)\n    x20 = cover(I, x19)\n    x21 = paint(x20, x18)\n    x22 = asindices(x21)\n    x23 = x17(x22)\n    x24 = shift(x23, x24)\n    x25 = fork(mapply, x17, x24)\n    x26 = mapply(x25, x24)\n    O = fill(x21, x19, x26)\n    return O"], [1.0, "def solve_77437bd6(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_7e48552b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e8cdfe05(I):\n    x1 = astuple(I, I)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [1.0, "def solve_110d246c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_efbfa85d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(first, x3)\n    x5 = lbind(intersection, x2)\n    x6 = chain(positive, size, x5)\n    x7 = rbind(matcher, ZERO)\n    x8 = compose(x7, x4)\n    x9 = chain(flip, x6, x8)\n    x10 = sfilter(x2, x9)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_16e409c7(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_4207d701(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_239be59f(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.0, "def solve_baf8a095(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_a2052ebf(I):\n    O =88888888\n    return O"], [1.0, "def solve_203f7775(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(interval, ZERO)\n    x5 = rbind(x4, ONE)\n    x6 = compose(x5, x3)\n    x7 = fork(pair, x6, identity)\n    x8 = compose(x1, x7)\n    x9 = asindices(I)\n    x10 = x8(x9)\n    x11 = leastcolor(I)\n    x12 = ofcolor(I, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x10, x14)\n    x16 = difference(x10, x15)\n    x17 = fill(I, ZERO, x16)\n    x18 = intersection(x15, x16)\n    x19 = cover(x17, x18)\n    x20 = intersection(x15, x16)\n    O = fill(x19, x11, x20)\n    return O"], [1.0, "def solve_4376de90(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = astuple(x4, x5)\n    x9 = add(x8, UNITY)\n    x10 = initset(x9)\n    x11 =255256225\n    x102011148\n    2216808224\n    O = fill(I, x7, x10)\n    return O"], [1.0, "def solve_d74cad8d(I):\n    x1 = astuple(ONE, THREE)\n    x2 = size(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x7, x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = upscale(x6, delta)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = intersection(x7, x9)\n    O = fill(x9, FOUR, x10)\n    return O"], [1.0, "def solve_b12e5c03(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = upscale(x3, THREE)\n    x5 = ONE(x4)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = rbind(toobject, I)\n    x8 = compose(x7, frontiers)\n    x9 = sfilter(x6, x8)\n    x10 = pair(x9, x4)\n    x11 = apply(x11, x10)\n    x12 = mapply(x8, x11)\n    x13 = argmin(x5, x12)\n    x14 = add(x13, x11)\n    x15 = canvas(ZERO, x14)\n    x16 = asobject(x12)\n    x17 = shift(x16, x14)\n    x18 = paint(x15, x17)\n    O = rot180(x18)\n    return O"], [1.0, "def solve_7d1b62f9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x11, x14)\n    x16 = interval(ONE, SEVEN, ONE)\n    x17 = lbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_dd436da0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = product(x11, x11)\n    x13 = compose(last, first)\n    x14 = compose(last, last)\n    x15 = fork(astuple, x13, x14)\n    x16 = fork(shoot, identity, x15)\n    x17 = mapply(x16, x12)\n    x18 = combine(x17, x13)\n    x19 = fill(I, ZERO, x18)\n    O = paint(x19, x2)\n    return O"], [1.0, "def solve_0ff1a65a(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_c8537b77(I):\n    O = astuple(SIX, SIX)\n    return O"], [1.0, "def solve_fae1fa70(I):\n    x1 = halve(TEN)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2f30089b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_20acbac9(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(ff805, x5)\n    x7 = lbind( chain, backdrop)\n    x8 = lbind(x7, dneighbors)\n    x9 = chain(x5, x8, toindices)\n    x10 = apply(x9, x5)\n    x11 = fork(subtract, maximum, minimum)\n    x12 = x11(x10)\n    x13 = toivec(x12)\n    x14 = tojvec(x12)\n    x15 = connect(x13, x14)\n    x16 = astuple(x12, x12)\n    x17 = connect(x15, x16)\n    x18 = combine(x15, x17)\n    x19 = fill(I, ONE, x18)\n    x20 = leastcolor(x19)\n    O = ofcolor(x19, x20)\n    return O"], [1.0, "def solve_3ac16334(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0bbc9be7(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = greater(x5, TWO)\n    x7 = branch(x6, height, width)\n    x8 = x7(x1)\n    x9 = x7(x2)\n    x10 = branch(x6, vsplit, hsplit)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_256c9445(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d4788e87(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = increment(x2)\n    x4 = bottomhalf(I)\n    x5 = lefthalf(x3)\n    x6 = righthalf(x3)\n    x7 = tophalf(x6)\n    x8 = increment(x7)\n    x9 = bottomhalf(x7)\n    x10 = decrement(x3)\n    x11 = height(x5)\n    x12 = increase(x5, x11)\n    x13 = tojvec(x10)\n    x14 = decrement(x13)\n    x15 = height(x6)\n    x16 = add(x14, x15)\n    x17 = tojvec(x12)\n    x18 = decrement(x17)\n    x19 = width(x5)\n    x20 = decrement(x19)\n    x21 = tojvec(x12)\n    x22 = decrement(x21)\n    x23 = astuple(x18, x20)\n    x24 = astuple(x24, x22)\n    x25 = combine(x23, x24)\n    x26 = intersection(x23, x25)\n    x27 = fill(I, FOUR, x25)\n    O = fill(x27, THREE, x26)\n    return O"], [1.0, "def solve_f4a2000c(I):\n    x1 = height(I)\n    x2 = ofcolor(I, ZERO)\n    x3 =asindices(I)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, ZERO, x9)\n    x11 = asobject(x10)\n    O = paint(x11, x9)\n    return O"], [1.0, "def solve_83290309(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_2093494c(I):\n    x1 = lbind(contained, ORIGIN)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = lbind(contained, TWO)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x4)\n    x9 = fork(both, x4, x6)\n    x10 = fork(both, x7, x8)\n    x11 = fork(both, x9, x10)\n    x12 = compose(flip, x4)\n    x13 = fork(both, x12, x11)\n    x14 = fork(both, x12, x12)\n    x15 = compose(flip, x4)\n    x16 = fork(both, x14, x15)\n    x17 = fork(both, x12, x16)\n    x18 = fork(either, x17, x14)\n    x19 = fork(either, x12, x16)\n    x20 = fork(either, x13, x16)\n    x21 = fork(add, ulcorner, x20)\n    x22 = fork(add, llcorner, x21)\n    x23 = fork(connect, x20, x22)\n    x24 = decrement(x70)\n    x25 = lbind(multiply, x24)\n    x26 = compose(x25, x23)\n    x27 = fork(add, lrcorner, x26)\n    x28 = fork(connect, x27, x24)\n    x29 = fork(upscale, x28, x14)\n    x30 = fork(connect, x27, x29)\n    x31 = fork(54400, x23, x30)\n    x32 = fork(combine, x29, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x1)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_6e48fd31(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = asobject(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = normalize(x6)\n    x8 = width(I)\n    x9 = subtract(x8, TWO)\n    x10 = multiply(x9, THREE)\n    x11 = increment(x10)\n    x12 = width(I)\n    x13 = subtract(x12, x6)\n    x14 = multiply(x13, x4)\n    x15 = shift(x7, x14)\n    x16 = paint(I, x15)\n    x17 = repeat(x16, ONE)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_f57dc630(I):\n    x1 = palette(I)\n    x2 = contained(I, x1)\n    x3 = contained(x2, x1)\n    x4 = branch(x3, UNITY, SEVEN)\n    x5 = branch(x3, vmirror, hmirror)\n    x6 = x4(x5)\n    x7 = width(I)\n    x8 = branch(x3, UNITY, NEG_ONE)\n    x9 = multiply(x7, x8)\n    x10 = shift(x6, x9)\n    x11 = canvas(ZERO, x9)\n    x12 = paint(x11, x10)\n    O = x4(x12)\n    return O"], [1.0, "def solve_fdc75963(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = compose(maximum, shape)\n    x11 = order(x9, x10)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x11, x15)\n    x17 = multiply(TEN, TEN)\n    x18 = canvas(x4, x17)\n    x19 = double(x18)\n    x20 = asobject(x19)\n    x21 = shift(x20, UNITY)\n    O = paint(x17, x21)\n    return O"], [1.0, "def solve_6166a010(I):\n    x1 = lbind(toindices, I)\n    x2 = lbind(toobject, I)\n    x3 = compose(first, x1)\n    x4 = chain( mostcolor, x2, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = compose(last, x1)\n    x7 = chain(decrement, x5, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = compose(first, x8)\n    x10 = fork(remove, x6, x9)\n    x11 = compose(last, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, x11, x13)\n    x15 = fork(combine, x11, x14)\n    x16 = fork(intersection, x15, x8)\n    x17 = mapply(x16, x1)\n    O = fill(I, ZERO, x17)\n    return O"], [1.0, "def solve_7b05a020(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_27bc8324(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, center)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = compose(x6, palette)\n    x8 = argmax(x5, x7)\n    x9 = remove(x8, x5)\n    x10 = merge(x9)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, color)\n    x13 = sfilter(x1, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, normalize)\n    x19 = lbind(apply, x18)\n    x20 = chain(x179, x18, x19)\n    x21 = rbind(remove, x20)\n    x22 = compose(x21, normalize)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(compose, initset)\n    x25 = lbind(rbind, manhattan)\n    x26 = chain(x24, x25, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x75, x27)\n    x29 = compose(x25, x28)\n    x30 = fork(mapply, x23, x29)\n    x31 = fork(recolor, x30, x29)\n    x32 = mapply(x31, x13)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_19daf05a(I):\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = increment(x33)\n    x35 = astuple(x33, x34)\n    x36 = shift(x22, x35)\n    x37 = shift(x25, x36)\n    x38 = paint(I, x37)\n    x39 = combine(x28, x38)\n    x40 = ofcolor(x39, ZERO)\n    O = mapply(x39, x40)\n    return O"], [1.0, "def solve_abb6ea0d(I):\n    x1 = initset(ORIGIN)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = uppermost(x3)\n    x7 = lbind(subtract, x6)\n    x8 = chain(size, x7, double)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    O = underfill(x5, ONE, x10)\n    return O"], [1.0, "def solve_5b10c675(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d1b2c416(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_967e69fe(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_d792c8d1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_854608fe(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEGim, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [1.0, "def solve_82f6621a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_577be18e(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, decrement)\n    x3 = mapply(x2, I)\n    O = objects(I, T, F, T)\n    return O"], [1.0, "def solve_b3a6eefe(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(TWO, LEFT)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, ONE)\n    x10 = astuple(THREE, TWO)\n    x11 = connect(x9, x10)\n    x12 = combine(x8, x11)\n    x13 = combine(x5, x12)\n    x14 = recolor(THREE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_587c08c7(I):\n    x1 = palette(I)\n    x2 = SEVEN(I)\n    x3 = EIGHT(x2)\n    x4 = vmirror(I)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = lbind(colorfilter, x5)\n    x8 = compose(x7, color)\n    x9 = sfilter(x1, x8)\n    x10 = chain(invert, size, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = apply(x11, x9)\n    x13 = rbind(argmax, x12)\n    x14 = apply(x13, x12)\n    x15 = merge(x14)\n    x16 = cover(I, x15)\n    x17 = mapply(x11, x13)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_722fe31d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0115b112(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x6)\n    x8 = crop(I, x7, x4)\n    x9 = asobject(x8)\n    x10 = hperiod(x9)\n    x11 = vperiod(x9)\n    x12 = index(I, x11)\n    x13 = asobject(I)\n    x14 = hperiod(x13)\n    x15 = vperiod(x13)\n    x16 = astuple(x14, x15)\n    x17 = ulcorner(x9)\n    x18 = crop(I, x17, x16)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = asobject(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = hperiod(x23)\n    x25 = vperiod(x24)\n    x26 = astuple(x24, x25)\n    x27 = ulcorner(x9)\n    x28 = crop(I, x27, x26)\n    x29 = vmirror(x28)\n    x30 = asobject(x29)\n    x31 = asobject(x30)\n    x32 = vperiod(x31)\n    x33 = hperiod(x31)\n    x34 = astuple(x33, x32)\n    x35 = lbind(multiply, x34)\n    x36 = neighbors(ORIGIN)\n    x37 = mapply(neighbors, x36)\n    x38 = apply(x35, x37)\n    x39 = lbind(shift, x33)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_d1823fb9(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_def17ece(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_adb1e25e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4d62b463(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x10 = x9(x6)\n    x11 = paint(x3, x10)\n    x12 = paint(x11, x11)\n    O = paint(x12, x10)\n    return O"], [1.0, "def solve_116dd1c0(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1365ca38(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = argmax(x5, size)\n    O = subgrid(x6, I)\n    return O"], [1.0, "def solve_63955891(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    O = asobject(x1)\n    return O"], [1.0, "def solve_1352c8fa(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_5c6e012b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4e0ca6f7(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8c91ed98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = dmirror(I)\n    x5 = x4(I)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [1.0, "def solve_d754ecc6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, UNITY)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = toobject(x6, I)\n    x8 = normalize(x7)\n    x9 = lbind(shift, x8)\n    x10 = compose(x9, shape)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, x10)\n    x14 = fork(equality, identity, x13)\n    x15 = mfilter(x6, x14)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_06640b30(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_461ed799(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(50, x25)\n    x27 = compose(first, x25)\n    x28 = fork(recolor, x26, x27)\n    x29 = mapply(x28, x3)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_17a52f40(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = order(x1, x2)\n    x4 = apply(last, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, first)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [1.0, "def solve_f9fa61d0(I):\n    x1 = hsplit(I, THREE)\n    x2 = insert(first, x1)\n    x3 = order(x2, identity)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = ofcolor(x4, NINE)\n    x7 = ofcolor(x5, ONE)\n    x8 = combine(x6, x7)\n    x9 = fill(x4, THREE, x8)\n    x10 = ofcolor(x9, NINE)\n    x11 = fill(x9, ONE, x10)\n    O = fill(x11,3333, x8)\n    return O"], [1.0, "def solve_e8fafdea(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_7f76e0d7(I):\n    x1 =884286214\n    x2 = dmirror(I)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, ZERO)\n    x16 = rbind(contained, x15)\n    x17 = apply(x16, x14)\n    x18 = sfilter(x17, vline)\n    x19 = difference(x17, x18)\n    O = apply(size, x19)\n    return O"], [1.0, "def solve_d6d73890(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_b1f393f2(I):\n    x1 = astuple(SIX, THREE)\n    x2 = astuple(dmirror, I)\n    x3 = astuple(TWO, ONE)\n    x4 = combine(x1, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x6)\n    x8 = chain(lowermost, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x4, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_157c2546(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x5, x6)\n    x8 = argmin(x5, x7)\n    x9 = x6(x8)\n    x10 = string(x8, x9)\n    x11 = cover(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = colorfilter(x12, x4)\n    x14 = difference(x12, x13)\n    x15 = divide(x10, x14)\n    x16 = apply(uppermost, x15)\n    x17 = lowermost(x15)\n    x18 = astuple(x17, x15)\n    x19 = add(x18, invert)\n    x20 = lowermost(x15)\n    x21 = rightmost(x15)\n    x22 = astuple(x20, x21)\n    x23 = add(x22, astuple)\n    x24 = rbind(subtract, x23)\n    x25 = rbind(shoot, x19)\n    x26 = compose(x24, x25)\n    x27 = fork(combine, x26, x24)\n    x28 = mapply(x27, x15)\n    O = fill(x11, ZERO, x28)\n    return O"], [1.0, "def solve_cc2d74a7(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_27377936(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =elta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = corners(x6)\n    x8 = insert(ZERO_BY_TWO, x7)\n    x9 = insert(RIGHT, x8)\n    x10 = insert(TWO_BY_TWO, x9)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = interval(TWO, x12, ONE)\n    x16 = pair(x14, x15)\n    x17 = mapply(x13, x16)\n    O = paint(x4, x17)\n    return O"], [1.0, "def solve_ce0d4df4(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = toindices(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = fork(multiply, last, identity)\n    x8 = apply(x7, x6)\n    x9 = partition(I)\n    x10 = sfilter(x9, x6)\n    x11 = mapply(toindices, x10)\n    x12 = corners(x11)\n    x13 = combine(x12, x11)\n    x14 = difference(x13, x12)\n    x15 = mapply(x8, x14)\n    x16 = combine(x15, x11)\n    x17 = fill(I, x2, x16)\n    x18 = hmirror(x17)\n    x19 = mostcolor(I)\n    O = fill(x17, x19, x18)\n    return O"], [1.0, "def solve_8d9cd7de(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = combine(x5, x4)\n    x7 = power(outbox, TWO)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, initset)\n    x10 = power(x9, FOUR)\n    x11 = fork(connect, x7, x10)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x2)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_560918e5(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = I(x3)\n    x5 = dmirror(x4)\n    x6 = papply(equality, x4, x5)\n    x7 = branch(x6, ONE, SEVEN)\n    O = canvas(x7, x7)\n    return O"], [1.0, "def solve_51822bb6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, asobject)\n    x4 = lbind(apply, numcolors)\n    x5 = chain(x4, asobject, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(size, x6)\n    x8 = chain(increment, x5, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, I)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_22c390eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_e31e1135(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(inter000, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_56c7c989(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_6b2426c4(I):\n    x1 = astuple(THREE, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_cfe3a8fe(I):\n    x1 = paint(I, x1)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = canvas(x3, x5)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x6, x8)\n    return O"], [1.0, "def solve_13515f6e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = insert(x8, x11)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x4)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(x14)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, TWO)\n    x21 = merge(x20)\n    x22 = decrement(x21)\n    x23 = input(x22, x21)\n    x24 = tophalf(x23)\n    x25 = shift(x21, x24)\n    x26 = lefthalf(x25)\n    x27 = tophalf(x26)\n    x28 = vmirror(x27)\n    x29 = hmirror(x28)\n    x30 = insert(x26, x21)\n    x31 = insert(x29, x30)\n    x32 = combine(x30, x31)\n    x33 = paint(x16, x32)\n    x34 = hmirror(x33)\n    O = vmirror(x34)\n    return O"], [1.0, "def solve_9278ba19(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_36c0b8e0(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a547d3bd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, toindices)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, x3)\n    x8 = fork(insert, vmirror, identity)\n    x9 = lbind(insert, x7)\n    x10 = compose(x9, x8)\n    x11 = power(x10, TWO)\n    x12 = x11(x9)\n    x13 = lbind(remove, x6)\n    x14 = compose(x13, x12)\n    x15 = fork(compose, x11, x14)\n    x16 = lbind(lbind, shift)\n    x17 = lbind(occurrences, x6)\n    x18 = compose(x16, x17)\n    x19 = fork(mapply, x18, x16)\n    x20 = rapply(x19, x4)\n    x21 = mapply(x16, x20)\n    O = paint(x3, x21)\n    return O"], [1.1, "def solve_66cd0eb0(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7a9c61d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(FOUR, FOUR)\n    x2 = portrait(I)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = asindices(x4)\n    x6 = ofcolor(x4, ZERO)\n    x7 = difference(x5, x6)\n    x8 = rbind(toobject, x4)\n    x9 = compose(x8, delta)\n    x10 = interval(x2, FIVE, ZERO)\n    x11 = rbind(multiply, width)\n    x12 = compose(x11, tojvec)\n    x13 = chain(x10, x12, initset)\n    x14 = lbind(fork, greater)\n    x15 = lbind(chain, flip)\n    x16 = lbind(x15, x13)\n    x17 = lbind(x16, astuple)\n    x18 = compose(x16, x17)\n    x19 = compose(x13, x18)\n    x20 = extract(x9, x19)\n    x21 = center(x20)\n    x22 = initset(x21)\n    x23 = center(x22)\n    x24 = subgrid(x226, x4)\n    x25 = fork(equality, identity, rot90)\n    x26 = compose(x25, x20)\n    x27 = fork(equality, identity, rot270)\n    x28 = compose(x27, x21)\n    x29 = fork(equality, identity, rot90)\n    x30 = compose(x29, x21)\n    x31 = fork(equality, identity, rot270)\n    x32 = compose(x31, x21)\n    x33 = fork(both, x26, x25)\n    x34 = fork(both, x24, x28)\n    x35 = fork(both, x33, x34)\n    x36 = astuple(x36, x35)\n    x37 = extract(x32, x36)\n    x38 = center(x37)\n    x39 = initset(x38)"], [1.1, "def solve_6798fd94(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 =8000(dae9001fccofdne22(I)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x6, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x4)\n    x16 = backdrop(x15)\n    x17 = toobject(x16, I)\n    x18 = identity(x17)\n    x19 = chain(x14, x10, x18)\n    x20 = rbind(contained, x11)\n    x21 = compose(x20, color)\n    x22 = sfilter(x15, x21)\n    x23 = size(x22)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, identity)\n    x26 = canvas(x25, UNITY)\n    x27 = asindices(x26)\n    x28 = center(x27)\n    x29 = dmirror(I)\n    x30 = initset(x22)\n    x31 = insert(x28, x30)\n    x32 = insert(x29, x31)\n    x33 = dmirror(x32)\n    x34 = asindices(x33)\n    x35 = center(x34)\n    x36 = initset(x35)\n    x37 = insert(x16, x36)\n    x38 = insert(x33, x37)\n    x39 = fill(x26, x4, x38)\n    x40 = fill(x39, x33, x34)\n    x41 = fill"], [1.1, "def solve_9dd5e7c1(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_2815a7f0(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, insert)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_ba15fdbb(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7666ef79(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = lowermost(x7)\n    x9 = compose(minimum, shape)\n    x10 = lowermost(x7)\n    x11 =1900(x9, x10)\n    x12 = power(x11, TWO)\n    x13 = uppermost(x7)\n    x14 =970(x12, x13)\n    x15 = astuple(x14, x414)\n    x16 = ulcorner(x7)\n    x17 = palette(x15)\n    x18 = palette(x10)\n    x19 = argmax(x17, x18)\n    x20 = remove(x19, x17)\n    x21 = other(x20, x19)\n    x22 = rbind(colorcount, x21)\n    x23 = colorcount(I, x21)\n    x24 = rbind(toobject, I)\n    x25 = compose(x22, delta)\n    x26 = rbind(colorcount, x21)\n    x27 = valmax(x21, x26)\n    x28 = matcher(x25, x27)\n    x29 = sfilter(x24, x28)\n    x30 = difference(x19, x29)\n    x31 = apply(e961498330, x29)\n    x32 = rbind(colorcount, x21)\n    x33 = rbind(toobject, I)\n    x34 = chain(x32, x33, backdrop)\n    x35 = apply(x34, x31)\n    x36 = sfilter(x3, x35)\n    x37 = apply(x22, x36)\n    x38 = size(x37)\n    x39 = subtract(x38, x37)\n    x40 = frontiers("], [1.1, "def solve_53d40512(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = matcher(first, FOUR)\n    x38 = sfilter(x28, x37)\n    x39 = center(x38)\n    x40 = matcher(first, NEG_ONE)\n    x41 = sfilter("], [1.1, "def solve_201f73f0(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8ee1277f(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_f3727679(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_e6afb92a(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_770b125f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_b16928d7(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_72918c35(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f824d0d5(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0cffd2b2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_26948c91(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f6db8f2f(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_08d2c6f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_b05c68ca(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_e77d2eca(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(56129min, x27)\n    x39 = chain(size, x38, T)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_a80e03a5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = color(x23)\n    x25 = palette(x22)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x6)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = ofcolor(x22, x24)\n    x31 = ofcolor(x22, x6)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = lowermost(x30)\n    x35 = dneighbors(ORIGIN)\n    x36 = remove(DOWN, x35)\n    x37 = rbind(mapply, x36)\n    x38 = lbind(chain, x37)\n    "], [1.1, "def solve_a817586e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(I, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(greater, THREE)\n    x5 = chain(x4, size, dedupe)\n    x6 = compose(x5, x3)\n    x7 = fork(both, x7, x6)\n    x8 = sfilter(x1, x6)\n    x9 = difference(x1, x8)\n    x10 = insert(x10, x8)\n    x11 = apply(most, x10)\n    x12 = condition(x11, ZERO)\n    x13 = argmin(x1, size)\n    x14 = remove(x13, x10)\n    x15 = argmin(x14, size)\n    x16 = width(x12)\n    x17 = decrement(x16)\n    x18 = tojvec(x17)\n    x19 = height(x12)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = fork(subtract, x22, increment)\n    x24 = chain(increment, x17, x23)\n    x25 = shoot(x13, x18)\n    x26 = shoot(x15, x20)\n    x27 = combine(x25, x26)\n    x28 = combine(x71, x24)\n    x29 = combine(x27, x28)\n    x30 = tojvec(x29)\n    x31 = asobject(x19)\n    x32 = mapply(x23, x61)\n    x33 = asobject(x15)\n    x34 = toobject(x33, I)\n    x35 = asobject(x34)\n    x36 = height(x32)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = invert(x38)\n    x40 = shift(x31, x39)\n    x41 = fill"], [1.1, "def solve_4184d06b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =644(x2)\n    x4 = shape(I)\n    x5 = canvas(center, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(equality, x12, toindices)\n    x14 = chain(x9, x13, ulcorner)\n    x15 = fork(multiply, x14, toindices)\n    x16 = chain(x13, x15, rbind(subtract, FOUR)\n    x17 = fork(divide, x15, x16)\n    x18 = fork(equality, identity, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = mostcolor(I)\n    x21 = matcher(x21, x20)\n    x22 = fork(both, x19, x21)\n    x23 = sfilter(x7, x22)\n    x24 = sfilter(x7, x18)\n    x25 = argmax(x23, minimum)\n    x26 = argmax(x24, width)\n    x27 = ulcorner(x25)\n    x28 = llcorner(x27)\n    x29 = add(x27, x28)\n    x30 = shift(x25, x29)\n    x31 = color(x30)\n    x32 = ofcolor(x23, x31)\n    x33 = argmax(x32, x23)\n    x34 = vmirror(x33)\n    x35 = normalize(x34)\n    x36 = color(x23)\n    x37 = increment(x6)\n    x38 = add(x37, x31)\n    x39 = shift(x35"], [1.1, "def solve_39655996(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = rot270(I)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = lbind(rbind, subtract)\n    x5 = lbind(x3, x4)\n    x6 = lbind(canvas, ZERO)\n    x7 = compose(x5, x6)\n    x8 = fork(paint, x7, last)\n    x9 = compose(x4, x8)\n    x10 = lbind(sfilter, x1)\n    x11 = rbind(compose, last)\n    x12 = lbind(rbind, sfilter)\n    x13 = chain(x11, x10, x12)\n    x14 = lbind(apply, first)\n    x15 = chain(lowermost, x13, x14)\n    x16 = lbind(rightbind, astuple)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x14)\n    x19 = compose(x4, x18)\n    x20 = compose(x1, cmirror)\n    x21 = fork(remove, x20, x14)\n    x22 = compose(last, x21)\n    x23 = fork(last, first, x22)\n    x24 = compose(lowermost, x23)\n    x25 = compose(rightmost, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x27, x23)\n    x29 = fork(argmin, x26, x28)\n    x30 = fork(astuple, x29, identity)\n    x31 = remove(x30, x1)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(multiply, x34, x309)\n    x36 = compose(x35, x29)\n    x37 = fork(apply, x36, x31"], [1.1, "def solve_4d53bcb2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_d8b93e60(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_572bf88e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_0305bd26(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(canvas, ZERO)\n    x5 = compose(x4, x3)\n    x6 = fork(paint, x5, x3)\n    x7 = compose(rot90, x6)\n    x8 = power(x7, FOUR)\n    x9 = rot180(I)\n    x10 = dedupe(x9)\n    x11 = rot180(I)\n    x12 = dedupe(x11)\n    x13 = rot180(I)\n    x14 = dedupe(x13)\n    x15 = rot180(I)\n    x16 = dedupe(x15)\n    x17 = size(x10)\n    x18 = size(x12)\n    x19 = positive(x17)\n    x20 = branch(x19, x15, x14)\n    x21 = branch(x19, x16, x20)\n    x22 = compose(x4, x21)\n    x23 = argmax(x23, x22)\n    x24 = apply(x23, x18)\n    x25 = size(x24)\n    x26 = equality(x25, ONE)\n    x27 = branch(x26, x23, x24)\n    x28 = branch(x26, x228, x27)\n    x29 = branch(x26, x23, x24)\n    x30 = branch(x26, x22, x29)\n    x31 = multiply(TEN, TEN)\n    x32 = add(x31, TWO)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = branch(x33, x28, x30)\n    x35 = ZERO(x34)\n    x36 =44(x35)\n    x37 = shift(x36, x31)\n    x38 = paint(I, x37)\n    x39 = rot90(x38)\n    x40 = paint(x39, x37)\n    x41 = rot90(x40"], [1.1, "def solve_4c90c5bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_e8df6493(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_4fb61fc2(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = difference(x1, x9)\n    x11 = rbind(subgrid, I)\n    x12 = apply(x11, x10)\n    x13 = lbind(rbind,colorcount)\n    x14 = argmax(x12, x13)\n    x15 = palette(x14)\n    x16 = remove(x4, x15)\n    x17 = lbind(colorcount, x14)\n    x18 = argmin(x16, x17)\n    x19 = subgrid(x18, x6)\n    x20 = increment(x14)\n    x21 = rbind(greater, x20)\n    x22 = compose(x21, first)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = lbind(rbind, subtract)\n    x26 = lbind(occurrences, x24)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x27, last)\n    x29 = lbind(rbind, adjacent)\n    x30 = fork(extract, first, x28)\n    x31 = compose(x29, x30)\n    x32 = fork( compose, x24, x31)\n    x33 = fork(apply, x38, x32)\n    x34 = rbind(intersection, x33)\n    x35 = compose(size, x34)\n    x36 = argmax(x21, x35)\n    x37 = rbind(shift, x36)\n    x38 =87(x37)\n    x39 = TWO(x38, x34)\n    x"], [1.1, "def solve_8381c246(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_80faa289(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = vmirror(x2)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = chain(position, lefthalf, tophalf)\n    x9 = fgpartition(x4)\n    x10 = merge(x9)\n    x11 = normalize(x10)\n    x12 = lbind(shift, x11)\n    x13 = height(x2)\n    x14 = height(x11)\n    x15 = divide(x13, x14)\n    x16 = width(x2)\n    x17 = width(x11)\n    x18 = divide(x16, x17)\n    x19 = vmirror(x8)\n    x20 = hmirror(x8)\n    x21 = shift(x19, x20)\n    x22 = SEVEN(x21)\n    x23 = argmax(x3, x22)\n    x24 = leastcolor(x23)\n    x25 = matcher(first, x24)\n    x26 = sfilter(x22, x25)\n    x27 = replace(x7, x24, x655)\n    x28 = argmin(x26, identity)\n    x29 = argmax(x28, identity)\n    x30 = ulcorner(x28)\n    x31 = rbind(subtract, x30)\n    x32 = height(x28)\n    x33 = rbind(multiply, x32)\n    x34 = chain(outbox, x31, x33)\n    x35 = width(x29)\n    x36 = divide(x35, x31)\n    x37 = increment(x36)\n    x38 = interval(ONE, x37, ONE)\n    x39 = sfilter(x38, x34)\n    x40 = invert(x39)\n    x41 =71(x40)\n    "], [1.1, "def solve_f2c8140e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = extract(x30, x31)\n    x33 = last(x32)\n    x34 = matcher(first, x11)\n    x35 = sfilter(x34, x24)\n    x36 = center(x35)\n    x37 = vfrontier(x36)\n    x38 = sfilter(x1, x22)\n    x39 = lbind(fork, intersection)\n    x40 = lbind(x39, outbox)\n    x41 = lbind(compose, x38"], [1.1, "def solve_b0a39c2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_fcb49c5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply,numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_afd89778(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(extract, x1)\n    x3 = compose(x2, x1)\n    x4 = rbind(compose, initset)\n    x5 = lbind(rbind, manhattan)\n    x6 = chain(x4, x5, x3)\n    x7 = fork(sfilter, identity, x6)\n    x8 = compose(rot90, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = rot270(I)\n    x11 = fork(shift, identity, x10)\n    x12 = compose(rot90, x11)\n    x13 = fork(shift, identity, x12)\n    x14 = size(I)\n    x15 = maximum(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = product(x16, x16)\n    x18 = rbind(multiply, THREE)\n    x19 = compose(x18, first)\n    x20 = rbind(multiply, TEN)\n    x21 = compose(x20, last)\n    x22 = fork(add, x19, x21)\n    x23 = fork(astuple, x19, x22)\n    x24 = lbind(canvas, NEG_ONE)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(connect, x23, x26)\n    x28 = rbind(contained, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(extract, x27)\n    x31 = compose(x30, x29)\n    x32 = fork(add, last, x31)\n    x33 = fork(astuple, x29, x32)\n    x34 = fork(connect, x33, x33)\n    x35 = rbind(branch, x730)\n    x36 = rbind(x35, x34)\n    x37 = rbind(contained, x51)\n    x38 = compose(x"], [1.1, "def solve_7d729b16(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = backdrop(x6)\n    x8 = shoot(x4, UNITY)\n    x9 = initset(x2)\n    x10 = insert(x7, x9)\n    x11 = mostcolor(I)\n    x12 = mapply(d43, x10)\n    x13 =insert(x7, x10)\n    x14 = width(I)\n    x15 = greater(x14, TWO)\n    x16 = insert(x15, x13)\n    x17 = mapply(dneighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = matcher(first, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x12, x21)\n    x23 = difference(x12, x22)\n    x24 = fill(x5, TWO, x23)\n    x25 =\n    x26 = width(x24)\n    x26 = greater(x25, TWO)\n    x27 = increment(x26)\n    x28 =455(x22)\n    x29 = double(x28)\n    x30 = insert(x27, x29)\n    x31 = branch(x30, x22, x27)\n    x32 = branch(x30, x26, x27)\n    x33 = branch(x30, UP, LEFT)\n    x34 = x31(x33)\n    x35 =box(x34)\n    x36 = intersection(x31, x35)\n    x37 = fill(x24, TWO, x36)\n    x38 = replace(x37, x19, ONE)\n    x39 = lbind(contained, TWO)\n    x40 = compose(x39, palette)\n    x41 = sfilter(x34,"], [1.1, "def solve_4bdbff07(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_76782b65(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_919be0bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_cb02f1a6(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(add, leftmost, uppermost)\n    x7 = compose(toivec, x6)\n    x8 = fork(add, x5, x7)\n    x9 =2000(x5)\n    x10 = dmirror(x8)\n    x11 = numcolors(x10)\n    x12 = decrement(x11)\n    x13 = order(x1, x12)\n    x14 = leftmost(x13)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, FOUR)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(greater, x14)\n    x20 = compose(x19, last)\n    x21 = apply(x20, x3)\n    x22 = combine(x18, x21)\n    x23 = rbind(repeat, x22)\n    x24 = compose(x23, tojvec)\n    x25 = apply(x24, x3)\n    x26 = combine(x17, x25)\n    x27 = hmirror(x26)\n    x28 = lbind(repeat, x27)\n    x29 = apply(x28, x3)\n    x30 = astuple(x11, x13)\n    x31 = x12(x30)\n    x32 = pair(x26, x31)\n    x33 = compose(size, last)\n    x34 = matcher(x33, ZERO)\n    x35 = sfilter(x32, x34)\n    x36 = lbind(compose, x5)\n    x37 = lbind(lbind, greater)\n    x38 = chain(x36,x37, last)\n    x39 = pair(x35, x35)\n    x40 ="], [1.1, "def solve_822eacbc(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, cmirror)\n    x2 = hmirror(I)\n    x3 = index(x2, ORIGIN)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = recolor(x3, x4)\n    x6 = index(x2, x5)\n    x7 = subgrid(x5, x2)\n    x8 = remove(x7, x5)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = colorobject(x11, x10)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = subgrid(x13, x2)\n    x16 = height(x15)\n    x17 = increment(x16)\n    x18 = subgrid(x13, x15)\n    x19 = hmirror(x18)\n    x20 = increment(x19)\n    x21 = replace(x19, x10, x11)\n    x22 =1cf801(x21, x20)\n    x23 = x22(x2)\n    x24 = replace(x23, x10, x4)\n    x25 = ofcolor(x24, x10)\n    x26 = subgrid(x25, x24)\n    x27 = mapply(vfrontier, x25)\n    x28 = mapply(hfrontier, x25)\n    x29 = size(x27)\n    x30 = size(x28)\n    x31 = greater(x29, x30)\n    x32 = branch(x31, x28, x27)\n    x33 = fill(x26, x11, x32)\n    x34 =recolor(x33, x10)\n    x35 = mapply(x29, x28)\n    x36 = paint(x20, x35)\n    x37 =607 solve48678497ad(x33)\n    x38 =7745(x37)\n    x39 = recolor(x10, x38)\n"], [1.1, "def solve_94ac28e3(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(THREE, x4)\n    x6 = asobject(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = power(x9, x10)\n    x12 = astuple(x3, x11)\n    x13 = astuple(x12, first)\n    x14 = astuple(x12, ZERO)\n    x15 = initset(x13)\n    x16 = insert(x14, x15)\n    x17 = backdrop(x16)\n    x18 = lbind(position, x17)\n    x19 = compose(x18, initset)\n    x20 = lowermost(x17)\n    x21 = rightmost(x17)\n    x22 = astuple(x20, x21)\n    x23 = lbind(greater, x22)\n    x24 = compose(x23, x19)\n    x25 = sfilter(x6, x24)\n    x26 = apply(x19, x25)\n    x27 = merge(x26)\n    x28 = apply(x25, x26)\n    x29 = compose(double, halve)\n    x30 = compose(double, last)\n    x31 = fork(equality, x29, x30)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(equality, x32, x33)\n    x35 = fork(either, x31, x34)\n    x36 = sfilter(x26, x35)\n    x37 = apply(x19, x36)\n    x38 = merge(x36)\n    x39 = cover(I, x38)\n    x40 =8925(x39)\n    x41 = mostcolor(x40)\n    O"], [1.1, "def solve_5dc739ab(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_7cbbcb87(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =76fgically(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = hmirror(x3)\n    x5 = vmirror(x3)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = vmirror(x7)\n    x9 = hmirror(x8)\n    x10 = astuple(x4, x5)\n    x11 = astuple(x9, x10)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x13)\n    x15 = asobject(x14)\n    x16 = height(x15)\n    x17 = width(x15)\n    x18 = decrement(x16)\n    x19 = astuple(x18, x17)\n    x20 = connect(ORIGIN, x19)\n    x21 = outbox(x20)\n    x22 = astuple(x17, x15)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = connect(ORIGIN, x24)\n    x26 = double(x17)\n    x27 = connect(ORIGIN, x26)\n    x28 = astuple(x24, x15)\n    x29 = astuple(x27, x15)\n    x30 = connect(x28, x29)\n    x31 = initset(ORIGIN)\n    x32 = box(x31)\n    x33 = difference(x32, x30)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = palette(I)\n    x37 = remove(x35, x36)\n    x38 = other(x37, x35)\n    x39 = ofcolor(x26, x38)\n    x40 = ofcolor(x25, x38)\n    x41 = combine(x39, x40)\n    x42 = intersection(x39,"], [1.1, "def solve_ee5755c3(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(remove, TWO)\n    x5 = chain(x4, x3, x2)\n    x6 = fork( chain,x1, x5)\n    x7 = lbind(canvas, ZERO)\n    x8 = compose(x7, x6)\n    x9 = fork(4612d687, x8, shape)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = lbind(497 either, ONE)\n    x13 = compose(x12, x11)\n    x14 = fork(both, x13, x7)\n    x15 = sfilter(x1, x14)\n    x16 = difference(x1, x15)\n    x17 = merge(x16)\n    x18 =66666666(x17, THREE)\n    x19 = mostcolor(I)\n    x20 = ofcolor(x18, x19)\n    x21 = apply(initset, x20)\n    x22 = rbind(manhattan, x3)\n    x23 = compose(x22, initset)\n    x24 = argmin(x21, x23)\n    x25 = ofcolor(x18, x19)\n    x26 =manhattan(x24, x25)\n    x27 = increment(x26)\n    x28 = injvec(x27)\n    x29 = shift(x25, x28)\n    x30 = toindices, x29)\n    x31 = rbind(shoot, x30)\n    x32 = mapply(x31, x28)\n    x33 = fill(x18, FOUR, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = size(x34)\n    x36 = intersection(x28, x35)\n    x37 = fill(x33, ZERO, x36)\n    x38 = astuple(x19, x23)\n    x39 = canvas(ZERO"], [1.1, "def solve_84918bad(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x10)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x12)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d3dbb4ac(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f1e24483(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b93ddf6b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, ZERO, x1)\n    x3 = normalize(x2)\n    x4 = occurrences(x2, x3)\n    x5 = lbind(shift, x3)\n    x6 = apply(x5, x4)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(FIVE, ONE)\n    x9 = astuple(TWO, SIX)\n    x10 = initset(x7)\n    x11 = insert(x8, x10)\n    x12 = insert(x9, x11)\n    x13 = rbind(contained, x12)\n    x14 = chain(flip, x13, ulcorner)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = height(x16)\n    x18 = vsplit(x16, x17)\n    x19 = hsplit(x18, x17)\n    x20 = extract(x19, x14)\n    x21 = extract(x19, x20)\n    x22 = width(x16)\n    x23 = divide(x22, THREE)\n    x24 = area(x16)\n    x25 = last(x24)\n    x26 = width(x12)\n    x27 = divide(x26, THREE)\n    x28 = astuple(x23, x27)\n    x29 = maximum(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(multiply, x30)\n    x32 = mapply(x31, x3)\n    x33 = canvas(x236, x32)\n    x34 = lbind(shift, x16)\n    x35 = mapply(x34, x30)\n    x36 = fill(x33, FOUR, x35)\n    x37 = shift(x3, x Tools)\n    x38 = occurrences(x32, x37)\n    x39 = fill(x36, FOUR, x38)\n    O = mapply(x39, x"], [1.1, "def solve_3158d264(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bb93ee37(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_71a186b1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_79d79473(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = chain(positive, size, dmirror)\n    x7 = x6(I)\n    x8 = chain(x4, first, x7)\n    x9 = sfilter(x5, x8)\n    x10 = asindices(x9)\n    x11 = ofcolor(x9, x4)\n    x12 = toindices(x11)\n    x13 = mapply(first, x12)\n    x14 = fill(x9, ZERO, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x16, x14)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x19)\n    x25 = rbind(divide, x18)\n    x26 = apply(x24, x15)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = apply(x27, x28)\n    x30 = hconcat(x17, x17)\n    x31 = hconcat(x29, x27)\n    x32 = vconcat(x30, x31)\n    x33 = vconcat(x32, x17)\n    x34 = ofcolor(x33, ONE)\n    x35 =314(x34)\n    x36 = subgrid(x35, x33)\n    x37 = increment(x38)\n    x38 = branch(x37, x35, x37)\n    x39 = lbind(mapply, x36)\n    x40 = lbind"], [1.1, "def solve_e75aea00(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = delta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = delta(x2)\n    x6 = box(x2)\n    x7 = intersection(x5, x6)\n    x8 = uppermost(x7)\n    x9 = uppermost(x2)\n    x10 = equality(x8, x9)\n    x11 = leftmost(x7)\n    x12 = leftmost(x2)\n    x13 = equality(x11, x12)\n    x14 = lowermost(x7)\n    x15 = lowermost(x2)\n    x16 = equality(x14, x15)\n    x17 = rightmost(x7)\n    x18 = rightmost(x2)\n    x19 = equality(x17, x18)\n    x20 = urcorner(x7)\n    x21 = ulcorner(x7)\n    x22 = llcorner(x7)\n    x23 = lrcorner(x7)\n    x24 = branch(x16, x22, x23)\n    x25 = branch(x13, x21, x24)\n    x26 = branch(x10, x20, x25)\n    x27 = branch(x16, x23, x20)\n    x28 = branch(x13, x22, x27)\n    x29 = branch(x10, x21, x28)\n    x30 = branch(x16, DOWN_LEFT, UNITY)\n    x31 = branch(x13, NEG_UNITY, x30)\n    x32 = branch(x10, UP_RIGHT, x31)\n    x33 = branch(x16, UNITY, UP_RIGHT)\n    x34 = branch(x13, DOWN_LEFT, x33)\n    x35 = branch(x10, NEG_UNITY, x34)\n    x36 = branch(x16, DOWN, RIGHT)\n    x37 = branch(x13, LEFT, x36)\n    x38 = branch(x10"], [1.1, "def solve_1f6763bc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x38, first)\n    x40 = fork(paint, x38, x39)\n    x41 = rbind(contained, x17"], [1.1, "def solve_02364e0a(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = rbind(toobject, I)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(colorcount, x1)\n    x7 = matcher(x6, EIGHT)\n    x8 = rbind(toobject, I)\n    x9 = matcher(x8,0000000)\n    x10 = rbind(colorcount, x1)\n    x11 = matcher(x10, EIGHT)\n    x12 = chain(x9, x11, backdrop)\n    x13 = lbind(fork, paint)\n    x14 = lbind(x13, identity)\n    x15 = lbind(rbind, colorcount)\n    x16 = compose(x14, x15)\n    x17 = lbind(colorfilter, x5)\n    x18 = chain(x16, x17, x16)\n    x19 = lbind(rbind, costgrid)\n    x20 = chain(x19, width, x8)\n    x21 = chain(corners, x18, x20)\n    x22 = lbind(chain, x21)\n    x23 = rbind(x22,asobject)\n    x24 = lbind(rbind, x contained)\n    x25 = chain(first, x23, x24)\n    x26 =997(x1, x25)\n    x27 = chain(x07, x25, xdmirror)\n    x28 = astuple(x26, x26)\n    x29 = astuple(NEG_TWO, x28)\n    x30 = astuple(x31, x29)\n    x31 = x17(x30)\n    x32 = papply(x27, x31)\n    x33 = papply(x29, x32)\n    x34 = ofcolor(I, x1)\n    x35 = combine(x34, x52)\n    x36 = intersection(x34, x35)\n    x37 = fill(I, ZERO, x36)"], [1.1, "def solve_217ad3e7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_06605e29(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =885(I)\n    x2 =887(x1, FOUR)\n    x3 = argmin(x2, size)\n    x4 = astuple(ONE, THREE)\n    x5 = astuple(TWO, FOUR)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x3, x7)\n    x9 = tojvec(x8)\n    x10 = tojvec(x1)\n    x11 = double(x10)\n    x12 = double(x11)\n    x13 = tojvec(x12)\n    x14 = tojvec(x11)\n    x15 = double(x9)\n    x16 = repeat(x13, x15)\n    x17 = Flake ring(x16)\n    x18 = compose(normalize, first)\n    x19 = fork(subtract, x18, last)\n    x20 = upscale(x17, x19)\n    x21 = asobject(x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = decrement(x23)\n    x25 = height(x21)\n    x26 = subtract(x24, x25)\n    x27 = width(x21)\n    x28 = decrement(x27)\n    x29 = width(x21)\n    x30 = subtract(x28, x29)\n    x31 = astuple(x26, x30)\n    x32 = canvas(ZERO, x31)\n    x33 = ulcorner(x2)\n    x34 = invert(x33)\n    x35 = shift(x34, x31)\n    x36 = ofcolor(I, x23)\n    x37 = lbind(shift, x35)\n    x38 = interval(x32, x32, ONE)\n    x39 = apply(x38, x36)\n    x40 = mapply(x37, x39)\n    x41 = astuple(x43, x40)\n    x42 = canvas(ZERO, x41)\n    O"], [1.1, "def solve_103b8b19(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_311eb51c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(sfilter, x1)\n    x2 = lbind(matcher, flip)\n    x3 = compose(x2, leastcolor)\n    x4 = chain(normalize, mostcolor, x3)\n    x5 = x4(I)\n    x6 = astuple(cmirror, dmirror)\n    x7 = astuple(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(x6, x8)\n    x10 = insert(x9, x8)\n    x11 = apply(x4, x10)\n    x12 = product(x11, x11)\n    x13 = sfilter(x12, first)\n    x14 = compose(last, first)\n    x15 = difference(x12, x13)\n    x16 = compose(last, last)\n    x17 = matcher(x14, x55)\n    x18 = sfilter(x15, x17)\n    x19 = lbind(recolor, TWO)\n    x20 = lbind(ofcolor, I)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, x21, x19)\n    x23 = compose(x19, x22)\n    x24 = fork(paint, x23, x12)\n    x25 = chain(x39, x40, x24)\n    x26 = mapply(x25, x13)\n    x27 = objects(x26, T, T, T)\n    x28 = mapply(toindices, x27)\n    x29 = box(x28)\n    x30 = difference(x29, x28)\n    x31 = intersection(x30, x28)\n    x32 = first(x31)\n    x33 = x30(x32)\n    x34 = ofcolor(I, TWO)\n    x35 =contained(ZERO, x34)\n    x36 = lbind(contained, TWO)\n    x37 = compose(x36, last)\n    x38 = sfilter(x34, x37)\n    x39 = center(x38)\n"], [1.1, "def solve_aa198d92(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_e763443b(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_124b60c7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained,ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(0520, x2)\n    x4 = lbind(equality, NINE)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(size, cmirror)\n    x8 = chain(DEPrement, x7, x6)\n    x9 = argmax(x10, x8)\n    x10 = multiply(x19, x9)\n    x11 = chain(x17, minimum, x10)\n    x12 = argmin(x00, x11)\n    x13 = other(x1, x12)\n    x14 = flip(x13)\n    x15 = branch(x14, identity, vmirror)\n    x16 = x15(x12)\n    x17 = objects(x16, T, T, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, x18)\n    x20 = chain(19, toindices, x19)\n    x21 = fork(add, first, x20)\n    x22 = chain(flip, x6, x21)\n    x23 = sfilter(x18, x22)\n    x24 = fork(contained, x23, identity)\n    x25 = normalize(x12)\n    x26 = lbind(shift, x25)\n    x27 = compose(x26, ulcorner)\n    x28 = fork(equality, identity, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(multiply, x30)\n    x31 = rbind(shift, x30)\n    x32 = compose(x30, x31)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = rbind(multiply, x30)\n    x36 = rbind(shift, x33)\n    x37 = fork(connect, x35, x36)\n    x38 = compose("], [1.1, "def solve_c0d850cb(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_2eb5a999(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = remove(UNITY, x1)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = divide(x3, x7)\n    x9 = width(I)\n    x10 = halve(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, vline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = halve(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, x26)\n    x32 = lbind(index, I)\n    x33 = lbind(compose, x12)\n    x34 = compose(x33, x25)\n    x35 = chain(x32, x34, x29)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, x25)\n    x38 = fork(equality, x37, x30)\n    x39 = palette(I)\n    x40 = sfilter(x39, x38)\n    x41 = lbind(colorcount, I)\n    x42 = argmin(x40, x41"], [1.1, "def solve_9424a4b5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = last(x2)\n    x6 = ofcolor(I, x5)\n    x7 = asindices(I)\n    x8 = center(x7)\n    x9 = initset(x8)\n    x10 = insert(x4, x9)\n    x11 = insert(x5, x10)\n    x12 = frontiers(I)\n    x13 = sfilter(x12, hline)\n    x14 = size(x13)\n    x15 = positive(x14)\n    x16 = branch(x15, identity, dmirror)\n    x17 = x16(I)\n    x18 = rbind(multiply, x1)\n    x19 = compose(x18, identity)\n    x20 = shape(x17)\n    x21 = canvas(x20, x20)\n    x22 = lbind(greater, x21)\n    x23 = compose(x22, first)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(positive, size, x24)\n    x26 = rbind(compose, x00)\n    x27 = lbind(x26, x17)\n    x28 = rbind(compose, x23)\n    x29 = lbind(rbind, contained)\n    x30 = chain(x27, x28, x29)\n    x31 = lbind(fork, x22)\n    x32 = lbind(x31, identity)\n    x33 = lbind(rbind,compose)\n    x34 = chain(x32, x33, x30)\n    x35 = lbind(fork, x26)\n    x36 = fork(x55, x23, x32)\n    x37 = fork(compose, x36, x34)\n    x38 = lbind(matcher, x25)\n    x39 = compose(x38, x37)\n    x40 = fork(sfilter, x35, x39"], [1.1, "def solve_0c887db4(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(address, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_1f52ebbd(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x21)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_d40d1ff0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = Fgpartition(I)\n    x2 = merge(x1)\n    x3 = box(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = subgrid(x2, x4)\n    x6 = argmax(x1, width)\n    x7 = uppermost(x6)\n    x8 = leftmost(x6)\n    x9 = height(x5)\n    x10 = width(x5)\n    x11 = divide(x9, x10)\n    x12 = add(x8, UNITY)\n    x13 = subtract(x12, x11)\n    x14 = uppermost(x6)\n    x15 = width(x6)\n    x16 = interval(x14, x15, ZERO)\n    x17 = add(x8, x16)\n    x18 = hsplit(x11, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = compose(x21, first)\n    x23 = rbind(colorcount, x20)\n    x24 = matcher(x23, x22)\n    x25 = mfilter(x19, x24)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x5)\n    x28 = matcher(first, x20)\n    x29 = compose(flip, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = compose(x30, x15)\n    x32 = rbind(sfilter, x111)\n    x33 = compose(x32, x152)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x19)\n    x36 = lbind(e98196)\n    x37 = compose(x36, x30)\n    x38 = fork(apply, x37, x31)\n    x39 = fork(mapply, x35, x38)\n    x40 = fork(difference, x38, ZERO)\n    x41"], [1.1, "def solve_ae28a374(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =8900076363e21)\n    x6 = neighbors(UNITY)\n    x7 = toindices(x6)\n    x8 = box(x7)\n    x9 = rbind(825efilter, x8)\n    x10 =411170(x9)\n    x11 = x9(x10)\n    x12 = fill(I, x4, x11)\n    x13 = x9(x12)\n    x14 = interval(ONE, FIVE, ONE)\n    x15 = downscale(x13, x14)\n    x16 = objects(x12, F, F, T)\n    x17 = rbind(toobject, x15)\n    x18 = compose(vperiod, x17)\n    x19 = height(x12)\n    x20 = rbind(multiply, x19)\n    x21 = chain(x20, toindices, x18)\n    x22 = lbind(add, x5)\n    x23 = compose(x22, x21)\n    x24 = fork(add, first, x23)\n    x25 = compose(x17, x24)\n    x26 = shape(x15)\n    x27 = multiply(x26, x26)\n    x28 = lbind(multiply, x27)\n    x29 = x28(x15)\n    x30 = shift(x15, x29)\n    x31 = rbind(multiply, x30)\n    x32 = compose(x31, x241)\n    x33 = rbind(multiply, x32)\n    x34 = fork(add, x33, x24)\n    x35 = rbind(multiply, x30)\n    x36 = compose(x35, x24)\n    x37 = fork(add, x36, x37)\n    x38 = fork(equality, x38, x34)\n    x39 = sfilter(x18, x38)\n    x"], [1.1, "def solve_cd122d5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_2c434bab(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = x1(I)\n    x2 = objects(x1, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, minimum, shape)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = mostcolor(I)\n    x9 = palette(x7)\n    x10 = matcher(identity, x8)\n    x11 = argmin(x9, x10)\n    x12 = color(x11)\n    x13 = subgrid(x11, x1)\n    x14 = hmirror(x13)\n    x15 = argmin(x12, x14)\n    x16 = remove(x11, x15)\n    x17 =348(x16)\n    x18 = subgrid(x17, x1)\n    x19 = index(x18, DOWN)\n    x20 = lowermost(x15)\n    x21 = add(x20, x20)\n    x22 = width(x7)\n    x23 = rightmost(x15)\n    x24 = add(x23, x2)\n    x25 = height(x7)\n    x26 = *rightmost(x7)\n    x27 = width(x7)\n    x28 = interval(x26, x27, ONE)\n    x29 = add(x24, x27)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = lbind(shift, x17)\n    x33 = mapply(x32, x31)\n    x34 = interval(decrement, x22, ONE)\n    x35 = lbind(hmirror, x24)\n    x36 = astuple(x35, x)\n    x37 = lbind(cmirror, x17)\n    x38 = add(x37, x349)\n    x39 = x10(x38)\n    x40 = dmirror(x39)\n    x"], [1.1, "def solve_591f345a(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = shape(I)\n    x3 = maximum(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = interval(ONE, x3, ONE)\n    x6 = rbind(toobject, I)\n    x7 = rbind(shoot, RIGHT)\n    x8 = rbind(shoot, LEFT)\n    x9 = objects(x7, T, F, F)\n    x10 = rbind(shoot, DOWN)\n    x11 = rbind(shoot, UP)\n    x12 = rbind(shoot, DOWN)\n    x13 = mapply(x11, x9)\n    x14 = mapply(x12, x10)\n    x15 = combine(x13, x14)\n    x16 = apply(x15, x15)\n    x17 = lbind(canvas, ZERO)\n    x18 = lbind(occurrences, I)\n    x19 = compose(x17, x18)\n    x20 = lbind(recolor, ONE)\n    x21 = chain(x20,paint, x19)\n    x22 = lbind(ofcolor, I)\n    x23 = fork(size, x22, x21)\n    x24 = compose(maximum, x23)\n    x25 = apply(x24, x16)\n    x26 = repeat(x25, ONE)\n    x27 =047676(x26)\n    x28 = partition(x27)\n    x29 = lbind(colorcount, x27)\n    x30 = argmax(x28, x29)\n    x31 = apply(x30, x29)\n    x32 = matcher(contained, x31)\n    x33 = sfilter(x32, x32)\n    x34 = apply(color, x33)\n    x35 =64(x34)\n    x36 = astuple(ONE, THREE)\n    x37 = rbind(subtract, x36)\n    x38 = chain(halve, x37, x36)\n    x39 = fork(shift, x33, x38)\n    x40 = mapply"], [1.1, "def solve_f0cf962c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = objects(x26, s, F, T)\n    x28 = colorfilter(x27, x7)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = sfilter(x28, x30)\n    x32 = sfilter(x28, x24)\n    x33 = extract(x31, x32)\n    x34 = first(x33)\n    x35 = last(x33)\n    x36 = gravitate(x34, x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x16, x37)\n    x39 = leftmost(x37)\n    x40 = rightmost(x37)\n    x41 = astuple(x39,"], [1.1, "def solve_aefdb417(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = switch(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = fork(add, height, width)\n    x4 = rbind(decrement, x3)\n    x5 = chain(decrement, x4, shape)\n    x6 = fork(equality, size, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, x5)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(I, x9)\n    x11 = center(x10)\n    x12 = multiply(x11, x4)\n    x13 = shift(x12, x11)\n    x14 = fill(I, x9, x13)\n    x15 = toindices(x13)\n    x16 = lbind(\"\"\"\n    x17 = box(x13)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = toindices(x4)\n    x21 = lbind(intersection, x20)\n    x22 = chain(x19, size, x21)\n    x23 = argmax(x15, x22)\n    x24 = lbind(colorcount, x14)\n    x25 = argmin(x23, x24)\n    x26 = replace(x14, x25, x9)\n    x27 = color(x13)\n    x28 = colorfilter(x25, x27)\n    x29 = fill(x26, x39, x28)\n    x30 = argmin(x29, x22)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(halve, x31)\n    x33 = fork(add, first, x32)\n    x34 = x33(x26)\n    x35 = x33(x24)\n    x36 = x33(x30)\n    x37 = fill(x29, x35, x36)\n    x38 = fill(x37, x41, x34)\n    x39 =fill("], [1.1, "def solve_06011d54(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(ppaint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_27375e2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_52889f0d(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = shape(x27)\n    x30 = multiply(x29, THREE)\n    x31 = x26(I)\n    x32 = maximum(x30)\n    x33 = lbind(astuple, x32)\n    x34 = lbind(shoot, x27)\n    x35 = rightmost(x27)\n    x36 = equality(x32, x35)\n    x37 = branch(x36, x33, x34)\n    x38 = apply(x37, x39)\n    x39 = leftmost(x27)\n    x40 = decrement(x39"], [1.1, "def solve_ecd5ad9d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0008f503(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, rot90)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, size)\n    x27 = fork(sfilter, x25, x26)\n    x28 = lbind(colorcount, I)\n    x29 = argmax(x17, x28)\n    x30 = rbind(canvas, x3)\n    x31 = compose(x30, x22)\n    x32 = rbind(multiply, x6)\n    x33 = compose(x32, x19)\n    x34 = fork(equality, x33, x21)\n    x35 = rbind(n28, x34)\n    x36 = lbind(apply, x21)\n    x37 = chain(x131, x35, x36)\n    x38 = fork(sfilter, x27, x37)\n    x39 = fork(difference, x28, x38)\n"], [1.1, "def solve_6a535df9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = vsplit(I, TWO)\n    x7 = switch(x6, EIGHT, FOUR)\n    x8 = apply(x5, x7)\n    x9 = order(x8, identity)\n    x10 = last(x9)\n    x11 = remove(x10, x9)\n    x12 = compose(hmirror, merge)\n    x13 = lbind(compose, flip)\n    x14 = lbind(matcher, first)\n    x15 = chain(x13, x14, mostcolor)\n    x16 = fork(sfilter, identity, x15)\n    x17 = chain(increment, tojvec, x16)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x17, x18, identity)\n    x20 = lbind(fork, greater)\n    x21 = compose(x20, last)\n    x22 = lbind(rbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x21)\n    x25 = lbind(rbind, x24)\n    x26 = chain(x19, x24, x25)\n    x27 = compose(x5, x2)\n    x28 = fork(sfilter, identity, x27)\n    x29 = chain(first, x13, x28)\n    x30 = fork(compose, x29, x23)\n    x31 = compose(x5, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x360, x11)\n    x34 = mapply(x32, x10)\n    x35 = combine(x33, x34)\n    x36 = mapply(x32, x20)\n    x37 = mapply(x32, x27)\n    x38 = m"], [1.1, "def solve_94f0ea96(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(5521, UNITY)\n    x3 = rbind(subgrid, I)\n    x4 = chain(numcolors, x2)\n    x5 = matcher(x4, ONE)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = chain(positive, size, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(dmirror, merge)\n    x11 = chain(normalize, x10, x8)\n    x12 = chain(ff28, x11, x9)\n    x13 = chain(dmirror, x11, x12)\n    x14 = fork(concat, x11, x13)\n    x15 = fork(compose, x14, x11)\n    x16 = lbind(chain, size)\n    x17 = lbind(x16, x10)\n    x18 = rbind(compose, x17)\n    x19 = lbind(rbind, subtract)\n    x20 = chain(x18, x19, x15)\n    x21 = rbind(rapply, I)\n    x22 = initset(x7)\n    x23 = lbind(rapply, x22)\n    x24 = chain(first, x21, x23)\n    x25 = compose(x20, x24)\n    x26 = argmax(x9, x25)\n    x27 = first(x26)\n    x28 = last(x26)\n    x29 = x27(I)\n    x30 = x27(x28)\n    x31 = palette(x30)\n    x32 = shape(x30)\n    x33 = lbind(apply, first)\n    x34 = lbind(ofcolor, x30)\n    x35 = chain(x33, x34, x28)\n    x36 = replace(x30, SIX, ZERO)\n    x37 = apply(x35, x36)\n    x38 = astuple(x31, x"], [1.1, "def solve_45e52190(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = compose(normalize, toindices)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x4)\n    x9 = paint(x7, x8)\n    x10 = shape(x4)\n    x11 = width(x9)\n    x12 = height(x9)\n    x13 = normalize(x4)\n    x14 = interval(x11, x12, ONE)\n    x15 = paint(x9, x14)\n    x16 = shape(x4)\n    x17 = interval(x13, x16, ONE)\n    x18 = rbind(toobject, x9)\n    x19 = lbind(278, multiply)\n    x20 = chain(x18, x19, mostcolor)\n    x21 = rbind(afivec, x10)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(canvas, x5)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(remove, x23, x26)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(chain, x18)\n    x30 = lbind(x29, normalize)\n    x31 = lbind(x30, x27)\n    x32 = rbind(difference, x15)\n    x33 = compose(x31, x32)\n    x34 = rbind(apply, x15)\n    x35 = chain(size, x34, x28)\n    x36 = argmax(x17, x35)\n    x37 =06(x36, x31)\n    x38 = color(x37)\n    x39 =O = paint(x37, x38)\n    x40 = height("], [1.1, "def solve_01af9c72(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 =11e(I)\n    x8 = hmatching(x7, x4)\n    x9 = branch(x8, identity, vmirror)\n    x10 = x9(I)\n    x11 = trim(x10)\n    x12 = palette(x11)\n    x13 = matcher(identity, x12)\n    x14 = vmirror(x11)\n    x15 = hmirror(x11)\n    x16 = vmirror(x15)\n    x17 = asindices(x16)\n    x18 = shift(x17, UNITY)\n    x19 = paint(x10, x18)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = center(x21)\n    x23 = dmirror(x21)\n    x24 = shift(x23, x22)\n    x25 = paint(x19, x24)\n    x26 = toindices(x24)\n    x27 = initset(x26)\n    x28 = remove(x25, x20)\n    x29 = insert(x28, x26)\n    x30 = product(x27, x29)\n    x31 = rbind(intersection, x22)\n    x32 = compose(size, x31)\n    x33 = matcher(x32, ZERO)\n    x34 = branch(x33, x44, x25)\n    x35 = flip(x34)\n    x36 = branch(x35, x24, x25)\n    x37 = branch(x35, x16, x25)\n    x38 = branch(x35, x22, x25)\n    x39 = branch(x35, x19, x27)\n    x40 = branch(x35, x36, x31)\n    x41 = branch("], [1.1, "def solve_8db7e957(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13) extract(x16, identity)\n    x17 = last(x16)\n    x18 = remove(x4, x16)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x13, x19)\n    x21 = rbind(first, x15)\n    x22 = compose(first, backdrop)\n    x23 = fork(compose, x21, x22)\n    x24 = lbind(lbind, shift)\n    x25 = height(x19)\n    x26 = matcher(x25, ZERO)\n    x27 = lbind(fork, both)\n    x28 = rbind(x27, x26)\n    x29 = extract(x15, x28)\n    x30 = center(x29)\n    x31 = matcher(last, x30)\n    x32 = compose(flip, x31)\n    x33 = center(x29)\n    x34 = initset(x33)\n    x35 = insert(x16, x34)\n    x36 = insert(x31, x35)\n    x37 = dmirror(x36)\n    x38 = lbind(shift, x37)\n    x39 = occurrences(x38, x38)\n    x40 = mapply(x38, x39)\n    x41 = fill"], [1.1, "def solve_97a8ed05(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_397bb0d0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_355127f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2770d49d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a73b4210(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = objects(I, T, F, T)\n    x32 = apply(toindices, x31)\n    x33 = lbind(compose, normalize)\n    x34 = lbind(rbind, contained)\n    x35 = chain(x33, x34, leftmost)\n    x36 = chain(size, x32, x35)\n    x37 = equality(x36, ONE)\n    x38 = mapply(x37, x29)\n    x39"], [1.1, "def solve_064317bd(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =675(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = width(I)\n    x7 = equality(x5, x6)\n    x8 = toivec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = shape(I)\n    x11 = halve(x10)\n    x12 = canvas(ZERO, x11)\n    x13 = ofcolor(I, ZERO)\n    x14 = asindices(x13)\n    x15 = difference(x14, x13)\n    x16 = rbind(toobject, I)\n    x17 = compose(first, x16)\n    x18 = apply(x17, x15)\n    x19 = interval(ZERO, x5, ONE)\n    x20 = product(x19, x19)\n    x21 = apply(last, x20)\n    x22 = lbind(recolor, ZERO)\n    x23 = compose(x22,\n    x24 = matcher(first, ZERO)\n    x25 = rbind(sfilter, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = chain(x26, x25, x25)\n    x28 = chain(x27, x26, x25)\n    x29 = lbind(shift, x14)\n    x30 = fork(combine, x29, x28)\n    x31 = compose(x30, x23)\n    x32 = fork(mapply, x31, x29)\n    x33 = mapply(x32, x21)\n    O = paint(x12, x33)\n    return O"], [1.1, "def solve_3aa3d87a(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(remove, ZERO)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 =7523(I)\n    x5 = lbind(occurrences, x4)\n    x6 = compose(x5, x3)\n    x7 = fork(mapply, x3, x6)\n    x8 = compose(cmirror, x7)\n    x9 = fork(occurrences, x8, toindices)\n    x10 = compose(lrcorner, x9)\n    x11 = fork(shift, x10, x8)\n    x12 = compose(UNITY, x11)\n    x13 = leastcolor(I)\n    x14 = ofcolor(I, x13)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(I, x13, x19)\n    O = mapply(x12, x4)\n    return O"], [1.1, "def solve_03679c68(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = rbind(contained, x5)\n    x7 = compose(x6, first)\n    x8 = rbind(sfilter, x7)\n    x9 = lbind(rbind, subtract)\n    x10 = lbind(occ):\n    x11 = apply(x9, x5)\n    x12 = lbind(lbind, shift)\n    x13 = x17(x11)\n    x14 = x12(x12)\n    x15 = fork(apply, x7, x8)\n    x16 = fork(apply, x12, x14)\n    x17 = fork(paint, identity, x15)\n    x18 = identity(x16)\n    x19 = dmirror(I)\n    x20 = papply(pair, x19, x8)\n    x21 = lbind(apply, x17)\n    x22 = apply(x21, x20)\n    x23 = argmin(x22, x7)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = replace(x19, x25, x24)\n    x27 = apply(x16, x26)\n    x28 = color(x27)\n    x29 = ofcolor(x25, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    O = fill(x45, x28, x33)\n    return O"], [1.1, "def solve_d41d2edc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =6879641\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = width(x12)\n    x14 = subtract(x13, ONE)\n    x15 = divide(x14, TWO)\n    x16 = height(x12)\n    x17 = subtract(x16, TWO)\n    x18 =160(x17)\n    x19 = lbind(shift, x12)\n    x20 = rbind(multiply, x15)\n    x21 = chain(x19, x20, x19)\n    x22 = astuple(x16, x18)\n    x23 = rbind(multiply, x22)\n    x24 =10(x23)\n    x25 = lbind(shift, x12)\n    x26 = rbind(multiply, x25)\n    x27 = chain(x24, x26, x19)\n    x28 = astuple(x18, x17)\n    x29 = rbind(multiply, x28)\n    x30 =10(x29)\n    x31 = lbind(shift, x12)\n    x32 = rbind(multiply, x15)\n    x33 = chain(x31, x32, x19)\n    x34 = combine(x26, x33)\n    x35 = mapply(x21, x34)\n    x36 = paint(I, x35)\n    O = subgrid(x3, x36)\n    return O"], [1.1, "def solve_56f45d23(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot197, merge)\n    x3 = valmax(x1, height)\n    x4 = matcher(size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 =1884615096444f830(I):\n    O = fill(I, FIVE, x8)\n    return O"], [1.1, "def solve_f19f03ad(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = rbind(Example output:\n    8224669124\n    2872000837\n    6213758198\n    5239174079\n    8895626318\n    2128321892\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    \"\"\"\n    x2 =92(ofcolor, I)\n    x3 = compose(first, last)\n    x4 = rbind(subgrid, I)\n    x5 = chain(x4, mostcolor, x3)\n    x6 = fork(650, x5, x4)\n    x7 = lbind(greater, THREE)\n    x8 = compose(x7, x6)\n    x9 = sfilter(x2, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.1, "def solve_3e58962e(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = fork(both, x3, x4)\n    x6 = extract(x3, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = backdrop(x6)\n    x9 =6666(x8, identity)\n    x10 = initset(x7)\n    x11 = matcher(x7, x10)\n    x12 = sfilter(x6, x11)\n    x13 = difference(x6, x12)\n    x14 = toobject(x13, I)\n    x15 = matcher(first, x1)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x14, x16)\n    x18 = merge(x17)\n    x19 = fill(I, TWO, x18)\n    x20 = color(x6)\n    O = fill(x19, x20, x2)\n    return O"], [1.1, "def solve_cd025170(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =9af4ty694\n    d687934510\n    4006941674\n    1100490694\n    8995020098\n    9706069391\n    975d9001ae(99fa2020\n    8097267001\n    7231163527\n    9214080289\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = ofcolor(I, ONE)\n    x5 = subgrid(x4, x2)\n    x6 = argmax(x4, width)\n    x7 = subgrid(x6, x3)\n    x8 = subgrid(x7, x2)\n    x9 = height(x8)\n    x10 = lowermost(x8)\n    x11 = width(x8)\n    x12 = divide(x9, x11)\n    x13 = upscale(x5, x12)\n    x14 = ofcolor(x13, ONE)\n    x15 = subgrid(x14, x8)\n    x16 = colorcount(x15, ZERO)\n    x17 = rightmost(x16)\n    x18 = add(x17, x10)\n    x19 = tojvec(x18)\n    x20 = vmirror(x15)\n    x21 = invert(x20)\n    x22 = shift(x20, x21)\n    x23 = apply(x22, x16)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = astuple(x26, x22)\n    x28 = lbind(multiply, x27)\n    x29 = apply(x28, x26)\n    x30 = interval(ZERO, x5, ONE)\n    x31 = pair(x30, x30)\n    x32 = mapply(box, x31)\n    O = fill(x15, FOUR, x32)\n    return O"], [1.1, "def solve_73822e19(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(6696, TWO)\n    x7 = rbind(colorcount, TWO)\n    x8 = argmax(x5, x7)\n    x9 = subgrid(x8, I)\n    x10 = rbind(contained, x4)\n    x11 = rbind(subtract, x4)\n    x12 = chain(x10, x11, minimum)\n    x13 = rbind(greater, ONE)\n    x14 = rbind(x13, TWO)\n    x15 = chain(x14, x11, normalize)\n    x16 = lbind(contained, TWO)\n    x17 =12(x16)\n    x18 = rbind(gravitate, x8)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(I, x4, x22)\n    return O"], [1.1, "def solve_36a6ad3e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = fork(combine, x13, x17)\n    x19 = fork( apply(x18, x3)\n    x20 = rbind(argmin, lrcorner)\n    x21 = compose(x20, delta)\n    x22 = fork(subtract, x21, x15)\n    x23 = fork(shift, x17, x22)\n    x24 = rbind(x23, RIGHT)\n    x25 = compose(x24, ulcorner)\n    x26 = x25(x2)\n    x27 = fork(subtract, x26, x24)\n    x28 = fork(shift, x22, x27)\n    x29 = fork(combine, x28, x21)\n    x30 = mapply(x29, x3)\n    O = underfill(I, EIGHT, x30)\n    return O"], [1.1, "def solve_9ad341d6(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = totuple(x6)\n    x8 =66666666(x5, x7)\n    x9 = lbind(lbind, astuple)\n    x10 = lbind(chain, x9)\n    x11 = compose(x10, x4)\n    x12 = lbind(lbind, mapply)\n    x13 = x11(x12)\n    x14 = combine(x8, x13)\n    x15 = difference(x7, x14)\n    x16 = apply(x11, x15)\n    x17 = ofcolor(I, x5)\n    x18 = intersection(x17, x16)\n    O = fill(I, TWO, x18)\n    return O"], [1.1, "def solve_cfa5a811(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =9097(I)\n    x2 = dmirror(I)\n    x3 = papply(pair, I, x1)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(x14, ZERO)\n    x16 = subgrid(x15, x14)\n    x17 = apply(x4, x16)\n    x18 = hmirror(x17)\n    x19 = papply(pair, x17, x18)\n    x20 = apply(x4, x19)\n    x21 = vmirror(x20)\n    x22 = papply(pair, x21, x20)\n    O = apply(x4, x22)\n    return O"], [1.1, "def solve_e45ea913(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = normalize(I)\n    x3 = mostcolor(I)\n    x4 = canvas(x3, x1)\n    x5 = objects(I, F, F, T)\n    x6 =65(x5)\n    x7 = mostcolor(x6)\n    x8 = first(x5)\n    x9 = matcher(first, x7)\n    x10 = sfilter(x8, x9)\n    x11 = normalize(x10)\n    x12 = objects(I, T, F, T)\n    x13 = compose(toindices, lrcorner)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x12, x14)\n    x16 = normalize(x15)\n    x17 = objects(I, T, F, T)\n    x18 = sizefilter(x17, TWO)\n    x19 = apply(invert, x18)\n    x20 = shift(x19, x17)\n    x21 = merge(x80)\n    x22 = fill(I, x7, x21)\n    x23 = shift(x20, x17)\n    x24 = fill(x22, x7, x23)\n    x25 = shift(x21, x17)\n    x26 = fill(x24, x7, x25)\n    O = paint(x26, x20)\n    return O"], [1.1, "def solve_b08cc038(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [1.1, "def solve_fd237548(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = rbind(adjacent, DOWN)\n    x11 = sfilter(x9, x10)\n    x12 =444(x11)\n    x13 =002(x12,80)\n    x14 = vmirror(x13)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x4)\n    x17 = rbind(bordering, I)\n    x18 = compose(flip, x17)\n    x19 = mfilter(x16, x18)\n    O = fill(I, EIGHT, x19)\n    return O"], [1.1, "def solve_ad949fc9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = ONE(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = palette(x3)\n    x5 =71e2676(x4)\n    x6 = palette(x3)\n    x7 = intersection(x5, x6)\n    x8 =711219723(x2)\n    x9 = shape(x3)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(x3, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = FOUR(x13)\n    x15 = subgrid(x13, x14)\n    x16 = interval(ONE, FOUR, ONE)\n    x17 = lbind(power, rot90)\n    x18 = initset(x17)\n    x19 = chain(x18, repeat, fgpartition)\n    x20 = lbind(lbind, shift)\n    x21 = occurrences(x15, x16)\n    x22 = mapply(x20, x21)\n    O = paint(x10, x22)\n    return O"], [1.1, "def solve_d8dc42ad(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = argmax(I, size)\n    x2 = color(x1)\n    x3 = subgrid(x1, I)\n    x4 = objects(x3, F, T, T)\n    x5 = argmin(x4, size)\n    x6 = subgrid(x5, I)\n    x7 = normalize(x6)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 = ZERO(x8)\n    x11 = astuple(x10, x9)\n    x12 = add(x11, ORIGIN)\n    x13 = hupscale(x3, x12)\n    x14 = output:\n    x13, x7)\n    x15 = width(x7)\n    x16 = height(x7)\n    x17 = tojvec(x16)\n    x18 = lbind(shift, x7)\n    x19 = compose(x18, toivec)\n    x20 = height(x7)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = apply(x19, x22)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x23)\n    x26 = combine(x28, x25)\n    x27 = paint(x3, x26)\n    x28 = lbind(shift, x7)\n    x29 = rapply(x28, x25)\n    x30 = mapply(x29, x28)\n    x31 = paint(x27, x30)\n    O = branch(x5, x30, x31)\n    return O"], [1.1, "def solve_17defa96(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(shift, I)\n    x2 = lbind(multiply, THREE)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = chain(decrement, dmirror, x4)\n    x6 = fork(equality, toindices, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = x5(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 =565(x10)\n    x13 = in2005(x12)\n    x14 =730(x10)\n    x15 = lefthalf(x14)\n    x16 = righthalf(x14)\n    x17 = rbind(order, leftmost)\n    x18 = compose(x17, x16)\n    x19 = rbind(order, rightmost)\n    x20 = compose(x19, x16)\n    x21 = rbind(order, ZERO_BY_TWO)\n    x22 = compose(x21, x19)\n    x23 = fork(combine, x18, x20)\n    x24 = fork(combine, x23, x22)\n    x25 = compose(x24, backdrop)\n    x26 = fork(recolor, x25, x20)\n    x27 = mapply(x26, x8)\n    x28 = paint(x10, x27)\n    x29 = dmirror(x28)\n    x30 = objects(x29, T, F, T)\n    x31 =907(x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = pair(x33, x30)\n    x35 = mapply(last, x34)\n    x36 = paint(x27, x35)\n    O = x5(x36)\n    return O"], [1.1, "def solve_ecc72f4c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 =81(I)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(x5, x6)\n    x8 = double(x2)\n    x9 = compose(multiply, last)\n    x10 = argmin(x7, x9)\n    O = mostcolor(x10)\n    return O"], [1.1, "def solve_4da80f6c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = replace(x6, NEG_ONE, ZERO)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter, x21, x17)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.1, "def solve_24147c9c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =782(x2)\n    x4 = apply(color, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x5)\n    O = fill(x6, TWO, x8)\n    return O"], [1.1, "def solve_cbd0aacf(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = ofcolor(I, x8)\n    x10 = urcorner(x9)\n    x11 = ulcorner(x9)\n    x12 = shoot(x11, NEG_UNITY)\n    x13 = shoot(x11, UP_RIGHT)\n    x14 = combine(x12, x13)\n    x15 = underfill(I, ZERO, x14)\n    x16 = objects(x15, T, F, T)\n    x17 =597158(x16, merge)\n    x18 = center(x17)\n    x19 = shoot(x18, DOWN_LEFT)\n    x20 = shoot(x18, UNITY)\n    x21 = combine(x19, x20)\n    x22 =47(x21)\n    x23 = asindices(x11)\n    x24 = ofcolor(x11, x8)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    x29 = asindices(I)\n    x30 = shape(x11)\n    x31 = intersection(x29, x30)\n    x32 = fill(x11, x8, x31)\n    x33 = compose(first, last)\n    x34 = fork(recolor, x33, first)\n    x35 = mapply(x34, x28)\n    x36 = paint(x32, x35)\n    O = replace(x36, x8, x5)\n    return O"], [1.1, "def solve_386042f0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 =755522455\n    0942255522\n    4285065628\n    1980568079\n    9599496669\n    2740694924\n    9595380864\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [1.1, "def solve_0e1c23e2(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = chain(x4, x3, cmirror)\n    x6 = matcher(x5, ZERO)\n    x7 = extract(x1, x6)\n    x8 =49810(x7)\n    x9 = argmax(x8, identity)\n    x10 = leastcolor(x9)\n    x11 = matcher(first, x10)\n    x12 = sfilter(x8, x11)\n    x13 = merge(x12)\n    x14 = vmirror(x13)\n    x15 = mostcolor(I)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = fill(x17, x10, x14)\n    x19 = lbind(e179, x10)\n    x20 = lbind(occurrences, x18)\n    x21 = lbind(lbind, shift)\n    x22 = compose(x21, toindices)\n    x23 = chain(x19, x21, x22)\n    x24 = lbind(mapply, x23)\n    x25 = rbind(occurrences, x18)\n    x26 = lbind(mapply, x24)\n    x27 = chain(x25, x26, x22)\n    x28 = astuple(cmirror, dmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = combine(x28, x29)\n    x31 = product(x30, x30)\n    x32 = fork(compose, first, last)\n    x33 = apply(x32, x31)\n    x34 =0191524 x33)\n    x35 = combine(xsIX, x34)\n    x36 = paint(x20, x35)\n    O = paint(x36, x36)\n    return O"], [1.1, "def solve_faca5f25(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x NEG_UNITY)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    x36 = fill(x35, x11, x34)\n    O = fill(x36, x10, x35)\n    return O"], [1.1, "def solve_a1e40878(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =48(I)\n    x3 = replace(I, x1, ZERO)\n    x4 = compose(dmirror, merge)\n    x5 = x4(x3)\n    x6 = astuple(NEG_TWO, NEG_TWO)\n    x7 = shift(x5, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = mapply(x8, x7)\n    O = underfill(x3, x1, x9)\n    return O"], [1.1, "def solve_6e045321(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(x1, ZERO)\n    x3 = astuple(ZERO, ORIGIN)\n    x4 = initset(x3)\n    x5 = upscale(x4, TWO)\n    x6 = portrait(x5)\n    x7 = branch(x6, ZERO, RIGHT)\n    x8 = ulcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = shift(x9, TWO_BY_TWO)\n    x11 = branch(x6, toindices, box)\n    x12 = fork(combine, hfrontier, vfrontier)\n    x13 = x12(x110)\n    x14 = corners(x5)\n    x15 = ofcolor(x14, ZERO)\n    x16 = mapply(x12, x15)\n    x17 = difference(x10, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x19, x20)\n    x22 = other(x21, x1)\n    x23 = ofcolor(x18, x22)\n    x24 = lbind(shift, x18)\n    x25 = halve(x4)\n    x26 =345(x25)\n    x27 = subgrid(x23, x26)\n    O = trim(x27)\n    return O"], [1.1, "def solve_e4b21d87(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =44mirror(x2)\n    x4 = replace(I, NINE, ZERO)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = color(x3)\n    x7 = lbind(shift, x3)\n    x8 = apply(x7, x5)\n    x9 = mapply(x8, x4)\n    O = paint(x4, x9)\n    return O"], [1.1, "def solve_16354b3c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =52(I)\n    x5 = matcher(first, x3)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    O = fill(I, NINE, x9)\n    return O"], [1.1, "def solve_d9e6655e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width761259726\n    70721528170\n    0583544745\n    5784467579\n    5526432855\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_ff971bee(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(d687, toindices, x4)\n    x6 = lbind(difference, x1)\n    x7 = compose(x6, toindices)\n    x8 = chain(positive, size, x7)\n    x9 = lbind(lbind, shift)\n    x10 = apply(x9, x8)\n    x11 =552299b230(x10)\n    x12 = lbind(ofcolor, x4)\n    x13 = compose(x12, x8)\n    x14 = fork(recolor, x13, identity)\n    x15 = mapply(x14, x12)\n    x16 = paint(I, x15)\n    x17 =Revppaint(x16, x1)\n    O = objects(x17, T, F, T)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_6dd03f15(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_363c9896(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.1607843137254902, "def solve_3dc52985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_6dbb6863(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.2482843137254902, "def solve_f24b9c81(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.30490196078431375, "def solve_01d0ebb5(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_f5bd6aab(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_896bcc9d(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_5ad7f1a7(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_d67c7304(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_641f9ec3(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_7bd39526(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_2466f39e(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.32027505446623095, "def solve_72cde99e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_fb3f508d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_d1f415d7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.3215686274509804, "def solve_ba210909(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.3215686274509804, "def solve_353e5a4b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3666824618736384, "def solve_05a9b810(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.36851851851851847, "def solve_fe53566c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.36851851851851847, "def solve_bac9365e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.37411764705882355, "def solve_b55feb1a(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.3931917211328976, "def solve_0744f58c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_7cf03094(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, T, F, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_12f80178(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_b3d39f30(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.40763616557734206, "def solve_16678d0e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_14424f72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_f1a4a8f3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_19e93b86(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_7d20db21(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_8dd9a0f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_7c5d5318(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_0f67723b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_1cd1c801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_df209154(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_0b4e2894(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_f8e3f5ed(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_1fadd532(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_960122e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_76830682(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41333791996330693, "def solve_42e056ec(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.4296296296296296, "def solve_63a25bc0(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.4296296296296296, "def solve_ef5bc955(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.5232709913889689, "def solve_bc06d494(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_20bde5d9(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_5a85a4c0(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_724cfa4f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5540128968253968, "def solve_50ffae8b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x3, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x4, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.5900055192264699, "def solve_d98a660c(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5902430555555556, "def solve_29be50d3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5916319444444444, "def solve_881da893(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5916875254375255, "def solve_9f80af8e(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.6016846978557505, "def solve_43b470fd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x3, x7)\n    return O"], [0.6096001124464123, "def solve_239be59f(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6600575299564271, "def solve_0832912d(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_0f590ebb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6600575299564271, "def solve_64681a5f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_e4d9aa9e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_4f220bec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = shape(x6)\n    x13 = canvas(x11, x12)\n    x14 = ofcolor(x6, x11)\n    x15 = ofcolor(x7, x11)\n    x16 = intersection(x14, x15)\n    O = fill(x13, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_14acc4b7(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.660134929337232, "def solve_cec4d0e5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.660134929337232, "def solve_2f30089b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6672060197871419, "def solve_b3d4c9c9(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6696587388610415, "def solve_e3e4a528(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.674180469289165, "def solve_e65f80d5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.674180469289165, "def solve_e7bb5665(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6777777777777778, "def solve_a9fc4fdd(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = ofcolor(x4, ZERO)\n    x6 = ofcolor(x2, ZERO)\n    x7 = intersection(x5, x6)\n    x8 = shape(x3)\n    x9 = canvas(ZERO, x8)\n    O = fill(x9, THREE, x7)\n    return O"], [0.6837830785199206, "def solve_d82ab65e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_8fc26d0f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_966c3959(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_90c82262(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6901349293372321, "def solve_c63a5c72(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_7b4af5af(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_7a3592b6(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_2a7f068d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_db2101a9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_88d26863(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_b555df2e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_e6613122(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_1910037e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_82a0b75d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_e35470f2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_a7d1865b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6946027369281046, "def solve_b493dfd6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.700481793212685, "def solve_c465c00b(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_1700566c(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_3d77ebc9(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_058b3b0d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_05da2b43(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_f52ac5ae(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_bd425757(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.700481793212685, "def solve_6b61d368(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_15cee853(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_70089b3d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_817f4653(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_45bb8e4e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_29340112(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_5089002f(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_a3173aad(I):\n    x1 = shape(I)\n    x2 = asindices(I)\n    x3 = objects(I, T, F, F)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, x1)\n    x8 = paint(x7, x4)\n    x9 = mostcolor(I)\n    x10 = color(x4)\n    x11 = astuple(x9, ORIGIN)\n    x12 = astuple(x10, RIGHT)\n    x13 = astuple(x9, ZERO_BY_TWO)\n    x14 = initset(x13)\n    x15 = insert(x12, x14)\n    x16 = insert(x11, x15)\n    x17 = dmirror(x16)\n    x18 = toindices(x16)\n    x19 = lbind(shift, x18)\n    x20 = occurrences(x8, x16)\n    x21 = mapply(x19, x20)\n    x22 = toindices(x17)\n    x23 = lbind(shift, x22)\n    x24 = occurrences(x8, x17)\n    x25 = mapply(x23, x24)\n    x26 = combine(x21, x25)\n    O = fill(x8, x9, x26)\n    return O"], [0.700481793212685, "def solve_2319a64a(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_2f02e199(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.709172269403161, "def solve_9ea6fe03(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7093213665999674, "def solve_a126ec1f(I):\n    x1 = replace(I, EIGHT, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7121404907528761, "def solve_9459ea6c(I):\n    O = trim(I)\n    return O"], [0.7167554635380722, "def solve_fb4099f9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7196297252492267, "def solve_7ae35f95(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = dedupe(x3)\n    return O"], [0.7338151265460182, "def solve_1879f635(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7338151265460182, "def solve_02ac69d9(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7341722694031612, "def solve_c75e5496(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.7347001544787553, "def solve_a8fd49cd(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7389341741650659, "def solve_b3135066(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.7407407407407407, "def solve_cf5e8e00(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.741832732082732, "def solve_2584e703(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.741832732082732, "def solve_ead53366(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.7421484598793515, "def solve_6931f7de(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7421484598793515, "def solve_d273b463(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7433389360698277, "def solve_e1c9bd3f(I):\n    O = rot180(I)\n    return O"], [0.7433389360698277, "def solve_8e0b6c55(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7433389360698277, "def solve_11c3c0ac(I):\n    O = rot180(I)\n    return O"], [0.7433389360698277, "def solve_2e0a94bc(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7433389360698277, "def solve_65506423(I):\n    O = rot180(I)\n    return O"], [0.7433389360698277, "def solve_d6959afb(I):\n    O = vmirror(I)\n    return O"], [0.7433389360698277, "def solve_dd30881e(I):\n    x1 = dmirror(I)\n    O = cmirror(x1)\n    return O"], [0.7433389360698277, "def solve_1e2562e5(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7436960789269706, "def solve_05dd9d12(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_f0ea4f02(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_f8867b30(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_6f3a6e0e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_b8386a1b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_ea53f5a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7436960789269706, "def solve_47df6898(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_6e0e6ffd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_d42f922b(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [0.7436960789269706, "def solve_75279b56(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_ed258f16(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_2f2fcf1a(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_fbaaf83e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_6f1b2970(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_6c239764(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_4821dd5c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = subgrid(x3, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, x1, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, x1, x16)\n    return O"], [0.7436960789269706, "def solve_36d223d8(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_b6129454(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, last)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7436960789269706, "def solve_5f7a68b7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_fcb97da4(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_19fd0a58(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_885ddf67(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_d29215b7(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_ea32005f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_c2281b96(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_90565e03(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_5f45f139(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_86ed03ba(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_0a7bc089(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7436960789269706, "def solve_04574a5a(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_600e8b37(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_9fc7c0a8(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_d8208217(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_99d2a7b3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_ea5df16d(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [0.7436960789269706, "def solve_477ff01d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = mapply(x24, x19)\n    O = paint(I, x25)\n    return O"], [0.7436960789269706, "def solve_5effc4d7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_c5488d26(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_37cf8237(I):\n    O = dmirror(I)\n    return O"], [0.7436960789269706, "def solve_3f266eba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_6f0730c0(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_73f802f1(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_263a58cd(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_1d799efa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_e9562815(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_50b6b36c(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_839f398e(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.7436960789269706, "def solve_a01e786b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_fa0bbc5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_850c53d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7436960789269706, "def solve_1f170a64(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7436960789269706, "def solve_f73a17bb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_2a75e1ef(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, TWO, x3)\n    return O"], [0.7436960789269706, "def solve_f012a851(I):\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = interval(x33, x29, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x22)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.7436960789269706, "def solve_cdf59cea(I):\n    O = dmirror(I)\n    return O"], [0.7436960789269706, "def solve_eadf6f49(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_07ad5d03(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_85e53d92(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7436960789269706, "def solve_e81ccc4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_194a097f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_5155b3b6(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7440145502645503, "def solve_b6a0d229(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.7440145502645503, "def solve_397ed6e5(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.7440145502645503, "def solve_ee65841b(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.7440145502645503, "def solve_6c0c3a38(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.7444907407407407, "def solve_7d664772(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = sfilter(x13, x10)\n    x15 = size(x14)\n    x16 = greater(x12, x15)\n    x17 = branch(x16, hmirror, identity)\n    x18 = x17(x6)\n    x19 = partition(x18)\n    x20 = matcher(color, x8)\n    x21 = extract(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = argmin(x22, uppermost)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = color(x24)\n    x27 = fill(x18, TWO, x21)\n    x28 = fill(x27, ONE, x24)\n    x29 = fill(x28, ZERO, x23)\n    x30 = rbind(order, identity)\n    x31 = dmirror(x29)\n    x32 = apply(x30, x31)\n    x33 = dmirror(x32)\n    x34 = x17(x33)\n    x35 = x5(x34)\n    x36 = ofcolor(x35, TWO)\n    x37 = fill(x35, x8, x36)\n    x38 = ofcolor(x35, ONE)\n    x39 = fill(x37, x26, x38)\n    x40 = ofcolor(x35, ZERO)\n    O = fill(x39, x25, x40)\n    return O"], [0.7456442312631633, "def solve_211e4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7456442312631633, "def solve_c1e1f707(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7472675074983992, "def solve_4ac730df(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_f1c132e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_4074f730(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_576710ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_6fd190e8(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.7472675074983992, "def solve_50ad09e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_c972eccc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7472675074983992, "def solve_6ca9257e(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = astuple(x2, ONE)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = shoot(x5, RIGHT)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, FOUR, x7)\n    return O"], [0.7472675074983992, "def solve_11d0edd1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_3673afd6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7480334878120887, "def solve_6b2138cd(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480334878120887, "def solve_bc81486c(I):\n    x1 = replace(I, ZERO, ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480334878120887, "def solve_ba922e50(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.7480334878120887, "def solve_b63cb71d(I):\n    x1 = replace(I, NINE, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7516089382871389, "def solve_3049583f(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = asobject(I)\n    x6 = difference(x5, x4)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = paint(I, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = mapply(delta, x9)\n    O = fill(x8, ZERO, x10)\n    return O"], [0.7532198884507801, "def solve_1031dae9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_e5a41df3(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_abb9653c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_baf8a095(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [0.7532198884507801, "def solve_ad996615(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_36ca63a9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_7b05a020(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [0.7535175074983992, "def solve_e848cd8e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7535175074983992, "def solve_161cf03a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7535175074983992, "def solve_540e1458(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7579817932126849, "def solve_cdaf8146(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7579817932126849, "def solve_caacc226(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7596885497407995, "def solve_c42446ab(I):\n    O = replace(I, FOUR, ZERO)\n    return O"], [0.7615532217841134, "def solve_a74bd57c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_1054c2f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_4b677b91(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_4d5fce32(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_b54fc6ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_357caa72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c2932f76(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.767824074074074, "def solve_f1b42bfb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7732483461297021, "def solve_88a16f69(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.7732483461297021, "def solve_7b19ecb9(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.7758389360698277, "def solve_9124b818(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_70383862(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_7468d487(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_4b9601e6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_64d1e023(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7819990673127664, "def solve_19535a00(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_b421dfbd(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.7819990673127664, "def solve_f129703e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_a98d59b6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.7819990673127664, "def solve_2907a38e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_95e41dd6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_88054beb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_603d0c64(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x7)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = increment(x15)\n    x17 = shift(x15, x16)\n    x18 = rbind(gravitate, x17)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(x11, x7, x22)\n    return O"], [1.0, "def solve_6b569afe(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_00be2bd9(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_53c3e3fd(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = compose(dneighbors, shape)\n    x4 = fork(difference, backdrop, x3)\n    x5 = toobject(x2, I)\n    x6 = matcher(first, x1)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = colorfilter(x13, x1)\n    x15 = argmax(x14, numcolors)\n    x16 = matcher(first, x1)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = remove(x19, x18)\n    x21 = lbind(shift, x19)\n    x22 = mapply(x21, x20)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_08933e2e(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x13 = rbind(shoot, NEG_UNITY)\n    x14 = fork(combine, x6, x13)\n    x15 = fork(combine, x5, x14)\n    x16 = index(I, x2)\n    x17 = x15(x2)\n    x18 = ulcorner(x2)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = subgrid(x2, I)\n    x24 = objects(x23, x22, x23)\n    x25 = merge(x24)\n    x26 = cover(x23, x25)\n    x27 = subgrid(x2, x26)\n    x28 = objects(x27, x24, x23)\n    x29 = rbind(toobject, x27)\n    x30 = chain(x29, corners, outbox)\n    x31 = fork(both, x28, x30)\n    x32 = extract(x28, x31)\n    O = fill(x27, ONE, x32)\n    return O"], [1.0, "def solve_b551fc17(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_1a9da7d1(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = chain(x2, x3, palette)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(palette, x5)\n    x7 = lbind(apply, x6)\n    x8 = chain(flip, x7, x5)\n    x9 = sfilter(I, x8)\n    x10 = fork(recolor, x6, x3)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_753ad728(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = toivec(x2)\n    x4 = crop(I, x3, x2)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [1.0, "def solve_786af6da(I):\n    x1 = Vision(I)\n    x2 = lbind(contained, TWO)\n    x3 = chain(x2, dmirror, identity)\n    x4 = compose(x1, x3)\n    x5 = astuple(vsplit, hsplit)\n    x6 = x4(I, TWO)\n    x7 = order(x5, x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = product(x8, x9)\n    x11 = matcher(x4, x8)\n    x12 = compose(flip, x11)\n    x13 = extract(x10, x12)\n    x14 = lbind(sfilter, x10)\n    x15 = compose(first, last)\n    x16 = lbind(matcher, x15)\n    x17 = chain(x14, x16, leftmost)\n    x18 = fork(4488, x17, last)\n    x19 = fork(sfilter, x18, first)\n    x20 = compose(last, last)\n    x21 = compose(flip, x20)\n    x22 = fork(recolor, x18, x21)\n    x23 = mapply(x22, x13)\n    O = paint(x6, x23)\n    return O"], [1.0, "def solve_2fea53ed(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_53c824b7(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c3ad5459(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_48d9d2dc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = matcher(first, x1)\n    x12 = sfilter(x10, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = first(x13)\n    x15 = divide(x4, x5)\n    x16 = downscale(x14, x15)\n    x17 = objects(x16, F, F, T)\n    x18 = color(x2)\n    x19 = ofcolor(x16, x18)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(x16, x21)\n    return O"], [1.0, "def solve_e0e7797b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(x2, frontiers)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, hsplit, vsplit)\n    x8 = x7(I, TWO)\n    x9 = argmin(x8, numcolors)\n    x10 = asindices(x9)\n    x11 = apply(first, x10)\n    x12 = last(x10)\n    x13 = remove(x11, x10)\n    x14 = x12(x13)\n    x15 = toobject(x14, x9)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = x17(x12)\n    x19 = rbind(multiply, x18)\n    x20 = apply(x19, x323)\n    x21 = mapply(x17, x20)\n    x22 = paint(I, x21)\n    O = downscale(x22, TWO)\n    return O"], [1.0, "def solve_4db0a922(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_aedae3c4(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_25a4218a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = objects(x2, T, F, F)\n    x4 = compress(x3)\n    x5 = toindices(x4)\n    x6 = box(x5)\n    x7 = fill(x1, EIGHT, x6)\n    x8 = difference(x5, x4)\n    O = fill(x7, TWO, x8)\n    return O"], [1.0, "def solve_77dc6175(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = index(x2, ORIGIN)\n    x4 = replace(I, ZERO, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = apply(ulcorner, x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = paint(x4, x8)\n    return O"], [1.0, "def solve_51cabb50(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 = compose(x26, x27)\n    x29 = fork(equality, identity, x28)\n    x30 = sfilter(x25, x29)\n    x31 = apply(x24, x30)\n    x32 = sfilter(x25, x31)\n    x33 = merge(x32)\n    x34 = fill(x14, x13, x33)\n    x35 = difference(x34, x32)\n    O = fill(x35, x10, x35)\n    return O"], [1.0, "def solve_09e47d1f(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, frontiers)\n    x3 = mfilter(x2, hline)\n    x4 = mfilter(x2, vline)\n    x5 = x4(I)\n    x6 = x4(I)\n    x7 = color(x3)\n    x8 = palette(x5)\n    x9 = remove(x7, x8)\n    x10 = lbind(shift, x5)\n    x11 = mapply(x10, x9)\n    x12 = palette(x6)\n    x13 = remove(x7, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(merge, x18)\n    x20 = size(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = apply(toivec, x21)\n    x23 = mpapply(shift, x19, x22)\n    x24 = canvas(ZERO, UNITY)\n    x25 = lbind(shift, x24)\n    x26 = matcher(x25, FOUR)\n    x27 = mfilter(x23, x26)\n    O = paint(x17, x27)\n    return O"], [1.0, "def solve_f05195db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(THREE, x2)\n    x4 = rbind(shift, x3)\n    x5 = compose(x4, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, x5)\n    x8 = fork(mapply, x7, x5)\n    O = apply(x8, x1)\n    return O"], [1.0, "def solve_35d72955(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(d23, x3)\n    x5 = fill(I, FOUR, x4)\n    x6 = compose(last, first)\n    x7 = power(last, TWO)\n    x8 = fork(equality, x6, x7)\n    x9 = sfilter(x4, x8)\n    O = fill(x5, FOUR, x9)\n    return O"], [1.0, "def solve_12cda30b(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x5 = positive(x4)\n    x6 = branch(x5, vsplit, hsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = equality(x8, x9)\n    x11 = branch(x10, vmirror, hmirror)\n    x12 = x11(x8)\n    x13 = x11(x9)\n    x14 = partition(x12)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x16)\n    x18 = fafffa47(x13)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = paint(x7, x20)\n    x22 = x11(x21)\n    x23 = replace(x22, ZERO, x17)\n    x24 = replace(x23, x18, x20)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    O = paint(x12, x34)\n    return O"], [1.0, "def solve_a5e9d17d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_5d21886c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = mostcolor(I)\n    return O"], [1.0, "def solve_5278c22e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_5d65c7ec(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x12)\n    O = paint(x4, x3)\n    return O"], [1.0, "def solve_222fc3f0(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = chain(x4, first, last)\n    x6 = compose(x5, x3)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_af481828(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(camirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2e54c034(I):\n    x1 = frontiers(I)\n    x2 = matcher(size, ZERO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, x4, normalize)\n    x6 = mapply(x5, x1)\n    x7 = fill(I, EIGHT, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, x7)\n    return O"], [1.0, "def solve_bdf1df30(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, leastcolor)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x4, x11)\n    x13 = lbind(colorcount, x3)\n    x14 = argmin(x12, x13)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x3, x15)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, x3)\n    x19 = matcher(first, x15)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = lbind(recolor, x17)\n    x23 = chain(x22, ulcorner, x20)\n    x24 = chain(x21, x23, x20)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(recolor, identity, x25)\n    x27 = mapply(x26, x12)\n    O = paint(x3, x27)\n    return O"], [1.0, "def solve_2ae0ddbf(I):\n    x1 = ofcolor(I, ONE)\n    x2 = rbind(difference, x1)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = compose(50,    4)\n    x6 = objects(I, T, F, T)\n    x7 = sfilter(x6, x5)\n    x8 = totuple(x7)\n    x9 = apply(color, x8)\n    x10 = apply(center, x8)\n    x11 = pair(x9, x10)\n    x12 = sfilter(x11, x5)\n    x13 = compose(leftmost, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = difference(x2, x12)\n    x16 = extract(x15, x14)\n    x17 = ulcorner(x16)\n    x18 = subgrid(x16, I)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x18, x20)\n    x22 = replace(x2, ONE, ZERO)\n    x23 = sfilter(x21, x22)\n    x24 = correctmax(x23, x7)\n    x25 = dmirror(x24)\n    x26 = replace(x21, ONE, ZERO)\n    x27 = lbind(recolor, DOWN)\n    x28 = chain(x27, color, x8)\n    x29 = fork(combine, x28, x24)\n    x30 = chain(x29, x25, x28)\n    x31 = merge(x26)\n    x32 = cover(x11, x31)\n    x33 = paint(x32, x22)\n    O = x30(x33)\n    return O"], [1.0, "def solve_18e89320(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30,52378, x31)\n    x33 = x21(x32)\n    x34 = shift(x33, x33)\n    O = fill(x10, x6, x34)\n    return O"], [1.0, "def solve_b4992ae7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_34783792(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_7f34fba6(I):\n    x1 = lbind(toobject, I)\n    x2 = compose(increment, double)\n    x3 = chain(toivec, x1, x2)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(decrement, double)\n    x6 = chain(tojvec, x5, x4)\n    x7 = fork(shift, identity, x6)\n    x8 = compose(hmirror, x7)\n    x9 = mapply(x8, I)\n    x10 = shift(x9, UP)\n    x11 = apply(x9, x10)\n    x12 = size(x11)\n    x13 = positive(x12)\n    x14 = branch(x13, x7, x6)\n    x15 = x14(I)\n    x16 = subgrid(x15, x15)\n    O = partition(x16)\n    return O"], [1.0, "def solve_cc0c100c(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a419a2e9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_5af7008f(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [1.0, "def solve_6e6a340f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = fork(both, x1, x6)\n    x8 = mfilter(x5, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_f636b2e5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_48659c9a(I):\n    UNITY = frontiers(I)\n    x1 = sfilter(x4, hline)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x74 = branch(x3, dmirror, identity)\n    x5 = x7(I)\n    x6 = frontiers(I)\n    x7 = x6(I)\n    x8 = mostcolor(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = argmin(x6, x11)\n    O = x12(I)\n    return O"], [1.0, "def solve_26d2a3d0(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = ofcolor(I, ZERO)\n    x6 = switch(x4, EIGHT, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = hconcat(x7, x7)\n    O = vconcat(x8, x8)\n    return O"], [1.0, "def solve_1a6f0a43(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dbffac02(I):\n    x1 = frontiers(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = sfilter(x1, x6)\n    x8 = merge(x7)\n    x9 = color(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = argmin(x13, numcolors)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x9, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x24)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x24)\n    O = paint(I, x27)\n    return O"], [1.0, "def solve_8ba66fe9(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2a867826(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, x4, x9)\n    x11 = paint(x10, x8)\n    x12 = rbind(hmirror, x8)\n    x13 = rbind(vmatching, x8)\n    x14 = fork(either, x12, x13)\n    x15 = compose(x14, initset)\n    x16 = matcher(x15, x4)\n    x17 = sfilter(x11, x16)\n    x18 = merge(x17)\n    x19 = fill(x11, TWO, x18)\n    x20 = size(x11)\n    x21 = invert(x20)\n    x22 = tojvec(x21)\n    x23 = shift(x11, x22)\n    O = fill(x19, TWO, x23)\n    return O"], [1.0, "def solve_ff1ed23f(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x50)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [1.0, "def solve_44742002(I):\n    x1 = argmin(I, size)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = recolor(ZERO, x3)\n    x5 = dmirror(x2)\n    x6 = occurrences(x5, x4)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    O = fill(x2, ZERO, x8)\n    return O"], [1.0, "def solve_f59928f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8dd1db36(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_34bf83c9(I):\n    x1 = frontiers(I)\n    x2 = Tfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_60b5c352(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_4ab8494a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_f04a5ca3(I):\n    x1 = canvas(Faff, TWO_BY_TWO)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = mapply(x2, x1)\n    O = fill(x1, ZERO, x3)\n    return O"], [1.0, "def solve_ced0df89(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(toobject, I)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x6, initset)\n    x8 = chain(x5, x7, dneighbors)\n    x9 = matcher(x8, UNITY)\n    x10 = compose(flip, x9)\n    x11 = fork(both, x3, x10)\n    x12 = sfilter(x4, x11)\n    x13 = objects(I, T, F, T)\n    x14 = fork(connect, ulcorner, lrcorner)\n    x15 = fork(connect, llcorner, urcorner)\n    x16 = fork(combine, x14, x15)\n    x17 = mapply(x16, x12)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_db027320(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(maximum, x2)\n    x4 = lbind(apply, x3)\n    x5 = chain(x1, x4, decrement)\n    x6 = fork(toivec, identity, x5)\n    x7 = compose(x4, x6)\n    x8 = fork(add, identity, x7)\n    x9 = fork(connect, identity, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(225, x10, x5)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(subtract, identity, x12)\n    x14 = fork(shift, identity, x13)\n    x15 = mapply(x14, x10)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_0e79fde3(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = hconcat(x3, x1)\n    return O"], [1.0, "def solve_bac87b3d(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [1.0, "def solve_86eccaae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(manhattan, x4)\n    x6 = compose(even, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, size)\n    x9 = canvas(x8, UNITY)\n    x10 = fill(x9, TWO, x7)\n    x11 = fill(x10, ONE, x8)\n    x12 = fill(x11, NEG_ONE, x8)\n    x13 = fill(x12, FOUR, x7)\n    x14 = fill(x13, ONE, x8)\n    x15 = fill(x14, THREE, x9)\n    O = fill(x15, TWO, x13)\n    return O"], [1.0, "def solve_1499c086(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = frontiers(I)\n    x6 = color(x5)\n    x7 = x2(I)\n    x8 = paint(x7, x4)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = astuple(x9, x10)\n    x12 = add(x11, NEG_UNITY)\n    x13 = uppermost(x7)\n    x14 = rightmost(x7)\n    x15 = astuple(x13, x14)\n    x16 = add(x15, UP_RIGHT)\n    x17 = lowermost(x7)\n    x18 = leftmost(x7)\n    x19 = astuple(x17, x18)\n    x20 = add(x19, DOWN_LEFT)\n    x21 = lowermost(x7)\n    x22 = llcorner(x21)\n    x23 = urcorner(x21)\n    x24 = shoot(x11, UNITY)\n    x25 = shoot(x11, DOWN_LEFT)\n    x26 = shoot(x11, UP_RIGHT)\n    x27 = shoot(x11, NEG_UNITY)\n    x28 = combine(x24, x25)\n    x29 = combine(x26, x27)\n    x30 = combine(x28, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_414dfc9f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_649c03a4(I):\n    x1 = remove(I, x2)\n    x2 = lbind(ofcolor, I)\n    x3 = compose(x2, frontiers)\n    x4 = fork(recolor, x3, leastcolor)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_0b97eaa5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c3bbcb8(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = Fgpartition(I)\n    x12 = merge(x11)\n    x13 = rbind(colorcount, x12)\n    x14 = matcher(x13, x10)\n    x15 = fork(both, x14, x9)\n    x16 = sfilter(x8, x15)\n    x17 = compose(x12, normalize)\n    x18 = apply(x17, x16)\n    x19 = merge(x8)\n    x20 = cover(I, x19)\n    x21 = paint(x20, x18)\n    x22 = asindices(x21)\n    x23 = x17(x22)\n    x24 = shift(x23, x24)\n    x25 = fork(mapply, x17, x24)\n    x26 = mapply(x25, x24)\n    O = fill(x21, x19, x26)\n    return O"], [1.0, "def solve_77437bd6(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_7e48552b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e8cdfe05(I):\n    x1 = astuple(I, I)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [1.0, "def solve_110d246c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_efbfa85d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(first, x3)\n    x5 = lbind(intersection, x2)\n    x6 = chain(positive, size, x5)\n    x7 = rbind(matcher, ZERO)\n    x8 = compose(x7, x4)\n    x9 = chain(flip, x6, x8)\n    x10 = sfilter(x2, x9)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_16e409c7(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_4207d701(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_a2052ebf(I):\n    O =88888888\n    return O"], [1.0, "def solve_203f7775(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(interval, ZERO)\n    x5 = rbind(x4, ONE)\n    x6 = compose(x5, x3)\n    x7 = fork(pair, x6, identity)\n    x8 = compose(x1, x7)\n    x9 = asindices(I)\n    x10 = x8(x9)\n    x11 = leastcolor(I)\n    x12 = ofcolor(I, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x10, x14)\n    x16 = difference(x10, x15)\n    x17 = fill(I, ZERO, x16)\n    x18 = intersection(x15, x16)\n    x19 = cover(x17, x18)\n    x20 = intersection(x15, x16)\n    O = fill(x19, x11, x20)\n    return O"], [1.0, "def solve_4376de90(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = astuple(x4, x5)\n    x9 = add(x8, UNITY)\n    x10 = initset(x9)\n    x11 =255256225\n    x102011148\n    2216808224\n    O = fill(I, x7, x10)\n    return O"], [1.0, "def solve_d74cad8d(I):\n    x1 = astuple(ONE, THREE)\n    x2 = size(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x7, x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = upscale(x6, delta)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = intersection(x7, x9)\n    O = fill(x9, FOUR, x10)\n    return O"], [1.0, "def solve_b12e5c03(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = upscale(x3, THREE)\n    x5 = ONE(x4)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = rbind(toobject, I)\n    x8 = compose(x7, frontiers)\n    x9 = sfilter(x6, x8)\n    x10 = pair(x9, x4)\n    x11 = apply(x11, x10)\n    x12 = mapply(x8, x11)\n    x13 = argmin(x5, x12)\n    x14 = add(x13, x11)\n    x15 = canvas(ZERO, x14)\n    x16 = asobject(x12)\n    x17 = shift(x16, x14)\n    x18 = paint(x15, x17)\n    O = rot180(x18)\n    return O"], [1.0, "def solve_7d1b62f9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x11, x14)\n    x16 = interval(ONE, SEVEN, ONE)\n    x17 = lbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_dd436da0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = product(x11, x11)\n    x13 = compose(last, first)\n    x14 = compose(last, last)\n    x15 = fork(astuple, x13, x14)\n    x16 = fork(shoot, identity, x15)\n    x17 = mapply(x16, x12)\n    x18 = combine(x17, x13)\n    x19 = fill(I, ZERO, x18)\n    O = paint(x19, x2)\n    return O"], [1.0, "def solve_0ff1a65a(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_c8537b77(I):\n    O = astuple(SIX, SIX)\n    return O"], [1.0, "def solve_fae1fa70(I):\n    x1 = halve(TEN)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_20acbac9(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(ff805, x5)\n    x7 = lbind( chain, backdrop)\n    x8 = lbind(x7, dneighbors)\n    x9 = chain(x5, x8, toindices)\n    x10 = apply(x9, x5)\n    x11 = fork(subtract, maximum, minimum)\n    x12 = x11(x10)\n    x13 = toivec(x12)\n    x14 = tojvec(x12)\n    x15 = connect(x13, x14)\n    x16 = astuple(x12, x12)\n    x17 = connect(x15, x16)\n    x18 = combine(x15, x17)\n    x19 = fill(I, ONE, x18)\n    x20 = leastcolor(x19)\n    O = ofcolor(x19, x20)\n    return O"], [1.0, "def solve_3ac16334(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0bbc9be7(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = greater(x5, TWO)\n    x7 = branch(x6, height, width)\n    x8 = x7(x1)\n    x9 = x7(x2)\n    x10 = branch(x6, vsplit, hsplit)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_256c9445(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d4788e87(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = increment(x2)\n    x4 = bottomhalf(I)\n    x5 = lefthalf(x3)\n    x6 = righthalf(x3)\n    x7 = tophalf(x6)\n    x8 = increment(x7)\n    x9 = bottomhalf(x7)\n    x10 = decrement(x3)\n    x11 = height(x5)\n    x12 = increase(x5, x11)\n    x13 = tojvec(x10)\n    x14 = decrement(x13)\n    x15 = height(x6)\n    x16 = add(x14, x15)\n    x17 = tojvec(x12)\n    x18 = decrement(x17)\n    x19 = width(x5)\n    x20 = decrement(x19)\n    x21 = tojvec(x12)\n    x22 = decrement(x21)\n    x23 = astuple(x18, x20)\n    x24 = astuple(x24, x22)\n    x25 = combine(x23, x24)\n    x26 = intersection(x23, x25)\n    x27 = fill(I, FOUR, x25)\n    O = fill(x27, THREE, x26)\n    return O"], [1.0, "def solve_f4a2000c(I):\n    x1 = height(I)\n    x2 = ofcolor(I, ZERO)\n    x3 =asindices(I)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, ZERO, x9)\n    x11 = asobject(x10)\n    O = paint(x11, x9)\n    return O"], [1.0, "def solve_83290309(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_2093494c(I):\n    x1 = lbind(contained, ORIGIN)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = lbind(contained, TWO)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x4)\n    x9 = fork(both, x4, x6)\n    x10 = fork(both, x7, x8)\n    x11 = fork(both, x9, x10)\n    x12 = compose(flip, x4)\n    x13 = fork(both, x12, x11)\n    x14 = fork(both, x12, x12)\n    x15 = compose(flip, x4)\n    x16 = fork(both, x14, x15)\n    x17 = fork(both, x12, x16)\n    x18 = fork(either, x17, x14)\n    x19 = fork(either, x12, x16)\n    x20 = fork(either, x13, x16)\n    x21 = fork(add, ulcorner, x20)\n    x22 = fork(add, llcorner, x21)\n    x23 = fork(connect, x20, x22)\n    x24 = decrement(x70)\n    x25 = lbind(multiply, x24)\n    x26 = compose(x25, x23)\n    x27 = fork(add, lrcorner, x26)\n    x28 = fork(connect, x27, x24)\n    x29 = fork(upscale, x28, x14)\n    x30 = fork(connect, x27, x29)\n    x31 = fork(54400, x23, x30)\n    x32 = fork(combine, x29, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x1)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_6e48fd31(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = asobject(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = normalize(x6)\n    x8 = width(I)\n    x9 = subtract(x8, TWO)\n    x10 = multiply(x9, THREE)\n    x11 = increment(x10)\n    x12 = width(I)\n    x13 = subtract(x12, x6)\n    x14 = multiply(x13, x4)\n    x15 = shift(x7, x14)\n    x16 = paint(I, x15)\n    x17 = repeat(x16, ONE)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_f57dc630(I):\n    x1 = palette(I)\n    x2 = contained(I, x1)\n    x3 = contained(x2, x1)\n    x4 = branch(x3, UNITY, SEVEN)\n    x5 = branch(x3, vmirror, hmirror)\n    x6 = x4(x5)\n    x7 = width(I)\n    x8 = branch(x3, UNITY, NEG_ONE)\n    x9 = multiply(x7, x8)\n    x10 = shift(x6, x9)\n    x11 = canvas(ZERO, x9)\n    x12 = paint(x11, x10)\n    O = x4(x12)\n    return O"], [1.0, "def solve_fdc75963(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = compose(maximum, shape)\n    x11 = order(x9, x10)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x11, x15)\n    x17 = multiply(TEN, TEN)\n    x18 = canvas(x4, x17)\n    x19 = double(x18)\n    x20 = asobject(x19)\n    x21 = shift(x20, UNITY)\n    O = paint(x17, x21)\n    return O"], [1.0, "def solve_6166a010(I):\n    x1 = lbind(toindices, I)\n    x2 = lbind(toobject, I)\n    x3 = compose(first, x1)\n    x4 = chain( mostcolor, x2, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = compose(last, x1)\n    x7 = chain(decrement, x5, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = compose(first, x8)\n    x10 = fork(remove, x6, x9)\n    x11 = compose(last, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, x11, x13)\n    x15 = fork(combine, x11, x14)\n    x16 = fork(intersection, x15, x8)\n    x17 = mapply(x16, x1)\n    O = fill(I, ZERO, x17)\n    return O"], [1.0, "def solve_27bc8324(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, center)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = compose(x6, palette)\n    x8 = argmax(x5, x7)\n    x9 = remove(x8, x5)\n    x10 = merge(x9)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, color)\n    x13 = sfilter(x1, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, normalize)\n    x19 = lbind(apply, x18)\n    x20 = chain(x179, x18, x19)\n    x21 = rbind(remove, x20)\n    x22 = compose(x21, normalize)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(compose, initset)\n    x25 = lbind(rbind, manhattan)\n    x26 = chain(x24, x25, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x75, x27)\n    x29 = compose(x25, x28)\n    x30 = fork(mapply, x23, x29)\n    x31 = fork(recolor, x30, x29)\n    x32 = mapply(x31, x13)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_19daf05a(I):\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = increment(x33)\n    x35 = astuple(x33, x34)\n    x36 = shift(x22, x35)\n    x37 = shift(x25, x36)\n    x38 = paint(I, x37)\n    x39 = combine(x28, x38)\n    x40 = ofcolor(x39, ZERO)\n    O = mapply(x39, x40)\n    return O"], [1.0, "def solve_abb6ea0d(I):\n    x1 = initset(ORIGIN)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = uppermost(x3)\n    x7 = lbind(subtract, x6)\n    x8 = chain(size, x7, double)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    O = underfill(x5, ONE, x10)\n    return O"], [1.0, "def solve_5b10c675(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d1b2c416(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_967e69fe(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_d792c8d1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_854608fe(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEGim, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [1.0, "def solve_82f6621a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_577be18e(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, decrement)\n    x3 = mapply(x2, I)\n    O = objects(I, T, F, T)\n    return O"], [1.0, "def solve_b3a6eefe(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(TWO, LEFT)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, ONE)\n    x10 = astuple(THREE, TWO)\n    x11 = connect(x9, x10)\n    x12 = combine(x8, x11)\n    x13 = combine(x5, x12)\n    x14 = recolor(THREE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_587c08c7(I):\n    x1 = palette(I)\n    x2 = SEVEN(I)\n    x3 = EIGHT(x2)\n    x4 = vmirror(I)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = lbind(colorfilter, x5)\n    x8 = compose(x7, color)\n    x9 = sfilter(x1, x8)\n    x10 = chain(invert, size, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = apply(x11, x9)\n    x13 = rbind(argmax, x12)\n    x14 = apply(x13, x12)\n    x15 = merge(x14)\n    x16 = cover(I, x15)\n    x17 = mapply(x11, x13)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_722fe31d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0115b112(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x6)\n    x8 = crop(I, x7, x4)\n    x9 = asobject(x8)\n    x10 = hperiod(x9)\n    x11 = vperiod(x9)\n    x12 = index(I, x11)\n    x13 = asobject(I)\n    x14 = hperiod(x13)\n    x15 = vperiod(x13)\n    x16 = astuple(x14, x15)\n    x17 = ulcorner(x9)\n    x18 = crop(I, x17, x16)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = asobject(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = hperiod(x23)\n    x25 = vperiod(x24)\n    x26 = astuple(x24, x25)\n    x27 = ulcorner(x9)\n    x28 = crop(I, x27, x26)\n    x29 = vmirror(x28)\n    x30 = asobject(x29)\n    x31 = asobject(x30)\n    x32 = vperiod(x31)\n    x33 = hperiod(x31)\n    x34 = astuple(x33, x32)\n    x35 = lbind(multiply, x34)\n    x36 = neighbors(ORIGIN)\n    x37 = mapply(neighbors, x36)\n    x38 = apply(x35, x37)\n    x39 = lbind(shift, x33)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_d1823fb9(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_def17ece(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_adb1e25e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4d62b463(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x10 = x9(x6)\n    x11 = paint(x3, x10)\n    x12 = paint(x11, x11)\n    O = paint(x12, x10)\n    return O"], [1.0, "def solve_116dd1c0(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1365ca38(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = argmax(x5, size)\n    O = subgrid(x6, I)\n    return O"], [1.0, "def solve_63955891(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    O = asobject(x1)\n    return O"], [1.0, "def solve_1352c8fa(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_5c6e012b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4e0ca6f7(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8c91ed98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = dmirror(I)\n    x5 = x4(I)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [1.0, "def solve_d754ecc6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, UNITY)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = toobject(x6, I)\n    x8 = normalize(x7)\n    x9 = lbind(shift, x8)\n    x10 = compose(x9, shape)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, x10)\n    x14 = fork(equality, identity, x13)\n    x15 = mfilter(x6, x14)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_06640b30(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_461ed799(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(50, x25)\n    x27 = compose(first, x25)\n    x28 = fork(recolor, x26, x27)\n    x29 = mapply(x28, x3)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_17a52f40(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = order(x1, x2)\n    x4 = apply(last, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, first)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [1.0, "def solve_f9fa61d0(I):\n    x1 = hsplit(I, THREE)\n    x2 = insert(first, x1)\n    x3 = order(x2, identity)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = ofcolor(x4, NINE)\n    x7 = ofcolor(x5, ONE)\n    x8 = combine(x6, x7)\n    x9 = fill(x4, THREE, x8)\n    x10 = ofcolor(x9, NINE)\n    x11 = fill(x9, ONE, x10)\n    O = fill(x11,3333, x8)\n    return O"], [1.0, "def solve_e8fafdea(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_7f76e0d7(I):\n    x1 =884286214\n    x2 = dmirror(I)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, ZERO)\n    x16 = rbind(contained, x15)\n    x17 = apply(x16, x14)\n    x18 = sfilter(x17, vline)\n    x19 = difference(x17, x18)\n    O = apply(size, x19)\n    return O"], [1.0, "def solve_d6d73890(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_b1f393f2(I):\n    x1 = astuple(SIX, THREE)\n    x2 = astuple(dmirror, I)\n    x3 = astuple(TWO, ONE)\n    x4 = combine(x1, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x6)\n    x8 = chain(lowermost, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x4, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_157c2546(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x5, x6)\n    x8 = argmin(x5, x7)\n    x9 = x6(x8)\n    x10 = string(x8, x9)\n    x11 = cover(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = colorfilter(x12, x4)\n    x14 = difference(x12, x13)\n    x15 = divide(x10, x14)\n    x16 = apply(uppermost, x15)\n    x17 = lowermost(x15)\n    x18 = astuple(x17, x15)\n    x19 = add(x18, invert)\n    x20 = lowermost(x15)\n    x21 = rightmost(x15)\n    x22 = astuple(x20, x21)\n    x23 = add(x22, astuple)\n    x24 = rbind(subtract, x23)\n    x25 = rbind(shoot, x19)\n    x26 = compose(x24, x25)\n    x27 = fork(combine, x26, x24)\n    x28 = mapply(x27, x15)\n    O = fill(x11, ZERO, x28)\n    return O"], [1.0, "def solve_cc2d74a7(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_27377936(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =elta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = corners(x6)\n    x8 = insert(ZERO_BY_TWO, x7)\n    x9 = insert(RIGHT, x8)\n    x10 = insert(TWO_BY_TWO, x9)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = interval(TWO, x12, ONE)\n    x16 = pair(x14, x15)\n    x17 = mapply(x13, x16)\n    O = paint(x4, x17)\n    return O"], [1.0, "def solve_ce0d4df4(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = toindices(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = fork(multiply, last, identity)\n    x8 = apply(x7, x6)\n    x9 = partition(I)\n    x10 = sfilter(x9, x6)\n    x11 = mapply(toindices, x10)\n    x12 = corners(x11)\n    x13 = combine(x12, x11)\n    x14 = difference(x13, x12)\n    x15 = mapply(x8, x14)\n    x16 = combine(x15, x11)\n    x17 = fill(I, x2, x16)\n    x18 = hmirror(x17)\n    x19 = mostcolor(I)\n    O = fill(x17, x19, x18)\n    return O"], [1.0, "def solve_8d9cd7de(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = combine(x5, x4)\n    x7 = power(outbox, TWO)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, initset)\n    x10 = power(x9, FOUR)\n    x11 = fork(connect, x7, x10)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x2)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_560918e5(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = I(x3)\n    x5 = dmirror(x4)\n    x6 = papply(equality, x4, x5)\n    x7 = branch(x6, ONE, SEVEN)\n    O = canvas(x7, x7)\n    return O"], [1.0, "def solve_51822bb6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, asobject)\n    x4 = lbind(apply, numcolors)\n    x5 = chain(x4, asobject, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(size, x6)\n    x8 = chain(increment, x5, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, I)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_22c390eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_e31e1135(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(inter000, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_56c7c989(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_6b2426c4(I):\n    x1 = astuple(THREE, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_cfe3a8fe(I):\n    x1 = paint(I, x1)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = canvas(x3, x5)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x6, x8)\n    return O"], [1.0, "def solve_13515f6e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = insert(x8, x11)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x4)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(x14)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, TWO)\n    x21 = merge(x20)\n    x22 = decrement(x21)\n    x23 = input(x22, x21)\n    x24 = tophalf(x23)\n    x25 = shift(x21, x24)\n    x26 = lefthalf(x25)\n    x27 = tophalf(x26)\n    x28 = vmirror(x27)\n    x29 = hmirror(x28)\n    x30 = insert(x26, x21)\n    x31 = insert(x29, x30)\n    x32 = combine(x30, x31)\n    x33 = paint(x16, x32)\n    x34 = hmirror(x33)\n    O = vmirror(x34)\n    return O"], [1.0, "def solve_9278ba19(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.0, "def solve_36c0b8e0(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a547d3bd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, toindices)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, x3)\n    x8 = fork(insert, vmirror, identity)\n    x9 = lbind(insert, x7)\n    x10 = compose(x9, x8)\n    x11 = power(x10, TWO)\n    x12 = x11(x9)\n    x13 = lbind(remove, x6)\n    x14 = compose(x13, x12)\n    x15 = fork(compose, x11, x14)\n    x16 = lbind(lbind, shift)\n    x17 = lbind(occurrences, x6)\n    x18 = compose(x16, x17)\n    x19 = fork(mapply, x18, x16)\n    x20 = rapply(x19, x4)\n    x21 = mapply(x16, x20)\n    O = paint(x3, x21)\n    return O"], [1.1, "def solve_66cd0eb0(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7a9c61d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(FOUR, FOUR)\n    x2 = portrait(I)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = asindices(x4)\n    x6 = ofcolor(x4, ZERO)\n    x7 = difference(x5, x6)\n    x8 = rbind(toobject, x4)\n    x9 = compose(x8, delta)\n    x10 = interval(x2, FIVE, ZERO)\n    x11 = rbind(multiply, width)\n    x12 = compose(x11, tojvec)\n    x13 = chain(x10, x12, initset)\n    x14 = lbind(fork, greater)\n    x15 = lbind(chain, flip)\n    x16 = lbind(x15, x13)\n    x17 = lbind(x16, astuple)\n    x18 = compose(x16, x17)\n    x19 = compose(x13, x18)\n    x20 = extract(x9, x19)\n    x21 = center(x20)\n    x22 = initset(x21)\n    x23 = center(x22)\n    x24 = subgrid(x226, x4)\n    x25 = fork(equality, identity, rot90)\n    x26 = compose(x25, x20)\n    x27 = fork(equality, identity, rot270)\n    x28 = compose(x27, x21)\n    x29 = fork(equality, identity, rot90)\n    x30 = compose(x29, x21)\n    x31 = fork(equality, identity, rot270)\n    x32 = compose(x31, x21)\n    x33 = fork(both, x26, x25)\n    x34 = fork(both, x24, x28)\n    x35 = fork(both, x33, x34)\n    x36 = astuple(x36, x35)\n    x37 = extract(x32, x36)\n    x38 = center(x37)\n    x39 = initset(x38)"], [1.1, "def solve_6798fd94(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 =8000(dae9001fccofdne22(I)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x6, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x4)\n    x16 = backdrop(x15)\n    x17 = toobject(x16, I)\n    x18 = identity(x17)\n    x19 = chain(x14, x10, x18)\n    x20 = rbind(contained, x11)\n    x21 = compose(x20, color)\n    x22 = sfilter(x15, x21)\n    x23 = size(x22)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, identity)\n    x26 = canvas(x25, UNITY)\n    x27 = asindices(x26)\n    x28 = center(x27)\n    x29 = dmirror(I)\n    x30 = initset(x22)\n    x31 = insert(x28, x30)\n    x32 = insert(x29, x31)\n    x33 = dmirror(x32)\n    x34 = asindices(x33)\n    x35 = center(x34)\n    x36 = initset(x35)\n    x37 = insert(x16, x36)\n    x38 = insert(x33, x37)\n    x39 = fill(x26, x4, x38)\n    x40 = fill(x39, x33, x34)\n    x41 = fill"], [1.1, "def solve_9dd5e7c1(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_2815a7f0(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, insert)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_ba15fdbb(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7666ef79(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = lowermost(x7)\n    x9 = compose(minimum, shape)\n    x10 = lowermost(x7)\n    x11 =1900(x9, x10)\n    x12 = power(x11, TWO)\n    x13 = uppermost(x7)\n    x14 =970(x12, x13)\n    x15 = astuple(x14, x414)\n    x16 = ulcorner(x7)\n    x17 = palette(x15)\n    x18 = palette(x10)\n    x19 = argmax(x17, x18)\n    x20 = remove(x19, x17)\n    x21 = other(x20, x19)\n    x22 = rbind(colorcount, x21)\n    x23 = colorcount(I, x21)\n    x24 = rbind(toobject, I)\n    x25 = compose(x22, delta)\n    x26 = rbind(colorcount, x21)\n    x27 = valmax(x21, x26)\n    x28 = matcher(x25, x27)\n    x29 = sfilter(x24, x28)\n    x30 = difference(x19, x29)\n    x31 = apply(e961498330, x29)\n    x32 = rbind(colorcount, x21)\n    x33 = rbind(toobject, I)\n    x34 = chain(x32, x33, backdrop)\n    x35 = apply(x34, x31)\n    x36 = sfilter(x3, x35)\n    x37 = apply(x22, x36)\n    x38 = size(x37)\n    x39 = subtract(x38, x37)\n    x40 = frontiers("], [1.1, "def solve_53d40512(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = matcher(first, FOUR)\n    x38 = sfilter(x28, x37)\n    x39 = center(x38)\n    x40 = matcher(first, NEG_ONE)\n    x41 = sfilter("], [1.1, "def solve_201f73f0(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8ee1277f(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_f3727679(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_e6afb92a(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_770b125f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_b16928d7(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_72918c35(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f824d0d5(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0cffd2b2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_26948c91(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f6db8f2f(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_08d2c6f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_b05c68ca(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_e77d2eca(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(56129min, x27)\n    x39 = chain(size, x38, T)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_a80e03a5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = color(x23)\n    x25 = palette(x22)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x6)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = ofcolor(x22, x24)\n    x31 = ofcolor(x22, x6)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = lowermost(x30)\n    x35 = dneighbors(ORIGIN)\n    x36 = remove(DOWN, x35)\n    x37 = rbind(mapply, x36)\n    x38 = lbind(chain, x37)\n    "], [1.1, "def solve_a817586e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(I, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(greater, THREE)\n    x5 = chain(x4, size, dedupe)\n    x6 = compose(x5, x3)\n    x7 = fork(both, x7, x6)\n    x8 = sfilter(x1, x6)\n    x9 = difference(x1, x8)\n    x10 = insert(x10, x8)\n    x11 = apply(most, x10)\n    x12 = condition(x11, ZERO)\n    x13 = argmin(x1, size)\n    x14 = remove(x13, x10)\n    x15 = argmin(x14, size)\n    x16 = width(x12)\n    x17 = decrement(x16)\n    x18 = tojvec(x17)\n    x19 = height(x12)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = fork(subtract, x22, increment)\n    x24 = chain(increment, x17, x23)\n    x25 = shoot(x13, x18)\n    x26 = shoot(x15, x20)\n    x27 = combine(x25, x26)\n    x28 = combine(x71, x24)\n    x29 = combine(x27, x28)\n    x30 = tojvec(x29)\n    x31 = asobject(x19)\n    x32 = mapply(x23, x61)\n    x33 = asobject(x15)\n    x34 = toobject(x33, I)\n    x35 = asobject(x34)\n    x36 = height(x32)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = invert(x38)\n    x40 = shift(x31, x39)\n    x41 = fill"], [1.1, "def solve_4184d06b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =644(x2)\n    x4 = shape(I)\n    x5 = canvas(center, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(equality, x12, toindices)\n    x14 = chain(x9, x13, ulcorner)\n    x15 = fork(multiply, x14, toindices)\n    x16 = chain(x13, x15, rbind(subtract, FOUR)\n    x17 = fork(divide, x15, x16)\n    x18 = fork(equality, identity, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = mostcolor(I)\n    x21 = matcher(x21, x20)\n    x22 = fork(both, x19, x21)\n    x23 = sfilter(x7, x22)\n    x24 = sfilter(x7, x18)\n    x25 = argmax(x23, minimum)\n    x26 = argmax(x24, width)\n    x27 = ulcorner(x25)\n    x28 = llcorner(x27)\n    x29 = add(x27, x28)\n    x30 = shift(x25, x29)\n    x31 = color(x30)\n    x32 = ofcolor(x23, x31)\n    x33 = argmax(x32, x23)\n    x34 = vmirror(x33)\n    x35 = normalize(x34)\n    x36 = color(x23)\n    x37 = increment(x6)\n    x38 = add(x37, x31)\n    x39 = shift(x35"], [1.1, "def solve_39655996(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = rot270(I)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = lbind(rbind, subtract)\n    x5 = lbind(x3, x4)\n    x6 = lbind(canvas, ZERO)\n    x7 = compose(x5, x6)\n    x8 = fork(paint, x7, last)\n    x9 = compose(x4, x8)\n    x10 = lbind(sfilter, x1)\n    x11 = rbind(compose, last)\n    x12 = lbind(rbind, sfilter)\n    x13 = chain(x11, x10, x12)\n    x14 = lbind(apply, first)\n    x15 = chain(lowermost, x13, x14)\n    x16 = lbind(rightbind, astuple)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x14)\n    x19 = compose(x4, x18)\n    x20 = compose(x1, cmirror)\n    x21 = fork(remove, x20, x14)\n    x22 = compose(last, x21)\n    x23 = fork(last, first, x22)\n    x24 = compose(lowermost, x23)\n    x25 = compose(rightmost, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x27, x23)\n    x29 = fork(argmin, x26, x28)\n    x30 = fork(astuple, x29, identity)\n    x31 = remove(x30, x1)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(multiply, x34, x309)\n    x36 = compose(x35, x29)\n    x37 = fork(apply, x36, x31"], [1.1, "def solve_4d53bcb2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_d8b93e60(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_572bf88e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_0305bd26(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(canvas, ZERO)\n    x5 = compose(x4, x3)\n    x6 = fork(paint, x5, x3)\n    x7 = compose(rot90, x6)\n    x8 = power(x7, FOUR)\n    x9 = rot180(I)\n    x10 = dedupe(x9)\n    x11 = rot180(I)\n    x12 = dedupe(x11)\n    x13 = rot180(I)\n    x14 = dedupe(x13)\n    x15 = rot180(I)\n    x16 = dedupe(x15)\n    x17 = size(x10)\n    x18 = size(x12)\n    x19 = positive(x17)\n    x20 = branch(x19, x15, x14)\n    x21 = branch(x19, x16, x20)\n    x22 = compose(x4, x21)\n    x23 = argmax(x23, x22)\n    x24 = apply(x23, x18)\n    x25 = size(x24)\n    x26 = equality(x25, ONE)\n    x27 = branch(x26, x23, x24)\n    x28 = branch(x26, x228, x27)\n    x29 = branch(x26, x23, x24)\n    x30 = branch(x26, x22, x29)\n    x31 = multiply(TEN, TEN)\n    x32 = add(x31, TWO)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = branch(x33, x28, x30)\n    x35 = ZERO(x34)\n    x36 =44(x35)\n    x37 = shift(x36, x31)\n    x38 = paint(I, x37)\n    x39 = rot90(x38)\n    x40 = paint(x39, x37)\n    x41 = rot90(x40"], [1.1, "def solve_4c90c5bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_e8df6493(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_4fb61fc2(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = difference(x1, x9)\n    x11 = rbind(subgrid, I)\n    x12 = apply(x11, x10)\n    x13 = lbind(rbind,colorcount)\n    x14 = argmax(x12, x13)\n    x15 = palette(x14)\n    x16 = remove(x4, x15)\n    x17 = lbind(colorcount, x14)\n    x18 = argmin(x16, x17)\n    x19 = subgrid(x18, x6)\n    x20 = increment(x14)\n    x21 = rbind(greater, x20)\n    x22 = compose(x21, first)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = lbind(rbind, subtract)\n    x26 = lbind(occurrences, x24)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x27, last)\n    x29 = lbind(rbind, adjacent)\n    x30 = fork(extract, first, x28)\n    x31 = compose(x29, x30)\n    x32 = fork( compose, x24, x31)\n    x33 = fork(apply, x38, x32)\n    x34 = rbind(intersection, x33)\n    x35 = compose(size, x34)\n    x36 = argmax(x21, x35)\n    x37 = rbind(shift, x36)\n    x38 =87(x37)\n    x39 = TWO(x38, x34)\n    x"], [1.1, "def solve_8381c246(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_80faa289(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = vmirror(x2)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = chain(position, lefthalf, tophalf)\n    x9 = fgpartition(x4)\n    x10 = merge(x9)\n    x11 = normalize(x10)\n    x12 = lbind(shift, x11)\n    x13 = height(x2)\n    x14 = height(x11)\n    x15 = divide(x13, x14)\n    x16 = width(x2)\n    x17 = width(x11)\n    x18 = divide(x16, x17)\n    x19 = vmirror(x8)\n    x20 = hmirror(x8)\n    x21 = shift(x19, x20)\n    x22 = SEVEN(x21)\n    x23 = argmax(x3, x22)\n    x24 = leastcolor(x23)\n    x25 = matcher(first, x24)\n    x26 = sfilter(x22, x25)\n    x27 = replace(x7, x24, x655)\n    x28 = argmin(x26, identity)\n    x29 = argmax(x28, identity)\n    x30 = ulcorner(x28)\n    x31 = rbind(subtract, x30)\n    x32 = height(x28)\n    x33 = rbind(multiply, x32)\n    x34 = chain(outbox, x31, x33)\n    x35 = width(x29)\n    x36 = divide(x35, x31)\n    x37 = increment(x36)\n    x38 = interval(ONE, x37, ONE)\n    x39 = sfilter(x38, x34)\n    x40 = invert(x39)\n    x41 =71(x40)\n    "], [1.1, "def solve_f2c8140e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = extract(x30, x31)\n    x33 = last(x32)\n    x34 = matcher(first, x11)\n    x35 = sfilter(x34, x24)\n    x36 = center(x35)\n    x37 = vfrontier(x36)\n    x38 = sfilter(x1, x22)\n    x39 = lbind(fork, intersection)\n    x40 = lbind(x39, outbox)\n    x41 = lbind(compose, x38"], [1.1, "def solve_b0a39c2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_fcb49c5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply,numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_afd89778(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(extract, x1)\n    x3 = compose(x2, x1)\n    x4 = rbind(compose, initset)\n    x5 = lbind(rbind, manhattan)\n    x6 = chain(x4, x5, x3)\n    x7 = fork(sfilter, identity, x6)\n    x8 = compose(rot90, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = rot270(I)\n    x11 = fork(shift, identity, x10)\n    x12 = compose(rot90, x11)\n    x13 = fork(shift, identity, x12)\n    x14 = size(I)\n    x15 = maximum(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = product(x16, x16)\n    x18 = rbind(multiply, THREE)\n    x19 = compose(x18, first)\n    x20 = rbind(multiply, TEN)\n    x21 = compose(x20, last)\n    x22 = fork(add, x19, x21)\n    x23 = fork(astuple, x19, x22)\n    x24 = lbind(canvas, NEG_ONE)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(connect, x23, x26)\n    x28 = rbind(contained, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(extract, x27)\n    x31 = compose(x30, x29)\n    x32 = fork(add, last, x31)\n    x33 = fork(astuple, x29, x32)\n    x34 = fork(connect, x33, x33)\n    x35 = rbind(branch, x730)\n    x36 = rbind(x35, x34)\n    x37 = rbind(contained, x51)\n    x38 = compose(x"], [1.1, "def solve_7d729b16(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = backdrop(x6)\n    x8 = shoot(x4, UNITY)\n    x9 = initset(x2)\n    x10 = insert(x7, x9)\n    x11 = mostcolor(I)\n    x12 = mapply(d43, x10)\n    x13 =insert(x7, x10)\n    x14 = width(I)\n    x15 = greater(x14, TWO)\n    x16 = insert(x15, x13)\n    x17 = mapply(dneighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = matcher(first, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x12, x21)\n    x23 = difference(x12, x22)\n    x24 = fill(x5, TWO, x23)\n    x25 =\n    x26 = width(x24)\n    x26 = greater(x25, TWO)\n    x27 = increment(x26)\n    x28 =455(x22)\n    x29 = double(x28)\n    x30 = insert(x27, x29)\n    x31 = branch(x30, x22, x27)\n    x32 = branch(x30, x26, x27)\n    x33 = branch(x30, UP, LEFT)\n    x34 = x31(x33)\n    x35 =box(x34)\n    x36 = intersection(x31, x35)\n    x37 = fill(x24, TWO, x36)\n    x38 = replace(x37, x19, ONE)\n    x39 = lbind(contained, TWO)\n    x40 = compose(x39, palette)\n    x41 = sfilter(x34,"], [1.1, "def solve_4bdbff07(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_76782b65(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_919be0bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_cb02f1a6(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(add, leftmost, uppermost)\n    x7 = compose(toivec, x6)\n    x8 = fork(add, x5, x7)\n    x9 =2000(x5)\n    x10 = dmirror(x8)\n    x11 = numcolors(x10)\n    x12 = decrement(x11)\n    x13 = order(x1, x12)\n    x14 = leftmost(x13)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, FOUR)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(greater, x14)\n    x20 = compose(x19, last)\n    x21 = apply(x20, x3)\n    x22 = combine(x18, x21)\n    x23 = rbind(repeat, x22)\n    x24 = compose(x23, tojvec)\n    x25 = apply(x24, x3)\n    x26 = combine(x17, x25)\n    x27 = hmirror(x26)\n    x28 = lbind(repeat, x27)\n    x29 = apply(x28, x3)\n    x30 = astuple(x11, x13)\n    x31 = x12(x30)\n    x32 = pair(x26, x31)\n    x33 = compose(size, last)\n    x34 = matcher(x33, ZERO)\n    x35 = sfilter(x32, x34)\n    x36 = lbind(compose, x5)\n    x37 = lbind(lbind, greater)\n    x38 = chain(x36,x37, last)\n    x39 = pair(x35, x35)\n    x40 ="], [1.1, "def solve_822eacbc(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, cmirror)\n    x2 = hmirror(I)\n    x3 = index(x2, ORIGIN)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = recolor(x3, x4)\n    x6 = index(x2, x5)\n    x7 = subgrid(x5, x2)\n    x8 = remove(x7, x5)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = colorobject(x11, x10)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = subgrid(x13, x2)\n    x16 = height(x15)\n    x17 = increment(x16)\n    x18 = subgrid(x13, x15)\n    x19 = hmirror(x18)\n    x20 = increment(x19)\n    x21 = replace(x19, x10, x11)\n    x22 =1cf801(x21, x20)\n    x23 = x22(x2)\n    x24 = replace(x23, x10, x4)\n    x25 = ofcolor(x24, x10)\n    x26 = subgrid(x25, x24)\n    x27 = mapply(vfrontier, x25)\n    x28 = mapply(hfrontier, x25)\n    x29 = size(x27)\n    x30 = size(x28)\n    x31 = greater(x29, x30)\n    x32 = branch(x31, x28, x27)\n    x33 = fill(x26, x11, x32)\n    x34 =recolor(x33, x10)\n    x35 = mapply(x29, x28)\n    x36 = paint(x20, x35)\n    x37 =607 solve48678497ad(x33)\n    x38 =7745(x37)\n    x39 = recolor(x10, x38)\n"], [1.1, "def solve_94ac28e3(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(THREE, x4)\n    x6 = asobject(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = power(x9, x10)\n    x12 = astuple(x3, x11)\n    x13 = astuple(x12, first)\n    x14 = astuple(x12, ZERO)\n    x15 = initset(x13)\n    x16 = insert(x14, x15)\n    x17 = backdrop(x16)\n    x18 = lbind(position, x17)\n    x19 = compose(x18, initset)\n    x20 = lowermost(x17)\n    x21 = rightmost(x17)\n    x22 = astuple(x20, x21)\n    x23 = lbind(greater, x22)\n    x24 = compose(x23, x19)\n    x25 = sfilter(x6, x24)\n    x26 = apply(x19, x25)\n    x27 = merge(x26)\n    x28 = apply(x25, x26)\n    x29 = compose(double, halve)\n    x30 = compose(double, last)\n    x31 = fork(equality, x29, x30)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(equality, x32, x33)\n    x35 = fork(either, x31, x34)\n    x36 = sfilter(x26, x35)\n    x37 = apply(x19, x36)\n    x38 = merge(x36)\n    x39 = cover(I, x38)\n    x40 =8925(x39)\n    x41 = mostcolor(x40)\n    O"], [1.1, "def solve_5dc739ab(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_7cbbcb87(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =76fgically(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = hmirror(x3)\n    x5 = vmirror(x3)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = vmirror(x7)\n    x9 = hmirror(x8)\n    x10 = astuple(x4, x5)\n    x11 = astuple(x9, x10)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x13)\n    x15 = asobject(x14)\n    x16 = height(x15)\n    x17 = width(x15)\n    x18 = decrement(x16)\n    x19 = astuple(x18, x17)\n    x20 = connect(ORIGIN, x19)\n    x21 = outbox(x20)\n    x22 = astuple(x17, x15)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = connect(ORIGIN, x24)\n    x26 = double(x17)\n    x27 = connect(ORIGIN, x26)\n    x28 = astuple(x24, x15)\n    x29 = astuple(x27, x15)\n    x30 = connect(x28, x29)\n    x31 = initset(ORIGIN)\n    x32 = box(x31)\n    x33 = difference(x32, x30)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = palette(I)\n    x37 = remove(x35, x36)\n    x38 = other(x37, x35)\n    x39 = ofcolor(x26, x38)\n    x40 = ofcolor(x25, x38)\n    x41 = combine(x39, x40)\n    x42 = intersection(x39,"], [1.1, "def solve_ee5755c3(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(remove, TWO)\n    x5 = chain(x4, x3, x2)\n    x6 = fork( chain,x1, x5)\n    x7 = lbind(canvas, ZERO)\n    x8 = compose(x7, x6)\n    x9 = fork(4612d687, x8, shape)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = lbind(497 either, ONE)\n    x13 = compose(x12, x11)\n    x14 = fork(both, x13, x7)\n    x15 = sfilter(x1, x14)\n    x16 = difference(x1, x15)\n    x17 = merge(x16)\n    x18 =66666666(x17, THREE)\n    x19 = mostcolor(I)\n    x20 = ofcolor(x18, x19)\n    x21 = apply(initset, x20)\n    x22 = rbind(manhattan, x3)\n    x23 = compose(x22, initset)\n    x24 = argmin(x21, x23)\n    x25 = ofcolor(x18, x19)\n    x26 =manhattan(x24, x25)\n    x27 = increment(x26)\n    x28 = injvec(x27)\n    x29 = shift(x25, x28)\n    x30 = toindices, x29)\n    x31 = rbind(shoot, x30)\n    x32 = mapply(x31, x28)\n    x33 = fill(x18, FOUR, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = size(x34)\n    x36 = intersection(x28, x35)\n    x37 = fill(x33, ZERO, x36)\n    x38 = astuple(x19, x23)\n    x39 = canvas(ZERO"], [1.1, "def solve_84918bad(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x10)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x12)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d3dbb4ac(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f1e24483(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b93ddf6b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, ZERO, x1)\n    x3 = normalize(x2)\n    x4 = occurrences(x2, x3)\n    x5 = lbind(shift, x3)\n    x6 = apply(x5, x4)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(FIVE, ONE)\n    x9 = astuple(TWO, SIX)\n    x10 = initset(x7)\n    x11 = insert(x8, x10)\n    x12 = insert(x9, x11)\n    x13 = rbind(contained, x12)\n    x14 = chain(flip, x13, ulcorner)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = height(x16)\n    x18 = vsplit(x16, x17)\n    x19 = hsplit(x18, x17)\n    x20 = extract(x19, x14)\n    x21 = extract(x19, x20)\n    x22 = width(x16)\n    x23 = divide(x22, THREE)\n    x24 = area(x16)\n    x25 = last(x24)\n    x26 = width(x12)\n    x27 = divide(x26, THREE)\n    x28 = astuple(x23, x27)\n    x29 = maximum(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(multiply, x30)\n    x32 = mapply(x31, x3)\n    x33 = canvas(x236, x32)\n    x34 = lbind(shift, x16)\n    x35 = mapply(x34, x30)\n    x36 = fill(x33, FOUR, x35)\n    x37 = shift(x3, x Tools)\n    x38 = occurrences(x32, x37)\n    x39 = fill(x36, FOUR, x38)\n    O = mapply(x39, x"], [1.1, "def solve_3158d264(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bb93ee37(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_71a186b1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_79d79473(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = chain(positive, size, dmirror)\n    x7 = x6(I)\n    x8 = chain(x4, first, x7)\n    x9 = sfilter(x5, x8)\n    x10 = asindices(x9)\n    x11 = ofcolor(x9, x4)\n    x12 = toindices(x11)\n    x13 = mapply(first, x12)\n    x14 = fill(x9, ZERO, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x16, x14)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x19)\n    x25 = rbind(divide, x18)\n    x26 = apply(x24, x15)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = apply(x27, x28)\n    x30 = hconcat(x17, x17)\n    x31 = hconcat(x29, x27)\n    x32 = vconcat(x30, x31)\n    x33 = vconcat(x32, x17)\n    x34 = ofcolor(x33, ONE)\n    x35 =314(x34)\n    x36 = subgrid(x35, x33)\n    x37 = increment(x38)\n    x38 = branch(x37, x35, x37)\n    x39 = lbind(mapply, x36)\n    x40 = lbind"], [1.1, "def solve_e75aea00(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = delta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = delta(x2)\n    x6 = box(x2)\n    x7 = intersection(x5, x6)\n    x8 = uppermost(x7)\n    x9 = uppermost(x2)\n    x10 = equality(x8, x9)\n    x11 = leftmost(x7)\n    x12 = leftmost(x2)\n    x13 = equality(x11, x12)\n    x14 = lowermost(x7)\n    x15 = lowermost(x2)\n    x16 = equality(x14, x15)\n    x17 = rightmost(x7)\n    x18 = rightmost(x2)\n    x19 = equality(x17, x18)\n    x20 = urcorner(x7)\n    x21 = ulcorner(x7)\n    x22 = llcorner(x7)\n    x23 = lrcorner(x7)\n    x24 = branch(x16, x22, x23)\n    x25 = branch(x13, x21, x24)\n    x26 = branch(x10, x20, x25)\n    x27 = branch(x16, x23, x20)\n    x28 = branch(x13, x22, x27)\n    x29 = branch(x10, x21, x28)\n    x30 = branch(x16, DOWN_LEFT, UNITY)\n    x31 = branch(x13, NEG_UNITY, x30)\n    x32 = branch(x10, UP_RIGHT, x31)\n    x33 = branch(x16, UNITY, UP_RIGHT)\n    x34 = branch(x13, DOWN_LEFT, x33)\n    x35 = branch(x10, NEG_UNITY, x34)\n    x36 = branch(x16, DOWN, RIGHT)\n    x37 = branch(x13, LEFT, x36)\n    x38 = branch(x10"], [1.1, "def solve_1f6763bc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x38, first)\n    x40 = fork(paint, x38, x39)\n    x41 = rbind(contained, x17"], [1.1, "def solve_02364e0a(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = rbind(toobject, I)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(colorcount, x1)\n    x7 = matcher(x6, EIGHT)\n    x8 = rbind(toobject, I)\n    x9 = matcher(x8,0000000)\n    x10 = rbind(colorcount, x1)\n    x11 = matcher(x10, EIGHT)\n    x12 = chain(x9, x11, backdrop)\n    x13 = lbind(fork, paint)\n    x14 = lbind(x13, identity)\n    x15 = lbind(rbind, colorcount)\n    x16 = compose(x14, x15)\n    x17 = lbind(colorfilter, x5)\n    x18 = chain(x16, x17, x16)\n    x19 = lbind(rbind, costgrid)\n    x20 = chain(x19, width, x8)\n    x21 = chain(corners, x18, x20)\n    x22 = lbind(chain, x21)\n    x23 = rbind(x22,asobject)\n    x24 = lbind(rbind, x contained)\n    x25 = chain(first, x23, x24)\n    x26 =997(x1, x25)\n    x27 = chain(x07, x25, xdmirror)\n    x28 = astuple(x26, x26)\n    x29 = astuple(NEG_TWO, x28)\n    x30 = astuple(x31, x29)\n    x31 = x17(x30)\n    x32 = papply(x27, x31)\n    x33 = papply(x29, x32)\n    x34 = ofcolor(I, x1)\n    x35 = combine(x34, x52)\n    x36 = intersection(x34, x35)\n    x37 = fill(I, ZERO, x36)"], [1.1, "def solve_217ad3e7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_06605e29(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =885(I)\n    x2 =887(x1, FOUR)\n    x3 = argmin(x2, size)\n    x4 = astuple(ONE, THREE)\n    x5 = astuple(TWO, FOUR)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x3, x7)\n    x9 = tojvec(x8)\n    x10 = tojvec(x1)\n    x11 = double(x10)\n    x12 = double(x11)\n    x13 = tojvec(x12)\n    x14 = tojvec(x11)\n    x15 = double(x9)\n    x16 = repeat(x13, x15)\n    x17 = Flake ring(x16)\n    x18 = compose(normalize, first)\n    x19 = fork(subtract, x18, last)\n    x20 = upscale(x17, x19)\n    x21 = asobject(x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = decrement(x23)\n    x25 = height(x21)\n    x26 = subtract(x24, x25)\n    x27 = width(x21)\n    x28 = decrement(x27)\n    x29 = width(x21)\n    x30 = subtract(x28, x29)\n    x31 = astuple(x26, x30)\n    x32 = canvas(ZERO, x31)\n    x33 = ulcorner(x2)\n    x34 = invert(x33)\n    x35 = shift(x34, x31)\n    x36 = ofcolor(I, x23)\n    x37 = lbind(shift, x35)\n    x38 = interval(x32, x32, ONE)\n    x39 = apply(x38, x36)\n    x40 = mapply(x37, x39)\n    x41 = astuple(x43, x40)\n    x42 = canvas(ZERO, x41)\n    O"], [1.1, "def solve_103b8b19(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_311eb51c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(sfilter, x1)\n    x2 = lbind(matcher, flip)\n    x3 = compose(x2, leastcolor)\n    x4 = chain(normalize, mostcolor, x3)\n    x5 = x4(I)\n    x6 = astuple(cmirror, dmirror)\n    x7 = astuple(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(x6, x8)\n    x10 = insert(x9, x8)\n    x11 = apply(x4, x10)\n    x12 = product(x11, x11)\n    x13 = sfilter(x12, first)\n    x14 = compose(last, first)\n    x15 = difference(x12, x13)\n    x16 = compose(last, last)\n    x17 = matcher(x14, x55)\n    x18 = sfilter(x15, x17)\n    x19 = lbind(recolor, TWO)\n    x20 = lbind(ofcolor, I)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, x21, x19)\n    x23 = compose(x19, x22)\n    x24 = fork(paint, x23, x12)\n    x25 = chain(x39, x40, x24)\n    x26 = mapply(x25, x13)\n    x27 = objects(x26, T, T, T)\n    x28 = mapply(toindices, x27)\n    x29 = box(x28)\n    x30 = difference(x29, x28)\n    x31 = intersection(x30, x28)\n    x32 = first(x31)\n    x33 = x30(x32)\n    x34 = ofcolor(I, TWO)\n    x35 =contained(ZERO, x34)\n    x36 = lbind(contained, TWO)\n    x37 = compose(x36, last)\n    x38 = sfilter(x34, x37)\n    x39 = center(x38)\n"], [1.1, "def solve_aa198d92(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_e763443b(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_124b60c7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained,ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(0520, x2)\n    x4 = lbind(equality, NINE)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(size, cmirror)\n    x8 = chain(DEPrement, x7, x6)\n    x9 = argmax(x10, x8)\n    x10 = multiply(x19, x9)\n    x11 = chain(x17, minimum, x10)\n    x12 = argmin(x00, x11)\n    x13 = other(x1, x12)\n    x14 = flip(x13)\n    x15 = branch(x14, identity, vmirror)\n    x16 = x15(x12)\n    x17 = objects(x16, T, T, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, x18)\n    x20 = chain(19, toindices, x19)\n    x21 = fork(add, first, x20)\n    x22 = chain(flip, x6, x21)\n    x23 = sfilter(x18, x22)\n    x24 = fork(contained, x23, identity)\n    x25 = normalize(x12)\n    x26 = lbind(shift, x25)\n    x27 = compose(x26, ulcorner)\n    x28 = fork(equality, identity, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(multiply, x30)\n    x31 = rbind(shift, x30)\n    x32 = compose(x30, x31)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = rbind(multiply, x30)\n    x36 = rbind(shift, x33)\n    x37 = fork(connect, x35, x36)\n    x38 = compose("], [1.1, "def solve_c0d850cb(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_2eb5a999(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = remove(UNITY, x1)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = divide(x3, x7)\n    x9 = width(I)\n    x10 = halve(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, vline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = halve(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, x26)\n    x32 = lbind(index, I)\n    x33 = lbind(compose, x12)\n    x34 = compose(x33, x25)\n    x35 = chain(x32, x34, x29)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, x25)\n    x38 = fork(equality, x37, x30)\n    x39 = palette(I)\n    x40 = sfilter(x39, x38)\n    x41 = lbind(colorcount, I)\n    x42 = argmin(x40, x41"], [1.1, "def solve_9424a4b5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = last(x2)\n    x6 = ofcolor(I, x5)\n    x7 = asindices(I)\n    x8 = center(x7)\n    x9 = initset(x8)\n    x10 = insert(x4, x9)\n    x11 = insert(x5, x10)\n    x12 = frontiers(I)\n    x13 = sfilter(x12, hline)\n    x14 = size(x13)\n    x15 = positive(x14)\n    x16 = branch(x15, identity, dmirror)\n    x17 = x16(I)\n    x18 = rbind(multiply, x1)\n    x19 = compose(x18, identity)\n    x20 = shape(x17)\n    x21 = canvas(x20, x20)\n    x22 = lbind(greater, x21)\n    x23 = compose(x22, first)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(positive, size, x24)\n    x26 = rbind(compose, x00)\n    x27 = lbind(x26, x17)\n    x28 = rbind(compose, x23)\n    x29 = lbind(rbind, contained)\n    x30 = chain(x27, x28, x29)\n    x31 = lbind(fork, x22)\n    x32 = lbind(x31, identity)\n    x33 = lbind(rbind,compose)\n    x34 = chain(x32, x33, x30)\n    x35 = lbind(fork, x26)\n    x36 = fork(x55, x23, x32)\n    x37 = fork(compose, x36, x34)\n    x38 = lbind(matcher, x25)\n    x39 = compose(x38, x37)\n    x40 = fork(sfilter, x35, x39"], [1.1, "def solve_0c887db4(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(address, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_1f52ebbd(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x21)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_d40d1ff0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = Fgpartition(I)\n    x2 = merge(x1)\n    x3 = box(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = subgrid(x2, x4)\n    x6 = argmax(x1, width)\n    x7 = uppermost(x6)\n    x8 = leftmost(x6)\n    x9 = height(x5)\n    x10 = width(x5)\n    x11 = divide(x9, x10)\n    x12 = add(x8, UNITY)\n    x13 = subtract(x12, x11)\n    x14 = uppermost(x6)\n    x15 = width(x6)\n    x16 = interval(x14, x15, ZERO)\n    x17 = add(x8, x16)\n    x18 = hsplit(x11, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = compose(x21, first)\n    x23 = rbind(colorcount, x20)\n    x24 = matcher(x23, x22)\n    x25 = mfilter(x19, x24)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x5)\n    x28 = matcher(first, x20)\n    x29 = compose(flip, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = compose(x30, x15)\n    x32 = rbind(sfilter, x111)\n    x33 = compose(x32, x152)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x19)\n    x36 = lbind(e98196)\n    x37 = compose(x36, x30)\n    x38 = fork(apply, x37, x31)\n    x39 = fork(mapply, x35, x38)\n    x40 = fork(difference, x38, ZERO)\n    x41"], [1.1, "def solve_ae28a374(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =8900076363e21)\n    x6 = neighbors(UNITY)\n    x7 = toindices(x6)\n    x8 = box(x7)\n    x9 = rbind(825efilter, x8)\n    x10 =411170(x9)\n    x11 = x9(x10)\n    x12 = fill(I, x4, x11)\n    x13 = x9(x12)\n    x14 = interval(ONE, FIVE, ONE)\n    x15 = downscale(x13, x14)\n    x16 = objects(x12, F, F, T)\n    x17 = rbind(toobject, x15)\n    x18 = compose(vperiod, x17)\n    x19 = height(x12)\n    x20 = rbind(multiply, x19)\n    x21 = chain(x20, toindices, x18)\n    x22 = lbind(add, x5)\n    x23 = compose(x22, x21)\n    x24 = fork(add, first, x23)\n    x25 = compose(x17, x24)\n    x26 = shape(x15)\n    x27 = multiply(x26, x26)\n    x28 = lbind(multiply, x27)\n    x29 = x28(x15)\n    x30 = shift(x15, x29)\n    x31 = rbind(multiply, x30)\n    x32 = compose(x31, x241)\n    x33 = rbind(multiply, x32)\n    x34 = fork(add, x33, x24)\n    x35 = rbind(multiply, x30)\n    x36 = compose(x35, x24)\n    x37 = fork(add, x36, x37)\n    x38 = fork(equality, x38, x34)\n    x39 = sfilter(x18, x38)\n    x"], [1.1, "def solve_cd122d5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_2c434bab(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = x1(I)\n    x2 = objects(x1, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, minimum, shape)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = mostcolor(I)\n    x9 = palette(x7)\n    x10 = matcher(identity, x8)\n    x11 = argmin(x9, x10)\n    x12 = color(x11)\n    x13 = subgrid(x11, x1)\n    x14 = hmirror(x13)\n    x15 = argmin(x12, x14)\n    x16 = remove(x11, x15)\n    x17 =348(x16)\n    x18 = subgrid(x17, x1)\n    x19 = index(x18, DOWN)\n    x20 = lowermost(x15)\n    x21 = add(x20, x20)\n    x22 = width(x7)\n    x23 = rightmost(x15)\n    x24 = add(x23, x2)\n    x25 = height(x7)\n    x26 = *rightmost(x7)\n    x27 = width(x7)\n    x28 = interval(x26, x27, ONE)\n    x29 = add(x24, x27)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = lbind(shift, x17)\n    x33 = mapply(x32, x31)\n    x34 = interval(decrement, x22, ONE)\n    x35 = lbind(hmirror, x24)\n    x36 = astuple(x35, x)\n    x37 = lbind(cmirror, x17)\n    x38 = add(x37, x349)\n    x39 = x10(x38)\n    x40 = dmirror(x39)\n    x"], [1.1, "def solve_591f345a(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = shape(I)\n    x3 = maximum(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = interval(ONE, x3, ONE)\n    x6 = rbind(toobject, I)\n    x7 = rbind(shoot, RIGHT)\n    x8 = rbind(shoot, LEFT)\n    x9 = objects(x7, T, F, F)\n    x10 = rbind(shoot, DOWN)\n    x11 = rbind(shoot, UP)\n    x12 = rbind(shoot, DOWN)\n    x13 = mapply(x11, x9)\n    x14 = mapply(x12, x10)\n    x15 = combine(x13, x14)\n    x16 = apply(x15, x15)\n    x17 = lbind(canvas, ZERO)\n    x18 = lbind(occurrences, I)\n    x19 = compose(x17, x18)\n    x20 = lbind(recolor, ONE)\n    x21 = chain(x20,paint, x19)\n    x22 = lbind(ofcolor, I)\n    x23 = fork(size, x22, x21)\n    x24 = compose(maximum, x23)\n    x25 = apply(x24, x16)\n    x26 = repeat(x25, ONE)\n    x27 =047676(x26)\n    x28 = partition(x27)\n    x29 = lbind(colorcount, x27)\n    x30 = argmax(x28, x29)\n    x31 = apply(x30, x29)\n    x32 = matcher(contained, x31)\n    x33 = sfilter(x32, x32)\n    x34 = apply(color, x33)\n    x35 =64(x34)\n    x36 = astuple(ONE, THREE)\n    x37 = rbind(subtract, x36)\n    x38 = chain(halve, x37, x36)\n    x39 = fork(shift, x33, x38)\n    x40 = mapply"], [1.1, "def solve_f0cf962c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = objects(x26, s, F, T)\n    x28 = colorfilter(x27, x7)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = sfilter(x28, x30)\n    x32 = sfilter(x28, x24)\n    x33 = extract(x31, x32)\n    x34 = first(x33)\n    x35 = last(x33)\n    x36 = gravitate(x34, x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x16, x37)\n    x39 = leftmost(x37)\n    x40 = rightmost(x37)\n    x41 = astuple(x39,"], [1.1, "def solve_aefdb417(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = switch(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = fork(add, height, width)\n    x4 = rbind(decrement, x3)\n    x5 = chain(decrement, x4, shape)\n    x6 = fork(equality, size, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, x5)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(I, x9)\n    x11 = center(x10)\n    x12 = multiply(x11, x4)\n    x13 = shift(x12, x11)\n    x14 = fill(I, x9, x13)\n    x15 = toindices(x13)\n    x16 = lbind(\"\"\"\n    x17 = box(x13)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = toindices(x4)\n    x21 = lbind(intersection, x20)\n    x22 = chain(x19, size, x21)\n    x23 = argmax(x15, x22)\n    x24 = lbind(colorcount, x14)\n    x25 = argmin(x23, x24)\n    x26 = replace(x14, x25, x9)\n    x27 = color(x13)\n    x28 = colorfilter(x25, x27)\n    x29 = fill(x26, x39, x28)\n    x30 = argmin(x29, x22)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(halve, x31)\n    x33 = fork(add, first, x32)\n    x34 = x33(x26)\n    x35 = x33(x24)\n    x36 = x33(x30)\n    x37 = fill(x29, x35, x36)\n    x38 = fill(x37, x41, x34)\n    x39 =fill("], [1.1, "def solve_06011d54(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(ppaint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_27375e2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_52889f0d(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = shape(x27)\n    x30 = multiply(x29, THREE)\n    x31 = x26(I)\n    x32 = maximum(x30)\n    x33 = lbind(astuple, x32)\n    x34 = lbind(shoot, x27)\n    x35 = rightmost(x27)\n    x36 = equality(x32, x35)\n    x37 = branch(x36, x33, x34)\n    x38 = apply(x37, x39)\n    x39 = leftmost(x27)\n    x40 = decrement(x39"], [1.1, "def solve_ecd5ad9d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0008f503(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, rot90)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, size)\n    x27 = fork(sfilter, x25, x26)\n    x28 = lbind(colorcount, I)\n    x29 = argmax(x17, x28)\n    x30 = rbind(canvas, x3)\n    x31 = compose(x30, x22)\n    x32 = rbind(multiply, x6)\n    x33 = compose(x32, x19)\n    x34 = fork(equality, x33, x21)\n    x35 = rbind(n28, x34)\n    x36 = lbind(apply, x21)\n    x37 = chain(x131, x35, x36)\n    x38 = fork(sfilter, x27, x37)\n    x39 = fork(difference, x28, x38)\n"], [1.1, "def solve_6a535df9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = vsplit(I, TWO)\n    x7 = switch(x6, EIGHT, FOUR)\n    x8 = apply(x5, x7)\n    x9 = order(x8, identity)\n    x10 = last(x9)\n    x11 = remove(x10, x9)\n    x12 = compose(hmirror, merge)\n    x13 = lbind(compose, flip)\n    x14 = lbind(matcher, first)\n    x15 = chain(x13, x14, mostcolor)\n    x16 = fork(sfilter, identity, x15)\n    x17 = chain(increment, tojvec, x16)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x17, x18, identity)\n    x20 = lbind(fork, greater)\n    x21 = compose(x20, last)\n    x22 = lbind(rbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x21)\n    x25 = lbind(rbind, x24)\n    x26 = chain(x19, x24, x25)\n    x27 = compose(x5, x2)\n    x28 = fork(sfilter, identity, x27)\n    x29 = chain(first, x13, x28)\n    x30 = fork(compose, x29, x23)\n    x31 = compose(x5, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x360, x11)\n    x34 = mapply(x32, x10)\n    x35 = combine(x33, x34)\n    x36 = mapply(x32, x20)\n    x37 = mapply(x32, x27)\n    x38 = m"], [1.1, "def solve_94f0ea96(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(5521, UNITY)\n    x3 = rbind(subgrid, I)\n    x4 = chain(numcolors, x2)\n    x5 = matcher(x4, ONE)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = chain(positive, size, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(dmirror, merge)\n    x11 = chain(normalize, x10, x8)\n    x12 = chain(ff28, x11, x9)\n    x13 = chain(dmirror, x11, x12)\n    x14 = fork(concat, x11, x13)\n    x15 = fork(compose, x14, x11)\n    x16 = lbind(chain, size)\n    x17 = lbind(x16, x10)\n    x18 = rbind(compose, x17)\n    x19 = lbind(rbind, subtract)\n    x20 = chain(x18, x19, x15)\n    x21 = rbind(rapply, I)\n    x22 = initset(x7)\n    x23 = lbind(rapply, x22)\n    x24 = chain(first, x21, x23)\n    x25 = compose(x20, x24)\n    x26 = argmax(x9, x25)\n    x27 = first(x26)\n    x28 = last(x26)\n    x29 = x27(I)\n    x30 = x27(x28)\n    x31 = palette(x30)\n    x32 = shape(x30)\n    x33 = lbind(apply, first)\n    x34 = lbind(ofcolor, x30)\n    x35 = chain(x33, x34, x28)\n    x36 = replace(x30, SIX, ZERO)\n    x37 = apply(x35, x36)\n    x38 = astuple(x31, x"], [1.1, "def solve_45e52190(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = compose(normalize, toindices)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x4)\n    x9 = paint(x7, x8)\n    x10 = shape(x4)\n    x11 = width(x9)\n    x12 = height(x9)\n    x13 = normalize(x4)\n    x14 = interval(x11, x12, ONE)\n    x15 = paint(x9, x14)\n    x16 = shape(x4)\n    x17 = interval(x13, x16, ONE)\n    x18 = rbind(toobject, x9)\n    x19 = lbind(278, multiply)\n    x20 = chain(x18, x19, mostcolor)\n    x21 = rbind(afivec, x10)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(canvas, x5)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(remove, x23, x26)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(chain, x18)\n    x30 = lbind(x29, normalize)\n    x31 = lbind(x30, x27)\n    x32 = rbind(difference, x15)\n    x33 = compose(x31, x32)\n    x34 = rbind(apply, x15)\n    x35 = chain(size, x34, x28)\n    x36 = argmax(x17, x35)\n    x37 =06(x36, x31)\n    x38 = color(x37)\n    x39 =O = paint(x37, x38)\n    x40 = height("], [1.1, "def solve_01af9c72(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 =11e(I)\n    x8 = hmatching(x7, x4)\n    x9 = branch(x8, identity, vmirror)\n    x10 = x9(I)\n    x11 = trim(x10)\n    x12 = palette(x11)\n    x13 = matcher(identity, x12)\n    x14 = vmirror(x11)\n    x15 = hmirror(x11)\n    x16 = vmirror(x15)\n    x17 = asindices(x16)\n    x18 = shift(x17, UNITY)\n    x19 = paint(x10, x18)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = center(x21)\n    x23 = dmirror(x21)\n    x24 = shift(x23, x22)\n    x25 = paint(x19, x24)\n    x26 = toindices(x24)\n    x27 = initset(x26)\n    x28 = remove(x25, x20)\n    x29 = insert(x28, x26)\n    x30 = product(x27, x29)\n    x31 = rbind(intersection, x22)\n    x32 = compose(size, x31)\n    x33 = matcher(x32, ZERO)\n    x34 = branch(x33, x44, x25)\n    x35 = flip(x34)\n    x36 = branch(x35, x24, x25)\n    x37 = branch(x35, x16, x25)\n    x38 = branch(x35, x22, x25)\n    x39 = branch(x35, x19, x27)\n    x40 = branch(x35, x36, x31)\n    x41 = branch("], [1.1, "def solve_8db7e957(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13) extract(x16, identity)\n    x17 = last(x16)\n    x18 = remove(x4, x16)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x13, x19)\n    x21 = rbind(first, x15)\n    x22 = compose(first, backdrop)\n    x23 = fork(compose, x21, x22)\n    x24 = lbind(lbind, shift)\n    x25 = height(x19)\n    x26 = matcher(x25, ZERO)\n    x27 = lbind(fork, both)\n    x28 = rbind(x27, x26)\n    x29 = extract(x15, x28)\n    x30 = center(x29)\n    x31 = matcher(last, x30)\n    x32 = compose(flip, x31)\n    x33 = center(x29)\n    x34 = initset(x33)\n    x35 = insert(x16, x34)\n    x36 = insert(x31, x35)\n    x37 = dmirror(x36)\n    x38 = lbind(shift, x37)\n    x39 = occurrences(x38, x38)\n    x40 = mapply(x38, x39)\n    x41 = fill"], [1.1, "def solve_97a8ed05(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_397bb0d0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_355127f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2770d49d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a73b4210(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = objects(I, T, F, T)\n    x32 = apply(toindices, x31)\n    x33 = lbind(compose, normalize)\n    x34 = lbind(rbind, contained)\n    x35 = chain(x33, x34, leftmost)\n    x36 = chain(size, x32, x35)\n    x37 = equality(x36, ONE)\n    x38 = mapply(x37, x29)\n    x39"], [1.1, "def solve_064317bd(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =675(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = width(I)\n    x7 = equality(x5, x6)\n    x8 = toivec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = shape(I)\n    x11 = halve(x10)\n    x12 = canvas(ZERO, x11)\n    x13 = ofcolor(I, ZERO)\n    x14 = asindices(x13)\n    x15 = difference(x14, x13)\n    x16 = rbind(toobject, I)\n    x17 = compose(first, x16)\n    x18 = apply(x17, x15)\n    x19 = interval(ZERO, x5, ONE)\n    x20 = product(x19, x19)\n    x21 = apply(last, x20)\n    x22 = lbind(recolor, ZERO)\n    x23 = compose(x22,\n    x24 = matcher(first, ZERO)\n    x25 = rbind(sfilter, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = chain(x26, x25, x25)\n    x28 = chain(x27, x26, x25)\n    x29 = lbind(shift, x14)\n    x30 = fork(combine, x29, x28)\n    x31 = compose(x30, x23)\n    x32 = fork(mapply, x31, x29)\n    x33 = mapply(x32, x21)\n    O = paint(x12, x33)\n    return O"], [1.1, "def solve_3aa3d87a(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(remove, ZERO)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 =7523(I)\n    x5 = lbind(occurrences, x4)\n    x6 = compose(x5, x3)\n    x7 = fork(mapply, x3, x6)\n    x8 = compose(cmirror, x7)\n    x9 = fork(occurrences, x8, toindices)\n    x10 = compose(lrcorner, x9)\n    x11 = fork(shift, x10, x8)\n    x12 = compose(UNITY, x11)\n    x13 = leastcolor(I)\n    x14 = ofcolor(I, x13)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(I, x13, x19)\n    O = mapply(x12, x4)\n    return O"], [1.1, "def solve_03679c68(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = rbind(contained, x5)\n    x7 = compose(x6, first)\n    x8 = rbind(sfilter, x7)\n    x9 = lbind(rbind, subtract)\n    x10 = lbind(occ):\n    x11 = apply(x9, x5)\n    x12 = lbind(lbind, shift)\n    x13 = x17(x11)\n    x14 = x12(x12)\n    x15 = fork(apply, x7, x8)\n    x16 = fork(apply, x12, x14)\n    x17 = fork(paint, identity, x15)\n    x18 = identity(x16)\n    x19 = dmirror(I)\n    x20 = papply(pair, x19, x8)\n    x21 = lbind(apply, x17)\n    x22 = apply(x21, x20)\n    x23 = argmin(x22, x7)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = replace(x19, x25, x24)\n    x27 = apply(x16, x26)\n    x28 = color(x27)\n    x29 = ofcolor(x25, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    O = fill(x45, x28, x33)\n    return O"], [1.1, "def solve_d41d2edc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =6879641\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = width(x12)\n    x14 = subtract(x13, ONE)\n    x15 = divide(x14, TWO)\n    x16 = height(x12)\n    x17 = subtract(x16, TWO)\n    x18 =160(x17)\n    x19 = lbind(shift, x12)\n    x20 = rbind(multiply, x15)\n    x21 = chain(x19, x20, x19)\n    x22 = astuple(x16, x18)\n    x23 = rbind(multiply, x22)\n    x24 =10(x23)\n    x25 = lbind(shift, x12)\n    x26 = rbind(multiply, x25)\n    x27 = chain(x24, x26, x19)\n    x28 = astuple(x18, x17)\n    x29 = rbind(multiply, x28)\n    x30 =10(x29)\n    x31 = lbind(shift, x12)\n    x32 = rbind(multiply, x15)\n    x33 = chain(x31, x32, x19)\n    x34 = combine(x26, x33)\n    x35 = mapply(x21, x34)\n    x36 = paint(I, x35)\n    O = subgrid(x3, x36)\n    return O"], [1.1, "def solve_56f45d23(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot197, merge)\n    x3 = valmax(x1, height)\n    x4 = matcher(size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 =1884615096444f830(I):\n    O = fill(I, FIVE, x8)\n    return O"], [1.1, "def solve_f19f03ad(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = rbind(Example output:\n    8224669124\n    2872000837\n    6213758198\n    5239174079\n    8895626318\n    2128321892\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    \"\"\"\n    x2 =92(ofcolor, I)\n    x3 = compose(first, last)\n    x4 = rbind(subgrid, I)\n    x5 = chain(x4, mostcolor, x3)\n    x6 = fork(650, x5, x4)\n    x7 = lbind(greater, THREE)\n    x8 = compose(x7, x6)\n    x9 = sfilter(x2, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.1, "def solve_3e58962e(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = fork(both, x3, x4)\n    x6 = extract(x3, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = backdrop(x6)\n    x9 =6666(x8, identity)\n    x10 = initset(x7)\n    x11 = matcher(x7, x10)\n    x12 = sfilter(x6, x11)\n    x13 = difference(x6, x12)\n    x14 = toobject(x13, I)\n    x15 = matcher(first, x1)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x14, x16)\n    x18 = merge(x17)\n    x19 = fill(I, TWO, x18)\n    x20 = color(x6)\n    O = fill(x19, x20, x2)\n    return O"], [1.1, "def solve_cd025170(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =9af4ty694\n    d687934510\n    4006941674\n    1100490694\n    8995020098\n    9706069391\n    975d9001ae(99fa2020\n    8097267001\n    7231163527\n    9214080289\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = ofcolor(I, ONE)\n    x5 = subgrid(x4, x2)\n    x6 = argmax(x4, width)\n    x7 = subgrid(x6, x3)\n    x8 = subgrid(x7, x2)\n    x9 = height(x8)\n    x10 = lowermost(x8)\n    x11 = width(x8)\n    x12 = divide(x9, x11)\n    x13 = upscale(x5, x12)\n    x14 = ofcolor(x13, ONE)\n    x15 = subgrid(x14, x8)\n    x16 = colorcount(x15, ZERO)\n    x17 = rightmost(x16)\n    x18 = add(x17, x10)\n    x19 = tojvec(x18)\n    x20 = vmirror(x15)\n    x21 = invert(x20)\n    x22 = shift(x20, x21)\n    x23 = apply(x22, x16)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = astuple(x26, x22)\n    x28 = lbind(multiply, x27)\n    x29 = apply(x28, x26)\n    x30 = interval(ZERO, x5, ONE)\n    x31 = pair(x30, x30)\n    x32 = mapply(box, x31)\n    O = fill(x15, FOUR, x32)\n    return O"], [1.1, "def solve_73822e19(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(6696, TWO)\n    x7 = rbind(colorcount, TWO)\n    x8 = argmax(x5, x7)\n    x9 = subgrid(x8, I)\n    x10 = rbind(contained, x4)\n    x11 = rbind(subtract, x4)\n    x12 = chain(x10, x11, minimum)\n    x13 = rbind(greater, ONE)\n    x14 = rbind(x13, TWO)\n    x15 = chain(x14, x11, normalize)\n    x16 = lbind(contained, TWO)\n    x17 =12(x16)\n    x18 = rbind(gravitate, x8)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(I, x4, x22)\n    return O"], [1.1, "def solve_36a6ad3e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = fork(combine, x13, x17)\n    x19 = fork( apply(x18, x3)\n    x20 = rbind(argmin, lrcorner)\n    x21 = compose(x20, delta)\n    x22 = fork(subtract, x21, x15)\n    x23 = fork(shift, x17, x22)\n    x24 = rbind(x23, RIGHT)\n    x25 = compose(x24, ulcorner)\n    x26 = x25(x2)\n    x27 = fork(subtract, x26, x24)\n    x28 = fork(shift, x22, x27)\n    x29 = fork(combine, x28, x21)\n    x30 = mapply(x29, x3)\n    O = underfill(I, EIGHT, x30)\n    return O"], [1.1, "def solve_9ad341d6(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = totuple(x6)\n    x8 =66666666(x5, x7)\n    x9 = lbind(lbind, astuple)\n    x10 = lbind(chain, x9)\n    x11 = compose(x10, x4)\n    x12 = lbind(lbind, mapply)\n    x13 = x11(x12)\n    x14 = combine(x8, x13)\n    x15 = difference(x7, x14)\n    x16 = apply(x11, x15)\n    x17 = ofcolor(I, x5)\n    x18 = intersection(x17, x16)\n    O = fill(I, TWO, x18)\n    return O"], [1.1, "def solve_cfa5a811(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =9097(I)\n    x2 = dmirror(I)\n    x3 = papply(pair, I, x1)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(x14, ZERO)\n    x16 = subgrid(x15, x14)\n    x17 = apply(x4, x16)\n    x18 = hmirror(x17)\n    x19 = papply(pair, x17, x18)\n    x20 = apply(x4, x19)\n    x21 = vmirror(x20)\n    x22 = papply(pair, x21, x20)\n    O = apply(x4, x22)\n    return O"], [1.1, "def solve_e45ea913(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = normalize(I)\n    x3 = mostcolor(I)\n    x4 = canvas(x3, x1)\n    x5 = objects(I, F, F, T)\n    x6 =65(x5)\n    x7 = mostcolor(x6)\n    x8 = first(x5)\n    x9 = matcher(first, x7)\n    x10 = sfilter(x8, x9)\n    x11 = normalize(x10)\n    x12 = objects(I, T, F, T)\n    x13 = compose(toindices, lrcorner)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x12, x14)\n    x16 = normalize(x15)\n    x17 = objects(I, T, F, T)\n    x18 = sizefilter(x17, TWO)\n    x19 = apply(invert, x18)\n    x20 = shift(x19, x17)\n    x21 = merge(x80)\n    x22 = fill(I, x7, x21)\n    x23 = shift(x20, x17)\n    x24 = fill(x22, x7, x23)\n    x25 = shift(x21, x17)\n    x26 = fill(x24, x7, x25)\n    O = paint(x26, x20)\n    return O"], [1.1, "def solve_b08cc038(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [1.1, "def solve_fd237548(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = rbind(adjacent, DOWN)\n    x11 = sfilter(x9, x10)\n    x12 =444(x11)\n    x13 =002(x12,80)\n    x14 = vmirror(x13)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x4)\n    x17 = rbind(bordering, I)\n    x18 = compose(flip, x17)\n    x19 = mfilter(x16, x18)\n    O = fill(I, EIGHT, x19)\n    return O"], [1.1, "def solve_ad949fc9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = ONE(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = palette(x3)\n    x5 =71e2676(x4)\n    x6 = palette(x3)\n    x7 = intersection(x5, x6)\n    x8 =711219723(x2)\n    x9 = shape(x3)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(x3, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = FOUR(x13)\n    x15 = subgrid(x13, x14)\n    x16 = interval(ONE, FOUR, ONE)\n    x17 = lbind(power, rot90)\n    x18 = initset(x17)\n    x19 = chain(x18, repeat, fgpartition)\n    x20 = lbind(lbind, shift)\n    x21 = occurrences(x15, x16)\n    x22 = mapply(x20, x21)\n    O = paint(x10, x22)\n    return O"], [1.1, "def solve_d8dc42ad(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = argmax(I, size)\n    x2 = color(x1)\n    x3 = subgrid(x1, I)\n    x4 = objects(x3, F, T, T)\n    x5 = argmin(x4, size)\n    x6 = subgrid(x5, I)\n    x7 = normalize(x6)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 = ZERO(x8)\n    x11 = astuple(x10, x9)\n    x12 = add(x11, ORIGIN)\n    x13 = hupscale(x3, x12)\n    x14 = output:\n    x13, x7)\n    x15 = width(x7)\n    x16 = height(x7)\n    x17 = tojvec(x16)\n    x18 = lbind(shift, x7)\n    x19 = compose(x18, toivec)\n    x20 = height(x7)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = apply(x19, x22)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x23)\n    x26 = combine(x28, x25)\n    x27 = paint(x3, x26)\n    x28 = lbind(shift, x7)\n    x29 = rapply(x28, x25)\n    x30 = mapply(x29, x28)\n    x31 = paint(x27, x30)\n    O = branch(x5, x30, x31)\n    return O"], [1.1, "def solve_17defa96(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(shift, I)\n    x2 = lbind(multiply, THREE)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = chain(decrement, dmirror, x4)\n    x6 = fork(equality, toindices, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = x5(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 =565(x10)\n    x13 = in2005(x12)\n    x14 =730(x10)\n    x15 = lefthalf(x14)\n    x16 = righthalf(x14)\n    x17 = rbind(order, leftmost)\n    x18 = compose(x17, x16)\n    x19 = rbind(order, rightmost)\n    x20 = compose(x19, x16)\n    x21 = rbind(order, ZERO_BY_TWO)\n    x22 = compose(x21, x19)\n    x23 = fork(combine, x18, x20)\n    x24 = fork(combine, x23, x22)\n    x25 = compose(x24, backdrop)\n    x26 = fork(recolor, x25, x20)\n    x27 = mapply(x26, x8)\n    x28 = paint(x10, x27)\n    x29 = dmirror(x28)\n    x30 = objects(x29, T, F, T)\n    x31 =907(x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = pair(x33, x30)\n    x35 = mapply(last, x34)\n    x36 = paint(x27, x35)\n    O = x5(x36)\n    return O"], [1.1, "def solve_ecc72f4c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 =81(I)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(x5, x6)\n    x8 = double(x2)\n    x9 = compose(multiply, last)\n    x10 = argmin(x7, x9)\n    O = mostcolor(x10)\n    return O"], [1.1, "def solve_4da80f6c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = replace(x6, NEG_ONE, ZERO)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter, x21, x17)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.1, "def solve_24147c9c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =782(x2)\n    x4 = apply(color, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x5)\n    O = fill(x6, TWO, x8)\n    return O"], [1.1, "def solve_cbd0aacf(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = ofcolor(I, x8)\n    x10 = urcorner(x9)\n    x11 = ulcorner(x9)\n    x12 = shoot(x11, NEG_UNITY)\n    x13 = shoot(x11, UP_RIGHT)\n    x14 = combine(x12, x13)\n    x15 = underfill(I, ZERO, x14)\n    x16 = objects(x15, T, F, T)\n    x17 =597158(x16, merge)\n    x18 = center(x17)\n    x19 = shoot(x18, DOWN_LEFT)\n    x20 = shoot(x18, UNITY)\n    x21 = combine(x19, x20)\n    x22 =47(x21)\n    x23 = asindices(x11)\n    x24 = ofcolor(x11, x8)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    x29 = asindices(I)\n    x30 = shape(x11)\n    x31 = intersection(x29, x30)\n    x32 = fill(x11, x8, x31)\n    x33 = compose(first, last)\n    x34 = fork(recolor, x33, first)\n    x35 = mapply(x34, x28)\n    x36 = paint(x32, x35)\n    O = replace(x36, x8, x5)\n    return O"], [1.1, "def solve_386042f0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 =755522455\n    0942255522\n    4285065628\n    1980568079\n    9599496669\n    2740694924\n    9595380864\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [1.1, "def solve_0e1c23e2(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = chain(x4, x3, cmirror)\n    x6 = matcher(x5, ZERO)\n    x7 = extract(x1, x6)\n    x8 =49810(x7)\n    x9 = argmax(x8, identity)\n    x10 = leastcolor(x9)\n    x11 = matcher(first, x10)\n    x12 = sfilter(x8, x11)\n    x13 = merge(x12)\n    x14 = vmirror(x13)\n    x15 = mostcolor(I)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = fill(x17, x10, x14)\n    x19 = lbind(e179, x10)\n    x20 = lbind(occurrences, x18)\n    x21 = lbind(lbind, shift)\n    x22 = compose(x21, toindices)\n    x23 = chain(x19, x21, x22)\n    x24 = lbind(mapply, x23)\n    x25 = rbind(occurrences, x18)\n    x26 = lbind(mapply, x24)\n    x27 = chain(x25, x26, x22)\n    x28 = astuple(cmirror, dmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = combine(x28, x29)\n    x31 = product(x30, x30)\n    x32 = fork(compose, first, last)\n    x33 = apply(x32, x31)\n    x34 =0191524 x33)\n    x35 = combine(xsIX, x34)\n    x36 = paint(x20, x35)\n    O = paint(x36, x36)\n    return O"], [1.1, "def solve_faca5f25(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x NEG_UNITY)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    x36 = fill(x35, x11, x34)\n    O = fill(x36, x10, x35)\n    return O"], [1.1, "def solve_a1e40878(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =48(I)\n    x3 = replace(I, x1, ZERO)\n    x4 = compose(dmirror, merge)\n    x5 = x4(x3)\n    x6 = astuple(NEG_TWO, NEG_TWO)\n    x7 = shift(x5, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = mapply(x8, x7)\n    O = underfill(x3, x1, x9)\n    return O"], [1.1, "def solve_6e045321(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(x1, ZERO)\n    x3 = astuple(ZERO, ORIGIN)\n    x4 = initset(x3)\n    x5 = upscale(x4, TWO)\n    x6 = portrait(x5)\n    x7 = branch(x6, ZERO, RIGHT)\n    x8 = ulcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = shift(x9, TWO_BY_TWO)\n    x11 = branch(x6, toindices, box)\n    x12 = fork(combine, hfrontier, vfrontier)\n    x13 = x12(x110)\n    x14 = corners(x5)\n    x15 = ofcolor(x14, ZERO)\n    x16 = mapply(x12, x15)\n    x17 = difference(x10, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x19, x20)\n    x22 = other(x21, x1)\n    x23 = ofcolor(x18, x22)\n    x24 = lbind(shift, x18)\n    x25 = halve(x4)\n    x26 =345(x25)\n    x27 = subgrid(x23, x26)\n    O = trim(x27)\n    return O"], [1.1, "def solve_e4b21d87(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =44mirror(x2)\n    x4 = replace(I, NINE, ZERO)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = color(x3)\n    x7 = lbind(shift, x3)\n    x8 = apply(x7, x5)\n    x9 = mapply(x8, x4)\n    O = paint(x4, x9)\n    return O"], [1.1, "def solve_16354b3c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =52(I)\n    x5 = matcher(first, x3)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    O = fill(I, NINE, x9)\n    return O"], [1.1, "def solve_d9e6655e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width761259726\n    70721528170\n    0583544745\n    5784467579\n    5526432855\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_ff971bee(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(d687, toindices, x4)\n    x6 = lbind(difference, x1)\n    x7 = compose(x6, toindices)\n    x8 = chain(positive, size, x7)\n    x9 = lbind(lbind, shift)\n    x10 = apply(x9, x8)\n    x11 =552299b230(x10)\n    x12 = lbind(ofcolor, x4)\n    x13 = compose(x12, x8)\n    x14 = fork(recolor, x13, identity)\n    x15 = mapply(x14, x12)\n    x16 = paint(I, x15)\n    x17 =Revppaint(x16, x1)\n    O = objects(x17, T, F, T)\n    return O"]], "2037f2c7": [[0.4709500322543801, "def solve_f24b9c81(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.5124660219282645, "def solve_01d0ebb5(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_f5bd6aab(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_896bcc9d(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_5ad7f1a7(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_d67c7304(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_641f9ec3(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_7bd39526(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_2466f39e(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5251570172671126, "def solve_72cde99e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5341705127937012, "def solve_fe53566c(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_63a25bc0(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_ef5bc955(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_bac9365e(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5389342090692021, "def solve_d1f415d7(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5437278100321579, "def solve_b55feb1a(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.5696230758236387, "def solve_42e056ec(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = normalize(x2)\n    x5 = mostcolor(I)\n    x6 = shape(x2)\n    x7 = canvas(x5, x6)\n    O = fill(x7, x3, x4)\n    return O"], [0.5862614030933166, "def solve_05a9b810(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = lbind(chain, positive)\n    x6 = lbind(x5, size)\n    x7 = rbind(compose, backdrop)\n    x8 = lbind(lbind, intersection)\n    x9 = chain(x6, x7, x8)\n    x10 = chain(x9, backdrop, outbox)\n    x11 = lbind(sfilter, x4)\n    x12 = compose(x11, x10)\n    x13 = chain(positive, size, x12)\n    x14 = sfilter(x4, x13)\n    x15 = compose(merge, x12)\n    x16 = apply(x15, x14)\n    x17 = rbind(subgrid, I)\n    x18 = apply(x17, x16)\n    x19 = merge(x16)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = argmin(x20, x21)\n    x23 = rbind(colorcount, x22)\n    O = argmax(x18, x23)\n    return O"], [0.5863202149434034, "def solve_6dd03f15(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.5863202149434034, "def solve_3dc52985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.6057341869347498, "def solve_363c9896(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, F, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.6057341869347498, "def solve_6dbb6863(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(colorcount, ONE)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [0.6076921592043171, "def solve_353e5a4b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6194886937848373, "def solve_bc06d494(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_20bde5d9(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_5a85a4c0(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_724cfa4f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6309126220053929, "def solve_d82ab65e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_8fc26d0f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_966c3959(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_90c82262(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.631933306897075, "def solve_0744f58c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_7cf03094(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, T, F, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_12f80178(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_b3d39f30(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.6396413636635563, "def solve_a9fc4fdd(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = ofcolor(x4, ZERO)\n    x6 = ofcolor(x2, ZERO)\n    x7 = intersection(x5, x6)\n    x8 = shape(x3)\n    x9 = canvas(ZERO, x8)\n    O = fill(x9, THREE, x7)\n    return O"], [0.6400120813164292, "def solve_ba210909(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(equality, toindices, box)\n    x3 = sfilter(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = argmax(x3, x4)\n    x6 = fgpartition(I)\n    x7 = merge(x6)\n    x8 = difference(x7, x5)\n    x9 = subgrid(x5, I)\n    x10 = subgrid(x8, I)\n    x11 = height(x9)\n    x12 = subtract(x11, TWO)\n    x13 = height(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x9)\n    x16 = subtract(x15, TWO)\n    x17 = width(x10)\n    x18 = divide(x16, x17)\n    x19 = hupscale(x10, x18)\n    x20 = vupscale(x19, x14)\n    x21 = asobject(x20)\n    x22 = shift(x21, UNITY)\n    O = paint(x9, x22)\n    return O"], [0.6479432648616834, "def solve_50ffae8b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x3, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x4, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.652277101112151, "def solve_881da893(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.6557151442133381, "def solve_29be50d3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_d98a660c(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.6748161707949084, "def solve_239be59f(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6906801139687889, "def solve_cf5e8e00(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6938245927181472, "def solve_fb3f508d(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.7313689109828214, "def solve_0832912d(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_0f590ebb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7313689109828214, "def solve_64681a5f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_e4d9aa9e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_4f220bec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = shape(x6)\n    x13 = canvas(x11, x12)\n    x14 = ofcolor(x6, x11)\n    x15 = ofcolor(x7, x11)\n    x16 = intersection(x14, x15)\n    O = fill(x13, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_14acc4b7(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7356195315428602, "def solve_cec4d0e5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.7356195315428602, "def solve_2f30089b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.7513894621344644, "def solve_e7bb5665(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.7514237970163009, "def solve_b3d4c9c9(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_34783792(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [0.7531535096989002, "def solve_e65f80d5(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.7553253405644605, "def solve_9f80af8e(I):\n    x1 = fgpartition(I)\n    x2 = valmax(x1, height)\n    x3 = valmax(x1, width)\n    x4 = astuple(x2, x3)\n    x5 = mostcolor(I)\n    x6 = canvas(x5, x4)\n    x7 = asindices(x6)\n    x8 = apply(normalize, x1)\n    x9 = box(x7)\n    x10 = maximum(x4)\n    x11 = double(x10)\n    x12 = asindices(x6)\n    x13 = center(x12)\n    x14 = initset(x13)\n    x15 = lbind(manhattan, x14)\n    x16 = lbind(multiply, x11)\n    x17 = lbind(intersection, x9)\n    x18 = chain(x16, size, x17)\n    x19 = lbind(fork, subtract)\n    x20 = lbind(chain, x18)\n    x21 = lbind(x20, toindices)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(chain, x15)\n    x25 = compose(initset, center)\n    x26 = lbind(x24, x25)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x26, x27)\n    x29 = lbind(argmax, x7)\n    x30 = fork(x19, x23, x28)\n    x31 = compose(x29, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x32, x8)\n    O = paint(x6, x33)\n    return O"], [0.7657422288140491, "def solve_7ae35f95(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = dedupe(x3)\n    return O"], [0.7702738530895862, "def solve_c63a5c72(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_7b4af5af(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_7a3592b6(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_2a7f068d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_db2101a9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_88d26863(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_b555df2e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_e6613122(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_1910037e(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_82a0b75d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_e35470f2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_a7d1865b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7707492564922985, "def solve_e3e4a528(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.7717845608238315, "def solve_b493dfd6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.7946931652854432, "def solve_f52ac5ae(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7946931652854432, "def solve_bd425757(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.7946931652854432, "def solve_45bb8e4e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7946931652854432, "def solve_a3173aad(I):\n    x1 = shape(I)\n    x2 = asindices(I)\n    x3 = objects(I, T, F, F)\n    x4 = argmax(x3, size)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, x1)\n    x8 = paint(x7, x4)\n    x9 = mostcolor(I)\n    x10 = color(x4)\n    x11 = astuple(x9, ORIGIN)\n    x12 = astuple(x10, RIGHT)\n    x13 = astuple(x9, ZERO_BY_TWO)\n    x14 = initset(x13)\n    x15 = insert(x12, x14)\n    x16 = insert(x11, x15)\n    x17 = dmirror(x16)\n    x18 = toindices(x16)\n    x19 = lbind(shift, x18)\n    x20 = occurrences(x8, x16)\n    x21 = mapply(x19, x20)\n    x22 = toindices(x17)\n    x23 = lbind(shift, x22)\n    x24 = occurrences(x8, x17)\n    x25 = mapply(x23, x24)\n    x26 = combine(x21, x25)\n    O = fill(x8, x9, x26)\n    return O"], [0.7946931652854432, "def solve_2319a64a(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.8058042763965544, "def solve_6931f7de(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8058042763965544, "def solve_02ac69d9(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8058042763965544, "def solve_d273b463(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8141732132799135, "def solve_f1b42bfb(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8220447986833391, "def solve_4b9601e6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_c465c00b(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_1700566c(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_3d77ebc9(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_058b3b0d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_05da2b43(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_9124b818(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_70383862(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_6b61d368(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_15cee853(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_70089b3d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_817f4653(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_7468d487(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_29340112(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_5089002f(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_64d1e023(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_2f02e199(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277875214971026, "def solve_1879f635(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.829564622162508, "def solve_6f3a6e0e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.8296258545422006, "def solve_9459ea6c(I):\n    O = trim(I)\n    return O"], [0.8372727715830096, "def solve_b4992ae7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [0.8372727715830096, "def solve_9278ba19(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [0.8477590843976248, "def solve_9ea6fe03(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8527276661680809, "def solve_6b2138cd(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8530872511837071, "def solve_ba922e50(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.8581703987119509, "def solve_c42446ab(I):\n    O = replace(I, FOUR, ZERO)\n    return O"], [0.858414186390205, "def solve_a8fd49cd(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.858414186390205, "def solve_a126ec1f(I):\n    x1 = replace(I, EIGHT, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.858414186390205, "def solve_b63cb71d(I):\n    x1 = replace(I, NINE, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.858725163499677, "def solve_3049583f(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = asobject(I)\n    x6 = difference(x5, x4)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = paint(I, x7)\n    x9 = objects(x8, T, F, T)\n    x10 = mapply(delta, x9)\n    O = fill(x8, ZERO, x10)\n    return O"], [0.8604574970960375, "def solve_b3135066(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.8606460795862487, "def solve_7d664772(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = first(x6)\n    x10 = matcher(identity, x8)\n    x11 = sfilter(x9, x10)\n    x12 = size(x11)\n    x13 = last(x6)\n    x14 = sfilter(x13, x10)\n    x15 = size(x14)\n    x16 = greater(x12, x15)\n    x17 = branch(x16, hmirror, identity)\n    x18 = x17(x6)\n    x19 = partition(x18)\n    x20 = matcher(color, x8)\n    x21 = extract(x19, x20)\n    x22 = remove(x21, x19)\n    x23 = argmin(x22, uppermost)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = color(x24)\n    x27 = fill(x18, TWO, x21)\n    x28 = fill(x27, ONE, x24)\n    x29 = fill(x28, ZERO, x23)\n    x30 = rbind(order, identity)\n    x31 = dmirror(x29)\n    x32 = apply(x30, x31)\n    x33 = dmirror(x32)\n    x34 = x17(x33)\n    x35 = x5(x34)\n    x36 = ofcolor(x35, TWO)\n    x37 = fill(x35, x8, x36)\n    x38 = ofcolor(x35, ONE)\n    x39 = fill(x37, x26, x38)\n    x40 = ofcolor(x35, ZERO)\n    O = fill(x39, x25, x40)\n    return O"], [0.8625466344449646, "def solve_2a75e1ef(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, TWO, x3)\n    return O"], [0.8631333933751663, "def solve_839f398e(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.8634207638517514, "def solve_d6959afb(I):\n    O = vmirror(I)\n    return O"], [0.8634577218981633, "def solve_16e409c7(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.8634577218981633, "def solve_d1823fb9(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.863706518437685, "def solve_37cf8237(I):\n    O = dmirror(I)\n    return O"], [0.863706518437685, "def solve_cdf59cea(I):\n    O = dmirror(I)\n    return O"], [0.8638701955087361, "def solve_e848cd8e(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.8638701955087361, "def solve_161cf03a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.8638701955087361, "def solve_88a16f69(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.8638701955087361, "def solve_fbaaf83e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_c75e5496(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.8638701955087361, "def solve_b6129454(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, last)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_fcb97da4(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_9fc7c0a8(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_d8208217(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_2584e703(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.8638701955087361, "def solve_ead53366(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.8638701955087361, "def solve_73f802f1(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_263a58cd(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_e9562815(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_7b19ecb9(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.8638701955087361, "def solve_50b6b36c(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_850c53d3(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.8638701955087361, "def solve_540e1458(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.8638701955087361, "def solve_1f170a64(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.8638701955087361, "def solve_f73a17bb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_f012a851(I):\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = interval(x33, x29, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x22)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.8638701955087361, "def solve_07ad5d03(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.8638701955087361, "def solve_5155b3b6(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638878416543551, "def solve_397ed6e5(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.8638878416543551, "def solve_ee65841b(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.8638891638983809, "def solve_6c239764(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8638891638983809, "def solve_211e4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.8638891638983809, "def solve_1d799efa(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8638891638983809, "def solve_c1e1f707(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.8638891638983809, "def solve_e81ccc4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8639438916538609, "def solve_4ac730df(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_a74bd57c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_f1c132e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_1054c2f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_4b677b91(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_4074f730(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_4d5fce32(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_b54fc6ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_576710ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_50ad09e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_c972eccc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_11d0edd1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_3673afd6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_357caa72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_c2932f76(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639490676372977, "def solve_4821dd5c(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = cover(I, x3)\n    x5 = subgrid(x3, x4)\n    x6 = ofcolor(x5, x1)\n    x7 = mapply(vfrontier, x6)\n    x8 = mapply(hfrontier, x6)\n    x9 = size(x7)\n    x10 = size(x8)\n    x11 = greater(x9, x10)\n    x12 = branch(x11, x8, x7)\n    x13 = fill(x5, x1, x12)\n    x14 = ofcolor(x13, x1)\n    x15 = ulcorner(x2)\n    x16 = shift(x14, x15)\n    O = underfill(I, x1, x16)\n    return O"], [0.8640153202252895, "def solve_477ff01d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = mapply(x24, x19)\n    O = paint(I, x25)\n    return O"], [0.8640253338383225, "def solve_05dd9d12(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_f0ea4f02(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_47df6898(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_36d223d8(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_5f7a68b7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_19fd0a58(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_885ddf67(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_ea32005f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_c2281b96(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_90565e03(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_5f45f139(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_04574a5a(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_600e8b37(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_99d2a7b3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_5effc4d7(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_c5488d26(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_3f266eba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_a01e786b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_194a097f(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640934643034335, "def solve_6ca9257e(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = astuple(x2, ONE)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = shoot(x5, RIGHT)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, FOUR, x7)\n    return O"], [0.8641376097298877, "def solve_e1c9bd3f(I):\n    O = rot180(I)\n    return O"], [0.8641376097298877, "def solve_8e0b6c55(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.8641376097298877, "def solve_11c3c0ac(I):\n    O = rot180(I)\n    return O"], [0.8641376097298877, "def solve_2e0a94bc(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.8641376097298877, "def solve_65506423(I):\n    O = rot180(I)\n    return O"], [0.8641376097298877, "def solve_dd30881e(I):\n    x1 = dmirror(I)\n    O = cmirror(x1)\n    return O"], [0.8641376097298877, "def solve_1e2562e5(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.8641453134548085, "def solve_f8867b30(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_75279b56(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_ed258f16(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_d29215b7(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_fa0bbc5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_eadf6f49(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641474651177995, "def solve_0a7bc089(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.8642976086802397, "def solve_ea53f5a7(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.8642976086802397, "def solve_85e53d92(I):\n    x1 = objects(I, T, F, F)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.864458786470308, "def solve_6c0c3a38(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 = paint(I, x3)\n    x8 = paint(x7, x4)\n    x9 = paint(x8, x5)\n    O = paint(x9, x6)\n    return O"], [0.8644669437834643, "def solve_1031dae9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_e5a41df3(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_abb9653c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_ad996615(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_36ca63a9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.864487569023801, "def solve_cdaf8146(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.864487569023801, "def solve_caacc226(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.8652458446503286, "def solve_ea5df16d(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [0.8654574970960377, "def solve_6fd190e8(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.8656237858337551, "def solve_b6a0d229(I):\n    x1 = leastcolor(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x1)\n    x4 = replace(I, x1, x2)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, x1, x6)\n    return O"], [0.8687415090376716, "def solve_6e0e6ffd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_2f2fcf1a(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_6f1b2970(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_86ed03ba(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_6f0730c0(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8899630205643289, "def solve_bc81486c(I):\n    x1 = replace(I, ZERO, ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8966427298715387, "def solve_19535a00(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_b421dfbd(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.8966427298715387, "def solve_f129703e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_a98d59b6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.8966427298715387, "def solve_2907a38e(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_95e41dd6(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_88054beb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_603d0c64(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x7)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = normalize(x13)\n    x15 = toindices(x14)\n    x16 = increment(x15)\n    x17 = shift(x15, x16)\n    x18 = rbind(gravitate, x17)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(x11, x7, x22)\n    return O"], [1.0, "def solve_6b569afe(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_00be2bd9(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_53c3e3fd(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = compose(dneighbors, shape)\n    x4 = fork(difference, backdrop, x3)\n    x5 = toobject(x2, I)\n    x6 = matcher(first, x1)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x5, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = colorfilter(x13, x1)\n    x15 = argmax(x14, numcolors)\n    x16 = matcher(first, x1)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = normalize(x18)\n    x20 = remove(x19, x18)\n    x21 = lbind(shift, x19)\n    x22 = mapply(x21, x20)\n    O = paint(I, x22)\n    return O"], [1.0, "def solve_08933e2e(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x13 = rbind(shoot, NEG_UNITY)\n    x14 = fork(combine, x6, x13)\n    x15 = fork(combine, x5, x14)\n    x16 = index(I, x2)\n    x17 = x15(x2)\n    x18 = ulcorner(x2)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = subgrid(x2, I)\n    x24 = objects(x23, x22, x23)\n    x25 = merge(x24)\n    x26 = cover(x23, x25)\n    x27 = subgrid(x2, x26)\n    x28 = objects(x27, x24, x23)\n    x29 = rbind(toobject, x27)\n    x30 = chain(x29, corners, outbox)\n    x31 = fork(both, x28, x30)\n    x32 = extract(x28, x31)\n    O = fill(x27, ONE, x32)\n    return O"], [1.0, "def solve_b551fc17(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_1a9da7d1(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = chain(x2, x3, palette)\n    x5 = fork(sfilter, identity, x4)\n    x6 = compose(palette, x5)\n    x7 = lbind(apply, x6)\n    x8 = chain(flip, x7, x5)\n    x9 = sfilter(I, x8)\n    x10 = fork(recolor, x6, x3)\n    x11 = mapply(x10, x9)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_16678d0e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_753ad728(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = toivec(x2)\n    x4 = crop(I, x3, x2)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = branch(x6, lefthalf, tophalf)\n    x8 = branch(x6, righthalf, bottomhalf)\n    x9 = branch(x6, hconcat, vconcat)\n    x10 = x7(I)\n    x11 = x8(I)\n    x12 = index(x10, ORIGIN)\n    x13 = shape(x11)\n    x14 = decrement(x13)\n    x15 = index(x11, x14)\n    x16 = replace(x10, THREE, x12)\n    x17 = replace(x11, THREE, x15)\n    O = x9(x16, x17)\n    return O"], [1.0, "def solve_786af6da(I):\n    x1 = Vision(I)\n    x2 = lbind(contained, TWO)\n    x3 = chain(x2, dmirror, identity)\n    x4 = compose(x1, x3)\n    x5 = astuple(vsplit, hsplit)\n    x6 = x4(I, TWO)\n    x7 = order(x5, x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = product(x8, x9)\n    x11 = matcher(x4, x8)\n    x12 = compose(flip, x11)\n    x13 = extract(x10, x12)\n    x14 = lbind(sfilter, x10)\n    x15 = compose(first, last)\n    x16 = lbind(matcher, x15)\n    x17 = chain(x14, x16, leftmost)\n    x18 = fork(4488, x17, last)\n    x19 = fork(sfilter, x18, first)\n    x20 = compose(last, last)\n    x21 = compose(flip, x20)\n    x22 = fork(recolor, x18, x21)\n    x23 = mapply(x22, x13)\n    O = paint(x6, x23)\n    return O"], [1.0, "def solve_2fea53ed(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_53c824b7(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c3ad5459(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b8386a1b(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_48d9d2dc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = matcher(first, x1)\n    x12 = sfilter(x10, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = first(x13)\n    x15 = divide(x4, x5)\n    x16 = downscale(x14, x15)\n    x17 = objects(x16, F, F, T)\n    x18 = color(x2)\n    x19 = ofcolor(x16, x18)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(x16, x21)\n    return O"], [1.0, "def solve_e0e7797b(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(x2, frontiers)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, hsplit, vsplit)\n    x8 = x7(I, TWO)\n    x9 = argmin(x8, numcolors)\n    x10 = asindices(x9)\n    x11 = apply(first, x10)\n    x12 = last(x10)\n    x13 = remove(x11, x10)\n    x14 = x12(x13)\n    x15 = toobject(x14, x9)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = x17(x12)\n    x19 = rbind(multiply, x18)\n    x20 = apply(x19, x323)\n    x21 = mapply(x17, x20)\n    x22 = paint(I, x21)\n    O = downscale(x22, TWO)\n    return O"], [1.0, "def solve_4db0a922(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_aedae3c4(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_25a4218a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = objects(x2, T, F, F)\n    x4 = compress(x3)\n    x5 = toindices(x4)\n    x6 = box(x5)\n    x7 = fill(x1, EIGHT, x6)\n    x8 = difference(x5, x4)\n    O = fill(x7, TWO, x8)\n    return O"], [1.0, "def solve_14424f72(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_77dc6175(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = index(x2, ORIGIN)\n    x4 = replace(I, ZERO, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = apply(ulcorner, x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = paint(x4, x8)\n    return O"], [1.0, "def solve_51cabb50(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 = compose(x26, x27)\n    x29 = fork(equality, identity, x28)\n    x30 = sfilter(x25, x29)\n    x31 = apply(x24, x30)\n    x32 = sfilter(x25, x31)\n    x33 = merge(x32)\n    x34 = fill(x14, x13, x33)\n    x35 = difference(x34, x32)\n    O = fill(x35, x10, x35)\n    return O"], [1.0, "def solve_43b470fd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x3, x7)\n    return O"], [1.0, "def solve_d42f922b(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_09e47d1f(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, frontiers)\n    x3 = mfilter(x2, hline)\n    x4 = mfilter(x2, vline)\n    x5 = x4(I)\n    x6 = x4(I)\n    x7 = color(x3)\n    x8 = palette(x5)\n    x9 = remove(x7, x8)\n    x10 = lbind(shift, x5)\n    x11 = mapply(x10, x9)\n    x12 = palette(x6)\n    x13 = remove(x7, x12)\n    x14 = lbind(shift, x6)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(merge, x18)\n    x20 = size(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = apply(toivec, x21)\n    x23 = mpapply(shift, x19, x22)\n    x24 = canvas(ZERO, UNITY)\n    x25 = lbind(shift, x24)\n    x26 = matcher(x25, FOUR)\n    x27 = mfilter(x23, x26)\n    O = paint(x17, x27)\n    return O"], [1.0, "def solve_f05195db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(THREE, x2)\n    x4 = rbind(shift, x3)\n    x5 = compose(x4, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = compose(x6, x5)\n    x8 = fork(mapply, x7, x5)\n    O = apply(x8, x1)\n    return O"], [1.0, "def solve_35d72955(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(d23, x3)\n    x5 = fill(I, FOUR, x4)\n    x6 = compose(last, first)\n    x7 = power(last, TWO)\n    x8 = fork(equality, x6, x7)\n    x9 = sfilter(x4, x8)\n    O = fill(x5, FOUR, x9)\n    return O"], [1.0, "def solve_12cda30b(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = sfilter(x2, hline)\n    x4 = size(x3)\n    x5 = positive(x4)\n    x6 = branch(x5, vsplit, hsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = equality(x8, x9)\n    x11 = branch(x10, vmirror, hmirror)\n    x12 = x11(x8)\n    x13 = x11(x9)\n    x14 = partition(x12)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x16)\n    x18 = fafffa47(x13)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = paint(x7, x20)\n    x22 = x11(x21)\n    x23 = replace(x22, ZERO, x17)\n    x24 = replace(x23, x18, x20)\n    x25 = dmirror(x24)\n    x26 = width(x22)\n    x27 = hupscale(x25, x26)\n    x28 = asobject(x27)\n    x29 = height(x22)\n    x30 = height(x28)\n    x31 = interval(ZERO, x29, x30)\n    x32 = lbind(shift, x28)\n    x33 = apply(toivec, x31)\n    x34 = mapply(x32, x33)\n    O = paint(x12, x34)\n    return O"], [1.0, "def solve_a5e9d17d(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = partition(I)\n    x7 = fork(multiply, height, width)\n    x8 = fork(equality, size, x7)\n    x9 = sfilter(x6, x8)\n    x10 = argmax(x9, size)\n    x11 = difference(x5, x10)\n    x12 = apply(initset, x11)\n    x13 = rbind(hmatching, x10)\n    x14 = rbind(vmatching, x10)\n    x15 = fork(either, x13, x14)\n    x16 = sfilter(x12, x15)\n    x17 = rbind(gravitate, x10)\n    x18 = fork(add, center, x17)\n    x19 = fork(connect, center, x18)\n    x20 = fork(recolor, color, x19)\n    x21 = mapply(x20, x16)\n    O = paint(I, x21)\n    return O"], [1.0, "def solve_5d21886c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = mostcolor(I)\n    return O"], [1.0, "def solve_5278c22e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_5d65c7ec(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x12)\n    O = paint(x4, x3)\n    return O"], [1.0, "def solve_f1a4a8f3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_222fc3f0(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = chain(x4, first, last)\n    x6 = compose(x5, x3)\n    x7 = fork(recolor, color, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [1.0, "def solve_af481828(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(camirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2e54c034(I):\n    x1 = frontiers(I)\n    x2 = matcher(size, ZERO)\n    x3 = sfilter(x1, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(toindices, x4, normalize)\n    x6 = mapply(x5, x1)\n    x7 = fill(I, EIGHT, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, x7)\n    return O"], [1.0, "def solve_19e93b86(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_bdf1df30(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, leastcolor)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x4, x11)\n    x13 = lbind(colorcount, x3)\n    x14 = argmin(x12, x13)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x3, x15)\n    x17 = backdrop(x16)\n    x18 = toobject(x17, x3)\n    x19 = matcher(first, x15)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = lbind(recolor, x17)\n    x23 = chain(x22, ulcorner, x20)\n    x24 = chain(x21, x23, x20)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(recolor, identity, x25)\n    x27 = mapply(x26, x12)\n    O = paint(x3, x27)\n    return O"], [1.0, "def solve_7d20db21(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_2ae0ddbf(I):\n    x1 = ofcolor(I, ONE)\n    x2 = rbind(difference, x1)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, x2, mostcolor)\n    x5 = compose(50,    4)\n    x6 = objects(I, T, F, T)\n    x7 = sfilter(x6, x5)\n    x8 = totuple(x7)\n    x9 = apply(color, x8)\n    x10 = apply(center, x8)\n    x11 = pair(x9, x10)\n    x12 = sfilter(x11, x5)\n    x13 = compose(leftmost, x12)\n    x14 = matcher(x13, ZERO)\n    x15 = difference(x2, x12)\n    x16 = extract(x15, x14)\n    x17 = ulcorner(x16)\n    x18 = subgrid(x16, I)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x18, x20)\n    x22 = replace(x2, ONE, ZERO)\n    x23 = sfilter(x21, x22)\n    x24 = correctmax(x23, x7)\n    x25 = dmirror(x24)\n    x26 = replace(x21, ONE, ZERO)\n    x27 = lbind(recolor, DOWN)\n    x28 = chain(x27, color, x8)\n    x29 = fork(combine, x28, x24)\n    x30 = chain(x29, x25, x28)\n    x31 = merge(x26)\n    x32 = cover(x11, x31)\n    x33 = paint(x32, x22)\n    O = x30(x33)\n    return O"], [1.0, "def solve_8dd9a0f2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_18e89320(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = sizefilter(x2, ONE)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = other(x8, x1)\n    x10 = replace(I, x6, x1)\n    x11 = ofcolor(I, x6)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(equality, x12)\n    x14 = first(I)\n    x15 = dedupe(x14)\n    x16 = x13(x15)\n    x17 = last(I)\n    x18 = dedupe(x17)\n    x19 = x13(x18)\n    x20 = dmirror(I)\n    x21 = first(x20)\n    x22 = dedupe(x21)\n    x23 = x13(x22)\n    x24 = dmirror(I)\n    x25 = last(x24)\n    x26 = dedupe(x25)\n    x27 = x13(x26)\n    x28 = apply(last, x11)\n    x29 = apply(first, x11)\n    x30 = either(x16, x19)\n    x31 = branch(x30, x28, x29)\n    x32 = branch(x30,52378, x31)\n    x33 = x21(x32)\n    x34 = shift(x33, x33)\n    O = fill(x10, x6, x34)\n    return O"], [1.0, "def solve_7f34fba6(I):\n    x1 = lbind(toobject, I)\n    x2 = compose(increment, double)\n    x3 = chain(toivec, x1, x2)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(decrement, double)\n    x6 = chain(tojvec, x5, x4)\n    x7 = fork(shift, identity, x6)\n    x8 = compose(hmirror, x7)\n    x9 = mapply(x8, I)\n    x10 = shift(x9, UP)\n    x11 = apply(x9, x10)\n    x12 = size(x11)\n    x13 = positive(x12)\n    x14 = branch(x13, x7, x6)\n    x15 = x14(I)\n    x16 = subgrid(x15, x15)\n    O = partition(x16)\n    return O"], [1.0, "def solve_cc0c100c(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a419a2e9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_5af7008f(I):\n    x1 = partition(I)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O"], [1.0, "def solve_6e6a340f(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = fork(both, x1, x6)\n    x8 = mfilter(x5, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_f636b2e5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_48659c9a(I):\n    UNITY = frontiers(I)\n    x1 = sfilter(x4, hline)\n    x2 = size(x1)\n    x3 = positive(x2)\n    x74 = branch(x3, dmirror, identity)\n    x5 = x7(I)\n    x6 = frontiers(I)\n    x7 = x6(I)\n    x8 = mostcolor(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = argmin(x6, x11)\n    O = x12(I)\n    return O"], [1.0, "def solve_26d2a3d0(I):\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = ofcolor(I, ZERO)\n    x6 = switch(x4, EIGHT, x5)\n    x7 = canvas(ZERO, x6)\n    x8 = hconcat(x7, x7)\n    O = vconcat(x8, x8)\n    return O"], [1.0, "def solve_1a6f0a43(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dbffac02(I):\n    x1 = frontiers(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = sfilter(x1, x6)\n    x8 = merge(x7)\n    x9 = color(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, T, T)\n    x14 = argmin(x13, numcolors)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x9, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x24)\n    x26 = lbind(shift, x25)\n    x27 = mapply(x26, x24)\n    O = paint(I, x27)\n    return O"], [1.0, "def solve_8ba66fe9(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2a867826(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    x10 = fill(I, x4, x9)\n    x11 = paint(x10, x8)\n    x12 = rbind(hmirror, x8)\n    x13 = rbind(vmatching, x8)\n    x14 = fork(either, x12, x13)\n    x15 = compose(x14, initset)\n    x16 = matcher(x15, x4)\n    x17 = sfilter(x11, x16)\n    x18 = merge(x17)\n    x19 = fill(x11, TWO, x18)\n    x20 = size(x11)\n    x21 = invert(x20)\n    x22 = tojvec(x21)\n    x23 = shift(x11, x22)\n    O = fill(x19, TWO, x23)\n    return O"], [1.0, "def solve_7c5d5318(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_ff1ed23f(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x50)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [1.0, "def solve_44742002(I):\n    x1 = argmin(I, size)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = recolor(ZERO, x3)\n    x5 = dmirror(x2)\n    x6 = occurrences(x5, x4)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x6)\n    O = fill(x2, ZERO, x8)\n    return O"], [1.0, "def solve_f59928f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8dd1db36(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_34bf83c9(I):\n    x1 = frontiers(I)\n    x2 = Tfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_60b5c352(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_4ab8494a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_f04a5ca3(I):\n    x1 = canvas(Faff, TWO_BY_TWO)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = mapply(x2, x1)\n    O = fill(x1, ZERO, x3)\n    return O"], [1.0, "def solve_ced0df89(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(toobject, I)\n    x6 = lbind(rbind, manhattan)\n    x7 = compose(x6, initset)\n    x8 = chain(x5, x7, dneighbors)\n    x9 = matcher(x8, UNITY)\n    x10 = compose(flip, x9)\n    x11 = fork(both, x3, x10)\n    x12 = sfilter(x4, x11)\n    x13 = objects(I, T, F, T)\n    x14 = fork(connect, ulcorner, lrcorner)\n    x15 = fork(connect, llcorner, urcorner)\n    x16 = fork(combine, x14, x15)\n    x17 = mapply(x16, x12)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_db027320(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(maximum, x2)\n    x4 = lbind(apply, x3)\n    x5 = chain(x1, x4, decrement)\n    x6 = fork(toivec, identity, x5)\n    x7 = compose(x4, x6)\n    x8 = fork(add, identity, x7)\n    x9 = fork(connect, identity, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(225, x10, x5)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(subtract, identity, x12)\n    x14 = fork(shift, identity, x13)\n    x15 = mapply(x14, x10)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_0e79fde3(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = hconcat(x3, x1)\n    return O"], [1.0, "def solve_0f67723b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_bac87b3d(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    O = subgrid(x7, I)\n    return O"], [1.0, "def solve_86eccaae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = first(x3)\n    x5 = rbind(manhattan, x4)\n    x6 = compose(even, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, size)\n    x9 = canvas(x8, UNITY)\n    x10 = fill(x9, TWO, x7)\n    x11 = fill(x10, ONE, x8)\n    x12 = fill(x11, NEG_ONE, x8)\n    x13 = fill(x12, FOUR, x7)\n    x14 = fill(x13, ONE, x8)\n    x15 = fill(x14, THREE, x9)\n    O = fill(x15, TWO, x13)\n    return O"], [1.0, "def solve_1499c086(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = frontiers(I)\n    x6 = color(x5)\n    x7 = x2(I)\n    x8 = paint(x7, x4)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = astuple(x9, x10)\n    x12 = add(x11, NEG_UNITY)\n    x13 = uppermost(x7)\n    x14 = rightmost(x7)\n    x15 = astuple(x13, x14)\n    x16 = add(x15, UP_RIGHT)\n    x17 = lowermost(x7)\n    x18 = leftmost(x7)\n    x19 = astuple(x17, x18)\n    x20 = add(x19, DOWN_LEFT)\n    x21 = lowermost(x7)\n    x22 = llcorner(x21)\n    x23 = urcorner(x21)\n    x24 = shoot(x11, UNITY)\n    x25 = shoot(x11, DOWN_LEFT)\n    x26 = shoot(x11, UP_RIGHT)\n    x27 = shoot(x11, NEG_UNITY)\n    x28 = combine(x24, x25)\n    x29 = combine(x26, x27)\n    x30 = combine(x28, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_414dfc9f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_649c03a4(I):\n    x1 = remove(I, x2)\n    x2 = lbind(ofcolor, I)\n    x3 = compose(x2, frontiers)\n    x4 = fork(recolor, x3, leastcolor)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_0b97eaa5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c3bbcb8(I):\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = Fgpartition(I)\n    x12 = merge(x11)\n    x13 = rbind(colorcount, x12)\n    x14 = matcher(x13, x10)\n    x15 = fork(both, x14, x9)\n    x16 = sfilter(x8, x15)\n    x17 = compose(x12, normalize)\n    x18 = apply(x17, x16)\n    x19 = merge(x8)\n    x20 = cover(I, x19)\n    x21 = paint(x20, x18)\n    x22 = asindices(x21)\n    x23 = x17(x22)\n    x24 = shift(x23, x24)\n    x25 = fork(mapply, x17, x24)\n    x26 = mapply(x25, x24)\n    O = fill(x21, x19, x26)\n    return O"], [1.0, "def solve_77437bd6(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_7e48552b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e8cdfe05(I):\n    x1 = astuple(I, I)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [1.0, "def solve_110d246c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_1cd1c801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_df209154(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_efbfa85d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(first, x3)\n    x5 = lbind(intersection, x2)\n    x6 = chain(positive, size, x5)\n    x7 = rbind(matcher, ZERO)\n    x8 = compose(x7, x4)\n    x9 = chain(flip, x6, x8)\n    x10 = sfilter(x2, x9)\n    O = fill(I, ZERO, x10)\n    return O"], [1.0, "def solve_4207d701(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_baf8a095(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_a2052ebf(I):\n    O =88888888\n    return O"], [1.0, "def solve_203f7775(I):\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(interval, ZERO)\n    x5 = rbind(x4, ONE)\n    x6 = compose(x5, x3)\n    x7 = fork(pair, x6, identity)\n    x8 = compose(x1, x7)\n    x9 = asindices(I)\n    x10 = x8(x9)\n    x11 = leastcolor(I)\n    x12 = ofcolor(I, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x10, x14)\n    x16 = difference(x10, x15)\n    x17 = fill(I, ZERO, x16)\n    x18 = intersection(x15, x16)\n    x19 = cover(x17, x18)\n    x20 = intersection(x15, x16)\n    O = fill(x19, x11, x20)\n    return O"], [1.0, "def solve_4376de90(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = astuple(x4, x5)\n    x9 = add(x8, UNITY)\n    x10 = initset(x9)\n    x11 =255256225\n    x102011148\n    2216808224\n    O = fill(I, x7, x10)\n    return O"], [1.0, "def solve_d74cad8d(I):\n    x1 = astuple(ONE, THREE)\n    x2 = size(x1)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x7, x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = upscale(x6, delta)\n    x8 = shape(x6)\n    x9 = canvas(ZERO, x8)\n    x10 = intersection(x7, x9)\n    O = fill(x9, FOUR, x10)\n    return O"], [1.0, "def solve_b12e5c03(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = upscale(x3, THREE)\n    x5 = ONE(x4)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = rbind(toobject, I)\n    x8 = compose(x7, frontiers)\n    x9 = sfilter(x6, x8)\n    x10 = pair(x9, x4)\n    x11 = apply(x11, x10)\n    x12 = mapply(x8, x11)\n    x13 = argmin(x5, x12)\n    x14 = add(x13, x11)\n    x15 = canvas(ZERO, x14)\n    x16 = asobject(x12)\n    x17 = shift(x16, x14)\n    x18 = paint(x15, x17)\n    O = rot180(x18)\n    return O"], [1.0, "def solve_7d1b62f9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = repeat(x9, ONE)\n    x13 = rbind(contained, x12)\n    x14 = compose(x13, last)\n    x15 = sfilter(x11, x14)\n    x16 = interval(ONE, SEVEN, ONE)\n    x17 = lbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_dd436da0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = product(x11, x11)\n    x13 = compose(last, first)\n    x14 = compose(last, last)\n    x15 = fork(astuple, x13, x14)\n    x16 = fork(shoot, identity, x15)\n    x17 = mapply(x16, x12)\n    x18 = combine(x17, x13)\n    x19 = fill(I, ZERO, x18)\n    O = paint(x19, x2)\n    return O"], [1.0, "def solve_0ff1a65a(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_c8537b77(I):\n    O = astuple(SIX, SIX)\n    return O"], [1.0, "def solve_fae1fa70(I):\n    x1 = halve(TEN)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_20acbac9(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(ff805, x5)\n    x7 = lbind( chain, backdrop)\n    x8 = lbind(x7, dneighbors)\n    x9 = chain(x5, x8, toindices)\n    x10 = apply(x9, x5)\n    x11 = fork(subtract, maximum, minimum)\n    x12 = x11(x10)\n    x13 = toivec(x12)\n    x14 = tojvec(x12)\n    x15 = connect(x13, x14)\n    x16 = astuple(x12, x12)\n    x17 = connect(x15, x16)\n    x18 = combine(x15, x17)\n    x19 = fill(I, ONE, x18)\n    x20 = leastcolor(x19)\n    O = ofcolor(x19, x20)\n    return O"], [1.0, "def solve_3ac16334(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0bbc9be7(I):\n    x1 = lbind(contained, ONE)\n    x2 = chain(flip, x1, shape)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = greater(x5, TWO)\n    x7 = branch(x6, height, width)\n    x8 = x7(x1)\n    x9 = x7(x2)\n    x10 = branch(x6, vsplit, hsplit)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_256c9445(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d4788e87(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = increment(x2)\n    x4 = bottomhalf(I)\n    x5 = lefthalf(x3)\n    x6 = righthalf(x3)\n    x7 = tophalf(x6)\n    x8 = increment(x7)\n    x9 = bottomhalf(x7)\n    x10 = decrement(x3)\n    x11 = height(x5)\n    x12 = increase(x5, x11)\n    x13 = tojvec(x10)\n    x14 = decrement(x13)\n    x15 = height(x6)\n    x16 = add(x14, x15)\n    x17 = tojvec(x12)\n    x18 = decrement(x17)\n    x19 = width(x5)\n    x20 = decrement(x19)\n    x21 = tojvec(x12)\n    x22 = decrement(x21)\n    x23 = astuple(x18, x20)\n    x24 = astuple(x24, x22)\n    x25 = combine(x23, x24)\n    x26 = intersection(x23, x25)\n    x27 = fill(I, FOUR, x25)\n    O = fill(x27, THREE, x26)\n    return O"], [1.0, "def solve_f4a2000c(I):\n    x1 = height(I)\n    x2 = ofcolor(I, ZERO)\n    x3 =asindices(I)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(I, ZERO, x9)\n    x11 = asobject(x10)\n    O = paint(x11, x9)\n    return O"], [1.0, "def solve_83290309(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_2093494c(I):\n    x1 = lbind(contained, ORIGIN)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = lbind(contained, TWO)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x4)\n    x9 = fork(both, x4, x6)\n    x10 = fork(both, x7, x8)\n    x11 = fork(both, x9, x10)\n    x12 = compose(flip, x4)\n    x13 = fork(both, x12, x11)\n    x14 = fork(both, x12, x12)\n    x15 = compose(flip, x4)\n    x16 = fork(both, x14, x15)\n    x17 = fork(both, x12, x16)\n    x18 = fork(either, x17, x14)\n    x19 = fork(either, x12, x16)\n    x20 = fork(either, x13, x16)\n    x21 = fork(add, ulcorner, x20)\n    x22 = fork(add, llcorner, x21)\n    x23 = fork(connect, x20, x22)\n    x24 = decrement(x70)\n    x25 = lbind(multiply, x24)\n    x26 = compose(x25, x23)\n    x27 = fork(add, lrcorner, x26)\n    x28 = fork(connect, x27, x24)\n    x29 = fork(upscale, x28, x14)\n    x30 = fork(connect, x27, x29)\n    x31 = fork(54400, x23, x30)\n    x32 = fork(combine, x29, x31)\n    x33 = fork(recolor, x26, x32)\n    x34 = mapply(x33, x1)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_6e48fd31(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = asobject(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = normalize(x6)\n    x8 = width(I)\n    x9 = subtract(x8, TWO)\n    x10 = multiply(x9, THREE)\n    x11 = increment(x10)\n    x12 = width(I)\n    x13 = subtract(x12, x6)\n    x14 = multiply(x13, x4)\n    x15 = shift(x7, x14)\n    x16 = paint(I, x15)\n    x17 = repeat(x16, ONE)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_f57dc630(I):\n    x1 = palette(I)\n    x2 = contained(I, x1)\n    x3 = contained(x2, x1)\n    x4 = branch(x3, UNITY, SEVEN)\n    x5 = branch(x3, vmirror, hmirror)\n    x6 = x4(x5)\n    x7 = width(I)\n    x8 = branch(x3, UNITY, NEG_ONE)\n    x9 = multiply(x7, x8)\n    x10 = shift(x6, x9)\n    x11 = canvas(ZERO, x9)\n    x12 = paint(x11, x10)\n    O = x4(x12)\n    return O"], [1.0, "def solve_fdc75963(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = compose(maximum, shape)\n    x11 = order(x9, x10)\n    x12 = size(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = rbind(contained, x13)\n    x15 = compose(x14, last)\n    x16 = sfilter(x11, x15)\n    x17 = multiply(TEN, TEN)\n    x18 = canvas(x4, x17)\n    x19 = double(x18)\n    x20 = asobject(x19)\n    x21 = shift(x20, UNITY)\n    O = paint(x17, x21)\n    return O"], [1.0, "def solve_6166a010(I):\n    x1 = lbind(toindices, I)\n    x2 = lbind(toobject, I)\n    x3 = compose(first, x1)\n    x4 = chain( mostcolor, x2, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = compose(last, x1)\n    x7 = chain(decrement, x5, x6)\n    x8 = fork(shift, identity, x7)\n    x9 = compose(first, x8)\n    x10 = fork(remove, x6, x9)\n    x11 = compose(last, x10)\n    x12 = lbind(rbind, manhattan)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, x11, x13)\n    x15 = fork(combine, x11, x14)\n    x16 = fork(intersection, x15, x8)\n    x17 = mapply(x16, x1)\n    O = fill(I, ZERO, x17)\n    return O"], [1.0, "def solve_7b05a020(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = fork(multiply, height, width)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = fork(both, x2, x5)\n    x7 = extract(x1, x6)\n    x8 = inbox(x7)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = remove(x10, x1)\n    x12 = remove(x7, x11)\n    x13 = argmin(x12, size)\n    x14 = combine(x13, x7)\n    x15 = backdrop(x14)\n    x16 = color(x10)\n    x17 = fill(I, x16, x15)\n    x18 = color(x7)\n    x19 = box(x15)\n    O = fill(x17, x18, x19)\n    return O"], [1.0, "def solve_27bc8324(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(apply, center)\n    x3 = lbind(colorfilter, x1)\n    x4 = chain(size, x2, x3)\n    x5 = matcher(x4, ONE)\n    x6 = lbind(colorcount, I)\n    x7 = compose(x6, palette)\n    x8 = argmax(x5, x7)\n    x9 = remove(x8, x5)\n    x10 = merge(x9)\n    x11 = rbind(contained, x10)\n    x12 = compose(x11, color)\n    x13 = sfilter(x1, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = rbind(extract, x16)\n    x18 = compose(x17, normalize)\n    x19 = lbind(apply, x18)\n    x20 = chain(x179, x18, x19)\n    x21 = rbind(remove, x20)\n    x22 = compose(x21, normalize)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(compose, initset)\n    x25 = lbind(rbind, manhattan)\n    x26 = chain(x24, x25, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x75, x27)\n    x29 = compose(x25, x28)\n    x30 = fork(mapply, x23, x29)\n    x31 = fork(recolor, x30, x29)\n    x32 = mapply(x31, x13)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_19daf05a(I):\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = increment(x33)\n    x35 = astuple(x33, x34)\n    x36 = shift(x22, x35)\n    x37 = shift(x25, x36)\n    x38 = paint(I, x37)\n    x39 = combine(x28, x38)\n    x40 = ofcolor(x39, ZERO)\n    O = mapply(x39, x40)\n    return O"], [1.0, "def solve_abb6ea0d(I):\n    x1 = initset(ORIGIN)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = uppermost(x3)\n    x7 = lbind(subtract, x6)\n    x8 = chain(size, x7, double)\n    x9 = lbind(shift, x3)\n    x10 = mapply(x9, x8)\n    O = underfill(x5, ONE, x10)\n    return O"], [1.0, "def solve_0b4e2894(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5b10c675(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d1b2c416(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_967e69fe(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_d792c8d1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_854608fe(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = cover(I, x2)\n    x4 = shift(x2, DOWN)\n    x5 = paint(x3, x4)\n    x6 = leftmost(x2)\n    x7 = width(I)\n    x8 = interval(x6, x7, TWO)\n    x9 = leftmost(x2)\n    x10 = interval(x9, NEGim, NEG_TWO)\n    x11 = combine(x8, x10)\n    x12 = rbind(shoot, UP)\n    x13 = uppermost(x2)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = mapply(x12, x15)\n    O = fill(x5, FOUR, x16)\n    return O"], [1.0, "def solve_82f6621a(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_577be18e(I):\n    x1 = lbind(shift, I)\n    x2 = compose(x1, decrement)\n    x3 = mapply(x2, I)\n    O = objects(I, T, F, T)\n    return O"], [1.0, "def solve_b3a6eefe(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(TWO, LEFT)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, ONE)\n    x10 = astuple(THREE, TWO)\n    x11 = connect(x9, x10)\n    x12 = combine(x8, x11)\n    x13 = combine(x5, x12)\n    x14 = recolor(THREE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_587c08c7(I):\n    x1 = palette(I)\n    x2 = SEVEN(I)\n    x3 = EIGHT(x2)\n    x4 = vmirror(I)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = lbind(colorfilter, x5)\n    x8 = compose(x7, color)\n    x9 = sfilter(x1, x8)\n    x10 = chain(invert, size, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = apply(x11, x9)\n    x13 = rbind(argmax, x12)\n    x14 = apply(x13, x12)\n    x15 = merge(x14)\n    x16 = cover(I, x15)\n    x17 = mapply(x11, x13)\n    O = paint(x16, x17)\n    return O"], [1.0, "def solve_722fe31d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0115b112(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x6)\n    x8 = crop(I, x7, x4)\n    x9 = asobject(x8)\n    x10 = hperiod(x9)\n    x11 = vperiod(x9)\n    x12 = index(I, x11)\n    x13 = asobject(I)\n    x14 = hperiod(x13)\n    x15 = vperiod(x13)\n    x16 = astuple(x14, x15)\n    x17 = ulcorner(x9)\n    x18 = crop(I, x17, x16)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = asobject(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = hperiod(x23)\n    x25 = vperiod(x24)\n    x26 = astuple(x24, x25)\n    x27 = ulcorner(x9)\n    x28 = crop(I, x27, x26)\n    x29 = vmirror(x28)\n    x30 = asobject(x29)\n    x31 = asobject(x30)\n    x32 = vperiod(x31)\n    x33 = hperiod(x31)\n    x34 = astuple(x33, x32)\n    x35 = lbind(multiply, x34)\n    x36 = neighbors(ORIGIN)\n    x37 = mapply(neighbors, x36)\n    x38 = apply(x35, x37)\n    x39 = lbind(shift, x33)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_def17ece(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_adb1e25e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f8e3f5ed(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_1fadd532(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_4d62b463(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x10 = x9(x6)\n    x11 = paint(x3, x10)\n    x12 = paint(x11, x11)\n    O = paint(x12, x10)\n    return O"], [1.0, "def solve_116dd1c0(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1365ca38(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = argmax(x5, size)\n    O = subgrid(x6, I)\n    return O"], [1.0, "def solve_63955891(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    O = asobject(x1)\n    return O"], [1.0, "def solve_1352c8fa(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_fb4099f9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_5c6e012b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_960122e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_4e0ca6f7(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8c91ed98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = dmirror(I)\n    x5 = x4(I)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [1.0, "def solve_d754ecc6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, UNITY)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = asindices(x5)\n    x7 = toobject(x6, I)\n    x8 = normalize(x7)\n    x9 = lbind(shift, x8)\n    x10 = compose(x9, shape)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, x10)\n    x14 = fork(equality, identity, x13)\n    x15 = mfilter(x6, x14)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_06640b30(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_461ed799(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = asindices(I)\n    x5 = apply(first, x4)\n    x6 = difference(x5, x3)\n    x7 = ofcolor(I, x1)\n    x8 = rbind(interval, ONE)\n    x9 = lbind(rbind, contained)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(matcher, ZERO)\n    x12 = chain(size, x10, x9)\n    x13 = lbind(sfilter, x7)\n    x14 = lbind(compose, x12)\n    x15 = chain(x13, x11, x14)\n    x16 = lbind(fork, x8)\n    x17 = compose(increment, minimum)\n    x18 = lbind(lbind, astuple)\n    x19 = lbind(chain, x17)\n    x20 = rbind(x19, first)\n    x21 = chain(x20, x18, first)\n    x22 = lbind(chain, maximum)\n    x23 = rbind(x22, first)\n    x24 = chain(x23, x18, first)\n    x25 = fork(x16, x21, x24)\n    x26 = compose(50, x25)\n    x27 = compose(first, x25)\n    x28 = fork(recolor, x26, x27)\n    x29 = mapply(x28, x3)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_17a52f40(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = order(x1, x2)\n    x4 = apply(last, x3)\n    x5 = size(x4)\n    x6 = interval(ZERO, x5, THREE)\n    x7 = rbind(contained, x6)\n    x8 = compose(x7, first)\n    x9 = interval(ZERO, x5, ONE)\n    x10 = pair(x4, x9)\n    x11 = sfilter(x10, x8)\n    x12 = mapply(first, x11)\n    O = fill(I, ZERO, x12)\n    return O"], [1.0, "def solve_f9fa61d0(I):\n    x1 = hsplit(I, THREE)\n    x2 = insert(first, x1)\n    x3 = order(x2, identity)\n    x4 = first(x3)\n    x5 = last(x3)\n    x6 = ofcolor(x4, NINE)\n    x7 = ofcolor(x5, ONE)\n    x8 = combine(x6, x7)\n    x9 = fill(x4, THREE, x8)\n    x10 = ofcolor(x9, NINE)\n    x11 = fill(x9, ONE, x10)\n    O = fill(x11,3333, x8)\n    return O"], [1.0, "def solve_e8fafdea(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_7f76e0d7(I):\n    x1 =884286214\n    x2 = dmirror(I)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(I, ZERO)\n    x16 = rbind(contained, x15)\n    x17 = apply(x16, x14)\n    x18 = sfilter(x17, vline)\n    x19 = difference(x17, x18)\n    O = apply(size, x19)\n    return O"], [1.0, "def solve_76830682(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_d6d73890(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_b1f393f2(I):\n    x1 = astuple(SIX, THREE)\n    x2 = astuple(dmirror, I)\n    x3 = astuple(TWO, ONE)\n    x4 = combine(x1, x3)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = rbind(ofcolor, x6)\n    x8 = chain(lowermost, x7, x6)\n    x9 = matcher(x8, ZERO)\n    x10 = extract(x4, x9)\n    x11 = x10(I)\n    x12 = objects(x11, T, F, T)\n    x13 = height(x11)\n    x14 = interval(ZERO, x13, TWO)\n    x15 = height(x11)\n    x16 = interval(ONE, x15, TWO)\n    x17 = rbind(apply, x14)\n    x18 = lbind(rbind, astuple)\n    x19 = chain(x17, x18, last)\n    x20 = rbind(apply, x16)\n    x21 = lbind(rbind, astuple)\n    x22 = compose(increment, last)\n    x23 = chain(x20, x21, x22)\n    x24 = rbind(apply, x16)\n    x25 = lbind(rbind, astuple)\n    x26 = compose(decrement, last)\n    x27 = chain(x24, x25, x26)\n    x28 = fork(combine, x19, x23)\n    x29 = fork(combine, x28, x27)\n    x30 = compose(x29, center)\n    x31 = fork(recolor, color, x30)\n    x32 = mapply(x31, x12)\n    x33 = paint(x11, x32)\n    O = x10(x33)\n    return O"], [1.0, "def solve_157c2546(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(x5, x6)\n    x8 = argmin(x5, x7)\n    x9 = x6(x8)\n    x10 = string(x8, x9)\n    x11 = cover(I, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = colorfilter(x12, x4)\n    x14 = difference(x12, x13)\n    x15 = divide(x10, x14)\n    x16 = apply(uppermost, x15)\n    x17 = lowermost(x15)\n    x18 = astuple(x17, x15)\n    x19 = add(x18, invert)\n    x20 = lowermost(x15)\n    x21 = rightmost(x15)\n    x22 = astuple(x20, x21)\n    x23 = add(x22, astuple)\n    x24 = rbind(subtract, x23)\n    x25 = rbind(shoot, x19)\n    x26 = compose(x24, x25)\n    x27 = fork(combine, x26, x24)\n    x28 = mapply(x27, x15)\n    O = fill(x11, ZERO, x28)\n    return O"], [1.0, "def solve_cc2d74a7(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_27377936(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =elta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = corners(x6)\n    x8 = insert(ZERO_BY_TWO, x7)\n    x9 = insert(RIGHT, x8)\n    x10 = insert(TWO_BY_TWO, x9)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = interval(TWO, x12, ONE)\n    x16 = pair(x14, x15)\n    x17 = mapply(x13, x16)\n    O = paint(x4, x17)\n    return O"], [1.0, "def solve_ce0d4df4(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = toindices(I)\n    x4 = matcher(first, x2)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = fork(multiply, last, identity)\n    x8 = apply(x7, x6)\n    x9 = partition(I)\n    x10 = sfilter(x9, x6)\n    x11 = mapply(toindices, x10)\n    x12 = corners(x11)\n    x13 = combine(x12, x11)\n    x14 = difference(x13, x12)\n    x15 = mapply(x8, x14)\n    x16 = combine(x15, x11)\n    x17 = fill(I, x2, x16)\n    x18 = hmirror(x17)\n    x19 = mostcolor(I)\n    O = fill(x17, x19, x18)\n    return O"], [1.0, "def solve_8d9cd7de(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = combine(x5, x4)\n    x7 = power(outbox, TWO)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = compose(x8, initset)\n    x10 = power(x9, FOUR)\n    x11 = fork(connect, x7, x10)\n    x12 = fork(recolor, color, x11)\n    x13 = mapply(x12, x2)\n    O = paint(I, x13)\n    return O"], [1.0, "def solve_560918e5(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = I(x3)\n    x5 = dmirror(x4)\n    x6 = papply(equality, x4, x5)\n    x7 = branch(x6, ONE, SEVEN)\n    O = canvas(x7, x7)\n    return O"], [1.0, "def solve_51822bb6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, asobject)\n    x4 = lbind(apply, numcolors)\n    x5 = chain(x4, asobject, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(size, x6)\n    x8 = chain(increment, x5, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = mapply(x9, I)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_22c390eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_e31e1135(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(inter000, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_56c7c989(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_6b2426c4(I):\n    x1 = astuple(THREE, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_cfe3a8fe(I):\n    x1 = paint(I, x1)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = astuple(x4, x4)\n    x6 = canvas(x3, x5)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x6, x8)\n    return O"], [1.0, "def solve_13515f6e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = insert(x8, x11)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x4)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(x14)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, TWO)\n    x21 = merge(x20)\n    x22 = decrement(x21)\n    x23 = input(x22, x21)\n    x24 = tophalf(x23)\n    x25 = shift(x21, x24)\n    x26 = lefthalf(x25)\n    x27 = tophalf(x26)\n    x28 = vmirror(x27)\n    x29 = hmirror(x28)\n    x30 = insert(x26, x21)\n    x31 = insert(x29, x30)\n    x32 = combine(x30, x31)\n    x33 = paint(x16, x32)\n    x34 = hmirror(x33)\n    O = vmirror(x34)\n    return O"], [1.0, "def solve_36c0b8e0(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a547d3bd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, toindices)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmax(x4, size)\n    x6 = color(x5)\n    x7 = subgrid(x5, x3)\n    x8 = fork(insert, vmirror, identity)\n    x9 = lbind(insert, x7)\n    x10 = compose(x9, x8)\n    x11 = power(x10, TWO)\n    x12 = x11(x9)\n    x13 = lbind(remove, x6)\n    x14 = compose(x13, x12)\n    x15 = fork(compose, x11, x14)\n    x16 = lbind(lbind, shift)\n    x17 = lbind(occurrences, x6)\n    x18 = compose(x16, x17)\n    x19 = fork(mapply, x18, x16)\n    x20 = rapply(x19, x4)\n    x21 = mapply(x16, x20)\n    O = paint(x3, x21)\n    return O"], [1.1, "def solve_66cd0eb0(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7a9c61d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(FOUR, FOUR)\n    x2 = portrait(I)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = asindices(x4)\n    x6 = ofcolor(x4, ZERO)\n    x7 = difference(x5, x6)\n    x8 = rbind(toobject, x4)\n    x9 = compose(x8, delta)\n    x10 = interval(x2, FIVE, ZERO)\n    x11 = rbind(multiply, width)\n    x12 = compose(x11, tojvec)\n    x13 = chain(x10, x12, initset)\n    x14 = lbind(fork, greater)\n    x15 = lbind(chain, flip)\n    x16 = lbind(x15, x13)\n    x17 = lbind(x16, astuple)\n    x18 = compose(x16, x17)\n    x19 = compose(x13, x18)\n    x20 = extract(x9, x19)\n    x21 = center(x20)\n    x22 = initset(x21)\n    x23 = center(x22)\n    x24 = subgrid(x226, x4)\n    x25 = fork(equality, identity, rot90)\n    x26 = compose(x25, x20)\n    x27 = fork(equality, identity, rot270)\n    x28 = compose(x27, x21)\n    x29 = fork(equality, identity, rot90)\n    x30 = compose(x29, x21)\n    x31 = fork(equality, identity, rot270)\n    x32 = compose(x31, x21)\n    x33 = fork(both, x26, x25)\n    x34 = fork(both, x24, x28)\n    x35 = fork(both, x33, x34)\n    x36 = astuple(x36, x35)\n    x37 = extract(x32, x36)\n    x38 = center(x37)\n    x39 = initset(x38)"], [1.1, "def solve_6798fd94(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 =8000(dae9001fccofdne22(I)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x10, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x6, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x4)\n    x16 = backdrop(x15)\n    x17 = toobject(x16, I)\n    x18 = identity(x17)\n    x19 = chain(x14, x10, x18)\n    x20 = rbind(contained, x11)\n    x21 = compose(x20, color)\n    x22 = sfilter(x15, x21)\n    x23 = size(x22)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, identity)\n    x26 = canvas(x25, UNITY)\n    x27 = asindices(x26)\n    x28 = center(x27)\n    x29 = dmirror(I)\n    x30 = initset(x22)\n    x31 = insert(x28, x30)\n    x32 = insert(x29, x31)\n    x33 = dmirror(x32)\n    x34 = asindices(x33)\n    x35 = center(x34)\n    x36 = initset(x35)\n    x37 = insert(x16, x36)\n    x38 = insert(x33, x37)\n    x39 = fill(x26, x4, x38)\n    x40 = fill(x39, x33, x34)\n    x41 = fill"], [1.1, "def solve_9dd5e7c1(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_2815a7f0(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, insert)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_ba15fdbb(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7666ef79(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = lowermost(x7)\n    x9 = compose(minimum, shape)\n    x10 = lowermost(x7)\n    x11 =1900(x9, x10)\n    x12 = power(x11, TWO)\n    x13 = uppermost(x7)\n    x14 =970(x12, x13)\n    x15 = astuple(x14, x414)\n    x16 = ulcorner(x7)\n    x17 = palette(x15)\n    x18 = palette(x10)\n    x19 = argmax(x17, x18)\n    x20 = remove(x19, x17)\n    x21 = other(x20, x19)\n    x22 = rbind(colorcount, x21)\n    x23 = colorcount(I, x21)\n    x24 = rbind(toobject, I)\n    x25 = compose(x22, delta)\n    x26 = rbind(colorcount, x21)\n    x27 = valmax(x21, x26)\n    x28 = matcher(x25, x27)\n    x29 = sfilter(x24, x28)\n    x30 = difference(x19, x29)\n    x31 = apply(e961498330, x29)\n    x32 = rbind(colorcount, x21)\n    x33 = rbind(toobject, I)\n    x34 = chain(x32, x33, backdrop)\n    x35 = apply(x34, x31)\n    x36 = sfilter(x3, x35)\n    x37 = apply(x22, x36)\n    x38 = size(x37)\n    x39 = subtract(x38, x37)\n    x40 = frontiers("], [1.1, "def solve_53d40512(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = matcher(first, FOUR)\n    x38 = sfilter(x28, x37)\n    x39 = center(x38)\n    x40 = matcher(first, NEG_ONE)\n    x41 = sfilter("], [1.1, "def solve_201f73f0(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8ee1277f(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_f3727679(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_e6afb92a(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_770b125f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_b16928d7(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_72918c35(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f824d0d5(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_0cffd2b2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_26948c91(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f6db8f2f(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_08d2c6f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_b05c68ca(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_e77d2eca(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(56129min, x27)\n    x39 = chain(size, x38, T)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_a80e03a5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(vsplit, identity, height)\n    x5 = chain(asobject, first, x4)\n    x6 = mostcolor(I)\n    x7 = lbind(chain, numcolors)\n    x8 = lbind(x7, x5)\n    x9 = lbind(chain, color)\n    x10 = lbind(x9, x5)\n    x11 = rbind(rapply, I)\n    x12 = compose(initset, x8)\n    x13 = chain(first, x11, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x10)\n    x16 = chain(first, x14, x15)\n    x17 = matcher(x13, ONE)\n    x18 = matcher(x16, x6)\n    x19 = compose(flip, x18)\n    x20 = fork(both, x17, x19)\n    x21 = argmax(x3, x20)\n    x22 = x21(I)\n    x23 = x5(x22)\n    x24 = color(x23)\n    x25 = palette(x22)\n    x26 = remove(x24, x25)\n    x27 = other(x26, x6)\n    x28 = objects(x22, T, T, T)\n    x29 = colorfilter(x28, x27)\n    x30 = ofcolor(x22, x24)\n    x31 = ofcolor(x22, x6)\n    x32 = mapply(neighbors, x31)\n    x33 = mapply(neighbors, x32)\n    x34 = lowermost(x30)\n    x35 = dneighbors(ORIGIN)\n    x36 = remove(DOWN, x35)\n    x37 = rbind(mapply, x36)\n    x38 = lbind(chain, x37)\n    "], [1.1, "def solve_a817586e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(I, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(greater, THREE)\n    x5 = chain(x4, size, dedupe)\n    x6 = compose(x5, x3)\n    x7 = fork(both, x7, x6)\n    x8 = sfilter(x1, x6)\n    x9 = difference(x1, x8)\n    x10 = insert(x10, x8)\n    x11 = apply(most, x10)\n    x12 = condition(x11, ZERO)\n    x13 = argmin(x1, size)\n    x14 = remove(x13, x10)\n    x15 = argmin(x14, size)\n    x16 = width(x12)\n    x17 = decrement(x16)\n    x18 = tojvec(x17)\n    x19 = height(x12)\n    x20 = decrement(x19)\n    x21 = lbind(astuple, x20)\n    x22 = chain(x21, decrement, height)\n    x23 = fork(subtract, x22, increment)\n    x24 = chain(increment, x17, x23)\n    x25 = shoot(x13, x18)\n    x26 = shoot(x15, x20)\n    x27 = combine(x25, x26)\n    x28 = combine(x71, x24)\n    x29 = combine(x27, x28)\n    x30 = tojvec(x29)\n    x31 = asobject(x19)\n    x32 = mapply(x23, x61)\n    x33 = asobject(x15)\n    x34 = toobject(x33, I)\n    x35 = asobject(x34)\n    x36 = height(x32)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = invert(x38)\n    x40 = shift(x31, x39)\n    x41 = fill"], [1.1, "def solve_4184d06b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =644(x2)\n    x4 = shape(I)\n    x5 = canvas(center, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(equality, x12, toindices)\n    x14 = chain(x9, x13, ulcorner)\n    x15 = fork(multiply, x14, toindices)\n    x16 = chain(x13, x15, rbind(subtract, FOUR)\n    x17 = fork(divide, x15, x16)\n    x18 = fork(equality, identity, x17)\n    x19 = fork(equality, identity, x18)\n    x20 = mostcolor(I)\n    x21 = matcher(x21, x20)\n    x22 = fork(both, x19, x21)\n    x23 = sfilter(x7, x22)\n    x24 = sfilter(x7, x18)\n    x25 = argmax(x23, minimum)\n    x26 = argmax(x24, width)\n    x27 = ulcorner(x25)\n    x28 = llcorner(x27)\n    x29 = add(x27, x28)\n    x30 = shift(x25, x29)\n    x31 = color(x30)\n    x32 = ofcolor(x23, x31)\n    x33 = argmax(x32, x23)\n    x34 = vmirror(x33)\n    x35 = normalize(x34)\n    x36 = color(x23)\n    x37 = increment(x6)\n    x38 = add(x37, x31)\n    x39 = shift(x35"], [1.1, "def solve_39655996(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = rot270(I)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = lbind(rbind, subtract)\n    x5 = lbind(x3, x4)\n    x6 = lbind(canvas, ZERO)\n    x7 = compose(x5, x6)\n    x8 = fork(paint, x7, last)\n    x9 = compose(x4, x8)\n    x10 = lbind(sfilter, x1)\n    x11 = rbind(compose, last)\n    x12 = lbind(rbind, sfilter)\n    x13 = chain(x11, x10, x12)\n    x14 = lbind(apply, first)\n    x15 = chain(lowermost, x13, x14)\n    x16 = lbind(rightbind, astuple)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x14)\n    x19 = compose(x4, x18)\n    x20 = compose(x1, cmirror)\n    x21 = fork(remove, x20, x14)\n    x22 = compose(last, x21)\n    x23 = fork(last, first, x22)\n    x24 = compose(lowermost, x23)\n    x25 = compose(rightmost, x24)\n    x26 = fork(equality, toindices, x25)\n    x27 = fork(sfilter, x23, x26)\n    x28 = fork(compose, x27, x23)\n    x29 = fork(argmin, x26, x28)\n    x30 = fork(astuple, x29, identity)\n    x31 = remove(x30, x1)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(multiply, x34, x309)\n    x36 = compose(x35, x29)\n    x37 = fork(apply, x36, x31"], [1.1, "def solve_4d53bcb2(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_d8b93e60(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_572bf88e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_0305bd26(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(canvas, ZERO)\n    x5 = compose(x4, x3)\n    x6 = fork(paint, x5, x3)\n    x7 = compose(rot90, x6)\n    x8 = power(x7, FOUR)\n    x9 = rot180(I)\n    x10 = dedupe(x9)\n    x11 = rot180(I)\n    x12 = dedupe(x11)\n    x13 = rot180(I)\n    x14 = dedupe(x13)\n    x15 = rot180(I)\n    x16 = dedupe(x15)\n    x17 = size(x10)\n    x18 = size(x12)\n    x19 = positive(x17)\n    x20 = branch(x19, x15, x14)\n    x21 = branch(x19, x16, x20)\n    x22 = compose(x4, x21)\n    x23 = argmax(x23, x22)\n    x24 = apply(x23, x18)\n    x25 = size(x24)\n    x26 = equality(x25, ONE)\n    x27 = branch(x26, x23, x24)\n    x28 = branch(x26, x228, x27)\n    x29 = branch(x26, x23, x24)\n    x30 = branch(x26, x22, x29)\n    x31 = multiply(TEN, TEN)\n    x32 = add(x31, TWO)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = branch(x33, x28, x30)\n    x35 = ZERO(x34)\n    x36 =44(x35)\n    x37 = shift(x36, x31)\n    x38 = paint(I, x37)\n    x39 = rot90(x38)\n    x40 = paint(x39, x37)\n    x41 = rot90(x40"], [1.1, "def solve_4c90c5bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_e8df6493(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_4fb61fc2(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = difference(x1, x9)\n    x11 = rbind(subgrid, I)\n    x12 = apply(x11, x10)\n    x13 = lbind(rbind,colorcount)\n    x14 = argmax(x12, x13)\n    x15 = palette(x14)\n    x16 = remove(x4, x15)\n    x17 = lbind(colorcount, x14)\n    x18 = argmin(x16, x17)\n    x19 = subgrid(x18, x6)\n    x20 = increment(x14)\n    x21 = rbind(greater, x20)\n    x22 = compose(x21, first)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = lbind(rbind, subtract)\n    x26 = lbind(occurrences, x24)\n    x27 = lbind(lbind, shift)\n    x28 = compose(x27, last)\n    x29 = lbind(rbind, adjacent)\n    x30 = fork(extract, first, x28)\n    x31 = compose(x29, x30)\n    x32 = fork( compose, x24, x31)\n    x33 = fork(apply, x38, x32)\n    x34 = rbind(intersection, x33)\n    x35 = compose(size, x34)\n    x36 = argmax(x21, x35)\n    x37 = rbind(shift, x36)\n    x38 =87(x37)\n    x39 = TWO(x38, x34)\n    x"], [1.1, "def solve_8381c246(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_80faa289(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = objects(I, T, T, T)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = vmirror(x2)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = subgrid(x6, I)\n    x8 = chain(position, lefthalf, tophalf)\n    x9 = fgpartition(x4)\n    x10 = merge(x9)\n    x11 = normalize(x10)\n    x12 = lbind(shift, x11)\n    x13 = height(x2)\n    x14 = height(x11)\n    x15 = divide(x13, x14)\n    x16 = width(x2)\n    x17 = width(x11)\n    x18 = divide(x16, x17)\n    x19 = vmirror(x8)\n    x20 = hmirror(x8)\n    x21 = shift(x19, x20)\n    x22 = SEVEN(x21)\n    x23 = argmax(x3, x22)\n    x24 = leastcolor(x23)\n    x25 = matcher(first, x24)\n    x26 = sfilter(x22, x25)\n    x27 = replace(x7, x24, x655)\n    x28 = argmin(x26, identity)\n    x29 = argmax(x28, identity)\n    x30 = ulcorner(x28)\n    x31 = rbind(subtract, x30)\n    x32 = height(x28)\n    x33 = rbind(multiply, x32)\n    x34 = chain(outbox, x31, x33)\n    x35 = width(x29)\n    x36 = divide(x35, x31)\n    x37 = increment(x36)\n    x38 = interval(ONE, x37, ONE)\n    x39 = sfilter(x38, x34)\n    x40 = invert(x39)\n    x41 =71(x40)\n    "], [1.1, "def solve_f2c8140e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = extract(x30, x31)\n    x33 = last(x32)\n    x34 = matcher(first, x11)\n    x35 = sfilter(x34, x24)\n    x36 = center(x35)\n    x37 = vfrontier(x36)\n    x38 = sfilter(x1, x22)\n    x39 = lbind(fork, intersection)\n    x40 = lbind(x39, outbox)\n    x41 = lbind(compose, x38"], [1.1, "def solve_b0a39c2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n    "], [1.1, "def solve_fcb49c5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply,numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_afd89778(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(extract, x1)\n    x3 = compose(x2, x1)\n    x4 = rbind(compose, initset)\n    x5 = lbind(rbind, manhattan)\n    x6 = chain(x4, x5, x3)\n    x7 = fork(sfilter, identity, x6)\n    x8 = compose(rot90, x7)\n    x9 = fork(shift, identity, x8)\n    x10 = rot270(I)\n    x11 = fork(shift, identity, x10)\n    x12 = compose(rot90, x11)\n    x13 = fork(shift, identity, x12)\n    x14 = size(I)\n    x15 = maximum(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = product(x16, x16)\n    x18 = rbind(multiply, THREE)\n    x19 = compose(x18, first)\n    x20 = rbind(multiply, TEN)\n    x21 = compose(x20, last)\n    x22 = fork(add, x19, x21)\n    x23 = fork(astuple, x19, x22)\n    x24 = lbind(canvas, NEG_ONE)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(connect, x23, x26)\n    x28 = rbind(contained, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(extract, x27)\n    x31 = compose(x30, x29)\n    x32 = fork(add, last, x31)\n    x33 = fork(astuple, x29, x32)\n    x34 = fork(connect, x33, x33)\n    x35 = rbind(branch, x730)\n    x36 = rbind(x35, x34)\n    x37 = rbind(contained, x51)\n    x38 = compose(x"], [1.1, "def solve_7d729b16(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = backdrop(x6)\n    x8 = shoot(x4, UNITY)\n    x9 = initset(x2)\n    x10 = insert(x7, x9)\n    x11 = mostcolor(I)\n    x12 = mapply(d43, x10)\n    x13 =insert(x7, x10)\n    x14 = width(I)\n    x15 = greater(x14, TWO)\n    x16 = insert(x15, x13)\n    x17 = mapply(dneighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = matcher(first, x19)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x12, x21)\n    x23 = difference(x12, x22)\n    x24 = fill(x5, TWO, x23)\n    x25 =\n    x26 = width(x24)\n    x26 = greater(x25, TWO)\n    x27 = increment(x26)\n    x28 =455(x22)\n    x29 = double(x28)\n    x30 = insert(x27, x29)\n    x31 = branch(x30, x22, x27)\n    x32 = branch(x30, x26, x27)\n    x33 = branch(x30, UP, LEFT)\n    x34 = x31(x33)\n    x35 =box(x34)\n    x36 = intersection(x31, x35)\n    x37 = fill(x24, TWO, x36)\n    x38 = replace(x37, x19, ONE)\n    x39 = lbind(contained, TWO)\n    x40 = compose(x39, palette)\n    x41 = sfilter(x34,"], [1.1, "def solve_4bdbff07(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_76782b65(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_919be0bf(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_cb02f1a6(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(add, leftmost, uppermost)\n    x7 = compose(toivec, x6)\n    x8 = fork(add, x5, x7)\n    x9 =2000(x5)\n    x10 = dmirror(x8)\n    x11 = numcolors(x10)\n    x12 = decrement(x11)\n    x13 = order(x1, x12)\n    x14 = leftmost(x13)\n    x15 = width(I)\n    x16 = interval(ZERO, x15, FOUR)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(greater, x14)\n    x20 = compose(x19, last)\n    x21 = apply(x20, x3)\n    x22 = combine(x18, x21)\n    x23 = rbind(repeat, x22)\n    x24 = compose(x23, tojvec)\n    x25 = apply(x24, x3)\n    x26 = combine(x17, x25)\n    x27 = hmirror(x26)\n    x28 = lbind(repeat, x27)\n    x29 = apply(x28, x3)\n    x30 = astuple(x11, x13)\n    x31 = x12(x30)\n    x32 = pair(x26, x31)\n    x33 = compose(size, last)\n    x34 = matcher(x33, ZERO)\n    x35 = sfilter(x32, x34)\n    x36 = lbind(compose, x5)\n    x37 = lbind(lbind, greater)\n    x38 = chain(x36,x37, last)\n    x39 = pair(x35, x35)\n    x40 ="], [1.1, "def solve_822eacbc(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(identity, cmirror)\n    x2 = hmirror(I)\n    x3 = index(x2, ORIGIN)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = recolor(x3, x4)\n    x6 = index(x2, x5)\n    x7 = subgrid(x5, x2)\n    x8 = remove(x7, x5)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = colorobject(x11, x10)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = subgrid(x13, x2)\n    x16 = height(x15)\n    x17 = increment(x16)\n    x18 = subgrid(x13, x15)\n    x19 = hmirror(x18)\n    x20 = increment(x19)\n    x21 = replace(x19, x10, x11)\n    x22 =1cf801(x21, x20)\n    x23 = x22(x2)\n    x24 = replace(x23, x10, x4)\n    x25 = ofcolor(x24, x10)\n    x26 = subgrid(x25, x24)\n    x27 = mapply(vfrontier, x25)\n    x28 = mapply(hfrontier, x25)\n    x29 = size(x27)\n    x30 = size(x28)\n    x31 = greater(x29, x30)\n    x32 = branch(x31, x28, x27)\n    x33 = fill(x26, x11, x32)\n    x34 =recolor(x33, x10)\n    x35 = mapply(x29, x28)\n    x36 = paint(x20, x35)\n    x37 =607 solve48678497ad(x33)\n    x38 =7745(x37)\n    x39 = recolor(x10, x38)\n"], [1.1, "def solve_94ac28e3(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 = divide(x2, THREE)\n    x4 = astuple(FOUR, FOUR)\n    x5 = canvas(THREE, x4)\n    x6 = asobject(x5)\n    x7 = rbind(toobject, I)\n    x8 = lbind(shift, x6)\n    x9 = compose(x7, x8)\n    x10 = multiply(x3, THREE)\n    x11 = power(x9, x10)\n    x12 = astuple(x3, x11)\n    x13 = astuple(x12, first)\n    x14 = astuple(x12, ZERO)\n    x15 = initset(x13)\n    x16 = insert(x14, x15)\n    x17 = backdrop(x16)\n    x18 = lbind(position, x17)\n    x19 = compose(x18, initset)\n    x20 = lowermost(x17)\n    x21 = rightmost(x17)\n    x22 = astuple(x20, x21)\n    x23 = lbind(greater, x22)\n    x24 = compose(x23, x19)\n    x25 = sfilter(x6, x24)\n    x26 = apply(x19, x25)\n    x27 = merge(x26)\n    x28 = apply(x25, x26)\n    x29 = compose(double, halve)\n    x30 = compose(double, last)\n    x31 = fork(equality, x29, x30)\n    x32 = compose(last, last)\n    x33 = compose(first, last)\n    x34 = fork(equality, x32, x33)\n    x35 = fork(either, x31, x34)\n    x36 = sfilter(x26, x35)\n    x37 = apply(x19, x36)\n    x38 = merge(x36)\n    x39 = cover(I, x38)\n    x40 =8925(x39)\n    x41 = mostcolor(x40)\n    O"], [1.1, "def solve_5dc739ab(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_7cbbcb87(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =76fgically(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = hmirror(x3)\n    x5 = vmirror(x3)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = vmirror(x7)\n    x9 = hmirror(x8)\n    x10 = astuple(x4, x5)\n    x11 = astuple(x9, x10)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x13)\n    x15 = asobject(x14)\n    x16 = height(x15)\n    x17 = width(x15)\n    x18 = decrement(x16)\n    x19 = astuple(x18, x17)\n    x20 = connect(ORIGIN, x19)\n    x21 = outbox(x20)\n    x22 = astuple(x17, x15)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = connect(ORIGIN, x24)\n    x26 = double(x17)\n    x27 = connect(ORIGIN, x26)\n    x28 = astuple(x24, x15)\n    x29 = astuple(x27, x15)\n    x30 = connect(x28, x29)\n    x31 = initset(ORIGIN)\n    x32 = box(x31)\n    x33 = difference(x32, x30)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = palette(I)\n    x37 = remove(x35, x36)\n    x38 = other(x37, x35)\n    x39 = ofcolor(x26, x38)\n    x40 = ofcolor(x25, x38)\n    x41 = combine(x39, x40)\n    x42 = intersection(x39,"], [1.1, "def solve_ee5755c3(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, size)\n    x3 = compose(x1, x2)\n    x4 = lbind(remove, TWO)\n    x5 = chain(x4, x3, x2)\n    x6 = fork( chain,x1, x5)\n    x7 = lbind(canvas, ZERO)\n    x8 = compose(x7, x6)\n    x9 = fork(4612d687, x8, shape)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ZERO)\n    x12 = lbind(497 either, ONE)\n    x13 = compose(x12, x11)\n    x14 = fork(both, x13, x7)\n    x15 = sfilter(x1, x14)\n    x16 = difference(x1, x15)\n    x17 = merge(x16)\n    x18 =66666666(x17, THREE)\n    x19 = mostcolor(I)\n    x20 = ofcolor(x18, x19)\n    x21 = apply(initset, x20)\n    x22 = rbind(manhattan, x3)\n    x23 = compose(x22, initset)\n    x24 = argmin(x21, x23)\n    x25 = ofcolor(x18, x19)\n    x26 =manhattan(x24, x25)\n    x27 = increment(x26)\n    x28 = injvec(x27)\n    x29 = shift(x25, x28)\n    x30 = toindices, x29)\n    x31 = rbind(shoot, x30)\n    x32 = mapply(x31, x28)\n    x33 = fill(x18, FOUR, x32)\n    x34 = ofcolor(x33, x19)\n    x35 = size(x34)\n    x36 = intersection(x28, x35)\n    x37 = fill(x33, ZERO, x36)\n    x38 = astuple(x19, x23)\n    x39 = canvas(ZERO"], [1.1, "def solve_84918bad(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x10)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x12)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_d3dbb4ac(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f1e24483(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b93ddf6b(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = replace(I, ZERO, x1)\n    x3 = normalize(x2)\n    x4 = occurrences(x2, x3)\n    x5 = lbind(shift, x3)\n    x6 = apply(x5, x4)\n    x7 = astuple(ONE, THREE)\n    x8 = astuple(FIVE, ONE)\n    x9 = astuple(TWO, SIX)\n    x10 = initset(x7)\n    x11 = insert(x8, x10)\n    x12 = insert(x9, x11)\n    x13 = rbind(contained, x12)\n    x14 = chain(flip, x13, ulcorner)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = height(x16)\n    x18 = vsplit(x16, x17)\n    x19 = hsplit(x18, x17)\n    x20 = extract(x19, x14)\n    x21 = extract(x19, x20)\n    x22 = width(x16)\n    x23 = divide(x22, THREE)\n    x24 = area(x16)\n    x25 = last(x24)\n    x26 = width(x12)\n    x27 = divide(x26, THREE)\n    x28 = astuple(x23, x27)\n    x29 = maximum(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(multiply, x30)\n    x32 = mapply(x31, x3)\n    x33 = canvas(x236, x32)\n    x34 = lbind(shift, x16)\n    x35 = mapply(x34, x30)\n    x36 = fill(x33, FOUR, x35)\n    x37 = shift(x3, x Tools)\n    x38 = occurrences(x32, x37)\n    x39 = fill(x36, FOUR, x38)\n    O = mapply(x39, x"], [1.1, "def solve_3158d264(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_bb93ee37(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_71a186b1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_79d79473(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = chain(positive, size, dmirror)\n    x7 = x6(I)\n    x8 = chain(x4, first, x7)\n    x9 = sfilter(x5, x8)\n    x10 = asindices(x9)\n    x11 = ofcolor(x9, x4)\n    x12 = toindices(x11)\n    x13 = mapply(first, x12)\n    x14 = fill(x9, ZERO, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x16, x14)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x19)\n    x25 = rbind(divide, x18)\n    x26 = apply(x24, x15)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = apply(x27, x28)\n    x30 = hconcat(x17, x17)\n    x31 = hconcat(x29, x27)\n    x32 = vconcat(x30, x31)\n    x33 = vconcat(x32, x17)\n    x34 = ofcolor(x33, ONE)\n    x35 =314(x34)\n    x36 = subgrid(x35, x33)\n    x37 = increment(x38)\n    x38 = branch(x37, x35, x37)\n    x39 = lbind(mapply, x36)\n    x40 = lbind"], [1.1, "def solve_e75aea00(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = delta(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = delta(x2)\n    x6 = box(x2)\n    x7 = intersection(x5, x6)\n    x8 = uppermost(x7)\n    x9 = uppermost(x2)\n    x10 = equality(x8, x9)\n    x11 = leftmost(x7)\n    x12 = leftmost(x2)\n    x13 = equality(x11, x12)\n    x14 = lowermost(x7)\n    x15 = lowermost(x2)\n    x16 = equality(x14, x15)\n    x17 = rightmost(x7)\n    x18 = rightmost(x2)\n    x19 = equality(x17, x18)\n    x20 = urcorner(x7)\n    x21 = ulcorner(x7)\n    x22 = llcorner(x7)\n    x23 = lrcorner(x7)\n    x24 = branch(x16, x22, x23)\n    x25 = branch(x13, x21, x24)\n    x26 = branch(x10, x20, x25)\n    x27 = branch(x16, x23, x20)\n    x28 = branch(x13, x22, x27)\n    x29 = branch(x10, x21, x28)\n    x30 = branch(x16, DOWN_LEFT, UNITY)\n    x31 = branch(x13, NEG_UNITY, x30)\n    x32 = branch(x10, UP_RIGHT, x31)\n    x33 = branch(x16, UNITY, UP_RIGHT)\n    x34 = branch(x13, DOWN_LEFT, x33)\n    x35 = branch(x10, NEG_UNITY, x34)\n    x36 = branch(x16, DOWN, RIGHT)\n    x37 = branch(x13, LEFT, x36)\n    x38 = branch(x10"], [1.1, "def solve_1f6763bc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x38, first)\n    x40 = fork(paint, x38, x39)\n    x41 = rbind(contained, x17"], [1.1, "def solve_02364e0a(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = rbind(toobject, I)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(colorcount, x1)\n    x7 = matcher(x6, EIGHT)\n    x8 = rbind(toobject, I)\n    x9 = matcher(x8,0000000)\n    x10 = rbind(colorcount, x1)\n    x11 = matcher(x10, EIGHT)\n    x12 = chain(x9, x11, backdrop)\n    x13 = lbind(fork, paint)\n    x14 = lbind(x13, identity)\n    x15 = lbind(rbind, colorcount)\n    x16 = compose(x14, x15)\n    x17 = lbind(colorfilter, x5)\n    x18 = chain(x16, x17, x16)\n    x19 = lbind(rbind, costgrid)\n    x20 = chain(x19, width, x8)\n    x21 = chain(corners, x18, x20)\n    x22 = lbind(chain, x21)\n    x23 = rbind(x22,asobject)\n    x24 = lbind(rbind, x contained)\n    x25 = chain(first, x23, x24)\n    x26 =997(x1, x25)\n    x27 = chain(x07, x25, xdmirror)\n    x28 = astuple(x26, x26)\n    x29 = astuple(NEG_TWO, x28)\n    x30 = astuple(x31, x29)\n    x31 = x17(x30)\n    x32 = papply(x27, x31)\n    x33 = papply(x29, x32)\n    x34 = ofcolor(I, x1)\n    x35 = combine(x34, x52)\n    x36 = intersection(x34, x35)\n    x37 = fill(I, ZERO, x36)"], [1.1, "def solve_217ad3e7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_06605e29(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =885(I)\n    x2 =887(x1, FOUR)\n    x3 = argmin(x2, size)\n    x4 = astuple(ONE, THREE)\n    x5 = astuple(TWO, FOUR)\n    x6 = initset(x4)\n    x7 = insert(x5, x6)\n    x8 = insert(x3, x7)\n    x9 = tojvec(x8)\n    x10 = tojvec(x1)\n    x11 = double(x10)\n    x12 = double(x11)\n    x13 = tojvec(x12)\n    x14 = tojvec(x11)\n    x15 = double(x9)\n    x16 = repeat(x13, x15)\n    x17 = Flake ring(x16)\n    x18 = compose(normalize, first)\n    x19 = fork(subtract, x18, last)\n    x20 = upscale(x17, x19)\n    x21 = asobject(x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = decrement(x23)\n    x25 = height(x21)\n    x26 = subtract(x24, x25)\n    x27 = width(x21)\n    x28 = decrement(x27)\n    x29 = width(x21)\n    x30 = subtract(x28, x29)\n    x31 = astuple(x26, x30)\n    x32 = canvas(ZERO, x31)\n    x33 = ulcorner(x2)\n    x34 = invert(x33)\n    x35 = shift(x34, x31)\n    x36 = ofcolor(I, x23)\n    x37 = lbind(shift, x35)\n    x38 = interval(x32, x32, ONE)\n    x39 = apply(x38, x36)\n    x40 = mapply(x37, x39)\n    x41 = astuple(x43, x40)\n    x42 = canvas(ZERO, x41)\n    O"], [1.1, "def solve_103b8b19(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_311eb51c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(sfilter, x1)\n    x2 = lbind(matcher, flip)\n    x3 = compose(x2, leastcolor)\n    x4 = chain(normalize, mostcolor, x3)\n    x5 = x4(I)\n    x6 = astuple(cmirror, dmirror)\n    x7 = astuple(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(x6, x8)\n    x10 = insert(x9, x8)\n    x11 = apply(x4, x10)\n    x12 = product(x11, x11)\n    x13 = sfilter(x12, first)\n    x14 = compose(last, first)\n    x15 = difference(x12, x13)\n    x16 = compose(last, last)\n    x17 = matcher(x14, x55)\n    x18 = sfilter(x15, x17)\n    x19 = lbind(recolor, TWO)\n    x20 = lbind(ofcolor, I)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, x21, x19)\n    x23 = compose(x19, x22)\n    x24 = fork(paint, x23, x12)\n    x25 = chain(x39, x40, x24)\n    x26 = mapply(x25, x13)\n    x27 = objects(x26, T, T, T)\n    x28 = mapply(toindices, x27)\n    x29 = box(x28)\n    x30 = difference(x29, x28)\n    x31 = intersection(x30, x28)\n    x32 = first(x31)\n    x33 = x30(x32)\n    x34 = ofcolor(I, TWO)\n    x35 =contained(ZERO, x34)\n    x36 = lbind(contained, TWO)\n    x37 = compose(x36, last)\n    x38 = sfilter(x34, x37)\n    x39 = center(x38)\n"], [1.1, "def solve_aa198d92(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_e763443b(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x34, ONE)\n    x36 = x35(x10)\n    x37 = x35(x11)\n    x38 = x35(x20)"], [1.1, "def solve_124b60c7(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained,ONE)\n    x2 = lbind(apply, x1)\n    x3 = compose(0520, x2)\n    x4 = lbind(equality, NINE)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(size, cmirror)\n    x8 = chain(DEPrement, x7, x6)\n    x9 = argmax(x10, x8)\n    x10 = multiply(x19, x9)\n    x11 = chain(x17, minimum, x10)\n    x12 = argmin(x00, x11)\n    x13 = other(x1, x12)\n    x14 = flip(x13)\n    x15 = branch(x14, identity, vmirror)\n    x16 = x15(x12)\n    x17 = objects(x16, T, T, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, x18)\n    x20 = chain(19, toindices, x19)\n    x21 = fork(add, first, x20)\n    x22 = chain(flip, x6, x21)\n    x23 = sfilter(x18, x22)\n    x24 = fork(contained, x23, identity)\n    x25 = normalize(x12)\n    x26 = lbind(shift, x25)\n    x27 = compose(x26, ulcorner)\n    x28 = fork(equality, identity, x27)\n    x29 = compose(x28, last)\n    x30 = rbind(multiply, x30)\n    x31 = rbind(shift, x30)\n    x32 = compose(x30, x31)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = rbind(multiply, x30)\n    x36 = rbind(shift, x33)\n    x37 = fork(connect, x35, x36)\n    x38 = compose("], [1.1, "def solve_c0d850cb(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_2eb5a999(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = remove(UNITY, x1)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = frontiers(I)\n    x5 = sfilter(x4, hline)\n    x6 = size(x5)\n    x7 = increment(x6)\n    x8 = divide(x3, x7)\n    x9 = width(I)\n    x10 = halve(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, vline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = halve(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, x26)\n    x32 = lbind(index, I)\n    x33 = lbind(compose, x12)\n    x34 = compose(x33, x25)\n    x35 = chain(x32, x34, x29)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, x25)\n    x38 = fork(equality, x37, x30)\n    x39 = palette(I)\n    x40 = sfilter(x39, x38)\n    x41 = lbind(colorcount, I)\n    x42 = argmin(x40, x41"], [1.1, "def solve_9424a4b5(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = shape(I)\n    x2 = divide(x1, THREE)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = last(x2)\n    x6 = ofcolor(I, x5)\n    x7 = asindices(I)\n    x8 = center(x7)\n    x9 = initset(x8)\n    x10 = insert(x4, x9)\n    x11 = insert(x5, x10)\n    x12 = frontiers(I)\n    x13 = sfilter(x12, hline)\n    x14 = size(x13)\n    x15 = positive(x14)\n    x16 = branch(x15, identity, dmirror)\n    x17 = x16(I)\n    x18 = rbind(multiply, x1)\n    x19 = compose(x18, identity)\n    x20 = shape(x17)\n    x21 = canvas(x20, x20)\n    x22 = lbind(greater, x21)\n    x23 = compose(x22, first)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(positive, size, x24)\n    x26 = rbind(compose, x00)\n    x27 = lbind(x26, x17)\n    x28 = rbind(compose, x23)\n    x29 = lbind(rbind, contained)\n    x30 = chain(x27, x28, x29)\n    x31 = lbind(fork, x22)\n    x32 = lbind(x31, identity)\n    x33 = lbind(rbind,compose)\n    x34 = chain(x32, x33, x30)\n    x35 = lbind(fork, x26)\n    x36 = fork(x55, x23, x32)\n    x37 = fork(compose, x36, x34)\n    x38 = lbind(matcher, x25)\n    x39 = compose(x38, x37)\n    x40 = fork(sfilter, x35, x39"], [1.1, "def solve_0c887db4(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(address, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_1f52ebbd(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(numcolors, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizefilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = rbind(add, ZERO_BY_TWO)\n    x22 = rbind(add, x20)\n    x23 = compose(x21, ulcorner)\n    x24 = compose(x22, urcorner)\n    x25 = fork(connect, x23, x24)\n    x26 = compose(even, last)\n    x27 = rbind(sfilter, x26)\n    x28 = chain(normalize, x27, x25)\n    x29 = fork(shift, x28, x21)\n    x30 = fork(recolor, color, x29)\n    x31 = mapply(x30, x15)\n    x32 = paint(x19, x31)\n    x33 = rot90(x32)\n    x34 = rot180(x32)\n    x35 = rot270(x32)\n    x36 = papply(pair, x32, x33)\n    x37 = apply(x12, x36)\n    x38 = papply(pair, x37, x34)"], [1.1, "def solve_d40d1ff0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = Fgpartition(I)\n    x2 = merge(x1)\n    x3 = box(x2)\n    x4 = fill(I, FOUR, x3)\n    x5 = subgrid(x2, x4)\n    x6 = argmax(x1, width)\n    x7 = uppermost(x6)\n    x8 = leftmost(x6)\n    x9 = height(x5)\n    x10 = width(x5)\n    x11 = divide(x9, x10)\n    x12 = add(x8, UNITY)\n    x13 = subtract(x12, x11)\n    x14 = uppermost(x6)\n    x15 = width(x6)\n    x16 = interval(x14, x15, ZERO)\n    x17 = add(x8, x16)\n    x18 = hsplit(x11, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = lbind(colorcount, x19)\n    x22 = compose(x21, first)\n    x23 = rbind(colorcount, x20)\n    x24 = matcher(x23, x22)\n    x25 = mfilter(x19, x24)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x5)\n    x28 = matcher(first, x20)\n    x29 = compose(flip, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = compose(x30, x15)\n    x32 = rbind(sfilter, x111)\n    x33 = compose(x32, x152)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x19)\n    x36 = lbind(e98196)\n    x37 = compose(x36, x30)\n    x38 = fork(apply, x37, x31)\n    x39 = fork(mapply, x35, x38)\n    x40 = fork(difference, x38, ZERO)\n    x41"], [1.1, "def solve_ae28a374(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =8900076363e21)\n    x6 = neighbors(UNITY)\n    x7 = toindices(x6)\n    x8 = box(x7)\n    x9 = rbind(825efilter, x8)\n    x10 =411170(x9)\n    x11 = x9(x10)\n    x12 = fill(I, x4, x11)\n    x13 = x9(x12)\n    x14 = interval(ONE, FIVE, ONE)\n    x15 = downscale(x13, x14)\n    x16 = objects(x12, F, F, T)\n    x17 = rbind(toobject, x15)\n    x18 = compose(vperiod, x17)\n    x19 = height(x12)\n    x20 = rbind(multiply, x19)\n    x21 = chain(x20, toindices, x18)\n    x22 = lbind(add, x5)\n    x23 = compose(x22, x21)\n    x24 = fork(add, first, x23)\n    x25 = compose(x17, x24)\n    x26 = shape(x15)\n    x27 = multiply(x26, x26)\n    x28 = lbind(multiply, x27)\n    x29 = x28(x15)\n    x30 = shift(x15, x29)\n    x31 = rbind(multiply, x30)\n    x32 = compose(x31, x241)\n    x33 = rbind(multiply, x32)\n    x34 = fork(add, x33, x24)\n    x35 = rbind(multiply, x30)\n    x36 = compose(x35, x24)\n    x37 = fork(add, x36, x37)\n    x38 = fork(equality, x38, x34)\n    x39 = sfilter(x18, x38)\n    x"], [1.1, "def solve_cd122d5f(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_2c434bab(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = x1(I)\n    x2 = objects(x1, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = chain(x3, minimum, shape)\n    x5 = sfilter(x2, x4)\n    x6 = fork(equality, toindices, box)\n    x7 = sfilter(x5, x6)\n    x8 = mostcolor(I)\n    x9 = palette(x7)\n    x10 = matcher(identity, x8)\n    x11 = argmin(x9, x10)\n    x12 = color(x11)\n    x13 = subgrid(x11, x1)\n    x14 = hmirror(x13)\n    x15 = argmin(x12, x14)\n    x16 = remove(x11, x15)\n    x17 =348(x16)\n    x18 = subgrid(x17, x1)\n    x19 = index(x18, DOWN)\n    x20 = lowermost(x15)\n    x21 = add(x20, x20)\n    x22 = width(x7)\n    x23 = rightmost(x15)\n    x24 = add(x23, x2)\n    x25 = height(x7)\n    x26 = *rightmost(x7)\n    x27 = width(x7)\n    x28 = interval(x26, x27, ONE)\n    x29 = add(x24, x27)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = lbind(shift, x17)\n    x33 = mapply(x32, x31)\n    x34 = interval(decrement, x22, ONE)\n    x35 = lbind(hmirror, x24)\n    x36 = astuple(x35, x)\n    x37 = lbind(cmirror, x17)\n    x38 = add(x37, x349)\n    x39 = x10(x38)\n    x40 = dmirror(x39)\n    x"], [1.1, "def solve_591f345a(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = shape(I)\n    x3 = maximum(x2)\n    x4 = interval(ZERO, x3, ONE)\n    x5 = interval(ONE, x3, ONE)\n    x6 = rbind(toobject, I)\n    x7 = rbind(shoot, RIGHT)\n    x8 = rbind(shoot, LEFT)\n    x9 = objects(x7, T, F, F)\n    x10 = rbind(shoot, DOWN)\n    x11 = rbind(shoot, UP)\n    x12 = rbind(shoot, DOWN)\n    x13 = mapply(x11, x9)\n    x14 = mapply(x12, x10)\n    x15 = combine(x13, x14)\n    x16 = apply(x15, x15)\n    x17 = lbind(canvas, ZERO)\n    x18 = lbind(occurrences, I)\n    x19 = compose(x17, x18)\n    x20 = lbind(recolor, ONE)\n    x21 = chain(x20,paint, x19)\n    x22 = lbind(ofcolor, I)\n    x23 = fork(size, x22, x21)\n    x24 = compose(maximum, x23)\n    x25 = apply(x24, x16)\n    x26 = repeat(x25, ONE)\n    x27 =047676(x26)\n    x28 = partition(x27)\n    x29 = lbind(colorcount, x27)\n    x30 = argmax(x28, x29)\n    x31 = apply(x30, x29)\n    x32 = matcher(contained, x31)\n    x33 = sfilter(x32, x32)\n    x34 = apply(color, x33)\n    x35 =64(x34)\n    x36 = astuple(ONE, THREE)\n    x37 = rbind(subtract, x36)\n    x38 = chain(halve, x37, x36)\n    x39 = fork(shift, x33, x38)\n    x40 = mapply"], [1.1, "def solve_f0cf962c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = objects(x26, s, F, T)\n    x28 = colorfilter(x27, x7)\n    x29 = rbind(contained, x27)\n    x30 = chain(flip, x29, last)\n    x31 = sfilter(x28, x30)\n    x32 = sfilter(x28, x24)\n    x33 = extract(x31, x32)\n    x34 = first(x33)\n    x35 = last(x33)\n    x36 = gravitate(x34, x35)\n    x37 = shift(x34, x36)\n    x38 = paint(x16, x37)\n    x39 = leftmost(x37)\n    x40 = rightmost(x37)\n    x41 = astuple(x39,"], [1.1, "def solve_aefdb417(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = switch(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = fork(add, height, width)\n    x4 = rbind(decrement, x3)\n    x5 = chain(decrement, x4, shape)\n    x6 = fork(equality, size, x5)\n    x7 = sfilter(x2, x6)\n    x8 = argmax(x7, x5)\n    x9 = leastcolor(x8)\n    x10 = ofcolor(I, x9)\n    x11 = center(x10)\n    x12 = multiply(x11, x4)\n    x13 = shift(x12, x11)\n    x14 = fill(I, x9, x13)\n    x15 = toindices(x13)\n    x16 = lbind(\"\"\"\n    x17 = box(x13)\n    x18 = maximum(x17)\n    x19 = lbind(multiply, x18)\n    x20 = toindices(x4)\n    x21 = lbind(intersection, x20)\n    x22 = chain(x19, size, x21)\n    x23 = argmax(x15, x22)\n    x24 = lbind(colorcount, x14)\n    x25 = argmin(x23, x24)\n    x26 = replace(x14, x25, x9)\n    x27 = color(x13)\n    x28 = colorfilter(x25, x27)\n    x29 = fill(x26, x39, x28)\n    x30 = argmin(x29, x22)\n    x31 = rbind(manhattan, x30)\n    x32 = compose(halve, x31)\n    x33 = fork(add, first, x32)\n    x34 = x33(x26)\n    x35 = x33(x24)\n    x36 = x33(x30)\n    x37 = fill(x29, x35, x36)\n    x38 = fill(x37, x41, x34)\n    x39 =fill("], [1.1, "def solve_06011d54(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(ppaint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_27375e2d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_52889f0d(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = mostcolor(I)\n    x29 = shape(x27)\n    x30 = multiply(x29, THREE)\n    x31 = x26(I)\n    x32 = maximum(x30)\n    x33 = lbind(astuple, x32)\n    x34 = lbind(shoot, x27)\n    x35 = rightmost(x27)\n    x36 = equality(x32, x35)\n    x37 = branch(x36, x33, x34)\n    x38 = apply(x37, x39)\n    x39 = leftmost(x27)\n    x40 = decrement(x39"], [1.1, "def solve_ecd5ad9d(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0008f503(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, rot90)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, size)\n    x27 = fork(sfilter, x25, x26)\n    x28 = lbind(colorcount, I)\n    x29 = argmax(x17, x28)\n    x30 = rbind(canvas, x3)\n    x31 = compose(x30, x22)\n    x32 = rbind(multiply, x6)\n    x33 = compose(x32, x19)\n    x34 = fork(equality, x33, x21)\n    x35 = rbind(n28, x34)\n    x36 = lbind(apply, x21)\n    x37 = chain(x131, x35, x36)\n    x38 = fork(sfilter, x27, x37)\n    x39 = fork(difference, x28, x38)\n"], [1.1, "def solve_6a535df9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = vsplit(I, TWO)\n    x7 = switch(x6, EIGHT, FOUR)\n    x8 = apply(x5, x7)\n    x9 = order(x8, identity)\n    x10 = last(x9)\n    x11 = remove(x10, x9)\n    x12 = compose(hmirror, merge)\n    x13 = lbind(compose, flip)\n    x14 = lbind(matcher, first)\n    x15 = chain(x13, x14, mostcolor)\n    x16 = fork(sfilter, identity, x15)\n    x17 = chain(increment, tojvec, x16)\n    x18 = lbind(lbind, shift)\n    x19 = chain(x17, x18, identity)\n    x20 = lbind(fork, greater)\n    x21 = compose(x20, last)\n    x22 = lbind(rbind, contained)\n    x23 = compose(x22, last)\n    x24 = rbind(compose, x21)\n    x25 = lbind(rbind, x24)\n    x26 = chain(x19, x24, x25)\n    x27 = compose(x5, x2)\n    x28 = fork(sfilter, identity, x27)\n    x29 = chain(first, x13, x28)\n    x30 = fork(compose, x29, x23)\n    x31 = compose(x5, x30)\n    x32 = fork(shift, identity, x31)\n    x33 = mapply(x360, x11)\n    x34 = mapply(x32, x10)\n    x35 = combine(x33, x34)\n    x36 = mapply(x32, x20)\n    x37 = mapply(x32, x27)\n    x38 = m"], [1.1, "def solve_94f0ea96(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(5521, UNITY)\n    x3 = rbind(subgrid, I)\n    x4 = chain(numcolors, x2)\n    x5 = matcher(x4, ONE)\n    x6 = compose(flip, x5)\n    x7 = rbind(sfilter, x6)\n    x8 = chain(positive, size, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(dmirror, merge)\n    x11 = chain(normalize, x10, x8)\n    x12 = chain(ff28, x11, x9)\n    x13 = chain(dmirror, x11, x12)\n    x14 = fork(concat, x11, x13)\n    x15 = fork(compose, x14, x11)\n    x16 = lbind(chain, size)\n    x17 = lbind(x16, x10)\n    x18 = rbind(compose, x17)\n    x19 = lbind(rbind, subtract)\n    x20 = chain(x18, x19, x15)\n    x21 = rbind(rapply, I)\n    x22 = initset(x7)\n    x23 = lbind(rapply, x22)\n    x24 = chain(first, x21, x23)\n    x25 = compose(x20, x24)\n    x26 = argmax(x9, x25)\n    x27 = first(x26)\n    x28 = last(x26)\n    x29 = x27(I)\n    x30 = x27(x28)\n    x31 = palette(x30)\n    x32 = shape(x30)\n    x33 = lbind(apply, first)\n    x34 = lbind(ofcolor, x30)\n    x35 = chain(x33, x34, x28)\n    x36 = replace(x30, SIX, ZERO)\n    x37 = apply(x35, x36)\n    x38 = astuple(x31, x"], [1.1, "def solve_45e52190(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = compose(normalize, toindices)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = normalize(x4)\n    x9 = paint(x7, x8)\n    x10 = shape(x4)\n    x11 = width(x9)\n    x12 = height(x9)\n    x13 = normalize(x4)\n    x14 = interval(x11, x12, ONE)\n    x15 = paint(x9, x14)\n    x16 = shape(x4)\n    x17 = interval(x13, x16, ONE)\n    x18 = rbind(toobject, x9)\n    x19 = lbind(278, multiply)\n    x20 = chain(x18, x19, mostcolor)\n    x21 = rbind(afivec, x10)\n    x22 = lbind(lbind, shift)\n    x23 = compose(x21, x22)\n    x24 = lbind(canvas, x5)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, x25, x24)\n    x27 = fork(remove, x23, x26)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(chain, x18)\n    x30 = lbind(x29, normalize)\n    x31 = lbind(x30, x27)\n    x32 = rbind(difference, x15)\n    x33 = compose(x31, x32)\n    x34 = rbind(apply, x15)\n    x35 = chain(size, x34, x28)\n    x36 = argmax(x17, x35)\n    x37 =06(x36, x31)\n    x38 = color(x37)\n    x39 =O = paint(x37, x38)\n    x40 = height("], [1.1, "def solve_01af9c72(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = hmirror(x2)\n    x4 = vmirror(x2)\n    x5 = dmirror(x2)\n    x6 = cmirror(x2)\n    x7 =11e(I)\n    x8 = hmatching(x7, x4)\n    x9 = branch(x8, identity, vmirror)\n    x10 = x9(I)\n    x11 = trim(x10)\n    x12 = palette(x11)\n    x13 = matcher(identity, x12)\n    x14 = vmirror(x11)\n    x15 = hmirror(x11)\n    x16 = vmirror(x15)\n    x17 = asindices(x16)\n    x18 = shift(x17, UNITY)\n    x19 = paint(x10, x18)\n    x20 = fgpartition(x19)\n    x21 = merge(x20)\n    x22 = center(x21)\n    x23 = dmirror(x21)\n    x24 = shift(x23, x22)\n    x25 = paint(x19, x24)\n    x26 = toindices(x24)\n    x27 = initset(x26)\n    x28 = remove(x25, x20)\n    x29 = insert(x28, x26)\n    x30 = product(x27, x29)\n    x31 = rbind(intersection, x22)\n    x32 = compose(size, x31)\n    x33 = matcher(x32, ZERO)\n    x34 = branch(x33, x44, x25)\n    x35 = flip(x34)\n    x36 = branch(x35, x24, x25)\n    x37 = branch(x35, x16, x25)\n    x38 = branch(x35, x22, x25)\n    x39 = branch(x35, x19, x27)\n    x40 = branch(x35, x36, x31)\n    x41 = branch("], [1.1, "def solve_8db7e957(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13) extract(x16, identity)\n    x17 = last(x16)\n    x18 = remove(x4, x16)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x13, x19)\n    x21 = rbind(first, x15)\n    x22 = compose(first, backdrop)\n    x23 = fork(compose, x21, x22)\n    x24 = lbind(lbind, shift)\n    x25 = height(x19)\n    x26 = matcher(x25, ZERO)\n    x27 = lbind(fork, both)\n    x28 = rbind(x27, x26)\n    x29 = extract(x15, x28)\n    x30 = center(x29)\n    x31 = matcher(last, x30)\n    x32 = compose(flip, x31)\n    x33 = center(x29)\n    x34 = initset(x33)\n    x35 = insert(x16, x34)\n    x36 = insert(x31, x35)\n    x37 = dmirror(x36)\n    x38 = lbind(shift, x37)\n    x39 = occurrences(x38, x38)\n    x40 = mapply(x38, x39)\n    x41 = fill"], [1.1, "def solve_97a8ed05(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_397bb0d0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_355127f1(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2770d49d(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a73b4210(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = objects(I, T, F, T)\n    x32 = apply(toindices, x31)\n    x33 = lbind(compose, normalize)\n    x34 = lbind(rbind, contained)\n    x35 = chain(x33, x34, leftmost)\n    x36 = chain(size, x32, x35)\n    x37 = equality(x36, ONE)\n    x38 = mapply(x37, x29)\n    x39"], [1.1, "def solve_064317bd(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =675(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = width(I)\n    x7 = equality(x5, x6)\n    x8 = toivec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = shape(I)\n    x11 = halve(x10)\n    x12 = canvas(ZERO, x11)\n    x13 = ofcolor(I, ZERO)\n    x14 = asindices(x13)\n    x15 = difference(x14, x13)\n    x16 = rbind(toobject, I)\n    x17 = compose(first, x16)\n    x18 = apply(x17, x15)\n    x19 = interval(ZERO, x5, ONE)\n    x20 = product(x19, x19)\n    x21 = apply(last, x20)\n    x22 = lbind(recolor, ZERO)\n    x23 = compose(x22,\n    x24 = matcher(first, ZERO)\n    x25 = rbind(sfilter, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = chain(x26, x25, x25)\n    x28 = chain(x27, x26, x25)\n    x29 = lbind(shift, x14)\n    x30 = fork(combine, x29, x28)\n    x31 = compose(x30, x23)\n    x32 = fork(mapply, x31, x29)\n    x33 = mapply(x32, x21)\n    O = paint(x12, x33)\n    return O"], [1.1, "def solve_3aa3d87a(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(remove, ZERO)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 =7523(I)\n    x5 = lbind(occurrences, x4)\n    x6 = compose(x5, x3)\n    x7 = fork(mapply, x3, x6)\n    x8 = compose(cmirror, x7)\n    x9 = fork(occurrences, x8, toindices)\n    x10 = compose(lrcorner, x9)\n    x11 = fork(shift, x10, x8)\n    x12 = compose(UNITY, x11)\n    x13 = leastcolor(I)\n    x14 = ofcolor(I, x13)\n    x15 = ulcorner(x14)\n    x16 = urcorner(x14)\n    x17 = shoot(x15, NEG_UNITY)\n    x18 = shoot(x16, UP_RIGHT)\n    x19 = combine(x17, x18)\n    x20 = underfill(I, x13, x19)\n    O = mapply(x12, x4)\n    return O"], [1.1, "def solve_03679c68(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = rbind(contained, x5)\n    x7 = compose(x6, first)\n    x8 = rbind(sfilter, x7)\n    x9 = lbind(rbind, subtract)\n    x10 = lbind(occ):\n    x11 = apply(x9, x5)\n    x12 = lbind(lbind, shift)\n    x13 = x17(x11)\n    x14 = x12(x12)\n    x15 = fork(apply, x7, x8)\n    x16 = fork(apply, x12, x14)\n    x17 = fork(paint, identity, x15)\n    x18 = identity(x16)\n    x19 = dmirror(I)\n    x20 = papply(pair, x19, x8)\n    x21 = lbind(apply, x17)\n    x22 = apply(x21, x20)\n    x23 = argmin(x22, x7)\n    x24 = other(x22, x23)\n    x25 = color(x23)\n    x26 = replace(x19, x25, x24)\n    x27 = apply(x16, x26)\n    x28 = color(x27)\n    x29 = ofcolor(x25, x28)\n    x30 = rbind(contained, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    O = fill(x45, x28, x33)\n    return O"], [1.1, "def solve_d41d2edc(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =6879641\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = toobject(x7, I)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = width(x12)\n    x14 = subtract(x13, ONE)\n    x15 = divide(x14, TWO)\n    x16 = height(x12)\n    x17 = subtract(x16, TWO)\n    x18 =160(x17)\n    x19 = lbind(shift, x12)\n    x20 = rbind(multiply, x15)\n    x21 = chain(x19, x20, x19)\n    x22 = astuple(x16, x18)\n    x23 = rbind(multiply, x22)\n    x24 =10(x23)\n    x25 = lbind(shift, x12)\n    x26 = rbind(multiply, x25)\n    x27 = chain(x24, x26, x19)\n    x28 = astuple(x18, x17)\n    x29 = rbind(multiply, x28)\n    x30 =10(x29)\n    x31 = lbind(shift, x12)\n    x32 = rbind(multiply, x15)\n    x33 = chain(x31, x32, x19)\n    x34 = combine(x26, x33)\n    x35 = mapply(x21, x34)\n    x36 = paint(I, x35)\n    O = subgrid(x3, x36)\n    return O"], [1.1, "def solve_56f45d23(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = rot197, merge)\n    x3 = valmax(x1, height)\n    x4 = matcher(size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 =1884615096444f830(I):\n    O = fill(I, FIVE, x8)\n    return O"], [1.1, "def solve_f19f03ad(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = rbind(Example output:\n    8224669124\n    2872000837\n    6213758198\n    5239174079\n    8895626318\n    2128321892\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    \"\"\"\n    x2 =92(ofcolor, I)\n    x3 = compose(first, last)\n    x4 = rbind(subgrid, I)\n    x5 = chain(x4, mostcolor, x3)\n    x6 = fork(650, x5, x4)\n    x7 = lbind(greater, THREE)\n    x8 = compose(x7, x6)\n    x9 = sfilter(x2, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.1, "def solve_3e58962e(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = sizefilter(x2, FOUR)\n    x4 = fork(equality, height, width)\n    x5 = fork(both, x3, x4)\n    x6 = extract(x3, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = backdrop(x6)\n    x9 =6666(x8, identity)\n    x10 = initset(x7)\n    x11 = matcher(x7, x10)\n    x12 = sfilter(x6, x11)\n    x13 = difference(x6, x12)\n    x14 = toobject(x13, I)\n    x15 = matcher(first, x1)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x14, x16)\n    x18 = merge(x17)\n    x19 = fill(I, TWO, x18)\n    x20 = color(x6)\n    O = fill(x19, x20, x2)\n    return O"], [1.1, "def solve_cd025170(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =9af4ty694\n    d687934510\n    4006941674\n    1100490694\n    8995020098\n    9706069391\n    975d9001ae(99fa2020\n    8097267001\n    7231163527\n    9214080289\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = ofcolor(I, ONE)\n    x5 = subgrid(x4, x2)\n    x6 = argmax(x4, width)\n    x7 = subgrid(x6, x3)\n    x8 = subgrid(x7, x2)\n    x9 = height(x8)\n    x10 = lowermost(x8)\n    x11 = width(x8)\n    x12 = divide(x9, x11)\n    x13 = upscale(x5, x12)\n    x14 = ofcolor(x13, ONE)\n    x15 = subgrid(x14, x8)\n    x16 = colorcount(x15, ZERO)\n    x17 = rightmost(x16)\n    x18 = add(x17, x10)\n    x19 = tojvec(x18)\n    x20 = vmirror(x15)\n    x21 = invert(x20)\n    x22 = shift(x20, x21)\n    x23 = apply(x22, x16)\n    x24 = maximum(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = astuple(x26, x22)\n    x28 = lbind(multiply, x27)\n    x29 = apply(x28, x26)\n    x30 = interval(ZERO, x5, ONE)\n    x31 = pair(x30, x30)\n    x32 = mapply(box, x31)\n    O = fill(x15, FOUR, x32)\n    return O"], [1.1, "def solve_73822e19(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, F, T, T)\n    x6 = rbind(6696, TWO)\n    x7 = rbind(colorcount, TWO)\n    x8 = argmax(x5, x7)\n    x9 = subgrid(x8, I)\n    x10 = rbind(contained, x4)\n    x11 = rbind(subtract, x4)\n    x12 = chain(x10, x11, minimum)\n    x13 = rbind(greater, ONE)\n    x14 = rbind(x13, TWO)\n    x15 = chain(x14, x11, normalize)\n    x16 = lbind(contained, TWO)\n    x17 =12(x16)\n    x18 = rbind(gravitate, x8)\n    x19 = compose(x18, initset)\n    x20 = fork(add, identity, x19)\n    x21 = fork(connect, identity, x20)\n    x22 = mapply(x21, x5)\n    O = fill(I, x4, x22)\n    return O"], [1.1, "def solve_36a6ad3e(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = fork(combine, x13, x17)\n    x19 = fork( apply(x18, x3)\n    x20 = rbind(argmin, lrcorner)\n    x21 = compose(x20, delta)\n    x22 = fork(subtract, x21, x15)\n    x23 = fork(shift, x17, x22)\n    x24 = rbind(x23, RIGHT)\n    x25 = compose(x24, ulcorner)\n    x26 = x25(x2)\n    x27 = fork(subtract, x26, x24)\n    x28 = fork(shift, x22, x27)\n    x29 = fork(combine, x28, x21)\n    x30 = mapply(x29, x3)\n    O = underfill(I, EIGHT, x30)\n    return O"], [1.1, "def solve_9ad341d6(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = totuple(x6)\n    x8 =66666666(x5, x7)\n    x9 = lbind(lbind, astuple)\n    x10 = lbind(chain, x9)\n    x11 = compose(x10, x4)\n    x12 = lbind(lbind, mapply)\n    x13 = x11(x12)\n    x14 = combine(x8, x13)\n    x15 = difference(x7, x14)\n    x16 = apply(x11, x15)\n    x17 = ofcolor(I, x5)\n    x18 = intersection(x17, x16)\n    O = fill(I, TWO, x18)\n    return O"], [1.1, "def solve_cfa5a811(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 =9097(I)\n    x2 = dmirror(I)\n    x3 = papply(pair, I, x1)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    x14 = apply(x4, x13)\n    x15 = ofcolor(x14, ZERO)\n    x16 = subgrid(x15, x14)\n    x17 = apply(x4, x16)\n    x18 = hmirror(x17)\n    x19 = papply(pair, x17, x18)\n    x20 = apply(x4, x19)\n    x21 = vmirror(x20)\n    x22 = papply(pair, x21, x20)\n    O = apply(x4, x22)\n    return O"], [1.1, "def solve_e45ea913(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = shape(I)\n    x2 = normalize(I)\n    x3 = mostcolor(I)\n    x4 = canvas(x3, x1)\n    x5 = objects(I, F, F, T)\n    x6 =65(x5)\n    x7 = mostcolor(x6)\n    x8 = first(x5)\n    x9 = matcher(first, x7)\n    x10 = sfilter(x8, x9)\n    x11 = normalize(x10)\n    x12 = objects(I, T, F, T)\n    x13 = compose(toindices, lrcorner)\n    x14 = matcher(x13, ZERO)\n    x15 = sfilter(x12, x14)\n    x16 = normalize(x15)\n    x17 = objects(I, T, F, T)\n    x18 = sizefilter(x17, TWO)\n    x19 = apply(invert, x18)\n    x20 = shift(x19, x17)\n    x21 = merge(x80)\n    x22 = fill(I, x7, x21)\n    x23 = shift(x20, x17)\n    x24 = fill(x22, x7, x23)\n    x25 = shift(x21, x17)\n    x26 = fill(x24, x7, x25)\n    O = paint(x26, x20)\n    return O"], [1.1, "def solve_b08cc038(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [1.1, "def solve_fd237548(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, x4)\n    x10 = rbind(adjacent, DOWN)\n    x11 = sfilter(x9, x10)\n    x12 =444(x11)\n    x13 =002(x12,80)\n    x14 = vmirror(x13)\n    x15 = objects(x14, T, F, T)\n    x16 = colorfilter(x15, x4)\n    x17 = rbind(bordering, I)\n    x18 = compose(flip, x17)\n    x19 = mfilter(x16, x18)\n    O = fill(I, EIGHT, x19)\n    return O"], [1.1, "def solve_ad949fc9(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = ONE(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = palette(x3)\n    x5 =71e2676(x4)\n    x6 = palette(x3)\n    x7 = intersection(x5, x6)\n    x8 =711219723(x2)\n    x9 = shape(x3)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(x3, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = FOUR(x13)\n    x15 = subgrid(x13, x14)\n    x16 = interval(ONE, FOUR, ONE)\n    x17 = lbind(power, rot90)\n    x18 = initset(x17)\n    x19 = chain(x18, repeat, fgpartition)\n    x20 = lbind(lbind, shift)\n    x21 = occurrences(x15, x16)\n    x22 = mapply(x20, x21)\n    O = paint(x10, x22)\n    return O"], [1.1, "def solve_d8dc42ad(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = argmax(I, size)\n    x2 = color(x1)\n    x3 = subgrid(x1, I)\n    x4 = objects(x3, F, T, T)\n    x5 = argmin(x4, size)\n    x6 = subgrid(x5, I)\n    x7 = normalize(x6)\n    x8 = height(x7)\n    x9 = width(x7)\n    x10 = ZERO(x8)\n    x11 = astuple(x10, x9)\n    x12 = add(x11, ORIGIN)\n    x13 = hupscale(x3, x12)\n    x14 = output:\n    x13, x7)\n    x15 = width(x7)\n    x16 = height(x7)\n    x17 = tojvec(x16)\n    x18 = lbind(shift, x7)\n    x19 = compose(x18, toivec)\n    x20 = height(x7)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = apply(x19, x22)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x23)\n    x26 = combine(x28, x25)\n    x27 = paint(x3, x26)\n    x28 = lbind(shift, x7)\n    x29 = rapply(x28, x25)\n    x30 = mapply(x29, x28)\n    x31 = paint(x27, x30)\n    O = branch(x5, x30, x31)\n    return O"], [1.1, "def solve_17defa96(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(shift, I)\n    x2 = lbind(multiply, THREE)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = chain(decrement, dmirror, x4)\n    x6 = fork(equality, toindices, x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x1, x7)\n    x9 = x5(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 =565(x10)\n    x13 = in2005(x12)\n    x14 =730(x10)\n    x15 = lefthalf(x14)\n    x16 = righthalf(x14)\n    x17 = rbind(order, leftmost)\n    x18 = compose(x17, x16)\n    x19 = rbind(order, rightmost)\n    x20 = compose(x19, x16)\n    x21 = rbind(order, ZERO_BY_TWO)\n    x22 = compose(x21, x19)\n    x23 = fork(combine, x18, x20)\n    x24 = fork(combine, x23, x22)\n    x25 = compose(x24, backdrop)\n    x26 = fork(recolor, x25, x20)\n    x27 = mapply(x26, x8)\n    x28 = paint(x10, x27)\n    x29 = dmirror(x28)\n    x30 = objects(x29, T, F, T)\n    x31 =907(x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = pair(x33, x30)\n    x35 = mapply(last, x34)\n    x36 = paint(x27, x35)\n    O = x5(x36)\n    return O"], [1.1, "def solve_ecc72f4c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = height(I)\n    x2 = decrement(x1)\n    x3 =81(I)\n    x4 = astuple(x3, x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    x7 = vconcat(x5, x6)\n    x8 = double(x2)\n    x9 = compose(multiply, last)\n    x10 = argmin(x7, x9)\n    O = mostcolor(x10)\n    return O"], [1.1, "def solve_4da80f6c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = replace(x6, NEG_ONE, ZERO)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter, x21, x17)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x26 = canvas(x24, x25)\n    x27 = paint(x26, x2)\n    x28 = normalize(x11)\n    x29 = matcher(first, x3)\n    x30 = compose(flip, x29)\n    x31 = sfilter(x28, x30)\n    x32 = shape(x28)\n    x33 = increment(x32)\n    x34 = matcher(first, FOUR)\n    x35 = sfilter(x28, x34)\n    x36 = center(x35)\n    x37 = multiply(x33, x36)\n    x38 = shift(x31, x37)\n    O = paint(x27, x38)\n    return O"], [1.1, "def solve_24147c9c(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =782(x2)\n    x4 = apply(color, x3)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(shift, x4)\n    x8 = mapply(x7, x5)\n    O = fill(x6, TWO, x8)\n    return O"], [1.1, "def solve_cbd0aacf(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = ofcolor(I, x8)\n    x10 = urcorner(x9)\n    x11 = ulcorner(x9)\n    x12 = shoot(x11, NEG_UNITY)\n    x13 = shoot(x11, UP_RIGHT)\n    x14 = combine(x12, x13)\n    x15 = underfill(I, ZERO, x14)\n    x16 = objects(x15, T, F, T)\n    x17 =597158(x16, merge)\n    x18 = center(x17)\n    x19 = shoot(x18, DOWN_LEFT)\n    x20 = shoot(x18, UNITY)\n    x21 = combine(x19, x20)\n    x22 =47(x21)\n    x23 = asindices(x11)\n    x24 = ofcolor(x11, x8)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    x29 = asindices(I)\n    x30 = shape(x11)\n    x31 = intersection(x29, x30)\n    x32 = fill(x11, x8, x31)\n    x33 = compose(first, last)\n    x34 = fork(recolor, x33, first)\n    x35 = mapply(x34, x28)\n    x36 = paint(x32, x35)\n    O = replace(x36, x8, x5)\n    return O"], [1.1, "def solve_386042f0(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 =755522455\n    0942255522\n    4285065628\n    1980568079\n    9599496669\n    2740694924\n    9595380864\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [1.1, "def solve_0e1c23e2(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = chain(x4, x3, cmirror)\n    x6 = matcher(x5, ZERO)\n    x7 = extract(x1, x6)\n    x8 =49810(x7)\n    x9 = argmax(x8, identity)\n    x10 = leastcolor(x9)\n    x11 = matcher(first, x10)\n    x12 = sfilter(x8, x11)\n    x13 = merge(x12)\n    x14 = vmirror(x13)\n    x15 = mostcolor(I)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = fill(x17, x10, x14)\n    x19 = lbind(e179, x10)\n    x20 = lbind(occurrences, x18)\n    x21 = lbind(lbind, shift)\n    x22 = compose(x21, toindices)\n    x23 = chain(x19, x21, x22)\n    x24 = lbind(mapply, x23)\n    x25 = rbind(occurrences, x18)\n    x26 = lbind(mapply, x24)\n    x27 = chain(x25, x26, x22)\n    x28 = astuple(cmirror, dmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = combine(x28, x29)\n    x31 = product(x30, x30)\n    x32 = fork(compose, first, last)\n    x33 = apply(x32, x31)\n    x34 =0191524 x33)\n    x35 = combine(xsIX, x34)\n    x36 = paint(x20, x35)\n    O = paint(x36, x36)\n    return O"], [1.1, "def solve_faca5f25(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x NEG_UNITY)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    x36 = fill(x35, x11, x34)\n    O = fill(x36, x10, x35)\n    return O"], [1.1, "def solve_a1e40878(I):\n    \"\"\"\n    Example input:\n    8503864512\n    2871000552\n    6137589828\n    5449164071\n    8856875935\n    2135321896\n    9584826867\n    6446954041\n    7542773805\n    5415670015\n    Example output:\n    4692040246\n    6846530177\n    5719937458\n    4381068583\n    0986582311\n    6332802649\n    8803448058\n    5491590811\n    0926441142\n    5224339357\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =48(I)\n    x3 = replace(I, x1, ZERO)\n    x4 = compose(dmirror, merge)\n    x5 = x4(x3)\n    x6 = astuple(NEG_TWO, NEG_TWO)\n    x7 = shift(x5, x6)\n    x8 = fork(combine, vfrontier, hfrontier)\n    x9 = mapply(x8, x7)\n    O = underfill(x3, x1, x9)\n    return O"], [1.1, "def solve_6e045321(I):\n    \"\"\"\n    Example input:\n    9642774733\n    7922716310\n    9115598205\n    5818857658\n    8989710654\n    9730334532\n    3078694340\n    7873568761\n    7229115391\n    9482885806\n    Example output:\n    9311749625\n    3977970388\n    9426692506\n    5117314901\n    2812073028\n    1989842683\n    0921489449\n    8199725000\n    1007611993\n    2590533300\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(x1, ZERO)\n    x3 = astuple(ZERO, ORIGIN)\n    x4 = initset(x3)\n    x5 = upscale(x4, TWO)\n    x6 = portrait(x5)\n    x7 = branch(x6, ZERO, RIGHT)\n    x8 = ulcorner(x5)\n    x9 = add(x8, UNITY)\n    x10 = shift(x9, TWO_BY_TWO)\n    x11 = branch(x6, toindices, box)\n    x12 = fork(combine, hfrontier, vfrontier)\n    x13 = x12(x110)\n    x14 = corners(x5)\n    x15 = ofcolor(x14, ZERO)\n    x16 = mapply(x12, x15)\n    x17 = difference(x10, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x19, x20)\n    x22 = other(x21, x1)\n    x23 = ofcolor(x18, x22)\n    x24 = lbind(shift, x18)\n    x25 = halve(x4)\n    x26 =345(x25)\n    x27 = subgrid(x23, x26)\n    O = trim(x27)\n    return O"], [1.1, "def solve_e4b21d87(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =44mirror(x2)\n    x4 = replace(I, NINE, ZERO)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = color(x3)\n    x7 = lbind(shift, x3)\n    x8 = apply(x7, x5)\n    x9 = mapply(x8, x4)\n    O = paint(x4, x9)\n    return O"], [1.1, "def solve_16354b3c(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =52(I)\n    x5 = matcher(first, x3)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = sizefilter(x7, ONE)\n    x9 = merge(x8)\n    O = fill(I, NINE, x9)\n    return O"], [1.1, "def solve_d9e6655e(I):\n    \"\"\"\n    Example input:\n    1904819022\n    1871734925\n    0658386773\n    0521677773\n    3156416299\n    2574480836\n    6695052108\n    0442440932\n    7922814295\n    9852983454\n    Example output:\n    5317171842\n    6051032605\n    1950881347\n    0859049547\n    5187778229\n    7110710915\n    7634163439\n    8545864735\n    7268425025\n    9179065291\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width761259726\n    70721528170\n    0583544745\n    5784467579\n    5526432855\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_ff971bee(I):\n    \"\"\"\n    Example input:\n    8471752405\n    8621459543\n    6266056379\n    8892213277\n    3037781921\n    2114990780\n    9256429257\n    4453524830\n    7416328233\n    6017120827\n    Example output:\n    0037216967\n    6627753085\n    6801674432\n    9760400985\n    8063522192\n    5699694495\n    0449018065\n    3983483043\n    7468179895\n    1091529096\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = apply(normalize, x3)\n    x5 = chain(d687, toindices, x4)\n    x6 = lbind(difference, x1)\n    x7 = compose(x6, toindices)\n    x8 = chain(positive, size, x7)\n    x9 = lbind(lbind, shift)\n    x10 = apply(x9, x8)\n    x11 =552299b230(x10)\n    x12 = lbind(ofcolor, x4)\n    x13 = compose(x12, x8)\n    x14 = fork(recolor, x13, identity)\n    x15 = mapply(x14, x12)\n    x16 = paint(I, x15)\n    x17 =Revppaint(x16, x1)\n    O = objects(x17, T, F, T)\n    return O"]]}