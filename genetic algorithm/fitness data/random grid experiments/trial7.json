{"d56f2372": [[0.273995593168007, "def solve_1eca1f34(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.273995593168007, "def solve_38dc835d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.3346827117477524, "def solve_475c4085(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_1fa191e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_97b398a2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_0c7e9890(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_ac8ccb35(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_5c2057be(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_e224493a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_7c72e916(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_97d7059b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_ace67c88(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_77cff79d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_44436da6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_0c4b7d1f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41699831998382725, "def solve_c45544a3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.41699831998382725, "def solve_ee5f06e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.4245388866968078, "def solve_6b142084(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.4483924519971234, "def solve_dc6f3e67(I):\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x2)\n    O = hconcat(x5, x2)\n    return O"], [0.4544472391184824, "def solve_13faca88(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4559751358985313, "def solve_daccb4df(I):\n    x1 = palette(I)\n    x2 = contained(ONE, x1)\n    x3 = contained(TWO, x1)\n    x4 = branch(x2, UNITY, TWO_BY_TWO)\n    x5 = branch(x3, RIGHT, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x8, FIVE, x7)\n    return O"], [0.4576239316239316, "def solve_bd77c19b(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = subgrid(x3, x2)\n    x6 = palette(x4)\n    x7 = contained(ONE, x6)\n    O = branch(x7, x5, x4)\n    return O"], [0.47145600561542583, "def solve_6b324449(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.47145600561542583, "def solve_88c3a234(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.47145600561542583, "def solve_e75085ab(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.47145600561542583, "def solve_ee8557e0(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.49704719435154215, "def solve_4a06ad37(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_83c5d3d0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_ed0713cf(I):\n    O = canvas(ZERO, THREE_BY_THREE)\n    return O"], [0.49704719435154215, "def solve_5bdef4a0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_8e6a8b73(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5056030890741036, "def solve_a538493d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_ea1caedb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_0c0421f7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_5e93db63(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_274c93cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5076714638018985, "def solve_4aa27410(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, height)\n    x3 = subgrid(x2, I)\n    O = trim(x3)\n    return O"], [0.5130794983512649, "def solve_920b716e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.522053676865271, "def solve_e247eed7(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = ofcolor(I, x1)\n    x5 = intersection(x3, x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(THREE, x6)\n    O = fill(x7, ZERO, x5)\n    return O"], [0.5227867867657312, "def solve_d8b2192b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x4, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x5, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.5307798906710026, "def solve_5ba617d4(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_feaf43e7(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_ac04d8c8(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_e11f45de(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_e19a07ba(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_f81b582a(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5521231765451099, "def solve_d15ffe74(I):\n    O = downscale(I, TWO)\n    return O"], [0.5585024261811583, "def solve_88492f5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_7862e82c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_eef88931(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_ec8a7ba3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_3ac81dae(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_75253537(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5652441058672942, "def solve_594aab39(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5652441058672942, "def solve_f000d209(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_ab5717e2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.597602058740802, "def solve_ff3e3391(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.5985774392006277, "def solve_34f6200c(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.6016750389108988, "def solve_2ee1cf76(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6016750389108988, "def solve_10ddfa34(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.601986706041267, "def solve_4e91ceba(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [0.6181018953185965, "def solve_2d5013b2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_4686be5e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_3fb27ea4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_4dbd82e5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_10fab110(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_194e28d8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_1942f4e0(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_afb6ab3f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_e1570c8c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6206220158679393, "def solve_e1da81e2(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6215666154221785, "def solve_56eba404(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [0.6291436647232063, "def solve_28a0ef71(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_c5737642(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_05335b56(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_a6f5aca8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_8a9de9bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_a1b13ac0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_ced19998(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_22da10a5(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_0e14f048(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6307531254528715, "def solve_764b2bcb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6411654239156103, "def solve_820494c1(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.6416977053214553, "def solve_e8bc789f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6416977053214553, "def solve_419857c4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6572952903476961, "def solve_7da2e58a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6602138625163511, "def solve_16d230f2(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_1ce68798(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_5924995a(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6602138625163511, "def solve_4d353fd4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6662146786568869, "def solve_7e670e80(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.6674861298852472, "def solve_772e7cfa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_ae5737d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6680066769062473, "def solve_193e9875(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = rot90(x30)\n    return O"], [0.6703093706701909, "def solve_1a349f4f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = size(I)\n    x5 = positive(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = palette(x8)\n    x11 = palette(x9)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = shape(x8)\n    x15 = canvas(x13, x14)\n    x16 = ofcolor(x8, x13)\n    x17 = ofcolor(x9, x13)\n    x18 = intersection(x16, x17)\n    O = fill(x15, TWO, x18)\n    return O"], [0.6703093706701909, "def solve_c17e5a67(I):\n    x1 = height(I)\n    x2 = equality(x1, TWO)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [0.6703093706701909, "def solve_4e091057(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6703093706701909, "def solve_04965cd9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6960644532404631, "def solve_b8e525cc(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.6960644532404631, "def solve_ebf739a0(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.6960644532404631, "def solve_a6c35bb6(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.6978401405853463, "def solve_bbf8da1a(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.6978401405853463, "def solve_d4b2c0f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.6987388351439324, "def solve_84cad5fa(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.704294390699488, "def solve_5ee29d0d(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = upscale(I, x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = vupscale(I, x7)\n    x9 = asobject(x8)\n    x10 = shift(x9, UNITY)\n    O = paint(I, x10)\n    return O"], [0.7046776153928492, "def solve_9d7fd276(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.7046776153928492, "def solve_0dc55135(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.7046776153928492, "def solve_eb96cb35(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.7046776153928492, "def solve_7718d16f(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.7099114259397045, "def solve_5f663faf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.7209201828843647, "def solve_dbbf0658(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.7209610573661548, "def solve_98094b0c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7209610573661548, "def solve_99e148ab(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7209610573661548, "def solve_1942f6a5(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7220296100651739, "def solve_f630a98f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7253714992428528, "def solve_ba13400d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7263060507626401, "def solve_bd183454(I):\n    x1 = width(I)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x1)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O"], [0.7265166129217103, "def solve_d4739b48(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7265166129217103, "def solve_d82cdcae(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7265166129217103, "def solve_d8713635(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7328905276644612, "def solve_85df7c3f(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = switch(x1, ONE, TWO)\n    x4 = apply(x2, x3)\n    x5 = switch(x4, ONE, TWO)\n    O = cmirror(x5)\n    return O"], [0.7349867133677571, "def solve_838abe8c(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7351236266103043, "def solve_168ea23c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork( add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, FOUR, x29)\n    return O"], [0.7361102977736663, "def solve_00895131(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7361102977736663, "def solve_093bc945(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.739396261410893, "def solve_209d6837(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.739396261410893, "def solve_a0707d65(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.739396261410893, "def solve_3b8f8b0c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_38db470a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_32363757(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.739396261410893, "def solve_b624823f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_3ed1564f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7408381713528028, "def solve_be0967b7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7410481494354517, "def solve_0f4cfdf2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7410606318002912, "def solve_7eb0c9e0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7410974414427098, "def solve_0cc05f66(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7411341780448716, "def solve_c2cd1069(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c4d64c3d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_b65500cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_d535e67c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c314a3a7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7414654147115858, "def solve_75c4719f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_b87a61ad(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_50727d36(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_4a7f53f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_408af10f(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.7414654147115858, "def solve_e47b5d44(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7414654147115858, "def solve_bd1643c9(I):\n    O = switch(I, THREE, FOUR)\n    return O"], [0.7414654147115858, "def solve_4ce73dec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, THREE, x26)\n    return O"], [0.7414654147115858, "def solve_e5bbb8c8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_c8b083f9(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.7414654147115858, "def solve_4b6458aa(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, ZERO, x4)\n    return O"], [0.7414654147115858, "def solve_b34d094e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_9808e6aa(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_1f7e96df(I):\n    x1 = rot270(I)\n    x2 = shoot(ORIGIN, UNITY)\n    O = rot90(x1)\n    return O"], [0.7414654147115858, "def solve_1a629316(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7415879821341823, "def solve_fdfebfca(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7418642138333315, "def solve_d5cfaaa2(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, NINE)\n    x4 = switch(x3, ONE, FOUR)\n    O = switch(x4, EIGHT, NINE)\n    return O"], [0.7418642138333315, "def solve_b495cf3a(I):\n    O = switch(I, EIGHT, TWO)\n    return O"], [0.7419294883893283, "def solve_5db04b51(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_49d4186d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_f24d0ebe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_02a89004(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_7838e3ab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_e3a4eff9(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_407fc4db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_045d37fe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_be7ae088(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_057f227c(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_35ba5af2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x765 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x765)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_94e474e4(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_ef5ed793(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_149b7eab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_9d1e76b5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7420260064287781, "def solve_8fef37f2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7426909638249383, "def solve_ff5dc2cb(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.74298892995093, "def solve_b96ae874(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x9, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 =x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.74298892995093, "def solve_04e5e1da(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.7430839091203382, "def solve_620ec29e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.74355054926223, "def solve_6da06de9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(x2)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = shift(x2, x8)\n    O = paint(I, x9)\n    return O"], [0.7438868773677392, "def solve_d2252d53(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = compose(x4, center)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x2)\n    x8 = paint(I, x7)\n    O = cover(x8, x3)\n    return O"], [0.744309578111282, "def solve_c13ead6f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.744309578111282, "def solve_609701e2(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_f03e0b76(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_a9428b8f(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7448492898496154, "def solve_c840a2ca(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.744932556029496, "def solve_a695d08e(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.7454492496039794, "def solve_cba8ff14(I):\n    x1 = height(I)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = subtract(x1, TWO)\n    x5 = divide(x4, THREE)\n    x6 = astuple(x5, x5)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = partition(x7)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = initset(x2)\n    x13 = palette(x3)\n    x14 = palette(x11)\n    x15 = difference(x13, x14)\n    x16 = difference(x15, x12)\n    x17 = first(x16)\n    x18 = interval(ZERO, THREE, ONE)\n    x19 = product(x18, x18)\n    x20 = totuple(x19)\n    x21 = apply(first, x20)\n    x22 = apply(last, x20)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x21)\n    x25 = apply(x23, x22)\n    x26 = papply(add, x24, x21)\n    x27 = papply(add, x25, x22)\n    x28 = papply(astuple, x26, x27)\n    x29 = lbind(shift, x11)\n    x30 = mapply(x29, x28)\n    O = underfill(I, x17, x30)\n    return O"], [0.7454776898542618, "def solve_b29aad50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.7459462735098249, "def solve_e6af0c09(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.746036831698095, "def solve_2244a8de(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7462669862994846, "def solve_cdfc81a3(I):\n    O = dmirror(I)\n    return O"], [0.7464740545096182, "def solve_cbb85e73(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_53ff9664(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, x5, x2)\n    return O"], [0.7464740545096182, "def solve_95198b43(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_565abbe6(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_005df2b3(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7470153090299405, "def solve_8d54d2e9(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, NEG_ONE, x3)\n    return O"], [0.7470375666629149, "def solve_2a96e83a(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.7470375666629149, "def solve_a9fbb9cf(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.7476233794761621, "def solve_e6b81b35(I):\n    O = rot180(I)\n    return O"], [0.7476233794761621, "def solve_3c5135af(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = subgrid(x3, x1)\n    return O"], [0.7480205264928822, "def solve_e3dea5c4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7480983828045926, "def solve_e10b7db7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7481170341881848, "def solve_a599a311(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_d5f1f670(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_4029763f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_d03213e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7482565735643151, "def solve_5e1d6cf1(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_3aa0b20b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_6f6586d3(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_2ffdef67(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_170e6eb2(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_5c6a7255(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_0562b09e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_6bf5ed83(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_2f954550(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_52f7f1d5(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7484974551407092, "def solve_f996de7b(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7485427567125599, "def solve_66c3b834(I):\n    O = vmirror(I)\n    return O"], [0.7487022635082722, "def solve_1a1ea0b3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7487035816092084, "def solve_e4cf7a5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7487035816092084, "def solve_0d67ec31(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7491210583733974, "def solve_0911b665(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.749321253046244, "def solve_391d07f0(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7498499462550435, "def solve_6caeaa0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [0.7498847791973963, "def solve_b7f16dad(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.7503543036004746, "def solve_0f66d46c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.7516076730507363, "def solve_f9c3d2a9(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.7516076730507363, "def solve_c854580d(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.7518753424364076, "def solve_6f00be31(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7525610969878994, "def solve_dcaafdad(I):\n    x1 = asobject(I)\n    x2 = flip(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = mostcolor(I)\n    x6 = objects(x4, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x4, TWO, x9)\n    O = replace(x10, NEG_ONE, ZERO)\n    return O"], [0.7555897040294098, "def solve_518bcd12(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = rbind(shoot, DOWN)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = fork(combine, x2, x5)\n    x8 = fork(combine, x3, x6)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x1)\n    O = fill(I, ZERO, x10)\n    return O"], [0.7598499462550435, "def solve_69c62704(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7598499462550435, "def solve_77bd2bbc(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7598499462550435, "def solve_fe025daf(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7635597314394058, "def solve_d30650af(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7673482403873226, "def solve_644ec17c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 = size(x1)\n    x13 = height(I)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = lbind(shift, x15)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = tojvec(x18)\n    x20 = lbind(shift, x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x18)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = fill(x24, NEG_ONE, x26)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 =difference(x29, x28)\n    O = fill(x27, ZERO, x30)\n    return O"], [0.770283578319142, "def solve_137a5410(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_e7c5a850(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_666e482a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_9ed4e2f5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7790633012367362, "def solve_716711e4(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_27e71a47(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_57ef74fc(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.7790633012367362, "def solve_04447cf7(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [1.0, "def solve_cd3e914e(I):\n    x1 = astuple(RVERT, dmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_16575065(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fcff4807(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_9135ea94(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_56de6084(I):\n    x1 = I21(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(size, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_7cfb6ffd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a4da1f44(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(E21, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [1.0, "def solve_f37767ee(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = astuple(dmirror, cmirror)\n    x6 = astuple(hmirror, identity)\n    x7 = combine(x5, x6)\n    x8 = chain(initset, ulcorner, lrcorner)\n    x9 = fork(rapply, x8, identity)\n    x10 = compose(first, x9)\n    x11 = rbind(ofcolor, x4)\n    x12 = compose(x11, x10)\n    x13 = fork(connect, x12, toindices)\n    x14 = compose(x13, x10)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x11)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = compose(toivec, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x18)\n    x22 = intersection(x19, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x18)\n    O = paint(x17, x24)\n    return O"], [1.0, "def solve_958af7c2(I):\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = branch(x3, ONE, ZERO_BY_TWO)\n    x5 = ZERO(x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = frontiers(I)\n    x9 = merge(x8)\n    x10 = mostcolor(x9)\n    x11 = ofcolor(I, x10)\n    x12 = x11(x8)\n    x13 = ofcolor(I, x10)\n    x14 = last(x13)\n    x15 = ulcorner(x14)\n    x16 = x11(x14)\n    x17 = shift(x11, x16)\n    x18 = ulcorner(x17)\n    x19 = urcorner(x17)\n    x20 = shoot(x19, UNITY)\n    x21 = shoot(x18, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = lrcorner(x2)\n    x24 = rbind(shoot, x38)\n    x25 = mapply(x24, x22)\n    O = fill(I, x10, x25)\n    return O"], [1.0, "def solve_219380fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x1999)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [1.0, "def solve_5e843db7(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_afa6903a(I):\n    x1 = lbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_8dcdf935(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_19d06e6e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vline, hline)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = argmax(x13, numcolors)\n    x15 = apply(ulcorner, x13)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x14)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8f60c184(I):\n    x1 = f28(I)\n    x2 = vmirror(x1)\n    O = hconcat(I, x2)\n    return O"], [1.0, "def solve_8dd05531(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_b6a5cd90(I):\n    x1 = lbind(remove, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, palette)\n    x4 = lbind(lbind, shift)\n    x5 = rbind(argmax, numcolors)\n    x6 = lbind( apply, x5)\n    x7 = compose(x6, toindices)\n    x8 = chain(x3, x7, x4)\n    x9 = rbind(contained, x5)\n    x10 = compose(x9, first)\n    x11 = rbind(sfilter, x10)\n    x12 = lbind(rbind, subtract)\n    x13 = chain(x11, x12, RIGHT)\n    x14 = fork(argmin, x8, x13)\n    x15 = compose(x4, x14)\n    x16 = fork(shift, x15, ulcorner)\n    x17 = mapply(x16, x1)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_245e41b6(I):\n    x1 = lbind(apply, maximum)\n    x2 = apply(x1, I)\n    x3 = interval(ZERO, FIVE, ONE)\n    x4 = pair(x2, x3)\n    x5 = rbind(add, THREE)\n    x6 = rbind(subtract, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = lbind(apply, maximum)\n    x10 = chain(x9, asobject, x8)\n    x11 = fork(filter, x10, x6)\n    x12 = compose(size, x11)\n    x13 = argmin(x4, x12)\n    x14 = ofcolor(I, x13)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x14, x17)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_aacf595b(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_6c1ae3d1(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_a85fbe35(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_e5855a4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    O = mfilter(x2, square)\n    return O"], [1.0, "def solve_13e8d3b4(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, THREE)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = combine(x4, x12)\n    x14 = recolor(FIVE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_d59623d9(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_49c7395e(I):\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = divide(x23, x17)\n    x25 = increment(x24)\n    x26 = width(I)\n    x27 = divide(x26, x25)\n    x28 = increment(x27)\n    x29 = invert(x25)\n    x30 = increment(x28)\n    x31 = interval(x29, x30, ONE)\n    x32 = invert(x28)\n    x33 = increment(x28)\n    x34 = interval(x32, x33, ONE)\n    x35 = product(x31, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x21)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_874b43ac(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6278ed61(I):\n    x1 = trim(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(x1)\n    x5 = lefthalf(x4)\n    x6 = numcolors(x5)\n    x7 = equality(x6, ONE)\n    x8 = righthalf(x5)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x3, x8, x10)\n    x12 = extract(x11, last)\n    x13 = first(x12)\n    x14 = trim(x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(I, x16)\n    x18 = toindices(x16)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, TWO)\n    x24 = mapply(first, x23)\n    x25 = paint(x21, x24)\n    x26 = replace(x25, ONE, SIX)\n    x27 = paint(x26, TWO)\n    x28 = rbind(65, TWO)\n    x29 = fgpartition(x27)\n    x30 = merge(x29)\n    x31 = recolor(TWO, x30)\n    x32 = initset(x28)\n    x33 = insert(x27, x32)\n    x34 = insert(x31, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x34)\n    x37 = dmirror(x35)\n    x38 = combine(x34, x37)\n    x39 = paint(x36, x38)\n    O = x35(x39)\n    return O"], [1.0, "def solve_ac45bfaa(I):\n    x1 = subgrid(x1, I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_bdaa5977(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = leftmost(x8)\n    x10 = rbind(contained, x9)\n    x11 = compose(flip, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x5)\n    x15 = greater(x13, x14)\n    x16 = branch(x15, x12, x13)\n    x17 = contained15(I, x16)\n    x18 = height(x17)\n    x19 = divide(x18, THREE)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = crop(I, ORIGIN, x21)\n    x23 = hupscale(x22, x19)\n    x24 = chain(positive, size, x23)\n    x25 = contained(x17, x24)\n    x26 = flip(x25)\n    x27 = branch(x26, x25, x22)\n    x28 = multiply(x27, FOUR)\n    x29 = add(x28, TWO)\n    x30 = branch(x26, x26, x29)\n    x31 = branch(x25, x27, x30)\n    x32 = multiply(x31, FOUR)\n    x33 = add(x32, TWO)\n    x34 = canvas(x12, x33)\n    x35 = ofcolor(x34, x12)\n    x36 = shift(x35, UNITY)\n    O = fill(x34, EIGHT, x36)\n    return O"], [1.0, "def solve_c4e15809(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vmirror(x1)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, TWO, ZERO)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, TWO, x6)\n    return O"], [1.0, "def solve_55862881(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db258008(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = lbind(greater, x9)\n    x11 = compose(x10, height)\n    x12 = rbind(greater, x11)\n    x13 = compose(x12, width)\n    x14 = matcher(x13, ZERO)\n    x15 = fork(either, x14, x15)\n    x16 = rbind(greater, ONE)\n    x17 = compose(x16, height)\n    x18 = matcher(x17, ZERO)\n    x19 = fork(either, x18, x15)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x2, x14)\n    x22 = mfilter(x2, x20)\n    x23 = fill(I, x8, x21)\n    O = fill(x23, x8, x22)\n    return O"], [1.0, "def solve_58f0c133(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4a5d9e27(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = mapply(double, x3)\n    O = fill(I, ONE, x4)\n    return O"], [1.0, "def solve_47806297(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2293b2e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ea5d898d(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(lowermost, x2)\n    x4 = apply(x3, I)\n    x5 = merge(x4)\n    x6 = lbind(colorcount, x5)\n    x7 = compose(toivec, x6)\n    x8 = apply(x7, x5)\n    x9 = argmin(x8, size)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = shoot(x10, DOWN_LEFT)\n    x13 = ofcolor(x11, x9)\n    x14 = normalize(x11)\n    x15 = difference(x13, x14)\n    x16 = toobject(x15, x11)\n    x17 = mostcolor(x16)\n    x18 = colorcount(I, x17)\n    x19 = leftmost(x9)\n    x20 = rbind(astuple, x19)\n    x21 = apply(x20, x15)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x17)\n    x24 = fill(I, ONE, x23)\n    x25 = mapply(x22, x15)\n    O = fill(x24, x9, x25)\n    return O"], [1.0, "def solve_9a3c4275(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_bff64c28(I):\n    x1 = remove(ZERO, x1)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = rbind(rbind,0000000)\n    x5 = lbind(lbind, shoot)\n    x6 = lbind(x5, x4)\n    x7 = lbind(lbind, mapply)\n    x8 = chain(x6, x7, box)\n    x9 = x3(x1)\n    x10 = x8(x9)\n    x11 = fork(recolor, color, x8)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_96adac5a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = order(x8, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = subgrid(x11, x12)\n    x14 = trim(x13)\n    x15 = subgrid(x14, x12)\n    x16 = replace(x15, ONE, TWO)\n    x17 = replace(x16, EIGHT, TWO)\n    x18 = compress(x17)\n    x19 = upscale(x18, THREE)\n    x20 = ofcolor(x19, TWO)\n    x21 = ofcolor(x19, ONE)\n    x22 = rbind(gravitate, x20)\n    x23 = compose(x22, initset)\n    x24 = fork(multiply, identity, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x19)\n    x28 = width(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = multiply(x29, THREE)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x29)\n    x33 = lbind(shift, x12)\n    x34 = mapply(x33, x32)\n    O = paint(x6, x34)\n    return O"], [1.0, "def solve_f002ec71(I):\n    O = branch(x1, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_50c9f3be(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_330ea031(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6de1c2bc(I):\n    x1 = trim(I)\n    x2 = objects(I, T, F, F)\n    x3 = vperiod(x2)\n    x4 = shift(x2, x3)\n    x5 = THREE(x4, NEG_ONE)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = apply(double, x6)\n    x8 = apply(decrement, x7)\n    x9 = papply(astuple, x7, x8)\n    x10 = apply(ulcorner, x8)\n    x11 = mapply(neighbors, x10)\n    x12 = apply(toindices, x8)\n    x13 =lbind(shoot, UP_RIGHT)\n    x14 = mapply(x13, x12)\n    x15 = fill(I, FOUR, x14)\n    x16 = chain(x17, x10, initset)\n    x17 = corners(x4)\n    x18 = insert(x14, x17)\n    x19 = lbind(contained, ZERO)\n    x20 = shoot(x4, x19)\n    x21 = branch(x20, height, width)\n    x22 = x21(I)\n    x23 = ofcolor(x22, ZERO)\n    x24 = asindices(x22)\n    x25 = x24(x24)\n    x26 = x25(x22)\n    x27 = intersection(x23, x26)\n    x28 = fill(x22, ZERO, x27)\n    O = fill(x28, ZERO, x1)\n    return O"], [1.0, "def solve_f2de09ea(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_ae6b992d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0a3221bb(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, minimum)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_6c03923f(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_ebeec005(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_efca7946(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_1436ab20(I):\n    ONE = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_00132df3(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_71550f23(I):\n    x1 = trim(I)\n    x2 = recolor(281, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [1.0, "def solve_27f020e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = colorfilter(x4, x7)\n    x9 = rbind(toobject, I)\n    x10 = rbind(colorcount, x7)\n    x11 = chain(x10, x9, color)\n    x12 = matcher(x11,12)\n    x13 = subtract(leFT, x12)\n    x14 = astuple(x13, x13)\n    x15 = canvas(x3, x14)\n    x16 = hconcat(x15, x15)\n    x17 = hmirror(x16)\n    O = vconcat(x16, x17)\n    return O"], [1.0, "def solve_daab482e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, first, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_9606ce8a(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_b92f26f0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(x4, x3, x7)\n    return O"], [1.0, "def solve_dd1e6082(I):\n    x1 = vmirror(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = size(x1)\n    x9 = canvas(x7, x8)\n    x10 = asobject(x1)\n    x11 = matcher(first, x7)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = shape(I)\n    x15 = double(x14)\n    x16 = divide(x15, THREE)\n    x17 = multiply(x16, TWO)\n    x18 = canvas(multiply, x17)\n    x19 = bottomhalf(I)\n    x20 = lbind(shift, x19)\n    x21 = objects(x18, T, F, T)\n    x22 = merge(x21)\n    x23 = paint(x18, x22)\n    x24 = astuple(x26, x23)\n    x25 = replace(x24, x7, x5)\n    x26 = combine(x20, x25)\n    x27 = paint(x23, x26)\n    x28 = astuple(x25, x13)\n    x29 = astuple(x28, x22)\n    x30 = initset(x29)\n    x31 = insert(x27, x30)\n    x32 = backdrop(x31)\n    x33 = mapply(x32, x26)\n    O = paint(x22, x33)\n    return O"], [1.0, "def solve_5176d7d0(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorcount, I)\n    x6 = argmin(x4, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = normalize(x3)\n    x10 = lefthalf(x8)\n    x11 = righthalf(x8)\n    x12 = width(x9)\n    x13 = width(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x11)\n    x16 = height(x9)\n    x17 = height(x10)\n    x18 = divide(x16, x17)\n    x19 = astuple(x14, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x9)\n    x25 = mapply(x24, x23)\n    x26 = paint(x8, x25)\n    x27 = subgrid(x3, x26)\n    O = replace(x27, x6, x13)\n    return O"], [1.0, "def solve_fd94cf39(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(Judim, merge, x3)\n    x5 = apply(x4, x7)\n    x6 = merge(x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_1bd727ce(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6682fd6e(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = hperiod(x5)\n    x7 = width(I)\n    x8 = multiply(x7, x6)\n    x9 = multiply(UNITY, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = multiply(x5, x10)\n    x12 = lbind(multiply, x11)\n    x13 = neighbors(ORIGIN)\n    x14 = mapply(neighbors, x13)\n    x15 = lbind(shift, x14)\n    x16 = height(I)\n    x17 = divide(x16, x6)\n    x18 = increment(x17)\n    x19 = width(I)\n    x20 = divide(x19, x6)\n    x21 = increment(x20)\n    x22 = asobject(I)\n    x23 = shape(I)\n    x24 = decrement(x23)\n    x25 = lbind(multiply, x24)\n    x26 = toivec(x25)\n    x27 = apply(x25, x20)\n    x28 = apply(x25, x22)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_c96b310f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = center(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = apply(x11, x5)\n    x13 = argmin(x12, x11)\n    x14 = ofcolor(x13, ZERO)\n    x15 = ofcolor(x13, ONE)\n    x16 = rbind(colorcount, SIX)\n    x17 = argmax(x15, x16)\n    x18 = shape(x13)\n    x19 = canvas(ZERO, x18)\n    x20 = lbind(g16, x13)\n    x21 = lbind(gbind, subtract)\n    x22 = compose(x21, palette)\n    x23 = lbind(recolor, x17)\n    x24 = rbind(ofcolor, x17)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(canvas, NEG_ONE)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x27, x23)\n    x29 = compose(x17, x28)\n    x30 = fork(intersection, x29, identity)\n    x31 = branch(x3, x29, x30)\n    x32 = mapply(x31, x14)\n    x33 = ofcolor(x13, ONE)\n    x34 = shift(x33, x17)\n    O = paint(x19, x34)\n    return O"], [1.0, "def solve_f4625437(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(outbox, outbox, outbox)\n    x5 = mapply(x4, x3)\n    x6 = corners(ORIGIN)\n    x7 = dmirror(I)\n    x8 = insert(UNITY, x7)\n    x9 = insert(SEITY, x8)\n    x10 = increment(x6)\n    x11 = x9(x110)\n    x12 = tojvec(x10)\n    x13 = lbind(shift, x12)\n    x14 = chain(x13, toivec, x8)\n    x15 = mapply(x14, x9)\n    x16 = paint(x1, x15)\n    O = x4(x16)\n    return O"], [1.0, "def solve_cce033ee(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_6c229708(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_f9556571(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_283b96cf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = lbind(repeat, x16)\n    x18 = compose(dmirror, merge)\n    x19 = rbind(rapply, x2)\n    x20 = compose(initset, x17)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(xycolors, THREE)\n    x24 = decrement(x23)\n    x25 = height(x7)\n    x26 = matcher(x24, x25)\n    x27 = compose(flip, x26)\n    x28 = mfilter(x1, x27)\n    O = fill(x7, x4, x28)\n    return O"], [1.0, "def solve_65810784(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = shape(I)\n    x13 = maximum(x12)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = maximum(x5)\n    x17 = lbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x45)\n    x20 = mapply(x19, x18)\n    O = fill(I, x8, x20)\n    return O"], [1.0, "def solve_7808f7a4(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3ee886d6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(I)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_dac20f8c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_1ce6c49f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9ae1084b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1555c480(I):\n    x1 = rbind(shoot, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x2)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_25b632db(I):\n    x1 = width(I)\n    x2 = divide(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = astuple(x4, x4)\n    x6 = crop(I, ORIGIN, x5)\n    x7 = hmirror(x6)\n    x8 = vconcat(x6, x7)\n    x9 = double(x4)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = insert(x9, x10)\n    x12 = outbox(x11)\n    x13 = ulcorner(x12)\n    x14 = subgrid(x12, I)\n    x15 = objects(x14, F, T, T)\n    x16 = matcher(first, ZERO)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = merge(x18)\n    x20 = cover(x14, x19)\n    x21 = lbind(shift, x18)\n    x22 = mapply(x21, x20)\n    O = fill(x20, FOUR, x22)\n    return O"], [1.0, "def solve_753ab1a7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(greater, x3)\n    x5 = compose(x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, corners)\n    x8 = mfilter(x6, x7)\n    x9 = mostcolor(I)\n    x10 = fill(I, x9, x8)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, DOWN)\n    x14 = paint(x10, x13)\n    x15 = normalize(x12)\n    x16 = shape(x12)\n    x17 = halve(x16)\n    x18 = invert(x17)\n    x19 = shift(x19, x18)\n    O = paint(x14, x19)\n    return O"], [1.0, "def solve_685e66fa(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shift, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = mostcolor(I)\n    x34 = fill(I, x33, x32)\n    O = fill(x34, ofcolor, x30)\n    return O"], [1.0, "def solve_d18fb2a8(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = rbind(intersection, THREE)\n    x6 = chain(x4, x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = sfilter(x3, x7)\n    x9 = difference(x3, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.0, "def solve_b08cfca4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_87d73330(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_7be97669(I):\n    x1 = rot270(I)\n    x2 = rot90(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(4, x5)\n    return O"], [1.0, "def solve_4cbd252e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_32bd161f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, size)\n    x24 = chain(size, dedupe, size)\n    x25 = compose(x24, x22)\n    x26 = lbind(apply, x11)\n    x27 = chain(ssize, dedupe, x26)\n    x28 = fork(rapply, x27, x22)\n    x29 = compose(first, x28)\n    x30 = compose(x19, x22)\n    x31 = fork(compose, x30, x29)\n    x32 = lbind(sfilter, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(asobject, x33, x33)\n    x35 = mapply(x34, x4)\n    x36 = shift(x35, UNITY)\n    x37 = paint(I, x36)\n    O = rot90(x37)\n    return O"], [1.0, "def solve_6e4c6ee1(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_4746a1ae(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = canvas(x10, x11)\n    return O"], [1.0, "def solve_ae00ba36(I):\n    x1 = rbind(connect, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_dcf3305a(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b4076f66(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_ab3db620(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(rapply, I)\n    x5 = compose(initset, x4)\n    x6 = chain(first, x4, x5)\n    x7 = compose(x6, last)\n    x8 = lbind(fork, equality)\n    x9 = compose(x8, x7)\n    x10 = lbind(matcher, first)\n    x11 = compose(x10, x7)\n    x12 = fork(sfilter, x7, x11)\n    x13 = compose(asobject, x12)\n    x14 = apply(x13, x2)\n    x15 = difference(x14, x2)\n    x16 = mapply(x12, x15)\n    x17 = fill(I, ONE, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(urcorner, x2)\n    x20 = apply(llcorner, x2)\n    x21 = pair(x19, x20)\n    x22 = fork(add, first, last)\n    x23 = replace(x17, NINE, ZERO)\n    x24 = fork(add, first, last)\n    x25 = fork(add, x22, x24)\n    x26 = lbind(multiply, x17)\n    x27 = apply(x26, x21)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(occurrences, x174)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x25)\n    x33 = fork(paint, identity, x32)\n    x34 = mapply(x33, x27)\n    O = x21(x34)\n    return O"], [1.0, "def solve_0fb82451(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_11ef7160(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_272de656(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_99e5d949(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(feca, x10)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_a9017ece(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = lefthalf(x2)\n    x4 = tophalf(I)\n    x5 = righthalf(x4)\n    x6 = bottomhalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = lefthalf(x8)\n    x10 = index(x3, x5)\n    x11 = branch(x10, asindices, x3)\n    x12 = branch(x10, initset, x5)\n    x13 = add(x12, DOWN)\n    x14 = insert(x13, x11)\n    x15 = index(x6, x1)\n    x16 = lrcorner(x15)\n    x17 = add(x16, UP_RIGHT)\n    x18 = insert(x17, x14)\n    x19 = shift(x18, UNITY)\n    O = paint(x3, x19)\n    return O"], [1.0, "def solve_a0d171f2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x19 = fork(combine, x5, x8)\n    x20 = index(I, x2)\n    x21 = x9(x2)\n    O = canvas(x20, x4)\n    return O"], [1.0, "def solve_6dde8f5c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_f1568d73(I):\n    O = move(I, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_7ba841fd(I):\n    x1 = initset(ORIGIN)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_c1557e15(I):\n    x1 = TWO(I)\n    x2 = dmirror(x1)\n    O = papply(pair, x1, x2)\n    return O"], [1.0, "def solve_f25b3266(I):\n    x1 = rbind(ofcolor, TWO)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = lbind(colorcount, I)\n    x16 = argmax(x14, x15)\n    x17 = ofcolor(x11, x16)\n    x18 = subgrid(x17, x11)\n    x19 = mapply(vfrontier, x17)\n    x20 = mapply(hfrontier, x17)\n    x21 = size(x19)\n    x22 = size(x20)\n    x23 = greater(x21, x22)\n    x24 = branch(x23, x8, x19)\n    x25 = branch(x23, x21, x20)\n    x26 = branch(x23, x24, x25)\n    x27 = apply(x26, x24)\n    x28 = mapply(x17, x27)\n    x29 = dmirror(x28)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x20, x30)\n    O = x10(x31)\n    return O"], [1.0, "def solve_4fe42391(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_79bd075b(I):\n    x1 = subgrid(x2, I)\n    x2 = trim(x1)\n    O = replace(x1, ZERO, x2)\n    return O"], [1.0, "def solve_af2bdda3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4b63cf9a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_866194ee(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_123e600d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(chain, initset)\n    x7 = lbind(x6, last)\n    x8 = lbind(rbind, arg)\n    x9 = lbind( lbind, occurrences)\n    x10 = chain(x7, x8, x9)\n    x11 = first(x5)\n    x12 = errmost(x11)\n    x13 = subgrid(x12, I)\n    x14 = matcher(first, x3)\n    x15 = compose(flip, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = apply(x17, x13)\n    x19 = last(x18)\n    x20 = matcher(first, x4)\n    x21 = compose(flip, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = compose(x22, last)\n    x24 = ofcolor(x13, x31)\n    x25 = initset(x24)\n    x26 = matcher(first, x3)\n    x27 = compose(flip, x26)\n    x28 = fork(both, x23, x27)\n    x29 = sfilter(x24, x28)\n    x30 = shift(x29, UNITY)\n    x31 = merge(x4)\n    x32 = cover(x13, x31)\n    x33 = mapply(x32, x30)\n    O = paint(x20, x33)\n    return O"], [1.0, "def solve_38d20a1e(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_55c97ba6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = mfilter(x12, x16)\n    x18 = color(x17)\n    x19 = subgrid(x17, I)\n    x20 = objects(x19, F, T, T)\n    x21 = rbind(colorcount, x10)\n    x22 = valmax(x20, x21)\n    x23 = rbind(colorcount, x10)\n    x24 = matcher(x23, x22)\n    x25 = sfilter(x12, x24)\n    x26 = mapply(dneighbors, x25)\n    x27 = mapply(ineighbors, x25)\n    x28 = toobject(x27, x19)\n    x29 = mostcolor(x28)\n    x30 = colorfilter(x25, x29)\n    x31 = objects(x30, T, T, T)\n    x32 = rbind(adjacent, x17)\n    x33 = mfilter(x31, x32)\n    x34 = replace(x19, x10, x3)\n    O = fill(x34, x39, x33)\n    return O"], [1.0, "def solve_58f94ee5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_daf86606(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(first, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 =rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [1.0, "def solve_22b5a4a9(I):\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, vline)\n    x3 = lbind(contained, TWO)\n    x4 = compose(x3, hline)\n    x5 = fork(manhattan, x2, x4)\n    x6 = compose(d07, x5)\n    x7 = fork(multiply, height, width)\n    x8 = compose(decrement, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x4)\n    x11 = fork(both, x3, x5)\n    x12 = fork(both, x10, x11)\n    x13 = mfilter(x9, x12)\n    O = fill(I, TWO, x13)\n    return O"], [1.0, "def solve_a6a720ab(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = palette(I)\n    x30 = remove(x8, x29)\n    x31 = other(x30, x1)\n    x32 = ofcolor(I, x31)\n    x33 = mapply(x24, x32)\n    x34 = shift(x33, UNITY)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_d2d925f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = divide(x4, x5)\n    x7 = width(x3)\n    x8 = interval(ZERO, x7, FOUR)\n    x9 = mpapply(recolor, x8, x4)\n    x10 = paint(I, x9)\n    x11 = rbind(ofcolor, x3)\n    x12 = compose(normalize, x11)\n    x13 = rbind(shift, x12)\n    x14 = height(x2)\n    x15 = divide(x14, x5)\n    x16 = increment(x15)\n    x17 = width(x2)\n    x18 = divide(x17, x5)\n    x19 = increment(x18)\n    x20 = invert(x16)\n    x21 = increment(x19)\n    x22 = canvas(ZERO, x21)\n    x23 = asindices(x22)\n    x24 = shift(x23, x20)\n    O = fill(x22, EIGHT, x24)\n    return O"], [1.0, "def solve_834078d9(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b41b438c(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = x3(I)\n    x5 = compress(x4)\n    x6 = leastcolor(x5)\n    x7 = mostcolor(x5)\n    x8 = ofcolor(x5, x6)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = mostcolor(x10)\n    x12 = extract(x6, x11)\n    x13 = combine(x10, x12)\n    x14 = fill(x5, x6, x13)\n    x15 = ofcolor(x5, x12)\n    x16 = gravitate(x15, x4)\n    x17 = shift(x15, x16)\n    O = fill(x14, x6, x17)\n    return O"], [1.0, "def solve_1b61193a(I):\n    x1 = shape(I)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = objects(x3, F, F, T)\n    x5 = argmin(x4, size)\n    x6 = cover(I, x5)\n    x7 = toindices(x5)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = fill(x6, TWO, x9)\n    return O"], [1.0, "def solve_9e9cc779(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dc2fa2cf(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_30f9ca0e(I):\n    x1 = asindices(I)\n    x2 = apply(first, x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, x3)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = cover(x6, x4)\n    O = paint(x7, x4)\n    return O"], [1.0, "def solve_5adc63a2(I):\n    x1 = hvsplit(I, TWO)\n    x2 = apply(numcolors, x1)\n    x3 = equality(x2, TWO_BY_TWO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [1.0, "def solve_434bec84(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, size)\n    x4 = shape(x3)\n    x5 = canvas(x1, x4)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = width(x8)\n    x14 = interval(x9, x13, x11)\n    x15 = lbind(astuple, x14)\n    x16 = lbind(subtract, x14)\n    x17 = rbind(subtract, x9)\n    x18 = compose(x15, x17)\n    x19 = product(x13, x10)\n    x20 = sizefilter(x19, ONE)\n    x21 = apply(x18, x20)\n    x22 = rbind(shoot, DOWN)\n    x23 = mapply(x22, x21)\n    x24 = fill(x5, x1, x23)\n    x25 = apply(x19, x101)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = fill(x24, x8, x27)\n    return O"], [1.0, "def solve_225836ea(I):\n    x1 = rbind(difference, toindices)\n    x2 = lbind(apply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(sfilter, first, x3)\n    x5 = chain(size, dedupe, x4)\n    x6 = size(x1)\n    x7 = positive(x6)\n    x8 = branch(x7, x4, x5)\n    x9 = compose(positive, size)\n    x10 = lbind( extantract, x9)\n    x11 = chain(x10, x3, x5)\n    x12 = compose(x7, x11)\n    x13 = fork(multiply, x12, x5)\n    x14 = compose(color, x12)\n    x15 = fork(recolor, x13, x14)\n    x16 = mapply(x15, x1)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_6f160633(I):\n    x1 = matcher(ZERO, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_d322c914(I):\n    x1 = argmax(x1, size)\n    x2 = remove(x1, x1)\n    x3 = merge(x2)\n    x4 = fill(I, SIX, x3)\n    x5 = merge(x2)\n    O = fill(x4, TWO, x5)\n    return O"], [1.0, "def solve_d537d7e7(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, TWO)\n    x3 = matcher(first, THREE)\n    x4 = matcher(first, TWO)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, T)\n    x7 = rbind(x6, F)\n    x8 = lbind(contained, THREE)\n    x9 = compose(x8, palette)\n    x10 = lbind(contained, TWO)\n    x11 = compose(x10, palette)\n    x12 = rbind(sfilter, x9)\n    x13 = compose(x12, x7)\n    x14 = rbind(sfilter, x11)\n    x15 = compose(x14, x7)\n    x16 = rbind(argmax, numcolors)\n    x17 = chain(normalize, x16, x13)\n    x18 = rbind(argmax, numcolors)\n    x19 = compose(x78, x15)\n    x20 = chain(ulcorner, x18, x19)\n    x21 = rbind(shift, NEG_UNITY)\n    x22 = compose(x21, x17)\n    x23 = compose(x21, x15)\n    x24 = fork(combine, x22, x23)\n    x25 = compose(x21, x15)\n    x26 = fork(difference, x24, x25)\n    x27 = fork(recolor, x26, x21)\n    x28 = mapply(x27, x1)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_9f009019(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_f4c1e8ce(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 =hconcat(I, x9)\n    x11 = objects(x10, F, F, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_c866952b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = rbind(multiply, x6)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = pair(x12, x16)\n    x18 = compose(size, dedupe)\n    x19 = apply(x18, x17)\n    x20 = lbind(43, x1)\n    x21 = delta(x2)\n    x22 = apply(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = apply(size, x23)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x16, x26)\n    x28 = lbind(43, x2)\n    x29 = mapply(x28, x27)\n    x30 = mostcolor(I)\n    x31 = fill(I, x30, x29)\n    O = leastcolor(x31)\n    return O"], [1.0, "def solve_a6659948(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_92035cec(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = rbind(subgrid, I)\n    x3 = chain(x2, asobject, x1)\n    x4 = x3(I)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = hfrontier(x5)\n    x8 = astuple(x6, x7)\n    x9 = fill(x4, ZERO, x8)\n    x10 = vfrontier(x6)\n    x11 = intersection(x10, x6)\n    O = fill(x9, ZERO, x11)\n    return O"], [1.0, "def solve_3f5474fd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, branch)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = subgrid(x5, x3)\n    x10 = trim(x9)\n    x11 = replace(x10, x7, x8)\n    x12 = combine(x7, x6)\n    x13 = apply(ulcorner, x12)\n    x14 = normalize(x12)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x13)\n    x17 = fill(x11, x9, x16)\n    O = fill(x17, UNITY, x7)\n    return O"], [1.0, "def solve_6662bf08(I):\n    x1 = ofcolor(I, TWO)\n    x2 = prapply(connect, x1, x1)\n    x3 = lbind(greater, SIX)\n    x4 = compose(x3, size)\n    x5 = fork(either, vline, hline)\n    x6 = fork(both, x4, x5)\n    x7 = matcher(numcolors, SIX)\n    x8 = sfilter(x2, x7)\n    x9 = difference(x2, x8)\n    x10 = apply(normalize, x8)\n    x11 = astuple(x10, identity)\n    x12 = CPUindices(x11)\n    x13 = lbind(matcher, x7)\n    x14 = sfilter(x12, x13)\n    x15 = difference(x12, x14)\n    x16 = lbind(recolor, SIX)\n    x17 = compose(x16, delta)\n    x18 = fork(combine, first, x17)\n    x19 = apply(x18, x15)\n    x20 = fork(paint, identity, x19)\n    x21 = apply(x20, x5)\n    x22 = pair(x19, x21)\n    x23 = mapply(dneighbors, x22)\n    x24 = difference(x23, x22)\n    x25 = mostcolor(I)\n    x26 = ofcolor(I, x25)\n    x27 = x25(x26)\n    O = fill(I, x27, x24)\n    return O"], [1.0, "def solve_6b256f21(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = delta(x4)\n    x6 = center(x5)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(x1, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x5)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x4)\n    x21 = rbind(adjacent, x6)\n    x22 = fork(both, x19, x20)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [1.0, "def solve_f86678ca(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(648, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [1.0, "def solve_8406e629(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_336e4052(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c28a6aaa(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_c3576c6f(I):\n    x1 = cmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_0157e93e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_4d8ba445(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x30)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [1.0, "def solve_91c9ee55(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_2e8d9543(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c87a5a8f(I):\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(DOWN, x2)\n    x4 = decrement(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x1)\n    x7 = add(UP, x6)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(ORIGIN, x9)\n    x11 = height(x1)\n    x12 = height(I)\n    x13 = interval(ZERO, x11, ONE)\n    x14 = width(x1)\n    x15 =Nivec(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = apply(tojvec, x13)\n    x18 = apply(palette, x17)\n    x19 = lbind(apply, connect)\n    x20 = compose(x19, mostcolor)\n    x21 = fork(combine, x18, x20)\n    x22 = pair(x13, x10)\n    x23 = sfilter(x22, x21)\n    x24 = apply(x27, x23)\n    x25 = mapply(x5, x24)\n    O = paint(x1, x25)\n    return O"], [1.0, "def solve_3475e8ad(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x300, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_86e01e63(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3aa3fbbb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_259c6e8b(I):\n    x1 = astuple(rot90, rot909)\n    x2 = astuple(rot180, rotofcolor)\n    x3 = combine(x1, x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x3)\n    x6 = ofcolor(I, ONE)\n    x7 = rbind(shoot, DOWN)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, ZERO, x1)\n    x10 = fill(x9, NEG_ONE, x2)\n    x11 = fill(x10, ONE, x8)\n    O = extract(x1, x5)\n    return O"], [1.0, "def solve_e0d3a022(I):\n    x1 = rbind(7777,7777)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(x3)\n    x5 = papply(pair, x3, x4)\n    x6 = merge(x5)\n    O = subgrid(x6, x4)\n    return O"], [1.0, "def solve_42c2be8f(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_9a3f8be7(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_c2c50757(I):\n    O = subgrid(Feca, I)\n    return O"], [1.0, "def solve_7b4997a5(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = colorfilter(x2, x1)\n    x4 = sfilter(x3, hline)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = frontiers(I)\n    x10 = merge(x9)\n    x11 = mostcolor(x10)\n    x12 = shape(x10)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x13, x8)\n    x15 = objects(x14, F, F, T)\n    x16 = argmax(x15, numcolors)\n    x17 = increment(x16)\n    x18 = interval(TWO, x17, ONE)\n    x19 = lbind(shift, x10)\n    x20 = mapply(x19, x18)\n    x21 = paint(x10, x20)\n    x22 = objects(x21, F, F, T)\n    x23 = rbind(contained, x17)\n    x24 = compose(x23, last)\n    x25 = sfilter(x22, x24)\n    x26 = compose(color, first)\n    x27 = fork(recolor, x26, identity)\n    x28 = mapply(x27, x25)\n    O = paint(x21, x28)\n    return O"], [1.0, "def solve_9aac9656(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_a416a9d1(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_e6259a23(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8ce88826(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(x4, x9)\n    x11 = paint(x10, x3)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = color(x13)\n    x15 = remove(x8, x6)\n    x16 = shoot(x15, UNITY)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x12)\n    x19 = rbind(shoot, DOWN)\n    x20 = initset(x13)\n    x21 = rbind(shoot, x20)\n    x22 = mapply(x21, x12)\n    x23 = subgrid(x18, x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x22, x4)\n    x26 = difference(x24, x25)\n    x27 = lrcorner(x26)\n    x28 = invert(x27)\n    x29 = shift(x25, x28)\n    O = fill(x22, x4, x29)\n    return O"], [1.0, "def solve_01d96f58(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8188d358(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_ea3646c0(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP8RIGHT)\n    x4 = rbind(shoot, DOWN8LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_56006d4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_635d88b1(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_df8d8b29(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_830d8a0d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = sfilter(x4, x2)\n    x6 = compose(dmirror, x5)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = double(x8)\n    x10 = apply(x6, x9)\n    x11 = rbind(subgrid, x5)\n    x12 = apply(x11, x10)\n    x13 = cmirror(x12)\n    x14 = hmirror(x13)\n    x15 = astuple(x11, x14)\n    x16 = lbind(et32, FIVE)\n    x17 = compose(x16, x6)\n    x18 = fork(combine, x17, x15)\n    x19 = lbind(lbind, shift)\n    x20 = compose(x19, last)\n    x21 = lbind(rbind, occurrences)\n    x22 = compose(x21, last)\n    x23 = fork(compose, x20, x22)\n    x24 = lbind(lbind, mapply)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, last, x25)\n    x27 = compose(first, x26)\n    x28 = fork(remove, x27, last)\n    x29 = chain(x25, x28, x27)\n    x30 = fork(vline, x29, identity)\n    x31 = chain(decrement, height, x30)\n    x32 = fork(equality, x31, x29)\n    x33 = sfilter(x12, x32)\n    x34 = fork(combine, vfrontier, hfrontier)\n    x35 = compose(x34, x30)\n    x36 = fork(paint, identity, x35)\n    x37 = x32(I)\n    x38 = crop(x37, x32,"], [1.1, "def solve_d8262804(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_3571eb13(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_e6291cad(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = ONE(I)\n    x2 = SEVEN(x1)\n    x3 = apply(normalize, x2)\n    x4 = astuple(TWO, ONE)\n    x5 = repeat(x4, x3)\n    x6 = combine(x5, x7)\n    x7 = rbind(multiply, THREE)\n    x8 = apply(x7, x6)\n    x9 = I(x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = subtract(x11, ONE)\n    x13 = astuple(THREE, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = hconcat(x14, x14)\n    x16 = hsplit(x15, TWO)\n    x17 = branch(x16, x77, x25ff)\n    x18 = x17(x16)\n    x19 = crop(x18, ORIGIN, x1)\n    x20 = asobject(x19)\n    x21 = x20(x8)\n    x22 = vmirror(x21)\n    x23 = mostcolor(I)\n    x24 = objects(x18, T, F, F)\n    x25 = sizefilter(x24, ONE)\n    x26 = difference(x24, x25)\n    x27 =rollc(x26)\n    x28 = paint(x15, x27)\n    x29 =772indices(x28)\n    x30 = fgpartition(x18)\n    x31 = sizefilter(x30, ONE)\n    x32 = lbind(intersection, x39)\n    x33 = chain(positive, size, x32)\n    x34 = lbind(shift, x29)\n    x35 = rbind(multiply, UNITY)\n    x36 = chain(x35, x34, x31)\n    x37 = lbind(shift, x29)\n    x38 = rbind(multiply, NEG_UNITY)\n    x39 = chain(x37, x38, x31)"], [1.1, "def solve_7bfcf3c9(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(I)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval("], [1.1, "def solve_2c8b58e6(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, frontiers, T)\n    x4 = canvas(ZERO, THREE_BY_THREE)\n    x5 = color(x4)\n    x6 = toivec(x1)\n    x7 = divide(x6, x2)\n    x8 = tojvec(x7)\n    x9 = width(I)\n    x10 = lefthalf(I)\n    x11 = righthalf(I)\n    x12 = equality(x10, x11)\n    x13 = hsplit(x8, x12)\n    x14 = righthalf(I)\n    x15 = palette(x14)\n    x16 = other(x15, x5)\n    x17 = palette(x13)\n    x18 = other(x17, x5)\n    x19 =168\n    x20 =949ighthalf(x13)\n    x21 = righthalf(x13)\n    x22 = vmirror(x21)\n    x23 = solve(x19, x22)\n    x24 = ofcolor(x14, x16)\n    x25 = ofcolor(x13, x18)\n    x26 = insert(x24, x25)\n    x27 = argmin(x26, last)\n    x28 = remove(x27, x26)\n    x29 = remove(x28, x26)\n    x30 = contained(x27, x29)\n    x31 = branch(x30, x22, x25)\n    x32 = 205(x31)\n    x33 = ofcolor(x14, x16)\n    x34 = normalize(x33)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x35, x16)\n    x37 = asindices(x35)\n    x38 = outbox(x37)\n    x39 = backdrop(x38)\n    x40 = branch(x33, x37, x39)\n    x41 = rbind(contained, x37)\n    x42 = compose(x41,"], [1.1, "def solve_2cab3677(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind( sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, F)\n    x10 = rbind(x9, F)\n    x11 = rbind(x10, T)\n    x12 = rbind(argmin, x11)\n    x13 = compose(x12, toindices)\n    x14 = fork(upscale, identity, x13)\n    x15 = compose(x14, rot90)\n    x16 = power(x15, TWO)\n    x17 = x16(I)\n    x18 = rot90(x17)\n    x19 = shape(x18)\n    x20 = canvas(x4, x19)\n    x21 = hconcat(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = rbind(toobject, x21)\n    x24 = compose(x23, trim)\n    x25 = apply(x24, x22)\n    x26 = rbind(colorcount, x4)\n    x27 = valmax(x25, x26)\n    x28 = rbind(colorcount, x4)\n    x29 = matcher(x28, x27)\n    x30 = sfilter(x28, x29)\n    x31 = chain(normalize, toindices, x11)\n    x32 = lbind(mapply, x31)\n    x33 = lbind(ofcolor, x81)\n    x34 = compose(x33, x11)\n    x35 = ofcolor(x18, x4)\n    x36 = difference(x35, x34)\n    x37 =0a15(x36)\n    x38 =446(499883, x37)\n    x39 = rbind(90, x38)"], [1.1, "def solve_bd805858(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_540ce26e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = toindices(x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x2, x7)\n    x9 = lbind(recolor, x1)\n    x10 = rbind(shoot, x8)\n    x11 = chain(x9, x10, initset)\n    x12 = lbind(remove, x8)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(x13, first)\n    x15 = power(last, TWO)\n    x16 = fork(combine, x14, x15)\n    x17 =92max(x6, x16)\n    x18 = astuple(TEN, TEN)\n    x19 = rbind(contained, x18)\n    x20 = chain(flip, x19, ulcorner)\n    x21 = fork(add, x20, x14)\n    x22 = multiply(EIGHT, UNITY)\n    x23 = add(x22, NEG_UNITY)\n    x24 = multiply(x23, UNITY)\n    x25 = neighbors(ORIGIN)\n    x26 = insert(ORIGIN, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = astuple(x28, x26)\n    x30 = repeat(x29, ONE)\n    x31 = combine(x30, x25)\n    x32 = combine(x28, x30)\n    x33 =51925862893(x32, x24)\n    x34 =556(shoot, x3333)\n    x35 = combine(x33, x34)\n    x36 = astuple(x26, xincrement)\n    x37 =226(shoot, x36)\n    x38 = combine(x35, x37)\n    x39 = combine(x31,"], [1.1, "def solve_e02ef634(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = rightmost(x26)\n    x28 = astuple(x25, x27)\n    x29 = ofcolor(x13, x22)\n    x30 = leftmost(x29)\n    x31 = invert(x30)\n    x32 = apply(uppermost, x31)\n    x33 = order(x32, identity)\n    x34 = astuple(x10, x11)\n    x35 = lbind(add, x34)\n    x36 =100(x17)\n    x37 = rbind(add, x36)\n    x38 = chain(x37, x35, x36)\n    x39 = lbind(apply, last)\n    x40 = rbind(sfilter, x38)\n    x41 = chain(x39, x40, x33)\n    x42 = lbind(lbind, shift)\n    "], [1.1, "def solve_c87c69c3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_1b4bb068(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = difference(x1, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorcount(I, x5)\n    x7 = backdrop(x2)\n    x8 = insert(x7, x4)\n    x9 = insert(x6, x8)\n    x10 = branch(x6, x8, x9)\n    x11 =1222(x10)\n    x12 = initset(x11)\n    x13 = complexity(x12, x6)\n    x14 = backdrop(x13)\n    x15 = subgrid(x14, I)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, x5)\n    x18 = backdrop(x17)\n    x19 = subgrid(x18, x15)\n    x20 = height(x19)\n    x21 = subtract(x20, TWO)\n    x22 = astuple(ONE, x21)\n    x23 = colorfilter(x17, x5)\n    x24 = crop(x19, ORIGIN, x22)\n    x25 = hmirror(x24)\n    x26 = replace(x25, x4, x5)\n    x27 = replace(x26, x7, x6)\n    x28 =07(x4)\n    x29 = leftmost(x28)\n    x30 = lbind(contained, x29)\n    x31 = compose(flip, x30)\n    x32 =733(x29, x23)\n    x33 = rbind(contained, x32)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x19, x34)\n    x36 = merge(x35)\n    x37 = palette(x36)\n    x38 = lbind(colorcount, x36)\n    x39 = compose(x38, first)\n    x40 = colorfilter(x1, x5)\n    x41 ="], [1.1, "def solve_522c24b5(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = rbind(argmin, DOWN)\n    x2 = compose(first, x1)\n    x3 = fork(subtract, last, x2)\n    x4 = x3(I)\n    x5 = double(x4)\n    x6 = interval(ZERO, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = astuple(ccement, NEG_TWO)\n    x9 = lbind(shift, x8)\n    x10 = rbind(multiply, x5)\n    x11 = compose(x10, x9)\n    x12 = lbind(shift, x13)\n    x13 = rbind(multiply, x4)\n    x14 = compose(x12, x13)\n    x15 = fork(astuple, x11, x14)\n    x16 = lbind(apply, uppermost)\n    x17 = chain(maximum, x16, x15)\n    x18 = lbind(colorfilter, x7)\n    x19 = chain(x18, color, x7)\n    x20 = fork(sfilter, x17, x19)\n    x21 = lbind(mapply, x20)\n    x22 = rbind(occurrences, x4)\n    x23 = compose(x21, x22)\n    x24 = fork(paint, identity, x23)\n    x25 = chain(x20, x21, x24)\n    x26 = lbind(mapply, vfrontier)\n    x27 = chain(x26, x25, x27)\n    x28 = lbind(paint, x2)\n    x29 = chain(x27, x28, x27)\n    x30 = compose(x24, x27)\n    x31 = fork(mapply, x30, x29)\n    x32 = fork(paint, identity, x31)\n    x33 = rbind(apply, x32149)\n    x34 = chain(lowermost, x33, x27)\n    x35 = fork(recolor, x24, x34)\n    x36 = astuple(ONE, THREE"], [1.1, "def solve_3fc9866c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = matcher( identity, ZERO)\n    x2 = toindices(x1)\n    x3 = rbind(20000, x2)\n    x4 = toindices(x1)\n    x5 = rbind(contained, x4)\n    x6 = lbind(extract, x5)\n    x7 = compose(x6, initset)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(positive, size, x8)\n    x10 = size(x2)\n    x11 = power(x9, x10)\n    x12 = chain(size, x5, x11)\n    x13 = palette(I)\n    x14 = lbind(sfilter, x13)\n    x15 = lbind(matcher, x7)\n    x16 = compose(x14, x15)\n    x17 = chain(x39, x14, x16)\n    x18 = fork(difference, identity, x17)\n    x19 = lbind(recolor, EIGHT)\n    x20 = compose(x19, x18)\n    x21 = fork(paint, identity, x20)\n    x22 = compose(center, first)\n    x23 = fork(add, x22, x202)\n    x24 = chain(toobject, x21, x23)\n    x25 = colorfilter(x7, ZERO)\n    x26 = chain(first, x24, x25)\n    x27 = fork( UnknownITY, x26, x24)\n    x28 = fork(insert, x27, x19)\n    x29 = fork(insert, x28, x79)\n    x30 = fork(insert, x29, x21)\n    x31 = fork(remove, x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = fork(add, x22, x12)\n    x34 = fork(add, x33, x32)\n    x35 = fork(add, x34, x29)\n    x36 = fork(connect, x22, x25)\n    x37 = fork(connect, x26,"], [1.1, "def solve_f96b4cba(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_35392ba3(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_7c66d00b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = normalize(x11)\n    x13 = leftmost(x12)\n    x14 = mostcolor(I)\n    x15 = uppermost(x12)\n    x16 = leftmost(x11)\n    x17 = astuple(x13, x14)\n    x18 = ulcorner(x12)\n    x19 = increment(x18)\n    x20 = lbind(subtract, x19)\n    x21 = rbind(toobject, I)\n    x22 = compose(x20, x21)\n    x23 = lbind(shift, x8)\n    x24 = rbind(multiply, x19)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(shift, x8)\n    x27 = rbind(multiply, x16)\n    x28 = chain(x26, x27, x22)\n    x29 = rbind(multiply, x15)\n    x30 = compose(x28, x29)\n    x31 = fork(add, x25, x30)\n    x32 = compose(x31, x21)\n    x33 = fork(combine, x28, x32)\n    x34 = fork(mapply, x33, x29)\n    x35 = fork(paint, identity, x34)\n    x36 = fork(equality, identity, dmirror)\n    x37 =495(x36)\n    x38 = mfilter(x37, vline)\n    x39 = paint(x35, x38)\n    x40 = branch"], [1.1, "def solve_ce544482(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_538f0956(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, FIVE)\n    x10 = rbind(adjacent, x4)\n    x11 = sfilter(x9, x10)\n    x12 = difference(x9, x11)\n    x13 = merge(x12)\n    x14 = cover(x7, x13)\n    x15 = shoot(ORIGIN, UNITY)\n    x16 = shoot(x15, RIGHT)\n    x17 = shoot(x16, LEFT)\n    x18 = shoot(x17, UP_RIGHT)\n    x19 = shoot(x18, LEFT)\n    x20 = combine(x15, x19)\n    x21 = rbind(subgrid, x20)\n    x22 = chain(palette, x21, rot90)\n    x23 = rbind(subgrid, x20)\n    x24 = compose(I, x23)\n    x25 = chain(palette, x21, x24)\n    x26 = rbind(ofcolor, FIVE)\n    x27 = compose(x26, x25)\n    x28 = chain(x17, x24, x27)\n    x29 = rbind(colorcount, TWO)\n    x30 = multiply(x29, x9)\n    x31 = power(x28, x30)\n    x32 = x31(x16)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = palette(x33)\n    x36 = other(x35, FOUR)\n    x37 = ofcolor(x33, x106)\n    x38 = ofcolor(x33, xr)\n    x39 = intersection(x37, x38)\n    x"], [1.1, "def solve_9356794d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_f3214fc2(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_23e42021(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = rbind(multiply, x4)\n    x6 = chain(toindices, x5, x6)\n    x7 = matcher(x6, ZERO)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    x12 = fill(I, x1, x11)\n    x13 = argmax(x9, width)\n    x14 = rbind(multiply, x4)\n    x15 = compose(x14, width)\n    x16 = argmax(x13, x15)\n    x17 = center(x16)\n    x18 = initset(x17)\n    x19 = cover(I, x18)\n    x20 = toindices(x16)\n    x21 = inbox(x16)\n    x22 = center(x21)\n    x23 = initset(x22)\n    x24 = fill(x19, x1, x23)\n    x25 = toobject(x24, x25)\n    x26 = objects(x28, T, F, T)\n    x27 = colorfilter(x26, x1)\n    x28 = rbind(toobject, x25)\n    x29 = chain(x28, x27, neighbors)\n    x30 = mapply(x29, x27)\n    x31 = astuple(x15, x14)\n    x32 = shift(x30, x31)\n    x33 = paint(x12, x32)\n    x34 = toindices(x16)\n    x35 = fork(insert, ulcorner, lrcorner)\n    x36 = fork(shift, identity, x35)\n    x37 = apply(x36, x34)\n    x38 = rbind(contained, x37)\n    x39 = rbind(sfilter,"], [1.1, "def solve_43606b81(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot180(I)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(positive, size)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(x2, x4, frontiers)\n    x6 = chain(size, dedupe, first)\n    x7 = chain(size, dedupe, last)\n    x8 = fork(greater, x6, x7)\n    x9 = fork(both, x5, x8)\n    x10 = lefthalf(x1)\n    x11 = righthalf(x1)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x12, x9)\n    x14 = power(x13, TWO)\n    x15 = branch(x10, x14, x4)\n    x16 = x15(x1)\n    x17 = x15(x2)\n    x18 = toindices(x16)\n    x19 = toindices(x17)\n    x20 = hfrontier(x18)\n    x21 = fill(x16, ZERO, x20)\n    x22 = fill(x21, x19, x20)\n    x23 = dedicated01945(x17)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, x25)\n    x26 = x25(x17)\n    x27 = palette(x26)\n    x28 = remove(ZERO, x27)\n    x29 = lbind(colorcount, x16)\n    x30 = argmax(x28, x29)\n    x31 = rbind(contained, x30)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(size, x33, first)\n    x35 = matcher(x34, ONE)\n    x36 = compose(size, last)\n    x37 = matcher(x36, ONE)\n    x38 = fork(either, x35, x37)\n    x39 = sfilter(x1, x38)\n"], [1.1, "def solve_9b6747d7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_aaf28fbe(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = upscale(x4, x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    x6 = toindices(x5)\n    x7 =lrcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(I, ZERO, x8)\n    x10 = asindices(x9)\n    x11 = to corners(x10)\n    x12 = toobject(x11, I)\n    x13 = asindices(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x15, x5)\n    x17 = fill(x9, x13, x16)\n    x18 =1988indices(x16)\n    x19 = lbind(adjacent, x18)\n    x20 = rbind(toobject, x15)\n    x21 = chain(x19, backdrop, x20)\n    x22 = compose(x5, x21)\n    x23 = fork(both, x21, x22)\n    x24 = rbind(numcolors, ONE)\n    x25 = compose(x24, decrement)\n    x26 = matcher(x25, ONE)\n    x27 = fork(both, x26, x23)\n    x28 = rbind(multiply, x22)\n    x29 = compose(x28, asindices)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x16, x30)\n    x32 = rbind(multiply, THREE)\n    x33 = compose(x32, x31)\n    x34 = fork(equality, identity, x33)\n    x35 = sfilter(x31, x34)\n    x36 =1999(x35)\n    x37 =0900(x16, x36)\n    x38 = paint(x37, x37)\n    x39 = fill(x38, x15"], [1.1, "def solve_f9f7d176(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_e3f7bbb4(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_c8b25e25(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_832d2894(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(normalize, x5)\n    x7 = chain(x4, x6, dmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(invert, x8)\n    x10 = power(x9, FOUR)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(initset, x11)\n    x13 = chain( begins, x11, x12)\n    x14 = rbind(branch, identity)\n    x15 = rbind(x14, x13)\n    x16 = chain(size, x15, x13)\n    x17 = partition(I)\n    x18 = fork(equality, x16, x17)\n    x19 = fork(both, x18, ONE)\n    x20 = extract(x19, x19)\n    x21 = x20(x20)\n    x22 = first(x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x17, x23)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x22)\n    x28 = width(x27)\n    x29 = lbind(repeat, x28)\n    x30 = chain(dmirror, merge, x29)\n    x31 = x30(x22)\n    x32 = frontiers(x31)\n    x33 = merge(x32)\n    x34 = palette(x33)\n    x35 = first(x34)\n    x36 = last(x34)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x37)\n    x39 = add(x38, x33)\n    x40 = shift(x23, x39"], [1.1, "def solve_fbfa9d9a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_03e5a5bd(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4f08e9de(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 =77fd(x1, toindices)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, identity,gde280)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = rbind(manhattan, x21)\n    x23 = compose(x22, initset)\n    x24 = argmin(x15, x23)\n    x25 = connect(x24, x16)\n    x26 = width(x19)\n    x27 = insert(x26, x15)\n    x28 = DOWN)\n    x29 = insert(x28, x15)\n    x30 = organizedmirror(x29)\n    x31 = width(x19)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = matcher(first, x10)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, toindices)\n    x36 = lbind(shift, x27)\n    x37 = rbind(multiply, x30)\n    x38 = chain(x35, x36, x37)\n    x39 = lbind(shift, x27)\n    x40 = rbind(multiply, x30)\n    x41"], [1.1, "def solve_a43be955(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = valmax(x5, width)\n    x7 = halve(x6)\n    x8 = objects(I, T, F, T)\n    x9 = lbind(colorfilter, x8)\n    x10 = rbind(argmax, x7)\n    x11 = lbind(toobject, x10)\n    x12 = compose(x11, x9)\n    x13 =55412(x2)\n    x14 = rbind(colorcount, x3)\n    x15 = lbind(toobject, x9)\n    x16 = compose(x14, x15)\n    x17 = x16(x2)\n    x18 = sfilter(x9, x17)\n    x19 =252indices(x18)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, last)\n    x22 = sfilter(x13, x21)\n    x23 = rbind(colorcount, x3)\n    x24 = valmax(x22, x23)\n    x25 = matcher(x21, x24)\n    x26 = sfilter(x18, x25)\n    x27 =27(x26)\n    x28 =88bind(colorcount, x3)\n    x29 = valmax(x28, x28)\n    x30 = matcher(x21, x29)\n    x31 = sfilter(x27, x30)\n    x32 =27(x31)\n    x33 = first(x32)\n    x34 = sfilter(x31, x33)\n    x35 = rbind(contained, x41)\n    x36 = compose(x34, last)\n    x37 = sfilter(x33, x36)\n    x38 =27(x37)\n    x39 = ofcolor(I, x3)\n    x40 = branch(x39, x38, x37)\n    O ="], [1.1, "def solve_085159d3(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_91d37929(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41"], [1.1, "def solve_2711256d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(equality, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(pair, frontiers, merge)\n    x5 = mfilter(x3, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(multiply, height, width)\n    x8 = size(x6)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x5, x9)\n    x11 = sfilter(x10, x8)\n    x12 = lbind(apply, first)\n    x13 = lbind(ofcolor, x1)\n    x14 = chain(x12, x13, x11)\n    x15 = rbind(contained, x15)\n    x16 = compose(x15, last)\n    x17 = sfilter(x11, x16)\n    x18 = lbind(colorfilter, x5)\n    x19 = compose(x18, first)\n    x20 = chain(inline, x17, x19)\n    x21 = fork(both, x16, x20)\n    x22 = fork(either, x21, first)\n    x23 = toindices(x5)\n    x24 = rbind(sfilter, x22)\n    x25 = compose(x24, x20)\n    x26 = lbind(recolor, FIVE)\n    x27 = compose(x26, x22)\n    x28 = chain(xto, x27, x29)\n    x29 = fork(combine, x25, x28)\n    x30 = fork(paint, identity, x29)\n    x31 = apply(x30, x11)\n    x32 = ofcolor(x31, FIVE)\n    x33 = compose(x32, x20)\n    x34 = argmax(x34, x33)\n    x35 = remove(x34, x34)\n    x36 = apply(center, x35)\n    x37 = normalize(x34)\n    x38 = shift(x37, x34"], [1.1, "def solve_87f86e83(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1edfb5b0(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(toindices, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizafilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = prapply(shift, x20, x2)\n    x22 = mapply(x21, x21)\n    x23 = combine(x21, x22)\n    x24 = fill(x19, THREE, x23)\n    x25 = palette(x24)\n    x26 =77fd23(x25)\n    x27 = asindices(x24)\n    x28 = ofcolor(x24, x27)\n    x29 = shift(x24, x28)\n    x30 = ofcolor(x24, x6)\n    x31 = intersection(x29, x30)\n    x32 = fill(x24, THREE, x31)\n    x33 = rot90(x32)\n    x34 = ofcolor(x33, x6)\n    x35 = shift(x34, x28)\n    x36 = ofcolor(x33, x6)\n    x37 = intersection(x39, x36)\n    x38 = fill(x33, THREE, x37)\n    x39 = fill(x"], [1.1, "def solve_956ab80d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(51,2)\n    x3 = lbind(9565, ZERO)\n    x4 = compose(x2, x3)\n    x5 = fork(add, height, x4)\n    x6 = compose(x1, width)\n    x7 = fork(equality, size, x5)\n    x8 = fork( both, x7, x6)\n    x9 = extract(x1, x8)\n    x10 = last(x9)\n    x11 = palette(I)\n    x12 = remove(x10, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = size(x15)\n    x17 = increment(x16)\n    x18 = outbox(x15)\n    x19 = rbind(toobject, I)\n    x20 = totuple(x18)\n    x21 = apply(x19, x20)\n    x22 = ofcolor(I, x14)\n    x23 = colorcount(I, x14)\n    x24 = increment(x23)\n    x25 = frontiers(I)\n    x26 = colorfilter(x25, x14)\n    x27 = difference(x25, x26)\n    x28 = size(x27)\n    x29 = increment(x28)\n    x30 = rbind(multiply, x29)\n    x31 = apply(x30, x27)\n    x32 = asindices(I)\n    x33 = of corners(x32)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = ofcolor(I, x15)\n    x37 = lbind(shift, x36)\n    x38 = mapply(x37, x31)\n    x39 = rbind(990, x38)\n    x40 = apply(x39, x33)\n    x41 = ofcolor(I, x18)\n    x42 = rbind(inter"], [1.1, "def solve_601cf0b0(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, T, T)\n    x10 = argmin(x9, numcolors)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = increment(x12)\n    x14 = increment(x13)\n    x15 = toindices(x4)\n    x16 = increment(x15)\n    x17 = increment(x16)\n    x18 = astuple(x12, x17)\n    x19 = rbind(multiply, x18)\n    x20 = toindices(x11)\n    x21 = increment(x20)\n    x22 = increment(x21)\n    x23 = fork(multiply, x18, x22)\n    x24 = x23(x11)\n    x25 = palette(I)\n    x26 = other(x25, x10)\n    x27 = palette(I)\n    x28 = remove(x13, x27)\n    x29 = rbind(positive, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = fgpartition(x18)\n    x32 = merge(x31)\n    x33 = apply(x32, x32)\n    x34 = product(x30, x33)\n    x35 = fork(connect, first, last)\n    x36 = apply(x35, x34)\n    x37 = fork(subtract, first, last)\n    x38 =94872232\n    x39 = fork(subtract, x37, x38)\n    x40 = fork(equality, x36, x39)\n    x41 = mfilter(x34, x40)\n    x42 = size(x41)\n    x43 ="], [1.1, "def solve_e7775ead(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = branch(x1, trim, tophalf)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = vmirror(x3)\n    x5 = objects(x4, T, F, F)\n    x6 = order(x5, uppermost)\n    x7 = compose(color, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    x10 = size(x1)\n    x11 = decrement(x10)\n    x12 = height(x2)\n    x13 = astuple(x12, x11)\n    x14 = crop(x2, ORIGIN, x13)\n    x15 = leastcolor(x14)\n    x16 = canvas(x15, x14)\n    x17 = hconcat(x16, x16)\n    x18 = compose(first, last)\n    x19 = compose(x18, first)\n    x20 = fork(subtract, x19, first)\n    x21 = compose(first, last)\n    x22 = compose(x21, first)\n    x23 = fork(subtract, x22, last)\n    x24 = fork(astuple, x23, x20)\n    x25 = compose(decrement, x24)\n    x26 = normalize(x2)\n    x27 = fork(add, first, x25)\n    x28 = toindices(x26)\n    x29 = compose(x27, x28)\n    x30 = fork(connect, x29, x21)\n    x31 = apply(x30, x8)\n    x32 = lbind(greater, x13)\n    x33 = compose(x32, first)\n    x34 = sfilter(x31, x33)\n    x35 = difference(x19, x34)\n    x36 = lbind(compose, center)\n    x37 = lbind(x36, positive)\n    x38 = chain(x39, x37, x29)\n    x39 =sfilter(x35, x38)\n    "], [1.1, "def solve_7965aa7b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = canvas(ZERO, x27)\n    x29 = astuple(x24, x18)\n    x30 = initset(x29)\n    x31 = insert(UNITY, x30)\n    x32 = insert(x28, x31)\n    x33 = width(I)\n    x34 = decrement(x33)\n    x35 = tojvec(x34)\n    x36 = height(I)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = initset(x38)\n    x40 = insert(x35, x39)\n    x41 = insert(x36, x40)\n    x42 = width(I)\n    x43 = decrement(x42)\n    x44 = tojvec(x43)\n    "], [1.1, "def solve_df57a124(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = matcher(color, x3)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = merge(x12)\n    x14 = palette(x13)\n    x15 = matcher(identity, x3)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x14, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = totuple(x20)\n    x22 = apply(color, x21)\n    x23 = lbind(sfilter, x12)\n    x24 = lbind(matcher, identity)\n    x25 = chain(size, x23, x24)\n    x26 = compose(x25, vline)\n    x27 = chain(sfilter, x16, x26)\n    x28 = lbind(colorcount, x13)\n    x29 = fork(upscale, x28, x27)\n    x30 = decrement(x4)\n    x31 =1999(x30)\n    x32 = rbind(subtract, x31)\n    x33 = chain(x32, x29, first)\n    x34 = fork(apply, x33, x33)\n    x35 =88(x22)\n    x36 = x34(x35)\n    x37 = ofcolor(x36, x3)\n    x38 = rbind(adjacent, x37)\n    x39 = compose(x38, last)\n    x40 = extract(x41, x39)\n    x41 = initset("], [1.1, "def solve_8a907dfc(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_c6ba9eff(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(size, dedupe, first)\n    x5 = matcher(x4, ONE)\n    x6 = compose(first, cmirror)\n    x7 = chain(size, dedupe, x6)\n    x8 = matcher(x7, ONE)\n    x9 = fork(both, x5, x8)\n    x10 = rbind(rapply, I)\n    x11 = compose(initset, first)\n    x12 = chain(first, x10, x11)\n    x13 = compose(x12, x5)\n    x14 = extract(x3, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = trim(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = asobject(x20)\n    x22 = mostcolor(I)\n    x23 = matcher(first, x22)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x21, x24)\n    x26 = partition(x25)\n    x27 = fork(multiply, height, width)\n    x28 = fork(equality, size, x27)\n    x29 = sfilter(x26, x28)\n    x30 = argmax(x29, x27)\n    x31 = difference(x22, x30)\n    x32 = asobject(x31)\n    x33 = matcher(first, x22)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = sizefilter(x31, ONE)\n    x37 = argmax(x36, size)\n    x38 = remove(x37, x36)\n    x39 = merge(x38)\n    x40 = palette"], [1.1, "def solve_fa02ba69(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_afcf20be(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rbind(ofcolor, ONE)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_1a6acc1c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = height(I)\n    x7 = width(I)\n    x8 = add(x6, x7)\n    x9 = add(x5, x8)\n    x10 = I(I, x4)\n    x11 = I(I, x7)\n    x12 = width(I)\n    x13 = increment(x12)\n    x14 = divide(x13, x11)\n    x15 = height(I)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = divide(x17, x11)\n    x19 = width(I)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(multiply, x14)\n    x23 = apply(x22, x21)\n    x24 = lbind(shift, x22)\n    x25 = mapply(x24, x23)\n    x26 = fill(I, FOUR, x25)\n    x27 = canvas(ZERO, x8)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 = toobject(x29, I)\n    x31 = mostcolor(x30)\n    x32 = occurrences(x26, x31)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, identity, dmirror)\n    x36 = x35(x16)\n    x37 = equality(x36, ONE)\n    x38 = branch(x37, identity, vmirror)\n    x39 = x38(x51)\n    x40 = downscale(x39, x3)\n    x41 = ofcolor(x40, x31)\n    x42 =91000(x41, asobject)\n    x43 = ofcolor(x"], [1.1, "def solve_d597c11f(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_f1a0a95b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_3b3e2d03(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(uppermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = compose(x4, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x3, x8)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(NEG_ONE, x13)\n    x15 = invert(x13)\n    x16 = astuple(NEG_ONE, x15)\n    x17 = double(x13)\n    x18 = astuple(NEG_TWO, x17)\n    x19 = double(x13)\n    x20 = invert(x19)\n    x21 = astuple(NEG_TWO, x20)\n    x22 = multiply(THREE, TEN)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x14)\n    x25 = apply(x24, x23)\n    x26 = lbind(multiply, x16)\n    x27 = apply(x26, x23)\n    x28 = lbind(multiply, x18)\n    x29 = apply(x28, x23)\n    x30 = lbind(multiply, x21)\n    x31 = apply(x30, x23)\n    x32 = lbind(shift, x12)\n    x33 = mapply(x32, x25)\n    x34 = lbind(shift, x12)\n    x35 = mapply(x34, x27)\n    x36 = lbind(shift, x12)\n    x37 = mapply(x36, x29)\n    x38 = lbind(shift, x"], [1.1, "def solve_53e3346b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 =00000000\n    \"\"\"\n    x3 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind("], [1.1, "def solve_048b64fd(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = sfilter(x31, x30)\n    x33 = merge(x32)\n    x34 = rot90(x30)\n    x35 = downscale(x33, x34)\n    x36 = objects(x35, T, F, F)\n    x37 = argmax(x36, x24)\n    x38 = last(x37)\n    x39 = remove(x39, x36"], [1.1, "def solve_d0765819(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = initset(x7)\n    x13 = add(x15, x12)\n    x14 =tojvec(x13)\n    x15 = drilltext(x14, x7)\n    x16 = lbind(argmin, x15)\n    x17 = compose(x16, toindices)\n    x18 = fork(difference, box, x17)\n    x19 = fork(equality, x18, identity)\n    x20 = compose(x19, switch)\n    x21 = rbind(multiply, xICS)\n    x22 = rbind(divide, xIts)\n    x23 = compose(x21, x22)\n    x24 = fork(equality, x23, identity)\n    x25 = compose(x24, x11)\n    x26 = lbind(apply, x25)\n    x27 = rbind(multiply, x10)\n    x28 = rbind(divide, x13)\n    x29 = x26(x14)\n    x30 = x27(x29)\n    x31 = fork(equality, x28, x30)\n    x32 = compose(x27, x11)\n    x33 = lbind(apply, x32)\n    x34 = rbind(toobject, I)\n    x35 = compose(x33, x34)\n    x36 = apply(x35, x15)\n    x37 = chain(x26, x24, x30)\n    x38 = x37(x36)\n    x39 = rbind(add, x38)\n    x40 = compose("], [1.1, "def solve_c7c2662f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = compose(x4, size)\n    x7 = sfilter(x3, x6)\n    x8 = chain(hline, sfilter, fgpartition)\n    x9 = merge(x7)\n    x10 = palette(x9)\n    x11 = intersection(x10, x8)\n    x12 = astuple(identity, rot90)\n    x13 = astuple(rot180, rot270)\n    x14 = combine(x12, x13)\n    x15 = astuple(identity, rot270)\n    x16 = astuple(rot180, rot90)\n    x17 = combine(x15, x16)\n    x18 = pair(x14, x17)\n    x19 = rbind(rapply, I)\n    x20 = compose(initset, first)\n    x21 = chain(first, x19, x20)\n    x22 = rbind(ofcolor, EIGHT)\n    x23 = chain(lowermost, x22, x21)\n    x24 = matcher(x23, ZERO)\n    x25 = extract(x18, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = x26(I)\n    x29 = decrement(x28)\n    x30 = astuple(x29, x27)\n    x31 = palette(I)\n    x32 = first(x31)\n    x33 = last(x31)\n    x34 = switch(x20, x33, x25)\n    x35 = branch(x34, hmirror, vmirror)\n    x36 = x35(x42)\n    x37 = canvas(x30, x36)\n    x38 = paint(x37, x34)\n    x39 = ofcolor(x38, EIGHT)\n    x40 = shift(x39,"], [1.1, "def solve_5480b6c7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, contained)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, ulcorner, x31)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(add, toivec, x34)\n    x36 = fork(add, tojvec, x35)\n    x37 = fork(add, normalize, x36)\n    x38 = mapply(x37, x4)\n    O = paint(I, x38)"], [1.1, "def solve_2bb3c351(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b28f5123(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = replace(I, SIX, TWO)\n    x2 = objects(x1, T, F, T)\n    x3 = merge(x2)\n    x4 = color(x3)\n    x5 = subgrid(x3, x1)\n    x6 = argmax(x5, width)\n    x7 = astuple(TWO, ONE)\n    x8 = x5(x6)\n    x9 = box(x3)\n    x10 = fill(x6, x4, x9)\n    x11 = fill(x10, x4, x7)\n    x12 = lbind(O = merge(x6)\n    x13 = compose(color, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = height(x11)\n    x16 = decrement(x15)\n    x17 =909(astuple, x16)\n    x18 = compose(last, first)\n    x19 = rbind(contained, x17)\n    x20 = sfilter(x11, x18)\n    x21 =\n    0202277522\n    last, x19)\n    x22 = width(x11)\n    x23 = subtract(x25, x22)\n    x24 = astuple(x23, x24)\n    x25 = canvas(ZERO, x24)\n    x26 = asindices(x25)\n    x27 = fgpartition(x25)\n    x28 = merge(x27)\n    x29 = palette(x28)\n    x30 = lbind(shift, x28)\n    x31 = mapply(x30, x29)\n    x32 = paint(x25, x31)\n    x33 =scale(x32, UNITY)\n    x34 = ofcolor(x33, x4)\n    x35 = asindices(x33)\n    x36 = remove(x35, x3333)\n    x37 =    x37 = lbind(recolor, x4)\n    x38 = lbind(mapply, x33)\n    x39 = rbind(ofcolor, x4)\n    x40 = chain("], [1.1, "def solve_e6723d67(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = sfilter(x1, vline)\n    x5 = size(x4)\n    x6 = greater(x3, x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(first, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = mostcolor(x10)\n    x19 = lbind(recolor, x18)\n    x20 = rbind(sfilter, x15)\n    x21 = compose(toindices, x20)\n    x22 = fork(combine, x21, outbox)\n    x23 = compose(x19, x22)\n    x24 = fork(combine, x17, x23)\n    x25 = shape(x10)\n    x26 = add(TWO, x25)\n    x27 = canvas(x18, x26)\n    x28 = asobject(x10)\n    x29 = shift(x28, UNITY)\n    x30 = paint(x27, x29)\n    x31 = rbind(shift, NEG_UNITY)\n    x32 = lbind(occurrences, x30)\n    x33 = compose(x31, x32)\n    x34 = compose(x33, x24)\n    x35 = chain(positive, size, x34)\n    x36 = sfilter(x12, x35)\n    x37 = chain(first, x33, x24)\n    x38 = compose(ulcorner, x24)\n    x39 = fork(subtract, x37, x38)\n"], [1.1, "def solve_32761d00(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_de886222(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, ONE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, identity, rot90)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = rot180(x6)\n    x8 = sfilter(x3, x7)\n    x9 = merge(x8)\n    x10 = rot180(x9)\n    x11 = sfilter(x3, x4)\n    x12 = merge(x11)\n    x13 = rot270(x12)\n    x14 = sfilter(x3, x4)\n    x15 = argmax(x14, size)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x15, x7)\n    x18 = objects(x17, T, F, F)\n    x19 = rbind(colorcount, ZERO)\n    x20 = argmax(x18, x19)\n    x21 = height(x20)\n    x22 = width(x20)\n    x23 = vsplit(x20, x22)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x2200, x24)\n    x26 = combine(x21, x25)\n    x27 = palette(x25)\n    x28 = llcorner(x27)\n    x29 = matcher(first, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(compose, flip)\n    x32 = lbind(matcher, first)\n    x33 = chain(x30, x31, x32)\n    x34 = lbind(paint, x17)\n    x35 = rbind(compose, asobject)\n    x36 = lbind(rbind, extract)\n    x37 = chain(x34, x35, x36)\n    x38 = fork(shift, identity, x37)\n    x39 = rbind(shift, x38)\n    x40 = compose(x39"], [1.1, "def solve_2e9b2df7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = width(x11)\n    x21 = decrement(x20)\n    x22 = tojvec(x21)\n    x23 = identity(DOWN)\n    x24 = connect(ORIGIN, x22)\n    x25 = fill(x18, THREE, x24)\n    x26 = identity(x12)\n    x27 = width(x12)\n    x28 = decrement(x27)\n    x29 = tojvec(x28)\n    x30 = identity(corners)\n    x31 = fill(x25, THREE, x30)\n    x32 = identity(x26)\n    x33 = identity(x256)\n    x34 = connect(ORIGIN, x24)\n    x35 = fill(x39, THREE, x34)\n    x36 = identity(x30)\n    x37 = fill(x35, THREE, x36)\n    x38 = add(x27, x36)\n    x39 = fill(x37, THREE, x38)\n    x40 = add(x29, x36)\n    x41 = fill(x40, THREE, x39)\n    x42 = combine(x34, x41)"], [1.1, "def solve_fbb4eb24(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = asobject(x8)\n    x11 = ulcorner(x9)\n    x12 = vplit(x10, TWO)\n    x13 = hsplit(x11, TWO)\n    x14 = neighbors(x13)\n    x15 = mapply(palette, x14)\n    x16 = astuple(x11, x12)\n    x17 = ulcorner(x9)\n    x18 = vsubtract(x17, x12)\n    x19 = hsplit(x19, TWO)\n    x20 = rbind(ofcolor, TWO)\n    x21 = compose(x20, x10)\n    x22 = fork(subtract, x21, x17)\n    x23 = corners(x15)\n    x24 = apply(x22, x23)\n    x25 = ZERO(x24)\n    x26 = fgpartition(x25)\n    x27 = merge(x26)\n    x28 = difference(x27, x25)\n    x29 = intersection(x28, x25)\n    x30 = shift(x29, DOWN)\n    x31 = extract(x30, x17)\n    x32 = initset(x15)\n    x33 = insert(x22, x32)\n    x34 = insert(x26, x33)\n    x35 = combine(x35, x34)\n    x36 = product(x35, x35)\n    x37 = power(increment, TWO)\n    x38 = x37(ORIGIN)\n    x39 = height(x38)\n    x40 = divide(x39, x37)\n    x41 = width"], [1.1, "def solve_54b7a60d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = palette(I)\n    x22 = remove(x20, x21)\n    x23 = other(x22, x20)\n    x24 = ofcolor(I, x20)\n    x25 = ofcolor(I, x10)\n    x26 = ofcolor(I, x5)\n    x27 = subgrid(x20, I)\n    x28 = subgrid(x25, I)\n    x29 = asobject(x28)\n    x30 = hperiod(x29)\n    x31 = height(I)\n    x32 = divide(x31, x30)\n    x33 = fgpartition(x32)\n    x34 = merge(x33)\n    x35 = x20(x34)\n    x36 = lbind(shift, x24)\n    x37 = shift(x35, x36)\n    x38 = toobject(x37, x28)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    x41 = toobject(x40, x28)\n    x42 = astuple("], [1.1, "def solve_b3351aa3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors(d687)\n    x10 = lbind(lbind, sfilter)\n    x11 = rbind(colorcount, I)\n    x12 = chain(x11, x10, frontiers)\n    x13 = matcher(x12, TWO)\n    x14 = dmirror(x7)\n    x15 = lbind(hupscale, x14)\n    x16 = chain(x15, tojvec, x13)\n    x17 = compose(x16, x12)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = fork(combine, x17, x18)\n    x20 = fork(combine, x19, x7)\n    x21 = palette9(I)\n    x22 = extract(x21, x20)\n    x23 = lbind(hupscale, x7)\n    x24 = chain(x23, positive, x20)\n    x25 = dmirror(x7)\n    x26 = palette(x25)\n    x27 = other(x26, x22)\n    x28 =422(x28, x22)\n    x29 = rbind(rapply, x28)\n    x30 = compose(x29, initset)\n    x31 = argmax(x28, x30)\n    x32 = x28(x31)\n    x33 = ofcolor(x35, x27)\n    x34 =[contained(x33, x34)\n    x35 = ofcolor(x35, x27)\n    x36 = sfilter(x34, x35)\n    x37 = difference(x35, x36)\n    x38 = ofcolor("], [1.1, "def solve_28d1bbf1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_dc0730b9(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = argmax(x2, width)\n    x4 = height(x3)\n    x5 = halve(x4)\n    x6 = frontiers(x3)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = astuple(x5, x6)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x44 = interval(x13, x12, ONE)\n    x15 = lbind(shift, x11)\n    x16 = apply(x15, x44)\n    x17 = rbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = rbind(hmatching, x11)\n    x20 = rbind(vmatching, x11)\n    x21 = fork(either, x19, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(extract, x22, x18)\n    x24 = compose(size, x23)\n    x25 = increment(x5)\n    x26 = interval(x25, x25, ONE)\n    x27 = corners(x11)\n    x28 = insert(x15, x27)\n    x29 = insert(x16, x28)\n    x30 = insert(x11, x29)\n    x31 =riercorner(x30)\n    x32 = apply(size, x31)\n    x33 = increment(x5)\n    x34 = interval(x33, x32, ONE)\n    x35 = apply(tojvec, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = fill(x10, FOUR, x36)\n    x38 = x42(x37)\n    x39 =703725(x38)\n    x40 = increment(x5)\n    x41 ="], [1.1, "def solve_d3e5f487(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4eca0cab(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = ONE(x3)\n    x5 = ONE(I)\n    x6 = rot270(x4)\n    x7 = astuple(identity, rot270)\n    x8 = astuple(rot180, rot90)\n    x9 = combine(x7, x8)\n    x10 = sfilter(x9, square)\n    x11 = difference(x3, x10)\n    x12 = rot90(x11)\n    x13 = rbind(rapply, x2)\n    x14 = chain(first, x13, initset)\n    x15 = fork(combine, identity, x14)\n    x16 = extract(x15, x11)\n    x17 = mapply(x16, x12)\n    x18 = first(x17)\n    x19 = trim(x18)\n    x20 = dmirror(x19)\n    x21 = asobject(x20)\n    x22 = height(x21)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = apply(double, x24)\n    x26 = shape(x21)\n    x27 = apply(asobject, x21)\n    x28 = chain(first, x27, last)\n    x29 = asindices(x21)\n    x30 = ofcolor(x21, ZERO)\n    x31 = ofcolor(x21, ONE)\n    x32 = intersection(x29, x30)\n    x33 = fill(x21, ZERO, x32)\n    x34 = height(x21)\n    x35 = equality(x34, ZERO)\n    x36 = branch(x35, x22, vsplit)\n    x37 = lbind(recolor, ZERO)\n    x38 =88a104 last(I)\n    x39 = chain(x37, x37, x38)\n    x40 = difference(x39, x31)\n    x41"], [1.1, "def solve_7abfe236(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, TWO_BY_TWO)\n    x8 = initset(x4)\n    x9 = insert(x8, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 = mapply(ineighbors, x11)\n    x13 = fill(x7, ONE, x12)\n    x14 =fill(x13,004, x11)\n    x15 = ofcolor(x14, x5)\n    x16 = rbind(adjacent, x15)\n    x17 = mfilter(x15, x16)\n    O = fill(x14, x5, x17)\n    return O"], [1.1, "def solve_bba87be2(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = divide(x3, x4)\n    x6 = increment(x5)\n    x7 = width(I)\n    x8 = halve(x7)\n    x9 = increment(x8)\n    x10 = height(I)\n    x11 = divide(x9, x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = prapply(astuple, x13, x13)\n    x15 = lbind(canvas, ZERO)\n    x16 = lbind(occurrences, I)\n    x17 = compose(x15, x16)\n    x18 = lbind(apply, multiply)\n    x19 = chain(x17, x18, frontiers)\n    x20 = matcher(x19,45)\n    x21 = fork(recolor, color, x20)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x14, x22)\n    x24 = paint(I, x23)\n    x25 =101015(x23)\n    x26 = matcher(x22, x25)\n    x27 = mfilter(x1, x26)\n    O = paint(x24, x27)\n    return O"], [1.1, "def solve_74887115(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = chain(positive, first, x1)\n    x3 = lbind(lbind, sfilter)\n    x4 =539a539a6(I)\n    x5 = compose(x2, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = equality(x4, x6)\n    x8 = branch(x7, identity, x6)\n    x9 = x8(I)\n    O = partition(x9)\n    return O"], [1.1, "def solve_b902a6ba(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =29ec(d406)\n    x3 =92(flip, FOUR)\n    x4 = shape(I)\n    x5 = maximum(x4)\n    x6 =675(x5)\n    x7 = interval(TWO, x6, ONE)\n    x8 = rbind(multiply, x5)\n    x9 = apply(x8, x7)\n    x10 = rbind(multiply, FOUR)\n    x11 = apply(x10, x9)\n    x12 = matcher(numcolors, FOUR)\n    x13 = sfilter(x11, x12)\n    x14 = apply(color, x13)\n    x15 = mostcommon(x14)\n    x16 = repeat(x15, ONE)\n    O = x15(I)\n    return O"], [1.1, "def solve_88acd047(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 =66(I)\n    x4 =364(x3)\n    x5 = decrement(x4)\n    x6 = branch(x5, identity, initset)\n    x7 = branch(x5, identity, outbox)\n    x8 = x6(x7)\n    x9 = ulcorner(x8)\n    x10 = decrement(x9)\n    x11 = branch(x5, identity, initset)\n    x12 = x11(x10)\n    x13 = initset(x12)\n    x14 = insert(x9, x13)\n    x15 = width(I)\n    x16 = decrement(x15)\n    x17 = tojvec(x16)\n    x18 = connect(ORIGIN, x17)\n    x19 = height(I)\n    x20 = decrement(x19)\n    x21 = toivec(x20)\n    x22 = connect(ORIGIN, x21)\n    x23 = compress(I)\n    x24 = numcolors(x23)\n    x25 = equality(x24, ONE)\n    x26 = branch(x25, identity, x22)\n    x27 = branch(x25, identity, x24)\n    x28 = width(x26)\n    x29 = decrement(x28)\n    x30 = tojvec(x29)\n    x31 = connect(ORIGIN, x30)\n    x32 = height(x26)\n    x33 = decrement(x32)\n    x34 = toivec(x33)\n    x35 = connect(ORIGIN, x34)\n    x36 = connect(ORIGIN, x28)\n    x37 = connect(ORIGIN, x29)\n    x38 = fill(I, THREE, x36)\n    x39 = fill(x38, EIGHT, x37)\n    x40 = fill(x39, TWO, x35)\n    O = fill(x40, ONE, x39)\n    return O"], [1.1, "def solve_edf3b147(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rot270(I)\n    x2 = fork(product, identity, identity)\n    x3 = apply(x2, x1)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, identity, identity)\n    x6 = x5(x1)\n    x7 =    488712738(x6)\n    O = x5(x7)\n    return O"], [1.1, "def solve_17b4feea(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =441001F\n    0000000001\n    x2 = merge(x1)\n    x4 = fill(I, NEG_ONE, x3)\n    x5 = astuple(x11, x12)\n    x6 = ulcorner(x2)\n    x7 = increment(x6)\n    x8 = rbind(subtract, x7)\n    x9 = chain(even, x8, last)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, first, last)\n    x12 = compose(flip, x9)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(decrement, x13, last)\n    x15 = fork(astuple, x11, x14)\n    x16 = apply(x15, x10)\n    O = paint(x4, x16)\n    return O"], [1.1, "def solve_d110545f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(equality, height, width)\n    x7 = size(x5)\n    x8 = interval(ZERO, x7, x6)\n    x9 = sfilter(x8, x4)\n    x10 = rbind(contained, x8)\n    x11 = compose(x10, outbox)\n    x12 = sfilter(x9, x11)\n    x13 = FOUR(x12)\n    x14 = increment(x13)\n    x15 =455(x12)\n    x16 = decrement(x15)\n    x17 = canvas(ZERO, x16)\n    x18 = asobject(x17)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x17, x19)\n    x21 = height(x17)\n    x22 = width(x17)\n    x23 = astuple(x21, x22)\n    x24 = crop(x20, ORIGIN, x23)\n    x25 = hmirror(x24)\n    x26 = vmirror(x24)\n    x27 = ofcolor(x25, ZERO)\n    x28 = ofcolor(x26, ZERO)\n    x29 = product(x27, x28)\n    x30 = insert(x28, x29)\n    x31 = ofcolor(x20, TWO)\n    x32 = mapply(neighbors, x31)\n    x33 = difference(x30, x32)\n    O = fill(x20, ONE, x33)\n    return O"], [1.1, "def solve_1a7fd12c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(I, ONE)\n    x4 =866(numcolors, trim)\n    x5 = compose(multiply, repeat)\n    x6 = matcher(dedupe, x5)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x4)\n    x9 = compose(x8, x6)\n    x10 = initset(identity)\n    x11 = matcher(x10, ZERO)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = argmax(x13, last)\n    x15 = height(x14)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = insert(x14, x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x17)\n    O = paint(I, x20)\n    return O"], [1.1, "def solve_e60115ad(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(add, first, last)\n    x9 = fork(connect, x7, x8)\n    x10 = fork(equality, x9, identity)\n    x11 =\n    x10(x2)\n    x12 = leastcolor(x11)\n    x13 = tojvec(SIX)\n    x14 = crop(x13, identity)\n    x15 = height(x14)\n    x16 = width(x14)\n    x17 = vsplit(x16, x15)\n    x18 = compose(x17, first)\n    x19 = fork(equality, identity, x18)\n    x20 = compose(x19, last)\n    x21 = width(x2)\n    x22 = vsplit(x21, x12)\n    x23 =885112(x22)\n    x24 = invert(x23)\n    x25 = shift(x14, x24)\n    x26 = shift(x25, x24)\n    x27 = palette(x26)\n    x28 = lbind(shift, x26)\n    x29 = occurrences(x28, x27)\n    x30 = mapply(x28, x29)\n    O = paint(x23, x30)\n    return O"], [1.1, "def solve_79f29e04(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 =850d687anch(x8, ORIGIN, toindices)\n    x10 = matcher(first, x39)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = matcher(first, x39)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x16, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x20)\n    x23 = fork(combine, x22, x22)\n    x24 = rbind(shoot, UNITY)\n    x25 = compose(x24, last)\n    x26 = fork(recolor, first, x25)\n    x27 = mapply(x26, x4)\n    O = paint(x6, x27)\n    return O"], [1.1, "def solve_2ccd11ae(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    4577300009\n    3011433066\n    7854836027\n    1929100002\n    \"\"\"\n    x1 = halve(x1)\n    x2 = rbind(shoot, x4)\n    x3 = rbind(shoot, x2)\n    x4 = fork(combine, x2, x3)\n    x5 = rbind(shoot, x2)\n    x6 = rbind(shoot, x4)\n    x7 = fork(combine, x6, x5)\n    x8 = fork(combine, x4, x7)\n    x9 = leastcolor(I)\n    x10 = rbind(toobject, I)\n    x11 = rbind(colorcount, x9)\n    x12 = chain(x11, x10, dneighbors)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x1, x13)\n    x15 = x14(I)\n    x16 = last(x15)\n    x17 = subgrid(x16, x15)\n    x18 = index(x17, DOWN)\n    x19 = subgrid(x18, x15)\n    x20 = hmirror(x19)\n    x21 = replace(x20, x9, x8)\n    x22 = replace(x21, x10, x7)\n    x23 = replace(x22, x19, x8)\n    x24 = hmirror(x23)\n    O = replace(x24, x10, x5)\n    return O"], [1.1, "def solve_6524061a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 =215(I)\n    x3 = halve(x1)\n    x4 = increment(x3)\n    x5 = width(I)\n    x6 = divide(x5, x4)\n    x7 = astuple(x6, x4)\n    x8 = canvas(ZERO, x7)\n    x9 = ofcolor(x8, ONE)\n    x10 = rbind(multiply, x4)\n    x11 = apply(x10, x9)\n    x12 = rbind(multiply, x6)\n    x13 = apply(x12, x11)\n    x14 = ofcolor(x8, ONE)\n    x15 = rbind(intersection, x14)\n    x16 = apply(x15, x13)\n    O = fill(x8, ZERO, x16)\n    return O"], [1.1, "def solve_a311ede7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, TWO, THREE)\n    x3 = switch(x2, ONE, FOUR)\n    x4 = switch(x3, EIGHT, FOUR)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(ORIGIN)\n    x12 = box(x7)\n    x13 = inbox(x7)\n    x14 = center(x7)\n    x15 = initset(x14)\n    x16 = lbind(toobject, x12)\n    x17 = compose(x4, x16)\n    x18 = lbind(toobject, x13)\n    x19 = compose(x4, x18)\n    x20 = lbind(toobject, x15)\n    x21 = compose(x4, x20)\n    x22 =454(x21)\n    x23 = merge(x11)\n    x24 = fill(x6, TWO, x23)\n    x25 = asindices(x24)\n    x26 = corners(x25)\n    x27 = toobject(x26, x24)\n    x28 = mostcolor(x27)\n    x29 = asindices(x24)\n    x30 = ofcolor(x24, x28)\n    x31 = difference(x29, x30)\n    x32 = rbind( fill, x28)\n    x33 = apply(x32, x31)\n    x34 = rbind(adjacent, x4)\n    x35 = mfilter(x34, x28)\n    x36 = mfilter(x34, x25)\n    x37 = paint(x24, x3)\n    x38 = paint(x37, x35)\n    O = fill(x38, x28, x36)\n    return O"], [1.1, "def solve_c25fc43f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =159(I)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.1, "def solve_f81fd587(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(O = maximum(x4)\n    x10 = double(x4)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = rbind(multiply, x4)\n    x13 = apply(x12, x11)\n    x14 = rbind(multiply, x6)\n    x15 = apply(x14, x11)\n    x16 = pair(x13, x15)\n    x17 = rbind(add, ZERO)\n    x18 = compose(x17, first)\n    x19 = rbind(add, x8)\n    x20 = pair(x16, x19)\n    x21 = fork(combine, x18, x20)\n    x22 = mapply(x21, x30)\n    O = fill(x2, FOUR, x22)\n    return O"], [1.1, "def solve_e46bf51e(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = vperiod(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = add(x5, THREE)\n    x7 = width(I)\n    x8 = astuple(x6, x7)\n    x9 = partition(I)\n    x10 = lbind(colorcount, I)\n    x11 = argmax(x9, x10)\n    x12 = canvas(x11, x8)\n    x13 = apply(normalize, x12)\n    x14 = lbind(to67e509687\n    x15 =8877(x14)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x13, x17)\n    x19 = compose(invert, size)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_aaaa4e5d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = compose(toindices, normalize)\n    x11 = matcher(x10, x9)\n    x12 = uppermost(x7)\n    x13 = compose(toindices, normalize)\n    x14 = matcher(x13, x12)\n    x15 = leftmost(x7)\n    x16 = matcher(x15, x13)\n    x17 = uppermost(x7)\n    x18 = greater(x16, x17)\n    x19 = leftmost(x7)\n    x20 = matcher(x19, x14)\n    x21 = uppermost(x7)\n    x22 = matcher(x21, x18)\n    x23 = leftmost(x7)\n    x24 = matcher(x23, x14)\n    x25 = rightmost(x7)\n    x26 = matcher(x25, x24)\n    x27 = leftmost(x7)\n    x28 = matcher(x27, x28)\n    x29 = uppermost(x7)\n    x30 = matcher(x29, x25)\n    x31 = rightmost(x7)\n    x32 = matcher(x31, x29)\n    x33 = leftmost(x7)\n    x34 = sfilter(x33, x21)\n    x35 = argmax(x34, size)\n    x36 = difference(xs, x35)\n    x37 =884483replace(x36, x8, x5)\n    O = uppermost(x37)\n    return O"], [1.1, "def solve_94253c38(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =523259\n    4292891824\n    \"\"\"\n    x2 = astuple(TWO, ONE)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x4)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [1.1, "def solve_aa2d0b61(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(150,197)\n    x9 = size(x3)\n    x10 = vsplit(x4, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hconcat, identity)\n    x14 = hmirror(x11)\n    x15 = matcher(x13, x14)\n    x16 = identity( Maurice222\n    0000000352\n    \"\"\"\n    x1 = leastcolor(x6)\n    x2 = vsplit(x6, x12)\n    x3 = apply(x13, x2)\n    x4 = maximum(x3)\n    x5 = ofcolor(x4, x1)\n    x6 = hmirror(x5)\n    x7 = fill(x6, ZERO, x1)\n    x8 = insert(x7, x5)\n    O = fill(x8, ZERO, x2)\n    return O"], [1.1, "def solve_0cc501ef(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette,I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.1, "def solve_36df1f97(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I asobject, I)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_7e21616c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = partition(I)\n    x5 = sizefilter(x4, ONE)\n    x6 = difference(x4, x5)\n    x7 =1117fcbind(ofcolor, x2)\n    x8 = mapply(x7, x6)\n    x9 = fork(connect, ulcorner, urcorner)\n    x10 = fork(connect, urcorner, ulcorner)\n    x11 = fork(combine, x9, x10)\n    x12 = mapply(x11, x9)\n    O = fill(I, x2, x12)\n    return O"], [1.1, "def solve_429ab382(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =889(RIGHT)\n    x2 = halve(x1)\n    O = upscale(I, x2)\n    return O"], [1.1, "def solve_e6a81d9e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =7326(I)\n    x2 = tophalf(x1)\n    O = bottomhalf(x1)\n    return O"], [1.1, "def solve_973c9f8a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 =483(x7)\n    x13 =485(x7)\n    x14 =11(x12)\n    x15 =11(x13)\n    x16 = rbind(multiply, x4)\n    x17 = apply(x16, x14)\n    x18 = mapply(x16, x17)\n    x19 = merge(x9)\n    x20 = fill(I, x3, x19)\n    O = fill(x20, x11, x18)\n    return O"], [1.1, "def solve_2b62334e(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =8888(66666666)\n    x2 = rbind(shoot, RIGHT)\n    x3 = rbind(shift, LEFT)\n    x4 = compose(x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.1, "def solve_ced800e1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = heavily remind4448(I)\n    x2 =Example output:\n    4941910114\n    2732866842\n    8388760181\n    3013746873\n    1529944467\n    1491984894\n    6741268043\n    314479401f8(77769718\n    57648014328\n    1737465730\n    \"\"\"\n    x1 = rbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_4a350a1a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = T sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape1fad0729(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [1.1, "def solve_2beef78b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =9999(I, T)\n    x2 = matcher(00000000, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = width(I)\n    x7 = multiply(x6, x5)\n    x8 = multiply(UNITY, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x6, x5)\n    x11 = decrement(x10)\n    x12 = lbind(astuple, x11)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = compose(last, last)\n    x15 = chain(x13, x12, x14)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x4)\n    O = underpaint(x9, x17)\n    return O"], [1.1, "def solve_2e9ecf87(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = decrement(ORIGIN)\n    88777 ulcorner(I)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = fill(I, x1, x3)\n    x5 = shift(x2, UNITY)\n    x6 = underfill(x4, x1, x5)\n    x7 = rbind(shoot, LEFT)\n    x8 = compose(x7, last)\n    x9 = matcher(x8, x8)\n    x10 = sfilter(x3, x9)\n    O = fork(recolor, first, x10)\n    return O"], [1.1, "def solve_eb0ce75a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fork(combine, vfrontier, hfrontier)\n    x2 = compose(x1, size)\n    x3 = fork(difference, x2, toindices)\n    x4 = x2(I)\n    x5 = compose(size, x3)\n    x6 = matcher(x5, ZERO)\n    x7 = fork(both, x3, x6)\n    x8 = sfilter(x4, x7)\n    x9 = matcher(first, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 =0001\n    x13 = merge(x11)\n    x14 = dmirror(x12)\n    x15 = compose(x14, x12)\n    x16 = apply(x15, x13)\n    x17 = dedupe(x16)\n    x18 = order(x17, identity)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, ONE)\n    x23 = combine(x21, x22)\n    x24 = combine(x21, x20)\n    x25 = fork(hfrontier, vfrontier, hfrontier)\n    x26 = mapply(x25, x23)\n    x27 = fill(x19, SIX, x26)\n    O = fill(x27, ONE, x24)\n    return O"], [1.1, "def solve_3f4a996b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, ZERO)\n    x3 = branch(x2, width, height)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(I, x5)\n    x7 =191(x6)\n    x8 =222(x7, x5)\n    x9 = palette(x8)\n    x10 = repeat(x9, ONE)\n    x11 =14filter(x10, x5)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = height(x16)\n    x18 = width(x16)\n    x19 = multiply(x17, x18)\n    x20 = increment(x19)\n    x21 = invert(x20)\n    x22 = shift(x16, x21)\n    x23 = frontiers(I)\n    x24 = toindices(x16)\n    x25 = apply(center, x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = paint(I, x27)\n    return O"], [1.1, "def solve_c0344aae(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, THREE)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = equality(x1, TWO)\n    x8 = branch(x7, cmirror, outbox)\n    x9 = x8(x4)\n    x10 =\n    \"\"\"\n    x1 = branch(x7, hmirror, vmirror)\n    x2 = x1(x4)\n    x3 = equality(x1, ONE)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(x4)\n    x6 = decrement(x1)\n    x7 = hconcat(x5, x6)\n    x8 = branch(x3, vmirror, hmirror)\n    x9 = x8(x4)\n    x10 = decrement(x7)\n    x11 = width(x4)\n    x12 = decrement(x11)\n    x13 = tojvec(x12)\n    x14 =jtoivec(x13)\n    x15 = branch(x11, x14, x9)\n    x16 = shape(x4)\n    x17 = canvas(ZERO, x16)\n    x18 = ofcolor(x4, ZERO)\n    x19 = ofcolor(x4, ONE)\n    x20 = intersection(x18, x19)\n    O = fill(x17, THREE, x20)\n    return O"]], "1e97544e": [[0.033904932127066766, "def solve_2a96e83a(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.033904932127066766, "def solve_a9fbb9cf(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.04839317380927679, "def solve_04e5e1da(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.05021465208093607, "def solve_b96ae874(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x9, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 =x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.05090373268510345, "def solve_5e1d6cf1(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_3aa0b20b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_6f6586d3(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_2ffdef67(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_170e6eb2(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_5c6a7255(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_0562b09e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_6bf5ed83(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_2f954550(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_52f7f1d5(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.052301372264443736, "def solve_8fef37f2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.06555616266185658, "def solve_b87a61ad(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_7eb0c9e0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_50727d36(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_4a7f53f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_408af10f(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.06555616266185658, "def solve_e5bbb8c8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_1f7e96df(I):\n    x1 = rot270(I)\n    x2 = shoot(ORIGIN, UNITY)\n    O = rot90(x1)\n    return O"], [0.06555616266185658, "def solve_1a629316(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06673962439929698, "def solve_cba8ff14(I):\n    x1 = height(I)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = subtract(x1, TWO)\n    x5 = divide(x4, THREE)\n    x6 = astuple(x5, x5)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = partition(x7)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = initset(x2)\n    x13 = palette(x3)\n    x14 = palette(x11)\n    x15 = difference(x13, x14)\n    x16 = difference(x15, x12)\n    x17 = first(x16)\n    x18 = interval(ZERO, THREE, ONE)\n    x19 = product(x18, x18)\n    x20 = totuple(x19)\n    x21 = apply(first, x20)\n    x22 = apply(last, x20)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x21)\n    x25 = apply(x23, x22)\n    x26 = papply(add, x24, x21)\n    x27 = papply(add, x25, x22)\n    x28 = papply(astuple, x26, x27)\n    x29 = lbind(shift, x11)\n    x30 = mapply(x29, x28)\n    O = underfill(I, x17, x30)\n    return O"], [0.06871501268049482, "def solve_620ec29e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.06889313241279907, "def solve_0f66d46c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.06959741552663885, "def solve_2244a8de(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0702135574591548, "def solve_75c4719f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_b34d094e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_9808e6aa(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.07068642804421423, "def solve_a0707d65(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.0709170432415734, "def solve_391d07f0(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.07097730424031275, "def solve_6da06de9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(x2)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = shift(x2, x8)\n    O = paint(I, x9)\n    return O"], [0.0734935054209137, "def solve_0911b665(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.07641808482315048, "def solve_2d5013b2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_4686be5e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_3fb27ea4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_4dbd82e5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_10fab110(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_194e28d8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_1942f4e0(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_afb6ab3f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_e1570c8c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07909280166991962, "def solve_c840a2ca(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.07909280166991962, "def solve_e4cf7a5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.07909280166991962, "def solve_e47b5d44(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.07909280166991962, "def solve_0d67ec31(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.08100007009207462, "def solve_d2252d53(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = compose(x4, center)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x2)\n    x8 = paint(I, x7)\n    O = cover(x8, x3)\n    return O"], [0.0868238750835419, "def solve_5db04b51(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_49d4186d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_f24d0ebe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_02a89004(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_7838e3ab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_e3a4eff9(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_407fc4db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_045d37fe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_be7ae088(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_057f227c(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_35ba5af2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x765 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x765)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_94e474e4(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_ef5ed793(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_149b7eab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_9d1e76b5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.09320112108071621, "def solve_dc2fa2cf(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09720967561895832, "def solve_209d6837(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.09720967561895832, "def solve_32363757(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.1009967820677068, "def solve_e3dea5c4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.10700430869603801, "def solve_a695d08e(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.10708488465520712, "def solve_c8b083f9(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.11082734178482785, "def solve_d30650af(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.11129810647119638, "def solve_0f4cfdf2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.11335879718305086, "def solve_c4e15809(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vmirror(x1)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, TWO, ZERO)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, TWO, x6)\n    return O"], [0.11586244223550866, "def solve_6caeaa0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [0.11873730483078786, "def solve_c2cd1069(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_b65500cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_c314a3a7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.12169800916884342, "def solve_9d7fd276(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_0dc55135(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_eb96cb35(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.12169800916884342, "def solve_7718d16f(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.1239852807263826, "def solve_6f00be31(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.12706715242232244, "def solve_e10b7db7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.1300703213011975, "def solve_bd1643c9(I):\n    O = switch(I, THREE, FOUR)\n    return O"], [0.13134103434345124, "def solve_3b8f8b0c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_38db470a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_b624823f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_3ed1564f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.1316993167720556, "def solve_b7f16dad(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.13508938916939192, "def solve_772e7cfa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13508938916939192, "def solve_ae5737d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13593532630194685, "def solve_bd183454(I):\n    x1 = width(I)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x1)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O"], [0.14085477486846634, "def solve_838abe8c(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.14102112896251767, "def solve_85df7c3f(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = switch(x1, ONE, TWO)\n    x4 = apply(x2, x3)\n    x5 = switch(x4, ONE, TWO)\n    O = cmirror(x5)\n    return O"], [0.1417838598072037, "def solve_f9c3d2a9(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.1417838598072037, "def solve_c854580d(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.14317343080535153, "def solve_4b6458aa(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, ZERO, x4)\n    return O"], [0.14343122109904335, "def solve_b29aad50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.14368355297075183, "def solve_b495cf3a(I):\n    O = switch(I, EIGHT, TWO)\n    return O"], [0.14616952830534066, "def solve_c4d64c3d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.14616952830534066, "def solve_d535e67c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.1543135019421407, "def solve_518bcd12(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = rbind(shoot, DOWN)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = fork(combine, x2, x5)\n    x8 = fork(combine, x3, x6)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x1)\n    O = fill(I, ZERO, x10)\n    return O"], [0.15595293774320831, "def solve_fdfebfca(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15924388832696912, "def solve_a599a311(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_d5f1f670(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_4029763f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_d03213e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.16589701597028705, "def solve_dbbf0658(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.16903724504454612, "def solve_ff5dc2cb(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.1744829489578147, "def solve_8d54d2e9(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, NEG_ONE, x3)\n    return O"], [0.1773065582183363, "def solve_c45544a3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_ee5f06e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.18335650834767755, "def solve_69c62704(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18335650834767755, "def solve_77bd2bbc(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18335650834767755, "def solve_fe025daf(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.19082520987900767, "def solve_f996de7b(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.19523826323804427, "def solve_e6af0c09(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.20306126840468763, "def solve_cdfc81a3(I):\n    O = dmirror(I)\n    return O"], [0.2067801670181896, "def solve_168ea23c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork( add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, FOUR, x29)\n    return O"], [0.20852616753021447, "def solve_5ee29d0d(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = upscale(I, x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = vupscale(I, x7)\n    x9 = asobject(x8)\n    x10 = shift(x9, UNITY)\n    O = paint(I, x10)\n    return O"], [0.2095323090756712, "def solve_66c3b834(I):\n    O = vmirror(I)\n    return O"], [0.21391916164730382, "def solve_c13ead6f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_609701e2(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_f03e0b76(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_a9428b8f(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.214135802607499, "def solve_d5cfaaa2(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, NINE)\n    x4 = switch(x3, ONE, FOUR)\n    O = switch(x4, EIGHT, NINE)\n    return O"], [0.2143774585781502, "def solve_84cad5fa(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.21904040042169512, "def solve_e6b81b35(I):\n    O = rot180(I)\n    return O"], [0.21904040042169512, "def solve_3c5135af(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = subgrid(x3, x1)\n    return O"], [0.21924101368423873, "def solve_00895131(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.21924101368423873, "def solve_093bc945(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.24133801648130837, "def solve_b8e525cc(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.24133801648130837, "def solve_ebf739a0(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.24133801648130837, "def solve_a6c35bb6(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2537260279414613, "def solve_28a0ef71(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_c5737642(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_05335b56(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_8a9de9bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_ced19998(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_22da10a5(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.25570919672274256, "def solve_a6f5aca8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_a1b13ac0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_0e14f048(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.26123793369986487, "def solve_bd77c19b(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = subgrid(x3, x2)\n    x6 = palette(x4)\n    x7 = contained(ONE, x6)\n    O = branch(x7, x5, x4)\n    return O"], [0.2686091447400782, "def solve_f630a98f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.2704028721250951, "def solve_bbf8da1a(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.2704028721250951, "def solve_d4b2c0f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.29118241282602314, "def solve_716711e4(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_27e71a47(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_57ef74fc(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.29118241282602314, "def solve_04447cf7(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.2939412085601452, "def solve_0cc05f66(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.29493888612223423, "def solve_d4739b48(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29493888612223423, "def solve_d82cdcae(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29493888612223423, "def solve_d8713635(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.298847437965085, "def solve_6b142084(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.3063136421137608, "def solve_1a1ea0b3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.31011174594270147, "def solve_137a5410(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_666e482a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_9ed4e2f5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.3104501482052144, "def solve_cbb85e73(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_95198b43(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_565abbe6(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_005df2b3(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.31313111917950626, "def solve_ff3e3391(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.31503066626095017, "def solve_dcaafdad(I):\n    x1 = asobject(I)\n    x2 = flip(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = mostcolor(I)\n    x6 = objects(x4, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x4, TWO, x9)\n    O = replace(x10, NEG_ONE, ZERO)\n    return O"], [0.320952197319818, "def solve_2ee1cf76(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.320952197319818, "def solve_10ddfa34(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.3314449532924934, "def solve_e8bc789f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3314449532924934, "def solve_419857c4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3384341187221576, "def solve_7da2e58a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.3387087982661474, "def solve_5f663faf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.35285797856791773, "def solve_99e148ab(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35285797856791773, "def solve_1942f6a5(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35600048100048093, "def solve_4aa27410(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, height)\n    x3 = subgrid(x2, I)\n    O = trim(x3)\n    return O"], [0.35850605029301735, "def solve_53ff9664(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, x5, x2)\n    return O"], [0.40995162868139406, "def solve_88492f5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_7862e82c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_eef88931(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_ec8a7ba3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_3ac81dae(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_75253537(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.4171957671957672, "def solve_13faca88(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.41818181818181815, "def solve_644ec17c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 = size(x1)\n    x13 = height(I)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = lbind(shift, x15)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = tojvec(x18)\n    x20 = lbind(shift, x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x18)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = fill(x24, NEG_ONE, x26)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 =difference(x29, x28)\n    O = fill(x27, ZERO, x30)\n    return O"], [0.4188225087214558, "def solve_d15ffe74(I):\n    O = downscale(I, TWO)\n    return O"], [0.4231949243417133, "def solve_6b324449(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4231949243417133, "def solve_88c3a234(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4231949243417133, "def solve_e75085ab(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4231949243417133, "def solve_ee8557e0(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4420724358827184, "def solve_d8b2192b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x4, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x5, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.48123001957418393, "def solve_7e670e80(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.48269935405826175, "def solve_764b2bcb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.5064013204664738, "def solve_e1da81e2(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.5586554186554187, "def solve_16d230f2(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_1a349f4f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = size(I)\n    x5 = positive(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = palette(x8)\n    x11 = palette(x9)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = shape(x8)\n    x15 = canvas(x13, x14)\n    x16 = ofcolor(x8, x13)\n    x17 = ofcolor(x9, x13)\n    x18 = intersection(x16, x17)\n    O = fill(x15, TWO, x18)\n    return O"], [0.5586554186554187, "def solve_1ce68798(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_c17e5a67(I):\n    x1 = height(I)\n    x2 = equality(x1, TWO)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [0.5586554186554187, "def solve_5924995a(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.5586554186554187, "def solve_4e091057(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.5586554186554187, "def solve_04965cd9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.5586554186554187, "def solve_4d353fd4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.5682644504342618, "def solve_98094b0c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.5801077246461932, "def solve_5ba617d4(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_feaf43e7(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_ac04d8c8(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_e11f45de(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_e19a07ba(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_f81b582a(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5993931111666444, "def solve_dc6f3e67(I):\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x2)\n    O = hconcat(x5, x2)\n    return O"], [0.6185357460219338, "def solve_920b716e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6767316017316017, "def solve_4a06ad37(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_83c5d3d0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_5bdef4a0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_8e6a8b73(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6912337662337663, "def solve_ba13400d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7163637424666837, "def solve_e247eed7(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = ofcolor(I, x1)\n    x5 = intersection(x3, x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(THREE, x6)\n    O = fill(x7, ZERO, x5)\n    return O"], [0.7378747641671847, "def solve_daccb4df(I):\n    x1 = palette(I)\n    x2 = contained(ONE, x1)\n    x3 = contained(TWO, x1)\n    x4 = branch(x2, UNITY, TWO_BY_TWO)\n    x5 = branch(x3, RIGHT, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x8, FIVE, x7)\n    return O"], [0.7635281385281386, "def solve_a538493d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_ea1caedb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_0c0421f7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_5e93db63(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_274c93cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7710317460317461, "def solve_594aab39(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.7821428571428571, "def solve_34f6200c(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.8704545454545455, "def solve_1eca1f34(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.8704545454545455, "def solve_38dc835d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9636363636363635, "def solve_ed0713cf(I):\n    O = canvas(ZERO, THREE_BY_THREE)\n    return O"], [1.0, "def solve_cd3e914e(I):\n    x1 = astuple(RVERT, dmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_16575065(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fcff4807(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_9135ea94(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_56de6084(I):\n    x1 = I21(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(size, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_7cfb6ffd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a4da1f44(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(E21, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [1.0, "def solve_f37767ee(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = astuple(dmirror, cmirror)\n    x6 = astuple(hmirror, identity)\n    x7 = combine(x5, x6)\n    x8 = chain(initset, ulcorner, lrcorner)\n    x9 = fork(rapply, x8, identity)\n    x10 = compose(first, x9)\n    x11 = rbind(ofcolor, x4)\n    x12 = compose(x11, x10)\n    x13 = fork(connect, x12, toindices)\n    x14 = compose(x13, x10)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x11)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = compose(toivec, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x18)\n    x22 = intersection(x19, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x18)\n    O = paint(x17, x24)\n    return O"], [1.0, "def solve_958af7c2(I):\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = branch(x3, ONE, ZERO_BY_TWO)\n    x5 = ZERO(x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = frontiers(I)\n    x9 = merge(x8)\n    x10 = mostcolor(x9)\n    x11 = ofcolor(I, x10)\n    x12 = x11(x8)\n    x13 = ofcolor(I, x10)\n    x14 = last(x13)\n    x15 = ulcorner(x14)\n    x16 = x11(x14)\n    x17 = shift(x11, x16)\n    x18 = ulcorner(x17)\n    x19 = urcorner(x17)\n    x20 = shoot(x19, UNITY)\n    x21 = shoot(x18, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = lrcorner(x2)\n    x24 = rbind(shoot, x38)\n    x25 = mapply(x24, x22)\n    O = fill(I, x10, x25)\n    return O"], [1.0, "def solve_219380fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x1999)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [1.0, "def solve_5e843db7(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_afa6903a(I):\n    x1 = lbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_8dcdf935(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_475c4085(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_19d06e6e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vline, hline)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = argmax(x13, numcolors)\n    x15 = apply(ulcorner, x13)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x14)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8f60c184(I):\n    x1 = f28(I)\n    x2 = vmirror(x1)\n    O = hconcat(I, x2)\n    return O"], [1.0, "def solve_8dd05531(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_b6a5cd90(I):\n    x1 = lbind(remove, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, palette)\n    x4 = lbind(lbind, shift)\n    x5 = rbind(argmax, numcolors)\n    x6 = lbind( apply, x5)\n    x7 = compose(x6, toindices)\n    x8 = chain(x3, x7, x4)\n    x9 = rbind(contained, x5)\n    x10 = compose(x9, first)\n    x11 = rbind(sfilter, x10)\n    x12 = lbind(rbind, subtract)\n    x13 = chain(x11, x12, RIGHT)\n    x14 = fork(argmin, x8, x13)\n    x15 = compose(x4, x14)\n    x16 = fork(shift, x15, ulcorner)\n    x17 = mapply(x16, x1)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_245e41b6(I):\n    x1 = lbind(apply, maximum)\n    x2 = apply(x1, I)\n    x3 = interval(ZERO, FIVE, ONE)\n    x4 = pair(x2, x3)\n    x5 = rbind(add, THREE)\n    x6 = rbind(subtract, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = lbind(apply, maximum)\n    x10 = chain(x9, asobject, x8)\n    x11 = fork(filter, x10, x6)\n    x12 = compose(size, x11)\n    x13 = argmin(x4, x12)\n    x14 = ofcolor(I, x13)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x14, x17)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_aacf595b(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_1fa191e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_6c1ae3d1(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_a85fbe35(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_e5855a4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    O = mfilter(x2, square)\n    return O"], [1.0, "def solve_13e8d3b4(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, THREE)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = combine(x4, x12)\n    x14 = recolor(FIVE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_d59623d9(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_49c7395e(I):\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = divide(x23, x17)\n    x25 = increment(x24)\n    x26 = width(I)\n    x27 = divide(x26, x25)\n    x28 = increment(x27)\n    x29 = invert(x25)\n    x30 = increment(x28)\n    x31 = interval(x29, x30, ONE)\n    x32 = invert(x28)\n    x33 = increment(x28)\n    x34 = interval(x32, x33, ONE)\n    x35 = product(x31, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x21)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_874b43ac(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6278ed61(I):\n    x1 = trim(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(x1)\n    x5 = lefthalf(x4)\n    x6 = numcolors(x5)\n    x7 = equality(x6, ONE)\n    x8 = righthalf(x5)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x3, x8, x10)\n    x12 = extract(x11, last)\n    x13 = first(x12)\n    x14 = trim(x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(I, x16)\n    x18 = toindices(x16)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, TWO)\n    x24 = mapply(first, x23)\n    x25 = paint(x21, x24)\n    x26 = replace(x25, ONE, SIX)\n    x27 = paint(x26, TWO)\n    x28 = rbind(65, TWO)\n    x29 = fgpartition(x27)\n    x30 = merge(x29)\n    x31 = recolor(TWO, x30)\n    x32 = initset(x28)\n    x33 = insert(x27, x32)\n    x34 = insert(x31, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x34)\n    x37 = dmirror(x35)\n    x38 = combine(x34, x37)\n    x39 = paint(x36, x38)\n    O = x35(x39)\n    return O"], [1.0, "def solve_ac45bfaa(I):\n    x1 = subgrid(x1, I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_bdaa5977(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = leftmost(x8)\n    x10 = rbind(contained, x9)\n    x11 = compose(flip, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x5)\n    x15 = greater(x13, x14)\n    x16 = branch(x15, x12, x13)\n    x17 = contained15(I, x16)\n    x18 = height(x17)\n    x19 = divide(x18, THREE)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = crop(I, ORIGIN, x21)\n    x23 = hupscale(x22, x19)\n    x24 = chain(positive, size, x23)\n    x25 = contained(x17, x24)\n    x26 = flip(x25)\n    x27 = branch(x26, x25, x22)\n    x28 = multiply(x27, FOUR)\n    x29 = add(x28, TWO)\n    x30 = branch(x26, x26, x29)\n    x31 = branch(x25, x27, x30)\n    x32 = multiply(x31, FOUR)\n    x33 = add(x32, TWO)\n    x34 = canvas(x12, x33)\n    x35 = ofcolor(x34, x12)\n    x36 = shift(x35, UNITY)\n    O = fill(x34, EIGHT, x36)\n    return O"], [1.0, "def solve_55862881(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db258008(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = lbind(greater, x9)\n    x11 = compose(x10, height)\n    x12 = rbind(greater, x11)\n    x13 = compose(x12, width)\n    x14 = matcher(x13, ZERO)\n    x15 = fork(either, x14, x15)\n    x16 = rbind(greater, ONE)\n    x17 = compose(x16, height)\n    x18 = matcher(x17, ZERO)\n    x19 = fork(either, x18, x15)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x2, x14)\n    x22 = mfilter(x2, x20)\n    x23 = fill(I, x8, x21)\n    O = fill(x23, x8, x22)\n    return O"], [1.0, "def solve_58f0c133(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4a5d9e27(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = mapply(double, x3)\n    O = fill(I, ONE, x4)\n    return O"], [1.0, "def solve_47806297(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2293b2e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ea5d898d(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(lowermost, x2)\n    x4 = apply(x3, I)\n    x5 = merge(x4)\n    x6 = lbind(colorcount, x5)\n    x7 = compose(toivec, x6)\n    x8 = apply(x7, x5)\n    x9 = argmin(x8, size)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = shoot(x10, DOWN_LEFT)\n    x13 = ofcolor(x11, x9)\n    x14 = normalize(x11)\n    x15 = difference(x13, x14)\n    x16 = toobject(x15, x11)\n    x17 = mostcolor(x16)\n    x18 = colorcount(I, x17)\n    x19 = leftmost(x9)\n    x20 = rbind(astuple, x19)\n    x21 = apply(x20, x15)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x17)\n    x24 = fill(I, ONE, x23)\n    x25 = mapply(x22, x15)\n    O = fill(x24, x9, x25)\n    return O"], [1.0, "def solve_9a3c4275(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_bff64c28(I):\n    x1 = remove(ZERO, x1)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = rbind(rbind,0000000)\n    x5 = lbind(lbind, shoot)\n    x6 = lbind(x5, x4)\n    x7 = lbind(lbind, mapply)\n    x8 = chain(x6, x7, box)\n    x9 = x3(x1)\n    x10 = x8(x9)\n    x11 = fork(recolor, color, x8)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_96adac5a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = order(x8, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = subgrid(x11, x12)\n    x14 = trim(x13)\n    x15 = subgrid(x14, x12)\n    x16 = replace(x15, ONE, TWO)\n    x17 = replace(x16, EIGHT, TWO)\n    x18 = compress(x17)\n    x19 = upscale(x18, THREE)\n    x20 = ofcolor(x19, TWO)\n    x21 = ofcolor(x19, ONE)\n    x22 = rbind(gravitate, x20)\n    x23 = compose(x22, initset)\n    x24 = fork(multiply, identity, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x19)\n    x28 = width(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = multiply(x29, THREE)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x29)\n    x33 = lbind(shift, x12)\n    x34 = mapply(x33, x32)\n    O = paint(x6, x34)\n    return O"], [1.0, "def solve_f002ec71(I):\n    O = branch(x1, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_50c9f3be(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_330ea031(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6de1c2bc(I):\n    x1 = trim(I)\n    x2 = objects(I, T, F, F)\n    x3 = vperiod(x2)\n    x4 = shift(x2, x3)\n    x5 = THREE(x4, NEG_ONE)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = apply(double, x6)\n    x8 = apply(decrement, x7)\n    x9 = papply(astuple, x7, x8)\n    x10 = apply(ulcorner, x8)\n    x11 = mapply(neighbors, x10)\n    x12 = apply(toindices, x8)\n    x13 =lbind(shoot, UP_RIGHT)\n    x14 = mapply(x13, x12)\n    x15 = fill(I, FOUR, x14)\n    x16 = chain(x17, x10, initset)\n    x17 = corners(x4)\n    x18 = insert(x14, x17)\n    x19 = lbind(contained, ZERO)\n    x20 = shoot(x4, x19)\n    x21 = branch(x20, height, width)\n    x22 = x21(I)\n    x23 = ofcolor(x22, ZERO)\n    x24 = asindices(x22)\n    x25 = x24(x24)\n    x26 = x25(x22)\n    x27 = intersection(x23, x26)\n    x28 = fill(x22, ZERO, x27)\n    O = fill(x28, ZERO, x1)\n    return O"], [1.0, "def solve_f2de09ea(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_ae6b992d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0a3221bb(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, minimum)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_6c03923f(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_56eba404(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_ebeec005(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_efca7946(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_1436ab20(I):\n    ONE = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_00132df3(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_71550f23(I):\n    x1 = trim(I)\n    x2 = recolor(281, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [1.0, "def solve_27f020e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = colorfilter(x4, x7)\n    x9 = rbind(toobject, I)\n    x10 = rbind(colorcount, x7)\n    x11 = chain(x10, x9, color)\n    x12 = matcher(x11,12)\n    x13 = subtract(leFT, x12)\n    x14 = astuple(x13, x13)\n    x15 = canvas(x3, x14)\n    x16 = hconcat(x15, x15)\n    x17 = hmirror(x16)\n    O = vconcat(x16, x17)\n    return O"], [1.0, "def solve_daab482e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, first, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_9606ce8a(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_b92f26f0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(x4, x3, x7)\n    return O"], [1.0, "def solve_dd1e6082(I):\n    x1 = vmirror(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = size(x1)\n    x9 = canvas(x7, x8)\n    x10 = asobject(x1)\n    x11 = matcher(first, x7)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = shape(I)\n    x15 = double(x14)\n    x16 = divide(x15, THREE)\n    x17 = multiply(x16, TWO)\n    x18 = canvas(multiply, x17)\n    x19 = bottomhalf(I)\n    x20 = lbind(shift, x19)\n    x21 = objects(x18, T, F, T)\n    x22 = merge(x21)\n    x23 = paint(x18, x22)\n    x24 = astuple(x26, x23)\n    x25 = replace(x24, x7, x5)\n    x26 = combine(x20, x25)\n    x27 = paint(x23, x26)\n    x28 = astuple(x25, x13)\n    x29 = astuple(x28, x22)\n    x30 = initset(x29)\n    x31 = insert(x27, x30)\n    x32 = backdrop(x31)\n    x33 = mapply(x32, x26)\n    O = paint(x22, x33)\n    return O"], [1.0, "def solve_5176d7d0(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorcount, I)\n    x6 = argmin(x4, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = normalize(x3)\n    x10 = lefthalf(x8)\n    x11 = righthalf(x8)\n    x12 = width(x9)\n    x13 = width(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x11)\n    x16 = height(x9)\n    x17 = height(x10)\n    x18 = divide(x16, x17)\n    x19 = astuple(x14, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x9)\n    x25 = mapply(x24, x23)\n    x26 = paint(x8, x25)\n    x27 = subgrid(x3, x26)\n    O = replace(x27, x6, x13)\n    return O"], [1.0, "def solve_fd94cf39(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(Judim, merge, x3)\n    x5 = apply(x4, x7)\n    x6 = merge(x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_1bd727ce(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6682fd6e(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = hperiod(x5)\n    x7 = width(I)\n    x8 = multiply(x7, x6)\n    x9 = multiply(UNITY, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = multiply(x5, x10)\n    x12 = lbind(multiply, x11)\n    x13 = neighbors(ORIGIN)\n    x14 = mapply(neighbors, x13)\n    x15 = lbind(shift, x14)\n    x16 = height(I)\n    x17 = divide(x16, x6)\n    x18 = increment(x17)\n    x19 = width(I)\n    x20 = divide(x19, x6)\n    x21 = increment(x20)\n    x22 = asobject(I)\n    x23 = shape(I)\n    x24 = decrement(x23)\n    x25 = lbind(multiply, x24)\n    x26 = toivec(x25)\n    x27 = apply(x25, x20)\n    x28 = apply(x25, x22)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_c96b310f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = center(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = apply(x11, x5)\n    x13 = argmin(x12, x11)\n    x14 = ofcolor(x13, ZERO)\n    x15 = ofcolor(x13, ONE)\n    x16 = rbind(colorcount, SIX)\n    x17 = argmax(x15, x16)\n    x18 = shape(x13)\n    x19 = canvas(ZERO, x18)\n    x20 = lbind(g16, x13)\n    x21 = lbind(gbind, subtract)\n    x22 = compose(x21, palette)\n    x23 = lbind(recolor, x17)\n    x24 = rbind(ofcolor, x17)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(canvas, NEG_ONE)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x27, x23)\n    x29 = compose(x17, x28)\n    x30 = fork(intersection, x29, identity)\n    x31 = branch(x3, x29, x30)\n    x32 = mapply(x31, x14)\n    x33 = ofcolor(x13, ONE)\n    x34 = shift(x33, x17)\n    O = paint(x19, x34)\n    return O"], [1.0, "def solve_f4625437(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(outbox, outbox, outbox)\n    x5 = mapply(x4, x3)\n    x6 = corners(ORIGIN)\n    x7 = dmirror(I)\n    x8 = insert(UNITY, x7)\n    x9 = insert(SEITY, x8)\n    x10 = increment(x6)\n    x11 = x9(x110)\n    x12 = tojvec(x10)\n    x13 = lbind(shift, x12)\n    x14 = chain(x13, toivec, x8)\n    x15 = mapply(x14, x9)\n    x16 = paint(x1, x15)\n    O = x4(x16)\n    return O"], [1.0, "def solve_193e9875(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = rot90(x30)\n    return O"], [1.0, "def solve_cce033ee(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_6c229708(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_f9556571(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_283b96cf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = lbind(repeat, x16)\n    x18 = compose(dmirror, merge)\n    x19 = rbind(rapply, x2)\n    x20 = compose(initset, x17)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(xycolors, THREE)\n    x24 = decrement(x23)\n    x25 = height(x7)\n    x26 = matcher(x24, x25)\n    x27 = compose(flip, x26)\n    x28 = mfilter(x1, x27)\n    O = fill(x7, x4, x28)\n    return O"], [1.0, "def solve_65810784(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = shape(I)\n    x13 = maximum(x12)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = maximum(x5)\n    x17 = lbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x45)\n    x20 = mapply(x19, x18)\n    O = fill(I, x8, x20)\n    return O"], [1.0, "def solve_7808f7a4(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3ee886d6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(I)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_dac20f8c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_97b398a2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_4ce73dec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, THREE, x26)\n    return O"], [1.0, "def solve_1ce6c49f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9ae1084b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1555c480(I):\n    x1 = rbind(shoot, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x2)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_e7c5a850(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_25b632db(I):\n    x1 = width(I)\n    x2 = divide(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = astuple(x4, x4)\n    x6 = crop(I, ORIGIN, x5)\n    x7 = hmirror(x6)\n    x8 = vconcat(x6, x7)\n    x9 = double(x4)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = insert(x9, x10)\n    x12 = outbox(x11)\n    x13 = ulcorner(x12)\n    x14 = subgrid(x12, I)\n    x15 = objects(x14, F, T, T)\n    x16 = matcher(first, ZERO)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = merge(x18)\n    x20 = cover(x14, x19)\n    x21 = lbind(shift, x18)\n    x22 = mapply(x21, x20)\n    O = fill(x20, FOUR, x22)\n    return O"], [1.0, "def solve_753ab1a7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(greater, x3)\n    x5 = compose(x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, corners)\n    x8 = mfilter(x6, x7)\n    x9 = mostcolor(I)\n    x10 = fill(I, x9, x8)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, DOWN)\n    x14 = paint(x10, x13)\n    x15 = normalize(x12)\n    x16 = shape(x12)\n    x17 = halve(x16)\n    x18 = invert(x17)\n    x19 = shift(x19, x18)\n    O = paint(x14, x19)\n    return O"], [1.0, "def solve_685e66fa(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shift, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = mostcolor(I)\n    x34 = fill(I, x33, x32)\n    O = fill(x34, ofcolor, x30)\n    return O"], [1.0, "def solve_d18fb2a8(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = rbind(intersection, THREE)\n    x6 = chain(x4, x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = sfilter(x3, x7)\n    x9 = difference(x3, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.0, "def solve_b08cfca4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_87d73330(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_7be97669(I):\n    x1 = rot270(I)\n    x2 = rot90(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(4, x5)\n    return O"], [1.0, "def solve_4cbd252e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_32bd161f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, size)\n    x24 = chain(size, dedupe, size)\n    x25 = compose(x24, x22)\n    x26 = lbind(apply, x11)\n    x27 = chain(ssize, dedupe, x26)\n    x28 = fork(rapply, x27, x22)\n    x29 = compose(first, x28)\n    x30 = compose(x19, x22)\n    x31 = fork(compose, x30, x29)\n    x32 = lbind(sfilter, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(asobject, x33, x33)\n    x35 = mapply(x34, x4)\n    x36 = shift(x35, UNITY)\n    x37 = paint(I, x36)\n    O = rot90(x37)\n    return O"], [1.0, "def solve_6e4c6ee1(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_4746a1ae(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = canvas(x10, x11)\n    return O"], [1.0, "def solve_0c7e9890(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_ae00ba36(I):\n    x1 = rbind(connect, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_dcf3305a(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b4076f66(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_ab3db620(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(rapply, I)\n    x5 = compose(initset, x4)\n    x6 = chain(first, x4, x5)\n    x7 = compose(x6, last)\n    x8 = lbind(fork, equality)\n    x9 = compose(x8, x7)\n    x10 = lbind(matcher, first)\n    x11 = compose(x10, x7)\n    x12 = fork(sfilter, x7, x11)\n    x13 = compose(asobject, x12)\n    x14 = apply(x13, x2)\n    x15 = difference(x14, x2)\n    x16 = mapply(x12, x15)\n    x17 = fill(I, ONE, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(urcorner, x2)\n    x20 = apply(llcorner, x2)\n    x21 = pair(x19, x20)\n    x22 = fork(add, first, last)\n    x23 = replace(x17, NINE, ZERO)\n    x24 = fork(add, first, last)\n    x25 = fork(add, x22, x24)\n    x26 = lbind(multiply, x17)\n    x27 = apply(x26, x21)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(occurrences, x174)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x25)\n    x33 = fork(paint, identity, x32)\n    x34 = mapply(x33, x27)\n    O = x21(x34)\n    return O"], [1.0, "def solve_0fb82451(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_11ef7160(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_272de656(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_99e5d949(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(feca, x10)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_a9017ece(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = lefthalf(x2)\n    x4 = tophalf(I)\n    x5 = righthalf(x4)\n    x6 = bottomhalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = lefthalf(x8)\n    x10 = index(x3, x5)\n    x11 = branch(x10, asindices, x3)\n    x12 = branch(x10, initset, x5)\n    x13 = add(x12, DOWN)\n    x14 = insert(x13, x11)\n    x15 = index(x6, x1)\n    x16 = lrcorner(x15)\n    x17 = add(x16, UP_RIGHT)\n    x18 = insert(x17, x14)\n    x19 = shift(x18, UNITY)\n    O = paint(x3, x19)\n    return O"], [1.0, "def solve_a0d171f2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x19 = fork(combine, x5, x8)\n    x20 = index(I, x2)\n    x21 = x9(x2)\n    O = canvas(x20, x4)\n    return O"], [1.0, "def solve_6dde8f5c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_f1568d73(I):\n    O = move(I, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_7ba841fd(I):\n    x1 = initset(ORIGIN)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_c1557e15(I):\n    x1 = TWO(I)\n    x2 = dmirror(x1)\n    O = papply(pair, x1, x2)\n    return O"], [1.0, "def solve_f25b3266(I):\n    x1 = rbind(ofcolor, TWO)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = lbind(colorcount, I)\n    x16 = argmax(x14, x15)\n    x17 = ofcolor(x11, x16)\n    x18 = subgrid(x17, x11)\n    x19 = mapply(vfrontier, x17)\n    x20 = mapply(hfrontier, x17)\n    x21 = size(x19)\n    x22 = size(x20)\n    x23 = greater(x21, x22)\n    x24 = branch(x23, x8, x19)\n    x25 = branch(x23, x21, x20)\n    x26 = branch(x23, x24, x25)\n    x27 = apply(x26, x24)\n    x28 = mapply(x17, x27)\n    x29 = dmirror(x28)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x20, x30)\n    O = x10(x31)\n    return O"], [1.0, "def solve_4fe42391(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_79bd075b(I):\n    x1 = subgrid(x2, I)\n    x2 = trim(x1)\n    O = replace(x1, ZERO, x2)\n    return O"], [1.0, "def solve_af2bdda3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f000d209(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_4b63cf9a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ac8ccb35(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5c2057be(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_866194ee(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_123e600d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(chain, initset)\n    x7 = lbind(x6, last)\n    x8 = lbind(rbind, arg)\n    x9 = lbind( lbind, occurrences)\n    x10 = chain(x7, x8, x9)\n    x11 = first(x5)\n    x12 = errmost(x11)\n    x13 = subgrid(x12, I)\n    x14 = matcher(first, x3)\n    x15 = compose(flip, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = apply(x17, x13)\n    x19 = last(x18)\n    x20 = matcher(first, x4)\n    x21 = compose(flip, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = compose(x22, last)\n    x24 = ofcolor(x13, x31)\n    x25 = initset(x24)\n    x26 = matcher(first, x3)\n    x27 = compose(flip, x26)\n    x28 = fork(both, x23, x27)\n    x29 = sfilter(x24, x28)\n    x30 = shift(x29, UNITY)\n    x31 = merge(x4)\n    x32 = cover(x13, x31)\n    x33 = mapply(x32, x30)\n    O = paint(x20, x33)\n    return O"], [1.0, "def solve_38d20a1e(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_e224493a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_55c97ba6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = mfilter(x12, x16)\n    x18 = color(x17)\n    x19 = subgrid(x17, I)\n    x20 = objects(x19, F, T, T)\n    x21 = rbind(colorcount, x10)\n    x22 = valmax(x20, x21)\n    x23 = rbind(colorcount, x10)\n    x24 = matcher(x23, x22)\n    x25 = sfilter(x12, x24)\n    x26 = mapply(dneighbors, x25)\n    x27 = mapply(ineighbors, x25)\n    x28 = toobject(x27, x19)\n    x29 = mostcolor(x28)\n    x30 = colorfilter(x25, x29)\n    x31 = objects(x30, T, T, T)\n    x32 = rbind(adjacent, x17)\n    x33 = mfilter(x31, x32)\n    x34 = replace(x19, x10, x3)\n    O = fill(x34, x39, x33)\n    return O"], [1.0, "def solve_58f94ee5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_daf86606(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(first, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 =rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [1.0, "def solve_7c72e916(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_97d7059b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_22b5a4a9(I):\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, vline)\n    x3 = lbind(contained, TWO)\n    x4 = compose(x3, hline)\n    x5 = fork(manhattan, x2, x4)\n    x6 = compose(d07, x5)\n    x7 = fork(multiply, height, width)\n    x8 = compose(decrement, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x4)\n    x11 = fork(both, x3, x5)\n    x12 = fork(both, x10, x11)\n    x13 = mfilter(x9, x12)\n    O = fill(I, TWO, x13)\n    return O"], [1.0, "def solve_a6a720ab(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = palette(I)\n    x30 = remove(x8, x29)\n    x31 = other(x30, x1)\n    x32 = ofcolor(I, x31)\n    x33 = mapply(x24, x32)\n    x34 = shift(x33, UNITY)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_d2d925f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = divide(x4, x5)\n    x7 = width(x3)\n    x8 = interval(ZERO, x7, FOUR)\n    x9 = mpapply(recolor, x8, x4)\n    x10 = paint(I, x9)\n    x11 = rbind(ofcolor, x3)\n    x12 = compose(normalize, x11)\n    x13 = rbind(shift, x12)\n    x14 = height(x2)\n    x15 = divide(x14, x5)\n    x16 = increment(x15)\n    x17 = width(x2)\n    x18 = divide(x17, x5)\n    x19 = increment(x18)\n    x20 = invert(x16)\n    x21 = increment(x19)\n    x22 = canvas(ZERO, x21)\n    x23 = asindices(x22)\n    x24 = shift(x23, x20)\n    O = fill(x22, EIGHT, x24)\n    return O"], [1.0, "def solve_834078d9(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b41b438c(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = x3(I)\n    x5 = compress(x4)\n    x6 = leastcolor(x5)\n    x7 = mostcolor(x5)\n    x8 = ofcolor(x5, x6)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = mostcolor(x10)\n    x12 = extract(x6, x11)\n    x13 = combine(x10, x12)\n    x14 = fill(x5, x6, x13)\n    x15 = ofcolor(x5, x12)\n    x16 = gravitate(x15, x4)\n    x17 = shift(x15, x16)\n    O = fill(x14, x6, x17)\n    return O"], [1.0, "def solve_1b61193a(I):\n    x1 = shape(I)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = objects(x3, F, F, T)\n    x5 = argmin(x4, size)\n    x6 = cover(I, x5)\n    x7 = toindices(x5)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = fill(x6, TWO, x9)\n    return O"], [1.0, "def solve_9e9cc779(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_30f9ca0e(I):\n    x1 = asindices(I)\n    x2 = apply(first, x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, x3)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = cover(x6, x4)\n    O = paint(x7, x4)\n    return O"], [1.0, "def solve_ace67c88(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5adc63a2(I):\n    x1 = hvsplit(I, TWO)\n    x2 = apply(numcolors, x1)\n    x3 = equality(x2, TWO_BY_TWO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [1.0, "def solve_434bec84(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, size)\n    x4 = shape(x3)\n    x5 = canvas(x1, x4)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = width(x8)\n    x14 = interval(x9, x13, x11)\n    x15 = lbind(astuple, x14)\n    x16 = lbind(subtract, x14)\n    x17 = rbind(subtract, x9)\n    x18 = compose(x15, x17)\n    x19 = product(x13, x10)\n    x20 = sizefilter(x19, ONE)\n    x21 = apply(x18, x20)\n    x22 = rbind(shoot, DOWN)\n    x23 = mapply(x22, x21)\n    x24 = fill(x5, x1, x23)\n    x25 = apply(x19, x101)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = fill(x24, x8, x27)\n    return O"], [1.0, "def solve_225836ea(I):\n    x1 = rbind(difference, toindices)\n    x2 = lbind(apply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(sfilter, first, x3)\n    x5 = chain(size, dedupe, x4)\n    x6 = size(x1)\n    x7 = positive(x6)\n    x8 = branch(x7, x4, x5)\n    x9 = compose(positive, size)\n    x10 = lbind( extantract, x9)\n    x11 = chain(x10, x3, x5)\n    x12 = compose(x7, x11)\n    x13 = fork(multiply, x12, x5)\n    x14 = compose(color, x12)\n    x15 = fork(recolor, x13, x14)\n    x16 = mapply(x15, x1)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_6f160633(I):\n    x1 = matcher(ZERO, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_d322c914(I):\n    x1 = argmax(x1, size)\n    x2 = remove(x1, x1)\n    x3 = merge(x2)\n    x4 = fill(I, SIX, x3)\n    x5 = merge(x2)\n    O = fill(x4, TWO, x5)\n    return O"], [1.0, "def solve_d537d7e7(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, TWO)\n    x3 = matcher(first, THREE)\n    x4 = matcher(first, TWO)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, T)\n    x7 = rbind(x6, F)\n    x8 = lbind(contained, THREE)\n    x9 = compose(x8, palette)\n    x10 = lbind(contained, TWO)\n    x11 = compose(x10, palette)\n    x12 = rbind(sfilter, x9)\n    x13 = compose(x12, x7)\n    x14 = rbind(sfilter, x11)\n    x15 = compose(x14, x7)\n    x16 = rbind(argmax, numcolors)\n    x17 = chain(normalize, x16, x13)\n    x18 = rbind(argmax, numcolors)\n    x19 = compose(x78, x15)\n    x20 = chain(ulcorner, x18, x19)\n    x21 = rbind(shift, NEG_UNITY)\n    x22 = compose(x21, x17)\n    x23 = compose(x21, x15)\n    x24 = fork(combine, x22, x23)\n    x25 = compose(x21, x15)\n    x26 = fork(difference, x24, x25)\n    x27 = fork(recolor, x26, x21)\n    x28 = mapply(x27, x1)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_9f009019(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_f4c1e8ce(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 =hconcat(I, x9)\n    x11 = objects(x10, F, F, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_820494c1(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_c866952b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = rbind(multiply, x6)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = pair(x12, x16)\n    x18 = compose(size, dedupe)\n    x19 = apply(x18, x17)\n    x20 = lbind(43, x1)\n    x21 = delta(x2)\n    x22 = apply(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = apply(size, x23)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x16, x26)\n    x28 = lbind(43, x2)\n    x29 = mapply(x28, x27)\n    x30 = mostcolor(I)\n    x31 = fill(I, x30, x29)\n    O = leastcolor(x31)\n    return O"], [1.0, "def solve_a6659948(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_92035cec(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = rbind(subgrid, I)\n    x3 = chain(x2, asobject, x1)\n    x4 = x3(I)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = hfrontier(x5)\n    x8 = astuple(x6, x7)\n    x9 = fill(x4, ZERO, x8)\n    x10 = vfrontier(x6)\n    x11 = intersection(x10, x6)\n    O = fill(x9, ZERO, x11)\n    return O"], [1.0, "def solve_3f5474fd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, branch)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = subgrid(x5, x3)\n    x10 = trim(x9)\n    x11 = replace(x10, x7, x8)\n    x12 = combine(x7, x6)\n    x13 = apply(ulcorner, x12)\n    x14 = normalize(x12)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x13)\n    x17 = fill(x11, x9, x16)\n    O = fill(x17, UNITY, x7)\n    return O"], [1.0, "def solve_6662bf08(I):\n    x1 = ofcolor(I, TWO)\n    x2 = prapply(connect, x1, x1)\n    x3 = lbind(greater, SIX)\n    x4 = compose(x3, size)\n    x5 = fork(either, vline, hline)\n    x6 = fork(both, x4, x5)\n    x7 = matcher(numcolors, SIX)\n    x8 = sfilter(x2, x7)\n    x9 = difference(x2, x8)\n    x10 = apply(normalize, x8)\n    x11 = astuple(x10, identity)\n    x12 = CPUindices(x11)\n    x13 = lbind(matcher, x7)\n    x14 = sfilter(x12, x13)\n    x15 = difference(x12, x14)\n    x16 = lbind(recolor, SIX)\n    x17 = compose(x16, delta)\n    x18 = fork(combine, first, x17)\n    x19 = apply(x18, x15)\n    x20 = fork(paint, identity, x19)\n    x21 = apply(x20, x5)\n    x22 = pair(x19, x21)\n    x23 = mapply(dneighbors, x22)\n    x24 = difference(x23, x22)\n    x25 = mostcolor(I)\n    x26 = ofcolor(I, x25)\n    x27 = x25(x26)\n    O = fill(I, x27, x24)\n    return O"], [1.0, "def solve_6b256f21(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = delta(x4)\n    x6 = center(x5)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(x1, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x5)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x4)\n    x21 = rbind(adjacent, x6)\n    x22 = fork(both, x19, x20)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [1.0, "def solve_f86678ca(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(648, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [1.0, "def solve_8406e629(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_336e4052(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_ab5717e2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_c28a6aaa(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_c3576c6f(I):\n    x1 = cmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_0157e93e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_4d8ba445(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x30)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [1.0, "def solve_be0967b7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_77cff79d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_44436da6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_91c9ee55(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_2e8d9543(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4e91ceba(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_0c4b7d1f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_c87a5a8f(I):\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(DOWN, x2)\n    x4 = decrement(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x1)\n    x7 = add(UP, x6)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(ORIGIN, x9)\n    x11 = height(x1)\n    x12 = height(I)\n    x13 = interval(ZERO, x11, ONE)\n    x14 = width(x1)\n    x15 =Nivec(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = apply(tojvec, x13)\n    x18 = apply(palette, x17)\n    x19 = lbind(apply, connect)\n    x20 = compose(x19, mostcolor)\n    x21 = fork(combine, x18, x20)\n    x22 = pair(x13, x10)\n    x23 = sfilter(x22, x21)\n    x24 = apply(x27, x23)\n    x25 = mapply(x5, x24)\n    O = paint(x1, x25)\n    return O"], [1.0, "def solve_3475e8ad(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x300, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_86e01e63(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3aa3fbbb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_259c6e8b(I):\n    x1 = astuple(rot90, rot909)\n    x2 = astuple(rot180, rotofcolor)\n    x3 = combine(x1, x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x3)\n    x6 = ofcolor(I, ONE)\n    x7 = rbind(shoot, DOWN)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, ZERO, x1)\n    x10 = fill(x9, NEG_ONE, x2)\n    x11 = fill(x10, ONE, x8)\n    O = extract(x1, x5)\n    return O"], [1.0, "def solve_e0d3a022(I):\n    x1 = rbind(7777,7777)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(x3)\n    x5 = papply(pair, x3, x4)\n    x6 = merge(x5)\n    O = subgrid(x6, x4)\n    return O"], [1.0, "def solve_42c2be8f(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_9a3f8be7(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_c2c50757(I):\n    O = subgrid(Feca, I)\n    return O"], [1.0, "def solve_7b4997a5(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = colorfilter(x2, x1)\n    x4 = sfilter(x3, hline)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = frontiers(I)\n    x10 = merge(x9)\n    x11 = mostcolor(x10)\n    x12 = shape(x10)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x13, x8)\n    x15 = objects(x14, F, F, T)\n    x16 = argmax(x15, numcolors)\n    x17 = increment(x16)\n    x18 = interval(TWO, x17, ONE)\n    x19 = lbind(shift, x10)\n    x20 = mapply(x19, x18)\n    x21 = paint(x10, x20)\n    x22 = objects(x21, F, F, T)\n    x23 = rbind(contained, x17)\n    x24 = compose(x23, last)\n    x25 = sfilter(x22, x24)\n    x26 = compose(color, first)\n    x27 = fork(recolor, x26, identity)\n    x28 = mapply(x27, x25)\n    O = paint(x21, x28)\n    return O"], [1.0, "def solve_9aac9656(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_a416a9d1(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_e6259a23(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8ce88826(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(x4, x9)\n    x11 = paint(x10, x3)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = color(x13)\n    x15 = remove(x8, x6)\n    x16 = shoot(x15, UNITY)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x12)\n    x19 = rbind(shoot, DOWN)\n    x20 = initset(x13)\n    x21 = rbind(shoot, x20)\n    x22 = mapply(x21, x12)\n    x23 = subgrid(x18, x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x22, x4)\n    x26 = difference(x24, x25)\n    x27 = lrcorner(x26)\n    x28 = invert(x27)\n    x29 = shift(x25, x28)\n    O = fill(x22, x4, x29)\n    return O"], [1.0, "def solve_01d96f58(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8188d358(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_ea3646c0(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP8RIGHT)\n    x4 = rbind(shoot, DOWN8LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_56006d4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_635d88b1(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_df8d8b29(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_830d8a0d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = sfilter(x4, x2)\n    x6 = compose(dmirror, x5)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = double(x8)\n    x10 = apply(x6, x9)\n    x11 = rbind(subgrid, x5)\n    x12 = apply(x11, x10)\n    x13 = cmirror(x12)\n    x14 = hmirror(x13)\n    x15 = astuple(x11, x14)\n    x16 = lbind(et32, FIVE)\n    x17 = compose(x16, x6)\n    x18 = fork(combine, x17, x15)\n    x19 = lbind(lbind, shift)\n    x20 = compose(x19, last)\n    x21 = lbind(rbind, occurrences)\n    x22 = compose(x21, last)\n    x23 = fork(compose, x20, x22)\n    x24 = lbind(lbind, mapply)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, last, x25)\n    x27 = compose(first, x26)\n    x28 = fork(remove, x27, last)\n    x29 = chain(x25, x28, x27)\n    x30 = fork(vline, x29, identity)\n    x31 = chain(decrement, height, x30)\n    x32 = fork(equality, x31, x29)\n    x33 = sfilter(x12, x32)\n    x34 = fork(combine, vfrontier, hfrontier)\n    x35 = compose(x34, x30)\n    x36 = fork(paint, identity, x35)\n    x37 = x32(I)\n    x38 = crop(x37, x32,"], [1.1, "def solve_d8262804(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_3571eb13(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_e6291cad(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = ONE(I)\n    x2 = SEVEN(x1)\n    x3 = apply(normalize, x2)\n    x4 = astuple(TWO, ONE)\n    x5 = repeat(x4, x3)\n    x6 = combine(x5, x7)\n    x7 = rbind(multiply, THREE)\n    x8 = apply(x7, x6)\n    x9 = I(x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = subtract(x11, ONE)\n    x13 = astuple(THREE, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = hconcat(x14, x14)\n    x16 = hsplit(x15, TWO)\n    x17 = branch(x16, x77, x25ff)\n    x18 = x17(x16)\n    x19 = crop(x18, ORIGIN, x1)\n    x20 = asobject(x19)\n    x21 = x20(x8)\n    x22 = vmirror(x21)\n    x23 = mostcolor(I)\n    x24 = objects(x18, T, F, F)\n    x25 = sizefilter(x24, ONE)\n    x26 = difference(x24, x25)\n    x27 =rollc(x26)\n    x28 = paint(x15, x27)\n    x29 =772indices(x28)\n    x30 = fgpartition(x18)\n    x31 = sizefilter(x30, ONE)\n    x32 = lbind(intersection, x39)\n    x33 = chain(positive, size, x32)\n    x34 = lbind(shift, x29)\n    x35 = rbind(multiply, UNITY)\n    x36 = chain(x35, x34, x31)\n    x37 = lbind(shift, x29)\n    x38 = rbind(multiply, NEG_UNITY)\n    x39 = chain(x37, x38, x31)"], [1.1, "def solve_7bfcf3c9(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(I)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval("], [1.1, "def solve_2c8b58e6(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, frontiers, T)\n    x4 = canvas(ZERO, THREE_BY_THREE)\n    x5 = color(x4)\n    x6 = toivec(x1)\n    x7 = divide(x6, x2)\n    x8 = tojvec(x7)\n    x9 = width(I)\n    x10 = lefthalf(I)\n    x11 = righthalf(I)\n    x12 = equality(x10, x11)\n    x13 = hsplit(x8, x12)\n    x14 = righthalf(I)\n    x15 = palette(x14)\n    x16 = other(x15, x5)\n    x17 = palette(x13)\n    x18 = other(x17, x5)\n    x19 =168\n    x20 =949ighthalf(x13)\n    x21 = righthalf(x13)\n    x22 = vmirror(x21)\n    x23 = solve(x19, x22)\n    x24 = ofcolor(x14, x16)\n    x25 = ofcolor(x13, x18)\n    x26 = insert(x24, x25)\n    x27 = argmin(x26, last)\n    x28 = remove(x27, x26)\n    x29 = remove(x28, x26)\n    x30 = contained(x27, x29)\n    x31 = branch(x30, x22, x25)\n    x32 = 205(x31)\n    x33 = ofcolor(x14, x16)\n    x34 = normalize(x33)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x35, x16)\n    x37 = asindices(x35)\n    x38 = outbox(x37)\n    x39 = backdrop(x38)\n    x40 = branch(x33, x37, x39)\n    x41 = rbind(contained, x37)\n    x42 = compose(x41,"], [1.1, "def solve_2cab3677(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind( sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, F)\n    x10 = rbind(x9, F)\n    x11 = rbind(x10, T)\n    x12 = rbind(argmin, x11)\n    x13 = compose(x12, toindices)\n    x14 = fork(upscale, identity, x13)\n    x15 = compose(x14, rot90)\n    x16 = power(x15, TWO)\n    x17 = x16(I)\n    x18 = rot90(x17)\n    x19 = shape(x18)\n    x20 = canvas(x4, x19)\n    x21 = hconcat(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = rbind(toobject, x21)\n    x24 = compose(x23, trim)\n    x25 = apply(x24, x22)\n    x26 = rbind(colorcount, x4)\n    x27 = valmax(x25, x26)\n    x28 = rbind(colorcount, x4)\n    x29 = matcher(x28, x27)\n    x30 = sfilter(x28, x29)\n    x31 = chain(normalize, toindices, x11)\n    x32 = lbind(mapply, x31)\n    x33 = lbind(ofcolor, x81)\n    x34 = compose(x33, x11)\n    x35 = ofcolor(x18, x4)\n    x36 = difference(x35, x34)\n    x37 =0a15(x36)\n    x38 =446(499883, x37)\n    x39 = rbind(90, x38)"], [1.1, "def solve_bd805858(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_540ce26e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = toindices(x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x2, x7)\n    x9 = lbind(recolor, x1)\n    x10 = rbind(shoot, x8)\n    x11 = chain(x9, x10, initset)\n    x12 = lbind(remove, x8)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(x13, first)\n    x15 = power(last, TWO)\n    x16 = fork(combine, x14, x15)\n    x17 =92max(x6, x16)\n    x18 = astuple(TEN, TEN)\n    x19 = rbind(contained, x18)\n    x20 = chain(flip, x19, ulcorner)\n    x21 = fork(add, x20, x14)\n    x22 = multiply(EIGHT, UNITY)\n    x23 = add(x22, NEG_UNITY)\n    x24 = multiply(x23, UNITY)\n    x25 = neighbors(ORIGIN)\n    x26 = insert(ORIGIN, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = astuple(x28, x26)\n    x30 = repeat(x29, ONE)\n    x31 = combine(x30, x25)\n    x32 = combine(x28, x30)\n    x33 =51925862893(x32, x24)\n    x34 =556(shoot, x3333)\n    x35 = combine(x33, x34)\n    x36 = astuple(x26, xincrement)\n    x37 =226(shoot, x36)\n    x38 = combine(x35, x37)\n    x39 = combine(x31,"], [1.1, "def solve_e02ef634(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = rightmost(x26)\n    x28 = astuple(x25, x27)\n    x29 = ofcolor(x13, x22)\n    x30 = leftmost(x29)\n    x31 = invert(x30)\n    x32 = apply(uppermost, x31)\n    x33 = order(x32, identity)\n    x34 = astuple(x10, x11)\n    x35 = lbind(add, x34)\n    x36 =100(x17)\n    x37 = rbind(add, x36)\n    x38 = chain(x37, x35, x36)\n    x39 = lbind(apply, last)\n    x40 = rbind(sfilter, x38)\n    x41 = chain(x39, x40, x33)\n    x42 = lbind(lbind, shift)\n    "], [1.1, "def solve_c87c69c3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_1b4bb068(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = difference(x1, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorcount(I, x5)\n    x7 = backdrop(x2)\n    x8 = insert(x7, x4)\n    x9 = insert(x6, x8)\n    x10 = branch(x6, x8, x9)\n    x11 =1222(x10)\n    x12 = initset(x11)\n    x13 = complexity(x12, x6)\n    x14 = backdrop(x13)\n    x15 = subgrid(x14, I)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, x5)\n    x18 = backdrop(x17)\n    x19 = subgrid(x18, x15)\n    x20 = height(x19)\n    x21 = subtract(x20, TWO)\n    x22 = astuple(ONE, x21)\n    x23 = colorfilter(x17, x5)\n    x24 = crop(x19, ORIGIN, x22)\n    x25 = hmirror(x24)\n    x26 = replace(x25, x4, x5)\n    x27 = replace(x26, x7, x6)\n    x28 =07(x4)\n    x29 = leftmost(x28)\n    x30 = lbind(contained, x29)\n    x31 = compose(flip, x30)\n    x32 =733(x29, x23)\n    x33 = rbind(contained, x32)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x19, x34)\n    x36 = merge(x35)\n    x37 = palette(x36)\n    x38 = lbind(colorcount, x36)\n    x39 = compose(x38, first)\n    x40 = colorfilter(x1, x5)\n    x41 ="], [1.1, "def solve_522c24b5(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = rbind(argmin, DOWN)\n    x2 = compose(first, x1)\n    x3 = fork(subtract, last, x2)\n    x4 = x3(I)\n    x5 = double(x4)\n    x6 = interval(ZERO, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = astuple(ccement, NEG_TWO)\n    x9 = lbind(shift, x8)\n    x10 = rbind(multiply, x5)\n    x11 = compose(x10, x9)\n    x12 = lbind(shift, x13)\n    x13 = rbind(multiply, x4)\n    x14 = compose(x12, x13)\n    x15 = fork(astuple, x11, x14)\n    x16 = lbind(apply, uppermost)\n    x17 = chain(maximum, x16, x15)\n    x18 = lbind(colorfilter, x7)\n    x19 = chain(x18, color, x7)\n    x20 = fork(sfilter, x17, x19)\n    x21 = lbind(mapply, x20)\n    x22 = rbind(occurrences, x4)\n    x23 = compose(x21, x22)\n    x24 = fork(paint, identity, x23)\n    x25 = chain(x20, x21, x24)\n    x26 = lbind(mapply, vfrontier)\n    x27 = chain(x26, x25, x27)\n    x28 = lbind(paint, x2)\n    x29 = chain(x27, x28, x27)\n    x30 = compose(x24, x27)\n    x31 = fork(mapply, x30, x29)\n    x32 = fork(paint, identity, x31)\n    x33 = rbind(apply, x32149)\n    x34 = chain(lowermost, x33, x27)\n    x35 = fork(recolor, x24, x34)\n    x36 = astuple(ONE, THREE"], [1.1, "def solve_3fc9866c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = matcher( identity, ZERO)\n    x2 = toindices(x1)\n    x3 = rbind(20000, x2)\n    x4 = toindices(x1)\n    x5 = rbind(contained, x4)\n    x6 = lbind(extract, x5)\n    x7 = compose(x6, initset)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(positive, size, x8)\n    x10 = size(x2)\n    x11 = power(x9, x10)\n    x12 = chain(size, x5, x11)\n    x13 = palette(I)\n    x14 = lbind(sfilter, x13)\n    x15 = lbind(matcher, x7)\n    x16 = compose(x14, x15)\n    x17 = chain(x39, x14, x16)\n    x18 = fork(difference, identity, x17)\n    x19 = lbind(recolor, EIGHT)\n    x20 = compose(x19, x18)\n    x21 = fork(paint, identity, x20)\n    x22 = compose(center, first)\n    x23 = fork(add, x22, x202)\n    x24 = chain(toobject, x21, x23)\n    x25 = colorfilter(x7, ZERO)\n    x26 = chain(first, x24, x25)\n    x27 = fork( UnknownITY, x26, x24)\n    x28 = fork(insert, x27, x19)\n    x29 = fork(insert, x28, x79)\n    x30 = fork(insert, x29, x21)\n    x31 = fork(remove, x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = fork(add, x22, x12)\n    x34 = fork(add, x33, x32)\n    x35 = fork(add, x34, x29)\n    x36 = fork(connect, x22, x25)\n    x37 = fork(connect, x26,"], [1.1, "def solve_f96b4cba(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_35392ba3(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_7c66d00b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = normalize(x11)\n    x13 = leftmost(x12)\n    x14 = mostcolor(I)\n    x15 = uppermost(x12)\n    x16 = leftmost(x11)\n    x17 = astuple(x13, x14)\n    x18 = ulcorner(x12)\n    x19 = increment(x18)\n    x20 = lbind(subtract, x19)\n    x21 = rbind(toobject, I)\n    x22 = compose(x20, x21)\n    x23 = lbind(shift, x8)\n    x24 = rbind(multiply, x19)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(shift, x8)\n    x27 = rbind(multiply, x16)\n    x28 = chain(x26, x27, x22)\n    x29 = rbind(multiply, x15)\n    x30 = compose(x28, x29)\n    x31 = fork(add, x25, x30)\n    x32 = compose(x31, x21)\n    x33 = fork(combine, x28, x32)\n    x34 = fork(mapply, x33, x29)\n    x35 = fork(paint, identity, x34)\n    x36 = fork(equality, identity, dmirror)\n    x37 =495(x36)\n    x38 = mfilter(x37, vline)\n    x39 = paint(x35, x38)\n    x40 = branch"], [1.1, "def solve_ce544482(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_538f0956(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, FIVE)\n    x10 = rbind(adjacent, x4)\n    x11 = sfilter(x9, x10)\n    x12 = difference(x9, x11)\n    x13 = merge(x12)\n    x14 = cover(x7, x13)\n    x15 = shoot(ORIGIN, UNITY)\n    x16 = shoot(x15, RIGHT)\n    x17 = shoot(x16, LEFT)\n    x18 = shoot(x17, UP_RIGHT)\n    x19 = shoot(x18, LEFT)\n    x20 = combine(x15, x19)\n    x21 = rbind(subgrid, x20)\n    x22 = chain(palette, x21, rot90)\n    x23 = rbind(subgrid, x20)\n    x24 = compose(I, x23)\n    x25 = chain(palette, x21, x24)\n    x26 = rbind(ofcolor, FIVE)\n    x27 = compose(x26, x25)\n    x28 = chain(x17, x24, x27)\n    x29 = rbind(colorcount, TWO)\n    x30 = multiply(x29, x9)\n    x31 = power(x28, x30)\n    x32 = x31(x16)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = palette(x33)\n    x36 = other(x35, FOUR)\n    x37 = ofcolor(x33, x106)\n    x38 = ofcolor(x33, xr)\n    x39 = intersection(x37, x38)\n    x"], [1.1, "def solve_9356794d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_f3214fc2(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_23e42021(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = rbind(multiply, x4)\n    x6 = chain(toindices, x5, x6)\n    x7 = matcher(x6, ZERO)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    x12 = fill(I, x1, x11)\n    x13 = argmax(x9, width)\n    x14 = rbind(multiply, x4)\n    x15 = compose(x14, width)\n    x16 = argmax(x13, x15)\n    x17 = center(x16)\n    x18 = initset(x17)\n    x19 = cover(I, x18)\n    x20 = toindices(x16)\n    x21 = inbox(x16)\n    x22 = center(x21)\n    x23 = initset(x22)\n    x24 = fill(x19, x1, x23)\n    x25 = toobject(x24, x25)\n    x26 = objects(x28, T, F, T)\n    x27 = colorfilter(x26, x1)\n    x28 = rbind(toobject, x25)\n    x29 = chain(x28, x27, neighbors)\n    x30 = mapply(x29, x27)\n    x31 = astuple(x15, x14)\n    x32 = shift(x30, x31)\n    x33 = paint(x12, x32)\n    x34 = toindices(x16)\n    x35 = fork(insert, ulcorner, lrcorner)\n    x36 = fork(shift, identity, x35)\n    x37 = apply(x36, x34)\n    x38 = rbind(contained, x37)\n    x39 = rbind(sfilter,"], [1.1, "def solve_43606b81(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot180(I)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(positive, size)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(x2, x4, frontiers)\n    x6 = chain(size, dedupe, first)\n    x7 = chain(size, dedupe, last)\n    x8 = fork(greater, x6, x7)\n    x9 = fork(both, x5, x8)\n    x10 = lefthalf(x1)\n    x11 = righthalf(x1)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x12, x9)\n    x14 = power(x13, TWO)\n    x15 = branch(x10, x14, x4)\n    x16 = x15(x1)\n    x17 = x15(x2)\n    x18 = toindices(x16)\n    x19 = toindices(x17)\n    x20 = hfrontier(x18)\n    x21 = fill(x16, ZERO, x20)\n    x22 = fill(x21, x19, x20)\n    x23 = dedicated01945(x17)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, x25)\n    x26 = x25(x17)\n    x27 = palette(x26)\n    x28 = remove(ZERO, x27)\n    x29 = lbind(colorcount, x16)\n    x30 = argmax(x28, x29)\n    x31 = rbind(contained, x30)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(size, x33, first)\n    x35 = matcher(x34, ONE)\n    x36 = compose(size, last)\n    x37 = matcher(x36, ONE)\n    x38 = fork(either, x35, x37)\n    x39 = sfilter(x1, x38)\n"], [1.1, "def solve_9b6747d7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_aaf28fbe(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = upscale(x4, x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    x6 = toindices(x5)\n    x7 =lrcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(I, ZERO, x8)\n    x10 = asindices(x9)\n    x11 = to corners(x10)\n    x12 = toobject(x11, I)\n    x13 = asindices(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x15, x5)\n    x17 = fill(x9, x13, x16)\n    x18 =1988indices(x16)\n    x19 = lbind(adjacent, x18)\n    x20 = rbind(toobject, x15)\n    x21 = chain(x19, backdrop, x20)\n    x22 = compose(x5, x21)\n    x23 = fork(both, x21, x22)\n    x24 = rbind(numcolors, ONE)\n    x25 = compose(x24, decrement)\n    x26 = matcher(x25, ONE)\n    x27 = fork(both, x26, x23)\n    x28 = rbind(multiply, x22)\n    x29 = compose(x28, asindices)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x16, x30)\n    x32 = rbind(multiply, THREE)\n    x33 = compose(x32, x31)\n    x34 = fork(equality, identity, x33)\n    x35 = sfilter(x31, x34)\n    x36 =1999(x35)\n    x37 =0900(x16, x36)\n    x38 = paint(x37, x37)\n    x39 = fill(x38, x15"], [1.1, "def solve_f9f7d176(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_e3f7bbb4(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_c8b25e25(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_832d2894(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(normalize, x5)\n    x7 = chain(x4, x6, dmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(invert, x8)\n    x10 = power(x9, FOUR)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(initset, x11)\n    x13 = chain( begins, x11, x12)\n    x14 = rbind(branch, identity)\n    x15 = rbind(x14, x13)\n    x16 = chain(size, x15, x13)\n    x17 = partition(I)\n    x18 = fork(equality, x16, x17)\n    x19 = fork(both, x18, ONE)\n    x20 = extract(x19, x19)\n    x21 = x20(x20)\n    x22 = first(x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x17, x23)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x22)\n    x28 = width(x27)\n    x29 = lbind(repeat, x28)\n    x30 = chain(dmirror, merge, x29)\n    x31 = x30(x22)\n    x32 = frontiers(x31)\n    x33 = merge(x32)\n    x34 = palette(x33)\n    x35 = first(x34)\n    x36 = last(x34)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x37)\n    x39 = add(x38, x33)\n    x40 = shift(x23, x39"], [1.1, "def solve_fbfa9d9a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_03e5a5bd(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4f08e9de(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 =77fd(x1, toindices)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, identity,gde280)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = rbind(manhattan, x21)\n    x23 = compose(x22, initset)\n    x24 = argmin(x15, x23)\n    x25 = connect(x24, x16)\n    x26 = width(x19)\n    x27 = insert(x26, x15)\n    x28 = DOWN)\n    x29 = insert(x28, x15)\n    x30 = organizedmirror(x29)\n    x31 = width(x19)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = matcher(first, x10)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, toindices)\n    x36 = lbind(shift, x27)\n    x37 = rbind(multiply, x30)\n    x38 = chain(x35, x36, x37)\n    x39 = lbind(shift, x27)\n    x40 = rbind(multiply, x30)\n    x41"], [1.1, "def solve_a43be955(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = valmax(x5, width)\n    x7 = halve(x6)\n    x8 = objects(I, T, F, T)\n    x9 = lbind(colorfilter, x8)\n    x10 = rbind(argmax, x7)\n    x11 = lbind(toobject, x10)\n    x12 = compose(x11, x9)\n    x13 =55412(x2)\n    x14 = rbind(colorcount, x3)\n    x15 = lbind(toobject, x9)\n    x16 = compose(x14, x15)\n    x17 = x16(x2)\n    x18 = sfilter(x9, x17)\n    x19 =252indices(x18)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, last)\n    x22 = sfilter(x13, x21)\n    x23 = rbind(colorcount, x3)\n    x24 = valmax(x22, x23)\n    x25 = matcher(x21, x24)\n    x26 = sfilter(x18, x25)\n    x27 =27(x26)\n    x28 =88bind(colorcount, x3)\n    x29 = valmax(x28, x28)\n    x30 = matcher(x21, x29)\n    x31 = sfilter(x27, x30)\n    x32 =27(x31)\n    x33 = first(x32)\n    x34 = sfilter(x31, x33)\n    x35 = rbind(contained, x41)\n    x36 = compose(x34, last)\n    x37 = sfilter(x33, x36)\n    x38 =27(x37)\n    x39 = ofcolor(I, x3)\n    x40 = branch(x39, x38, x37)\n    O ="], [1.1, "def solve_085159d3(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_91d37929(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41"], [1.1, "def solve_2711256d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(equality, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(pair, frontiers, merge)\n    x5 = mfilter(x3, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(multiply, height, width)\n    x8 = size(x6)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x5, x9)\n    x11 = sfilter(x10, x8)\n    x12 = lbind(apply, first)\n    x13 = lbind(ofcolor, x1)\n    x14 = chain(x12, x13, x11)\n    x15 = rbind(contained, x15)\n    x16 = compose(x15, last)\n    x17 = sfilter(x11, x16)\n    x18 = lbind(colorfilter, x5)\n    x19 = compose(x18, first)\n    x20 = chain(inline, x17, x19)\n    x21 = fork(both, x16, x20)\n    x22 = fork(either, x21, first)\n    x23 = toindices(x5)\n    x24 = rbind(sfilter, x22)\n    x25 = compose(x24, x20)\n    x26 = lbind(recolor, FIVE)\n    x27 = compose(x26, x22)\n    x28 = chain(xto, x27, x29)\n    x29 = fork(combine, x25, x28)\n    x30 = fork(paint, identity, x29)\n    x31 = apply(x30, x11)\n    x32 = ofcolor(x31, FIVE)\n    x33 = compose(x32, x20)\n    x34 = argmax(x34, x33)\n    x35 = remove(x34, x34)\n    x36 = apply(center, x35)\n    x37 = normalize(x34)\n    x38 = shift(x37, x34"], [1.1, "def solve_87f86e83(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1edfb5b0(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(toindices, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizafilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = prapply(shift, x20, x2)\n    x22 = mapply(x21, x21)\n    x23 = combine(x21, x22)\n    x24 = fill(x19, THREE, x23)\n    x25 = palette(x24)\n    x26 =77fd23(x25)\n    x27 = asindices(x24)\n    x28 = ofcolor(x24, x27)\n    x29 = shift(x24, x28)\n    x30 = ofcolor(x24, x6)\n    x31 = intersection(x29, x30)\n    x32 = fill(x24, THREE, x31)\n    x33 = rot90(x32)\n    x34 = ofcolor(x33, x6)\n    x35 = shift(x34, x28)\n    x36 = ofcolor(x33, x6)\n    x37 = intersection(x39, x36)\n    x38 = fill(x33, THREE, x37)\n    x39 = fill(x"], [1.1, "def solve_956ab80d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(51,2)\n    x3 = lbind(9565, ZERO)\n    x4 = compose(x2, x3)\n    x5 = fork(add, height, x4)\n    x6 = compose(x1, width)\n    x7 = fork(equality, size, x5)\n    x8 = fork( both, x7, x6)\n    x9 = extract(x1, x8)\n    x10 = last(x9)\n    x11 = palette(I)\n    x12 = remove(x10, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = size(x15)\n    x17 = increment(x16)\n    x18 = outbox(x15)\n    x19 = rbind(toobject, I)\n    x20 = totuple(x18)\n    x21 = apply(x19, x20)\n    x22 = ofcolor(I, x14)\n    x23 = colorcount(I, x14)\n    x24 = increment(x23)\n    x25 = frontiers(I)\n    x26 = colorfilter(x25, x14)\n    x27 = difference(x25, x26)\n    x28 = size(x27)\n    x29 = increment(x28)\n    x30 = rbind(multiply, x29)\n    x31 = apply(x30, x27)\n    x32 = asindices(I)\n    x33 = of corners(x32)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = ofcolor(I, x15)\n    x37 = lbind(shift, x36)\n    x38 = mapply(x37, x31)\n    x39 = rbind(990, x38)\n    x40 = apply(x39, x33)\n    x41 = ofcolor(I, x18)\n    x42 = rbind(inter"], [1.1, "def solve_601cf0b0(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, T, T)\n    x10 = argmin(x9, numcolors)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = increment(x12)\n    x14 = increment(x13)\n    x15 = toindices(x4)\n    x16 = increment(x15)\n    x17 = increment(x16)\n    x18 = astuple(x12, x17)\n    x19 = rbind(multiply, x18)\n    x20 = toindices(x11)\n    x21 = increment(x20)\n    x22 = increment(x21)\n    x23 = fork(multiply, x18, x22)\n    x24 = x23(x11)\n    x25 = palette(I)\n    x26 = other(x25, x10)\n    x27 = palette(I)\n    x28 = remove(x13, x27)\n    x29 = rbind(positive, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = fgpartition(x18)\n    x32 = merge(x31)\n    x33 = apply(x32, x32)\n    x34 = product(x30, x33)\n    x35 = fork(connect, first, last)\n    x36 = apply(x35, x34)\n    x37 = fork(subtract, first, last)\n    x38 =94872232\n    x39 = fork(subtract, x37, x38)\n    x40 = fork(equality, x36, x39)\n    x41 = mfilter(x34, x40)\n    x42 = size(x41)\n    x43 ="], [1.1, "def solve_e7775ead(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = branch(x1, trim, tophalf)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = vmirror(x3)\n    x5 = objects(x4, T, F, F)\n    x6 = order(x5, uppermost)\n    x7 = compose(color, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    x10 = size(x1)\n    x11 = decrement(x10)\n    x12 = height(x2)\n    x13 = astuple(x12, x11)\n    x14 = crop(x2, ORIGIN, x13)\n    x15 = leastcolor(x14)\n    x16 = canvas(x15, x14)\n    x17 = hconcat(x16, x16)\n    x18 = compose(first, last)\n    x19 = compose(x18, first)\n    x20 = fork(subtract, x19, first)\n    x21 = compose(first, last)\n    x22 = compose(x21, first)\n    x23 = fork(subtract, x22, last)\n    x24 = fork(astuple, x23, x20)\n    x25 = compose(decrement, x24)\n    x26 = normalize(x2)\n    x27 = fork(add, first, x25)\n    x28 = toindices(x26)\n    x29 = compose(x27, x28)\n    x30 = fork(connect, x29, x21)\n    x31 = apply(x30, x8)\n    x32 = lbind(greater, x13)\n    x33 = compose(x32, first)\n    x34 = sfilter(x31, x33)\n    x35 = difference(x19, x34)\n    x36 = lbind(compose, center)\n    x37 = lbind(x36, positive)\n    x38 = chain(x39, x37, x29)\n    x39 =sfilter(x35, x38)\n    "], [1.1, "def solve_7965aa7b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = canvas(ZERO, x27)\n    x29 = astuple(x24, x18)\n    x30 = initset(x29)\n    x31 = insert(UNITY, x30)\n    x32 = insert(x28, x31)\n    x33 = width(I)\n    x34 = decrement(x33)\n    x35 = tojvec(x34)\n    x36 = height(I)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = initset(x38)\n    x40 = insert(x35, x39)\n    x41 = insert(x36, x40)\n    x42 = width(I)\n    x43 = decrement(x42)\n    x44 = tojvec(x43)\n    "], [1.1, "def solve_df57a124(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = matcher(color, x3)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = merge(x12)\n    x14 = palette(x13)\n    x15 = matcher(identity, x3)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x14, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = totuple(x20)\n    x22 = apply(color, x21)\n    x23 = lbind(sfilter, x12)\n    x24 = lbind(matcher, identity)\n    x25 = chain(size, x23, x24)\n    x26 = compose(x25, vline)\n    x27 = chain(sfilter, x16, x26)\n    x28 = lbind(colorcount, x13)\n    x29 = fork(upscale, x28, x27)\n    x30 = decrement(x4)\n    x31 =1999(x30)\n    x32 = rbind(subtract, x31)\n    x33 = chain(x32, x29, first)\n    x34 = fork(apply, x33, x33)\n    x35 =88(x22)\n    x36 = x34(x35)\n    x37 = ofcolor(x36, x3)\n    x38 = rbind(adjacent, x37)\n    x39 = compose(x38, last)\n    x40 = extract(x41, x39)\n    x41 = initset("], [1.1, "def solve_8a907dfc(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_c6ba9eff(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(size, dedupe, first)\n    x5 = matcher(x4, ONE)\n    x6 = compose(first, cmirror)\n    x7 = chain(size, dedupe, x6)\n    x8 = matcher(x7, ONE)\n    x9 = fork(both, x5, x8)\n    x10 = rbind(rapply, I)\n    x11 = compose(initset, first)\n    x12 = chain(first, x10, x11)\n    x13 = compose(x12, x5)\n    x14 = extract(x3, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = trim(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = asobject(x20)\n    x22 = mostcolor(I)\n    x23 = matcher(first, x22)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x21, x24)\n    x26 = partition(x25)\n    x27 = fork(multiply, height, width)\n    x28 = fork(equality, size, x27)\n    x29 = sfilter(x26, x28)\n    x30 = argmax(x29, x27)\n    x31 = difference(x22, x30)\n    x32 = asobject(x31)\n    x33 = matcher(first, x22)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = sizefilter(x31, ONE)\n    x37 = argmax(x36, size)\n    x38 = remove(x37, x36)\n    x39 = merge(x38)\n    x40 = palette"], [1.1, "def solve_fa02ba69(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_afcf20be(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rbind(ofcolor, ONE)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_1a6acc1c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = height(I)\n    x7 = width(I)\n    x8 = add(x6, x7)\n    x9 = add(x5, x8)\n    x10 = I(I, x4)\n    x11 = I(I, x7)\n    x12 = width(I)\n    x13 = increment(x12)\n    x14 = divide(x13, x11)\n    x15 = height(I)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = divide(x17, x11)\n    x19 = width(I)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(multiply, x14)\n    x23 = apply(x22, x21)\n    x24 = lbind(shift, x22)\n    x25 = mapply(x24, x23)\n    x26 = fill(I, FOUR, x25)\n    x27 = canvas(ZERO, x8)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 = toobject(x29, I)\n    x31 = mostcolor(x30)\n    x32 = occurrences(x26, x31)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, identity, dmirror)\n    x36 = x35(x16)\n    x37 = equality(x36, ONE)\n    x38 = branch(x37, identity, vmirror)\n    x39 = x38(x51)\n    x40 = downscale(x39, x3)\n    x41 = ofcolor(x40, x31)\n    x42 =91000(x41, asobject)\n    x43 = ofcolor(x"], [1.1, "def solve_d597c11f(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_f1a0a95b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_3b3e2d03(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(uppermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = compose(x4, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x3, x8)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(NEG_ONE, x13)\n    x15 = invert(x13)\n    x16 = astuple(NEG_ONE, x15)\n    x17 = double(x13)\n    x18 = astuple(NEG_TWO, x17)\n    x19 = double(x13)\n    x20 = invert(x19)\n    x21 = astuple(NEG_TWO, x20)\n    x22 = multiply(THREE, TEN)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x14)\n    x25 = apply(x24, x23)\n    x26 = lbind(multiply, x16)\n    x27 = apply(x26, x23)\n    x28 = lbind(multiply, x18)\n    x29 = apply(x28, x23)\n    x30 = lbind(multiply, x21)\n    x31 = apply(x30, x23)\n    x32 = lbind(shift, x12)\n    x33 = mapply(x32, x25)\n    x34 = lbind(shift, x12)\n    x35 = mapply(x34, x27)\n    x36 = lbind(shift, x12)\n    x37 = mapply(x36, x29)\n    x38 = lbind(shift, x"], [1.1, "def solve_53e3346b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 =00000000\n    \"\"\"\n    x3 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind("], [1.1, "def solve_048b64fd(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = sfilter(x31, x30)\n    x33 = merge(x32)\n    x34 = rot90(x30)\n    x35 = downscale(x33, x34)\n    x36 = objects(x35, T, F, F)\n    x37 = argmax(x36, x24)\n    x38 = last(x37)\n    x39 = remove(x39, x36"], [1.1, "def solve_d0765819(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = initset(x7)\n    x13 = add(x15, x12)\n    x14 =tojvec(x13)\n    x15 = drilltext(x14, x7)\n    x16 = lbind(argmin, x15)\n    x17 = compose(x16, toindices)\n    x18 = fork(difference, box, x17)\n    x19 = fork(equality, x18, identity)\n    x20 = compose(x19, switch)\n    x21 = rbind(multiply, xICS)\n    x22 = rbind(divide, xIts)\n    x23 = compose(x21, x22)\n    x24 = fork(equality, x23, identity)\n    x25 = compose(x24, x11)\n    x26 = lbind(apply, x25)\n    x27 = rbind(multiply, x10)\n    x28 = rbind(divide, x13)\n    x29 = x26(x14)\n    x30 = x27(x29)\n    x31 = fork(equality, x28, x30)\n    x32 = compose(x27, x11)\n    x33 = lbind(apply, x32)\n    x34 = rbind(toobject, I)\n    x35 = compose(x33, x34)\n    x36 = apply(x35, x15)\n    x37 = chain(x26, x24, x30)\n    x38 = x37(x36)\n    x39 = rbind(add, x38)\n    x40 = compose("], [1.1, "def solve_c7c2662f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = compose(x4, size)\n    x7 = sfilter(x3, x6)\n    x8 = chain(hline, sfilter, fgpartition)\n    x9 = merge(x7)\n    x10 = palette(x9)\n    x11 = intersection(x10, x8)\n    x12 = astuple(identity, rot90)\n    x13 = astuple(rot180, rot270)\n    x14 = combine(x12, x13)\n    x15 = astuple(identity, rot270)\n    x16 = astuple(rot180, rot90)\n    x17 = combine(x15, x16)\n    x18 = pair(x14, x17)\n    x19 = rbind(rapply, I)\n    x20 = compose(initset, first)\n    x21 = chain(first, x19, x20)\n    x22 = rbind(ofcolor, EIGHT)\n    x23 = chain(lowermost, x22, x21)\n    x24 = matcher(x23, ZERO)\n    x25 = extract(x18, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = x26(I)\n    x29 = decrement(x28)\n    x30 = astuple(x29, x27)\n    x31 = palette(I)\n    x32 = first(x31)\n    x33 = last(x31)\n    x34 = switch(x20, x33, x25)\n    x35 = branch(x34, hmirror, vmirror)\n    x36 = x35(x42)\n    x37 = canvas(x30, x36)\n    x38 = paint(x37, x34)\n    x39 = ofcolor(x38, EIGHT)\n    x40 = shift(x39,"], [1.1, "def solve_5480b6c7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, contained)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, ulcorner, x31)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(add, toivec, x34)\n    x36 = fork(add, tojvec, x35)\n    x37 = fork(add, normalize, x36)\n    x38 = mapply(x37, x4)\n    O = paint(I, x38)"], [1.1, "def solve_2bb3c351(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b28f5123(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = replace(I, SIX, TWO)\n    x2 = objects(x1, T, F, T)\n    x3 = merge(x2)\n    x4 = color(x3)\n    x5 = subgrid(x3, x1)\n    x6 = argmax(x5, width)\n    x7 = astuple(TWO, ONE)\n    x8 = x5(x6)\n    x9 = box(x3)\n    x10 = fill(x6, x4, x9)\n    x11 = fill(x10, x4, x7)\n    x12 = lbind(O = merge(x6)\n    x13 = compose(color, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = height(x11)\n    x16 = decrement(x15)\n    x17 =909(astuple, x16)\n    x18 = compose(last, first)\n    x19 = rbind(contained, x17)\n    x20 = sfilter(x11, x18)\n    x21 =\n    0202277522\n    last, x19)\n    x22 = width(x11)\n    x23 = subtract(x25, x22)\n    x24 = astuple(x23, x24)\n    x25 = canvas(ZERO, x24)\n    x26 = asindices(x25)\n    x27 = fgpartition(x25)\n    x28 = merge(x27)\n    x29 = palette(x28)\n    x30 = lbind(shift, x28)\n    x31 = mapply(x30, x29)\n    x32 = paint(x25, x31)\n    x33 =scale(x32, UNITY)\n    x34 = ofcolor(x33, x4)\n    x35 = asindices(x33)\n    x36 = remove(x35, x3333)\n    x37 =    x37 = lbind(recolor, x4)\n    x38 = lbind(mapply, x33)\n    x39 = rbind(ofcolor, x4)\n    x40 = chain("], [1.1, "def solve_e6723d67(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = sfilter(x1, vline)\n    x5 = size(x4)\n    x6 = greater(x3, x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(first, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = mostcolor(x10)\n    x19 = lbind(recolor, x18)\n    x20 = rbind(sfilter, x15)\n    x21 = compose(toindices, x20)\n    x22 = fork(combine, x21, outbox)\n    x23 = compose(x19, x22)\n    x24 = fork(combine, x17, x23)\n    x25 = shape(x10)\n    x26 = add(TWO, x25)\n    x27 = canvas(x18, x26)\n    x28 = asobject(x10)\n    x29 = shift(x28, UNITY)\n    x30 = paint(x27, x29)\n    x31 = rbind(shift, NEG_UNITY)\n    x32 = lbind(occurrences, x30)\n    x33 = compose(x31, x32)\n    x34 = compose(x33, x24)\n    x35 = chain(positive, size, x34)\n    x36 = sfilter(x12, x35)\n    x37 = chain(first, x33, x24)\n    x38 = compose(ulcorner, x24)\n    x39 = fork(subtract, x37, x38)\n"], [1.1, "def solve_32761d00(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_de886222(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, ONE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, identity, rot90)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = rot180(x6)\n    x8 = sfilter(x3, x7)\n    x9 = merge(x8)\n    x10 = rot180(x9)\n    x11 = sfilter(x3, x4)\n    x12 = merge(x11)\n    x13 = rot270(x12)\n    x14 = sfilter(x3, x4)\n    x15 = argmax(x14, size)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x15, x7)\n    x18 = objects(x17, T, F, F)\n    x19 = rbind(colorcount, ZERO)\n    x20 = argmax(x18, x19)\n    x21 = height(x20)\n    x22 = width(x20)\n    x23 = vsplit(x20, x22)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x2200, x24)\n    x26 = combine(x21, x25)\n    x27 = palette(x25)\n    x28 = llcorner(x27)\n    x29 = matcher(first, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(compose, flip)\n    x32 = lbind(matcher, first)\n    x33 = chain(x30, x31, x32)\n    x34 = lbind(paint, x17)\n    x35 = rbind(compose, asobject)\n    x36 = lbind(rbind, extract)\n    x37 = chain(x34, x35, x36)\n    x38 = fork(shift, identity, x37)\n    x39 = rbind(shift, x38)\n    x40 = compose(x39"], [1.1, "def solve_2e9b2df7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = width(x11)\n    x21 = decrement(x20)\n    x22 = tojvec(x21)\n    x23 = identity(DOWN)\n    x24 = connect(ORIGIN, x22)\n    x25 = fill(x18, THREE, x24)\n    x26 = identity(x12)\n    x27 = width(x12)\n    x28 = decrement(x27)\n    x29 = tojvec(x28)\n    x30 = identity(corners)\n    x31 = fill(x25, THREE, x30)\n    x32 = identity(x26)\n    x33 = identity(x256)\n    x34 = connect(ORIGIN, x24)\n    x35 = fill(x39, THREE, x34)\n    x36 = identity(x30)\n    x37 = fill(x35, THREE, x36)\n    x38 = add(x27, x36)\n    x39 = fill(x37, THREE, x38)\n    x40 = add(x29, x36)\n    x41 = fill(x40, THREE, x39)\n    x42 = combine(x34, x41)"], [1.1, "def solve_fbb4eb24(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = asobject(x8)\n    x11 = ulcorner(x9)\n    x12 = vplit(x10, TWO)\n    x13 = hsplit(x11, TWO)\n    x14 = neighbors(x13)\n    x15 = mapply(palette, x14)\n    x16 = astuple(x11, x12)\n    x17 = ulcorner(x9)\n    x18 = vsubtract(x17, x12)\n    x19 = hsplit(x19, TWO)\n    x20 = rbind(ofcolor, TWO)\n    x21 = compose(x20, x10)\n    x22 = fork(subtract, x21, x17)\n    x23 = corners(x15)\n    x24 = apply(x22, x23)\n    x25 = ZERO(x24)\n    x26 = fgpartition(x25)\n    x27 = merge(x26)\n    x28 = difference(x27, x25)\n    x29 = intersection(x28, x25)\n    x30 = shift(x29, DOWN)\n    x31 = extract(x30, x17)\n    x32 = initset(x15)\n    x33 = insert(x22, x32)\n    x34 = insert(x26, x33)\n    x35 = combine(x35, x34)\n    x36 = product(x35, x35)\n    x37 = power(increment, TWO)\n    x38 = x37(ORIGIN)\n    x39 = height(x38)\n    x40 = divide(x39, x37)\n    x41 = width"], [1.1, "def solve_54b7a60d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = palette(I)\n    x22 = remove(x20, x21)\n    x23 = other(x22, x20)\n    x24 = ofcolor(I, x20)\n    x25 = ofcolor(I, x10)\n    x26 = ofcolor(I, x5)\n    x27 = subgrid(x20, I)\n    x28 = subgrid(x25, I)\n    x29 = asobject(x28)\n    x30 = hperiod(x29)\n    x31 = height(I)\n    x32 = divide(x31, x30)\n    x33 = fgpartition(x32)\n    x34 = merge(x33)\n    x35 = x20(x34)\n    x36 = lbind(shift, x24)\n    x37 = shift(x35, x36)\n    x38 = toobject(x37, x28)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    x41 = toobject(x40, x28)\n    x42 = astuple("], [1.1, "def solve_b3351aa3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors(d687)\n    x10 = lbind(lbind, sfilter)\n    x11 = rbind(colorcount, I)\n    x12 = chain(x11, x10, frontiers)\n    x13 = matcher(x12, TWO)\n    x14 = dmirror(x7)\n    x15 = lbind(hupscale, x14)\n    x16 = chain(x15, tojvec, x13)\n    x17 = compose(x16, x12)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = fork(combine, x17, x18)\n    x20 = fork(combine, x19, x7)\n    x21 = palette9(I)\n    x22 = extract(x21, x20)\n    x23 = lbind(hupscale, x7)\n    x24 = chain(x23, positive, x20)\n    x25 = dmirror(x7)\n    x26 = palette(x25)\n    x27 = other(x26, x22)\n    x28 =422(x28, x22)\n    x29 = rbind(rapply, x28)\n    x30 = compose(x29, initset)\n    x31 = argmax(x28, x30)\n    x32 = x28(x31)\n    x33 = ofcolor(x35, x27)\n    x34 =[contained(x33, x34)\n    x35 = ofcolor(x35, x27)\n    x36 = sfilter(x34, x35)\n    x37 = difference(x35, x36)\n    x38 = ofcolor("], [1.1, "def solve_28d1bbf1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_dc0730b9(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = argmax(x2, width)\n    x4 = height(x3)\n    x5 = halve(x4)\n    x6 = frontiers(x3)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = astuple(x5, x6)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x44 = interval(x13, x12, ONE)\n    x15 = lbind(shift, x11)\n    x16 = apply(x15, x44)\n    x17 = rbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = rbind(hmatching, x11)\n    x20 = rbind(vmatching, x11)\n    x21 = fork(either, x19, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(extract, x22, x18)\n    x24 = compose(size, x23)\n    x25 = increment(x5)\n    x26 = interval(x25, x25, ONE)\n    x27 = corners(x11)\n    x28 = insert(x15, x27)\n    x29 = insert(x16, x28)\n    x30 = insert(x11, x29)\n    x31 =riercorner(x30)\n    x32 = apply(size, x31)\n    x33 = increment(x5)\n    x34 = interval(x33, x32, ONE)\n    x35 = apply(tojvec, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = fill(x10, FOUR, x36)\n    x38 = x42(x37)\n    x39 =703725(x38)\n    x40 = increment(x5)\n    x41 ="], [1.1, "def solve_d3e5f487(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4eca0cab(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = ONE(x3)\n    x5 = ONE(I)\n    x6 = rot270(x4)\n    x7 = astuple(identity, rot270)\n    x8 = astuple(rot180, rot90)\n    x9 = combine(x7, x8)\n    x10 = sfilter(x9, square)\n    x11 = difference(x3, x10)\n    x12 = rot90(x11)\n    x13 = rbind(rapply, x2)\n    x14 = chain(first, x13, initset)\n    x15 = fork(combine, identity, x14)\n    x16 = extract(x15, x11)\n    x17 = mapply(x16, x12)\n    x18 = first(x17)\n    x19 = trim(x18)\n    x20 = dmirror(x19)\n    x21 = asobject(x20)\n    x22 = height(x21)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = apply(double, x24)\n    x26 = shape(x21)\n    x27 = apply(asobject, x21)\n    x28 = chain(first, x27, last)\n    x29 = asindices(x21)\n    x30 = ofcolor(x21, ZERO)\n    x31 = ofcolor(x21, ONE)\n    x32 = intersection(x29, x30)\n    x33 = fill(x21, ZERO, x32)\n    x34 = height(x21)\n    x35 = equality(x34, ZERO)\n    x36 = branch(x35, x22, vsplit)\n    x37 = lbind(recolor, ZERO)\n    x38 =88a104 last(I)\n    x39 = chain(x37, x37, x38)\n    x40 = difference(x39, x31)\n    x41"], [1.1, "def solve_7abfe236(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, TWO_BY_TWO)\n    x8 = initset(x4)\n    x9 = insert(x8, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 = mapply(ineighbors, x11)\n    x13 = fill(x7, ONE, x12)\n    x14 =fill(x13,004, x11)\n    x15 = ofcolor(x14, x5)\n    x16 = rbind(adjacent, x15)\n    x17 = mfilter(x15, x16)\n    O = fill(x14, x5, x17)\n    return O"], [1.1, "def solve_bba87be2(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = divide(x3, x4)\n    x6 = increment(x5)\n    x7 = width(I)\n    x8 = halve(x7)\n    x9 = increment(x8)\n    x10 = height(I)\n    x11 = divide(x9, x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = prapply(astuple, x13, x13)\n    x15 = lbind(canvas, ZERO)\n    x16 = lbind(occurrences, I)\n    x17 = compose(x15, x16)\n    x18 = lbind(apply, multiply)\n    x19 = chain(x17, x18, frontiers)\n    x20 = matcher(x19,45)\n    x21 = fork(recolor, color, x20)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x14, x22)\n    x24 = paint(I, x23)\n    x25 =101015(x23)\n    x26 = matcher(x22, x25)\n    x27 = mfilter(x1, x26)\n    O = paint(x24, x27)\n    return O"], [1.1, "def solve_74887115(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = chain(positive, first, x1)\n    x3 = lbind(lbind, sfilter)\n    x4 =539a539a6(I)\n    x5 = compose(x2, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = equality(x4, x6)\n    x8 = branch(x7, identity, x6)\n    x9 = x8(I)\n    O = partition(x9)\n    return O"], [1.1, "def solve_b902a6ba(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =29ec(d406)\n    x3 =92(flip, FOUR)\n    x4 = shape(I)\n    x5 = maximum(x4)\n    x6 =675(x5)\n    x7 = interval(TWO, x6, ONE)\n    x8 = rbind(multiply, x5)\n    x9 = apply(x8, x7)\n    x10 = rbind(multiply, FOUR)\n    x11 = apply(x10, x9)\n    x12 = matcher(numcolors, FOUR)\n    x13 = sfilter(x11, x12)\n    x14 = apply(color, x13)\n    x15 = mostcommon(x14)\n    x16 = repeat(x15, ONE)\n    O = x15(I)\n    return O"], [1.1, "def solve_88acd047(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 =66(I)\n    x4 =364(x3)\n    x5 = decrement(x4)\n    x6 = branch(x5, identity, initset)\n    x7 = branch(x5, identity, outbox)\n    x8 = x6(x7)\n    x9 = ulcorner(x8)\n    x10 = decrement(x9)\n    x11 = branch(x5, identity, initset)\n    x12 = x11(x10)\n    x13 = initset(x12)\n    x14 = insert(x9, x13)\n    x15 = width(I)\n    x16 = decrement(x15)\n    x17 = tojvec(x16)\n    x18 = connect(ORIGIN, x17)\n    x19 = height(I)\n    x20 = decrement(x19)\n    x21 = toivec(x20)\n    x22 = connect(ORIGIN, x21)\n    x23 = compress(I)\n    x24 = numcolors(x23)\n    x25 = equality(x24, ONE)\n    x26 = branch(x25, identity, x22)\n    x27 = branch(x25, identity, x24)\n    x28 = width(x26)\n    x29 = decrement(x28)\n    x30 = tojvec(x29)\n    x31 = connect(ORIGIN, x30)\n    x32 = height(x26)\n    x33 = decrement(x32)\n    x34 = toivec(x33)\n    x35 = connect(ORIGIN, x34)\n    x36 = connect(ORIGIN, x28)\n    x37 = connect(ORIGIN, x29)\n    x38 = fill(I, THREE, x36)\n    x39 = fill(x38, EIGHT, x37)\n    x40 = fill(x39, TWO, x35)\n    O = fill(x40, ONE, x39)\n    return O"], [1.1, "def solve_edf3b147(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rot270(I)\n    x2 = fork(product, identity, identity)\n    x3 = apply(x2, x1)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, identity, identity)\n    x6 = x5(x1)\n    x7 =    488712738(x6)\n    O = x5(x7)\n    return O"], [1.1, "def solve_17b4feea(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =441001F\n    0000000001\n    x2 = merge(x1)\n    x4 = fill(I, NEG_ONE, x3)\n    x5 = astuple(x11, x12)\n    x6 = ulcorner(x2)\n    x7 = increment(x6)\n    x8 = rbind(subtract, x7)\n    x9 = chain(even, x8, last)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, first, last)\n    x12 = compose(flip, x9)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(decrement, x13, last)\n    x15 = fork(astuple, x11, x14)\n    x16 = apply(x15, x10)\n    O = paint(x4, x16)\n    return O"], [1.1, "def solve_d110545f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(equality, height, width)\n    x7 = size(x5)\n    x8 = interval(ZERO, x7, x6)\n    x9 = sfilter(x8, x4)\n    x10 = rbind(contained, x8)\n    x11 = compose(x10, outbox)\n    x12 = sfilter(x9, x11)\n    x13 = FOUR(x12)\n    x14 = increment(x13)\n    x15 =455(x12)\n    x16 = decrement(x15)\n    x17 = canvas(ZERO, x16)\n    x18 = asobject(x17)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x17, x19)\n    x21 = height(x17)\n    x22 = width(x17)\n    x23 = astuple(x21, x22)\n    x24 = crop(x20, ORIGIN, x23)\n    x25 = hmirror(x24)\n    x26 = vmirror(x24)\n    x27 = ofcolor(x25, ZERO)\n    x28 = ofcolor(x26, ZERO)\n    x29 = product(x27, x28)\n    x30 = insert(x28, x29)\n    x31 = ofcolor(x20, TWO)\n    x32 = mapply(neighbors, x31)\n    x33 = difference(x30, x32)\n    O = fill(x20, ONE, x33)\n    return O"], [1.1, "def solve_1a7fd12c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(I, ONE)\n    x4 =866(numcolors, trim)\n    x5 = compose(multiply, repeat)\n    x6 = matcher(dedupe, x5)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x4)\n    x9 = compose(x8, x6)\n    x10 = initset(identity)\n    x11 = matcher(x10, ZERO)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = argmax(x13, last)\n    x15 = height(x14)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = insert(x14, x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x17)\n    O = paint(I, x20)\n    return O"], [1.1, "def solve_e60115ad(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(add, first, last)\n    x9 = fork(connect, x7, x8)\n    x10 = fork(equality, x9, identity)\n    x11 =\n    x10(x2)\n    x12 = leastcolor(x11)\n    x13 = tojvec(SIX)\n    x14 = crop(x13, identity)\n    x15 = height(x14)\n    x16 = width(x14)\n    x17 = vsplit(x16, x15)\n    x18 = compose(x17, first)\n    x19 = fork(equality, identity, x18)\n    x20 = compose(x19, last)\n    x21 = width(x2)\n    x22 = vsplit(x21, x12)\n    x23 =885112(x22)\n    x24 = invert(x23)\n    x25 = shift(x14, x24)\n    x26 = shift(x25, x24)\n    x27 = palette(x26)\n    x28 = lbind(shift, x26)\n    x29 = occurrences(x28, x27)\n    x30 = mapply(x28, x29)\n    O = paint(x23, x30)\n    return O"], [1.1, "def solve_79f29e04(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 =850d687anch(x8, ORIGIN, toindices)\n    x10 = matcher(first, x39)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = matcher(first, x39)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x16, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x20)\n    x23 = fork(combine, x22, x22)\n    x24 = rbind(shoot, UNITY)\n    x25 = compose(x24, last)\n    x26 = fork(recolor, first, x25)\n    x27 = mapply(x26, x4)\n    O = paint(x6, x27)\n    return O"], [1.1, "def solve_2ccd11ae(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    4577300009\n    3011433066\n    7854836027\n    1929100002\n    \"\"\"\n    x1 = halve(x1)\n    x2 = rbind(shoot, x4)\n    x3 = rbind(shoot, x2)\n    x4 = fork(combine, x2, x3)\n    x5 = rbind(shoot, x2)\n    x6 = rbind(shoot, x4)\n    x7 = fork(combine, x6, x5)\n    x8 = fork(combine, x4, x7)\n    x9 = leastcolor(I)\n    x10 = rbind(toobject, I)\n    x11 = rbind(colorcount, x9)\n    x12 = chain(x11, x10, dneighbors)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x1, x13)\n    x15 = x14(I)\n    x16 = last(x15)\n    x17 = subgrid(x16, x15)\n    x18 = index(x17, DOWN)\n    x19 = subgrid(x18, x15)\n    x20 = hmirror(x19)\n    x21 = replace(x20, x9, x8)\n    x22 = replace(x21, x10, x7)\n    x23 = replace(x22, x19, x8)\n    x24 = hmirror(x23)\n    O = replace(x24, x10, x5)\n    return O"], [1.1, "def solve_6524061a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 =215(I)\n    x3 = halve(x1)\n    x4 = increment(x3)\n    x5 = width(I)\n    x6 = divide(x5, x4)\n    x7 = astuple(x6, x4)\n    x8 = canvas(ZERO, x7)\n    x9 = ofcolor(x8, ONE)\n    x10 = rbind(multiply, x4)\n    x11 = apply(x10, x9)\n    x12 = rbind(multiply, x6)\n    x13 = apply(x12, x11)\n    x14 = ofcolor(x8, ONE)\n    x15 = rbind(intersection, x14)\n    x16 = apply(x15, x13)\n    O = fill(x8, ZERO, x16)\n    return O"], [1.1, "def solve_a311ede7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, TWO, THREE)\n    x3 = switch(x2, ONE, FOUR)\n    x4 = switch(x3, EIGHT, FOUR)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(ORIGIN)\n    x12 = box(x7)\n    x13 = inbox(x7)\n    x14 = center(x7)\n    x15 = initset(x14)\n    x16 = lbind(toobject, x12)\n    x17 = compose(x4, x16)\n    x18 = lbind(toobject, x13)\n    x19 = compose(x4, x18)\n    x20 = lbind(toobject, x15)\n    x21 = compose(x4, x20)\n    x22 =454(x21)\n    x23 = merge(x11)\n    x24 = fill(x6, TWO, x23)\n    x25 = asindices(x24)\n    x26 = corners(x25)\n    x27 = toobject(x26, x24)\n    x28 = mostcolor(x27)\n    x29 = asindices(x24)\n    x30 = ofcolor(x24, x28)\n    x31 = difference(x29, x30)\n    x32 = rbind( fill, x28)\n    x33 = apply(x32, x31)\n    x34 = rbind(adjacent, x4)\n    x35 = mfilter(x34, x28)\n    x36 = mfilter(x34, x25)\n    x37 = paint(x24, x3)\n    x38 = paint(x37, x35)\n    O = fill(x38, x28, x36)\n    return O"], [1.1, "def solve_c25fc43f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =159(I)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.1, "def solve_f81fd587(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(O = maximum(x4)\n    x10 = double(x4)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = rbind(multiply, x4)\n    x13 = apply(x12, x11)\n    x14 = rbind(multiply, x6)\n    x15 = apply(x14, x11)\n    x16 = pair(x13, x15)\n    x17 = rbind(add, ZERO)\n    x18 = compose(x17, first)\n    x19 = rbind(add, x8)\n    x20 = pair(x16, x19)\n    x21 = fork(combine, x18, x20)\n    x22 = mapply(x21, x30)\n    O = fill(x2, FOUR, x22)\n    return O"], [1.1, "def solve_e46bf51e(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = vperiod(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = add(x5, THREE)\n    x7 = width(I)\n    x8 = astuple(x6, x7)\n    x9 = partition(I)\n    x10 = lbind(colorcount, I)\n    x11 = argmax(x9, x10)\n    x12 = canvas(x11, x8)\n    x13 = apply(normalize, x12)\n    x14 = lbind(to67e509687\n    x15 =8877(x14)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x13, x17)\n    x19 = compose(invert, size)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_aaaa4e5d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = compose(toindices, normalize)\n    x11 = matcher(x10, x9)\n    x12 = uppermost(x7)\n    x13 = compose(toindices, normalize)\n    x14 = matcher(x13, x12)\n    x15 = leftmost(x7)\n    x16 = matcher(x15, x13)\n    x17 = uppermost(x7)\n    x18 = greater(x16, x17)\n    x19 = leftmost(x7)\n    x20 = matcher(x19, x14)\n    x21 = uppermost(x7)\n    x22 = matcher(x21, x18)\n    x23 = leftmost(x7)\n    x24 = matcher(x23, x14)\n    x25 = rightmost(x7)\n    x26 = matcher(x25, x24)\n    x27 = leftmost(x7)\n    x28 = matcher(x27, x28)\n    x29 = uppermost(x7)\n    x30 = matcher(x29, x25)\n    x31 = rightmost(x7)\n    x32 = matcher(x31, x29)\n    x33 = leftmost(x7)\n    x34 = sfilter(x33, x21)\n    x35 = argmax(x34, size)\n    x36 = difference(xs, x35)\n    x37 =884483replace(x36, x8, x5)\n    O = uppermost(x37)\n    return O"], [1.1, "def solve_94253c38(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =523259\n    4292891824\n    \"\"\"\n    x2 = astuple(TWO, ONE)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x4)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [1.1, "def solve_aa2d0b61(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(150,197)\n    x9 = size(x3)\n    x10 = vsplit(x4, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hconcat, identity)\n    x14 = hmirror(x11)\n    x15 = matcher(x13, x14)\n    x16 = identity( Maurice222\n    0000000352\n    \"\"\"\n    x1 = leastcolor(x6)\n    x2 = vsplit(x6, x12)\n    x3 = apply(x13, x2)\n    x4 = maximum(x3)\n    x5 = ofcolor(x4, x1)\n    x6 = hmirror(x5)\n    x7 = fill(x6, ZERO, x1)\n    x8 = insert(x7, x5)\n    O = fill(x8, ZERO, x2)\n    return O"], [1.1, "def solve_0cc501ef(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette,I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.1, "def solve_36df1f97(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I asobject, I)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_7e21616c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = partition(I)\n    x5 = sizefilter(x4, ONE)\n    x6 = difference(x4, x5)\n    x7 =1117fcbind(ofcolor, x2)\n    x8 = mapply(x7, x6)\n    x9 = fork(connect, ulcorner, urcorner)\n    x10 = fork(connect, urcorner, ulcorner)\n    x11 = fork(combine, x9, x10)\n    x12 = mapply(x11, x9)\n    O = fill(I, x2, x12)\n    return O"], [1.1, "def solve_429ab382(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =889(RIGHT)\n    x2 = halve(x1)\n    O = upscale(I, x2)\n    return O"], [1.1, "def solve_e6a81d9e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =7326(I)\n    x2 = tophalf(x1)\n    O = bottomhalf(x1)\n    return O"], [1.1, "def solve_973c9f8a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 =483(x7)\n    x13 =485(x7)\n    x14 =11(x12)\n    x15 =11(x13)\n    x16 = rbind(multiply, x4)\n    x17 = apply(x16, x14)\n    x18 = mapply(x16, x17)\n    x19 = merge(x9)\n    x20 = fill(I, x3, x19)\n    O = fill(x20, x11, x18)\n    return O"], [1.1, "def solve_2b62334e(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =8888(66666666)\n    x2 = rbind(shoot, RIGHT)\n    x3 = rbind(shift, LEFT)\n    x4 = compose(x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.1, "def solve_ced800e1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = heavily remind4448(I)\n    x2 =Example output:\n    4941910114\n    2732866842\n    8388760181\n    3013746873\n    1529944467\n    1491984894\n    6741268043\n    314479401f8(77769718\n    57648014328\n    1737465730\n    \"\"\"\n    x1 = rbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_4a350a1a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = T sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape1fad0729(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [1.1, "def solve_2beef78b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =9999(I, T)\n    x2 = matcher(00000000, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = width(I)\n    x7 = multiply(x6, x5)\n    x8 = multiply(UNITY, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x6, x5)\n    x11 = decrement(x10)\n    x12 = lbind(astuple, x11)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = compose(last, last)\n    x15 = chain(x13, x12, x14)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x4)\n    O = underpaint(x9, x17)\n    return O"], [1.1, "def solve_2e9ecf87(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = decrement(ORIGIN)\n    88777 ulcorner(I)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = fill(I, x1, x3)\n    x5 = shift(x2, UNITY)\n    x6 = underfill(x4, x1, x5)\n    x7 = rbind(shoot, LEFT)\n    x8 = compose(x7, last)\n    x9 = matcher(x8, x8)\n    x10 = sfilter(x3, x9)\n    O = fork(recolor, first, x10)\n    return O"], [1.1, "def solve_eb0ce75a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fork(combine, vfrontier, hfrontier)\n    x2 = compose(x1, size)\n    x3 = fork(difference, x2, toindices)\n    x4 = x2(I)\n    x5 = compose(size, x3)\n    x6 = matcher(x5, ZERO)\n    x7 = fork(both, x3, x6)\n    x8 = sfilter(x4, x7)\n    x9 = matcher(first, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 =0001\n    x13 = merge(x11)\n    x14 = dmirror(x12)\n    x15 = compose(x14, x12)\n    x16 = apply(x15, x13)\n    x17 = dedupe(x16)\n    x18 = order(x17, identity)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, ONE)\n    x23 = combine(x21, x22)\n    x24 = combine(x21, x20)\n    x25 = fork(hfrontier, vfrontier, hfrontier)\n    x26 = mapply(x25, x23)\n    x27 = fill(x19, SIX, x26)\n    O = fill(x27, ONE, x24)\n    return O"], [1.1, "def solve_3f4a996b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, ZERO)\n    x3 = branch(x2, width, height)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(I, x5)\n    x7 =191(x6)\n    x8 =222(x7, x5)\n    x9 = palette(x8)\n    x10 = repeat(x9, ONE)\n    x11 =14filter(x10, x5)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = height(x16)\n    x18 = width(x16)\n    x19 = multiply(x17, x18)\n    x20 = increment(x19)\n    x21 = invert(x20)\n    x22 = shift(x16, x21)\n    x23 = frontiers(I)\n    x24 = toindices(x16)\n    x25 = apply(center, x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = paint(I, x27)\n    return O"], [1.1, "def solve_c0344aae(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, THREE)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = equality(x1, TWO)\n    x8 = branch(x7, cmirror, outbox)\n    x9 = x8(x4)\n    x10 =\n    \"\"\"\n    x1 = branch(x7, hmirror, vmirror)\n    x2 = x1(x4)\n    x3 = equality(x1, ONE)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(x4)\n    x6 = decrement(x1)\n    x7 = hconcat(x5, x6)\n    x8 = branch(x3, vmirror, hmirror)\n    x9 = x8(x4)\n    x10 = decrement(x7)\n    x11 = width(x4)\n    x12 = decrement(x11)\n    x13 = tojvec(x12)\n    x14 =jtoivec(x13)\n    x15 = branch(x11, x14, x9)\n    x16 = shape(x4)\n    x17 = canvas(ZERO, x16)\n    x18 = ofcolor(x4, ZERO)\n    x19 = ofcolor(x4, ONE)\n    x20 = intersection(x18, x19)\n    O = fill(x17, THREE, x20)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_0f4cfdf2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.08173484697705038, "def solve_75c4719f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_b87a61ad(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_49c7395e(I):\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = divide(x23, x17)\n    x25 = increment(x24)\n    x26 = width(I)\n    x27 = divide(x26, x25)\n    x28 = increment(x27)\n    x29 = invert(x25)\n    x30 = increment(x28)\n    x31 = interval(x29, x30, ONE)\n    x32 = invert(x28)\n    x33 = increment(x28)\n    x34 = interval(x32, x33, ONE)\n    x35 = product(x31, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x21)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.08173484697705038, "def solve_50727d36(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_209d6837(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.08173484697705038, "def solve_b7f16dad(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.08173484697705038, "def solve_4a7f53f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_a0707d65(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.08173484697705038, "def solve_3b8f8b0c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_838abe8c(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.08173484697705038, "def solve_a695d08e(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.08173484697705038, "def solve_38db470a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_408af10f(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.08173484697705038, "def solve_0f66d46c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.08173484697705038, "def solve_e47b5d44(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.08173484697705038, "def solve_bd1643c9(I):\n    O = switch(I, THREE, FOUR)\n    return O"], [0.08173484697705038, "def solve_4ce73dec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, THREE, x26)\n    return O"], [0.08173484697705038, "def solve_620ec29e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.08173484697705038, "def solve_e5bbb8c8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_32363757(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.08173484697705038, "def solve_8d54d2e9(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, NEG_ONE, x3)\n    return O"], [0.08173484697705038, "def solve_b624823f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_c8b083f9(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.08173484697705038, "def solve_4b6458aa(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, ZERO, x4)\n    return O"], [0.08173484697705038, "def solve_8fef37f2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.08173484697705038, "def solve_3ed1564f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_b34d094e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_d2252d53(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = compose(x4, center)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x2)\n    x8 = paint(I, x7)\n    O = cover(x8, x3)\n    return O"], [0.08173484697705038, "def solve_9808e6aa(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_1f7e96df(I):\n    x1 = rot270(I)\n    x2 = shoot(ORIGIN, UNITY)\n    O = rot90(x1)\n    return O"], [0.08173484697705038, "def solve_1a629316(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08242550280763847, "def solve_6da06de9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(x2)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = shift(x2, x8)\n    O = paint(I, x9)\n    return O"], [0.08318632736744225, "def solve_5db04b51(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_49d4186d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_f24d0ebe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_02a89004(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_7838e3ab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_e3a4eff9(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_407fc4db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_045d37fe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_be7ae088(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_057f227c(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_35ba5af2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x765 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x765)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_94e474e4(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_ef5ed793(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_149b7eab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_9d1e76b5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08468134728045976, "def solve_0cc05f66(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.09977289344345569, "def solve_d5cfaaa2(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, NINE)\n    x4 = switch(x3, ONE, FOUR)\n    O = switch(x4, EIGHT, NINE)\n    return O"], [0.09977289344345569, "def solve_b495cf3a(I):\n    O = switch(I, EIGHT, TWO)\n    return O"], [0.13468134728045977, "def solve_c2cd1069(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_c4e15809(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vmirror(x1)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, TWO, ZERO)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, TWO, x6)\n    return O"], [0.13468134728045977, "def solve_c4d64c3d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_a599a311(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_d5f1f670(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_4029763f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_b65500cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_d03213e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_d535e67c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_c314a3a7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13811265931525568, "def solve_f996de7b(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.147039853263387, "def solve_b96ae874(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x9, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 =x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.147039853263387, "def solve_04e5e1da(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.1497728934434557, "def solve_e6af0c09(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.168463732206312, "def solve_c13ead6f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.168463732206312, "def solve_609701e2(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_f03e0b76(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_a9428b8f(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.1697728934434557, "def solve_137a5410(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_e7c5a850(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_666e482a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_9ed4e2f5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1736359919976388, "def solve_bd183454(I):\n    x1 = width(I)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x1)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O"], [0.1816725678756399, "def solve_7eb0c9e0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.19326297813860446, "def solve_b29aad50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.19986952115995066, "def solve_1a1ea0b3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.20252763457609518, "def solve_ff5dc2cb(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20977289344345568, "def solve_cbb85e73(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_53ff9664(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, x5, x2)\n    return O"], [0.20977289344345568, "def solve_95198b43(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_f630a98f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.20977289344345568, "def solve_565abbe6(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_005df2b3(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.21379418071318668, "def solve_dbbf0658(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.22284967714703272, "def solve_fdfebfca(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.22746637157822558, "def solve_66c3b834(I):\n    O = vmirror(I)\n    return O"], [0.24440527968330814, "def solve_9d7fd276(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.24440527968330814, "def solve_0dc55135(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.24440527968330814, "def solve_eb96cb35(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.24440527968330814, "def solve_7718d16f(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.2473346261417366, "def solve_ba13400d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.25070353902193987, "def solve_0911b665(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.253858380731812, "def solve_e10b7db7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.2604284799542389, "def solve_85df7c3f(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = switch(x1, ONE, TWO)\n    x4 = apply(x2, x3)\n    x5 = switch(x4, ONE, TWO)\n    O = cmirror(x5)\n    return O"], [0.2730213103674518, "def solve_e6b81b35(I):\n    O = rot180(I)\n    return O"], [0.2730213103674518, "def solve_3c5135af(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = subgrid(x3, x1)\n    return O"], [0.2730877766167264, "def solve_518bcd12(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = rbind(shoot, DOWN)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = fork(combine, x2, x5)\n    x8 = fork(combine, x3, x6)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x1)\n    O = fill(I, ZERO, x10)\n    return O"], [0.2735505434325868, "def solve_d4739b48(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2735505434325868, "def solve_d82cdcae(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2735505434325868, "def solve_d8713635(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2781097602204145, "def solve_a6f5aca8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_a1b13ac0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_0e14f048(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.28257229929506134, "def solve_6f00be31(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28271352439090625, "def solve_716711e4(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_27e71a47(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_57ef74fc(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.28271352439090625, "def solve_04447cf7(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28737105794001067, "def solve_dcaafdad(I):\n    x1 = asobject(I)\n    x2 = flip(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = mostcolor(I)\n    x6 = objects(x4, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x4, TWO, x9)\n    O = replace(x10, NEG_ONE, ZERO)\n    return O"], [0.2912996173225872, "def solve_28a0ef71(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_c5737642(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_05335b56(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_8a9de9bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_ced19998(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_22da10a5(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2957105825141008, "def solve_b8e525cc(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2957105825141008, "def solve_ebf739a0(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2957105825141008, "def solve_a6c35bb6(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.29660861186373566, "def solve_391d07f0(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.3116665576130341, "def solve_5ee29d0d(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = upscale(I, x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = vupscale(I, x7)\n    x9 = asobject(x8)\n    x10 = shift(x9, UNITY)\n    O = paint(I, x10)\n    return O"], [0.31257229929506125, "def solve_e3dea5c4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.31572456964802403, "def solve_7da2e58a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.32305284631073067, "def solve_5f663faf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.326168988805897, "def solve_e8bc789f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.326168988805897, "def solve_419857c4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3315011728051802, "def solve_bbf8da1a(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.3315011728051802, "def solve_d4b2c0f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.34510675848655514, "def solve_2ee1cf76(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.34510675848655514, "def solve_10ddfa34(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.36791347770439387, "def solve_cdfc81a3(I):\n    O = dmirror(I)\n    return O"], [0.3702111384573228, "def solve_00895131(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.3702111384573228, "def solve_093bc945(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.3735879939597472, "def solve_168ea23c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork( add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, FOUR, x29)\n    return O"], [0.3940292269540326, "def solve_84cad5fa(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.39714205122608487, "def solve_56eba404(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [0.3997728934434557, "def solve_69c62704(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.3997728934434557, "def solve_98094b0c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.3997728934434557, "def solve_99e148ab(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_1942f6a5(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_77bd2bbc(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.3997728934434557, "def solve_fe025daf(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.4121180954681841, "def solve_2244a8de(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.4221658498666133, "def solve_e4cf7a5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.4221658498666133, "def solve_0d67ec31(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.422860611640019, "def solve_ff3e3391(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.44421029663584294, "def solve_5e1d6cf1(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_3aa0b20b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_6f6586d3(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_2ffdef67(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_170e6eb2(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_5c6a7255(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_0562b09e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_6bf5ed83(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_2f954550(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_52f7f1d5(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44434496433667936, "def solve_2a96e83a(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.44434496433667936, "def solve_a9fbb9cf(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.4496658498666134, "def solve_c840a2ca(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.4634820464300541, "def solve_d30650af(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.4653084736970792, "def solve_7ba841fd(I):\n    x1 = initset(ORIGIN)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [0.469992675486797, "def solve_7e670e80(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.477399406494354, "def solve_772e7cfa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.477399406494354, "def solve_ae5737d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.5134351221675029, "def solve_644ec17c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 = size(x1)\n    x13 = height(I)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = lbind(shift, x15)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = tojvec(x18)\n    x20 = lbind(shift, x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x18)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = fill(x24, NEG_ONE, x26)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 =difference(x29, x28)\n    O = fill(x27, ZERO, x30)\n    return O"], [0.5235791174015115, "def solve_88492f5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_7862e82c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_eef88931(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_ec8a7ba3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_3ac81dae(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_75253537(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5542587288414367, "def solve_5ba617d4(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_feaf43e7(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_ac04d8c8(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_e11f45de(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_e19a07ba(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_f81b582a(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5641693586048402, "def solve_6b324449(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5641693586048402, "def solve_88c3a234(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5641693586048402, "def solve_e75085ab(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5641693586048402, "def solve_ee8557e0(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5651759379217567, "def solve_d15ffe74(I):\n    O = downscale(I, TWO)\n    return O"], [0.5806814241086746, "def solve_1a349f4f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = size(I)\n    x5 = positive(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = palette(x8)\n    x11 = palette(x9)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = shape(x8)\n    x15 = canvas(x13, x14)\n    x16 = ofcolor(x8, x13)\n    x17 = ofcolor(x9, x13)\n    x18 = intersection(x16, x17)\n    O = fill(x15, TWO, x18)\n    return O"], [0.5806814241086746, "def solve_c17e5a67(I):\n    x1 = height(I)\n    x2 = equality(x1, TWO)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [0.6014849716551933, "def solve_920b716e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6406814241086747, "def solve_4e091057(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6406814241086747, "def solve_04965cd9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.641276367065674, "def solve_a538493d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_ea1caedb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_0c0421f7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_5e93db63(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_274c93cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.6457087986571355, "def solve_d8b2192b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x4, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x5, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.6460408141864922, "def solve_16d230f2(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_1ce68798(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_5924995a(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6460408141864922, "def solve_4d353fd4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7403101885478081, "def solve_193e9875(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = rot90(x30)\n    return O"], [0.7540848163604722, "def solve_820494c1(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7815794829293188, "def solve_4e91ceba(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [0.7915392052312495, "def solve_2d5013b2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_4686be5e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_3fb27ea4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_4dbd82e5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_10fab110(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_194e28d8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_1942f4e0(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_afb6ab3f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_e1570c8c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7920247054497758, "def solve_dc6f3e67(I):\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x2)\n    O = hconcat(x5, x2)\n    return O"], [0.9001514323097631, "def solve_daccb4df(I):\n    x1 = palette(I)\n    x2 = contained(ONE, x1)\n    x3 = contained(TWO, x1)\n    x4 = branch(x2, UNITY, TWO_BY_TWO)\n    x5 = branch(x3, RIGHT, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x8, FIVE, x7)\n    return O"], [0.9081403808721191, "def solve_4a06ad37(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_83c5d3d0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_ed0713cf(I):\n    O = canvas(ZERO, THREE_BY_THREE)\n    return O"], [0.9081403808721191, "def solve_5bdef4a0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_8e6a8b73(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9182807290875006, "def solve_475c4085(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_1fa191e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_1eca1f34(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_38dc835d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_97b398a2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_0c7e9890(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_ac8ccb35(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_5c2057be(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_e224493a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_7c72e916(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_97d7059b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_ace67c88(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_77cff79d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_44436da6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_0c4b7d1f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9183491285403049, "def solve_6b142084(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.9183491285403049, "def solve_c45544a3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_ee5f06e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.923797385620915, "def solve_e247eed7(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = ofcolor(I, x1)\n    x5 = intersection(x3, x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(THREE, x6)\n    O = fill(x7, ZERO, x5)\n    return O"], [0.95, "def solve_594aab39(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.95, "def solve_f000d209(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_34f6200c(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.95, "def solve_ab5717e2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_cd3e914e(I):\n    x1 = astuple(RVERT, dmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_16575065(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fcff4807(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_9135ea94(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_56de6084(I):\n    x1 = I21(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(size, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_7cfb6ffd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a4da1f44(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(E21, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [1.0, "def solve_f37767ee(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = astuple(dmirror, cmirror)\n    x6 = astuple(hmirror, identity)\n    x7 = combine(x5, x6)\n    x8 = chain(initset, ulcorner, lrcorner)\n    x9 = fork(rapply, x8, identity)\n    x10 = compose(first, x9)\n    x11 = rbind(ofcolor, x4)\n    x12 = compose(x11, x10)\n    x13 = fork(connect, x12, toindices)\n    x14 = compose(x13, x10)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x11)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = compose(toivec, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x18)\n    x22 = intersection(x19, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x18)\n    O = paint(x17, x24)\n    return O"], [1.0, "def solve_958af7c2(I):\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = branch(x3, ONE, ZERO_BY_TWO)\n    x5 = ZERO(x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = frontiers(I)\n    x9 = merge(x8)\n    x10 = mostcolor(x9)\n    x11 = ofcolor(I, x10)\n    x12 = x11(x8)\n    x13 = ofcolor(I, x10)\n    x14 = last(x13)\n    x15 = ulcorner(x14)\n    x16 = x11(x14)\n    x17 = shift(x11, x16)\n    x18 = ulcorner(x17)\n    x19 = urcorner(x17)\n    x20 = shoot(x19, UNITY)\n    x21 = shoot(x18, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = lrcorner(x2)\n    x24 = rbind(shoot, x38)\n    x25 = mapply(x24, x22)\n    O = fill(I, x10, x25)\n    return O"], [1.0, "def solve_219380fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x1999)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [1.0, "def solve_5e843db7(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_afa6903a(I):\n    x1 = lbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_8dcdf935(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_e1da81e2(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.0, "def solve_19d06e6e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vline, hline)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = argmax(x13, numcolors)\n    x15 = apply(ulcorner, x13)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x14)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8f60c184(I):\n    x1 = f28(I)\n    x2 = vmirror(x1)\n    O = hconcat(I, x2)\n    return O"], [1.0, "def solve_8dd05531(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_b6a5cd90(I):\n    x1 = lbind(remove, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, palette)\n    x4 = lbind(lbind, shift)\n    x5 = rbind(argmax, numcolors)\n    x6 = lbind( apply, x5)\n    x7 = compose(x6, toindices)\n    x8 = chain(x3, x7, x4)\n    x9 = rbind(contained, x5)\n    x10 = compose(x9, first)\n    x11 = rbind(sfilter, x10)\n    x12 = lbind(rbind, subtract)\n    x13 = chain(x11, x12, RIGHT)\n    x14 = fork(argmin, x8, x13)\n    x15 = compose(x4, x14)\n    x16 = fork(shift, x15, ulcorner)\n    x17 = mapply(x16, x1)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_245e41b6(I):\n    x1 = lbind(apply, maximum)\n    x2 = apply(x1, I)\n    x3 = interval(ZERO, FIVE, ONE)\n    x4 = pair(x2, x3)\n    x5 = rbind(add, THREE)\n    x6 = rbind(subtract, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = lbind(apply, maximum)\n    x10 = chain(x9, asobject, x8)\n    x11 = fork(filter, x10, x6)\n    x12 = compose(size, x11)\n    x13 = argmin(x4, x12)\n    x14 = ofcolor(I, x13)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x14, x17)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_aacf595b(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_6c1ae3d1(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_a85fbe35(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_e5855a4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    O = mfilter(x2, square)\n    return O"], [1.0, "def solve_13e8d3b4(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, THREE)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = combine(x4, x12)\n    x14 = recolor(FIVE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_d59623d9(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_874b43ac(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6278ed61(I):\n    x1 = trim(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(x1)\n    x5 = lefthalf(x4)\n    x6 = numcolors(x5)\n    x7 = equality(x6, ONE)\n    x8 = righthalf(x5)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x3, x8, x10)\n    x12 = extract(x11, last)\n    x13 = first(x12)\n    x14 = trim(x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(I, x16)\n    x18 = toindices(x16)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, TWO)\n    x24 = mapply(first, x23)\n    x25 = paint(x21, x24)\n    x26 = replace(x25, ONE, SIX)\n    x27 = paint(x26, TWO)\n    x28 = rbind(65, TWO)\n    x29 = fgpartition(x27)\n    x30 = merge(x29)\n    x31 = recolor(TWO, x30)\n    x32 = initset(x28)\n    x33 = insert(x27, x32)\n    x34 = insert(x31, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x34)\n    x37 = dmirror(x35)\n    x38 = combine(x34, x37)\n    x39 = paint(x36, x38)\n    O = x35(x39)\n    return O"], [1.0, "def solve_ac45bfaa(I):\n    x1 = subgrid(x1, I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_f9c3d2a9(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_6caeaa0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [1.0, "def solve_bdaa5977(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = leftmost(x8)\n    x10 = rbind(contained, x9)\n    x11 = compose(flip, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x5)\n    x15 = greater(x13, x14)\n    x16 = branch(x15, x12, x13)\n    x17 = contained15(I, x16)\n    x18 = height(x17)\n    x19 = divide(x18, THREE)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = crop(I, ORIGIN, x21)\n    x23 = hupscale(x22, x19)\n    x24 = chain(positive, size, x23)\n    x25 = contained(x17, x24)\n    x26 = flip(x25)\n    x27 = branch(x26, x25, x22)\n    x28 = multiply(x27, FOUR)\n    x29 = add(x28, TWO)\n    x30 = branch(x26, x26, x29)\n    x31 = branch(x25, x27, x30)\n    x32 = multiply(x31, FOUR)\n    x33 = add(x32, TWO)\n    x34 = canvas(x12, x33)\n    x35 = ofcolor(x34, x12)\n    x36 = shift(x35, UNITY)\n    O = fill(x34, EIGHT, x36)\n    return O"], [1.0, "def solve_55862881(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db258008(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = lbind(greater, x9)\n    x11 = compose(x10, height)\n    x12 = rbind(greater, x11)\n    x13 = compose(x12, width)\n    x14 = matcher(x13, ZERO)\n    x15 = fork(either, x14, x15)\n    x16 = rbind(greater, ONE)\n    x17 = compose(x16, height)\n    x18 = matcher(x17, ZERO)\n    x19 = fork(either, x18, x15)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x2, x14)\n    x22 = mfilter(x2, x20)\n    x23 = fill(I, x8, x21)\n    O = fill(x23, x8, x22)\n    return O"], [1.0, "def solve_58f0c133(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4a5d9e27(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = mapply(double, x3)\n    O = fill(I, ONE, x4)\n    return O"], [1.0, "def solve_47806297(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2293b2e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ea5d898d(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(lowermost, x2)\n    x4 = apply(x3, I)\n    x5 = merge(x4)\n    x6 = lbind(colorcount, x5)\n    x7 = compose(toivec, x6)\n    x8 = apply(x7, x5)\n    x9 = argmin(x8, size)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = shoot(x10, DOWN_LEFT)\n    x13 = ofcolor(x11, x9)\n    x14 = normalize(x11)\n    x15 = difference(x13, x14)\n    x16 = toobject(x15, x11)\n    x17 = mostcolor(x16)\n    x18 = colorcount(I, x17)\n    x19 = leftmost(x9)\n    x20 = rbind(astuple, x19)\n    x21 = apply(x20, x15)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x17)\n    x24 = fill(I, ONE, x23)\n    x25 = mapply(x22, x15)\n    O = fill(x24, x9, x25)\n    return O"], [1.0, "def solve_9a3c4275(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_bff64c28(I):\n    x1 = remove(ZERO, x1)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = rbind(rbind,0000000)\n    x5 = lbind(lbind, shoot)\n    x6 = lbind(x5, x4)\n    x7 = lbind(lbind, mapply)\n    x8 = chain(x6, x7, box)\n    x9 = x3(x1)\n    x10 = x8(x9)\n    x11 = fork(recolor, color, x8)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_96adac5a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = order(x8, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = subgrid(x11, x12)\n    x14 = trim(x13)\n    x15 = subgrid(x14, x12)\n    x16 = replace(x15, ONE, TWO)\n    x17 = replace(x16, EIGHT, TWO)\n    x18 = compress(x17)\n    x19 = upscale(x18, THREE)\n    x20 = ofcolor(x19, TWO)\n    x21 = ofcolor(x19, ONE)\n    x22 = rbind(gravitate, x20)\n    x23 = compose(x22, initset)\n    x24 = fork(multiply, identity, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x19)\n    x28 = width(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = multiply(x29, THREE)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x29)\n    x33 = lbind(shift, x12)\n    x34 = mapply(x33, x32)\n    O = paint(x6, x34)\n    return O"], [1.0, "def solve_f002ec71(I):\n    O = branch(x1, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_50c9f3be(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_330ea031(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6de1c2bc(I):\n    x1 = trim(I)\n    x2 = objects(I, T, F, F)\n    x3 = vperiod(x2)\n    x4 = shift(x2, x3)\n    x5 = THREE(x4, NEG_ONE)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = apply(double, x6)\n    x8 = apply(decrement, x7)\n    x9 = papply(astuple, x7, x8)\n    x10 = apply(ulcorner, x8)\n    x11 = mapply(neighbors, x10)\n    x12 = apply(toindices, x8)\n    x13 =lbind(shoot, UP_RIGHT)\n    x14 = mapply(x13, x12)\n    x15 = fill(I, FOUR, x14)\n    x16 = chain(x17, x10, initset)\n    x17 = corners(x4)\n    x18 = insert(x14, x17)\n    x19 = lbind(contained, ZERO)\n    x20 = shoot(x4, x19)\n    x21 = branch(x20, height, width)\n    x22 = x21(I)\n    x23 = ofcolor(x22, ZERO)\n    x24 = asindices(x22)\n    x25 = x24(x24)\n    x26 = x25(x22)\n    x27 = intersection(x23, x26)\n    x28 = fill(x22, ZERO, x27)\n    O = fill(x28, ZERO, x1)\n    return O"], [1.0, "def solve_f2de09ea(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_cba8ff14(I):\n    x1 = height(I)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = subtract(x1, TWO)\n    x5 = divide(x4, THREE)\n    x6 = astuple(x5, x5)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = partition(x7)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = initset(x2)\n    x13 = palette(x3)\n    x14 = palette(x11)\n    x15 = difference(x13, x14)\n    x16 = difference(x15, x12)\n    x17 = first(x16)\n    x18 = interval(ZERO, THREE, ONE)\n    x19 = product(x18, x18)\n    x20 = totuple(x19)\n    x21 = apply(first, x20)\n    x22 = apply(last, x20)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x21)\n    x25 = apply(x23, x22)\n    x26 = papply(add, x24, x21)\n    x27 = papply(add, x25, x22)\n    x28 = papply(astuple, x26, x27)\n    x29 = lbind(shift, x11)\n    x30 = mapply(x29, x28)\n    O = underfill(I, x17, x30)\n    return O"], [1.0, "def solve_ae6b992d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0a3221bb(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, minimum)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_6c03923f(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_ebeec005(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_efca7946(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_1436ab20(I):\n    ONE = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_00132df3(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_71550f23(I):\n    x1 = trim(I)\n    x2 = recolor(281, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [1.0, "def solve_27f020e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = colorfilter(x4, x7)\n    x9 = rbind(toobject, I)\n    x10 = rbind(colorcount, x7)\n    x11 = chain(x10, x9, color)\n    x12 = matcher(x11,12)\n    x13 = subtract(leFT, x12)\n    x14 = astuple(x13, x13)\n    x15 = canvas(x3, x14)\n    x16 = hconcat(x15, x15)\n    x17 = hmirror(x16)\n    O = vconcat(x16, x17)\n    return O"], [1.0, "def solve_daab482e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, first, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_9606ce8a(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_b92f26f0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(x4, x3, x7)\n    return O"], [1.0, "def solve_dd1e6082(I):\n    x1 = vmirror(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = size(x1)\n    x9 = canvas(x7, x8)\n    x10 = asobject(x1)\n    x11 = matcher(first, x7)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = shape(I)\n    x15 = double(x14)\n    x16 = divide(x15, THREE)\n    x17 = multiply(x16, TWO)\n    x18 = canvas(multiply, x17)\n    x19 = bottomhalf(I)\n    x20 = lbind(shift, x19)\n    x21 = objects(x18, T, F, T)\n    x22 = merge(x21)\n    x23 = paint(x18, x22)\n    x24 = astuple(x26, x23)\n    x25 = replace(x24, x7, x5)\n    x26 = combine(x20, x25)\n    x27 = paint(x23, x26)\n    x28 = astuple(x25, x13)\n    x29 = astuple(x28, x22)\n    x30 = initset(x29)\n    x31 = insert(x27, x30)\n    x32 = backdrop(x31)\n    x33 = mapply(x32, x26)\n    O = paint(x22, x33)\n    return O"], [1.0, "def solve_5176d7d0(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorcount, I)\n    x6 = argmin(x4, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = normalize(x3)\n    x10 = lefthalf(x8)\n    x11 = righthalf(x8)\n    x12 = width(x9)\n    x13 = width(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x11)\n    x16 = height(x9)\n    x17 = height(x10)\n    x18 = divide(x16, x17)\n    x19 = astuple(x14, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x9)\n    x25 = mapply(x24, x23)\n    x26 = paint(x8, x25)\n    x27 = subgrid(x3, x26)\n    O = replace(x27, x6, x13)\n    return O"], [1.0, "def solve_fd94cf39(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(Judim, merge, x3)\n    x5 = apply(x4, x7)\n    x6 = merge(x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_1bd727ce(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6682fd6e(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = hperiod(x5)\n    x7 = width(I)\n    x8 = multiply(x7, x6)\n    x9 = multiply(UNITY, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = multiply(x5, x10)\n    x12 = lbind(multiply, x11)\n    x13 = neighbors(ORIGIN)\n    x14 = mapply(neighbors, x13)\n    x15 = lbind(shift, x14)\n    x16 = height(I)\n    x17 = divide(x16, x6)\n    x18 = increment(x17)\n    x19 = width(I)\n    x20 = divide(x19, x6)\n    x21 = increment(x20)\n    x22 = asobject(I)\n    x23 = shape(I)\n    x24 = decrement(x23)\n    x25 = lbind(multiply, x24)\n    x26 = toivec(x25)\n    x27 = apply(x25, x20)\n    x28 = apply(x25, x22)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_c96b310f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = center(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = apply(x11, x5)\n    x13 = argmin(x12, x11)\n    x14 = ofcolor(x13, ZERO)\n    x15 = ofcolor(x13, ONE)\n    x16 = rbind(colorcount, SIX)\n    x17 = argmax(x15, x16)\n    x18 = shape(x13)\n    x19 = canvas(ZERO, x18)\n    x20 = lbind(g16, x13)\n    x21 = lbind(gbind, subtract)\n    x22 = compose(x21, palette)\n    x23 = lbind(recolor, x17)\n    x24 = rbind(ofcolor, x17)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(canvas, NEG_ONE)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x27, x23)\n    x29 = compose(x17, x28)\n    x30 = fork(intersection, x29, identity)\n    x31 = branch(x3, x29, x30)\n    x32 = mapply(x31, x14)\n    x33 = ofcolor(x13, ONE)\n    x34 = shift(x33, x17)\n    O = paint(x19, x34)\n    return O"], [1.0, "def solve_f4625437(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(outbox, outbox, outbox)\n    x5 = mapply(x4, x3)\n    x6 = corners(ORIGIN)\n    x7 = dmirror(I)\n    x8 = insert(UNITY, x7)\n    x9 = insert(SEITY, x8)\n    x10 = increment(x6)\n    x11 = x9(x110)\n    x12 = tojvec(x10)\n    x13 = lbind(shift, x12)\n    x14 = chain(x13, toivec, x8)\n    x15 = mapply(x14, x9)\n    x16 = paint(x1, x15)\n    O = x4(x16)\n    return O"], [1.0, "def solve_cce033ee(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_6c229708(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_f9556571(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_283b96cf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = lbind(repeat, x16)\n    x18 = compose(dmirror, merge)\n    x19 = rbind(rapply, x2)\n    x20 = compose(initset, x17)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(xycolors, THREE)\n    x24 = decrement(x23)\n    x25 = height(x7)\n    x26 = matcher(x24, x25)\n    x27 = compose(flip, x26)\n    x28 = mfilter(x1, x27)\n    O = fill(x7, x4, x28)\n    return O"], [1.0, "def solve_65810784(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = shape(I)\n    x13 = maximum(x12)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = maximum(x5)\n    x17 = lbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x45)\n    x20 = mapply(x19, x18)\n    O = fill(I, x8, x20)\n    return O"], [1.0, "def solve_7808f7a4(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3ee886d6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(I)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_dac20f8c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_1ce6c49f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9ae1084b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1555c480(I):\n    x1 = rbind(shoot, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x2)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_25b632db(I):\n    x1 = width(I)\n    x2 = divide(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = astuple(x4, x4)\n    x6 = crop(I, ORIGIN, x5)\n    x7 = hmirror(x6)\n    x8 = vconcat(x6, x7)\n    x9 = double(x4)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = insert(x9, x10)\n    x12 = outbox(x11)\n    x13 = ulcorner(x12)\n    x14 = subgrid(x12, I)\n    x15 = objects(x14, F, T, T)\n    x16 = matcher(first, ZERO)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = merge(x18)\n    x20 = cover(x14, x19)\n    x21 = lbind(shift, x18)\n    x22 = mapply(x21, x20)\n    O = fill(x20, FOUR, x22)\n    return O"], [1.0, "def solve_764b2bcb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_753ab1a7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(greater, x3)\n    x5 = compose(x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, corners)\n    x8 = mfilter(x6, x7)\n    x9 = mostcolor(I)\n    x10 = fill(I, x9, x8)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, DOWN)\n    x14 = paint(x10, x13)\n    x15 = normalize(x12)\n    x16 = shape(x12)\n    x17 = halve(x16)\n    x18 = invert(x17)\n    x19 = shift(x19, x18)\n    O = paint(x14, x19)\n    return O"], [1.0, "def solve_685e66fa(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shift, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = mostcolor(I)\n    x34 = fill(I, x33, x32)\n    O = fill(x34, ofcolor, x30)\n    return O"], [1.0, "def solve_d18fb2a8(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = rbind(intersection, THREE)\n    x6 = chain(x4, x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = sfilter(x3, x7)\n    x9 = difference(x3, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.0, "def solve_b08cfca4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_87d73330(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_7be97669(I):\n    x1 = rot270(I)\n    x2 = rot90(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(4, x5)\n    return O"], [1.0, "def solve_4cbd252e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_32bd161f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, size)\n    x24 = chain(size, dedupe, size)\n    x25 = compose(x24, x22)\n    x26 = lbind(apply, x11)\n    x27 = chain(ssize, dedupe, x26)\n    x28 = fork(rapply, x27, x22)\n    x29 = compose(first, x28)\n    x30 = compose(x19, x22)\n    x31 = fork(compose, x30, x29)\n    x32 = lbind(sfilter, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(asobject, x33, x33)\n    x35 = mapply(x34, x4)\n    x36 = shift(x35, UNITY)\n    x37 = paint(I, x36)\n    O = rot90(x37)\n    return O"], [1.0, "def solve_6e4c6ee1(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_4746a1ae(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = canvas(x10, x11)\n    return O"], [1.0, "def solve_c854580d(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_ae00ba36(I):\n    x1 = rbind(connect, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_dcf3305a(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b4076f66(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_ab3db620(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(rapply, I)\n    x5 = compose(initset, x4)\n    x6 = chain(first, x4, x5)\n    x7 = compose(x6, last)\n    x8 = lbind(fork, equality)\n    x9 = compose(x8, x7)\n    x10 = lbind(matcher, first)\n    x11 = compose(x10, x7)\n    x12 = fork(sfilter, x7, x11)\n    x13 = compose(asobject, x12)\n    x14 = apply(x13, x2)\n    x15 = difference(x14, x2)\n    x16 = mapply(x12, x15)\n    x17 = fill(I, ONE, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(urcorner, x2)\n    x20 = apply(llcorner, x2)\n    x21 = pair(x19, x20)\n    x22 = fork(add, first, last)\n    x23 = replace(x17, NINE, ZERO)\n    x24 = fork(add, first, last)\n    x25 = fork(add, x22, x24)\n    x26 = lbind(multiply, x17)\n    x27 = apply(x26, x21)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(occurrences, x174)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x25)\n    x33 = fork(paint, identity, x32)\n    x34 = mapply(x33, x27)\n    O = x21(x34)\n    return O"], [1.0, "def solve_0fb82451(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_11ef7160(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_272de656(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_99e5d949(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(feca, x10)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_a9017ece(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = lefthalf(x2)\n    x4 = tophalf(I)\n    x5 = righthalf(x4)\n    x6 = bottomhalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = lefthalf(x8)\n    x10 = index(x3, x5)\n    x11 = branch(x10, asindices, x3)\n    x12 = branch(x10, initset, x5)\n    x13 = add(x12, DOWN)\n    x14 = insert(x13, x11)\n    x15 = index(x6, x1)\n    x16 = lrcorner(x15)\n    x17 = add(x16, UP_RIGHT)\n    x18 = insert(x17, x14)\n    x19 = shift(x18, UNITY)\n    O = paint(x3, x19)\n    return O"], [1.0, "def solve_a0d171f2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x19 = fork(combine, x5, x8)\n    x20 = index(I, x2)\n    x21 = x9(x2)\n    O = canvas(x20, x4)\n    return O"], [1.0, "def solve_6dde8f5c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_f1568d73(I):\n    O = move(I, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_c1557e15(I):\n    x1 = TWO(I)\n    x2 = dmirror(x1)\n    O = papply(pair, x1, x2)\n    return O"], [1.0, "def solve_f25b3266(I):\n    x1 = rbind(ofcolor, TWO)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = lbind(colorcount, I)\n    x16 = argmax(x14, x15)\n    x17 = ofcolor(x11, x16)\n    x18 = subgrid(x17, x11)\n    x19 = mapply(vfrontier, x17)\n    x20 = mapply(hfrontier, x17)\n    x21 = size(x19)\n    x22 = size(x20)\n    x23 = greater(x21, x22)\n    x24 = branch(x23, x8, x19)\n    x25 = branch(x23, x21, x20)\n    x26 = branch(x23, x24, x25)\n    x27 = apply(x26, x24)\n    x28 = mapply(x17, x27)\n    x29 = dmirror(x28)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x20, x30)\n    O = x10(x31)\n    return O"], [1.0, "def solve_4fe42391(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4aa27410(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, height)\n    x3 = subgrid(x2, I)\n    O = trim(x3)\n    return O"], [1.0, "def solve_79bd075b(I):\n    x1 = subgrid(x2, I)\n    x2 = trim(x1)\n    O = replace(x1, ZERO, x2)\n    return O"], [1.0, "def solve_af2bdda3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4b63cf9a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_866194ee(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_123e600d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(chain, initset)\n    x7 = lbind(x6, last)\n    x8 = lbind(rbind, arg)\n    x9 = lbind( lbind, occurrences)\n    x10 = chain(x7, x8, x9)\n    x11 = first(x5)\n    x12 = errmost(x11)\n    x13 = subgrid(x12, I)\n    x14 = matcher(first, x3)\n    x15 = compose(flip, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = apply(x17, x13)\n    x19 = last(x18)\n    x20 = matcher(first, x4)\n    x21 = compose(flip, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = compose(x22, last)\n    x24 = ofcolor(x13, x31)\n    x25 = initset(x24)\n    x26 = matcher(first, x3)\n    x27 = compose(flip, x26)\n    x28 = fork(both, x23, x27)\n    x29 = sfilter(x24, x28)\n    x30 = shift(x29, UNITY)\n    x31 = merge(x4)\n    x32 = cover(x13, x31)\n    x33 = mapply(x32, x30)\n    O = paint(x20, x33)\n    return O"], [1.0, "def solve_38d20a1e(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_55c97ba6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = mfilter(x12, x16)\n    x18 = color(x17)\n    x19 = subgrid(x17, I)\n    x20 = objects(x19, F, T, T)\n    x21 = rbind(colorcount, x10)\n    x22 = valmax(x20, x21)\n    x23 = rbind(colorcount, x10)\n    x24 = matcher(x23, x22)\n    x25 = sfilter(x12, x24)\n    x26 = mapply(dneighbors, x25)\n    x27 = mapply(ineighbors, x25)\n    x28 = toobject(x27, x19)\n    x29 = mostcolor(x28)\n    x30 = colorfilter(x25, x29)\n    x31 = objects(x30, T, T, T)\n    x32 = rbind(adjacent, x17)\n    x33 = mfilter(x31, x32)\n    x34 = replace(x19, x10, x3)\n    O = fill(x34, x39, x33)\n    return O"], [1.0, "def solve_58f94ee5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_daf86606(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(first, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 =rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [1.0, "def solve_22b5a4a9(I):\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, vline)\n    x3 = lbind(contained, TWO)\n    x4 = compose(x3, hline)\n    x5 = fork(manhattan, x2, x4)\n    x6 = compose(d07, x5)\n    x7 = fork(multiply, height, width)\n    x8 = compose(decrement, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x4)\n    x11 = fork(both, x3, x5)\n    x12 = fork(both, x10, x11)\n    x13 = mfilter(x9, x12)\n    O = fill(I, TWO, x13)\n    return O"], [1.0, "def solve_a6a720ab(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = palette(I)\n    x30 = remove(x8, x29)\n    x31 = other(x30, x1)\n    x32 = ofcolor(I, x31)\n    x33 = mapply(x24, x32)\n    x34 = shift(x33, UNITY)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_d2d925f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = divide(x4, x5)\n    x7 = width(x3)\n    x8 = interval(ZERO, x7, FOUR)\n    x9 = mpapply(recolor, x8, x4)\n    x10 = paint(I, x9)\n    x11 = rbind(ofcolor, x3)\n    x12 = compose(normalize, x11)\n    x13 = rbind(shift, x12)\n    x14 = height(x2)\n    x15 = divide(x14, x5)\n    x16 = increment(x15)\n    x17 = width(x2)\n    x18 = divide(x17, x5)\n    x19 = increment(x18)\n    x20 = invert(x16)\n    x21 = increment(x19)\n    x22 = canvas(ZERO, x21)\n    x23 = asindices(x22)\n    x24 = shift(x23, x20)\n    O = fill(x22, EIGHT, x24)\n    return O"], [1.0, "def solve_834078d9(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b41b438c(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = x3(I)\n    x5 = compress(x4)\n    x6 = leastcolor(x5)\n    x7 = mostcolor(x5)\n    x8 = ofcolor(x5, x6)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = mostcolor(x10)\n    x12 = extract(x6, x11)\n    x13 = combine(x10, x12)\n    x14 = fill(x5, x6, x13)\n    x15 = ofcolor(x5, x12)\n    x16 = gravitate(x15, x4)\n    x17 = shift(x15, x16)\n    O = fill(x14, x6, x17)\n    return O"], [1.0, "def solve_1b61193a(I):\n    x1 = shape(I)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = objects(x3, F, F, T)\n    x5 = argmin(x4, size)\n    x6 = cover(I, x5)\n    x7 = toindices(x5)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = fill(x6, TWO, x9)\n    return O"], [1.0, "def solve_9e9cc779(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dc2fa2cf(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_30f9ca0e(I):\n    x1 = asindices(I)\n    x2 = apply(first, x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, x3)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = cover(x6, x4)\n    O = paint(x7, x4)\n    return O"], [1.0, "def solve_5adc63a2(I):\n    x1 = hvsplit(I, TWO)\n    x2 = apply(numcolors, x1)\n    x3 = equality(x2, TWO_BY_TWO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [1.0, "def solve_434bec84(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, size)\n    x4 = shape(x3)\n    x5 = canvas(x1, x4)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = width(x8)\n    x14 = interval(x9, x13, x11)\n    x15 = lbind(astuple, x14)\n    x16 = lbind(subtract, x14)\n    x17 = rbind(subtract, x9)\n    x18 = compose(x15, x17)\n    x19 = product(x13, x10)\n    x20 = sizefilter(x19, ONE)\n    x21 = apply(x18, x20)\n    x22 = rbind(shoot, DOWN)\n    x23 = mapply(x22, x21)\n    x24 = fill(x5, x1, x23)\n    x25 = apply(x19, x101)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = fill(x24, x8, x27)\n    return O"], [1.0, "def solve_225836ea(I):\n    x1 = rbind(difference, toindices)\n    x2 = lbind(apply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(sfilter, first, x3)\n    x5 = chain(size, dedupe, x4)\n    x6 = size(x1)\n    x7 = positive(x6)\n    x8 = branch(x7, x4, x5)\n    x9 = compose(positive, size)\n    x10 = lbind( extantract, x9)\n    x11 = chain(x10, x3, x5)\n    x12 = compose(x7, x11)\n    x13 = fork(multiply, x12, x5)\n    x14 = compose(color, x12)\n    x15 = fork(recolor, x13, x14)\n    x16 = mapply(x15, x1)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_6f160633(I):\n    x1 = matcher(ZERO, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_d322c914(I):\n    x1 = argmax(x1, size)\n    x2 = remove(x1, x1)\n    x3 = merge(x2)\n    x4 = fill(I, SIX, x3)\n    x5 = merge(x2)\n    O = fill(x4, TWO, x5)\n    return O"], [1.0, "def solve_d537d7e7(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, TWO)\n    x3 = matcher(first, THREE)\n    x4 = matcher(first, TWO)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, T)\n    x7 = rbind(x6, F)\n    x8 = lbind(contained, THREE)\n    x9 = compose(x8, palette)\n    x10 = lbind(contained, TWO)\n    x11 = compose(x10, palette)\n    x12 = rbind(sfilter, x9)\n    x13 = compose(x12, x7)\n    x14 = rbind(sfilter, x11)\n    x15 = compose(x14, x7)\n    x16 = rbind(argmax, numcolors)\n    x17 = chain(normalize, x16, x13)\n    x18 = rbind(argmax, numcolors)\n    x19 = compose(x78, x15)\n    x20 = chain(ulcorner, x18, x19)\n    x21 = rbind(shift, NEG_UNITY)\n    x22 = compose(x21, x17)\n    x23 = compose(x21, x15)\n    x24 = fork(combine, x22, x23)\n    x25 = compose(x21, x15)\n    x26 = fork(difference, x24, x25)\n    x27 = fork(recolor, x26, x21)\n    x28 = mapply(x27, x1)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_9f009019(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_f4c1e8ce(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 =hconcat(I, x9)\n    x11 = objects(x10, F, F, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_c866952b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = rbind(multiply, x6)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = pair(x12, x16)\n    x18 = compose(size, dedupe)\n    x19 = apply(x18, x17)\n    x20 = lbind(43, x1)\n    x21 = delta(x2)\n    x22 = apply(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = apply(size, x23)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x16, x26)\n    x28 = lbind(43, x2)\n    x29 = mapply(x28, x27)\n    x30 = mostcolor(I)\n    x31 = fill(I, x30, x29)\n    O = leastcolor(x31)\n    return O"], [1.0, "def solve_a6659948(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_92035cec(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = rbind(subgrid, I)\n    x3 = chain(x2, asobject, x1)\n    x4 = x3(I)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = hfrontier(x5)\n    x8 = astuple(x6, x7)\n    x9 = fill(x4, ZERO, x8)\n    x10 = vfrontier(x6)\n    x11 = intersection(x10, x6)\n    O = fill(x9, ZERO, x11)\n    return O"], [1.0, "def solve_3f5474fd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, branch)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = subgrid(x5, x3)\n    x10 = trim(x9)\n    x11 = replace(x10, x7, x8)\n    x12 = combine(x7, x6)\n    x13 = apply(ulcorner, x12)\n    x14 = normalize(x12)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x13)\n    x17 = fill(x11, x9, x16)\n    O = fill(x17, UNITY, x7)\n    return O"], [1.0, "def solve_6662bf08(I):\n    x1 = ofcolor(I, TWO)\n    x2 = prapply(connect, x1, x1)\n    x3 = lbind(greater, SIX)\n    x4 = compose(x3, size)\n    x5 = fork(either, vline, hline)\n    x6 = fork(both, x4, x5)\n    x7 = matcher(numcolors, SIX)\n    x8 = sfilter(x2, x7)\n    x9 = difference(x2, x8)\n    x10 = apply(normalize, x8)\n    x11 = astuple(x10, identity)\n    x12 = CPUindices(x11)\n    x13 = lbind(matcher, x7)\n    x14 = sfilter(x12, x13)\n    x15 = difference(x12, x14)\n    x16 = lbind(recolor, SIX)\n    x17 = compose(x16, delta)\n    x18 = fork(combine, first, x17)\n    x19 = apply(x18, x15)\n    x20 = fork(paint, identity, x19)\n    x21 = apply(x20, x5)\n    x22 = pair(x19, x21)\n    x23 = mapply(dneighbors, x22)\n    x24 = difference(x23, x22)\n    x25 = mostcolor(I)\n    x26 = ofcolor(I, x25)\n    x27 = x25(x26)\n    O = fill(I, x27, x24)\n    return O"], [1.0, "def solve_6b256f21(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = delta(x4)\n    x6 = center(x5)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(x1, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x5)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x4)\n    x21 = rbind(adjacent, x6)\n    x22 = fork(both, x19, x20)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [1.0, "def solve_f86678ca(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(648, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [1.0, "def solve_8406e629(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_336e4052(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c28a6aaa(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_c3576c6f(I):\n    x1 = cmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_0157e93e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_13faca88(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_4d8ba445(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x30)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [1.0, "def solve_be0967b7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_91c9ee55(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_2e8d9543(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c87a5a8f(I):\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(DOWN, x2)\n    x4 = decrement(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x1)\n    x7 = add(UP, x6)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(ORIGIN, x9)\n    x11 = height(x1)\n    x12 = height(I)\n    x13 = interval(ZERO, x11, ONE)\n    x14 = width(x1)\n    x15 =Nivec(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = apply(tojvec, x13)\n    x18 = apply(palette, x17)\n    x19 = lbind(apply, connect)\n    x20 = compose(x19, mostcolor)\n    x21 = fork(combine, x18, x20)\n    x22 = pair(x13, x10)\n    x23 = sfilter(x22, x21)\n    x24 = apply(x27, x23)\n    x25 = mapply(x5, x24)\n    O = paint(x1, x25)\n    return O"], [1.0, "def solve_3475e8ad(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x300, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_86e01e63(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3aa3fbbb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_259c6e8b(I):\n    x1 = astuple(rot90, rot909)\n    x2 = astuple(rot180, rotofcolor)\n    x3 = combine(x1, x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x3)\n    x6 = ofcolor(I, ONE)\n    x7 = rbind(shoot, DOWN)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, ZERO, x1)\n    x10 = fill(x9, NEG_ONE, x2)\n    x11 = fill(x10, ONE, x8)\n    O = extract(x1, x5)\n    return O"], [1.0, "def solve_e0d3a022(I):\n    x1 = rbind(7777,7777)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(x3)\n    x5 = papply(pair, x3, x4)\n    x6 = merge(x5)\n    O = subgrid(x6, x4)\n    return O"], [1.0, "def solve_bd77c19b(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = subgrid(x3, x2)\n    x6 = palette(x4)\n    x7 = contained(ONE, x6)\n    O = branch(x7, x5, x4)\n    return O"], [1.0, "def solve_42c2be8f(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_9a3f8be7(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_c2c50757(I):\n    O = subgrid(Feca, I)\n    return O"], [1.0, "def solve_7b4997a5(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = colorfilter(x2, x1)\n    x4 = sfilter(x3, hline)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = frontiers(I)\n    x10 = merge(x9)\n    x11 = mostcolor(x10)\n    x12 = shape(x10)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x13, x8)\n    x15 = objects(x14, F, F, T)\n    x16 = argmax(x15, numcolors)\n    x17 = increment(x16)\n    x18 = interval(TWO, x17, ONE)\n    x19 = lbind(shift, x10)\n    x20 = mapply(x19, x18)\n    x21 = paint(x10, x20)\n    x22 = objects(x21, F, F, T)\n    x23 = rbind(contained, x17)\n    x24 = compose(x23, last)\n    x25 = sfilter(x22, x24)\n    x26 = compose(color, first)\n    x27 = fork(recolor, x26, identity)\n    x28 = mapply(x27, x25)\n    O = paint(x21, x28)\n    return O"], [1.0, "def solve_9aac9656(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_a416a9d1(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_e6259a23(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8ce88826(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(x4, x9)\n    x11 = paint(x10, x3)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = color(x13)\n    x15 = remove(x8, x6)\n    x16 = shoot(x15, UNITY)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x12)\n    x19 = rbind(shoot, DOWN)\n    x20 = initset(x13)\n    x21 = rbind(shoot, x20)\n    x22 = mapply(x21, x12)\n    x23 = subgrid(x18, x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x22, x4)\n    x26 = difference(x24, x25)\n    x27 = lrcorner(x26)\n    x28 = invert(x27)\n    x29 = shift(x25, x28)\n    O = fill(x22, x4, x29)\n    return O"], [1.0, "def solve_01d96f58(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8188d358(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_ea3646c0(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP8RIGHT)\n    x4 = rbind(shoot, DOWN8LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_56006d4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_635d88b1(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_df8d8b29(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_830d8a0d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = sfilter(x4, x2)\n    x6 = compose(dmirror, x5)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = double(x8)\n    x10 = apply(x6, x9)\n    x11 = rbind(subgrid, x5)\n    x12 = apply(x11, x10)\n    x13 = cmirror(x12)\n    x14 = hmirror(x13)\n    x15 = astuple(x11, x14)\n    x16 = lbind(et32, FIVE)\n    x17 = compose(x16, x6)\n    x18 = fork(combine, x17, x15)\n    x19 = lbind(lbind, shift)\n    x20 = compose(x19, last)\n    x21 = lbind(rbind, occurrences)\n    x22 = compose(x21, last)\n    x23 = fork(compose, x20, x22)\n    x24 = lbind(lbind, mapply)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, last, x25)\n    x27 = compose(first, x26)\n    x28 = fork(remove, x27, last)\n    x29 = chain(x25, x28, x27)\n    x30 = fork(vline, x29, identity)\n    x31 = chain(decrement, height, x30)\n    x32 = fork(equality, x31, x29)\n    x33 = sfilter(x12, x32)\n    x34 = fork(combine, vfrontier, hfrontier)\n    x35 = compose(x34, x30)\n    x36 = fork(paint, identity, x35)\n    x37 = x32(I)\n    x38 = crop(x37, x32,"], [1.1, "def solve_d8262804(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_3571eb13(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_e6291cad(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = ONE(I)\n    x2 = SEVEN(x1)\n    x3 = apply(normalize, x2)\n    x4 = astuple(TWO, ONE)\n    x5 = repeat(x4, x3)\n    x6 = combine(x5, x7)\n    x7 = rbind(multiply, THREE)\n    x8 = apply(x7, x6)\n    x9 = I(x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = subtract(x11, ONE)\n    x13 = astuple(THREE, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = hconcat(x14, x14)\n    x16 = hsplit(x15, TWO)\n    x17 = branch(x16, x77, x25ff)\n    x18 = x17(x16)\n    x19 = crop(x18, ORIGIN, x1)\n    x20 = asobject(x19)\n    x21 = x20(x8)\n    x22 = vmirror(x21)\n    x23 = mostcolor(I)\n    x24 = objects(x18, T, F, F)\n    x25 = sizefilter(x24, ONE)\n    x26 = difference(x24, x25)\n    x27 =rollc(x26)\n    x28 = paint(x15, x27)\n    x29 =772indices(x28)\n    x30 = fgpartition(x18)\n    x31 = sizefilter(x30, ONE)\n    x32 = lbind(intersection, x39)\n    x33 = chain(positive, size, x32)\n    x34 = lbind(shift, x29)\n    x35 = rbind(multiply, UNITY)\n    x36 = chain(x35, x34, x31)\n    x37 = lbind(shift, x29)\n    x38 = rbind(multiply, NEG_UNITY)\n    x39 = chain(x37, x38, x31)"], [1.1, "def solve_7bfcf3c9(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(I)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval("], [1.1, "def solve_2c8b58e6(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, frontiers, T)\n    x4 = canvas(ZERO, THREE_BY_THREE)\n    x5 = color(x4)\n    x6 = toivec(x1)\n    x7 = divide(x6, x2)\n    x8 = tojvec(x7)\n    x9 = width(I)\n    x10 = lefthalf(I)\n    x11 = righthalf(I)\n    x12 = equality(x10, x11)\n    x13 = hsplit(x8, x12)\n    x14 = righthalf(I)\n    x15 = palette(x14)\n    x16 = other(x15, x5)\n    x17 = palette(x13)\n    x18 = other(x17, x5)\n    x19 =168\n    x20 =949ighthalf(x13)\n    x21 = righthalf(x13)\n    x22 = vmirror(x21)\n    x23 = solve(x19, x22)\n    x24 = ofcolor(x14, x16)\n    x25 = ofcolor(x13, x18)\n    x26 = insert(x24, x25)\n    x27 = argmin(x26, last)\n    x28 = remove(x27, x26)\n    x29 = remove(x28, x26)\n    x30 = contained(x27, x29)\n    x31 = branch(x30, x22, x25)\n    x32 = 205(x31)\n    x33 = ofcolor(x14, x16)\n    x34 = normalize(x33)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x35, x16)\n    x37 = asindices(x35)\n    x38 = outbox(x37)\n    x39 = backdrop(x38)\n    x40 = branch(x33, x37, x39)\n    x41 = rbind(contained, x37)\n    x42 = compose(x41,"], [1.1, "def solve_2cab3677(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind( sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, F)\n    x10 = rbind(x9, F)\n    x11 = rbind(x10, T)\n    x12 = rbind(argmin, x11)\n    x13 = compose(x12, toindices)\n    x14 = fork(upscale, identity, x13)\n    x15 = compose(x14, rot90)\n    x16 = power(x15, TWO)\n    x17 = x16(I)\n    x18 = rot90(x17)\n    x19 = shape(x18)\n    x20 = canvas(x4, x19)\n    x21 = hconcat(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = rbind(toobject, x21)\n    x24 = compose(x23, trim)\n    x25 = apply(x24, x22)\n    x26 = rbind(colorcount, x4)\n    x27 = valmax(x25, x26)\n    x28 = rbind(colorcount, x4)\n    x29 = matcher(x28, x27)\n    x30 = sfilter(x28, x29)\n    x31 = chain(normalize, toindices, x11)\n    x32 = lbind(mapply, x31)\n    x33 = lbind(ofcolor, x81)\n    x34 = compose(x33, x11)\n    x35 = ofcolor(x18, x4)\n    x36 = difference(x35, x34)\n    x37 =0a15(x36)\n    x38 =446(499883, x37)\n    x39 = rbind(90, x38)"], [1.1, "def solve_bd805858(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_540ce26e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = toindices(x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x2, x7)\n    x9 = lbind(recolor, x1)\n    x10 = rbind(shoot, x8)\n    x11 = chain(x9, x10, initset)\n    x12 = lbind(remove, x8)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(x13, first)\n    x15 = power(last, TWO)\n    x16 = fork(combine, x14, x15)\n    x17 =92max(x6, x16)\n    x18 = astuple(TEN, TEN)\n    x19 = rbind(contained, x18)\n    x20 = chain(flip, x19, ulcorner)\n    x21 = fork(add, x20, x14)\n    x22 = multiply(EIGHT, UNITY)\n    x23 = add(x22, NEG_UNITY)\n    x24 = multiply(x23, UNITY)\n    x25 = neighbors(ORIGIN)\n    x26 = insert(ORIGIN, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = astuple(x28, x26)\n    x30 = repeat(x29, ONE)\n    x31 = combine(x30, x25)\n    x32 = combine(x28, x30)\n    x33 =51925862893(x32, x24)\n    x34 =556(shoot, x3333)\n    x35 = combine(x33, x34)\n    x36 = astuple(x26, xincrement)\n    x37 =226(shoot, x36)\n    x38 = combine(x35, x37)\n    x39 = combine(x31,"], [1.1, "def solve_e02ef634(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = rightmost(x26)\n    x28 = astuple(x25, x27)\n    x29 = ofcolor(x13, x22)\n    x30 = leftmost(x29)\n    x31 = invert(x30)\n    x32 = apply(uppermost, x31)\n    x33 = order(x32, identity)\n    x34 = astuple(x10, x11)\n    x35 = lbind(add, x34)\n    x36 =100(x17)\n    x37 = rbind(add, x36)\n    x38 = chain(x37, x35, x36)\n    x39 = lbind(apply, last)\n    x40 = rbind(sfilter, x38)\n    x41 = chain(x39, x40, x33)\n    x42 = lbind(lbind, shift)\n    "], [1.1, "def solve_c87c69c3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_1b4bb068(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = difference(x1, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorcount(I, x5)\n    x7 = backdrop(x2)\n    x8 = insert(x7, x4)\n    x9 = insert(x6, x8)\n    x10 = branch(x6, x8, x9)\n    x11 =1222(x10)\n    x12 = initset(x11)\n    x13 = complexity(x12, x6)\n    x14 = backdrop(x13)\n    x15 = subgrid(x14, I)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, x5)\n    x18 = backdrop(x17)\n    x19 = subgrid(x18, x15)\n    x20 = height(x19)\n    x21 = subtract(x20, TWO)\n    x22 = astuple(ONE, x21)\n    x23 = colorfilter(x17, x5)\n    x24 = crop(x19, ORIGIN, x22)\n    x25 = hmirror(x24)\n    x26 = replace(x25, x4, x5)\n    x27 = replace(x26, x7, x6)\n    x28 =07(x4)\n    x29 = leftmost(x28)\n    x30 = lbind(contained, x29)\n    x31 = compose(flip, x30)\n    x32 =733(x29, x23)\n    x33 = rbind(contained, x32)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x19, x34)\n    x36 = merge(x35)\n    x37 = palette(x36)\n    x38 = lbind(colorcount, x36)\n    x39 = compose(x38, first)\n    x40 = colorfilter(x1, x5)\n    x41 ="], [1.1, "def solve_522c24b5(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = rbind(argmin, DOWN)\n    x2 = compose(first, x1)\n    x3 = fork(subtract, last, x2)\n    x4 = x3(I)\n    x5 = double(x4)\n    x6 = interval(ZERO, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = astuple(ccement, NEG_TWO)\n    x9 = lbind(shift, x8)\n    x10 = rbind(multiply, x5)\n    x11 = compose(x10, x9)\n    x12 = lbind(shift, x13)\n    x13 = rbind(multiply, x4)\n    x14 = compose(x12, x13)\n    x15 = fork(astuple, x11, x14)\n    x16 = lbind(apply, uppermost)\n    x17 = chain(maximum, x16, x15)\n    x18 = lbind(colorfilter, x7)\n    x19 = chain(x18, color, x7)\n    x20 = fork(sfilter, x17, x19)\n    x21 = lbind(mapply, x20)\n    x22 = rbind(occurrences, x4)\n    x23 = compose(x21, x22)\n    x24 = fork(paint, identity, x23)\n    x25 = chain(x20, x21, x24)\n    x26 = lbind(mapply, vfrontier)\n    x27 = chain(x26, x25, x27)\n    x28 = lbind(paint, x2)\n    x29 = chain(x27, x28, x27)\n    x30 = compose(x24, x27)\n    x31 = fork(mapply, x30, x29)\n    x32 = fork(paint, identity, x31)\n    x33 = rbind(apply, x32149)\n    x34 = chain(lowermost, x33, x27)\n    x35 = fork(recolor, x24, x34)\n    x36 = astuple(ONE, THREE"], [1.1, "def solve_3fc9866c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = matcher( identity, ZERO)\n    x2 = toindices(x1)\n    x3 = rbind(20000, x2)\n    x4 = toindices(x1)\n    x5 = rbind(contained, x4)\n    x6 = lbind(extract, x5)\n    x7 = compose(x6, initset)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(positive, size, x8)\n    x10 = size(x2)\n    x11 = power(x9, x10)\n    x12 = chain(size, x5, x11)\n    x13 = palette(I)\n    x14 = lbind(sfilter, x13)\n    x15 = lbind(matcher, x7)\n    x16 = compose(x14, x15)\n    x17 = chain(x39, x14, x16)\n    x18 = fork(difference, identity, x17)\n    x19 = lbind(recolor, EIGHT)\n    x20 = compose(x19, x18)\n    x21 = fork(paint, identity, x20)\n    x22 = compose(center, first)\n    x23 = fork(add, x22, x202)\n    x24 = chain(toobject, x21, x23)\n    x25 = colorfilter(x7, ZERO)\n    x26 = chain(first, x24, x25)\n    x27 = fork( UnknownITY, x26, x24)\n    x28 = fork(insert, x27, x19)\n    x29 = fork(insert, x28, x79)\n    x30 = fork(insert, x29, x21)\n    x31 = fork(remove, x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = fork(add, x22, x12)\n    x34 = fork(add, x33, x32)\n    x35 = fork(add, x34, x29)\n    x36 = fork(connect, x22, x25)\n    x37 = fork(connect, x26,"], [1.1, "def solve_f96b4cba(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_35392ba3(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_7c66d00b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = normalize(x11)\n    x13 = leftmost(x12)\n    x14 = mostcolor(I)\n    x15 = uppermost(x12)\n    x16 = leftmost(x11)\n    x17 = astuple(x13, x14)\n    x18 = ulcorner(x12)\n    x19 = increment(x18)\n    x20 = lbind(subtract, x19)\n    x21 = rbind(toobject, I)\n    x22 = compose(x20, x21)\n    x23 = lbind(shift, x8)\n    x24 = rbind(multiply, x19)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(shift, x8)\n    x27 = rbind(multiply, x16)\n    x28 = chain(x26, x27, x22)\n    x29 = rbind(multiply, x15)\n    x30 = compose(x28, x29)\n    x31 = fork(add, x25, x30)\n    x32 = compose(x31, x21)\n    x33 = fork(combine, x28, x32)\n    x34 = fork(mapply, x33, x29)\n    x35 = fork(paint, identity, x34)\n    x36 = fork(equality, identity, dmirror)\n    x37 =495(x36)\n    x38 = mfilter(x37, vline)\n    x39 = paint(x35, x38)\n    x40 = branch"], [1.1, "def solve_ce544482(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_538f0956(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, FIVE)\n    x10 = rbind(adjacent, x4)\n    x11 = sfilter(x9, x10)\n    x12 = difference(x9, x11)\n    x13 = merge(x12)\n    x14 = cover(x7, x13)\n    x15 = shoot(ORIGIN, UNITY)\n    x16 = shoot(x15, RIGHT)\n    x17 = shoot(x16, LEFT)\n    x18 = shoot(x17, UP_RIGHT)\n    x19 = shoot(x18, LEFT)\n    x20 = combine(x15, x19)\n    x21 = rbind(subgrid, x20)\n    x22 = chain(palette, x21, rot90)\n    x23 = rbind(subgrid, x20)\n    x24 = compose(I, x23)\n    x25 = chain(palette, x21, x24)\n    x26 = rbind(ofcolor, FIVE)\n    x27 = compose(x26, x25)\n    x28 = chain(x17, x24, x27)\n    x29 = rbind(colorcount, TWO)\n    x30 = multiply(x29, x9)\n    x31 = power(x28, x30)\n    x32 = x31(x16)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = palette(x33)\n    x36 = other(x35, FOUR)\n    x37 = ofcolor(x33, x106)\n    x38 = ofcolor(x33, xr)\n    x39 = intersection(x37, x38)\n    x"], [1.1, "def solve_9356794d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_f3214fc2(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_23e42021(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = rbind(multiply, x4)\n    x6 = chain(toindices, x5, x6)\n    x7 = matcher(x6, ZERO)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    x12 = fill(I, x1, x11)\n    x13 = argmax(x9, width)\n    x14 = rbind(multiply, x4)\n    x15 = compose(x14, width)\n    x16 = argmax(x13, x15)\n    x17 = center(x16)\n    x18 = initset(x17)\n    x19 = cover(I, x18)\n    x20 = toindices(x16)\n    x21 = inbox(x16)\n    x22 = center(x21)\n    x23 = initset(x22)\n    x24 = fill(x19, x1, x23)\n    x25 = toobject(x24, x25)\n    x26 = objects(x28, T, F, T)\n    x27 = colorfilter(x26, x1)\n    x28 = rbind(toobject, x25)\n    x29 = chain(x28, x27, neighbors)\n    x30 = mapply(x29, x27)\n    x31 = astuple(x15, x14)\n    x32 = shift(x30, x31)\n    x33 = paint(x12, x32)\n    x34 = toindices(x16)\n    x35 = fork(insert, ulcorner, lrcorner)\n    x36 = fork(shift, identity, x35)\n    x37 = apply(x36, x34)\n    x38 = rbind(contained, x37)\n    x39 = rbind(sfilter,"], [1.1, "def solve_43606b81(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot180(I)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(positive, size)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(x2, x4, frontiers)\n    x6 = chain(size, dedupe, first)\n    x7 = chain(size, dedupe, last)\n    x8 = fork(greater, x6, x7)\n    x9 = fork(both, x5, x8)\n    x10 = lefthalf(x1)\n    x11 = righthalf(x1)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x12, x9)\n    x14 = power(x13, TWO)\n    x15 = branch(x10, x14, x4)\n    x16 = x15(x1)\n    x17 = x15(x2)\n    x18 = toindices(x16)\n    x19 = toindices(x17)\n    x20 = hfrontier(x18)\n    x21 = fill(x16, ZERO, x20)\n    x22 = fill(x21, x19, x20)\n    x23 = dedicated01945(x17)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, x25)\n    x26 = x25(x17)\n    x27 = palette(x26)\n    x28 = remove(ZERO, x27)\n    x29 = lbind(colorcount, x16)\n    x30 = argmax(x28, x29)\n    x31 = rbind(contained, x30)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(size, x33, first)\n    x35 = matcher(x34, ONE)\n    x36 = compose(size, last)\n    x37 = matcher(x36, ONE)\n    x38 = fork(either, x35, x37)\n    x39 = sfilter(x1, x38)\n"], [1.1, "def solve_9b6747d7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_aaf28fbe(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = upscale(x4, x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    x6 = toindices(x5)\n    x7 =lrcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(I, ZERO, x8)\n    x10 = asindices(x9)\n    x11 = to corners(x10)\n    x12 = toobject(x11, I)\n    x13 = asindices(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x15, x5)\n    x17 = fill(x9, x13, x16)\n    x18 =1988indices(x16)\n    x19 = lbind(adjacent, x18)\n    x20 = rbind(toobject, x15)\n    x21 = chain(x19, backdrop, x20)\n    x22 = compose(x5, x21)\n    x23 = fork(both, x21, x22)\n    x24 = rbind(numcolors, ONE)\n    x25 = compose(x24, decrement)\n    x26 = matcher(x25, ONE)\n    x27 = fork(both, x26, x23)\n    x28 = rbind(multiply, x22)\n    x29 = compose(x28, asindices)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x16, x30)\n    x32 = rbind(multiply, THREE)\n    x33 = compose(x32, x31)\n    x34 = fork(equality, identity, x33)\n    x35 = sfilter(x31, x34)\n    x36 =1999(x35)\n    x37 =0900(x16, x36)\n    x38 = paint(x37, x37)\n    x39 = fill(x38, x15"], [1.1, "def solve_f9f7d176(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_e3f7bbb4(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_c8b25e25(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_832d2894(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(normalize, x5)\n    x7 = chain(x4, x6, dmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(invert, x8)\n    x10 = power(x9, FOUR)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(initset, x11)\n    x13 = chain( begins, x11, x12)\n    x14 = rbind(branch, identity)\n    x15 = rbind(x14, x13)\n    x16 = chain(size, x15, x13)\n    x17 = partition(I)\n    x18 = fork(equality, x16, x17)\n    x19 = fork(both, x18, ONE)\n    x20 = extract(x19, x19)\n    x21 = x20(x20)\n    x22 = first(x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x17, x23)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x22)\n    x28 = width(x27)\n    x29 = lbind(repeat, x28)\n    x30 = chain(dmirror, merge, x29)\n    x31 = x30(x22)\n    x32 = frontiers(x31)\n    x33 = merge(x32)\n    x34 = palette(x33)\n    x35 = first(x34)\n    x36 = last(x34)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x37)\n    x39 = add(x38, x33)\n    x40 = shift(x23, x39"], [1.1, "def solve_fbfa9d9a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_03e5a5bd(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4f08e9de(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 =77fd(x1, toindices)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, identity,gde280)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = rbind(manhattan, x21)\n    x23 = compose(x22, initset)\n    x24 = argmin(x15, x23)\n    x25 = connect(x24, x16)\n    x26 = width(x19)\n    x27 = insert(x26, x15)\n    x28 = DOWN)\n    x29 = insert(x28, x15)\n    x30 = organizedmirror(x29)\n    x31 = width(x19)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = matcher(first, x10)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, toindices)\n    x36 = lbind(shift, x27)\n    x37 = rbind(multiply, x30)\n    x38 = chain(x35, x36, x37)\n    x39 = lbind(shift, x27)\n    x40 = rbind(multiply, x30)\n    x41"], [1.1, "def solve_a43be955(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = valmax(x5, width)\n    x7 = halve(x6)\n    x8 = objects(I, T, F, T)\n    x9 = lbind(colorfilter, x8)\n    x10 = rbind(argmax, x7)\n    x11 = lbind(toobject, x10)\n    x12 = compose(x11, x9)\n    x13 =55412(x2)\n    x14 = rbind(colorcount, x3)\n    x15 = lbind(toobject, x9)\n    x16 = compose(x14, x15)\n    x17 = x16(x2)\n    x18 = sfilter(x9, x17)\n    x19 =252indices(x18)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, last)\n    x22 = sfilter(x13, x21)\n    x23 = rbind(colorcount, x3)\n    x24 = valmax(x22, x23)\n    x25 = matcher(x21, x24)\n    x26 = sfilter(x18, x25)\n    x27 =27(x26)\n    x28 =88bind(colorcount, x3)\n    x29 = valmax(x28, x28)\n    x30 = matcher(x21, x29)\n    x31 = sfilter(x27, x30)\n    x32 =27(x31)\n    x33 = first(x32)\n    x34 = sfilter(x31, x33)\n    x35 = rbind(contained, x41)\n    x36 = compose(x34, last)\n    x37 = sfilter(x33, x36)\n    x38 =27(x37)\n    x39 = ofcolor(I, x3)\n    x40 = branch(x39, x38, x37)\n    O ="], [1.1, "def solve_085159d3(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_91d37929(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41"], [1.1, "def solve_2711256d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(equality, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(pair, frontiers, merge)\n    x5 = mfilter(x3, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(multiply, height, width)\n    x8 = size(x6)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x5, x9)\n    x11 = sfilter(x10, x8)\n    x12 = lbind(apply, first)\n    x13 = lbind(ofcolor, x1)\n    x14 = chain(x12, x13, x11)\n    x15 = rbind(contained, x15)\n    x16 = compose(x15, last)\n    x17 = sfilter(x11, x16)\n    x18 = lbind(colorfilter, x5)\n    x19 = compose(x18, first)\n    x20 = chain(inline, x17, x19)\n    x21 = fork(both, x16, x20)\n    x22 = fork(either, x21, first)\n    x23 = toindices(x5)\n    x24 = rbind(sfilter, x22)\n    x25 = compose(x24, x20)\n    x26 = lbind(recolor, FIVE)\n    x27 = compose(x26, x22)\n    x28 = chain(xto, x27, x29)\n    x29 = fork(combine, x25, x28)\n    x30 = fork(paint, identity, x29)\n    x31 = apply(x30, x11)\n    x32 = ofcolor(x31, FIVE)\n    x33 = compose(x32, x20)\n    x34 = argmax(x34, x33)\n    x35 = remove(x34, x34)\n    x36 = apply(center, x35)\n    x37 = normalize(x34)\n    x38 = shift(x37, x34"], [1.1, "def solve_87f86e83(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1edfb5b0(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(toindices, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizafilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = prapply(shift, x20, x2)\n    x22 = mapply(x21, x21)\n    x23 = combine(x21, x22)\n    x24 = fill(x19, THREE, x23)\n    x25 = palette(x24)\n    x26 =77fd23(x25)\n    x27 = asindices(x24)\n    x28 = ofcolor(x24, x27)\n    x29 = shift(x24, x28)\n    x30 = ofcolor(x24, x6)\n    x31 = intersection(x29, x30)\n    x32 = fill(x24, THREE, x31)\n    x33 = rot90(x32)\n    x34 = ofcolor(x33, x6)\n    x35 = shift(x34, x28)\n    x36 = ofcolor(x33, x6)\n    x37 = intersection(x39, x36)\n    x38 = fill(x33, THREE, x37)\n    x39 = fill(x"], [1.1, "def solve_956ab80d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(51,2)\n    x3 = lbind(9565, ZERO)\n    x4 = compose(x2, x3)\n    x5 = fork(add, height, x4)\n    x6 = compose(x1, width)\n    x7 = fork(equality, size, x5)\n    x8 = fork( both, x7, x6)\n    x9 = extract(x1, x8)\n    x10 = last(x9)\n    x11 = palette(I)\n    x12 = remove(x10, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = size(x15)\n    x17 = increment(x16)\n    x18 = outbox(x15)\n    x19 = rbind(toobject, I)\n    x20 = totuple(x18)\n    x21 = apply(x19, x20)\n    x22 = ofcolor(I, x14)\n    x23 = colorcount(I, x14)\n    x24 = increment(x23)\n    x25 = frontiers(I)\n    x26 = colorfilter(x25, x14)\n    x27 = difference(x25, x26)\n    x28 = size(x27)\n    x29 = increment(x28)\n    x30 = rbind(multiply, x29)\n    x31 = apply(x30, x27)\n    x32 = asindices(I)\n    x33 = of corners(x32)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = ofcolor(I, x15)\n    x37 = lbind(shift, x36)\n    x38 = mapply(x37, x31)\n    x39 = rbind(990, x38)\n    x40 = apply(x39, x33)\n    x41 = ofcolor(I, x18)\n    x42 = rbind(inter"], [1.1, "def solve_601cf0b0(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, T, T)\n    x10 = argmin(x9, numcolors)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = increment(x12)\n    x14 = increment(x13)\n    x15 = toindices(x4)\n    x16 = increment(x15)\n    x17 = increment(x16)\n    x18 = astuple(x12, x17)\n    x19 = rbind(multiply, x18)\n    x20 = toindices(x11)\n    x21 = increment(x20)\n    x22 = increment(x21)\n    x23 = fork(multiply, x18, x22)\n    x24 = x23(x11)\n    x25 = palette(I)\n    x26 = other(x25, x10)\n    x27 = palette(I)\n    x28 = remove(x13, x27)\n    x29 = rbind(positive, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = fgpartition(x18)\n    x32 = merge(x31)\n    x33 = apply(x32, x32)\n    x34 = product(x30, x33)\n    x35 = fork(connect, first, last)\n    x36 = apply(x35, x34)\n    x37 = fork(subtract, first, last)\n    x38 =94872232\n    x39 = fork(subtract, x37, x38)\n    x40 = fork(equality, x36, x39)\n    x41 = mfilter(x34, x40)\n    x42 = size(x41)\n    x43 ="], [1.1, "def solve_e7775ead(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = branch(x1, trim, tophalf)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = vmirror(x3)\n    x5 = objects(x4, T, F, F)\n    x6 = order(x5, uppermost)\n    x7 = compose(color, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    x10 = size(x1)\n    x11 = decrement(x10)\n    x12 = height(x2)\n    x13 = astuple(x12, x11)\n    x14 = crop(x2, ORIGIN, x13)\n    x15 = leastcolor(x14)\n    x16 = canvas(x15, x14)\n    x17 = hconcat(x16, x16)\n    x18 = compose(first, last)\n    x19 = compose(x18, first)\n    x20 = fork(subtract, x19, first)\n    x21 = compose(first, last)\n    x22 = compose(x21, first)\n    x23 = fork(subtract, x22, last)\n    x24 = fork(astuple, x23, x20)\n    x25 = compose(decrement, x24)\n    x26 = normalize(x2)\n    x27 = fork(add, first, x25)\n    x28 = toindices(x26)\n    x29 = compose(x27, x28)\n    x30 = fork(connect, x29, x21)\n    x31 = apply(x30, x8)\n    x32 = lbind(greater, x13)\n    x33 = compose(x32, first)\n    x34 = sfilter(x31, x33)\n    x35 = difference(x19, x34)\n    x36 = lbind(compose, center)\n    x37 = lbind(x36, positive)\n    x38 = chain(x39, x37, x29)\n    x39 =sfilter(x35, x38)\n    "], [1.1, "def solve_7965aa7b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = canvas(ZERO, x27)\n    x29 = astuple(x24, x18)\n    x30 = initset(x29)\n    x31 = insert(UNITY, x30)\n    x32 = insert(x28, x31)\n    x33 = width(I)\n    x34 = decrement(x33)\n    x35 = tojvec(x34)\n    x36 = height(I)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = initset(x38)\n    x40 = insert(x35, x39)\n    x41 = insert(x36, x40)\n    x42 = width(I)\n    x43 = decrement(x42)\n    x44 = tojvec(x43)\n    "], [1.1, "def solve_df57a124(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = matcher(color, x3)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = merge(x12)\n    x14 = palette(x13)\n    x15 = matcher(identity, x3)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x14, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = totuple(x20)\n    x22 = apply(color, x21)\n    x23 = lbind(sfilter, x12)\n    x24 = lbind(matcher, identity)\n    x25 = chain(size, x23, x24)\n    x26 = compose(x25, vline)\n    x27 = chain(sfilter, x16, x26)\n    x28 = lbind(colorcount, x13)\n    x29 = fork(upscale, x28, x27)\n    x30 = decrement(x4)\n    x31 =1999(x30)\n    x32 = rbind(subtract, x31)\n    x33 = chain(x32, x29, first)\n    x34 = fork(apply, x33, x33)\n    x35 =88(x22)\n    x36 = x34(x35)\n    x37 = ofcolor(x36, x3)\n    x38 = rbind(adjacent, x37)\n    x39 = compose(x38, last)\n    x40 = extract(x41, x39)\n    x41 = initset("], [1.1, "def solve_8a907dfc(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_c6ba9eff(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(size, dedupe, first)\n    x5 = matcher(x4, ONE)\n    x6 = compose(first, cmirror)\n    x7 = chain(size, dedupe, x6)\n    x8 = matcher(x7, ONE)\n    x9 = fork(both, x5, x8)\n    x10 = rbind(rapply, I)\n    x11 = compose(initset, first)\n    x12 = chain(first, x10, x11)\n    x13 = compose(x12, x5)\n    x14 = extract(x3, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = trim(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = asobject(x20)\n    x22 = mostcolor(I)\n    x23 = matcher(first, x22)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x21, x24)\n    x26 = partition(x25)\n    x27 = fork(multiply, height, width)\n    x28 = fork(equality, size, x27)\n    x29 = sfilter(x26, x28)\n    x30 = argmax(x29, x27)\n    x31 = difference(x22, x30)\n    x32 = asobject(x31)\n    x33 = matcher(first, x22)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = sizefilter(x31, ONE)\n    x37 = argmax(x36, size)\n    x38 = remove(x37, x36)\n    x39 = merge(x38)\n    x40 = palette"], [1.1, "def solve_fa02ba69(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_afcf20be(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rbind(ofcolor, ONE)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_1a6acc1c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = height(I)\n    x7 = width(I)\n    x8 = add(x6, x7)\n    x9 = add(x5, x8)\n    x10 = I(I, x4)\n    x11 = I(I, x7)\n    x12 = width(I)\n    x13 = increment(x12)\n    x14 = divide(x13, x11)\n    x15 = height(I)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = divide(x17, x11)\n    x19 = width(I)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(multiply, x14)\n    x23 = apply(x22, x21)\n    x24 = lbind(shift, x22)\n    x25 = mapply(x24, x23)\n    x26 = fill(I, FOUR, x25)\n    x27 = canvas(ZERO, x8)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 = toobject(x29, I)\n    x31 = mostcolor(x30)\n    x32 = occurrences(x26, x31)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, identity, dmirror)\n    x36 = x35(x16)\n    x37 = equality(x36, ONE)\n    x38 = branch(x37, identity, vmirror)\n    x39 = x38(x51)\n    x40 = downscale(x39, x3)\n    x41 = ofcolor(x40, x31)\n    x42 =91000(x41, asobject)\n    x43 = ofcolor(x"], [1.1, "def solve_d597c11f(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_f1a0a95b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_3b3e2d03(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(uppermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = compose(x4, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x3, x8)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(NEG_ONE, x13)\n    x15 = invert(x13)\n    x16 = astuple(NEG_ONE, x15)\n    x17 = double(x13)\n    x18 = astuple(NEG_TWO, x17)\n    x19 = double(x13)\n    x20 = invert(x19)\n    x21 = astuple(NEG_TWO, x20)\n    x22 = multiply(THREE, TEN)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x14)\n    x25 = apply(x24, x23)\n    x26 = lbind(multiply, x16)\n    x27 = apply(x26, x23)\n    x28 = lbind(multiply, x18)\n    x29 = apply(x28, x23)\n    x30 = lbind(multiply, x21)\n    x31 = apply(x30, x23)\n    x32 = lbind(shift, x12)\n    x33 = mapply(x32, x25)\n    x34 = lbind(shift, x12)\n    x35 = mapply(x34, x27)\n    x36 = lbind(shift, x12)\n    x37 = mapply(x36, x29)\n    x38 = lbind(shift, x"], [1.1, "def solve_53e3346b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 =00000000\n    \"\"\"\n    x3 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind("], [1.1, "def solve_048b64fd(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = sfilter(x31, x30)\n    x33 = merge(x32)\n    x34 = rot90(x30)\n    x35 = downscale(x33, x34)\n    x36 = objects(x35, T, F, F)\n    x37 = argmax(x36, x24)\n    x38 = last(x37)\n    x39 = remove(x39, x36"], [1.1, "def solve_d0765819(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = initset(x7)\n    x13 = add(x15, x12)\n    x14 =tojvec(x13)\n    x15 = drilltext(x14, x7)\n    x16 = lbind(argmin, x15)\n    x17 = compose(x16, toindices)\n    x18 = fork(difference, box, x17)\n    x19 = fork(equality, x18, identity)\n    x20 = compose(x19, switch)\n    x21 = rbind(multiply, xICS)\n    x22 = rbind(divide, xIts)\n    x23 = compose(x21, x22)\n    x24 = fork(equality, x23, identity)\n    x25 = compose(x24, x11)\n    x26 = lbind(apply, x25)\n    x27 = rbind(multiply, x10)\n    x28 = rbind(divide, x13)\n    x29 = x26(x14)\n    x30 = x27(x29)\n    x31 = fork(equality, x28, x30)\n    x32 = compose(x27, x11)\n    x33 = lbind(apply, x32)\n    x34 = rbind(toobject, I)\n    x35 = compose(x33, x34)\n    x36 = apply(x35, x15)\n    x37 = chain(x26, x24, x30)\n    x38 = x37(x36)\n    x39 = rbind(add, x38)\n    x40 = compose("], [1.1, "def solve_c7c2662f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = compose(x4, size)\n    x7 = sfilter(x3, x6)\n    x8 = chain(hline, sfilter, fgpartition)\n    x9 = merge(x7)\n    x10 = palette(x9)\n    x11 = intersection(x10, x8)\n    x12 = astuple(identity, rot90)\n    x13 = astuple(rot180, rot270)\n    x14 = combine(x12, x13)\n    x15 = astuple(identity, rot270)\n    x16 = astuple(rot180, rot90)\n    x17 = combine(x15, x16)\n    x18 = pair(x14, x17)\n    x19 = rbind(rapply, I)\n    x20 = compose(initset, first)\n    x21 = chain(first, x19, x20)\n    x22 = rbind(ofcolor, EIGHT)\n    x23 = chain(lowermost, x22, x21)\n    x24 = matcher(x23, ZERO)\n    x25 = extract(x18, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = x26(I)\n    x29 = decrement(x28)\n    x30 = astuple(x29, x27)\n    x31 = palette(I)\n    x32 = first(x31)\n    x33 = last(x31)\n    x34 = switch(x20, x33, x25)\n    x35 = branch(x34, hmirror, vmirror)\n    x36 = x35(x42)\n    x37 = canvas(x30, x36)\n    x38 = paint(x37, x34)\n    x39 = ofcolor(x38, EIGHT)\n    x40 = shift(x39,"], [1.1, "def solve_5480b6c7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, contained)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, ulcorner, x31)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(add, toivec, x34)\n    x36 = fork(add, tojvec, x35)\n    x37 = fork(add, normalize, x36)\n    x38 = mapply(x37, x4)\n    O = paint(I, x38)"], [1.1, "def solve_2bb3c351(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b28f5123(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = replace(I, SIX, TWO)\n    x2 = objects(x1, T, F, T)\n    x3 = merge(x2)\n    x4 = color(x3)\n    x5 = subgrid(x3, x1)\n    x6 = argmax(x5, width)\n    x7 = astuple(TWO, ONE)\n    x8 = x5(x6)\n    x9 = box(x3)\n    x10 = fill(x6, x4, x9)\n    x11 = fill(x10, x4, x7)\n    x12 = lbind(O = merge(x6)\n    x13 = compose(color, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = height(x11)\n    x16 = decrement(x15)\n    x17 =909(astuple, x16)\n    x18 = compose(last, first)\n    x19 = rbind(contained, x17)\n    x20 = sfilter(x11, x18)\n    x21 =\n    0202277522\n    last, x19)\n    x22 = width(x11)\n    x23 = subtract(x25, x22)\n    x24 = astuple(x23, x24)\n    x25 = canvas(ZERO, x24)\n    x26 = asindices(x25)\n    x27 = fgpartition(x25)\n    x28 = merge(x27)\n    x29 = palette(x28)\n    x30 = lbind(shift, x28)\n    x31 = mapply(x30, x29)\n    x32 = paint(x25, x31)\n    x33 =scale(x32, UNITY)\n    x34 = ofcolor(x33, x4)\n    x35 = asindices(x33)\n    x36 = remove(x35, x3333)\n    x37 =    x37 = lbind(recolor, x4)\n    x38 = lbind(mapply, x33)\n    x39 = rbind(ofcolor, x4)\n    x40 = chain("], [1.1, "def solve_e6723d67(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = sfilter(x1, vline)\n    x5 = size(x4)\n    x6 = greater(x3, x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(first, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = mostcolor(x10)\n    x19 = lbind(recolor, x18)\n    x20 = rbind(sfilter, x15)\n    x21 = compose(toindices, x20)\n    x22 = fork(combine, x21, outbox)\n    x23 = compose(x19, x22)\n    x24 = fork(combine, x17, x23)\n    x25 = shape(x10)\n    x26 = add(TWO, x25)\n    x27 = canvas(x18, x26)\n    x28 = asobject(x10)\n    x29 = shift(x28, UNITY)\n    x30 = paint(x27, x29)\n    x31 = rbind(shift, NEG_UNITY)\n    x32 = lbind(occurrences, x30)\n    x33 = compose(x31, x32)\n    x34 = compose(x33, x24)\n    x35 = chain(positive, size, x34)\n    x36 = sfilter(x12, x35)\n    x37 = chain(first, x33, x24)\n    x38 = compose(ulcorner, x24)\n    x39 = fork(subtract, x37, x38)\n"], [1.1, "def solve_32761d00(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_de886222(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, ONE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, identity, rot90)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = rot180(x6)\n    x8 = sfilter(x3, x7)\n    x9 = merge(x8)\n    x10 = rot180(x9)\n    x11 = sfilter(x3, x4)\n    x12 = merge(x11)\n    x13 = rot270(x12)\n    x14 = sfilter(x3, x4)\n    x15 = argmax(x14, size)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x15, x7)\n    x18 = objects(x17, T, F, F)\n    x19 = rbind(colorcount, ZERO)\n    x20 = argmax(x18, x19)\n    x21 = height(x20)\n    x22 = width(x20)\n    x23 = vsplit(x20, x22)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x2200, x24)\n    x26 = combine(x21, x25)\n    x27 = palette(x25)\n    x28 = llcorner(x27)\n    x29 = matcher(first, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(compose, flip)\n    x32 = lbind(matcher, first)\n    x33 = chain(x30, x31, x32)\n    x34 = lbind(paint, x17)\n    x35 = rbind(compose, asobject)\n    x36 = lbind(rbind, extract)\n    x37 = chain(x34, x35, x36)\n    x38 = fork(shift, identity, x37)\n    x39 = rbind(shift, x38)\n    x40 = compose(x39"], [1.1, "def solve_2e9b2df7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = width(x11)\n    x21 = decrement(x20)\n    x22 = tojvec(x21)\n    x23 = identity(DOWN)\n    x24 = connect(ORIGIN, x22)\n    x25 = fill(x18, THREE, x24)\n    x26 = identity(x12)\n    x27 = width(x12)\n    x28 = decrement(x27)\n    x29 = tojvec(x28)\n    x30 = identity(corners)\n    x31 = fill(x25, THREE, x30)\n    x32 = identity(x26)\n    x33 = identity(x256)\n    x34 = connect(ORIGIN, x24)\n    x35 = fill(x39, THREE, x34)\n    x36 = identity(x30)\n    x37 = fill(x35, THREE, x36)\n    x38 = add(x27, x36)\n    x39 = fill(x37, THREE, x38)\n    x40 = add(x29, x36)\n    x41 = fill(x40, THREE, x39)\n    x42 = combine(x34, x41)"], [1.1, "def solve_fbb4eb24(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = asobject(x8)\n    x11 = ulcorner(x9)\n    x12 = vplit(x10, TWO)\n    x13 = hsplit(x11, TWO)\n    x14 = neighbors(x13)\n    x15 = mapply(palette, x14)\n    x16 = astuple(x11, x12)\n    x17 = ulcorner(x9)\n    x18 = vsubtract(x17, x12)\n    x19 = hsplit(x19, TWO)\n    x20 = rbind(ofcolor, TWO)\n    x21 = compose(x20, x10)\n    x22 = fork(subtract, x21, x17)\n    x23 = corners(x15)\n    x24 = apply(x22, x23)\n    x25 = ZERO(x24)\n    x26 = fgpartition(x25)\n    x27 = merge(x26)\n    x28 = difference(x27, x25)\n    x29 = intersection(x28, x25)\n    x30 = shift(x29, DOWN)\n    x31 = extract(x30, x17)\n    x32 = initset(x15)\n    x33 = insert(x22, x32)\n    x34 = insert(x26, x33)\n    x35 = combine(x35, x34)\n    x36 = product(x35, x35)\n    x37 = power(increment, TWO)\n    x38 = x37(ORIGIN)\n    x39 = height(x38)\n    x40 = divide(x39, x37)\n    x41 = width"], [1.1, "def solve_54b7a60d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = palette(I)\n    x22 = remove(x20, x21)\n    x23 = other(x22, x20)\n    x24 = ofcolor(I, x20)\n    x25 = ofcolor(I, x10)\n    x26 = ofcolor(I, x5)\n    x27 = subgrid(x20, I)\n    x28 = subgrid(x25, I)\n    x29 = asobject(x28)\n    x30 = hperiod(x29)\n    x31 = height(I)\n    x32 = divide(x31, x30)\n    x33 = fgpartition(x32)\n    x34 = merge(x33)\n    x35 = x20(x34)\n    x36 = lbind(shift, x24)\n    x37 = shift(x35, x36)\n    x38 = toobject(x37, x28)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    x41 = toobject(x40, x28)\n    x42 = astuple("], [1.1, "def solve_b3351aa3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors(d687)\n    x10 = lbind(lbind, sfilter)\n    x11 = rbind(colorcount, I)\n    x12 = chain(x11, x10, frontiers)\n    x13 = matcher(x12, TWO)\n    x14 = dmirror(x7)\n    x15 = lbind(hupscale, x14)\n    x16 = chain(x15, tojvec, x13)\n    x17 = compose(x16, x12)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = fork(combine, x17, x18)\n    x20 = fork(combine, x19, x7)\n    x21 = palette9(I)\n    x22 = extract(x21, x20)\n    x23 = lbind(hupscale, x7)\n    x24 = chain(x23, positive, x20)\n    x25 = dmirror(x7)\n    x26 = palette(x25)\n    x27 = other(x26, x22)\n    x28 =422(x28, x22)\n    x29 = rbind(rapply, x28)\n    x30 = compose(x29, initset)\n    x31 = argmax(x28, x30)\n    x32 = x28(x31)\n    x33 = ofcolor(x35, x27)\n    x34 =[contained(x33, x34)\n    x35 = ofcolor(x35, x27)\n    x36 = sfilter(x34, x35)\n    x37 = difference(x35, x36)\n    x38 = ofcolor("], [1.1, "def solve_28d1bbf1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_dc0730b9(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = argmax(x2, width)\n    x4 = height(x3)\n    x5 = halve(x4)\n    x6 = frontiers(x3)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = astuple(x5, x6)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x44 = interval(x13, x12, ONE)\n    x15 = lbind(shift, x11)\n    x16 = apply(x15, x44)\n    x17 = rbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = rbind(hmatching, x11)\n    x20 = rbind(vmatching, x11)\n    x21 = fork(either, x19, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(extract, x22, x18)\n    x24 = compose(size, x23)\n    x25 = increment(x5)\n    x26 = interval(x25, x25, ONE)\n    x27 = corners(x11)\n    x28 = insert(x15, x27)\n    x29 = insert(x16, x28)\n    x30 = insert(x11, x29)\n    x31 =riercorner(x30)\n    x32 = apply(size, x31)\n    x33 = increment(x5)\n    x34 = interval(x33, x32, ONE)\n    x35 = apply(tojvec, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = fill(x10, FOUR, x36)\n    x38 = x42(x37)\n    x39 =703725(x38)\n    x40 = increment(x5)\n    x41 ="], [1.1, "def solve_d3e5f487(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4eca0cab(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = ONE(x3)\n    x5 = ONE(I)\n    x6 = rot270(x4)\n    x7 = astuple(identity, rot270)\n    x8 = astuple(rot180, rot90)\n    x9 = combine(x7, x8)\n    x10 = sfilter(x9, square)\n    x11 = difference(x3, x10)\n    x12 = rot90(x11)\n    x13 = rbind(rapply, x2)\n    x14 = chain(first, x13, initset)\n    x15 = fork(combine, identity, x14)\n    x16 = extract(x15, x11)\n    x17 = mapply(x16, x12)\n    x18 = first(x17)\n    x19 = trim(x18)\n    x20 = dmirror(x19)\n    x21 = asobject(x20)\n    x22 = height(x21)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = apply(double, x24)\n    x26 = shape(x21)\n    x27 = apply(asobject, x21)\n    x28 = chain(first, x27, last)\n    x29 = asindices(x21)\n    x30 = ofcolor(x21, ZERO)\n    x31 = ofcolor(x21, ONE)\n    x32 = intersection(x29, x30)\n    x33 = fill(x21, ZERO, x32)\n    x34 = height(x21)\n    x35 = equality(x34, ZERO)\n    x36 = branch(x35, x22, vsplit)\n    x37 = lbind(recolor, ZERO)\n    x38 =88a104 last(I)\n    x39 = chain(x37, x37, x38)\n    x40 = difference(x39, x31)\n    x41"], [1.1, "def solve_7abfe236(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, TWO_BY_TWO)\n    x8 = initset(x4)\n    x9 = insert(x8, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 = mapply(ineighbors, x11)\n    x13 = fill(x7, ONE, x12)\n    x14 =fill(x13,004, x11)\n    x15 = ofcolor(x14, x5)\n    x16 = rbind(adjacent, x15)\n    x17 = mfilter(x15, x16)\n    O = fill(x14, x5, x17)\n    return O"], [1.1, "def solve_bba87be2(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = divide(x3, x4)\n    x6 = increment(x5)\n    x7 = width(I)\n    x8 = halve(x7)\n    x9 = increment(x8)\n    x10 = height(I)\n    x11 = divide(x9, x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = prapply(astuple, x13, x13)\n    x15 = lbind(canvas, ZERO)\n    x16 = lbind(occurrences, I)\n    x17 = compose(x15, x16)\n    x18 = lbind(apply, multiply)\n    x19 = chain(x17, x18, frontiers)\n    x20 = matcher(x19,45)\n    x21 = fork(recolor, color, x20)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x14, x22)\n    x24 = paint(I, x23)\n    x25 =101015(x23)\n    x26 = matcher(x22, x25)\n    x27 = mfilter(x1, x26)\n    O = paint(x24, x27)\n    return O"], [1.1, "def solve_74887115(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = chain(positive, first, x1)\n    x3 = lbind(lbind, sfilter)\n    x4 =539a539a6(I)\n    x5 = compose(x2, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = equality(x4, x6)\n    x8 = branch(x7, identity, x6)\n    x9 = x8(I)\n    O = partition(x9)\n    return O"], [1.1, "def solve_b902a6ba(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =29ec(d406)\n    x3 =92(flip, FOUR)\n    x4 = shape(I)\n    x5 = maximum(x4)\n    x6 =675(x5)\n    x7 = interval(TWO, x6, ONE)\n    x8 = rbind(multiply, x5)\n    x9 = apply(x8, x7)\n    x10 = rbind(multiply, FOUR)\n    x11 = apply(x10, x9)\n    x12 = matcher(numcolors, FOUR)\n    x13 = sfilter(x11, x12)\n    x14 = apply(color, x13)\n    x15 = mostcommon(x14)\n    x16 = repeat(x15, ONE)\n    O = x15(I)\n    return O"], [1.1, "def solve_88acd047(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 =66(I)\n    x4 =364(x3)\n    x5 = decrement(x4)\n    x6 = branch(x5, identity, initset)\n    x7 = branch(x5, identity, outbox)\n    x8 = x6(x7)\n    x9 = ulcorner(x8)\n    x10 = decrement(x9)\n    x11 = branch(x5, identity, initset)\n    x12 = x11(x10)\n    x13 = initset(x12)\n    x14 = insert(x9, x13)\n    x15 = width(I)\n    x16 = decrement(x15)\n    x17 = tojvec(x16)\n    x18 = connect(ORIGIN, x17)\n    x19 = height(I)\n    x20 = decrement(x19)\n    x21 = toivec(x20)\n    x22 = connect(ORIGIN, x21)\n    x23 = compress(I)\n    x24 = numcolors(x23)\n    x25 = equality(x24, ONE)\n    x26 = branch(x25, identity, x22)\n    x27 = branch(x25, identity, x24)\n    x28 = width(x26)\n    x29 = decrement(x28)\n    x30 = tojvec(x29)\n    x31 = connect(ORIGIN, x30)\n    x32 = height(x26)\n    x33 = decrement(x32)\n    x34 = toivec(x33)\n    x35 = connect(ORIGIN, x34)\n    x36 = connect(ORIGIN, x28)\n    x37 = connect(ORIGIN, x29)\n    x38 = fill(I, THREE, x36)\n    x39 = fill(x38, EIGHT, x37)\n    x40 = fill(x39, TWO, x35)\n    O = fill(x40, ONE, x39)\n    return O"], [1.1, "def solve_edf3b147(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rot270(I)\n    x2 = fork(product, identity, identity)\n    x3 = apply(x2, x1)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, identity, identity)\n    x6 = x5(x1)\n    x7 =    488712738(x6)\n    O = x5(x7)\n    return O"], [1.1, "def solve_17b4feea(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =441001F\n    0000000001\n    x2 = merge(x1)\n    x4 = fill(I, NEG_ONE, x3)\n    x5 = astuple(x11, x12)\n    x6 = ulcorner(x2)\n    x7 = increment(x6)\n    x8 = rbind(subtract, x7)\n    x9 = chain(even, x8, last)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, first, last)\n    x12 = compose(flip, x9)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(decrement, x13, last)\n    x15 = fork(astuple, x11, x14)\n    x16 = apply(x15, x10)\n    O = paint(x4, x16)\n    return O"], [1.1, "def solve_d110545f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(equality, height, width)\n    x7 = size(x5)\n    x8 = interval(ZERO, x7, x6)\n    x9 = sfilter(x8, x4)\n    x10 = rbind(contained, x8)\n    x11 = compose(x10, outbox)\n    x12 = sfilter(x9, x11)\n    x13 = FOUR(x12)\n    x14 = increment(x13)\n    x15 =455(x12)\n    x16 = decrement(x15)\n    x17 = canvas(ZERO, x16)\n    x18 = asobject(x17)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x17, x19)\n    x21 = height(x17)\n    x22 = width(x17)\n    x23 = astuple(x21, x22)\n    x24 = crop(x20, ORIGIN, x23)\n    x25 = hmirror(x24)\n    x26 = vmirror(x24)\n    x27 = ofcolor(x25, ZERO)\n    x28 = ofcolor(x26, ZERO)\n    x29 = product(x27, x28)\n    x30 = insert(x28, x29)\n    x31 = ofcolor(x20, TWO)\n    x32 = mapply(neighbors, x31)\n    x33 = difference(x30, x32)\n    O = fill(x20, ONE, x33)\n    return O"], [1.1, "def solve_1a7fd12c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(I, ONE)\n    x4 =866(numcolors, trim)\n    x5 = compose(multiply, repeat)\n    x6 = matcher(dedupe, x5)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x4)\n    x9 = compose(x8, x6)\n    x10 = initset(identity)\n    x11 = matcher(x10, ZERO)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = argmax(x13, last)\n    x15 = height(x14)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = insert(x14, x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x17)\n    O = paint(I, x20)\n    return O"], [1.1, "def solve_e60115ad(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(add, first, last)\n    x9 = fork(connect, x7, x8)\n    x10 = fork(equality, x9, identity)\n    x11 =\n    x10(x2)\n    x12 = leastcolor(x11)\n    x13 = tojvec(SIX)\n    x14 = crop(x13, identity)\n    x15 = height(x14)\n    x16 = width(x14)\n    x17 = vsplit(x16, x15)\n    x18 = compose(x17, first)\n    x19 = fork(equality, identity, x18)\n    x20 = compose(x19, last)\n    x21 = width(x2)\n    x22 = vsplit(x21, x12)\n    x23 =885112(x22)\n    x24 = invert(x23)\n    x25 = shift(x14, x24)\n    x26 = shift(x25, x24)\n    x27 = palette(x26)\n    x28 = lbind(shift, x26)\n    x29 = occurrences(x28, x27)\n    x30 = mapply(x28, x29)\n    O = paint(x23, x30)\n    return O"], [1.1, "def solve_79f29e04(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 =850d687anch(x8, ORIGIN, toindices)\n    x10 = matcher(first, x39)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = matcher(first, x39)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x16, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x20)\n    x23 = fork(combine, x22, x22)\n    x24 = rbind(shoot, UNITY)\n    x25 = compose(x24, last)\n    x26 = fork(recolor, first, x25)\n    x27 = mapply(x26, x4)\n    O = paint(x6, x27)\n    return O"], [1.1, "def solve_2ccd11ae(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    4577300009\n    3011433066\n    7854836027\n    1929100002\n    \"\"\"\n    x1 = halve(x1)\n    x2 = rbind(shoot, x4)\n    x3 = rbind(shoot, x2)\n    x4 = fork(combine, x2, x3)\n    x5 = rbind(shoot, x2)\n    x6 = rbind(shoot, x4)\n    x7 = fork(combine, x6, x5)\n    x8 = fork(combine, x4, x7)\n    x9 = leastcolor(I)\n    x10 = rbind(toobject, I)\n    x11 = rbind(colorcount, x9)\n    x12 = chain(x11, x10, dneighbors)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x1, x13)\n    x15 = x14(I)\n    x16 = last(x15)\n    x17 = subgrid(x16, x15)\n    x18 = index(x17, DOWN)\n    x19 = subgrid(x18, x15)\n    x20 = hmirror(x19)\n    x21 = replace(x20, x9, x8)\n    x22 = replace(x21, x10, x7)\n    x23 = replace(x22, x19, x8)\n    x24 = hmirror(x23)\n    O = replace(x24, x10, x5)\n    return O"], [1.1, "def solve_6524061a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 =215(I)\n    x3 = halve(x1)\n    x4 = increment(x3)\n    x5 = width(I)\n    x6 = divide(x5, x4)\n    x7 = astuple(x6, x4)\n    x8 = canvas(ZERO, x7)\n    x9 = ofcolor(x8, ONE)\n    x10 = rbind(multiply, x4)\n    x11 = apply(x10, x9)\n    x12 = rbind(multiply, x6)\n    x13 = apply(x12, x11)\n    x14 = ofcolor(x8, ONE)\n    x15 = rbind(intersection, x14)\n    x16 = apply(x15, x13)\n    O = fill(x8, ZERO, x16)\n    return O"], [1.1, "def solve_a311ede7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, TWO, THREE)\n    x3 = switch(x2, ONE, FOUR)\n    x4 = switch(x3, EIGHT, FOUR)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(ORIGIN)\n    x12 = box(x7)\n    x13 = inbox(x7)\n    x14 = center(x7)\n    x15 = initset(x14)\n    x16 = lbind(toobject, x12)\n    x17 = compose(x4, x16)\n    x18 = lbind(toobject, x13)\n    x19 = compose(x4, x18)\n    x20 = lbind(toobject, x15)\n    x21 = compose(x4, x20)\n    x22 =454(x21)\n    x23 = merge(x11)\n    x24 = fill(x6, TWO, x23)\n    x25 = asindices(x24)\n    x26 = corners(x25)\n    x27 = toobject(x26, x24)\n    x28 = mostcolor(x27)\n    x29 = asindices(x24)\n    x30 = ofcolor(x24, x28)\n    x31 = difference(x29, x30)\n    x32 = rbind( fill, x28)\n    x33 = apply(x32, x31)\n    x34 = rbind(adjacent, x4)\n    x35 = mfilter(x34, x28)\n    x36 = mfilter(x34, x25)\n    x37 = paint(x24, x3)\n    x38 = paint(x37, x35)\n    O = fill(x38, x28, x36)\n    return O"], [1.1, "def solve_c25fc43f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =159(I)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.1, "def solve_f81fd587(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(O = maximum(x4)\n    x10 = double(x4)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = rbind(multiply, x4)\n    x13 = apply(x12, x11)\n    x14 = rbind(multiply, x6)\n    x15 = apply(x14, x11)\n    x16 = pair(x13, x15)\n    x17 = rbind(add, ZERO)\n    x18 = compose(x17, first)\n    x19 = rbind(add, x8)\n    x20 = pair(x16, x19)\n    x21 = fork(combine, x18, x20)\n    x22 = mapply(x21, x30)\n    O = fill(x2, FOUR, x22)\n    return O"], [1.1, "def solve_e46bf51e(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = vperiod(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = add(x5, THREE)\n    x7 = width(I)\n    x8 = astuple(x6, x7)\n    x9 = partition(I)\n    x10 = lbind(colorcount, I)\n    x11 = argmax(x9, x10)\n    x12 = canvas(x11, x8)\n    x13 = apply(normalize, x12)\n    x14 = lbind(to67e509687\n    x15 =8877(x14)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x13, x17)\n    x19 = compose(invert, size)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_aaaa4e5d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = compose(toindices, normalize)\n    x11 = matcher(x10, x9)\n    x12 = uppermost(x7)\n    x13 = compose(toindices, normalize)\n    x14 = matcher(x13, x12)\n    x15 = leftmost(x7)\n    x16 = matcher(x15, x13)\n    x17 = uppermost(x7)\n    x18 = greater(x16, x17)\n    x19 = leftmost(x7)\n    x20 = matcher(x19, x14)\n    x21 = uppermost(x7)\n    x22 = matcher(x21, x18)\n    x23 = leftmost(x7)\n    x24 = matcher(x23, x14)\n    x25 = rightmost(x7)\n    x26 = matcher(x25, x24)\n    x27 = leftmost(x7)\n    x28 = matcher(x27, x28)\n    x29 = uppermost(x7)\n    x30 = matcher(x29, x25)\n    x31 = rightmost(x7)\n    x32 = matcher(x31, x29)\n    x33 = leftmost(x7)\n    x34 = sfilter(x33, x21)\n    x35 = argmax(x34, size)\n    x36 = difference(xs, x35)\n    x37 =884483replace(x36, x8, x5)\n    O = uppermost(x37)\n    return O"], [1.1, "def solve_94253c38(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =523259\n    4292891824\n    \"\"\"\n    x2 = astuple(TWO, ONE)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x4)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [1.1, "def solve_aa2d0b61(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(150,197)\n    x9 = size(x3)\n    x10 = vsplit(x4, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hconcat, identity)\n    x14 = hmirror(x11)\n    x15 = matcher(x13, x14)\n    x16 = identity( Maurice222\n    0000000352\n    \"\"\"\n    x1 = leastcolor(x6)\n    x2 = vsplit(x6, x12)\n    x3 = apply(x13, x2)\n    x4 = maximum(x3)\n    x5 = ofcolor(x4, x1)\n    x6 = hmirror(x5)\n    x7 = fill(x6, ZERO, x1)\n    x8 = insert(x7, x5)\n    O = fill(x8, ZERO, x2)\n    return O"], [1.1, "def solve_0cc501ef(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette,I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.1, "def solve_36df1f97(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I asobject, I)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_7e21616c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = partition(I)\n    x5 = sizefilter(x4, ONE)\n    x6 = difference(x4, x5)\n    x7 =1117fcbind(ofcolor, x2)\n    x8 = mapply(x7, x6)\n    x9 = fork(connect, ulcorner, urcorner)\n    x10 = fork(connect, urcorner, ulcorner)\n    x11 = fork(combine, x9, x10)\n    x12 = mapply(x11, x9)\n    O = fill(I, x2, x12)\n    return O"], [1.1, "def solve_429ab382(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =889(RIGHT)\n    x2 = halve(x1)\n    O = upscale(I, x2)\n    return O"], [1.1, "def solve_e6a81d9e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =7326(I)\n    x2 = tophalf(x1)\n    O = bottomhalf(x1)\n    return O"], [1.1, "def solve_973c9f8a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 =483(x7)\n    x13 =485(x7)\n    x14 =11(x12)\n    x15 =11(x13)\n    x16 = rbind(multiply, x4)\n    x17 = apply(x16, x14)\n    x18 = mapply(x16, x17)\n    x19 = merge(x9)\n    x20 = fill(I, x3, x19)\n    O = fill(x20, x11, x18)\n    return O"], [1.1, "def solve_2b62334e(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =8888(66666666)\n    x2 = rbind(shoot, RIGHT)\n    x3 = rbind(shift, LEFT)\n    x4 = compose(x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.1, "def solve_ced800e1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = heavily remind4448(I)\n    x2 =Example output:\n    4941910114\n    2732866842\n    8388760181\n    3013746873\n    1529944467\n    1491984894\n    6741268043\n    314479401f8(77769718\n    57648014328\n    1737465730\n    \"\"\"\n    x1 = rbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_4a350a1a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = T sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape1fad0729(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [1.1, "def solve_2beef78b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =9999(I, T)\n    x2 = matcher(00000000, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = width(I)\n    x7 = multiply(x6, x5)\n    x8 = multiply(UNITY, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x6, x5)\n    x11 = decrement(x10)\n    x12 = lbind(astuple, x11)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = compose(last, last)\n    x15 = chain(x13, x12, x14)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x4)\n    O = underpaint(x9, x17)\n    return O"], [1.1, "def solve_2e9ecf87(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = decrement(ORIGIN)\n    88777 ulcorner(I)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = fill(I, x1, x3)\n    x5 = shift(x2, UNITY)\n    x6 = underfill(x4, x1, x5)\n    x7 = rbind(shoot, LEFT)\n    x8 = compose(x7, last)\n    x9 = matcher(x8, x8)\n    x10 = sfilter(x3, x9)\n    O = fork(recolor, first, x10)\n    return O"], [1.1, "def solve_eb0ce75a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fork(combine, vfrontier, hfrontier)\n    x2 = compose(x1, size)\n    x3 = fork(difference, x2, toindices)\n    x4 = x2(I)\n    x5 = compose(size, x3)\n    x6 = matcher(x5, ZERO)\n    x7 = fork(both, x3, x6)\n    x8 = sfilter(x4, x7)\n    x9 = matcher(first, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 =0001\n    x13 = merge(x11)\n    x14 = dmirror(x12)\n    x15 = compose(x14, x12)\n    x16 = apply(x15, x13)\n    x17 = dedupe(x16)\n    x18 = order(x17, identity)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, ONE)\n    x23 = combine(x21, x22)\n    x24 = combine(x21, x20)\n    x25 = fork(hfrontier, vfrontier, hfrontier)\n    x26 = mapply(x25, x23)\n    x27 = fill(x19, SIX, x26)\n    O = fill(x27, ONE, x24)\n    return O"], [1.1, "def solve_3f4a996b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, ZERO)\n    x3 = branch(x2, width, height)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(I, x5)\n    x7 =191(x6)\n    x8 =222(x7, x5)\n    x9 = palette(x8)\n    x10 = repeat(x9, ONE)\n    x11 =14filter(x10, x5)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = height(x16)\n    x18 = width(x16)\n    x19 = multiply(x17, x18)\n    x20 = increment(x19)\n    x21 = invert(x20)\n    x22 = shift(x16, x21)\n    x23 = frontiers(I)\n    x24 = toindices(x16)\n    x25 = apply(center, x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = paint(I, x27)\n    return O"], [1.1, "def solve_c0344aae(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, THREE)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = equality(x1, TWO)\n    x8 = branch(x7, cmirror, outbox)\n    x9 = x8(x4)\n    x10 =\n    \"\"\"\n    x1 = branch(x7, hmirror, vmirror)\n    x2 = x1(x4)\n    x3 = equality(x1, ONE)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(x4)\n    x6 = decrement(x1)\n    x7 = hconcat(x5, x6)\n    x8 = branch(x3, vmirror, hmirror)\n    x9 = x8(x4)\n    x10 = decrement(x7)\n    x11 = width(x4)\n    x12 = decrement(x11)\n    x13 = tojvec(x12)\n    x14 =jtoivec(x13)\n    x15 = branch(x11, x14, x9)\n    x16 = shape(x4)\n    x17 = canvas(ZERO, x16)\n    x18 = ofcolor(x4, ZERO)\n    x19 = ofcolor(x4, ONE)\n    x20 = intersection(x18, x19)\n    O = fill(x17, THREE, x20)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_1eca1f34(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_38dc835d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.30490196078431375, "def solve_4a06ad37(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_83c5d3d0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_5bdef4a0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_bd77c19b(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = subgrid(x3, x2)\n    x6 = palette(x4)\n    x7 = contained(ONE, x6)\n    O = branch(x7, x5, x4)\n    return O"], [0.30490196078431375, "def solve_8e6a8b73(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.32027505446623095, "def solve_920b716e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_6b142084(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.3215686274509804, "def solve_c45544a3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_daccb4df(I):\n    x1 = palette(I)\n    x2 = contained(ONE, x1)\n    x3 = contained(TWO, x1)\n    x4 = branch(x2, UNITY, TWO_BY_TWO)\n    x5 = branch(x3, RIGHT, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x8, FIVE, x7)\n    return O"], [0.3215686274509804, "def solve_ee5f06e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.36851851851851847, "def solve_594aab39(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.36851851851851847, "def solve_f000d209(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_ab5717e2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.3931917211328976, "def solve_a538493d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_ea1caedb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_0c0421f7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_5e93db63(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_274c93cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.40763616557734206, "def solve_475c4085(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_1fa191e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_97b398a2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_0c7e9890(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_ac8ccb35(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_5c2057be(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_e224493a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_7c72e916(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_97d7059b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_ace67c88(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_77cff79d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_44436da6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_0c4b7d1f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.4296296296296296, "def solve_34f6200c(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.5023148148148148, "def solve_e247eed7(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = ofcolor(I, x1)\n    x5 = intersection(x3, x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(THREE, x6)\n    O = fill(x7, ZERO, x5)\n    return O"], [0.5185185185185185, "def solve_4aa27410(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, height)\n    x3 = subgrid(x2, I)\n    O = trim(x3)\n    return O"], [0.5232709913889689, "def solve_5ba617d4(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_feaf43e7(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_ac04d8c8(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_e11f45de(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_e19a07ba(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_f81b582a(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5366402116402116, "def solve_dc6f3e67(I):\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x2)\n    O = hconcat(x5, x2)\n    return O"], [0.5540128968253968, "def solve_d8b2192b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x4, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x5, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.5902430555555556, "def solve_88492f5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_7862e82c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_eef88931(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_ec8a7ba3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_3ac81dae(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_75253537(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5916319444444444, "def solve_6b324449(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5916319444444444, "def solve_88c3a234(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5916319444444444, "def solve_e75085ab(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5916319444444444, "def solve_ee8557e0(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5982804232804233, "def solve_13faca88(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.6, "def solve_ed0713cf(I):\n    O = canvas(ZERO, THREE_BY_THREE)\n    return O"], [0.6036574074074074, "def solve_d15ffe74(I):\n    O = downscale(I, TWO)\n    return O"], [0.6163211951447245, "def solve_4e91ceba(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [0.6199160165858457, "def solve_e1da81e2(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.631901366607249, "def solve_2ee1cf76(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.631901366607249, "def solve_10ddfa34(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6600575299564271, "def solve_16d230f2(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_1ce68798(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_5924995a(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6600575299564271, "def solve_4d353fd4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.660134929337232, "def solve_764b2bcb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6672060197871419, "def solve_a6f5aca8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_a1b13ac0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_0e14f048(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6696587388610415, "def solve_e8bc789f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6696587388610415, "def solve_419857c4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.674180469289165, "def solve_7da2e58a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6837830785199206, "def solve_2d5013b2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_4686be5e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_3fb27ea4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_4dbd82e5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_10fab110(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_194e28d8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_1942f4e0(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_afb6ab3f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_e1570c8c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6838151265460183, "def solve_84cad5fa(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.6901349293372321, "def solve_28a0ef71(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_c5737642(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_05335b56(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_8a9de9bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_ced19998(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_22da10a5(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6926427492833742, "def solve_5f663faf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.6946027369281046, "def solve_ff3e3391(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.6979166666666667, "def solve_1a349f4f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = size(I)\n    x5 = positive(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = palette(x8)\n    x11 = palette(x9)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = shape(x8)\n    x15 = canvas(x13, x14)\n    x16 = ofcolor(x8, x13)\n    x17 = ofcolor(x9, x13)\n    x18 = intersection(x16, x17)\n    O = fill(x15, TWO, x18)\n    return O"], [0.6979166666666667, "def solve_c17e5a67(I):\n    x1 = height(I)\n    x2 = equality(x1, TWO)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [0.6979166666666667, "def solve_4e091057(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6979166666666667, "def solve_04965cd9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6986111111111111, "def solve_7e670e80(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.700481793212685, "def solve_cbb85e73(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_95198b43(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_99e148ab(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_1942f6a5(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_565abbe6(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_005df2b3(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7026546999333007, "def solve_9d7fd276(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.7026546999333007, "def solve_0dc55135(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.7026546999333007, "def solve_eb96cb35(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.7026546999333007, "def solve_7718d16f(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.709172269403161, "def solve_f630a98f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.7104098583877996, "def solve_98094b0c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7110653073286052, "def solve_56eba404(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [0.7167554635380722, "def solve_193e9875(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = rot90(x30)\n    return O"], [0.7167554635380722, "def solve_820494c1(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7208389360698277, "def solve_00895131(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7208389360698277, "def solve_093bc945(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7275112822906941, "def solve_ba13400d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7276305432567292, "def solve_3c5135af(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = subgrid(x3, x1)\n    return O"], [0.7338151265460182, "def solve_d4739b48(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7338151265460182, "def solve_d82cdcae(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7338151265460182, "def solve_0cc05f66(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.7338151265460182, "def solve_d8713635(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7338151265460182, "def solve_5ee29d0d(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = upscale(I, x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = vupscale(I, x7)\n    x9 = asobject(x8)\n    x10 = shift(x9, UNITY)\n    O = paint(I, x10)\n    return O"], [0.7341722694031612, "def solve_53ff9664(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, x5, x2)\n    return O"], [0.7341722694031612, "def solve_dbbf0658(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.7341722694031612, "def solve_c8b083f9(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.7341722694031612, "def solve_dcaafdad(I):\n    x1 = asobject(I)\n    x2 = flip(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = mostcolor(I)\n    x6 = objects(x4, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x4, TWO, x9)\n    O = replace(x10, NEG_ONE, ZERO)\n    return O"], [0.7341722694031612, "def solve_e6af0c09(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7389341741650659, "def solve_b7f16dad(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.7389341741650659, "def solve_0911b665(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.7400296972330871, "def solve_772e7cfa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7400296972330871, "def solve_ae5737d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7415142607451524, "def solve_cba8ff14(I):\n    x1 = height(I)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = subtract(x1, TWO)\n    x5 = divide(x4, THREE)\n    x6 = astuple(x5, x5)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = partition(x7)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = initset(x2)\n    x13 = palette(x3)\n    x14 = palette(x11)\n    x15 = difference(x13, x14)\n    x16 = difference(x15, x12)\n    x17 = first(x16)\n    x18 = interval(ZERO, THREE, ONE)\n    x19 = product(x18, x18)\n    x20 = totuple(x19)\n    x21 = apply(first, x20)\n    x22 = apply(last, x20)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x21)\n    x25 = apply(x23, x22)\n    x26 = papply(add, x24, x21)\n    x27 = papply(add, x25, x22)\n    x28 = papply(astuple, x26, x27)\n    x29 = lbind(shift, x11)\n    x30 = mapply(x29, x28)\n    O = underfill(I, x17, x30)\n    return O"], [0.7418844847240721, "def solve_c840a2ca(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.7421484598793515, "def solve_69c62704(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7421484598793515, "def solve_77bd2bbc(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7421484598793515, "def solve_fe025daf(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7430530118030119, "def solve_d5cfaaa2(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, NINE)\n    x4 = switch(x3, ONE, FOUR)\n    O = switch(x4, EIGHT, NINE)\n    return O"], [0.7433389360698277, "def solve_e6b81b35(I):\n    O = rot180(I)\n    return O"], [0.7433389360698277, "def solve_66c3b834(I):\n    O = vmirror(I)\n    return O"], [0.7435168537896918, "def solve_c4e15809(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vmirror(x1)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, TWO, ZERO)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, TWO, x6)\n    return O"], [0.7436574074074074, "def solve_6caeaa0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [0.7436960789269706, "def solve_c13ead6f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_75c4719f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7436960789269706, "def solve_2a96e83a(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.7436960789269706, "def solve_5db04b51(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_49d4186d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_b87a61ad(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_5e1d6cf1(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_7eb0c9e0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_3aa0b20b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_4a5d9e27(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = mapply(double, x3)\n    O = fill(I, ONE, x4)\n    return O"], [0.7436960789269706, "def solve_50727d36(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_f24d0ebe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_209d6837(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.7436960789269706, "def solve_609701e2(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_4a7f53f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_2244a8de(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7436960789269706, "def solve_3b8f8b0c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_e4cf7a5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_02a89004(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_6f00be31(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_e10b7db7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7436960789269706, "def solve_838abe8c(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.7436960789269706, "def solve_7838e3ab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_a695d08e(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.7436960789269706, "def solve_e3a4eff9(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_38db470a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_408af10f(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.7436960789269706, "def solve_6f6586d3(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_407fc4db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_045d37fe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_b495cf3a(I):\n    O = switch(I, EIGHT, TWO)\n    return O"], [0.7436960789269706, "def solve_bd1643c9(I):\n    O = switch(I, THREE, FOUR)\n    return O"], [0.7436960789269706, "def solve_4ce73dec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, THREE, x26)\n    return O"], [0.7436960789269706, "def solve_a9fbb9cf(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.7436960789269706, "def solve_cdfc81a3(I):\n    O = dmirror(I)\n    return O"], [0.7436960789269706, "def solve_2ffdef67(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_be7ae088(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_057f227c(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_170e6eb2(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_620ec29e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.7436960789269706, "def solve_35ba5af2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x765 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x765)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_5c6a7255(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_e5bbb8c8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_32363757(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.7436960789269706, "def solve_94e474e4(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_b624823f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_ff5dc2cb(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_0562b09e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_6bf5ed83(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_0d67ec31(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_f03e0b76(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_ef5ed793(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_8fef37f2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_3ed1564f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_2f954550(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_52f7f1d5(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_b34d094e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7436960789269706, "def solve_d2252d53(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = compose(x4, center)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x2)\n    x8 = paint(I, x7)\n    O = cover(x8, x3)\n    return O"], [0.7436960789269706, "def solve_a9428b8f(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_be0967b7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_9808e6aa(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7436960789269706, "def solve_149b7eab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_1f7e96df(I):\n    x1 = rot270(I)\n    x2 = shoot(ORIGIN, UNITY)\n    O = rot90(x1)\n    return O"], [0.7436960789269706, "def solve_1a629316(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_9d1e76b5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_635d88b1(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [0.7440145502645503, "def solve_85df7c3f(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = switch(x1, ONE, TWO)\n    x4 = apply(x2, x3)\n    x5 = switch(x4, ONE, TWO)\n    O = cmirror(x5)\n    return O"], [0.7456442312631633, "def solve_e3dea5c4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7459101546601546, "def solve_f996de7b(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7472675074983992, "def solve_a0707d65(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.7472675074983992, "def solve_a599a311(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_d5f1f670(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_4029763f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_d03213e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7475859788359789, "def solve_d30650af(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7480334878120887, "def solve_bbf8da1a(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.7480334878120887, "def solve_b8e525cc(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480334878120887, "def solve_ebf739a0(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480334878120887, "def solve_a6c35bb6(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480334878120887, "def solve_d4b2c0f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.7498712337739668, "def solve_168ea23c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork( add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, FOUR, x29)\n    return O"], [0.7502513364680665, "def solve_6da06de9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(x2)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = shift(x2, x8)\n    O = paint(I, x9)\n    return O"], [0.7508170831873646, "def solve_4b6458aa(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, ZERO, x4)\n    return O"], [0.7508389360698278, "def solve_8d54d2e9(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, NEG_ONE, x3)\n    return O"], [0.7532198884507801, "def solve_391d07f0(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_b96ae874(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x9, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 =x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.7532198884507801, "def solve_04e5e1da(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.7535175074983992, "def solve_0f4cfdf2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7535175074983992, "def solve_e47b5d44(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7535383597883598, "def solve_f9c3d2a9(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.7535383597883598, "def solve_c854580d(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.7543625356125356, "def solve_0f66d46c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.7563548704954955, "def solve_bd183454(I):\n    x1 = width(I)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x1)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O"], [0.7565443316109438, "def solve_518bcd12(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = rbind(shoot, DOWN)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = fork(combine, x2, x5)\n    x8 = fork(combine, x3, x6)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x1)\n    O = fill(I, ZERO, x10)\n    return O"], [0.7579817932126849, "def solve_fdfebfca(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7583002645502646, "def solve_b29aad50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.7615532217841134, "def solve_c2cd1069(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c4d64c3d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_b65500cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_d535e67c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c314a3a7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.767824074074074, "def solve_1a1ea0b3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7758389360698277, "def solve_137a5410(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_e7c5a850(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_666e482a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_9ed4e2f5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7759259259259259, "def solve_644ec17c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 = size(x1)\n    x13 = height(I)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = lbind(shift, x15)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = tojvec(x18)\n    x20 = lbind(shift, x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x18)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = fill(x24, NEG_ONE, x26)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 =difference(x29, x28)\n    O = fill(x27, ZERO, x30)\n    return O"], [0.7819990673127664, "def solve_716711e4(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_27e71a47(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_57ef74fc(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.7819990673127664, "def solve_04447cf7(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [1.0, "def solve_cd3e914e(I):\n    x1 = astuple(RVERT, dmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_16575065(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fcff4807(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_9135ea94(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_56de6084(I):\n    x1 = I21(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(size, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_7cfb6ffd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a4da1f44(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(E21, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [1.0, "def solve_f37767ee(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = astuple(dmirror, cmirror)\n    x6 = astuple(hmirror, identity)\n    x7 = combine(x5, x6)\n    x8 = chain(initset, ulcorner, lrcorner)\n    x9 = fork(rapply, x8, identity)\n    x10 = compose(first, x9)\n    x11 = rbind(ofcolor, x4)\n    x12 = compose(x11, x10)\n    x13 = fork(connect, x12, toindices)\n    x14 = compose(x13, x10)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x11)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = compose(toivec, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x18)\n    x22 = intersection(x19, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x18)\n    O = paint(x17, x24)\n    return O"], [1.0, "def solve_958af7c2(I):\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = branch(x3, ONE, ZERO_BY_TWO)\n    x5 = ZERO(x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = frontiers(I)\n    x9 = merge(x8)\n    x10 = mostcolor(x9)\n    x11 = ofcolor(I, x10)\n    x12 = x11(x8)\n    x13 = ofcolor(I, x10)\n    x14 = last(x13)\n    x15 = ulcorner(x14)\n    x16 = x11(x14)\n    x17 = shift(x11, x16)\n    x18 = ulcorner(x17)\n    x19 = urcorner(x17)\n    x20 = shoot(x19, UNITY)\n    x21 = shoot(x18, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = lrcorner(x2)\n    x24 = rbind(shoot, x38)\n    x25 = mapply(x24, x22)\n    O = fill(I, x10, x25)\n    return O"], [1.0, "def solve_219380fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x1999)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [1.0, "def solve_5e843db7(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_afa6903a(I):\n    x1 = lbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_8dcdf935(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_19d06e6e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vline, hline)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = argmax(x13, numcolors)\n    x15 = apply(ulcorner, x13)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x14)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8f60c184(I):\n    x1 = f28(I)\n    x2 = vmirror(x1)\n    O = hconcat(I, x2)\n    return O"], [1.0, "def solve_8dd05531(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_b6a5cd90(I):\n    x1 = lbind(remove, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, palette)\n    x4 = lbind(lbind, shift)\n    x5 = rbind(argmax, numcolors)\n    x6 = lbind( apply, x5)\n    x7 = compose(x6, toindices)\n    x8 = chain(x3, x7, x4)\n    x9 = rbind(contained, x5)\n    x10 = compose(x9, first)\n    x11 = rbind(sfilter, x10)\n    x12 = lbind(rbind, subtract)\n    x13 = chain(x11, x12, RIGHT)\n    x14 = fork(argmin, x8, x13)\n    x15 = compose(x4, x14)\n    x16 = fork(shift, x15, ulcorner)\n    x17 = mapply(x16, x1)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_245e41b6(I):\n    x1 = lbind(apply, maximum)\n    x2 = apply(x1, I)\n    x3 = interval(ZERO, FIVE, ONE)\n    x4 = pair(x2, x3)\n    x5 = rbind(add, THREE)\n    x6 = rbind(subtract, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = lbind(apply, maximum)\n    x10 = chain(x9, asobject, x8)\n    x11 = fork(filter, x10, x6)\n    x12 = compose(size, x11)\n    x13 = argmin(x4, x12)\n    x14 = ofcolor(I, x13)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x14, x17)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_aacf595b(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_6c1ae3d1(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_a85fbe35(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_e5855a4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    O = mfilter(x2, square)\n    return O"], [1.0, "def solve_13e8d3b4(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, THREE)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = combine(x4, x12)\n    x14 = recolor(FIVE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_d59623d9(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_49c7395e(I):\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = divide(x23, x17)\n    x25 = increment(x24)\n    x26 = width(I)\n    x27 = divide(x26, x25)\n    x28 = increment(x27)\n    x29 = invert(x25)\n    x30 = increment(x28)\n    x31 = interval(x29, x30, ONE)\n    x32 = invert(x28)\n    x33 = increment(x28)\n    x34 = interval(x32, x33, ONE)\n    x35 = product(x31, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x21)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_874b43ac(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6278ed61(I):\n    x1 = trim(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(x1)\n    x5 = lefthalf(x4)\n    x6 = numcolors(x5)\n    x7 = equality(x6, ONE)\n    x8 = righthalf(x5)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x3, x8, x10)\n    x12 = extract(x11, last)\n    x13 = first(x12)\n    x14 = trim(x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(I, x16)\n    x18 = toindices(x16)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, TWO)\n    x24 = mapply(first, x23)\n    x25 = paint(x21, x24)\n    x26 = replace(x25, ONE, SIX)\n    x27 = paint(x26, TWO)\n    x28 = rbind(65, TWO)\n    x29 = fgpartition(x27)\n    x30 = merge(x29)\n    x31 = recolor(TWO, x30)\n    x32 = initset(x28)\n    x33 = insert(x27, x32)\n    x34 = insert(x31, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x34)\n    x37 = dmirror(x35)\n    x38 = combine(x34, x37)\n    x39 = paint(x36, x38)\n    O = x35(x39)\n    return O"], [1.0, "def solve_ac45bfaa(I):\n    x1 = subgrid(x1, I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_bdaa5977(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = leftmost(x8)\n    x10 = rbind(contained, x9)\n    x11 = compose(flip, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x5)\n    x15 = greater(x13, x14)\n    x16 = branch(x15, x12, x13)\n    x17 = contained15(I, x16)\n    x18 = height(x17)\n    x19 = divide(x18, THREE)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = crop(I, ORIGIN, x21)\n    x23 = hupscale(x22, x19)\n    x24 = chain(positive, size, x23)\n    x25 = contained(x17, x24)\n    x26 = flip(x25)\n    x27 = branch(x26, x25, x22)\n    x28 = multiply(x27, FOUR)\n    x29 = add(x28, TWO)\n    x30 = branch(x26, x26, x29)\n    x31 = branch(x25, x27, x30)\n    x32 = multiply(x31, FOUR)\n    x33 = add(x32, TWO)\n    x34 = canvas(x12, x33)\n    x35 = ofcolor(x34, x12)\n    x36 = shift(x35, UNITY)\n    O = fill(x34, EIGHT, x36)\n    return O"], [1.0, "def solve_55862881(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db258008(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = lbind(greater, x9)\n    x11 = compose(x10, height)\n    x12 = rbind(greater, x11)\n    x13 = compose(x12, width)\n    x14 = matcher(x13, ZERO)\n    x15 = fork(either, x14, x15)\n    x16 = rbind(greater, ONE)\n    x17 = compose(x16, height)\n    x18 = matcher(x17, ZERO)\n    x19 = fork(either, x18, x15)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x2, x14)\n    x22 = mfilter(x2, x20)\n    x23 = fill(I, x8, x21)\n    O = fill(x23, x8, x22)\n    return O"], [1.0, "def solve_58f0c133(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_47806297(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2293b2e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ea5d898d(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(lowermost, x2)\n    x4 = apply(x3, I)\n    x5 = merge(x4)\n    x6 = lbind(colorcount, x5)\n    x7 = compose(toivec, x6)\n    x8 = apply(x7, x5)\n    x9 = argmin(x8, size)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = shoot(x10, DOWN_LEFT)\n    x13 = ofcolor(x11, x9)\n    x14 = normalize(x11)\n    x15 = difference(x13, x14)\n    x16 = toobject(x15, x11)\n    x17 = mostcolor(x16)\n    x18 = colorcount(I, x17)\n    x19 = leftmost(x9)\n    x20 = rbind(astuple, x19)\n    x21 = apply(x20, x15)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x17)\n    x24 = fill(I, ONE, x23)\n    x25 = mapply(x22, x15)\n    O = fill(x24, x9, x25)\n    return O"], [1.0, "def solve_9a3c4275(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_bff64c28(I):\n    x1 = remove(ZERO, x1)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = rbind(rbind,0000000)\n    x5 = lbind(lbind, shoot)\n    x6 = lbind(x5, x4)\n    x7 = lbind(lbind, mapply)\n    x8 = chain(x6, x7, box)\n    x9 = x3(x1)\n    x10 = x8(x9)\n    x11 = fork(recolor, color, x8)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_96adac5a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = order(x8, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = subgrid(x11, x12)\n    x14 = trim(x13)\n    x15 = subgrid(x14, x12)\n    x16 = replace(x15, ONE, TWO)\n    x17 = replace(x16, EIGHT, TWO)\n    x18 = compress(x17)\n    x19 = upscale(x18, THREE)\n    x20 = ofcolor(x19, TWO)\n    x21 = ofcolor(x19, ONE)\n    x22 = rbind(gravitate, x20)\n    x23 = compose(x22, initset)\n    x24 = fork(multiply, identity, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x19)\n    x28 = width(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = multiply(x29, THREE)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x29)\n    x33 = lbind(shift, x12)\n    x34 = mapply(x33, x32)\n    O = paint(x6, x34)\n    return O"], [1.0, "def solve_f002ec71(I):\n    O = branch(x1, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_50c9f3be(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_330ea031(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6de1c2bc(I):\n    x1 = trim(I)\n    x2 = objects(I, T, F, F)\n    x3 = vperiod(x2)\n    x4 = shift(x2, x3)\n    x5 = THREE(x4, NEG_ONE)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = apply(double, x6)\n    x8 = apply(decrement, x7)\n    x9 = papply(astuple, x7, x8)\n    x10 = apply(ulcorner, x8)\n    x11 = mapply(neighbors, x10)\n    x12 = apply(toindices, x8)\n    x13 =lbind(shoot, UP_RIGHT)\n    x14 = mapply(x13, x12)\n    x15 = fill(I, FOUR, x14)\n    x16 = chain(x17, x10, initset)\n    x17 = corners(x4)\n    x18 = insert(x14, x17)\n    x19 = lbind(contained, ZERO)\n    x20 = shoot(x4, x19)\n    x21 = branch(x20, height, width)\n    x22 = x21(I)\n    x23 = ofcolor(x22, ZERO)\n    x24 = asindices(x22)\n    x25 = x24(x24)\n    x26 = x25(x22)\n    x27 = intersection(x23, x26)\n    x28 = fill(x22, ZERO, x27)\n    O = fill(x28, ZERO, x1)\n    return O"], [1.0, "def solve_f2de09ea(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_ae6b992d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0a3221bb(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, minimum)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_6c03923f(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_ebeec005(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_efca7946(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_1436ab20(I):\n    ONE = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_00132df3(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_71550f23(I):\n    x1 = trim(I)\n    x2 = recolor(281, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [1.0, "def solve_27f020e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = colorfilter(x4, x7)\n    x9 = rbind(toobject, I)\n    x10 = rbind(colorcount, x7)\n    x11 = chain(x10, x9, color)\n    x12 = matcher(x11,12)\n    x13 = subtract(leFT, x12)\n    x14 = astuple(x13, x13)\n    x15 = canvas(x3, x14)\n    x16 = hconcat(x15, x15)\n    x17 = hmirror(x16)\n    O = vconcat(x16, x17)\n    return O"], [1.0, "def solve_daab482e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, first, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_9606ce8a(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_b92f26f0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(x4, x3, x7)\n    return O"], [1.0, "def solve_dd1e6082(I):\n    x1 = vmirror(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = size(x1)\n    x9 = canvas(x7, x8)\n    x10 = asobject(x1)\n    x11 = matcher(first, x7)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = shape(I)\n    x15 = double(x14)\n    x16 = divide(x15, THREE)\n    x17 = multiply(x16, TWO)\n    x18 = canvas(multiply, x17)\n    x19 = bottomhalf(I)\n    x20 = lbind(shift, x19)\n    x21 = objects(x18, T, F, T)\n    x22 = merge(x21)\n    x23 = paint(x18, x22)\n    x24 = astuple(x26, x23)\n    x25 = replace(x24, x7, x5)\n    x26 = combine(x20, x25)\n    x27 = paint(x23, x26)\n    x28 = astuple(x25, x13)\n    x29 = astuple(x28, x22)\n    x30 = initset(x29)\n    x31 = insert(x27, x30)\n    x32 = backdrop(x31)\n    x33 = mapply(x32, x26)\n    O = paint(x22, x33)\n    return O"], [1.0, "def solve_5176d7d0(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorcount, I)\n    x6 = argmin(x4, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = normalize(x3)\n    x10 = lefthalf(x8)\n    x11 = righthalf(x8)\n    x12 = width(x9)\n    x13 = width(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x11)\n    x16 = height(x9)\n    x17 = height(x10)\n    x18 = divide(x16, x17)\n    x19 = astuple(x14, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x9)\n    x25 = mapply(x24, x23)\n    x26 = paint(x8, x25)\n    x27 = subgrid(x3, x26)\n    O = replace(x27, x6, x13)\n    return O"], [1.0, "def solve_fd94cf39(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(Judim, merge, x3)\n    x5 = apply(x4, x7)\n    x6 = merge(x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_1bd727ce(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6682fd6e(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = hperiod(x5)\n    x7 = width(I)\n    x8 = multiply(x7, x6)\n    x9 = multiply(UNITY, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = multiply(x5, x10)\n    x12 = lbind(multiply, x11)\n    x13 = neighbors(ORIGIN)\n    x14 = mapply(neighbors, x13)\n    x15 = lbind(shift, x14)\n    x16 = height(I)\n    x17 = divide(x16, x6)\n    x18 = increment(x17)\n    x19 = width(I)\n    x20 = divide(x19, x6)\n    x21 = increment(x20)\n    x22 = asobject(I)\n    x23 = shape(I)\n    x24 = decrement(x23)\n    x25 = lbind(multiply, x24)\n    x26 = toivec(x25)\n    x27 = apply(x25, x20)\n    x28 = apply(x25, x22)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_c96b310f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = center(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = apply(x11, x5)\n    x13 = argmin(x12, x11)\n    x14 = ofcolor(x13, ZERO)\n    x15 = ofcolor(x13, ONE)\n    x16 = rbind(colorcount, SIX)\n    x17 = argmax(x15, x16)\n    x18 = shape(x13)\n    x19 = canvas(ZERO, x18)\n    x20 = lbind(g16, x13)\n    x21 = lbind(gbind, subtract)\n    x22 = compose(x21, palette)\n    x23 = lbind(recolor, x17)\n    x24 = rbind(ofcolor, x17)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(canvas, NEG_ONE)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x27, x23)\n    x29 = compose(x17, x28)\n    x30 = fork(intersection, x29, identity)\n    x31 = branch(x3, x29, x30)\n    x32 = mapply(x31, x14)\n    x33 = ofcolor(x13, ONE)\n    x34 = shift(x33, x17)\n    O = paint(x19, x34)\n    return O"], [1.0, "def solve_f4625437(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(outbox, outbox, outbox)\n    x5 = mapply(x4, x3)\n    x6 = corners(ORIGIN)\n    x7 = dmirror(I)\n    x8 = insert(UNITY, x7)\n    x9 = insert(SEITY, x8)\n    x10 = increment(x6)\n    x11 = x9(x110)\n    x12 = tojvec(x10)\n    x13 = lbind(shift, x12)\n    x14 = chain(x13, toivec, x8)\n    x15 = mapply(x14, x9)\n    x16 = paint(x1, x15)\n    O = x4(x16)\n    return O"], [1.0, "def solve_cce033ee(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_6c229708(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_f9556571(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_283b96cf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = lbind(repeat, x16)\n    x18 = compose(dmirror, merge)\n    x19 = rbind(rapply, x2)\n    x20 = compose(initset, x17)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(xycolors, THREE)\n    x24 = decrement(x23)\n    x25 = height(x7)\n    x26 = matcher(x24, x25)\n    x27 = compose(flip, x26)\n    x28 = mfilter(x1, x27)\n    O = fill(x7, x4, x28)\n    return O"], [1.0, "def solve_65810784(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = shape(I)\n    x13 = maximum(x12)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = maximum(x5)\n    x17 = lbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x45)\n    x20 = mapply(x19, x18)\n    O = fill(I, x8, x20)\n    return O"], [1.0, "def solve_7808f7a4(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3ee886d6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(I)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_dac20f8c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_1ce6c49f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9ae1084b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1555c480(I):\n    x1 = rbind(shoot, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x2)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_25b632db(I):\n    x1 = width(I)\n    x2 = divide(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = astuple(x4, x4)\n    x6 = crop(I, ORIGIN, x5)\n    x7 = hmirror(x6)\n    x8 = vconcat(x6, x7)\n    x9 = double(x4)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = insert(x9, x10)\n    x12 = outbox(x11)\n    x13 = ulcorner(x12)\n    x14 = subgrid(x12, I)\n    x15 = objects(x14, F, T, T)\n    x16 = matcher(first, ZERO)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = merge(x18)\n    x20 = cover(x14, x19)\n    x21 = lbind(shift, x18)\n    x22 = mapply(x21, x20)\n    O = fill(x20, FOUR, x22)\n    return O"], [1.0, "def solve_753ab1a7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(greater, x3)\n    x5 = compose(x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, corners)\n    x8 = mfilter(x6, x7)\n    x9 = mostcolor(I)\n    x10 = fill(I, x9, x8)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, DOWN)\n    x14 = paint(x10, x13)\n    x15 = normalize(x12)\n    x16 = shape(x12)\n    x17 = halve(x16)\n    x18 = invert(x17)\n    x19 = shift(x19, x18)\n    O = paint(x14, x19)\n    return O"], [1.0, "def solve_685e66fa(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shift, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = mostcolor(I)\n    x34 = fill(I, x33, x32)\n    O = fill(x34, ofcolor, x30)\n    return O"], [1.0, "def solve_d18fb2a8(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = rbind(intersection, THREE)\n    x6 = chain(x4, x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = sfilter(x3, x7)\n    x9 = difference(x3, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.0, "def solve_b08cfca4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_87d73330(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_7be97669(I):\n    x1 = rot270(I)\n    x2 = rot90(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(4, x5)\n    return O"], [1.0, "def solve_4cbd252e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_32bd161f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, size)\n    x24 = chain(size, dedupe, size)\n    x25 = compose(x24, x22)\n    x26 = lbind(apply, x11)\n    x27 = chain(ssize, dedupe, x26)\n    x28 = fork(rapply, x27, x22)\n    x29 = compose(first, x28)\n    x30 = compose(x19, x22)\n    x31 = fork(compose, x30, x29)\n    x32 = lbind(sfilter, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(asobject, x33, x33)\n    x35 = mapply(x34, x4)\n    x36 = shift(x35, UNITY)\n    x37 = paint(I, x36)\n    O = rot90(x37)\n    return O"], [1.0, "def solve_6e4c6ee1(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_4746a1ae(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = canvas(x10, x11)\n    return O"], [1.0, "def solve_ae00ba36(I):\n    x1 = rbind(connect, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_dcf3305a(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b4076f66(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_ab3db620(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(rapply, I)\n    x5 = compose(initset, x4)\n    x6 = chain(first, x4, x5)\n    x7 = compose(x6, last)\n    x8 = lbind(fork, equality)\n    x9 = compose(x8, x7)\n    x10 = lbind(matcher, first)\n    x11 = compose(x10, x7)\n    x12 = fork(sfilter, x7, x11)\n    x13 = compose(asobject, x12)\n    x14 = apply(x13, x2)\n    x15 = difference(x14, x2)\n    x16 = mapply(x12, x15)\n    x17 = fill(I, ONE, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(urcorner, x2)\n    x20 = apply(llcorner, x2)\n    x21 = pair(x19, x20)\n    x22 = fork(add, first, last)\n    x23 = replace(x17, NINE, ZERO)\n    x24 = fork(add, first, last)\n    x25 = fork(add, x22, x24)\n    x26 = lbind(multiply, x17)\n    x27 = apply(x26, x21)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(occurrences, x174)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x25)\n    x33 = fork(paint, identity, x32)\n    x34 = mapply(x33, x27)\n    O = x21(x34)\n    return O"], [1.0, "def solve_0fb82451(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_11ef7160(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_272de656(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_99e5d949(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(feca, x10)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_a9017ece(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = lefthalf(x2)\n    x4 = tophalf(I)\n    x5 = righthalf(x4)\n    x6 = bottomhalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = lefthalf(x8)\n    x10 = index(x3, x5)\n    x11 = branch(x10, asindices, x3)\n    x12 = branch(x10, initset, x5)\n    x13 = add(x12, DOWN)\n    x14 = insert(x13, x11)\n    x15 = index(x6, x1)\n    x16 = lrcorner(x15)\n    x17 = add(x16, UP_RIGHT)\n    x18 = insert(x17, x14)\n    x19 = shift(x18, UNITY)\n    O = paint(x3, x19)\n    return O"], [1.0, "def solve_a0d171f2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x19 = fork(combine, x5, x8)\n    x20 = index(I, x2)\n    x21 = x9(x2)\n    O = canvas(x20, x4)\n    return O"], [1.0, "def solve_6dde8f5c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_f1568d73(I):\n    O = move(I, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_7ba841fd(I):\n    x1 = initset(ORIGIN)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [1.0, "def solve_c1557e15(I):\n    x1 = TWO(I)\n    x2 = dmirror(x1)\n    O = papply(pair, x1, x2)\n    return O"], [1.0, "def solve_f25b3266(I):\n    x1 = rbind(ofcolor, TWO)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = lbind(colorcount, I)\n    x16 = argmax(x14, x15)\n    x17 = ofcolor(x11, x16)\n    x18 = subgrid(x17, x11)\n    x19 = mapply(vfrontier, x17)\n    x20 = mapply(hfrontier, x17)\n    x21 = size(x19)\n    x22 = size(x20)\n    x23 = greater(x21, x22)\n    x24 = branch(x23, x8, x19)\n    x25 = branch(x23, x21, x20)\n    x26 = branch(x23, x24, x25)\n    x27 = apply(x26, x24)\n    x28 = mapply(x17, x27)\n    x29 = dmirror(x28)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x20, x30)\n    O = x10(x31)\n    return O"], [1.0, "def solve_4fe42391(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_79bd075b(I):\n    x1 = subgrid(x2, I)\n    x2 = trim(x1)\n    O = replace(x1, ZERO, x2)\n    return O"], [1.0, "def solve_af2bdda3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4b63cf9a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_866194ee(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_123e600d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(chain, initset)\n    x7 = lbind(x6, last)\n    x8 = lbind(rbind, arg)\n    x9 = lbind( lbind, occurrences)\n    x10 = chain(x7, x8, x9)\n    x11 = first(x5)\n    x12 = errmost(x11)\n    x13 = subgrid(x12, I)\n    x14 = matcher(first, x3)\n    x15 = compose(flip, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = apply(x17, x13)\n    x19 = last(x18)\n    x20 = matcher(first, x4)\n    x21 = compose(flip, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = compose(x22, last)\n    x24 = ofcolor(x13, x31)\n    x25 = initset(x24)\n    x26 = matcher(first, x3)\n    x27 = compose(flip, x26)\n    x28 = fork(both, x23, x27)\n    x29 = sfilter(x24, x28)\n    x30 = shift(x29, UNITY)\n    x31 = merge(x4)\n    x32 = cover(x13, x31)\n    x33 = mapply(x32, x30)\n    O = paint(x20, x33)\n    return O"], [1.0, "def solve_38d20a1e(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_55c97ba6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = mfilter(x12, x16)\n    x18 = color(x17)\n    x19 = subgrid(x17, I)\n    x20 = objects(x19, F, T, T)\n    x21 = rbind(colorcount, x10)\n    x22 = valmax(x20, x21)\n    x23 = rbind(colorcount, x10)\n    x24 = matcher(x23, x22)\n    x25 = sfilter(x12, x24)\n    x26 = mapply(dneighbors, x25)\n    x27 = mapply(ineighbors, x25)\n    x28 = toobject(x27, x19)\n    x29 = mostcolor(x28)\n    x30 = colorfilter(x25, x29)\n    x31 = objects(x30, T, T, T)\n    x32 = rbind(adjacent, x17)\n    x33 = mfilter(x31, x32)\n    x34 = replace(x19, x10, x3)\n    O = fill(x34, x39, x33)\n    return O"], [1.0, "def solve_58f94ee5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_daf86606(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(first, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 =rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [1.0, "def solve_22b5a4a9(I):\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, vline)\n    x3 = lbind(contained, TWO)\n    x4 = compose(x3, hline)\n    x5 = fork(manhattan, x2, x4)\n    x6 = compose(d07, x5)\n    x7 = fork(multiply, height, width)\n    x8 = compose(decrement, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x4)\n    x11 = fork(both, x3, x5)\n    x12 = fork(both, x10, x11)\n    x13 = mfilter(x9, x12)\n    O = fill(I, TWO, x13)\n    return O"], [1.0, "def solve_a6a720ab(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = palette(I)\n    x30 = remove(x8, x29)\n    x31 = other(x30, x1)\n    x32 = ofcolor(I, x31)\n    x33 = mapply(x24, x32)\n    x34 = shift(x33, UNITY)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_d2d925f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = divide(x4, x5)\n    x7 = width(x3)\n    x8 = interval(ZERO, x7, FOUR)\n    x9 = mpapply(recolor, x8, x4)\n    x10 = paint(I, x9)\n    x11 = rbind(ofcolor, x3)\n    x12 = compose(normalize, x11)\n    x13 = rbind(shift, x12)\n    x14 = height(x2)\n    x15 = divide(x14, x5)\n    x16 = increment(x15)\n    x17 = width(x2)\n    x18 = divide(x17, x5)\n    x19 = increment(x18)\n    x20 = invert(x16)\n    x21 = increment(x19)\n    x22 = canvas(ZERO, x21)\n    x23 = asindices(x22)\n    x24 = shift(x23, x20)\n    O = fill(x22, EIGHT, x24)\n    return O"], [1.0, "def solve_834078d9(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b41b438c(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = x3(I)\n    x5 = compress(x4)\n    x6 = leastcolor(x5)\n    x7 = mostcolor(x5)\n    x8 = ofcolor(x5, x6)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = mostcolor(x10)\n    x12 = extract(x6, x11)\n    x13 = combine(x10, x12)\n    x14 = fill(x5, x6, x13)\n    x15 = ofcolor(x5, x12)\n    x16 = gravitate(x15, x4)\n    x17 = shift(x15, x16)\n    O = fill(x14, x6, x17)\n    return O"], [1.0, "def solve_1b61193a(I):\n    x1 = shape(I)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = objects(x3, F, F, T)\n    x5 = argmin(x4, size)\n    x6 = cover(I, x5)\n    x7 = toindices(x5)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = fill(x6, TWO, x9)\n    return O"], [1.0, "def solve_9e9cc779(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dc2fa2cf(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_30f9ca0e(I):\n    x1 = asindices(I)\n    x2 = apply(first, x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, x3)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = cover(x6, x4)\n    O = paint(x7, x4)\n    return O"], [1.0, "def solve_5adc63a2(I):\n    x1 = hvsplit(I, TWO)\n    x2 = apply(numcolors, x1)\n    x3 = equality(x2, TWO_BY_TWO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [1.0, "def solve_434bec84(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, size)\n    x4 = shape(x3)\n    x5 = canvas(x1, x4)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = width(x8)\n    x14 = interval(x9, x13, x11)\n    x15 = lbind(astuple, x14)\n    x16 = lbind(subtract, x14)\n    x17 = rbind(subtract, x9)\n    x18 = compose(x15, x17)\n    x19 = product(x13, x10)\n    x20 = sizefilter(x19, ONE)\n    x21 = apply(x18, x20)\n    x22 = rbind(shoot, DOWN)\n    x23 = mapply(x22, x21)\n    x24 = fill(x5, x1, x23)\n    x25 = apply(x19, x101)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = fill(x24, x8, x27)\n    return O"], [1.0, "def solve_225836ea(I):\n    x1 = rbind(difference, toindices)\n    x2 = lbind(apply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(sfilter, first, x3)\n    x5 = chain(size, dedupe, x4)\n    x6 = size(x1)\n    x7 = positive(x6)\n    x8 = branch(x7, x4, x5)\n    x9 = compose(positive, size)\n    x10 = lbind( extantract, x9)\n    x11 = chain(x10, x3, x5)\n    x12 = compose(x7, x11)\n    x13 = fork(multiply, x12, x5)\n    x14 = compose(color, x12)\n    x15 = fork(recolor, x13, x14)\n    x16 = mapply(x15, x1)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_6f160633(I):\n    x1 = matcher(ZERO, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_d322c914(I):\n    x1 = argmax(x1, size)\n    x2 = remove(x1, x1)\n    x3 = merge(x2)\n    x4 = fill(I, SIX, x3)\n    x5 = merge(x2)\n    O = fill(x4, TWO, x5)\n    return O"], [1.0, "def solve_d537d7e7(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, TWO)\n    x3 = matcher(first, THREE)\n    x4 = matcher(first, TWO)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, T)\n    x7 = rbind(x6, F)\n    x8 = lbind(contained, THREE)\n    x9 = compose(x8, palette)\n    x10 = lbind(contained, TWO)\n    x11 = compose(x10, palette)\n    x12 = rbind(sfilter, x9)\n    x13 = compose(x12, x7)\n    x14 = rbind(sfilter, x11)\n    x15 = compose(x14, x7)\n    x16 = rbind(argmax, numcolors)\n    x17 = chain(normalize, x16, x13)\n    x18 = rbind(argmax, numcolors)\n    x19 = compose(x78, x15)\n    x20 = chain(ulcorner, x18, x19)\n    x21 = rbind(shift, NEG_UNITY)\n    x22 = compose(x21, x17)\n    x23 = compose(x21, x15)\n    x24 = fork(combine, x22, x23)\n    x25 = compose(x21, x15)\n    x26 = fork(difference, x24, x25)\n    x27 = fork(recolor, x26, x21)\n    x28 = mapply(x27, x1)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_9f009019(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_f4c1e8ce(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 =hconcat(I, x9)\n    x11 = objects(x10, F, F, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_c866952b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = rbind(multiply, x6)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = pair(x12, x16)\n    x18 = compose(size, dedupe)\n    x19 = apply(x18, x17)\n    x20 = lbind(43, x1)\n    x21 = delta(x2)\n    x22 = apply(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = apply(size, x23)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x16, x26)\n    x28 = lbind(43, x2)\n    x29 = mapply(x28, x27)\n    x30 = mostcolor(I)\n    x31 = fill(I, x30, x29)\n    O = leastcolor(x31)\n    return O"], [1.0, "def solve_a6659948(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_92035cec(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = rbind(subgrid, I)\n    x3 = chain(x2, asobject, x1)\n    x4 = x3(I)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = hfrontier(x5)\n    x8 = astuple(x6, x7)\n    x9 = fill(x4, ZERO, x8)\n    x10 = vfrontier(x6)\n    x11 = intersection(x10, x6)\n    O = fill(x9, ZERO, x11)\n    return O"], [1.0, "def solve_3f5474fd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, branch)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = subgrid(x5, x3)\n    x10 = trim(x9)\n    x11 = replace(x10, x7, x8)\n    x12 = combine(x7, x6)\n    x13 = apply(ulcorner, x12)\n    x14 = normalize(x12)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x13)\n    x17 = fill(x11, x9, x16)\n    O = fill(x17, UNITY, x7)\n    return O"], [1.0, "def solve_6662bf08(I):\n    x1 = ofcolor(I, TWO)\n    x2 = prapply(connect, x1, x1)\n    x3 = lbind(greater, SIX)\n    x4 = compose(x3, size)\n    x5 = fork(either, vline, hline)\n    x6 = fork(both, x4, x5)\n    x7 = matcher(numcolors, SIX)\n    x8 = sfilter(x2, x7)\n    x9 = difference(x2, x8)\n    x10 = apply(normalize, x8)\n    x11 = astuple(x10, identity)\n    x12 = CPUindices(x11)\n    x13 = lbind(matcher, x7)\n    x14 = sfilter(x12, x13)\n    x15 = difference(x12, x14)\n    x16 = lbind(recolor, SIX)\n    x17 = compose(x16, delta)\n    x18 = fork(combine, first, x17)\n    x19 = apply(x18, x15)\n    x20 = fork(paint, identity, x19)\n    x21 = apply(x20, x5)\n    x22 = pair(x19, x21)\n    x23 = mapply(dneighbors, x22)\n    x24 = difference(x23, x22)\n    x25 = mostcolor(I)\n    x26 = ofcolor(I, x25)\n    x27 = x25(x26)\n    O = fill(I, x27, x24)\n    return O"], [1.0, "def solve_6b256f21(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = delta(x4)\n    x6 = center(x5)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(x1, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x5)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x4)\n    x21 = rbind(adjacent, x6)\n    x22 = fork(both, x19, x20)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [1.0, "def solve_f86678ca(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(648, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [1.0, "def solve_8406e629(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_336e4052(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c28a6aaa(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_c3576c6f(I):\n    x1 = cmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_0157e93e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_4d8ba445(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x30)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [1.0, "def solve_91c9ee55(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_2e8d9543(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c87a5a8f(I):\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(DOWN, x2)\n    x4 = decrement(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x1)\n    x7 = add(UP, x6)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(ORIGIN, x9)\n    x11 = height(x1)\n    x12 = height(I)\n    x13 = interval(ZERO, x11, ONE)\n    x14 = width(x1)\n    x15 =Nivec(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = apply(tojvec, x13)\n    x18 = apply(palette, x17)\n    x19 = lbind(apply, connect)\n    x20 = compose(x19, mostcolor)\n    x21 = fork(combine, x18, x20)\n    x22 = pair(x13, x10)\n    x23 = sfilter(x22, x21)\n    x24 = apply(x27, x23)\n    x25 = mapply(x5, x24)\n    O = paint(x1, x25)\n    return O"], [1.0, "def solve_3475e8ad(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x300, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_86e01e63(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3aa3fbbb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_259c6e8b(I):\n    x1 = astuple(rot90, rot909)\n    x2 = astuple(rot180, rotofcolor)\n    x3 = combine(x1, x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x3)\n    x6 = ofcolor(I, ONE)\n    x7 = rbind(shoot, DOWN)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, ZERO, x1)\n    x10 = fill(x9, NEG_ONE, x2)\n    x11 = fill(x10, ONE, x8)\n    O = extract(x1, x5)\n    return O"], [1.0, "def solve_e0d3a022(I):\n    x1 = rbind(7777,7777)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(x3)\n    x5 = papply(pair, x3, x4)\n    x6 = merge(x5)\n    O = subgrid(x6, x4)\n    return O"], [1.0, "def solve_42c2be8f(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_9a3f8be7(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_c2c50757(I):\n    O = subgrid(Feca, I)\n    return O"], [1.0, "def solve_7b4997a5(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = colorfilter(x2, x1)\n    x4 = sfilter(x3, hline)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = frontiers(I)\n    x10 = merge(x9)\n    x11 = mostcolor(x10)\n    x12 = shape(x10)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x13, x8)\n    x15 = objects(x14, F, F, T)\n    x16 = argmax(x15, numcolors)\n    x17 = increment(x16)\n    x18 = interval(TWO, x17, ONE)\n    x19 = lbind(shift, x10)\n    x20 = mapply(x19, x18)\n    x21 = paint(x10, x20)\n    x22 = objects(x21, F, F, T)\n    x23 = rbind(contained, x17)\n    x24 = compose(x23, last)\n    x25 = sfilter(x22, x24)\n    x26 = compose(color, first)\n    x27 = fork(recolor, x26, identity)\n    x28 = mapply(x27, x25)\n    O = paint(x21, x28)\n    return O"], [1.0, "def solve_9aac9656(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_a416a9d1(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_e6259a23(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8ce88826(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(x4, x9)\n    x11 = paint(x10, x3)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = color(x13)\n    x15 = remove(x8, x6)\n    x16 = shoot(x15, UNITY)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x12)\n    x19 = rbind(shoot, DOWN)\n    x20 = initset(x13)\n    x21 = rbind(shoot, x20)\n    x22 = mapply(x21, x12)\n    x23 = subgrid(x18, x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x22, x4)\n    x26 = difference(x24, x25)\n    x27 = lrcorner(x26)\n    x28 = invert(x27)\n    x29 = shift(x25, x28)\n    O = fill(x22, x4, x29)\n    return O"], [1.0, "def solve_01d96f58(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8188d358(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_ea3646c0(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP8RIGHT)\n    x4 = rbind(shoot, DOWN8LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_56006d4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.1, "def solve_df8d8b29(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_830d8a0d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = sfilter(x4, x2)\n    x6 = compose(dmirror, x5)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = double(x8)\n    x10 = apply(x6, x9)\n    x11 = rbind(subgrid, x5)\n    x12 = apply(x11, x10)\n    x13 = cmirror(x12)\n    x14 = hmirror(x13)\n    x15 = astuple(x11, x14)\n    x16 = lbind(et32, FIVE)\n    x17 = compose(x16, x6)\n    x18 = fork(combine, x17, x15)\n    x19 = lbind(lbind, shift)\n    x20 = compose(x19, last)\n    x21 = lbind(rbind, occurrences)\n    x22 = compose(x21, last)\n    x23 = fork(compose, x20, x22)\n    x24 = lbind(lbind, mapply)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, last, x25)\n    x27 = compose(first, x26)\n    x28 = fork(remove, x27, last)\n    x29 = chain(x25, x28, x27)\n    x30 = fork(vline, x29, identity)\n    x31 = chain(decrement, height, x30)\n    x32 = fork(equality, x31, x29)\n    x33 = sfilter(x12, x32)\n    x34 = fork(combine, vfrontier, hfrontier)\n    x35 = compose(x34, x30)\n    x36 = fork(paint, identity, x35)\n    x37 = x32(I)\n    x38 = crop(x37, x32,"], [1.1, "def solve_d8262804(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_3571eb13(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_e6291cad(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = ONE(I)\n    x2 = SEVEN(x1)\n    x3 = apply(normalize, x2)\n    x4 = astuple(TWO, ONE)\n    x5 = repeat(x4, x3)\n    x6 = combine(x5, x7)\n    x7 = rbind(multiply, THREE)\n    x8 = apply(x7, x6)\n    x9 = I(x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = subtract(x11, ONE)\n    x13 = astuple(THREE, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = hconcat(x14, x14)\n    x16 = hsplit(x15, TWO)\n    x17 = branch(x16, x77, x25ff)\n    x18 = x17(x16)\n    x19 = crop(x18, ORIGIN, x1)\n    x20 = asobject(x19)\n    x21 = x20(x8)\n    x22 = vmirror(x21)\n    x23 = mostcolor(I)\n    x24 = objects(x18, T, F, F)\n    x25 = sizefilter(x24, ONE)\n    x26 = difference(x24, x25)\n    x27 =rollc(x26)\n    x28 = paint(x15, x27)\n    x29 =772indices(x28)\n    x30 = fgpartition(x18)\n    x31 = sizefilter(x30, ONE)\n    x32 = lbind(intersection, x39)\n    x33 = chain(positive, size, x32)\n    x34 = lbind(shift, x29)\n    x35 = rbind(multiply, UNITY)\n    x36 = chain(x35, x34, x31)\n    x37 = lbind(shift, x29)\n    x38 = rbind(multiply, NEG_UNITY)\n    x39 = chain(x37, x38, x31)"], [1.1, "def solve_7bfcf3c9(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(I)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval("], [1.1, "def solve_2c8b58e6(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, frontiers, T)\n    x4 = canvas(ZERO, THREE_BY_THREE)\n    x5 = color(x4)\n    x6 = toivec(x1)\n    x7 = divide(x6, x2)\n    x8 = tojvec(x7)\n    x9 = width(I)\n    x10 = lefthalf(I)\n    x11 = righthalf(I)\n    x12 = equality(x10, x11)\n    x13 = hsplit(x8, x12)\n    x14 = righthalf(I)\n    x15 = palette(x14)\n    x16 = other(x15, x5)\n    x17 = palette(x13)\n    x18 = other(x17, x5)\n    x19 =168\n    x20 =949ighthalf(x13)\n    x21 = righthalf(x13)\n    x22 = vmirror(x21)\n    x23 = solve(x19, x22)\n    x24 = ofcolor(x14, x16)\n    x25 = ofcolor(x13, x18)\n    x26 = insert(x24, x25)\n    x27 = argmin(x26, last)\n    x28 = remove(x27, x26)\n    x29 = remove(x28, x26)\n    x30 = contained(x27, x29)\n    x31 = branch(x30, x22, x25)\n    x32 = 205(x31)\n    x33 = ofcolor(x14, x16)\n    x34 = normalize(x33)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x35, x16)\n    x37 = asindices(x35)\n    x38 = outbox(x37)\n    x39 = backdrop(x38)\n    x40 = branch(x33, x37, x39)\n    x41 = rbind(contained, x37)\n    x42 = compose(x41,"], [1.1, "def solve_2cab3677(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind( sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, F)\n    x10 = rbind(x9, F)\n    x11 = rbind(x10, T)\n    x12 = rbind(argmin, x11)\n    x13 = compose(x12, toindices)\n    x14 = fork(upscale, identity, x13)\n    x15 = compose(x14, rot90)\n    x16 = power(x15, TWO)\n    x17 = x16(I)\n    x18 = rot90(x17)\n    x19 = shape(x18)\n    x20 = canvas(x4, x19)\n    x21 = hconcat(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = rbind(toobject, x21)\n    x24 = compose(x23, trim)\n    x25 = apply(x24, x22)\n    x26 = rbind(colorcount, x4)\n    x27 = valmax(x25, x26)\n    x28 = rbind(colorcount, x4)\n    x29 = matcher(x28, x27)\n    x30 = sfilter(x28, x29)\n    x31 = chain(normalize, toindices, x11)\n    x32 = lbind(mapply, x31)\n    x33 = lbind(ofcolor, x81)\n    x34 = compose(x33, x11)\n    x35 = ofcolor(x18, x4)\n    x36 = difference(x35, x34)\n    x37 =0a15(x36)\n    x38 =446(499883, x37)\n    x39 = rbind(90, x38)"], [1.1, "def solve_bd805858(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_540ce26e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = toindices(x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x2, x7)\n    x9 = lbind(recolor, x1)\n    x10 = rbind(shoot, x8)\n    x11 = chain(x9, x10, initset)\n    x12 = lbind(remove, x8)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(x13, first)\n    x15 = power(last, TWO)\n    x16 = fork(combine, x14, x15)\n    x17 =92max(x6, x16)\n    x18 = astuple(TEN, TEN)\n    x19 = rbind(contained, x18)\n    x20 = chain(flip, x19, ulcorner)\n    x21 = fork(add, x20, x14)\n    x22 = multiply(EIGHT, UNITY)\n    x23 = add(x22, NEG_UNITY)\n    x24 = multiply(x23, UNITY)\n    x25 = neighbors(ORIGIN)\n    x26 = insert(ORIGIN, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = astuple(x28, x26)\n    x30 = repeat(x29, ONE)\n    x31 = combine(x30, x25)\n    x32 = combine(x28, x30)\n    x33 =51925862893(x32, x24)\n    x34 =556(shoot, x3333)\n    x35 = combine(x33, x34)\n    x36 = astuple(x26, xincrement)\n    x37 =226(shoot, x36)\n    x38 = combine(x35, x37)\n    x39 = combine(x31,"], [1.1, "def solve_e02ef634(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = rightmost(x26)\n    x28 = astuple(x25, x27)\n    x29 = ofcolor(x13, x22)\n    x30 = leftmost(x29)\n    x31 = invert(x30)\n    x32 = apply(uppermost, x31)\n    x33 = order(x32, identity)\n    x34 = astuple(x10, x11)\n    x35 = lbind(add, x34)\n    x36 =100(x17)\n    x37 = rbind(add, x36)\n    x38 = chain(x37, x35, x36)\n    x39 = lbind(apply, last)\n    x40 = rbind(sfilter, x38)\n    x41 = chain(x39, x40, x33)\n    x42 = lbind(lbind, shift)\n    "], [1.1, "def solve_c87c69c3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_1b4bb068(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = difference(x1, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorcount(I, x5)\n    x7 = backdrop(x2)\n    x8 = insert(x7, x4)\n    x9 = insert(x6, x8)\n    x10 = branch(x6, x8, x9)\n    x11 =1222(x10)\n    x12 = initset(x11)\n    x13 = complexity(x12, x6)\n    x14 = backdrop(x13)\n    x15 = subgrid(x14, I)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, x5)\n    x18 = backdrop(x17)\n    x19 = subgrid(x18, x15)\n    x20 = height(x19)\n    x21 = subtract(x20, TWO)\n    x22 = astuple(ONE, x21)\n    x23 = colorfilter(x17, x5)\n    x24 = crop(x19, ORIGIN, x22)\n    x25 = hmirror(x24)\n    x26 = replace(x25, x4, x5)\n    x27 = replace(x26, x7, x6)\n    x28 =07(x4)\n    x29 = leftmost(x28)\n    x30 = lbind(contained, x29)\n    x31 = compose(flip, x30)\n    x32 =733(x29, x23)\n    x33 = rbind(contained, x32)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x19, x34)\n    x36 = merge(x35)\n    x37 = palette(x36)\n    x38 = lbind(colorcount, x36)\n    x39 = compose(x38, first)\n    x40 = colorfilter(x1, x5)\n    x41 ="], [1.1, "def solve_522c24b5(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = rbind(argmin, DOWN)\n    x2 = compose(first, x1)\n    x3 = fork(subtract, last, x2)\n    x4 = x3(I)\n    x5 = double(x4)\n    x6 = interval(ZERO, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = astuple(ccement, NEG_TWO)\n    x9 = lbind(shift, x8)\n    x10 = rbind(multiply, x5)\n    x11 = compose(x10, x9)\n    x12 = lbind(shift, x13)\n    x13 = rbind(multiply, x4)\n    x14 = compose(x12, x13)\n    x15 = fork(astuple, x11, x14)\n    x16 = lbind(apply, uppermost)\n    x17 = chain(maximum, x16, x15)\n    x18 = lbind(colorfilter, x7)\n    x19 = chain(x18, color, x7)\n    x20 = fork(sfilter, x17, x19)\n    x21 = lbind(mapply, x20)\n    x22 = rbind(occurrences, x4)\n    x23 = compose(x21, x22)\n    x24 = fork(paint, identity, x23)\n    x25 = chain(x20, x21, x24)\n    x26 = lbind(mapply, vfrontier)\n    x27 = chain(x26, x25, x27)\n    x28 = lbind(paint, x2)\n    x29 = chain(x27, x28, x27)\n    x30 = compose(x24, x27)\n    x31 = fork(mapply, x30, x29)\n    x32 = fork(paint, identity, x31)\n    x33 = rbind(apply, x32149)\n    x34 = chain(lowermost, x33, x27)\n    x35 = fork(recolor, x24, x34)\n    x36 = astuple(ONE, THREE"], [1.1, "def solve_3fc9866c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = matcher( identity, ZERO)\n    x2 = toindices(x1)\n    x3 = rbind(20000, x2)\n    x4 = toindices(x1)\n    x5 = rbind(contained, x4)\n    x6 = lbind(extract, x5)\n    x7 = compose(x6, initset)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(positive, size, x8)\n    x10 = size(x2)\n    x11 = power(x9, x10)\n    x12 = chain(size, x5, x11)\n    x13 = palette(I)\n    x14 = lbind(sfilter, x13)\n    x15 = lbind(matcher, x7)\n    x16 = compose(x14, x15)\n    x17 = chain(x39, x14, x16)\n    x18 = fork(difference, identity, x17)\n    x19 = lbind(recolor, EIGHT)\n    x20 = compose(x19, x18)\n    x21 = fork(paint, identity, x20)\n    x22 = compose(center, first)\n    x23 = fork(add, x22, x202)\n    x24 = chain(toobject, x21, x23)\n    x25 = colorfilter(x7, ZERO)\n    x26 = chain(first, x24, x25)\n    x27 = fork( UnknownITY, x26, x24)\n    x28 = fork(insert, x27, x19)\n    x29 = fork(insert, x28, x79)\n    x30 = fork(insert, x29, x21)\n    x31 = fork(remove, x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = fork(add, x22, x12)\n    x34 = fork(add, x33, x32)\n    x35 = fork(add, x34, x29)\n    x36 = fork(connect, x22, x25)\n    x37 = fork(connect, x26,"], [1.1, "def solve_f96b4cba(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_35392ba3(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_7c66d00b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = normalize(x11)\n    x13 = leftmost(x12)\n    x14 = mostcolor(I)\n    x15 = uppermost(x12)\n    x16 = leftmost(x11)\n    x17 = astuple(x13, x14)\n    x18 = ulcorner(x12)\n    x19 = increment(x18)\n    x20 = lbind(subtract, x19)\n    x21 = rbind(toobject, I)\n    x22 = compose(x20, x21)\n    x23 = lbind(shift, x8)\n    x24 = rbind(multiply, x19)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(shift, x8)\n    x27 = rbind(multiply, x16)\n    x28 = chain(x26, x27, x22)\n    x29 = rbind(multiply, x15)\n    x30 = compose(x28, x29)\n    x31 = fork(add, x25, x30)\n    x32 = compose(x31, x21)\n    x33 = fork(combine, x28, x32)\n    x34 = fork(mapply, x33, x29)\n    x35 = fork(paint, identity, x34)\n    x36 = fork(equality, identity, dmirror)\n    x37 =495(x36)\n    x38 = mfilter(x37, vline)\n    x39 = paint(x35, x38)\n    x40 = branch"], [1.1, "def solve_ce544482(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_538f0956(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, FIVE)\n    x10 = rbind(adjacent, x4)\n    x11 = sfilter(x9, x10)\n    x12 = difference(x9, x11)\n    x13 = merge(x12)\n    x14 = cover(x7, x13)\n    x15 = shoot(ORIGIN, UNITY)\n    x16 = shoot(x15, RIGHT)\n    x17 = shoot(x16, LEFT)\n    x18 = shoot(x17, UP_RIGHT)\n    x19 = shoot(x18, LEFT)\n    x20 = combine(x15, x19)\n    x21 = rbind(subgrid, x20)\n    x22 = chain(palette, x21, rot90)\n    x23 = rbind(subgrid, x20)\n    x24 = compose(I, x23)\n    x25 = chain(palette, x21, x24)\n    x26 = rbind(ofcolor, FIVE)\n    x27 = compose(x26, x25)\n    x28 = chain(x17, x24, x27)\n    x29 = rbind(colorcount, TWO)\n    x30 = multiply(x29, x9)\n    x31 = power(x28, x30)\n    x32 = x31(x16)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = palette(x33)\n    x36 = other(x35, FOUR)\n    x37 = ofcolor(x33, x106)\n    x38 = ofcolor(x33, xr)\n    x39 = intersection(x37, x38)\n    x"], [1.1, "def solve_9356794d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_f3214fc2(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_23e42021(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = rbind(multiply, x4)\n    x6 = chain(toindices, x5, x6)\n    x7 = matcher(x6, ZERO)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    x12 = fill(I, x1, x11)\n    x13 = argmax(x9, width)\n    x14 = rbind(multiply, x4)\n    x15 = compose(x14, width)\n    x16 = argmax(x13, x15)\n    x17 = center(x16)\n    x18 = initset(x17)\n    x19 = cover(I, x18)\n    x20 = toindices(x16)\n    x21 = inbox(x16)\n    x22 = center(x21)\n    x23 = initset(x22)\n    x24 = fill(x19, x1, x23)\n    x25 = toobject(x24, x25)\n    x26 = objects(x28, T, F, T)\n    x27 = colorfilter(x26, x1)\n    x28 = rbind(toobject, x25)\n    x29 = chain(x28, x27, neighbors)\n    x30 = mapply(x29, x27)\n    x31 = astuple(x15, x14)\n    x32 = shift(x30, x31)\n    x33 = paint(x12, x32)\n    x34 = toindices(x16)\n    x35 = fork(insert, ulcorner, lrcorner)\n    x36 = fork(shift, identity, x35)\n    x37 = apply(x36, x34)\n    x38 = rbind(contained, x37)\n    x39 = rbind(sfilter,"], [1.1, "def solve_43606b81(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot180(I)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(positive, size)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(x2, x4, frontiers)\n    x6 = chain(size, dedupe, first)\n    x7 = chain(size, dedupe, last)\n    x8 = fork(greater, x6, x7)\n    x9 = fork(both, x5, x8)\n    x10 = lefthalf(x1)\n    x11 = righthalf(x1)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x12, x9)\n    x14 = power(x13, TWO)\n    x15 = branch(x10, x14, x4)\n    x16 = x15(x1)\n    x17 = x15(x2)\n    x18 = toindices(x16)\n    x19 = toindices(x17)\n    x20 = hfrontier(x18)\n    x21 = fill(x16, ZERO, x20)\n    x22 = fill(x21, x19, x20)\n    x23 = dedicated01945(x17)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, x25)\n    x26 = x25(x17)\n    x27 = palette(x26)\n    x28 = remove(ZERO, x27)\n    x29 = lbind(colorcount, x16)\n    x30 = argmax(x28, x29)\n    x31 = rbind(contained, x30)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(size, x33, first)\n    x35 = matcher(x34, ONE)\n    x36 = compose(size, last)\n    x37 = matcher(x36, ONE)\n    x38 = fork(either, x35, x37)\n    x39 = sfilter(x1, x38)\n"], [1.1, "def solve_9b6747d7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_aaf28fbe(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = upscale(x4, x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    x6 = toindices(x5)\n    x7 =lrcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(I, ZERO, x8)\n    x10 = asindices(x9)\n    x11 = to corners(x10)\n    x12 = toobject(x11, I)\n    x13 = asindices(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x15, x5)\n    x17 = fill(x9, x13, x16)\n    x18 =1988indices(x16)\n    x19 = lbind(adjacent, x18)\n    x20 = rbind(toobject, x15)\n    x21 = chain(x19, backdrop, x20)\n    x22 = compose(x5, x21)\n    x23 = fork(both, x21, x22)\n    x24 = rbind(numcolors, ONE)\n    x25 = compose(x24, decrement)\n    x26 = matcher(x25, ONE)\n    x27 = fork(both, x26, x23)\n    x28 = rbind(multiply, x22)\n    x29 = compose(x28, asindices)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x16, x30)\n    x32 = rbind(multiply, THREE)\n    x33 = compose(x32, x31)\n    x34 = fork(equality, identity, x33)\n    x35 = sfilter(x31, x34)\n    x36 =1999(x35)\n    x37 =0900(x16, x36)\n    x38 = paint(x37, x37)\n    x39 = fill(x38, x15"], [1.1, "def solve_f9f7d176(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_e3f7bbb4(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_c8b25e25(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_832d2894(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(normalize, x5)\n    x7 = chain(x4, x6, dmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(invert, x8)\n    x10 = power(x9, FOUR)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(initset, x11)\n    x13 = chain( begins, x11, x12)\n    x14 = rbind(branch, identity)\n    x15 = rbind(x14, x13)\n    x16 = chain(size, x15, x13)\n    x17 = partition(I)\n    x18 = fork(equality, x16, x17)\n    x19 = fork(both, x18, ONE)\n    x20 = extract(x19, x19)\n    x21 = x20(x20)\n    x22 = first(x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x17, x23)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x22)\n    x28 = width(x27)\n    x29 = lbind(repeat, x28)\n    x30 = chain(dmirror, merge, x29)\n    x31 = x30(x22)\n    x32 = frontiers(x31)\n    x33 = merge(x32)\n    x34 = palette(x33)\n    x35 = first(x34)\n    x36 = last(x34)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x37)\n    x39 = add(x38, x33)\n    x40 = shift(x23, x39"], [1.1, "def solve_fbfa9d9a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_03e5a5bd(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4f08e9de(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 =77fd(x1, toindices)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, identity,gde280)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = rbind(manhattan, x21)\n    x23 = compose(x22, initset)\n    x24 = argmin(x15, x23)\n    x25 = connect(x24, x16)\n    x26 = width(x19)\n    x27 = insert(x26, x15)\n    x28 = DOWN)\n    x29 = insert(x28, x15)\n    x30 = organizedmirror(x29)\n    x31 = width(x19)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = matcher(first, x10)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, toindices)\n    x36 = lbind(shift, x27)\n    x37 = rbind(multiply, x30)\n    x38 = chain(x35, x36, x37)\n    x39 = lbind(shift, x27)\n    x40 = rbind(multiply, x30)\n    x41"], [1.1, "def solve_a43be955(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = valmax(x5, width)\n    x7 = halve(x6)\n    x8 = objects(I, T, F, T)\n    x9 = lbind(colorfilter, x8)\n    x10 = rbind(argmax, x7)\n    x11 = lbind(toobject, x10)\n    x12 = compose(x11, x9)\n    x13 =55412(x2)\n    x14 = rbind(colorcount, x3)\n    x15 = lbind(toobject, x9)\n    x16 = compose(x14, x15)\n    x17 = x16(x2)\n    x18 = sfilter(x9, x17)\n    x19 =252indices(x18)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, last)\n    x22 = sfilter(x13, x21)\n    x23 = rbind(colorcount, x3)\n    x24 = valmax(x22, x23)\n    x25 = matcher(x21, x24)\n    x26 = sfilter(x18, x25)\n    x27 =27(x26)\n    x28 =88bind(colorcount, x3)\n    x29 = valmax(x28, x28)\n    x30 = matcher(x21, x29)\n    x31 = sfilter(x27, x30)\n    x32 =27(x31)\n    x33 = first(x32)\n    x34 = sfilter(x31, x33)\n    x35 = rbind(contained, x41)\n    x36 = compose(x34, last)\n    x37 = sfilter(x33, x36)\n    x38 =27(x37)\n    x39 = ofcolor(I, x3)\n    x40 = branch(x39, x38, x37)\n    O ="], [1.1, "def solve_085159d3(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_91d37929(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41"], [1.1, "def solve_2711256d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(equality, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(pair, frontiers, merge)\n    x5 = mfilter(x3, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(multiply, height, width)\n    x8 = size(x6)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x5, x9)\n    x11 = sfilter(x10, x8)\n    x12 = lbind(apply, first)\n    x13 = lbind(ofcolor, x1)\n    x14 = chain(x12, x13, x11)\n    x15 = rbind(contained, x15)\n    x16 = compose(x15, last)\n    x17 = sfilter(x11, x16)\n    x18 = lbind(colorfilter, x5)\n    x19 = compose(x18, first)\n    x20 = chain(inline, x17, x19)\n    x21 = fork(both, x16, x20)\n    x22 = fork(either, x21, first)\n    x23 = toindices(x5)\n    x24 = rbind(sfilter, x22)\n    x25 = compose(x24, x20)\n    x26 = lbind(recolor, FIVE)\n    x27 = compose(x26, x22)\n    x28 = chain(xto, x27, x29)\n    x29 = fork(combine, x25, x28)\n    x30 = fork(paint, identity, x29)\n    x31 = apply(x30, x11)\n    x32 = ofcolor(x31, FIVE)\n    x33 = compose(x32, x20)\n    x34 = argmax(x34, x33)\n    x35 = remove(x34, x34)\n    x36 = apply(center, x35)\n    x37 = normalize(x34)\n    x38 = shift(x37, x34"], [1.1, "def solve_87f86e83(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1edfb5b0(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(toindices, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizafilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = prapply(shift, x20, x2)\n    x22 = mapply(x21, x21)\n    x23 = combine(x21, x22)\n    x24 = fill(x19, THREE, x23)\n    x25 = palette(x24)\n    x26 =77fd23(x25)\n    x27 = asindices(x24)\n    x28 = ofcolor(x24, x27)\n    x29 = shift(x24, x28)\n    x30 = ofcolor(x24, x6)\n    x31 = intersection(x29, x30)\n    x32 = fill(x24, THREE, x31)\n    x33 = rot90(x32)\n    x34 = ofcolor(x33, x6)\n    x35 = shift(x34, x28)\n    x36 = ofcolor(x33, x6)\n    x37 = intersection(x39, x36)\n    x38 = fill(x33, THREE, x37)\n    x39 = fill(x"], [1.1, "def solve_956ab80d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(51,2)\n    x3 = lbind(9565, ZERO)\n    x4 = compose(x2, x3)\n    x5 = fork(add, height, x4)\n    x6 = compose(x1, width)\n    x7 = fork(equality, size, x5)\n    x8 = fork( both, x7, x6)\n    x9 = extract(x1, x8)\n    x10 = last(x9)\n    x11 = palette(I)\n    x12 = remove(x10, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = size(x15)\n    x17 = increment(x16)\n    x18 = outbox(x15)\n    x19 = rbind(toobject, I)\n    x20 = totuple(x18)\n    x21 = apply(x19, x20)\n    x22 = ofcolor(I, x14)\n    x23 = colorcount(I, x14)\n    x24 = increment(x23)\n    x25 = frontiers(I)\n    x26 = colorfilter(x25, x14)\n    x27 = difference(x25, x26)\n    x28 = size(x27)\n    x29 = increment(x28)\n    x30 = rbind(multiply, x29)\n    x31 = apply(x30, x27)\n    x32 = asindices(I)\n    x33 = of corners(x32)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = ofcolor(I, x15)\n    x37 = lbind(shift, x36)\n    x38 = mapply(x37, x31)\n    x39 = rbind(990, x38)\n    x40 = apply(x39, x33)\n    x41 = ofcolor(I, x18)\n    x42 = rbind(inter"], [1.1, "def solve_601cf0b0(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, T, T)\n    x10 = argmin(x9, numcolors)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = increment(x12)\n    x14 = increment(x13)\n    x15 = toindices(x4)\n    x16 = increment(x15)\n    x17 = increment(x16)\n    x18 = astuple(x12, x17)\n    x19 = rbind(multiply, x18)\n    x20 = toindices(x11)\n    x21 = increment(x20)\n    x22 = increment(x21)\n    x23 = fork(multiply, x18, x22)\n    x24 = x23(x11)\n    x25 = palette(I)\n    x26 = other(x25, x10)\n    x27 = palette(I)\n    x28 = remove(x13, x27)\n    x29 = rbind(positive, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = fgpartition(x18)\n    x32 = merge(x31)\n    x33 = apply(x32, x32)\n    x34 = product(x30, x33)\n    x35 = fork(connect, first, last)\n    x36 = apply(x35, x34)\n    x37 = fork(subtract, first, last)\n    x38 =94872232\n    x39 = fork(subtract, x37, x38)\n    x40 = fork(equality, x36, x39)\n    x41 = mfilter(x34, x40)\n    x42 = size(x41)\n    x43 ="], [1.1, "def solve_e7775ead(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = branch(x1, trim, tophalf)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = vmirror(x3)\n    x5 = objects(x4, T, F, F)\n    x6 = order(x5, uppermost)\n    x7 = compose(color, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    x10 = size(x1)\n    x11 = decrement(x10)\n    x12 = height(x2)\n    x13 = astuple(x12, x11)\n    x14 = crop(x2, ORIGIN, x13)\n    x15 = leastcolor(x14)\n    x16 = canvas(x15, x14)\n    x17 = hconcat(x16, x16)\n    x18 = compose(first, last)\n    x19 = compose(x18, first)\n    x20 = fork(subtract, x19, first)\n    x21 = compose(first, last)\n    x22 = compose(x21, first)\n    x23 = fork(subtract, x22, last)\n    x24 = fork(astuple, x23, x20)\n    x25 = compose(decrement, x24)\n    x26 = normalize(x2)\n    x27 = fork(add, first, x25)\n    x28 = toindices(x26)\n    x29 = compose(x27, x28)\n    x30 = fork(connect, x29, x21)\n    x31 = apply(x30, x8)\n    x32 = lbind(greater, x13)\n    x33 = compose(x32, first)\n    x34 = sfilter(x31, x33)\n    x35 = difference(x19, x34)\n    x36 = lbind(compose, center)\n    x37 = lbind(x36, positive)\n    x38 = chain(x39, x37, x29)\n    x39 =sfilter(x35, x38)\n    "], [1.1, "def solve_7965aa7b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = canvas(ZERO, x27)\n    x29 = astuple(x24, x18)\n    x30 = initset(x29)\n    x31 = insert(UNITY, x30)\n    x32 = insert(x28, x31)\n    x33 = width(I)\n    x34 = decrement(x33)\n    x35 = tojvec(x34)\n    x36 = height(I)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = initset(x38)\n    x40 = insert(x35, x39)\n    x41 = insert(x36, x40)\n    x42 = width(I)\n    x43 = decrement(x42)\n    x44 = tojvec(x43)\n    "], [1.1, "def solve_df57a124(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = matcher(color, x3)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = merge(x12)\n    x14 = palette(x13)\n    x15 = matcher(identity, x3)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x14, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = totuple(x20)\n    x22 = apply(color, x21)\n    x23 = lbind(sfilter, x12)\n    x24 = lbind(matcher, identity)\n    x25 = chain(size, x23, x24)\n    x26 = compose(x25, vline)\n    x27 = chain(sfilter, x16, x26)\n    x28 = lbind(colorcount, x13)\n    x29 = fork(upscale, x28, x27)\n    x30 = decrement(x4)\n    x31 =1999(x30)\n    x32 = rbind(subtract, x31)\n    x33 = chain(x32, x29, first)\n    x34 = fork(apply, x33, x33)\n    x35 =88(x22)\n    x36 = x34(x35)\n    x37 = ofcolor(x36, x3)\n    x38 = rbind(adjacent, x37)\n    x39 = compose(x38, last)\n    x40 = extract(x41, x39)\n    x41 = initset("], [1.1, "def solve_8a907dfc(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_c6ba9eff(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(size, dedupe, first)\n    x5 = matcher(x4, ONE)\n    x6 = compose(first, cmirror)\n    x7 = chain(size, dedupe, x6)\n    x8 = matcher(x7, ONE)\n    x9 = fork(both, x5, x8)\n    x10 = rbind(rapply, I)\n    x11 = compose(initset, first)\n    x12 = chain(first, x10, x11)\n    x13 = compose(x12, x5)\n    x14 = extract(x3, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = trim(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = asobject(x20)\n    x22 = mostcolor(I)\n    x23 = matcher(first, x22)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x21, x24)\n    x26 = partition(x25)\n    x27 = fork(multiply, height, width)\n    x28 = fork(equality, size, x27)\n    x29 = sfilter(x26, x28)\n    x30 = argmax(x29, x27)\n    x31 = difference(x22, x30)\n    x32 = asobject(x31)\n    x33 = matcher(first, x22)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = sizefilter(x31, ONE)\n    x37 = argmax(x36, size)\n    x38 = remove(x37, x36)\n    x39 = merge(x38)\n    x40 = palette"], [1.1, "def solve_fa02ba69(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_afcf20be(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rbind(ofcolor, ONE)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_1a6acc1c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = height(I)\n    x7 = width(I)\n    x8 = add(x6, x7)\n    x9 = add(x5, x8)\n    x10 = I(I, x4)\n    x11 = I(I, x7)\n    x12 = width(I)\n    x13 = increment(x12)\n    x14 = divide(x13, x11)\n    x15 = height(I)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = divide(x17, x11)\n    x19 = width(I)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(multiply, x14)\n    x23 = apply(x22, x21)\n    x24 = lbind(shift, x22)\n    x25 = mapply(x24, x23)\n    x26 = fill(I, FOUR, x25)\n    x27 = canvas(ZERO, x8)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 = toobject(x29, I)\n    x31 = mostcolor(x30)\n    x32 = occurrences(x26, x31)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, identity, dmirror)\n    x36 = x35(x16)\n    x37 = equality(x36, ONE)\n    x38 = branch(x37, identity, vmirror)\n    x39 = x38(x51)\n    x40 = downscale(x39, x3)\n    x41 = ofcolor(x40, x31)\n    x42 =91000(x41, asobject)\n    x43 = ofcolor(x"], [1.1, "def solve_d597c11f(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_f1a0a95b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_3b3e2d03(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(uppermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = compose(x4, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x3, x8)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(NEG_ONE, x13)\n    x15 = invert(x13)\n    x16 = astuple(NEG_ONE, x15)\n    x17 = double(x13)\n    x18 = astuple(NEG_TWO, x17)\n    x19 = double(x13)\n    x20 = invert(x19)\n    x21 = astuple(NEG_TWO, x20)\n    x22 = multiply(THREE, TEN)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x14)\n    x25 = apply(x24, x23)\n    x26 = lbind(multiply, x16)\n    x27 = apply(x26, x23)\n    x28 = lbind(multiply, x18)\n    x29 = apply(x28, x23)\n    x30 = lbind(multiply, x21)\n    x31 = apply(x30, x23)\n    x32 = lbind(shift, x12)\n    x33 = mapply(x32, x25)\n    x34 = lbind(shift, x12)\n    x35 = mapply(x34, x27)\n    x36 = lbind(shift, x12)\n    x37 = mapply(x36, x29)\n    x38 = lbind(shift, x"], [1.1, "def solve_53e3346b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 =00000000\n    \"\"\"\n    x3 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind("], [1.1, "def solve_048b64fd(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = sfilter(x31, x30)\n    x33 = merge(x32)\n    x34 = rot90(x30)\n    x35 = downscale(x33, x34)\n    x36 = objects(x35, T, F, F)\n    x37 = argmax(x36, x24)\n    x38 = last(x37)\n    x39 = remove(x39, x36"], [1.1, "def solve_d0765819(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = initset(x7)\n    x13 = add(x15, x12)\n    x14 =tojvec(x13)\n    x15 = drilltext(x14, x7)\n    x16 = lbind(argmin, x15)\n    x17 = compose(x16, toindices)\n    x18 = fork(difference, box, x17)\n    x19 = fork(equality, x18, identity)\n    x20 = compose(x19, switch)\n    x21 = rbind(multiply, xICS)\n    x22 = rbind(divide, xIts)\n    x23 = compose(x21, x22)\n    x24 = fork(equality, x23, identity)\n    x25 = compose(x24, x11)\n    x26 = lbind(apply, x25)\n    x27 = rbind(multiply, x10)\n    x28 = rbind(divide, x13)\n    x29 = x26(x14)\n    x30 = x27(x29)\n    x31 = fork(equality, x28, x30)\n    x32 = compose(x27, x11)\n    x33 = lbind(apply, x32)\n    x34 = rbind(toobject, I)\n    x35 = compose(x33, x34)\n    x36 = apply(x35, x15)\n    x37 = chain(x26, x24, x30)\n    x38 = x37(x36)\n    x39 = rbind(add, x38)\n    x40 = compose("], [1.1, "def solve_c7c2662f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = compose(x4, size)\n    x7 = sfilter(x3, x6)\n    x8 = chain(hline, sfilter, fgpartition)\n    x9 = merge(x7)\n    x10 = palette(x9)\n    x11 = intersection(x10, x8)\n    x12 = astuple(identity, rot90)\n    x13 = astuple(rot180, rot270)\n    x14 = combine(x12, x13)\n    x15 = astuple(identity, rot270)\n    x16 = astuple(rot180, rot90)\n    x17 = combine(x15, x16)\n    x18 = pair(x14, x17)\n    x19 = rbind(rapply, I)\n    x20 = compose(initset, first)\n    x21 = chain(first, x19, x20)\n    x22 = rbind(ofcolor, EIGHT)\n    x23 = chain(lowermost, x22, x21)\n    x24 = matcher(x23, ZERO)\n    x25 = extract(x18, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = x26(I)\n    x29 = decrement(x28)\n    x30 = astuple(x29, x27)\n    x31 = palette(I)\n    x32 = first(x31)\n    x33 = last(x31)\n    x34 = switch(x20, x33, x25)\n    x35 = branch(x34, hmirror, vmirror)\n    x36 = x35(x42)\n    x37 = canvas(x30, x36)\n    x38 = paint(x37, x34)\n    x39 = ofcolor(x38, EIGHT)\n    x40 = shift(x39,"], [1.1, "def solve_5480b6c7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, contained)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, ulcorner, x31)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(add, toivec, x34)\n    x36 = fork(add, tojvec, x35)\n    x37 = fork(add, normalize, x36)\n    x38 = mapply(x37, x4)\n    O = paint(I, x38)"], [1.1, "def solve_2bb3c351(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b28f5123(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = replace(I, SIX, TWO)\n    x2 = objects(x1, T, F, T)\n    x3 = merge(x2)\n    x4 = color(x3)\n    x5 = subgrid(x3, x1)\n    x6 = argmax(x5, width)\n    x7 = astuple(TWO, ONE)\n    x8 = x5(x6)\n    x9 = box(x3)\n    x10 = fill(x6, x4, x9)\n    x11 = fill(x10, x4, x7)\n    x12 = lbind(O = merge(x6)\n    x13 = compose(color, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = height(x11)\n    x16 = decrement(x15)\n    x17 =909(astuple, x16)\n    x18 = compose(last, first)\n    x19 = rbind(contained, x17)\n    x20 = sfilter(x11, x18)\n    x21 =\n    0202277522\n    last, x19)\n    x22 = width(x11)\n    x23 = subtract(x25, x22)\n    x24 = astuple(x23, x24)\n    x25 = canvas(ZERO, x24)\n    x26 = asindices(x25)\n    x27 = fgpartition(x25)\n    x28 = merge(x27)\n    x29 = palette(x28)\n    x30 = lbind(shift, x28)\n    x31 = mapply(x30, x29)\n    x32 = paint(x25, x31)\n    x33 =scale(x32, UNITY)\n    x34 = ofcolor(x33, x4)\n    x35 = asindices(x33)\n    x36 = remove(x35, x3333)\n    x37 =    x37 = lbind(recolor, x4)\n    x38 = lbind(mapply, x33)\n    x39 = rbind(ofcolor, x4)\n    x40 = chain("], [1.1, "def solve_e6723d67(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = sfilter(x1, vline)\n    x5 = size(x4)\n    x6 = greater(x3, x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(first, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = mostcolor(x10)\n    x19 = lbind(recolor, x18)\n    x20 = rbind(sfilter, x15)\n    x21 = compose(toindices, x20)\n    x22 = fork(combine, x21, outbox)\n    x23 = compose(x19, x22)\n    x24 = fork(combine, x17, x23)\n    x25 = shape(x10)\n    x26 = add(TWO, x25)\n    x27 = canvas(x18, x26)\n    x28 = asobject(x10)\n    x29 = shift(x28, UNITY)\n    x30 = paint(x27, x29)\n    x31 = rbind(shift, NEG_UNITY)\n    x32 = lbind(occurrences, x30)\n    x33 = compose(x31, x32)\n    x34 = compose(x33, x24)\n    x35 = chain(positive, size, x34)\n    x36 = sfilter(x12, x35)\n    x37 = chain(first, x33, x24)\n    x38 = compose(ulcorner, x24)\n    x39 = fork(subtract, x37, x38)\n"], [1.1, "def solve_32761d00(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_de886222(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, ONE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, identity, rot90)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = rot180(x6)\n    x8 = sfilter(x3, x7)\n    x9 = merge(x8)\n    x10 = rot180(x9)\n    x11 = sfilter(x3, x4)\n    x12 = merge(x11)\n    x13 = rot270(x12)\n    x14 = sfilter(x3, x4)\n    x15 = argmax(x14, size)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x15, x7)\n    x18 = objects(x17, T, F, F)\n    x19 = rbind(colorcount, ZERO)\n    x20 = argmax(x18, x19)\n    x21 = height(x20)\n    x22 = width(x20)\n    x23 = vsplit(x20, x22)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x2200, x24)\n    x26 = combine(x21, x25)\n    x27 = palette(x25)\n    x28 = llcorner(x27)\n    x29 = matcher(first, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(compose, flip)\n    x32 = lbind(matcher, first)\n    x33 = chain(x30, x31, x32)\n    x34 = lbind(paint, x17)\n    x35 = rbind(compose, asobject)\n    x36 = lbind(rbind, extract)\n    x37 = chain(x34, x35, x36)\n    x38 = fork(shift, identity, x37)\n    x39 = rbind(shift, x38)\n    x40 = compose(x39"], [1.1, "def solve_2e9b2df7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = width(x11)\n    x21 = decrement(x20)\n    x22 = tojvec(x21)\n    x23 = identity(DOWN)\n    x24 = connect(ORIGIN, x22)\n    x25 = fill(x18, THREE, x24)\n    x26 = identity(x12)\n    x27 = width(x12)\n    x28 = decrement(x27)\n    x29 = tojvec(x28)\n    x30 = identity(corners)\n    x31 = fill(x25, THREE, x30)\n    x32 = identity(x26)\n    x33 = identity(x256)\n    x34 = connect(ORIGIN, x24)\n    x35 = fill(x39, THREE, x34)\n    x36 = identity(x30)\n    x37 = fill(x35, THREE, x36)\n    x38 = add(x27, x36)\n    x39 = fill(x37, THREE, x38)\n    x40 = add(x29, x36)\n    x41 = fill(x40, THREE, x39)\n    x42 = combine(x34, x41)"], [1.1, "def solve_fbb4eb24(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = asobject(x8)\n    x11 = ulcorner(x9)\n    x12 = vplit(x10, TWO)\n    x13 = hsplit(x11, TWO)\n    x14 = neighbors(x13)\n    x15 = mapply(palette, x14)\n    x16 = astuple(x11, x12)\n    x17 = ulcorner(x9)\n    x18 = vsubtract(x17, x12)\n    x19 = hsplit(x19, TWO)\n    x20 = rbind(ofcolor, TWO)\n    x21 = compose(x20, x10)\n    x22 = fork(subtract, x21, x17)\n    x23 = corners(x15)\n    x24 = apply(x22, x23)\n    x25 = ZERO(x24)\n    x26 = fgpartition(x25)\n    x27 = merge(x26)\n    x28 = difference(x27, x25)\n    x29 = intersection(x28, x25)\n    x30 = shift(x29, DOWN)\n    x31 = extract(x30, x17)\n    x32 = initset(x15)\n    x33 = insert(x22, x32)\n    x34 = insert(x26, x33)\n    x35 = combine(x35, x34)\n    x36 = product(x35, x35)\n    x37 = power(increment, TWO)\n    x38 = x37(ORIGIN)\n    x39 = height(x38)\n    x40 = divide(x39, x37)\n    x41 = width"], [1.1, "def solve_54b7a60d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = palette(I)\n    x22 = remove(x20, x21)\n    x23 = other(x22, x20)\n    x24 = ofcolor(I, x20)\n    x25 = ofcolor(I, x10)\n    x26 = ofcolor(I, x5)\n    x27 = subgrid(x20, I)\n    x28 = subgrid(x25, I)\n    x29 = asobject(x28)\n    x30 = hperiod(x29)\n    x31 = height(I)\n    x32 = divide(x31, x30)\n    x33 = fgpartition(x32)\n    x34 = merge(x33)\n    x35 = x20(x34)\n    x36 = lbind(shift, x24)\n    x37 = shift(x35, x36)\n    x38 = toobject(x37, x28)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    x41 = toobject(x40, x28)\n    x42 = astuple("], [1.1, "def solve_b3351aa3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors(d687)\n    x10 = lbind(lbind, sfilter)\n    x11 = rbind(colorcount, I)\n    x12 = chain(x11, x10, frontiers)\n    x13 = matcher(x12, TWO)\n    x14 = dmirror(x7)\n    x15 = lbind(hupscale, x14)\n    x16 = chain(x15, tojvec, x13)\n    x17 = compose(x16, x12)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = fork(combine, x17, x18)\n    x20 = fork(combine, x19, x7)\n    x21 = palette9(I)\n    x22 = extract(x21, x20)\n    x23 = lbind(hupscale, x7)\n    x24 = chain(x23, positive, x20)\n    x25 = dmirror(x7)\n    x26 = palette(x25)\n    x27 = other(x26, x22)\n    x28 =422(x28, x22)\n    x29 = rbind(rapply, x28)\n    x30 = compose(x29, initset)\n    x31 = argmax(x28, x30)\n    x32 = x28(x31)\n    x33 = ofcolor(x35, x27)\n    x34 =[contained(x33, x34)\n    x35 = ofcolor(x35, x27)\n    x36 = sfilter(x34, x35)\n    x37 = difference(x35, x36)\n    x38 = ofcolor("], [1.1, "def solve_28d1bbf1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_dc0730b9(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = argmax(x2, width)\n    x4 = height(x3)\n    x5 = halve(x4)\n    x6 = frontiers(x3)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = astuple(x5, x6)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x44 = interval(x13, x12, ONE)\n    x15 = lbind(shift, x11)\n    x16 = apply(x15, x44)\n    x17 = rbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = rbind(hmatching, x11)\n    x20 = rbind(vmatching, x11)\n    x21 = fork(either, x19, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(extract, x22, x18)\n    x24 = compose(size, x23)\n    x25 = increment(x5)\n    x26 = interval(x25, x25, ONE)\n    x27 = corners(x11)\n    x28 = insert(x15, x27)\n    x29 = insert(x16, x28)\n    x30 = insert(x11, x29)\n    x31 =riercorner(x30)\n    x32 = apply(size, x31)\n    x33 = increment(x5)\n    x34 = interval(x33, x32, ONE)\n    x35 = apply(tojvec, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = fill(x10, FOUR, x36)\n    x38 = x42(x37)\n    x39 =703725(x38)\n    x40 = increment(x5)\n    x41 ="], [1.1, "def solve_d3e5f487(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4eca0cab(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = ONE(x3)\n    x5 = ONE(I)\n    x6 = rot270(x4)\n    x7 = astuple(identity, rot270)\n    x8 = astuple(rot180, rot90)\n    x9 = combine(x7, x8)\n    x10 = sfilter(x9, square)\n    x11 = difference(x3, x10)\n    x12 = rot90(x11)\n    x13 = rbind(rapply, x2)\n    x14 = chain(first, x13, initset)\n    x15 = fork(combine, identity, x14)\n    x16 = extract(x15, x11)\n    x17 = mapply(x16, x12)\n    x18 = first(x17)\n    x19 = trim(x18)\n    x20 = dmirror(x19)\n    x21 = asobject(x20)\n    x22 = height(x21)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = apply(double, x24)\n    x26 = shape(x21)\n    x27 = apply(asobject, x21)\n    x28 = chain(first, x27, last)\n    x29 = asindices(x21)\n    x30 = ofcolor(x21, ZERO)\n    x31 = ofcolor(x21, ONE)\n    x32 = intersection(x29, x30)\n    x33 = fill(x21, ZERO, x32)\n    x34 = height(x21)\n    x35 = equality(x34, ZERO)\n    x36 = branch(x35, x22, vsplit)\n    x37 = lbind(recolor, ZERO)\n    x38 =88a104 last(I)\n    x39 = chain(x37, x37, x38)\n    x40 = difference(x39, x31)\n    x41"], [1.1, "def solve_7abfe236(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, TWO_BY_TWO)\n    x8 = initset(x4)\n    x9 = insert(x8, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 = mapply(ineighbors, x11)\n    x13 = fill(x7, ONE, x12)\n    x14 =fill(x13,004, x11)\n    x15 = ofcolor(x14, x5)\n    x16 = rbind(adjacent, x15)\n    x17 = mfilter(x15, x16)\n    O = fill(x14, x5, x17)\n    return O"], [1.1, "def solve_bba87be2(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = divide(x3, x4)\n    x6 = increment(x5)\n    x7 = width(I)\n    x8 = halve(x7)\n    x9 = increment(x8)\n    x10 = height(I)\n    x11 = divide(x9, x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = prapply(astuple, x13, x13)\n    x15 = lbind(canvas, ZERO)\n    x16 = lbind(occurrences, I)\n    x17 = compose(x15, x16)\n    x18 = lbind(apply, multiply)\n    x19 = chain(x17, x18, frontiers)\n    x20 = matcher(x19,45)\n    x21 = fork(recolor, color, x20)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x14, x22)\n    x24 = paint(I, x23)\n    x25 =101015(x23)\n    x26 = matcher(x22, x25)\n    x27 = mfilter(x1, x26)\n    O = paint(x24, x27)\n    return O"], [1.1, "def solve_74887115(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = chain(positive, first, x1)\n    x3 = lbind(lbind, sfilter)\n    x4 =539a539a6(I)\n    x5 = compose(x2, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = equality(x4, x6)\n    x8 = branch(x7, identity, x6)\n    x9 = x8(I)\n    O = partition(x9)\n    return O"], [1.1, "def solve_b902a6ba(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =29ec(d406)\n    x3 =92(flip, FOUR)\n    x4 = shape(I)\n    x5 = maximum(x4)\n    x6 =675(x5)\n    x7 = interval(TWO, x6, ONE)\n    x8 = rbind(multiply, x5)\n    x9 = apply(x8, x7)\n    x10 = rbind(multiply, FOUR)\n    x11 = apply(x10, x9)\n    x12 = matcher(numcolors, FOUR)\n    x13 = sfilter(x11, x12)\n    x14 = apply(color, x13)\n    x15 = mostcommon(x14)\n    x16 = repeat(x15, ONE)\n    O = x15(I)\n    return O"], [1.1, "def solve_88acd047(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 =66(I)\n    x4 =364(x3)\n    x5 = decrement(x4)\n    x6 = branch(x5, identity, initset)\n    x7 = branch(x5, identity, outbox)\n    x8 = x6(x7)\n    x9 = ulcorner(x8)\n    x10 = decrement(x9)\n    x11 = branch(x5, identity, initset)\n    x12 = x11(x10)\n    x13 = initset(x12)\n    x14 = insert(x9, x13)\n    x15 = width(I)\n    x16 = decrement(x15)\n    x17 = tojvec(x16)\n    x18 = connect(ORIGIN, x17)\n    x19 = height(I)\n    x20 = decrement(x19)\n    x21 = toivec(x20)\n    x22 = connect(ORIGIN, x21)\n    x23 = compress(I)\n    x24 = numcolors(x23)\n    x25 = equality(x24, ONE)\n    x26 = branch(x25, identity, x22)\n    x27 = branch(x25, identity, x24)\n    x28 = width(x26)\n    x29 = decrement(x28)\n    x30 = tojvec(x29)\n    x31 = connect(ORIGIN, x30)\n    x32 = height(x26)\n    x33 = decrement(x32)\n    x34 = toivec(x33)\n    x35 = connect(ORIGIN, x34)\n    x36 = connect(ORIGIN, x28)\n    x37 = connect(ORIGIN, x29)\n    x38 = fill(I, THREE, x36)\n    x39 = fill(x38, EIGHT, x37)\n    x40 = fill(x39, TWO, x35)\n    O = fill(x40, ONE, x39)\n    return O"], [1.1, "def solve_edf3b147(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rot270(I)\n    x2 = fork(product, identity, identity)\n    x3 = apply(x2, x1)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, identity, identity)\n    x6 = x5(x1)\n    x7 =    488712738(x6)\n    O = x5(x7)\n    return O"], [1.1, "def solve_17b4feea(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =441001F\n    0000000001\n    x2 = merge(x1)\n    x4 = fill(I, NEG_ONE, x3)\n    x5 = astuple(x11, x12)\n    x6 = ulcorner(x2)\n    x7 = increment(x6)\n    x8 = rbind(subtract, x7)\n    x9 = chain(even, x8, last)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, first, last)\n    x12 = compose(flip, x9)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(decrement, x13, last)\n    x15 = fork(astuple, x11, x14)\n    x16 = apply(x15, x10)\n    O = paint(x4, x16)\n    return O"], [1.1, "def solve_d110545f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(equality, height, width)\n    x7 = size(x5)\n    x8 = interval(ZERO, x7, x6)\n    x9 = sfilter(x8, x4)\n    x10 = rbind(contained, x8)\n    x11 = compose(x10, outbox)\n    x12 = sfilter(x9, x11)\n    x13 = FOUR(x12)\n    x14 = increment(x13)\n    x15 =455(x12)\n    x16 = decrement(x15)\n    x17 = canvas(ZERO, x16)\n    x18 = asobject(x17)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x17, x19)\n    x21 = height(x17)\n    x22 = width(x17)\n    x23 = astuple(x21, x22)\n    x24 = crop(x20, ORIGIN, x23)\n    x25 = hmirror(x24)\n    x26 = vmirror(x24)\n    x27 = ofcolor(x25, ZERO)\n    x28 = ofcolor(x26, ZERO)\n    x29 = product(x27, x28)\n    x30 = insert(x28, x29)\n    x31 = ofcolor(x20, TWO)\n    x32 = mapply(neighbors, x31)\n    x33 = difference(x30, x32)\n    O = fill(x20, ONE, x33)\n    return O"], [1.1, "def solve_1a7fd12c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(I, ONE)\n    x4 =866(numcolors, trim)\n    x5 = compose(multiply, repeat)\n    x6 = matcher(dedupe, x5)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x4)\n    x9 = compose(x8, x6)\n    x10 = initset(identity)\n    x11 = matcher(x10, ZERO)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = argmax(x13, last)\n    x15 = height(x14)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = insert(x14, x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x17)\n    O = paint(I, x20)\n    return O"], [1.1, "def solve_e60115ad(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(add, first, last)\n    x9 = fork(connect, x7, x8)\n    x10 = fork(equality, x9, identity)\n    x11 =\n    x10(x2)\n    x12 = leastcolor(x11)\n    x13 = tojvec(SIX)\n    x14 = crop(x13, identity)\n    x15 = height(x14)\n    x16 = width(x14)\n    x17 = vsplit(x16, x15)\n    x18 = compose(x17, first)\n    x19 = fork(equality, identity, x18)\n    x20 = compose(x19, last)\n    x21 = width(x2)\n    x22 = vsplit(x21, x12)\n    x23 =885112(x22)\n    x24 = invert(x23)\n    x25 = shift(x14, x24)\n    x26 = shift(x25, x24)\n    x27 = palette(x26)\n    x28 = lbind(shift, x26)\n    x29 = occurrences(x28, x27)\n    x30 = mapply(x28, x29)\n    O = paint(x23, x30)\n    return O"], [1.1, "def solve_79f29e04(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 =850d687anch(x8, ORIGIN, toindices)\n    x10 = matcher(first, x39)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = matcher(first, x39)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x16, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x20)\n    x23 = fork(combine, x22, x22)\n    x24 = rbind(shoot, UNITY)\n    x25 = compose(x24, last)\n    x26 = fork(recolor, first, x25)\n    x27 = mapply(x26, x4)\n    O = paint(x6, x27)\n    return O"], [1.1, "def solve_2ccd11ae(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    4577300009\n    3011433066\n    7854836027\n    1929100002\n    \"\"\"\n    x1 = halve(x1)\n    x2 = rbind(shoot, x4)\n    x3 = rbind(shoot, x2)\n    x4 = fork(combine, x2, x3)\n    x5 = rbind(shoot, x2)\n    x6 = rbind(shoot, x4)\n    x7 = fork(combine, x6, x5)\n    x8 = fork(combine, x4, x7)\n    x9 = leastcolor(I)\n    x10 = rbind(toobject, I)\n    x11 = rbind(colorcount, x9)\n    x12 = chain(x11, x10, dneighbors)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x1, x13)\n    x15 = x14(I)\n    x16 = last(x15)\n    x17 = subgrid(x16, x15)\n    x18 = index(x17, DOWN)\n    x19 = subgrid(x18, x15)\n    x20 = hmirror(x19)\n    x21 = replace(x20, x9, x8)\n    x22 = replace(x21, x10, x7)\n    x23 = replace(x22, x19, x8)\n    x24 = hmirror(x23)\n    O = replace(x24, x10, x5)\n    return O"], [1.1, "def solve_6524061a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 =215(I)\n    x3 = halve(x1)\n    x4 = increment(x3)\n    x5 = width(I)\n    x6 = divide(x5, x4)\n    x7 = astuple(x6, x4)\n    x8 = canvas(ZERO, x7)\n    x9 = ofcolor(x8, ONE)\n    x10 = rbind(multiply, x4)\n    x11 = apply(x10, x9)\n    x12 = rbind(multiply, x6)\n    x13 = apply(x12, x11)\n    x14 = ofcolor(x8, ONE)\n    x15 = rbind(intersection, x14)\n    x16 = apply(x15, x13)\n    O = fill(x8, ZERO, x16)\n    return O"], [1.1, "def solve_a311ede7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, TWO, THREE)\n    x3 = switch(x2, ONE, FOUR)\n    x4 = switch(x3, EIGHT, FOUR)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(ORIGIN)\n    x12 = box(x7)\n    x13 = inbox(x7)\n    x14 = center(x7)\n    x15 = initset(x14)\n    x16 = lbind(toobject, x12)\n    x17 = compose(x4, x16)\n    x18 = lbind(toobject, x13)\n    x19 = compose(x4, x18)\n    x20 = lbind(toobject, x15)\n    x21 = compose(x4, x20)\n    x22 =454(x21)\n    x23 = merge(x11)\n    x24 = fill(x6, TWO, x23)\n    x25 = asindices(x24)\n    x26 = corners(x25)\n    x27 = toobject(x26, x24)\n    x28 = mostcolor(x27)\n    x29 = asindices(x24)\n    x30 = ofcolor(x24, x28)\n    x31 = difference(x29, x30)\n    x32 = rbind( fill, x28)\n    x33 = apply(x32, x31)\n    x34 = rbind(adjacent, x4)\n    x35 = mfilter(x34, x28)\n    x36 = mfilter(x34, x25)\n    x37 = paint(x24, x3)\n    x38 = paint(x37, x35)\n    O = fill(x38, x28, x36)\n    return O"], [1.1, "def solve_c25fc43f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =159(I)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.1, "def solve_f81fd587(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(O = maximum(x4)\n    x10 = double(x4)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = rbind(multiply, x4)\n    x13 = apply(x12, x11)\n    x14 = rbind(multiply, x6)\n    x15 = apply(x14, x11)\n    x16 = pair(x13, x15)\n    x17 = rbind(add, ZERO)\n    x18 = compose(x17, first)\n    x19 = rbind(add, x8)\n    x20 = pair(x16, x19)\n    x21 = fork(combine, x18, x20)\n    x22 = mapply(x21, x30)\n    O = fill(x2, FOUR, x22)\n    return O"], [1.1, "def solve_e46bf51e(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = vperiod(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = add(x5, THREE)\n    x7 = width(I)\n    x8 = astuple(x6, x7)\n    x9 = partition(I)\n    x10 = lbind(colorcount, I)\n    x11 = argmax(x9, x10)\n    x12 = canvas(x11, x8)\n    x13 = apply(normalize, x12)\n    x14 = lbind(to67e509687\n    x15 =8877(x14)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x13, x17)\n    x19 = compose(invert, size)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_aaaa4e5d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = compose(toindices, normalize)\n    x11 = matcher(x10, x9)\n    x12 = uppermost(x7)\n    x13 = compose(toindices, normalize)\n    x14 = matcher(x13, x12)\n    x15 = leftmost(x7)\n    x16 = matcher(x15, x13)\n    x17 = uppermost(x7)\n    x18 = greater(x16, x17)\n    x19 = leftmost(x7)\n    x20 = matcher(x19, x14)\n    x21 = uppermost(x7)\n    x22 = matcher(x21, x18)\n    x23 = leftmost(x7)\n    x24 = matcher(x23, x14)\n    x25 = rightmost(x7)\n    x26 = matcher(x25, x24)\n    x27 = leftmost(x7)\n    x28 = matcher(x27, x28)\n    x29 = uppermost(x7)\n    x30 = matcher(x29, x25)\n    x31 = rightmost(x7)\n    x32 = matcher(x31, x29)\n    x33 = leftmost(x7)\n    x34 = sfilter(x33, x21)\n    x35 = argmax(x34, size)\n    x36 = difference(xs, x35)\n    x37 =884483replace(x36, x8, x5)\n    O = uppermost(x37)\n    return O"], [1.1, "def solve_94253c38(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =523259\n    4292891824\n    \"\"\"\n    x2 = astuple(TWO, ONE)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x4)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [1.1, "def solve_aa2d0b61(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(150,197)\n    x9 = size(x3)\n    x10 = vsplit(x4, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hconcat, identity)\n    x14 = hmirror(x11)\n    x15 = matcher(x13, x14)\n    x16 = identity( Maurice222\n    0000000352\n    \"\"\"\n    x1 = leastcolor(x6)\n    x2 = vsplit(x6, x12)\n    x3 = apply(x13, x2)\n    x4 = maximum(x3)\n    x5 = ofcolor(x4, x1)\n    x6 = hmirror(x5)\n    x7 = fill(x6, ZERO, x1)\n    x8 = insert(x7, x5)\n    O = fill(x8, ZERO, x2)\n    return O"], [1.1, "def solve_0cc501ef(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette,I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.1, "def solve_36df1f97(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I asobject, I)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_7e21616c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = partition(I)\n    x5 = sizefilter(x4, ONE)\n    x6 = difference(x4, x5)\n    x7 =1117fcbind(ofcolor, x2)\n    x8 = mapply(x7, x6)\n    x9 = fork(connect, ulcorner, urcorner)\n    x10 = fork(connect, urcorner, ulcorner)\n    x11 = fork(combine, x9, x10)\n    x12 = mapply(x11, x9)\n    O = fill(I, x2, x12)\n    return O"], [1.1, "def solve_429ab382(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =889(RIGHT)\n    x2 = halve(x1)\n    O = upscale(I, x2)\n    return O"], [1.1, "def solve_e6a81d9e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =7326(I)\n    x2 = tophalf(x1)\n    O = bottomhalf(x1)\n    return O"], [1.1, "def solve_973c9f8a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 =483(x7)\n    x13 =485(x7)\n    x14 =11(x12)\n    x15 =11(x13)\n    x16 = rbind(multiply, x4)\n    x17 = apply(x16, x14)\n    x18 = mapply(x16, x17)\n    x19 = merge(x9)\n    x20 = fill(I, x3, x19)\n    O = fill(x20, x11, x18)\n    return O"], [1.1, "def solve_2b62334e(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =8888(66666666)\n    x2 = rbind(shoot, RIGHT)\n    x3 = rbind(shift, LEFT)\n    x4 = compose(x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.1, "def solve_ced800e1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = heavily remind4448(I)\n    x2 =Example output:\n    4941910114\n    2732866842\n    8388760181\n    3013746873\n    1529944467\n    1491984894\n    6741268043\n    314479401f8(77769718\n    57648014328\n    1737465730\n    \"\"\"\n    x1 = rbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_4a350a1a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = T sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape1fad0729(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [1.1, "def solve_2beef78b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =9999(I, T)\n    x2 = matcher(00000000, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = width(I)\n    x7 = multiply(x6, x5)\n    x8 = multiply(UNITY, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x6, x5)\n    x11 = decrement(x10)\n    x12 = lbind(astuple, x11)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = compose(last, last)\n    x15 = chain(x13, x12, x14)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x4)\n    O = underpaint(x9, x17)\n    return O"], [1.1, "def solve_2e9ecf87(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = decrement(ORIGIN)\n    88777 ulcorner(I)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = fill(I, x1, x3)\n    x5 = shift(x2, UNITY)\n    x6 = underfill(x4, x1, x5)\n    x7 = rbind(shoot, LEFT)\n    x8 = compose(x7, last)\n    x9 = matcher(x8, x8)\n    x10 = sfilter(x3, x9)\n    O = fork(recolor, first, x10)\n    return O"], [1.1, "def solve_eb0ce75a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fork(combine, vfrontier, hfrontier)\n    x2 = compose(x1, size)\n    x3 = fork(difference, x2, toindices)\n    x4 = x2(I)\n    x5 = compose(size, x3)\n    x6 = matcher(x5, ZERO)\n    x7 = fork(both, x3, x6)\n    x8 = sfilter(x4, x7)\n    x9 = matcher(first, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 =0001\n    x13 = merge(x11)\n    x14 = dmirror(x12)\n    x15 = compose(x14, x12)\n    x16 = apply(x15, x13)\n    x17 = dedupe(x16)\n    x18 = order(x17, identity)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, ONE)\n    x23 = combine(x21, x22)\n    x24 = combine(x21, x20)\n    x25 = fork(hfrontier, vfrontier, hfrontier)\n    x26 = mapply(x25, x23)\n    x27 = fill(x19, SIX, x26)\n    O = fill(x27, ONE, x24)\n    return O"], [1.1, "def solve_3f4a996b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, ZERO)\n    x3 = branch(x2, width, height)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(I, x5)\n    x7 =191(x6)\n    x8 =222(x7, x5)\n    x9 = palette(x8)\n    x10 = repeat(x9, ONE)\n    x11 =14filter(x10, x5)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = height(x16)\n    x18 = width(x16)\n    x19 = multiply(x17, x18)\n    x20 = increment(x19)\n    x21 = invert(x20)\n    x22 = shift(x16, x21)\n    x23 = frontiers(I)\n    x24 = toindices(x16)\n    x25 = apply(center, x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = paint(I, x27)\n    return O"], [1.1, "def solve_c0344aae(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, THREE)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = equality(x1, TWO)\n    x8 = branch(x7, cmirror, outbox)\n    x9 = x8(x4)\n    x10 =\n    \"\"\"\n    x1 = branch(x7, hmirror, vmirror)\n    x2 = x1(x4)\n    x3 = equality(x1, ONE)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(x4)\n    x6 = decrement(x1)\n    x7 = hconcat(x5, x6)\n    x8 = branch(x3, vmirror, hmirror)\n    x9 = x8(x4)\n    x10 = decrement(x7)\n    x11 = width(x4)\n    x12 = decrement(x11)\n    x13 = tojvec(x12)\n    x14 =jtoivec(x13)\n    x15 = branch(x11, x14, x9)\n    x16 = shape(x4)\n    x17 = canvas(ZERO, x16)\n    x18 = ofcolor(x4, ZERO)\n    x19 = ofcolor(x4, ONE)\n    x20 = intersection(x18, x19)\n    O = fill(x17, THREE, x20)\n    return O"]], "2037f2c7": [[0.47026220156654935, "def solve_daccb4df(I):\n    x1 = palette(I)\n    x2 = contained(ONE, x1)\n    x3 = contained(TWO, x1)\n    x4 = branch(x2, UNITY, TWO_BY_TWO)\n    x5 = branch(x3, RIGHT, x4)\n    x6 = fork(combine, vfrontier, hfrontier)\n    x7 = x6(x5)\n    x8 = canvas(ZERO, THREE_BY_THREE)\n    O = fill(x8, FIVE, x7)\n    return O"], [0.48686490313361314, "def solve_dc6f3e67(I):\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x2)\n    O = hconcat(x5, x2)\n    return O"], [0.5124660219282645, "def solve_4a06ad37(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_83c5d3d0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_ed0713cf(I):\n    O = canvas(ZERO, THREE_BY_THREE)\n    return O"], [0.5124660219282645, "def solve_5bdef4a0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_8e6a8b73(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5251570172671126, "def solve_920b716e(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5341705127937012, "def solve_594aab39(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = color(x3)\n    x5 = remove(ZERO, x1)\n    x6 = other(x5, x4)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_f000d209(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_34f6200c(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, ONE, SEVEN)\n    O = canvas(x6, UNITY)\n    return O"], [0.5341705127937012, "def solve_ab5717e2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5748260164859528, "def solve_13faca88(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5752701270817212, "def solve_e247eed7(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = ofcolor(I, x1)\n    x5 = intersection(x3, x4)\n    x6 = astuple(FOUR, FOUR)\n    x7 = canvas(THREE, x6)\n    O = fill(x7, ZERO, x5)\n    return O"], [0.5863202149434034, "def solve_1eca1f34(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.5863202149434034, "def solve_38dc835d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.6076921592043171, "def solve_c45544a3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6076921592043171, "def solve_ee5f06e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6137963861152268, "def solve_4aa27410(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, height)\n    x3 = subgrid(x2, I)\n    O = trim(x3)\n    return O"], [0.6194886937848373, "def solve_5ba617d4(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_feaf43e7(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_ac04d8c8(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_e11f45de(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_e19a07ba(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_f81b582a(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6309126220053929, "def solve_2d5013b2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_4686be5e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_3fb27ea4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_4dbd82e5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_10fab110(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_194e28d8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_1942f4e0(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_afb6ab3f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_e1570c8c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.631933306897075, "def solve_a538493d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_ea1caedb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_0c0421f7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_5e93db63(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_274c93cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.6477398836678522, "def solve_d8b2192b(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = lefthalf(x1)\n    x4 = righthalf(x1)\n    x5 = lefthalf(x2)\n    x6 = righthalf(x2)\n    x7 = ofcolor(x4, FOUR)\n    x8 = ofcolor(x3, SEVEN)\n    x9 = ofcolor(x5, EIGHT)\n    x10 = fill(x6, EIGHT, x9)\n    x11 = fill(x10, FOUR, x7)\n    O = fill(x11, SEVEN, x8)\n    return O"], [0.652277101112151, "def solve_6b324449(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.652277101112151, "def solve_88c3a234(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.652277101112151, "def solve_e75085ab(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.652277101112151, "def solve_ee8557e0(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.6557151442133381, "def solve_88492f5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_7862e82c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_eef88931(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_ec8a7ba3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_3ac81dae(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_75253537(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6632350892986584, "def solve_d15ffe74(I):\n    O = downscale(I, TWO)\n    return O"], [0.6748161707949084, "def solve_e1da81e2(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6943272070873828, "def solve_6b142084(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    O = subgrid(x2, I)\n    return O"], [0.7120344565700184, "def solve_2ee1cf76(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.7120344565700184, "def solve_10ddfa34(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.7121560919415234, "def solve_1a349f4f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = size(I)\n    x5 = positive(x4)\n    x6 = branch(x5, hsplit, vsplit)\n    x7 = x6(I, TWO)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = palette(x8)\n    x11 = palette(x9)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = shape(x8)\n    x15 = canvas(x13, x14)\n    x16 = ofcolor(x8, x13)\n    x17 = ofcolor(x9, x13)\n    x18 = intersection(x16, x17)\n    O = fill(x15, TWO, x18)\n    return O"], [0.7121560919415234, "def solve_c17e5a67(I):\n    x1 = height(I)\n    x2 = equality(x1, TWO)\n    x3 = branch(x2, vsplit, hsplit)\n    x4 = x3(I, TWO)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = palette(x5)\n    x8 = palette(x6)\n    x9 = intersection(x7, x8)\n    x10 = first(x9)\n    x11 = shape(x5)\n    x12 = canvas(x10, x11)\n    x13 = ofcolor(x5, x10)\n    x14 = ofcolor(x6, x10)\n    x15 = intersection(x13, x14)\n    O = fill(x12, TWO, x15)\n    return O"], [0.7121560919415234, "def solve_4e091057(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7121560919415234, "def solve_04965cd9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7164645384977338, "def solve_7e670e80(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, vline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, hsplit, vsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [0.7313689109828214, "def solve_16d230f2(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_1ce68798(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_5924995a(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7313689109828214, "def solve_4d353fd4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7356195315428602, "def solve_764b2bcb(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.7513894621344644, "def solve_7da2e58a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.7514237970163009, "def solve_a6f5aca8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_a1b13ac0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_0e14f048(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7635614912120104, "def solve_772e7cfa(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7635614912120104, "def solve_ae5737d6(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7702738530895862, "def solve_28a0ef71(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_c5737642(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_05335b56(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_8a9de9bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_ced19998(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_22da10a5(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7707492564922985, "def solve_e8bc789f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.7707492564922985, "def solve_419857c4(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.7717845608238315, "def solve_ff3e3391(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.7834355548082396, "def solve_5f663faf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = compress(I)\n    x5 = mostcolor(x4)\n    x6 = tophalf(I)\n    x7 = lefthalf(x6)\n    x8 = vmirror(x7)\n    x9 = hconcat(x7, x8)\n    x10 = hmirror(x9)\n    x11 = vconcat(x9, x10)\n    x12 = tophalf(I)\n    x13 = righthalf(x12)\n    x14 = vmirror(x13)\n    x15 = hconcat(x14, x13)\n    x16 = hmirror(x15)\n    x17 = vconcat(x15, x16)\n    x18 = bottomhalf(I)\n    x19 = lefthalf(x18)\n    x20 = vmirror(x19)\n    x21 = hconcat(x19, x20)\n    x22 = hmirror(x21)\n    x23 = vconcat(x22, x21)\n    x24 = bottomhalf(I)\n    x25 = righthalf(x24)\n    x26 = vmirror(x25)\n    x27 = hconcat(x26, x25)\n    x28 = hmirror(x27)\n    x29 = vconcat(x28, x27)\n    x30 = astuple(x11, x17)\n    x31 = astuple(x23, x29)\n    x32 = combine(x30, x31)\n    x33 = argmax(x32, numcolors)\n    x34 = asindices(x33)\n    x35 = ofcolor(x33, x5)\n    x36 = difference(x34, x35)\n    O = fill(x33, x3, x36)\n    return O"], [0.7946931652854432, "def solve_98094b0c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7946931652854432, "def solve_99e148ab(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7946931652854432, "def solve_1942f6a5(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7971477159799929, "def solve_644ec17c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 = size(x1)\n    x13 = height(I)\n    x14 = decrement(x13)\n    x15 = toivec(x14)\n    x16 = lbind(shift, x15)\n    x17 = height(I)\n    x18 = decrement(x17)\n    x19 = tojvec(x18)\n    x20 = lbind(shift, x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x18)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = fill(x24, NEG_ONE, x26)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 =difference(x29, x28)\n    O = fill(x27, ZERO, x30)\n    return O"], [0.8058042763965544, "def solve_69c62704(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8058042763965544, "def solve_d4739b48(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8058042763965544, "def solve_d82cdcae(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8058042763965544, "def solve_d8713635(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8058042763965544, "def solve_77bd2bbc(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8058042763965544, "def solve_fe025daf(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8078379565261865, "def solve_0cc05f66(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = compose(neighbors, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x2)\n    x6 = paint(I, x5)\n    x7 = replace(x6, ONE, SIX)\n    x8 = replace(x7, TWO, SEVEN)\n    x9 = replace(x8, THREE, EIGHT)\n    O = replace(x9, FOUR, NINE)\n    return O"], [0.8141732132799135, "def solve_1a1ea0b3(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8146931652854432, "def solve_5ee29d0d(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = upscale(I, x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = vupscale(I, x7)\n    x9 = asobject(x8)\n    x10 = shift(x9, UNITY)\n    O = paint(I, x10)\n    return O"], [0.8220447986833391, "def solve_d5cfaaa2(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, NINE)\n    x4 = switch(x3, ONE, FOUR)\n    O = switch(x4, EIGHT, NINE)\n    return O"], [0.8220447986833391, "def solve_b495cf3a(I):\n    O = switch(I, EIGHT, TWO)\n    return O"], [0.8277590843976249, "def solve_cbb85e73(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_53ff9664(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, x5, x2)\n    return O"], [0.8277590843976249, "def solve_137a5410(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_95198b43(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_e7c5a850(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_565abbe6(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_005df2b3(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_666e482a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_9ed4e2f5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277652129751821, "def solve_e6af0c09(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8280264986187765, "def solve_dcaafdad(I):\n    x1 = asobject(I)\n    x2 = flip(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = mostcolor(I)\n    x6 = objects(x4, T, F, T)\n    x7 = matcher(color, x5)\n    x8 = compose(flip, x7)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x4, TWO, x9)\n    O = replace(x10, NEG_ONE, ZERO)\n    return O"], [0.829564622162508, "def solve_6f00be31(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.8341973243152688, "def solve_b29aad50(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.8376932799217021, "def solve_ba13400d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8477590843976248, "def solve_f630a98f(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [0.8500329919680351, "def solve_d30650af(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8527276661680809, "def solve_b8e525cc(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8527276661680809, "def solve_ebf739a0(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8527276661680809, "def solve_a6c35bb6(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8530872511837071, "def solve_bbf8da1a(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.8530872511837071, "def solve_d4b2c0f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.8539501994077682, "def solve_84cad5fa(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x2, ONE)\n    x13 = combine(x12, x11)\n    x14 = rbind(toobject, I)\n    x15 = compose(color, x14)\n    x16 = apply(x15, x13)\n    x17 = interval(ZERO, x5, ONE)\n    x18 = pair(x17, x16)\n    x19 = compose(invert, first)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [0.8552576021850845, "def solve_00895131(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.8552576021850845, "def solve_093bc945(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.8558329013380718, "def solve_168ea23c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = box(x3)\n    x5 = difference(x4, x3)\n    x6 = inbox(x3)\n    x7 = backdrop(x6)\n    x8 = lbind(position, x7)\n    x9 = compose(x8, initset)\n    x10 = lowermost(x7)\n    x11 = rightmost(x7)\n    x12 = uppermost(x7)\n    x13 = leftmost(x7)\n    x14 = rbind(greater, x10)\n    x15 = compose(x14, first)\n    x16 = lbind(greater, x12)\n    x17 = compose(x16, first)\n    x18 = rbind(greater, x11)\n    x19 = compose(x18, last)\n    x20 = lbind(greater, x13)\n    x21 = compose(x20, last)\n    x22 = compose(invert, x17)\n    x23 = fork( add, x15, x22)\n    x24 = compose(invert, x21)\n    x25 = fork(add, x19, x24)\n    x26 = fork(astuple, x23, x25)\n    x27 = fork(shoot, identity, x26)\n    x28 = mapply(x27, x5)\n    x29 = combine(x28, x7)\n    O = fill(I, FOUR, x29)\n    return O"], [0.8559241864624044, "def solve_9d7fd276(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.8559241864624044, "def solve_0dc55135(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.8559241864624044, "def solve_eb96cb35(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, x1, I)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.8559241864624044, "def solve_7718d16f(I):\n    x1 = dmirror(I)\n    x2 = papply(pair, I, x1)\n    x3 = lbind(apply, maximum)\n    x4 = apply(x3, x2)\n    x5 = mostcolor(x4)\n    x6 = replace(x4, ZERO, x5)\n    x7 = index(x6, ORIGIN)\n    x8 = shoot(ORIGIN, UNITY)\n    O = fill(x6, x7, x8)\n    return O"], [0.8577183064349801, "def solve_b96ae874(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x9, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 =x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.8577183064349801, "def solve_04e5e1da(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = replace(x9, x21, x11)\n    x23 = branch(x5, dmirror, identity)\n    x24 = branch(x5, height, width)\n    x25 = x24(I)\n    x26 = astuple(ONE, x25)\n    x27 = canvas(x15, x26)\n    x28 = x23(x27)\n    x29 = replace(x10, x21, x14)\n    x30 = x8(x22, x28)\n    x31 = branch(x5, width, height)\n    x32 = x31(I)\n    x33 = even(x32)\n    x34 = branch(x33, x22, x30)\n    O = x8(x34, x29)\n    return O"], [0.8581546500312859, "def solve_c4e15809(I):\n    x1 = ofcolor(I, TWO)\n    x2 = vmirror(x1)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, TWO, ZERO)\n    x5 = mapply(dneighbors, x3)\n    x6 = mapply(ineighbors, x3)\n    x7 = fill(x4, ONE, x5)\n    O = fill(x7, TWO, x6)\n    return O"], [0.8588198194436257, "def solve_bd183454(I):\n    x1 = width(I)\n    x2 = height(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x1)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hmirror(x5)\n    O = vconcat(x5, x6)\n    return O"], [0.858844268759789, "def solve_f9c3d2a9(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.858844268759789, "def solve_c854580d(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(x10, x5)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [0.8601027895391421, "def solve_85df7c3f(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = switch(x1, ONE, TWO)\n    x4 = apply(x2, x3)\n    x5 = switch(x4, ONE, TWO)\n    O = cmirror(x5)\n    return O"], [0.8604574970960375, "def solve_b7f16dad(I):\n    O = replace(I, SIX, TWO)\n    return O"], [0.8606237858337549, "def solve_dbbf0658(I):\n    x1 = ofcolor(I, TWO)\n    x2 = mapply(neighbors, x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.8616512583526341, "def solve_0911b665(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmin(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = upscale(x3, FOUR)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, FIVE, x6)\n    return O"], [0.8616889960660732, "def solve_e3dea5c4(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.8626797193182597, "def solve_0f66d46c(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ONE)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, FOUR, x5)\n    return O"], [0.8627265337429545, "def solve_a695d08e(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = lbind(recolor, TWO)\n    x5 = rbind(ofcolor, x1)\n    x6 = chain(x4, delta, x5)\n    x7 = fork(paint, identity, x6)\n    x8 = apply(x7, x3)\n    O = merge(x8)\n    return O"], [0.8632184800688373, "def solve_209d6837(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.8632184800688373, "def solve_32363757(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.8634166807695071, "def solve_4b6458aa(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, ZERO, x4)\n    return O"], [0.8634207638517514, "def solve_66c3b834(I):\n    O = vmirror(I)\n    return O"], [0.8634577218981633, "def solve_dc2fa2cf(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.863678348633302, "def solve_3b8f8b0c(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863678348633302, "def solve_38db470a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863678348633302, "def solve_b624823f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863678348633302, "def solve_3ed1564f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863706518437685, "def solve_cdfc81a3(I):\n    O = dmirror(I)\n    return O"], [0.863758209381856, "def solve_6da06de9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(x2)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = first(x2)\n    x7 = ulcorner(x2)\n    x8 = add(UNITY, x7)\n    x9 = shift(x2, x8)\n    O = paint(I, x9)\n    return O"], [0.8637867634430995, "def solve_c13ead6f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.8637867634430995, "def solve_609701e2(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_f03e0b76(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_a9428b8f(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8638179923732853, "def solve_620ec29e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(difference, x2)\n    x4 = rbind(greater, TWO)\n    x5 = chain(x4, size, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = sfilter(x2, x6)\n    O = fill(I, ZERO, x7)\n    return O"], [0.8638701955087361, "def solve_0f4cfdf2(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.8638701955087361, "def solve_75c4719f(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_518bcd12(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = rbind(shoot, DOWN)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = fork(combine, x2, x5)\n    x8 = fork(combine, x3, x6)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x1)\n    O = fill(I, ZERO, x10)\n    return O"], [0.8638701955087361, "def solve_b87a61ad(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_50727d36(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_4a7f53f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_a0707d65(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = fork(subtract, first, last)\n    x4 = fork(multiply, sign, identity)\n    x5 = compose(x4, x3)\n    x6 = lbind(greater, THREE)\n    x7 = chain(x6, maximum, x5)\n    x8 = lbind(lbind, astuple)\n    x9 = rbind(chain, x8)\n    x10 = lbind(compose, x7)\n    x11 = rbind(x9, x10)\n    x12 = lbind(lbind, sfilter)\n    x13 = compose(x11, x12)\n    x14 = lbind(mapply, backdrop)\n    x15 = fork(apply, x13, identity)\n    x16 = compose(x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x2)\n    x19 = fill(I, FOUR, x18)\n    O = fill(x19, x1, x2)\n    return O"], [0.8638701955087361, "def solve_408af10f(I):\n    x1 = partition(I)\n    x2 = fork(recolor, color, backdrop)\n    x3 = apply(x2, x1)\n    x4 = mfilter(x3, hline)\n    x5 = mfilter(x3, vline)\n    x6 = paint(I, x4)\n    O = paint(x6, x5)\n    return O"], [0.8638701955087361, "def solve_e47b5d44(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.8638701955087361, "def solve_f996de7b(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.8638701955087361, "def solve_bd1643c9(I):\n    O = switch(I, THREE, FOUR)\n    return O"], [0.8638701955087361, "def solve_e5bbb8c8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_c8b083f9(I):\n    O = replace(I, SEVEN, FIVE)\n    return O"], [0.8638701955087361, "def solve_8fef37f2(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.8638701955087361, "def solve_b34d094e(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_9808e6aa(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_1f7e96df(I):\n    x1 = rot270(I)\n    x2 = shoot(ORIGIN, UNITY)\n    O = rot90(x1)\n    return O"], [0.8638701955087361, "def solve_1a629316(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638891638983809, "def solve_e4cf7a5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8638891638983809, "def solve_0d67ec31(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8639438916538609, "def solve_c2cd1069(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_c4d64c3d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_a599a311(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_d5f1f670(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_4029763f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_b65500cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_d03213e5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_d535e67c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_c314a3a7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8640020311887445, "def solve_cba8ff14(I):\n    x1 = height(I)\n    x2 = mostcolor(I)\n    x3 = asobject(I)\n    x4 = subtract(x1, TWO)\n    x5 = divide(x4, THREE)\n    x6 = astuple(x5, x5)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = partition(x7)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = extract(x8, x10)\n    x12 = initset(x2)\n    x13 = palette(x3)\n    x14 = palette(x11)\n    x15 = difference(x13, x14)\n    x16 = difference(x15, x12)\n    x17 = first(x16)\n    x18 = interval(ZERO, THREE, ONE)\n    x19 = product(x18, x18)\n    x20 = totuple(x19)\n    x21 = apply(first, x20)\n    x22 = apply(last, x20)\n    x23 = lbind(multiply, x5)\n    x24 = apply(x23, x21)\n    x25 = apply(x23, x22)\n    x26 = papply(add, x24, x21)\n    x27 = papply(add, x25, x22)\n    x28 = papply(astuple, x26, x27)\n    x29 = lbind(shift, x11)\n    x30 = mapply(x29, x28)\n    O = underfill(I, x17, x30)\n    return O"], [0.8640253338383225, "def solve_5db04b51(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_49d4186d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_f24d0ebe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_02a89004(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_7838e3ab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_e3a4eff9(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_407fc4db(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_045d37fe(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_be7ae088(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_057f227c(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_35ba5af2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x765 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x765)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_94e474e4(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_ef5ed793(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_149b7eab(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_9d1e76b5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640364842464535, "def solve_d2252d53(I):\n    x1 = objects(I, T, F, F)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = compose(x4, center)\n    x6 = fork(recolor, color, x5)\n    x7 = mapply(x6, x2)\n    x8 = paint(I, x7)\n    O = cover(x8, x3)\n    return O"], [0.8640827805427497, "def solve_7eb0c9e0(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.8641376097298877, "def solve_e6b81b35(I):\n    O = rot180(I)\n    return O"], [0.8641376097298877, "def solve_3c5135af(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = subgrid(x3, x1)\n    return O"], [0.8641453134548085, "def solve_ff5dc2cb(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641474651177995, "def solve_2244a8de(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.8643386284959661, "def solve_e10b7db7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = rbind(shoot, DOWN)\n    x4 = compose(x3, last)\n    x5 = fork(recolor, first, x4)\n    x6 = mapply(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8644669437834643, "def solve_391d07f0(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.864487569023801, "def solve_fdfebfca(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.8657212376195678, "def solve_838abe8c(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, ONE, x3)\n    return O"], [0.866911713810044, "def solve_8d54d2e9(I):\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = delta(x2)\n    O = fill(I, NEG_ONE, x3)\n    return O"], [0.867063767072984, "def solve_c840a2ca(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, ONE, x2)\n    return O"], [0.8684204478249318, "def solve_2a96e83a(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.8684204478249318, "def solve_a9fbb9cf(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor(ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ONE, x6)\n    return O"], [0.8687415090376716, "def solve_5e1d6cf1(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_3aa0b20b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_6f6586d3(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_2ffdef67(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_170e6eb2(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_5c6a7255(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_0562b09e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_6bf5ed83(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_2f954550(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_52f7f1d5(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.895840777338116, "def solve_7ba841fd(I):\n    x1 = initset(ORIGIN)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = objects(I, T, F, F)\n    x6 = colorfilter(x5, x4)\n    x7 = fork(add, leftmost, uppermost)\n    x8 = argmin(x6, x7)\n    x9 = argmax(x6, x7)\n    x10 = lbind(sfilter, x6)\n    x11 = rbind(compose, leftmost)\n    x12 = chain(size, x10, x11)\n    x13 = lbind(sfilter, x6)\n    x14 = rbind(compose, uppermost)\n    x15 = chain(size, x13, x14)\n    x16 = lbind(lbind, greater)\n    x17 = chain(x12, x16, leftmost)\n    x18 = lbind(rbind, greater)\n    x19 = chain(x12, x18, leftmost)\n    x20 = lbind(lbind, greater)\n    x21 = chain(x15, x20, uppermost)\n    x22 = lbind(rbind, greater)\n    x23 = chain(x15, x22, uppermost)\n    x24 = fork(equality, x17, x19)\n    x25 = fork(equality, x21, x23)\n    x26 = fork(both, x24, x25)\n    x27 = extract(x6, x26)\n    x28 = fill(I, ONE, x8)\n    x29 = fill(x28, THREE, x9)\n    O = fill(x29, TWO, x27)\n    return O"], [0.8966427298715387, "def solve_716711e4(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_27e71a47(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_57ef74fc(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [0.8966427298715387, "def solve_04447cf7(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [1.0, "def solve_cd3e914e(I):\n    x1 = astuple(RVERT, dmirror)\n    x2 = astuple(hmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = fork(multiply, height, width)\n    x5 = rbind(objects, F)\n    x6 = rbind(x5, F)\n    x7 = rbind(x6, T)\n    x8 = rbind(argmin, x4)\n    x9 = lbind(contained, ORIGIN)\n    x10 = chain(x9, toindices, x8)\n    x11 = compose(x10, x7)\n    x12 = lbind(compose, x11)\n    x13 = rbind(rapply, I)\n    x14 = compose(initset, x12)\n    x15 = chain(first, x13, x14)\n    x16 = extract(x3, x15)\n    x17 = x16(I)\n    x18 = height(I)\n    x19 = first(x17)\n    x20 = matcher(identity, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = size(x22)\n    x24 = divide(x18, x23)\n    x25 = increment(x24)\n    x26 = double(x25)\n    x27 = repeat(x22, x26)\n    x28 = merge(x27)\n    x29 = double(x18)\n    x30 = repeat(x28, x29)\n    x31 = asobject(x30)\n    x32 = chain(increment, last, last)\n    x33 = compose(first, last)\n    x34 = fork(greater, x32, x33)\n    x35 = sfilter(x31, x34)\n    x36 = upscale(x17, TWO)\n    x37 = dmirror(x35)\n    x38 = combine(x35, x37)\n    x39 = paint(x36, x38)\n    O = x16(x39)\n    return O"], [1.0, "def solve_16575065(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fcff4807(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_9135ea94(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_56de6084(I):\n    x1 = I21(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(size, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_7cfb6ffd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a4da1f44(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(E21, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [1.0, "def solve_f37767ee(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = astuple(dmirror, cmirror)\n    x6 = astuple(hmirror, identity)\n    x7 = combine(x5, x6)\n    x8 = chain(initset, ulcorner, lrcorner)\n    x9 = fork(rapply, x8, identity)\n    x10 = compose(first, x9)\n    x11 = rbind(ofcolor, x4)\n    x12 = compose(x11, x10)\n    x13 = fork(connect, x12, toindices)\n    x14 = compose(x13, x10)\n    x15 = fork(recolor, color, x14)\n    x16 = mapply(x15, x11)\n    x17 = paint(I, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = compose(toivec, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x18)\n    x22 = intersection(x19, x21)\n    x23 = fork(recolor, color, x22)\n    x24 = mapply(x23, x18)\n    O = paint(x17, x24)\n    return O"], [1.0, "def solve_958af7c2(I):\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = branch(x3, ONE, ZERO_BY_TWO)\n    x5 = ZERO(x4)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = frontiers(I)\n    x9 = merge(x8)\n    x10 = mostcolor(x9)\n    x11 = ofcolor(I, x10)\n    x12 = x11(x8)\n    x13 = ofcolor(I, x10)\n    x14 = last(x13)\n    x15 = ulcorner(x14)\n    x16 = x11(x14)\n    x17 = shift(x11, x16)\n    x18 = ulcorner(x17)\n    x19 = urcorner(x17)\n    x20 = shoot(x19, UNITY)\n    x21 = shoot(x18, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = lrcorner(x2)\n    x24 = rbind(shoot, x38)\n    x25 = mapply(x24, x22)\n    O = fill(I, x10, x25)\n    return O"], [1.0, "def solve_219380fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x1999)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [1.0, "def solve_5e843db7(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_afa6903a(I):\n    x1 = lbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_8dcdf935(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_475c4085(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_19d06e6e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vline, hline)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = shape(I)\n    x11 = canvas(x9, x10)\n    x12 = hconcat(I, x11)\n    x13 = objects(x12, F, F, T)\n    x14 = argmax(x13, numcolors)\n    x15 = apply(ulcorner, x13)\n    x16 = normalize(x15)\n    x17 = lbind(shift, x16)\n    x18 = mapply(x17, x14)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8f60c184(I):\n    x1 = f28(I)\n    x2 = vmirror(x1)\n    O = hconcat(I, x2)\n    return O"], [1.0, "def solve_8dd05531(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_b6a5cd90(I):\n    x1 = lbind(remove, TWO)\n    x2 = lbind(apply, x1)\n    x3 = compose(x2, palette)\n    x4 = lbind(lbind, shift)\n    x5 = rbind(argmax, numcolors)\n    x6 = lbind( apply, x5)\n    x7 = compose(x6, toindices)\n    x8 = chain(x3, x7, x4)\n    x9 = rbind(contained, x5)\n    x10 = compose(x9, first)\n    x11 = rbind(sfilter, x10)\n    x12 = lbind(rbind, subtract)\n    x13 = chain(x11, x12, RIGHT)\n    x14 = fork(argmin, x8, x13)\n    x15 = compose(x4, x14)\n    x16 = fork(shift, x15, ulcorner)\n    x17 = mapply(x16, x1)\n    O = paint(I, x17)\n    return O"], [1.0, "def solve_245e41b6(I):\n    x1 = lbind(apply, maximum)\n    x2 = apply(x1, I)\n    x3 = interval(ZERO, FIVE, ONE)\n    x4 = pair(x2, x3)\n    x5 = rbind(add, THREE)\n    x6 = rbind(subtract, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = lbind(apply, maximum)\n    x10 = chain(x9, asobject, x8)\n    x11 = fork(filter, x10, x6)\n    x12 = compose(size, x11)\n    x13 = argmin(x4, x12)\n    x14 = ofcolor(I, x13)\n    x15 = interval(ONE, FIVE, ONE)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x14, x17)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    O = paint(I, x20)\n    return O"], [1.0, "def solve_aacf595b(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_1fa191e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_6c1ae3d1(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_a85fbe35(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_e5855a4a(I):\n    x1 = objects(I, T, F, T)\n    x2 = apply(delta, x1)\n    O = mfilter(x2, square)\n    return O"], [1.0, "def solve_13e8d3b4(I):\n    x1 = height(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = rot90(x7)\n    x9 = double(x1)\n    x10 = divide(x9, THREE)\n    x11 = increment(x10)\n    x12 = repeat(x8, x11)\n    x13 = combine(x4, x12)\n    x14 = recolor(FIVE, x13)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_d59623d9(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_49c7395e(I):\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = matcher(first, ZERO)\n    x20 = compose(flip, x19)\n    x21 = sfilter(x18, x20)\n    x22 = lbind(shift, x21)\n    x23 = height(I)\n    x24 = divide(x23, x17)\n    x25 = increment(x24)\n    x26 = width(I)\n    x27 = divide(x26, x25)\n    x28 = increment(x27)\n    x29 = invert(x25)\n    x30 = increment(x28)\n    x31 = interval(x29, x30, ONE)\n    x32 = invert(x28)\n    x33 = increment(x28)\n    x34 = interval(x32, x33, ONE)\n    x35 = product(x31, x34)\n    x36 = astuple(x17, x12)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x21)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_874b43ac(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6278ed61(I):\n    x1 = trim(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(x1)\n    x5 = lefthalf(x4)\n    x6 = numcolors(x5)\n    x7 = equality(x6, ONE)\n    x8 = righthalf(x5)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x3, x8, x10)\n    x12 = extract(x11, last)\n    x13 = first(x12)\n    x14 = trim(x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(I, x16)\n    x18 = toindices(x16)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = colorfilter(x22, TWO)\n    x24 = mapply(first, x23)\n    x25 = paint(x21, x24)\n    x26 = replace(x25, ONE, SIX)\n    x27 = paint(x26, TWO)\n    x28 = rbind(65, TWO)\n    x29 = fgpartition(x27)\n    x30 = merge(x29)\n    x31 = recolor(TWO, x30)\n    x32 = initset(x28)\n    x33 = insert(x27, x32)\n    x34 = insert(x31, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x34)\n    x37 = dmirror(x35)\n    x38 = combine(x34, x37)\n    x39 = paint(x36, x38)\n    O = x35(x39)\n    return O"], [1.0, "def solve_ac45bfaa(I):\n    x1 = subgrid(x1, I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [1.0, "def solve_6caeaa0b(I):\n    x1 = objects(I, T, F, T)\n    x2 = ofcolor(I, ONE)\n    x3 = lowermost(x2)\n    x4 = lbind(subtract, x3)\n    x5 = chain(toivec, x4, lowermost)\n    x6 = fork(shift, identity, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = mapply(x6, x1)\n    O = paint(x8, x9)\n    return O"], [1.0, "def solve_bdaa5977(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = leftmost(x8)\n    x10 = rbind(contained, x9)\n    x11 = compose(flip, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x5)\n    x15 = greater(x13, x14)\n    x16 = branch(x15, x12, x13)\n    x17 = contained15(I, x16)\n    x18 = height(x17)\n    x19 = divide(x18, THREE)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = crop(I, ORIGIN, x21)\n    x23 = hupscale(x22, x19)\n    x24 = chain(positive, size, x23)\n    x25 = contained(x17, x24)\n    x26 = flip(x25)\n    x27 = branch(x26, x25, x22)\n    x28 = multiply(x27, FOUR)\n    x29 = add(x28, TWO)\n    x30 = branch(x26, x26, x29)\n    x31 = branch(x25, x27, x30)\n    x32 = multiply(x31, FOUR)\n    x33 = add(x32, TWO)\n    x34 = canvas(x12, x33)\n    x35 = ofcolor(x34, x12)\n    x36 = shift(x35, UNITY)\n    O = fill(x34, EIGHT, x36)\n    return O"], [1.0, "def solve_55862881(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db258008(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = lbind(greater, x9)\n    x11 = compose(x10, height)\n    x12 = rbind(greater, x11)\n    x13 = compose(x12, width)\n    x14 = matcher(x13, ZERO)\n    x15 = fork(either, x14, x15)\n    x16 = rbind(greater, ONE)\n    x17 = compose(x16, height)\n    x18 = matcher(x17, ZERO)\n    x19 = fork(either, x18, x15)\n    x20 = compose(flip, x19)\n    x21 = mfilter(x2, x14)\n    x22 = mfilter(x2, x20)\n    x23 = fill(I, x8, x21)\n    O = fill(x23, x8, x22)\n    return O"], [1.0, "def solve_58f0c133(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4a5d9e27(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = mapply(double, x3)\n    O = fill(I, ONE, x4)\n    return O"], [1.0, "def solve_47806297(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_2293b2e0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ea5d898d(I):\n    x1 = compose(positive, size)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(lowermost, x2)\n    x4 = apply(x3, I)\n    x5 = merge(x4)\n    x6 = lbind(colorcount, x5)\n    x7 = compose(toivec, x6)\n    x8 = apply(x7, x5)\n    x9 = argmin(x8, size)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = shoot(x10, DOWN_LEFT)\n    x13 = ofcolor(x11, x9)\n    x14 = normalize(x11)\n    x15 = difference(x13, x14)\n    x16 = toobject(x15, x11)\n    x17 = mostcolor(x16)\n    x18 = colorcount(I, x17)\n    x19 = leftmost(x9)\n    x20 = rbind(astuple, x19)\n    x21 = apply(x20, x15)\n    x22 = rbind(shoot, x21)\n    x23 = mapply(x22, x17)\n    x24 = fill(I, ONE, x23)\n    x25 = mapply(x22, x15)\n    O = fill(x24, x9, x25)\n    return O"], [1.0, "def solve_9a3c4275(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_bff64c28(I):\n    x1 = remove(ZERO, x1)\n    x2 = lbind(apply, last)\n    x3 = lbind(chain, x2)\n    x4 = rbind(rbind,0000000)\n    x5 = lbind(lbind, shoot)\n    x6 = lbind(x5, x4)\n    x7 = lbind(lbind, mapply)\n    x8 = chain(x6, x7, box)\n    x9 = x3(x1)\n    x10 = x8(x9)\n    x11 = fork(recolor, color, x8)\n    x12 = mapply(x11, x10)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_96adac5a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = order(x8, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = subgrid(x11, x12)\n    x14 = trim(x13)\n    x15 = subgrid(x14, x12)\n    x16 = replace(x15, ONE, TWO)\n    x17 = replace(x16, EIGHT, TWO)\n    x18 = compress(x17)\n    x19 = upscale(x18, THREE)\n    x20 = ofcolor(x19, TWO)\n    x21 = ofcolor(x19, ONE)\n    x22 = rbind(gravitate, x20)\n    x23 = compose(x22, initset)\n    x24 = fork(multiply, identity, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x19)\n    x28 = width(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = multiply(x29, THREE)\n    x31 = rbind(multiply, x30)\n    x32 = apply(x31, x29)\n    x33 = lbind(shift, x12)\n    x34 = mapply(x33, x32)\n    O = paint(x6, x34)\n    return O"], [1.0, "def solve_f002ec71(I):\n    O = branch(x1, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_50c9f3be(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_330ea031(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6de1c2bc(I):\n    x1 = trim(I)\n    x2 = objects(I, T, F, F)\n    x3 = vperiod(x2)\n    x4 = shift(x2, x3)\n    x5 = THREE(x4, NEG_ONE)\n    x6 = interval(ZERO, NINE, ONE)\n    x7 = apply(double, x6)\n    x8 = apply(decrement, x7)\n    x9 = papply(astuple, x7, x8)\n    x10 = apply(ulcorner, x8)\n    x11 = mapply(neighbors, x10)\n    x12 = apply(toindices, x8)\n    x13 =lbind(shoot, UP_RIGHT)\n    x14 = mapply(x13, x12)\n    x15 = fill(I, FOUR, x14)\n    x16 = chain(x17, x10, initset)\n    x17 = corners(x4)\n    x18 = insert(x14, x17)\n    x19 = lbind(contained, ZERO)\n    x20 = shoot(x4, x19)\n    x21 = branch(x20, height, width)\n    x22 = x21(I)\n    x23 = ofcolor(x22, ZERO)\n    x24 = asindices(x22)\n    x25 = x24(x24)\n    x26 = x25(x22)\n    x27 = intersection(x23, x26)\n    x28 = fill(x22, ZERO, x27)\n    O = fill(x28, ZERO, x1)\n    return O"], [1.0, "def solve_f2de09ea(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_ae6b992d(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_0a3221bb(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(prapply, connect)\n    x3 = fork(x2, x1, minimum)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_6c03923f(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_56eba404(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_ebeec005(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_efca7946(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_1436ab20(I):\n    ONE = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [1.0, "def solve_00132df3(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_71550f23(I):\n    x1 = trim(I)\n    x2 = recolor(281, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, TWO, x6)\n    return O"], [1.0, "def solve_27f020e1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = objects(I, T, F, T)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = colorfilter(x4, x7)\n    x9 = rbind(toobject, I)\n    x10 = rbind(colorcount, x7)\n    x11 = chain(x10, x9, color)\n    x12 = matcher(x11,12)\n    x13 = subtract(leFT, x12)\n    x14 = astuple(x13, x13)\n    x15 = canvas(x3, x14)\n    x16 = hconcat(x15, x15)\n    x17 = hmirror(x16)\n    O = vconcat(x16, x17)\n    return O"], [1.0, "def solve_daab482e(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = rbind(toobject, I)\n    x5 = chain(leastcolor, x4, delta)\n    x6 = rbind(shift, UP)\n    x7 = fork(connect, ulcorner, urcorner)\n    x8 = compose(x6, x7)\n    x9 = rbind(shift, DOWN)\n    x10 = fork(connect, llcorner, lrcorner)\n    x11 = compose(x9, x10)\n    x12 = fork(astuple, x8, x11)\n    x13 = lbind(rbind, manhattan)\n    x14 = compose(x13, delta)\n    x15 = fork(argmin, x12, x14)\n    x16 = fork(combine, first, x15)\n    x17 = fork(recolor, x5, x16)\n    x18 = mapply(x17, x3)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_9606ce8a(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_b92f26f0(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = shape(x3)\n    x7 = add(x6, TWO_BY_ZERO)\n    O = crop(x4, x3, x7)\n    return O"], [1.0, "def solve_dd1e6082(I):\n    x1 = vmirror(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = mostcommon(x6)\n    x8 = size(x1)\n    x9 = canvas(x7, x8)\n    x10 = asobject(x1)\n    x11 = matcher(first, x7)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = shape(I)\n    x15 = double(x14)\n    x16 = divide(x15, THREE)\n    x17 = multiply(x16, TWO)\n    x18 = canvas(multiply, x17)\n    x19 = bottomhalf(I)\n    x20 = lbind(shift, x19)\n    x21 = objects(x18, T, F, T)\n    x22 = merge(x21)\n    x23 = paint(x18, x22)\n    x24 = astuple(x26, x23)\n    x25 = replace(x24, x7, x5)\n    x26 = combine(x20, x25)\n    x27 = paint(x23, x26)\n    x28 = astuple(x25, x13)\n    x29 = astuple(x28, x22)\n    x30 = initset(x29)\n    x31 = insert(x27, x30)\n    x32 = backdrop(x31)\n    x33 = mapply(x32, x26)\n    O = paint(x22, x33)\n    return O"], [1.0, "def solve_5176d7d0(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorcount, I)\n    x6 = argmin(x4, x5)\n    x7 = merge(x1)\n    x8 = cover(I, x7)\n    x9 = normalize(x3)\n    x10 = lefthalf(x8)\n    x11 = righthalf(x8)\n    x12 = width(x9)\n    x13 = width(x10)\n    x14 = divide(x12, x13)\n    x15 = width(x11)\n    x16 = height(x9)\n    x17 = height(x10)\n    x18 = divide(x16, x17)\n    x19 = astuple(x14, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x9)\n    x25 = mapply(x24, x23)\n    x26 = paint(x8, x25)\n    x27 = subgrid(x3, x26)\n    O = replace(x27, x6, x13)\n    return O"], [1.0, "def solve_fd94cf39(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(Judim, merge, x3)\n    x5 = apply(x4, x7)\n    x6 = merge(x5)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(I, EIGHT, x8)\n    return O"], [1.0, "def solve_1bd727ce(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_6682fd6e(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = hperiod(x5)\n    x7 = width(I)\n    x8 = multiply(x7, x6)\n    x9 = multiply(UNITY, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = multiply(x5, x10)\n    x12 = lbind(multiply, x11)\n    x13 = neighbors(ORIGIN)\n    x14 = mapply(neighbors, x13)\n    x15 = lbind(shift, x14)\n    x16 = height(I)\n    x17 = divide(x16, x6)\n    x18 = increment(x17)\n    x19 = width(I)\n    x20 = divide(x19, x6)\n    x21 = increment(x20)\n    x22 = asobject(I)\n    x23 = shape(I)\n    x24 = decrement(x23)\n    x25 = lbind(multiply, x24)\n    x26 = toivec(x25)\n    x27 = apply(x25, x20)\n    x28 = apply(x25, x22)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    O = paint(x10, x30)\n    return O"], [1.0, "def solve_c96b310f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = positive(x2)\n    x4 = branch(x3, dmirror, identity)\n    x5 = x4(I)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = center(x7)\n    x9 = matcher(identity, x8)\n    x10 = rbind(sfilter, x9)\n    x11 = compose(size, x10)\n    x12 = apply(x11, x5)\n    x13 = argmin(x12, x11)\n    x14 = ofcolor(x13, ZERO)\n    x15 = ofcolor(x13, ONE)\n    x16 = rbind(colorcount, SIX)\n    x17 = argmax(x15, x16)\n    x18 = shape(x13)\n    x19 = canvas(ZERO, x18)\n    x20 = lbind(g16, x13)\n    x21 = lbind(gbind, subtract)\n    x22 = compose(x21, palette)\n    x23 = lbind(recolor, x17)\n    x24 = rbind(ofcolor, x17)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(canvas, NEG_ONE)\n    x27 = compose(x26, x25)\n    x28 = fork(paint, x27, x23)\n    x29 = compose(x17, x28)\n    x30 = fork(intersection, x29, identity)\n    x31 = branch(x3, x29, x30)\n    x32 = mapply(x31, x14)\n    x33 = ofcolor(x13, ONE)\n    x34 = shift(x33, x17)\n    O = paint(x19, x34)\n    return O"], [1.0, "def solve_f4625437(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(outbox, outbox, outbox)\n    x5 = mapply(x4, x3)\n    x6 = corners(ORIGIN)\n    x7 = dmirror(I)\n    x8 = insert(UNITY, x7)\n    x9 = insert(SEITY, x8)\n    x10 = increment(x6)\n    x11 = x9(x110)\n    x12 = tojvec(x10)\n    x13 = lbind(shift, x12)\n    x14 = chain(x13, toivec, x8)\n    x15 = mapply(x14, x9)\n    x16 = paint(x1, x15)\n    O = x4(x16)\n    return O"], [1.0, "def solve_193e9875(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = rot90(x30)\n    return O"], [1.0, "def solve_cce033ee(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = multiply(x2, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = rbind(multiply, x2)\n    x6 = apply(x5, x1)\n    x7 = asobject(I)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = paint(x4, x9)\n    return O"], [1.0, "def solve_6c229708(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_f9556571(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_283b96cf(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = lbind(repeat, x16)\n    x18 = compose(dmirror, merge)\n    x19 = rbind(rapply, x2)\n    x20 = compose(initset, x17)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(xycolors, THREE)\n    x24 = decrement(x23)\n    x25 = height(x7)\n    x26 = matcher(x24, x25)\n    x27 = compose(flip, x26)\n    x28 = mfilter(x1, x27)\n    O = fill(x7, x4, x28)\n    return O"], [1.0, "def solve_65810784(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = shape(I)\n    x13 = maximum(x12)\n    x14 = lbind(astuple, x13)\n    x15 = apply(x14, x11)\n    x16 = maximum(x5)\n    x17 = lbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(shift, x45)\n    x20 = mapply(x19, x18)\n    O = fill(I, x8, x20)\n    return O"], [1.0, "def solve_7808f7a4(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3ee886d6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(I)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_dac20f8c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_97b398a2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_4ce73dec(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, THREE, x26)\n    return O"], [1.0, "def solve_1ce6c49f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9ae1084b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_1555c480(I):\n    x1 = rbind(shoot, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x2)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_25b632db(I):\n    x1 = width(I)\n    x2 = divide(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = astuple(x4, x4)\n    x6 = crop(I, ORIGIN, x5)\n    x7 = hmirror(x6)\n    x8 = vconcat(x6, x7)\n    x9 = double(x4)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = insert(x9, x10)\n    x12 = outbox(x11)\n    x13 = ulcorner(x12)\n    x14 = subgrid(x12, I)\n    x15 = objects(x14, F, T, T)\n    x16 = matcher(first, ZERO)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = merge(x18)\n    x20 = cover(x14, x19)\n    x21 = lbind(shift, x18)\n    x22 = mapply(x21, x20)\n    O = fill(x20, FOUR, x22)\n    return O"], [1.0, "def solve_753ab1a7(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = rbind(greater, x3)\n    x5 = compose(x4, size)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, corners)\n    x8 = mfilter(x6, x7)\n    x9 = mostcolor(I)\n    x10 = fill(I, x9, x8)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, DOWN)\n    x14 = paint(x10, x13)\n    x15 = normalize(x12)\n    x16 = shape(x12)\n    x17 = halve(x16)\n    x18 = invert(x17)\n    x19 = shift(x19, x18)\n    O = paint(x14, x19)\n    return O"], [1.0, "def solve_685e66fa(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shift, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = mostcolor(I)\n    x34 = fill(I, x33, x32)\n    O = fill(x34, ofcolor, x30)\n    return O"], [1.0, "def solve_d18fb2a8(I):\n    x1 = asindices(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = rbind(multiply, THREE)\n    x5 = rbind(intersection, THREE)\n    x6 = chain(x4, x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = sfilter(x3, x7)\n    x9 = difference(x3, x8)\n    O = fill(I, ZERO, x9)\n    return O"], [1.0, "def solve_b08cfca4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_87d73330(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_7be97669(I):\n    x1 = rot270(I)\n    x2 = rot90(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(4, x5)\n    return O"], [1.0, "def solve_4cbd252e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_32bd161f(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, size)\n    x24 = chain(size, dedupe, size)\n    x25 = compose(x24, x22)\n    x26 = lbind(apply, x11)\n    x27 = chain(ssize, dedupe, x26)\n    x28 = fork(rapply, x27, x22)\n    x29 = compose(first, x28)\n    x30 = compose(x19, x22)\n    x31 = fork(compose, x30, x29)\n    x32 = lbind(sfilter, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(asobject, x33, x33)\n    x35 = mapply(x34, x4)\n    x36 = shift(x35, UNITY)\n    x37 = paint(I, x36)\n    O = rot90(x37)\n    return O"], [1.0, "def solve_6e4c6ee1(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_4746a1ae(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = canvas(x10, x11)\n    return O"], [1.0, "def solve_0c7e9890(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_ae00ba36(I):\n    x1 = rbind(connect, DOWN)\n    x2 = compose(x1, last)\n    x3 = fork(recolor, first, x2)\n    x4 = mapply(x3, x1)\n    O = paint(I, x4)\n    return O"], [1.0, "def solve_dcf3305a(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b4076f66(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_ab3db620(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(rapply, I)\n    x5 = compose(initset, x4)\n    x6 = chain(first, x4, x5)\n    x7 = compose(x6, last)\n    x8 = lbind(fork, equality)\n    x9 = compose(x8, x7)\n    x10 = lbind(matcher, first)\n    x11 = compose(x10, x7)\n    x12 = fork(sfilter, x7, x11)\n    x13 = compose(asobject, x12)\n    x14 = apply(x13, x2)\n    x15 = difference(x14, x2)\n    x16 = mapply(x12, x15)\n    x17 = fill(I, ONE, x16)\n    x18 = objects(x17, T, F, T)\n    x19 = apply(urcorner, x2)\n    x20 = apply(llcorner, x2)\n    x21 = pair(x19, x20)\n    x22 = fork(add, first, last)\n    x23 = replace(x17, NINE, ZERO)\n    x24 = fork(add, first, last)\n    x25 = fork(add, x22, x24)\n    x26 = lbind(multiply, x17)\n    x27 = apply(x26, x21)\n    x28 = lbind(mapply, x27)\n    x29 = rbind(occurrences, x174)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x25)\n    x33 = fork(paint, identity, x32)\n    x34 = mapply(x33, x27)\n    O = x21(x34)\n    return O"], [1.0, "def solve_0fb82451(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_11ef7160(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_272de656(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_99e5d949(I):\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = asobject(I)\n    x22 = matcher(first, x20)\n    x23 = compose(flip, x22)\n    x24 = sfilter(x21, x23)\n    x25 = height(I)\n    x26 = divide(x25, x10)\n    x27 = increment(x26)\n    x28 = width(I)\n    x29 = divide(x28, x5)\n    x30 = increment(x29)\n    x31 = invert(x27)\n    x32 = interval(x31, x27, ONE)\n    x33 = invert(x30)\n    x34 = interval(x33, x30, ONE)\n    x35 = product(x32, x34)\n    x36 = astuple(feca, x10)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x35)\n    x39 = lbind(shift, x24)\n    x40 = mapply(x39, x38)\n    O = paint(I, x40)\n    return O"], [1.0, "def solve_a9017ece(I):\n    x1 = asindices(I)\n    x2 = tophalf(I)\n    x3 = lefthalf(x2)\n    x4 = tophalf(I)\n    x5 = righthalf(x4)\n    x6 = bottomhalf(I)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(I)\n    x9 = lefthalf(x8)\n    x10 = index(x3, x5)\n    x11 = branch(x10, asindices, x3)\n    x12 = branch(x10, initset, x5)\n    x13 = add(x12, DOWN)\n    x14 = insert(x13, x11)\n    x15 = index(x6, x1)\n    x16 = lrcorner(x15)\n    x17 = add(x16, UP_RIGHT)\n    x18 = insert(x17, x14)\n    x19 = shift(x18, UNITY)\n    O = paint(x3, x19)\n    return O"], [1.0, "def solve_a0d171f2(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x19 = fork(combine, x5, x8)\n    x20 = index(I, x2)\n    x21 = x9(x2)\n    O = canvas(x20, x4)\n    return O"], [1.0, "def solve_6dde8f5c(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_f1568d73(I):\n    O = move(I, ORIGIN, TWO_BY_TWO)\n    return O"], [1.0, "def solve_c1557e15(I):\n    x1 = TWO(I)\n    x2 = dmirror(x1)\n    O = papply(pair, x1, x2)\n    return O"], [1.0, "def solve_f25b3266(I):\n    x1 = rbind(ofcolor, TWO)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = lbind(colorcount, I)\n    x16 = argmax(x14, x15)\n    x17 = ofcolor(x11, x16)\n    x18 = subgrid(x17, x11)\n    x19 = mapply(vfrontier, x17)\n    x20 = mapply(hfrontier, x17)\n    x21 = size(x19)\n    x22 = size(x20)\n    x23 = greater(x21, x22)\n    x24 = branch(x23, x8, x19)\n    x25 = branch(x23, x21, x20)\n    x26 = branch(x23, x24, x25)\n    x27 = apply(x26, x24)\n    x28 = mapply(x17, x27)\n    x29 = dmirror(x28)\n    x30 = shift(x29, UNITY)\n    x31 = paint(x20, x30)\n    O = x10(x31)\n    return O"], [1.0, "def solve_4fe42391(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_79bd075b(I):\n    x1 = subgrid(x2, I)\n    x2 = trim(x1)\n    O = replace(x1, ZERO, x2)\n    return O"], [1.0, "def solve_af2bdda3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4b63cf9a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_ac8ccb35(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5c2057be(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_866194ee(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_123e600d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(chain, initset)\n    x7 = lbind(x6, last)\n    x8 = lbind(rbind, arg)\n    x9 = lbind( lbind, occurrences)\n    x10 = chain(x7, x8, x9)\n    x11 = first(x5)\n    x12 = errmost(x11)\n    x13 = subgrid(x12, I)\n    x14 = matcher(first, x3)\n    x15 = compose(flip, x14)\n    x16 = fork(combine, vfrontier, hfrontier)\n    x17 = compose(x15, x16)\n    x18 = apply(x17, x13)\n    x19 = last(x18)\n    x20 = matcher(first, x4)\n    x21 = compose(flip, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = compose(x22, last)\n    x24 = ofcolor(x13, x31)\n    x25 = initset(x24)\n    x26 = matcher(first, x3)\n    x27 = compose(flip, x26)\n    x28 = fork(both, x23, x27)\n    x29 = sfilter(x24, x28)\n    x30 = shift(x29, UNITY)\n    x31 = merge(x4)\n    x32 = cover(x13, x31)\n    x33 = mapply(x32, x30)\n    O = paint(x20, x33)\n    return O"], [1.0, "def solve_38d20a1e(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_e224493a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_55c97ba6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = mfilter(x12, x16)\n    x18 = color(x17)\n    x19 = subgrid(x17, I)\n    x20 = objects(x19, F, T, T)\n    x21 = rbind(colorcount, x10)\n    x22 = valmax(x20, x21)\n    x23 = rbind(colorcount, x10)\n    x24 = matcher(x23, x22)\n    x25 = sfilter(x12, x24)\n    x26 = mapply(dneighbors, x25)\n    x27 = mapply(ineighbors, x25)\n    x28 = toobject(x27, x19)\n    x29 = mostcolor(x28)\n    x30 = colorfilter(x25, x29)\n    x31 = objects(x30, T, T, T)\n    x32 = rbind(adjacent, x17)\n    x33 = mfilter(x31, x32)\n    x34 = replace(x19, x10, x3)\n    O = fill(x34, x39, x33)\n    return O"], [1.0, "def solve_58f94ee5(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_daf86606(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(first, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 =rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [1.0, "def solve_7c72e916(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_97d7059b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_22b5a4a9(I):\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, vline)\n    x3 = lbind(contained, TWO)\n    x4 = compose(x3, hline)\n    x5 = fork(manhattan, x2, x4)\n    x6 = compose(d07, x5)\n    x7 = fork(multiply, height, width)\n    x8 = compose(decrement, x7)\n    x9 = matcher(x8, ONE)\n    x10 = fork(both, x2, x4)\n    x11 = fork(both, x3, x5)\n    x12 = fork(both, x10, x11)\n    x13 = mfilter(x9, x12)\n    O = fill(I, TWO, x13)\n    return O"], [1.0, "def solve_a6a720ab(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = palette(I)\n    x30 = remove(x8, x29)\n    x31 = other(x30, x1)\n    x32 = ofcolor(I, x31)\n    x33 = mapply(x24, x32)\n    x34 = shift(x33, UNITY)\n    O = paint(I, x34)\n    return O"], [1.0, "def solve_d2d925f0(I):\n    x1 = objects(I, T, F, T)\n    x2 = argmax(x1, size)\n    x3 = argmin(x1, size)\n    x4 = height(x2)\n    x5 = width(x2)\n    x6 = divide(x4, x5)\n    x7 = width(x3)\n    x8 = interval(ZERO, x7, FOUR)\n    x9 = mpapply(recolor, x8, x4)\n    x10 = paint(I, x9)\n    x11 = rbind(ofcolor, x3)\n    x12 = compose(normalize, x11)\n    x13 = rbind(shift, x12)\n    x14 = height(x2)\n    x15 = divide(x14, x5)\n    x16 = increment(x15)\n    x17 = width(x2)\n    x18 = divide(x17, x5)\n    x19 = increment(x18)\n    x20 = invert(x16)\n    x21 = increment(x19)\n    x22 = canvas(ZERO, x21)\n    x23 = asindices(x22)\n    x24 = shift(x23, x20)\n    O = fill(x22, EIGHT, x24)\n    return O"], [1.0, "def solve_834078d9(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_b41b438c(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = x3(I)\n    x5 = compress(x4)\n    x6 = leastcolor(x5)\n    x7 = mostcolor(x5)\n    x8 = ofcolor(x5, x6)\n    x9 = backdrop(x8)\n    x10 = toobject(x9, I)\n    x11 = mostcolor(x10)\n    x12 = extract(x6, x11)\n    x13 = combine(x10, x12)\n    x14 = fill(x5, x6, x13)\n    x15 = ofcolor(x5, x12)\n    x16 = gravitate(x15, x4)\n    x17 = shift(x15, x16)\n    O = fill(x14, x6, x17)\n    return O"], [1.0, "def solve_1b61193a(I):\n    x1 = shape(I)\n    x2 = canvas(ZERO, x1)\n    x3 = hconcat(I, x2)\n    x4 = objects(x3, F, F, T)\n    x5 = argmin(x4, size)\n    x6 = cover(I, x5)\n    x7 = toindices(x5)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x6)\n    O = fill(x6, TWO, x9)\n    return O"], [1.0, "def solve_9e9cc779(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_30f9ca0e(I):\n    x1 = asindices(I)\n    x2 = apply(first, x1)\n    x3 = toindices(x2)\n    x4 = rbind(shoot, x3)\n    x5 = mapply(x4, x2)\n    x6 = underfill(I, EIGHT, x5)\n    x7 = cover(x6, x4)\n    O = paint(x7, x4)\n    return O"], [1.0, "def solve_ace67c88(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5adc63a2(I):\n    x1 = hvsplit(I, TWO)\n    x2 = apply(numcolors, x1)\n    x3 = equality(x2, TWO_BY_TWO)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = palette(x6)\n    x13 = other(x12, x11)\n    x14 = palette(x7)\n    x15 = other(x14, x11)\n    x16 = shape(x6)\n    x17 = canvas(x11, x16)\n    x18 = ofcolor(x6, x13)\n    x19 = ofcolor(x7, x15)\n    x20 = combine(x18, x19)\n    O = fill(x17, SIX, x20)\n    return O"], [1.0, "def solve_434bec84(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, size)\n    x4 = shape(x3)\n    x5 = canvas(x1, x4)\n    x6 = fgpartition(x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = leftmost(x7)\n    x11 = height(x10)\n    x12 = width(x10)\n    x13 = width(x8)\n    x14 = interval(x9, x13, x11)\n    x15 = lbind(astuple, x14)\n    x16 = lbind(subtract, x14)\n    x17 = rbind(subtract, x9)\n    x18 = compose(x15, x17)\n    x19 = product(x13, x10)\n    x20 = sizefilter(x19, ONE)\n    x21 = apply(x18, x20)\n    x22 = rbind(shoot, DOWN)\n    x23 = mapply(x22, x21)\n    x24 = fill(x5, x1, x23)\n    x25 = apply(x19, x101)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = fill(x24, x8, x27)\n    return O"], [1.0, "def solve_225836ea(I):\n    x1 = rbind(difference, toindices)\n    x2 = lbind(apply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(sfilter, first, x3)\n    x5 = chain(size, dedupe, x4)\n    x6 = size(x1)\n    x7 = positive(x6)\n    x8 = branch(x7, x4, x5)\n    x9 = compose(positive, size)\n    x10 = lbind( extantract, x9)\n    x11 = chain(x10, x3, x5)\n    x12 = compose(x7, x11)\n    x13 = fork(multiply, x12, x5)\n    x14 = compose(color, x12)\n    x15 = fork(recolor, x13, x14)\n    x16 = mapply(x15, x1)\n    O = paint(I, x16)\n    return O"], [1.0, "def solve_6f160633(I):\n    x1 = matcher(ZERO, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_d322c914(I):\n    x1 = argmax(x1, size)\n    x2 = remove(x1, x1)\n    x3 = merge(x2)\n    x4 = fill(I, SIX, x3)\n    x5 = merge(x2)\n    O = fill(x4, TWO, x5)\n    return O"], [1.0, "def solve_d537d7e7(I):\n    x1 = ofcolor(I, THREE)\n    x2 = ofcolor(I, TWO)\n    x3 = matcher(first, THREE)\n    x4 = matcher(first, TWO)\n    x5 = rbind(objects, T)\n    x6 = rbind(x5, T)\n    x7 = rbind(x6, F)\n    x8 = lbind(contained, THREE)\n    x9 = compose(x8, palette)\n    x10 = lbind(contained, TWO)\n    x11 = compose(x10, palette)\n    x12 = rbind(sfilter, x9)\n    x13 = compose(x12, x7)\n    x14 = rbind(sfilter, x11)\n    x15 = compose(x14, x7)\n    x16 = rbind(argmax, numcolors)\n    x17 = chain(normalize, x16, x13)\n    x18 = rbind(argmax, numcolors)\n    x19 = compose(x78, x15)\n    x20 = chain(ulcorner, x18, x19)\n    x21 = rbind(shift, NEG_UNITY)\n    x22 = compose(x21, x17)\n    x23 = compose(x21, x15)\n    x24 = fork(combine, x22, x23)\n    x25 = compose(x21, x15)\n    x26 = fork(difference, x24, x25)\n    x27 = fork(recolor, x26, x21)\n    x28 = mapply(x27, x1)\n    O = paint(I, x28)\n    return O"], [1.0, "def solve_9f009019(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_f4c1e8ce(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 =hconcat(I, x9)\n    x11 = objects(x10, F, F, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_820494c1(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_c866952b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = multiply(THREE, TEN)\n    x12 = interval(ZERO, x11, ONE)\n    x13 = rbind(multiply, x4)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = rbind(multiply, x6)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = pair(x12, x16)\n    x18 = compose(size, dedupe)\n    x19 = apply(x18, x17)\n    x20 = lbind(43, x1)\n    x21 = delta(x2)\n    x22 = apply(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = apply(size, x23)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x16, x26)\n    x28 = lbind(43, x2)\n    x29 = mapply(x28, x27)\n    x30 = mostcolor(I)\n    x31 = fill(I, x30, x29)\n    O = leastcolor(x31)\n    return O"], [1.0, "def solve_a6659948(I):\n    x1 = leastcolor(I)\n    x2 = height(I)\n    x3 = vsplit(I, x2)\n    x4 = rbind(ofcolor, x1)\n    x5 = compose(leftmost, x4)\n    x6 = width(I)\n    x7 = divide(x6, THREE)\n    x8 = multiply(x7, TWO)\n    x9 = lbind(greater, x7)\n    x10 = compose(x9, x5)\n    x11 = lbind(greater, x8)\n    x12 = compose(x11, x5)\n    x13 = compose(flip, x10)\n    x14 = fork(both, x12, x13)\n    x15 = fork(either, x10, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(multiply, TWO)\n    x18 = compose(x17, x10)\n    x19 = rbind(multiply, FOUR)\n    x20 = compose(x19, x14)\n    x21 = rbind(multiply, THREE)\n    x22 = compose(x21, x16)\n    x23 = fork(add, x18, x20)\n    x24 = fork(add, x23, x22)\n    x25 = width(I)\n    x26 = rbind(repeat, x25)\n    x27 = compose(x26, x24)\n    O = apply(x27, x3)\n    return O"], [1.0, "def solve_92035cec(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = rbind(subgrid, I)\n    x3 = chain(x2, asobject, x1)\n    x4 = x3(I)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = hfrontier(x5)\n    x8 = astuple(x6, x7)\n    x9 = fill(x4, ZERO, x8)\n    x10 = vfrontier(x6)\n    x11 = intersection(x10, x6)\n    O = fill(x9, ZERO, x11)\n    return O"], [1.0, "def solve_3f5474fd(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, branch)\n    x3 = x2(I)\n    x4 = objects(x3, T, F, T)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = color(x5)\n    x8 = color(x6)\n    x9 = subgrid(x5, x3)\n    x10 = trim(x9)\n    x11 = replace(x10, x7, x8)\n    x12 = combine(x7, x6)\n    x13 = apply(ulcorner, x12)\n    x14 = normalize(x12)\n    x15 = lbind(shift, x14)\n    x16 = mapply(x15, x13)\n    x17 = fill(x11, x9, x16)\n    O = fill(x17, UNITY, x7)\n    return O"], [1.0, "def solve_6662bf08(I):\n    x1 = ofcolor(I, TWO)\n    x2 = prapply(connect, x1, x1)\n    x3 = lbind(greater, SIX)\n    x4 = compose(x3, size)\n    x5 = fork(either, vline, hline)\n    x6 = fork(both, x4, x5)\n    x7 = matcher(numcolors, SIX)\n    x8 = sfilter(x2, x7)\n    x9 = difference(x2, x8)\n    x10 = apply(normalize, x8)\n    x11 = astuple(x10, identity)\n    x12 = CPUindices(x11)\n    x13 = lbind(matcher, x7)\n    x14 = sfilter(x12, x13)\n    x15 = difference(x12, x14)\n    x16 = lbind(recolor, SIX)\n    x17 = compose(x16, delta)\n    x18 = fork(combine, first, x17)\n    x19 = apply(x18, x15)\n    x20 = fork(paint, identity, x19)\n    x21 = apply(x20, x5)\n    x22 = pair(x19, x21)\n    x23 = mapply(dneighbors, x22)\n    x24 = difference(x23, x22)\n    x25 = mostcolor(I)\n    x26 = ofcolor(I, x25)\n    x27 = x25(x26)\n    O = fill(I, x27, x24)\n    return O"], [1.0, "def solve_6b256f21(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = delta(x4)\n    x6 = center(x5)\n    x7 = interval(ZERO, NINE, ONE)\n    x8 = lbind(multiply, x6)\n    x9 = apply(x8, x7)\n    x10 = lbind(shift, x4)\n    x11 = mapply(x10, x9)\n    x12 = fill(x1, FOUR, x5)\n    x13 = fill(x12, FOUR, x11)\n    x14 = corners(x5)\n    x15 = ofcolor(x13, ZERO)\n    x16 = rbind(toobject, x13)\n    x17 = rbind(colorcount, ZERO)\n    x18 = chain(x17, x16, dneighbors)\n    x19 = matcher(x18, TWO)\n    x20 = rbind(adjacent, x4)\n    x21 = rbind(adjacent, x6)\n    x22 = fork(both, x19, x20)\n    x23 = compose(x22, initset)\n    x24 = sfilter(x15, x19)\n    x25 = sfilter(x24, x23)\n    x26 = product(x14, x25)\n    x27 = fork(subtract, last, first)\n    x28 = fork(shoot, first, x27)\n    x29 = mapply(x28, x26)\n    O = fill(x13, FOUR, x29)\n    return O"], [1.0, "def solve_f86678ca(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(648, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [1.0, "def solve_8406e629(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_336e4052(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c28a6aaa(I):\n    O = subgrid(x1, I)\n    return O"], [1.0, "def solve_c3576c6f(I):\n    x1 = cmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_0157e93e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_4d8ba445(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x30)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [1.0, "def solve_be0967b7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_77cff79d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_44436da6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_91c9ee55(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_2e8d9543(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4e91ceba(I):\n    x1 = first(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(ONE, x3)\n    x5 = branch(x4, dmirror, identity)\n    x6 = x5(I)\n    x7 = objects(x6, T, F, F)\n    x8 = order(x7, leftmost)\n    x9 = apply(color, x8)\n    x10 = repeat(x9, ONE)\n    O = x5(x10)\n    return O"], [1.0, "def solve_0c4b7d1f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_c87a5a8f(I):\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(DOWN, x2)\n    x4 = decrement(x3)\n    x5 = mostcolor(I)\n    x6 = shape(x1)\n    x7 = add(UP, x6)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(ORIGIN, x9)\n    x11 = height(x1)\n    x12 = height(I)\n    x13 = interval(ZERO, x11, ONE)\n    x14 = width(x1)\n    x15 =Nivec(x14)\n    x16 = interval(ZERO, x15, ONE)\n    x17 = apply(tojvec, x13)\n    x18 = apply(palette, x17)\n    x19 = lbind(apply, connect)\n    x20 = compose(x19, mostcolor)\n    x21 = fork(combine, x18, x20)\n    x22 = pair(x13, x10)\n    x23 = sfilter(x22, x21)\n    x24 = apply(x27, x23)\n    x25 = mapply(x5, x24)\n    O = paint(x1, x25)\n    return O"], [1.0, "def solve_3475e8ad(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x300, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [1.0, "def solve_86e01e63(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3aa3fbbb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_259c6e8b(I):\n    x1 = astuple(rot90, rot909)\n    x2 = astuple(rot180, rotofcolor)\n    x3 = combine(x1, x2)\n    x4 = rbind(shoot, UNITY)\n    x5 = mapply(x4, x3)\n    x6 = ofcolor(I, ONE)\n    x7 = rbind(shoot, DOWN)\n    x8 = mapply(x7, x6)\n    x9 = fill(I, ZERO, x1)\n    x10 = fill(x9, NEG_ONE, x2)\n    x11 = fill(x10, ONE, x8)\n    O = extract(x1, x5)\n    return O"], [1.0, "def solve_e0d3a022(I):\n    x1 = rbind(7777,7777)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(x3)\n    x5 = papply(pair, x3, x4)\n    x6 = merge(x5)\n    O = subgrid(x6, x4)\n    return O"], [1.0, "def solve_bd77c19b(I):\n    x1 = hmirror(I)\n    x2 = vmirror(I)\n    x3 = ofcolor(I, ONE)\n    x4 = subgrid(x3, x1)\n    x5 = subgrid(x3, x2)\n    x6 = palette(x4)\n    x7 = contained(ONE, x6)\n    O = branch(x7, x5, x4)\n    return O"], [1.0, "def solve_42c2be8f(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_9a3f8be7(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_c2c50757(I):\n    O = subgrid(Feca, I)\n    return O"], [1.0, "def solve_7b4997a5(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = colorfilter(x2, x1)\n    x4 = sfilter(x3, hline)\n    x5 = size(x4)\n    x6 = positive(x5)\n    x7 = branch(x6, identity, dmirror)\n    x8 = x7(I)\n    x9 = frontiers(I)\n    x10 = merge(x9)\n    x11 = mostcolor(x10)\n    x12 = shape(x10)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x13, x8)\n    x15 = objects(x14, F, F, T)\n    x16 = argmax(x15, numcolors)\n    x17 = increment(x16)\n    x18 = interval(TWO, x17, ONE)\n    x19 = lbind(shift, x10)\n    x20 = mapply(x19, x18)\n    x21 = paint(x10, x20)\n    x22 = objects(x21, F, F, T)\n    x23 = rbind(contained, x17)\n    x24 = compose(x23, last)\n    x25 = sfilter(x22, x24)\n    x26 = compose(color, first)\n    x27 = fork(recolor, x26, identity)\n    x28 = mapply(x27, x25)\n    O = paint(x21, x28)\n    return O"], [1.0, "def solve_9aac9656(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(multiply, height, width)\n    x3 = fork(equality, size, x2)\n    x4 = sfilter(x1, x3)\n    x5 = mostcolor(I)\n    x6 = colorfilter(x4, x5)\n    x7 = argmax(x6, size)\n    x8 = outbox(x7)\n    x9 = backdrop(x8)\n    x10 = subgrid(x9, I)\n    x11 = cover(I, x9)\n    x12 = fgpartition(x11)\n    x13 = merge(x12)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x10, x15)\n    x17 = toindices(x15)\n    x18 = fgpartition(x10)\n    x19 = rbind(remove, x18)\n    x20 = lbind(lbind, manhattan)\n    x21 = compose(x20, initset)\n    x22 = lbind(fork, greater)\n    x23 = lbind(sfilter, x17)\n    x24 = rbind(compose, x21)\n    x25 = lbind(lbind, valmin)\n    x26 = chain(x24, x25, x19)\n    x27 = rbind(compose, initset)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x27, x28)\n    x30 = fork(x22, x26, x29)\n    x31 = compose(x23, x30)\n    x32 = fork(recolor, color, x31)\n    x33 = mapply(x32, x18)\n    O = paint(x16, x33)\n    return O"], [1.0, "def solve_a416a9d1(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_e6259a23(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_8ce88826(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(x4, x9)\n    x11 = paint(x10, x3)\n    x12 = objects(x11, T, F, T)\n    x13 = argmin(x12, size)\n    x14 = color(x13)\n    x15 = remove(x8, x6)\n    x16 = shoot(x15, UNITY)\n    x17 = rbind(shoot, x16)\n    x18 = mapply(x17, x12)\n    x19 = rbind(shoot, DOWN)\n    x20 = initset(x13)\n    x21 = rbind(shoot, x20)\n    x22 = mapply(x21, x12)\n    x23 = subgrid(x18, x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x22, x4)\n    x26 = difference(x24, x25)\n    x27 = lrcorner(x26)\n    x28 = invert(x27)\n    x29 = shift(x25, x28)\n    O = fill(x22, x4, x29)\n    return O"], [1.0, "def solve_01d96f58(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_8188d358(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_ea3646c0(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP8RIGHT)\n    x4 = rbind(shoot, DOWN8LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [1.0, "def solve_56006d4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_635d88b1(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_df8d8b29(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_830d8a0d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = sfilter(x4, x2)\n    x6 = compose(dmirror, x5)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = double(x8)\n    x10 = apply(x6, x9)\n    x11 = rbind(subgrid, x5)\n    x12 = apply(x11, x10)\n    x13 = cmirror(x12)\n    x14 = hmirror(x13)\n    x15 = astuple(x11, x14)\n    x16 = lbind(et32, FIVE)\n    x17 = compose(x16, x6)\n    x18 = fork(combine, x17, x15)\n    x19 = lbind(lbind, shift)\n    x20 = compose(x19, last)\n    x21 = lbind(rbind, occurrences)\n    x22 = compose(x21, last)\n    x23 = fork(compose, x20, x22)\n    x24 = lbind(lbind, mapply)\n    x25 = compose(x24, x23)\n    x26 = fork(paint, last, x25)\n    x27 = compose(first, x26)\n    x28 = fork(remove, x27, last)\n    x29 = chain(x25, x28, x27)\n    x30 = fork(vline, x29, identity)\n    x31 = chain(decrement, height, x30)\n    x32 = fork(equality, x31, x29)\n    x33 = sfilter(x12, x32)\n    x34 = fork(combine, vfrontier, hfrontier)\n    x35 = compose(x34, x30)\n    x36 = fork(paint, identity, x35)\n    x37 = x32(I)\n    x38 = crop(x37, x32,"], [1.1, "def solve_d8262804(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_3571eb13(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_e6291cad(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = ONE(I)\n    x2 = SEVEN(x1)\n    x3 = apply(normalize, x2)\n    x4 = astuple(TWO, ONE)\n    x5 = repeat(x4, x3)\n    x6 = combine(x5, x7)\n    x7 = rbind(multiply, THREE)\n    x8 = apply(x7, x6)\n    x9 = I(x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = subtract(x11, ONE)\n    x13 = astuple(THREE, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = hconcat(x14, x14)\n    x16 = hsplit(x15, TWO)\n    x17 = branch(x16, x77, x25ff)\n    x18 = x17(x16)\n    x19 = crop(x18, ORIGIN, x1)\n    x20 = asobject(x19)\n    x21 = x20(x8)\n    x22 = vmirror(x21)\n    x23 = mostcolor(I)\n    x24 = objects(x18, T, F, F)\n    x25 = sizefilter(x24, ONE)\n    x26 = difference(x24, x25)\n    x27 =rollc(x26)\n    x28 = paint(x15, x27)\n    x29 =772indices(x28)\n    x30 = fgpartition(x18)\n    x31 = sizefilter(x30, ONE)\n    x32 = lbind(intersection, x39)\n    x33 = chain(positive, size, x32)\n    x34 = lbind(shift, x29)\n    x35 = rbind(multiply, UNITY)\n    x36 = chain(x35, x34, x31)\n    x37 = lbind(shift, x29)\n    x38 = rbind(multiply, NEG_UNITY)\n    x39 = chain(x37, x38, x31)"], [1.1, "def solve_7bfcf3c9(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(I)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval("], [1.1, "def solve_2c8b58e6(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, ONE)\n    x3 = branch(x2, frontiers, T)\n    x4 = canvas(ZERO, THREE_BY_THREE)\n    x5 = color(x4)\n    x6 = toivec(x1)\n    x7 = divide(x6, x2)\n    x8 = tojvec(x7)\n    x9 = width(I)\n    x10 = lefthalf(I)\n    x11 = righthalf(I)\n    x12 = equality(x10, x11)\n    x13 = hsplit(x8, x12)\n    x14 = righthalf(I)\n    x15 = palette(x14)\n    x16 = other(x15, x5)\n    x17 = palette(x13)\n    x18 = other(x17, x5)\n    x19 =168\n    x20 =949ighthalf(x13)\n    x21 = righthalf(x13)\n    x22 = vmirror(x21)\n    x23 = solve(x19, x22)\n    x24 = ofcolor(x14, x16)\n    x25 = ofcolor(x13, x18)\n    x26 = insert(x24, x25)\n    x27 = argmin(x26, last)\n    x28 = remove(x27, x26)\n    x29 = remove(x28, x26)\n    x30 = contained(x27, x29)\n    x31 = branch(x30, x22, x25)\n    x32 = 205(x31)\n    x33 = ofcolor(x14, x16)\n    x34 = normalize(x33)\n    x35 = shift(x34, UNITY)\n    x36 = ofcolor(x35, x16)\n    x37 = asindices(x35)\n    x38 = outbox(x37)\n    x39 = backdrop(x38)\n    x40 = branch(x33, x37, x39)\n    x41 = rbind(contained, x37)\n    x42 = compose(x41,"], [1.1, "def solve_2cab3677(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = rbind( sfilter, x6)\n    x8 = rbind(sizefilter, ONE)\n    x9 = rbind(objects, F)\n    x10 = rbind(x9, F)\n    x11 = rbind(x10, T)\n    x12 = rbind(argmin, x11)\n    x13 = compose(x12, toindices)\n    x14 = fork(upscale, identity, x13)\n    x15 = compose(x14, rot90)\n    x16 = power(x15, TWO)\n    x17 = x16(I)\n    x18 = rot90(x17)\n    x19 = shape(x18)\n    x20 = canvas(x4, x19)\n    x21 = hconcat(x17, x20)\n    x22 = objects(x21, T, F, T)\n    x23 = rbind(toobject, x21)\n    x24 = compose(x23, trim)\n    x25 = apply(x24, x22)\n    x26 = rbind(colorcount, x4)\n    x27 = valmax(x25, x26)\n    x28 = rbind(colorcount, x4)\n    x29 = matcher(x28, x27)\n    x30 = sfilter(x28, x29)\n    x31 = chain(normalize, toindices, x11)\n    x32 = lbind(mapply, x31)\n    x33 = lbind(ofcolor, x81)\n    x34 = compose(x33, x11)\n    x35 = ofcolor(x18, x4)\n    x36 = difference(x35, x34)\n    x37 =0a15(x36)\n    x38 =446(499883, x37)\n    x39 = rbind(90, x38)"], [1.1, "def solve_bd805858(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = shape(I)\n    x13 = decrement(x12)\n    x14 = connect(x11, x13)\n    x15 = height(I)\n    x16 = decrement(x15)\n    x17 = toivec(x16)\n    x18 = shape(I)\n    x19 = decrement(x18)\n    x20 = connect(x17, x19)\n    x21 = asindices(I)\n    x22 = box(x21)\n    x23 = toobject(x22, I)\n    x24 = mostcolor(x23)\n    x25 = matcher(color, x24)\n    x26 = compose(flip, x25)\n    x27 = rbind(sfilter, x26)\n    x28 = rbind(sizefilter, ONE)\n    x29 = rbind(objects, F)\n    x30 = rbind(x29, F)\n    x31 = rbind(x30, T)\n    x32 = rbind(subgrid, I)\n    x33 = chain(x27, x31, x32)\n    x34 = chain(size, x28, x33)\n    x35 = astuple(x4, x8)\n    x36 = astuple(x14, x20)\n    x37 = combine(x35, x36)\n    x38 = argmax(x37, x34)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, initset)\n    x41 = ofcolor(I, x24)\n    x42 = difference(x38, x41)\n"], [1.1, "def solve_540ce26e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = toindices(x5)\n    x7 = compose(flip, x6)\n    x8 = extract(x2, x7)\n    x9 = lbind(recolor, x1)\n    x10 = rbind(shoot, x8)\n    x11 = chain(x9, x10, initset)\n    x12 = lbind(remove, x8)\n    x13 = chain(x12, palette, x11)\n    x14 = compose(x13, first)\n    x15 = power(last, TWO)\n    x16 = fork(combine, x14, x15)\n    x17 =92max(x6, x16)\n    x18 = astuple(TEN, TEN)\n    x19 = rbind(contained, x18)\n    x20 = chain(flip, x19, ulcorner)\n    x21 = fork(add, x20, x14)\n    x22 = multiply(EIGHT, UNITY)\n    x23 = add(x22, NEG_UNITY)\n    x24 = multiply(x23, UNITY)\n    x25 = neighbors(ORIGIN)\n    x26 = insert(ORIGIN, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = astuple(x28, x26)\n    x30 = repeat(x29, ONE)\n    x31 = combine(x30, x25)\n    x32 = combine(x28, x30)\n    x33 =51925862893(x32, x24)\n    x34 =556(shoot, x3333)\n    x35 = combine(x33, x34)\n    x36 = astuple(x26, xincrement)\n    x37 =226(shoot, x36)\n    x38 = combine(x35, x37)\n    x39 = combine(x31,"], [1.1, "def solve_e02ef634(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = rightmost(x26)\n    x28 = astuple(x25, x27)\n    x29 = ofcolor(x13, x22)\n    x30 = leftmost(x29)\n    x31 = invert(x30)\n    x32 = apply(uppermost, x31)\n    x33 = order(x32, identity)\n    x34 = astuple(x10, x11)\n    x35 = lbind(add, x34)\n    x36 =100(x17)\n    x37 = rbind(add, x36)\n    x38 = chain(x37, x35, x36)\n    x39 = lbind(apply, last)\n    x40 = rbind(sfilter, x38)\n    x41 = chain(x39, x40, x33)\n    x42 = lbind(lbind, shift)\n    "], [1.1, "def solve_c87c69c3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_1b4bb068(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = difference(x1, x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorcount(I, x5)\n    x7 = backdrop(x2)\n    x8 = insert(x7, x4)\n    x9 = insert(x6, x8)\n    x10 = branch(x6, x8, x9)\n    x11 =1222(x10)\n    x12 = initset(x11)\n    x13 = complexity(x12, x6)\n    x14 = backdrop(x13)\n    x15 = subgrid(x14, I)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, x5)\n    x18 = backdrop(x17)\n    x19 = subgrid(x18, x15)\n    x20 = height(x19)\n    x21 = subtract(x20, TWO)\n    x22 = astuple(ONE, x21)\n    x23 = colorfilter(x17, x5)\n    x24 = crop(x19, ORIGIN, x22)\n    x25 = hmirror(x24)\n    x26 = replace(x25, x4, x5)\n    x27 = replace(x26, x7, x6)\n    x28 =07(x4)\n    x29 = leftmost(x28)\n    x30 = lbind(contained, x29)\n    x31 = compose(flip, x30)\n    x32 =733(x29, x23)\n    x33 = rbind(contained, x32)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x19, x34)\n    x36 = merge(x35)\n    x37 = palette(x36)\n    x38 = lbind(colorcount, x36)\n    x39 = compose(x38, first)\n    x40 = colorfilter(x1, x5)\n    x41 ="], [1.1, "def solve_522c24b5(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = rbind(argmin, DOWN)\n    x2 = compose(first, x1)\n    x3 = fork(subtract, last, x2)\n    x4 = x3(I)\n    x5 = double(x4)\n    x6 = interval(ZERO, x5, TWO)\n    x7 = apply(tojvec, x6)\n    x8 = astuple(ccement, NEG_TWO)\n    x9 = lbind(shift, x8)\n    x10 = rbind(multiply, x5)\n    x11 = compose(x10, x9)\n    x12 = lbind(shift, x13)\n    x13 = rbind(multiply, x4)\n    x14 = compose(x12, x13)\n    x15 = fork(astuple, x11, x14)\n    x16 = lbind(apply, uppermost)\n    x17 = chain(maximum, x16, x15)\n    x18 = lbind(colorfilter, x7)\n    x19 = chain(x18, color, x7)\n    x20 = fork(sfilter, x17, x19)\n    x21 = lbind(mapply, x20)\n    x22 = rbind(occurrences, x4)\n    x23 = compose(x21, x22)\n    x24 = fork(paint, identity, x23)\n    x25 = chain(x20, x21, x24)\n    x26 = lbind(mapply, vfrontier)\n    x27 = chain(x26, x25, x27)\n    x28 = lbind(paint, x2)\n    x29 = chain(x27, x28, x27)\n    x30 = compose(x24, x27)\n    x31 = fork(mapply, x30, x29)\n    x32 = fork(paint, identity, x31)\n    x33 = rbind(apply, x32149)\n    x34 = chain(lowermost, x33, x27)\n    x35 = fork(recolor, x24, x34)\n    x36 = astuple(ONE, THREE"], [1.1, "def solve_3fc9866c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = matcher( identity, ZERO)\n    x2 = toindices(x1)\n    x3 = rbind(20000, x2)\n    x4 = toindices(x1)\n    x5 = rbind(contained, x4)\n    x6 = lbind(extract, x5)\n    x7 = compose(x6, initset)\n    x8 = rbind(sfilter, x7)\n    x9 = chain(positive, size, x8)\n    x10 = size(x2)\n    x11 = power(x9, x10)\n    x12 = chain(size, x5, x11)\n    x13 = palette(I)\n    x14 = lbind(sfilter, x13)\n    x15 = lbind(matcher, x7)\n    x16 = compose(x14, x15)\n    x17 = chain(x39, x14, x16)\n    x18 = fork(difference, identity, x17)\n    x19 = lbind(recolor, EIGHT)\n    x20 = compose(x19, x18)\n    x21 = fork(paint, identity, x20)\n    x22 = compose(center, first)\n    x23 = fork(add, x22, x202)\n    x24 = chain(toobject, x21, x23)\n    x25 = colorfilter(x7, ZERO)\n    x26 = chain(first, x24, x25)\n    x27 = fork( UnknownITY, x26, x24)\n    x28 = fork(insert, x27, x19)\n    x29 = fork(insert, x28, x79)\n    x30 = fork(insert, x29, x21)\n    x31 = fork(remove, x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = fork(add, x22, x12)\n    x34 = fork(add, x33, x32)\n    x35 = fork(add, x34, x29)\n    x36 = fork(connect, x22, x25)\n    x37 = fork(connect, x26,"], [1.1, "def solve_f96b4cba(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_35392ba3(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_7c66d00b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = normalize(x11)\n    x13 = leftmost(x12)\n    x14 = mostcolor(I)\n    x15 = uppermost(x12)\n    x16 = leftmost(x11)\n    x17 = astuple(x13, x14)\n    x18 = ulcorner(x12)\n    x19 = increment(x18)\n    x20 = lbind(subtract, x19)\n    x21 = rbind(toobject, I)\n    x22 = compose(x20, x21)\n    x23 = lbind(shift, x8)\n    x24 = rbind(multiply, x19)\n    x25 = chain(x23, x24, x22)\n    x26 = lbind(shift, x8)\n    x27 = rbind(multiply, x16)\n    x28 = chain(x26, x27, x22)\n    x29 = rbind(multiply, x15)\n    x30 = compose(x28, x29)\n    x31 = fork(add, x25, x30)\n    x32 = compose(x31, x21)\n    x33 = fork(combine, x28, x32)\n    x34 = fork(mapply, x33, x29)\n    x35 = fork(paint, identity, x34)\n    x36 = fork(equality, identity, dmirror)\n    x37 =495(x36)\n    x38 = mfilter(x37, vline)\n    x39 = paint(x35, x38)\n    x40 = branch"], [1.1, "def solve_ce544482(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_538f0956(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(color, FIVE)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, FIVE)\n    x10 = rbind(adjacent, x4)\n    x11 = sfilter(x9, x10)\n    x12 = difference(x9, x11)\n    x13 = merge(x12)\n    x14 = cover(x7, x13)\n    x15 = shoot(ORIGIN, UNITY)\n    x16 = shoot(x15, RIGHT)\n    x17 = shoot(x16, LEFT)\n    x18 = shoot(x17, UP_RIGHT)\n    x19 = shoot(x18, LEFT)\n    x20 = combine(x15, x19)\n    x21 = rbind(subgrid, x20)\n    x22 = chain(palette, x21, rot90)\n    x23 = rbind(subgrid, x20)\n    x24 = compose(I, x23)\n    x25 = chain(palette, x21, x24)\n    x26 = rbind(ofcolor, FIVE)\n    x27 = compose(x26, x25)\n    x28 = chain(x17, x24, x27)\n    x29 = rbind(colorcount, TWO)\n    x30 = multiply(x29, x9)\n    x31 = power(x28, x30)\n    x32 = x31(x16)\n    x33 = first(x32)\n    x34 = last(x32)\n    x35 = palette(x33)\n    x36 = other(x35, FOUR)\n    x37 = ofcolor(x33, x106)\n    x38 = ofcolor(x33, xr)\n    x39 = intersection(x37, x38)\n    x"], [1.1, "def solve_9356794d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_f3214fc2(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_23e42021(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = rbind(multiply, x4)\n    x6 = chain(toindices, x5, x6)\n    x7 = matcher(x6, ZERO)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    x12 = fill(I, x1, x11)\n    x13 = argmax(x9, width)\n    x14 = rbind(multiply, x4)\n    x15 = compose(x14, width)\n    x16 = argmax(x13, x15)\n    x17 = center(x16)\n    x18 = initset(x17)\n    x19 = cover(I, x18)\n    x20 = toindices(x16)\n    x21 = inbox(x16)\n    x22 = center(x21)\n    x23 = initset(x22)\n    x24 = fill(x19, x1, x23)\n    x25 = toobject(x24, x25)\n    x26 = objects(x28, T, F, T)\n    x27 = colorfilter(x26, x1)\n    x28 = rbind(toobject, x25)\n    x29 = chain(x28, x27, neighbors)\n    x30 = mapply(x29, x27)\n    x31 = astuple(x15, x14)\n    x32 = shift(x30, x31)\n    x33 = paint(x12, x32)\n    x34 = toindices(x16)\n    x35 = fork(insert, ulcorner, lrcorner)\n    x36 = fork(shift, identity, x35)\n    x37 = apply(x36, x34)\n    x38 = rbind(contained, x37)\n    x39 = rbind(sfilter,"], [1.1, "def solve_43606b81(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot180(I)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(positive, size)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(x2, x4, frontiers)\n    x6 = chain(size, dedupe, first)\n    x7 = chain(size, dedupe, last)\n    x8 = fork(greater, x6, x7)\n    x9 = fork(both, x5, x8)\n    x10 = lefthalf(x1)\n    x11 = righthalf(x1)\n    x12 = rbind(sfilter, x11)\n    x13 = compose(x12, x9)\n    x14 = power(x13, TWO)\n    x15 = branch(x10, x14, x4)\n    x16 = x15(x1)\n    x17 = x15(x2)\n    x18 = toindices(x16)\n    x19 = toindices(x17)\n    x20 = hfrontier(x18)\n    x21 = fill(x16, ZERO, x20)\n    x22 = fill(x21, x19, x20)\n    x23 = dedicated01945(x17)\n    x24 = positive(x23)\n    x25 = branch(x24, x22, x25)\n    x26 = x25(x17)\n    x27 = palette(x26)\n    x28 = remove(ZERO, x27)\n    x29 = lbind(colorcount, x16)\n    x30 = argmax(x28, x29)\n    x31 = rbind(contained, x30)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(size, x33, first)\n    x35 = matcher(x34, ONE)\n    x36 = compose(size, last)\n    x37 = matcher(x36, ONE)\n    x38 = fork(either, x35, x37)\n    x39 = sfilter(x1, x38)\n"], [1.1, "def solve_9b6747d7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_aaf28fbe(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = upscale(x4, x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    x6 = toindices(x5)\n    x7 =lrcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(I, ZERO, x8)\n    x10 = asindices(x9)\n    x11 = to corners(x10)\n    x12 = toobject(x11, I)\n    x13 = asindices(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(x15, x5)\n    x17 = fill(x9, x13, x16)\n    x18 =1988indices(x16)\n    x19 = lbind(adjacent, x18)\n    x20 = rbind(toobject, x15)\n    x21 = chain(x19, backdrop, x20)\n    x22 = compose(x5, x21)\n    x23 = fork(both, x21, x22)\n    x24 = rbind(numcolors, ONE)\n    x25 = compose(x24, decrement)\n    x26 = matcher(x25, ONE)\n    x27 = fork(both, x26, x23)\n    x28 = rbind(multiply, x22)\n    x29 = compose(x28, asindices)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x16, x30)\n    x32 = rbind(multiply, THREE)\n    x33 = compose(x32, x31)\n    x34 = fork(equality, identity, x33)\n    x35 = sfilter(x31, x34)\n    x36 =1999(x35)\n    x37 =0900(x16, x36)\n    x38 = paint(x37, x37)\n    x39 = fill(x38, x15"], [1.1, "def solve_f9f7d176(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_e3f7bbb4(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_c8b25e25(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_832d2894(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(normalize, x5)\n    x7 = chain(x4, x6, dmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(invert, x8)\n    x10 = power(x9, FOUR)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(initset, x11)\n    x13 = chain( begins, x11, x12)\n    x14 = rbind(branch, identity)\n    x15 = rbind(x14, x13)\n    x16 = chain(size, x15, x13)\n    x17 = partition(I)\n    x18 = fork(equality, x16, x17)\n    x19 = fork(both, x18, ONE)\n    x20 = extract(x19, x19)\n    x21 = x20(x20)\n    x22 = first(x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x17, x23)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(x22)\n    x28 = width(x27)\n    x29 = lbind(repeat, x28)\n    x30 = chain(dmirror, merge, x29)\n    x31 = x30(x22)\n    x32 = frontiers(x31)\n    x33 = merge(x32)\n    x34 = palette(x33)\n    x35 = first(x34)\n    x36 = last(x34)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x37)\n    x39 = add(x38, x33)\n    x40 = shift(x23, x39"], [1.1, "def solve_fbfa9d9a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_03e5a5bd(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4f08e9de(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 =77fd(x1, toindices)\n    x3 = equality(x2, ZERO)\n    x4 = branch(x3, identity,gde280)\n    x5 = x4(I)\n    x6 = objects(x5, T, F, T)\n    x7 = order(x6, uppermost)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 = compose(first, toindices)\n    x13 = x12(x8)\n    x14 = x12(x9)\n    x15 = connect(x13, x14)\n    x16 = centerofmass(x15)\n    x17 = connect(x13, x16)\n    x18 = fill(x5, x11, x15)\n    x19 = fill(x18, x10, x17)\n    x20 = add(x16, DOWN)\n    x21 = initset(x16)\n    x22 = rbind(manhattan, x21)\n    x23 = compose(x22, initset)\n    x24 = argmin(x15, x23)\n    x25 = connect(x24, x16)\n    x26 = width(x19)\n    x27 = insert(x26, x15)\n    x28 = DOWN)\n    x29 = insert(x28, x15)\n    x30 = organizedmirror(x29)\n    x31 = width(x19)\n    x32 = interval(ZERO, x31, ONE)\n    x33 = matcher(first, x10)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, toindices)\n    x36 = lbind(shift, x27)\n    x37 = rbind(multiply, x30)\n    x38 = chain(x35, x36, x37)\n    x39 = lbind(shift, x27)\n    x40 = rbind(multiply, x30)\n    x41"], [1.1, "def solve_a43be955(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = valmax(x5, width)\n    x7 = halve(x6)\n    x8 = objects(I, T, F, T)\n    x9 = lbind(colorfilter, x8)\n    x10 = rbind(argmax, x7)\n    x11 = lbind(toobject, x10)\n    x12 = compose(x11, x9)\n    x13 =55412(x2)\n    x14 = rbind(colorcount, x3)\n    x15 = lbind(toobject, x9)\n    x16 = compose(x14, x15)\n    x17 = x16(x2)\n    x18 = sfilter(x9, x17)\n    x19 =252indices(x18)\n    x20 = rbind(contained, x19)\n    x21 = compose(x20, last)\n    x22 = sfilter(x13, x21)\n    x23 = rbind(colorcount, x3)\n    x24 = valmax(x22, x23)\n    x25 = matcher(x21, x24)\n    x26 = sfilter(x18, x25)\n    x27 =27(x26)\n    x28 =88bind(colorcount, x3)\n    x29 = valmax(x28, x28)\n    x30 = matcher(x21, x29)\n    x31 = sfilter(x27, x30)\n    x32 =27(x31)\n    x33 = first(x32)\n    x34 = sfilter(x31, x33)\n    x35 = rbind(contained, x41)\n    x36 = compose(x34, last)\n    x37 = sfilter(x33, x36)\n    x38 =27(x37)\n    x39 = ofcolor(I, x3)\n    x40 = branch(x39, x38, x37)\n    O ="], [1.1, "def solve_085159d3(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_91d37929(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ONE)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41"], [1.1, "def solve_2711256d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(equality, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(x1, x2)\n    x4 = fork(pair, frontiers, merge)\n    x5 = mfilter(x3, x4)\n    x6 = sfilter(x1, x5)\n    x7 = fork(multiply, height, width)\n    x8 = size(x6)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x5, x9)\n    x11 = sfilter(x10, x8)\n    x12 = lbind(apply, first)\n    x13 = lbind(ofcolor, x1)\n    x14 = chain(x12, x13, x11)\n    x15 = rbind(contained, x15)\n    x16 = compose(x15, last)\n    x17 = sfilter(x11, x16)\n    x18 = lbind(colorfilter, x5)\n    x19 = compose(x18, first)\n    x20 = chain(inline, x17, x19)\n    x21 = fork(both, x16, x20)\n    x22 = fork(either, x21, first)\n    x23 = toindices(x5)\n    x24 = rbind(sfilter, x22)\n    x25 = compose(x24, x20)\n    x26 = lbind(recolor, FIVE)\n    x27 = compose(x26, x22)\n    x28 = chain(xto, x27, x29)\n    x29 = fork(combine, x25, x28)\n    x30 = fork(paint, identity, x29)\n    x31 = apply(x30, x11)\n    x32 = ofcolor(x31, FIVE)\n    x33 = compose(x32, x20)\n    x34 = argmax(x34, x33)\n    x35 = remove(x34, x34)\n    x36 = apply(center, x35)\n    x37 = normalize(x34)\n    x38 = shift(x37, x34"], [1.1, "def solve_87f86e83(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1edfb5b0(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = initset(I)\n    x5 = chain(toindices, lefthalf, tophalf)\n    x6 = insert(x1, x4)\n    x7 = insert(x2, x6)\n    x8 = insert(x3, x7)\n    x9 = argmax(x8, x5)\n    x10 = vmirror(x9)\n    x11 = papply(pair, x9, x10)\n    x12 = lbind(apply, maximum)\n    x13 = apply(x12, x11)\n    x14 = partition(x13)\n    x15 = sizafilter(x14, FOUR)\n    x16 = apply(llcorner, x15)\n    x17 = apply(lrcorner, x15)\n    x18 = combine(x16, x17)\n    x19 = cover(x13, x18)\n    x20 = tojvec(NEG_TWO)\n    x21 = prapply(shift, x20, x2)\n    x22 = mapply(x21, x21)\n    x23 = combine(x21, x22)\n    x24 = fill(x19, THREE, x23)\n    x25 = palette(x24)\n    x26 =77fd23(x25)\n    x27 = asindices(x24)\n    x28 = ofcolor(x24, x27)\n    x29 = shift(x24, x28)\n    x30 = ofcolor(x24, x6)\n    x31 = intersection(x29, x30)\n    x32 = fill(x24, THREE, x31)\n    x33 = rot90(x32)\n    x34 = ofcolor(x33, x6)\n    x35 = shift(x34, x28)\n    x36 = ofcolor(x33, x6)\n    x37 = intersection(x39, x36)\n    x38 = fill(x33, THREE, x37)\n    x39 = fill(x"], [1.1, "def solve_956ab80d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(51,2)\n    x3 = lbind(9565, ZERO)\n    x4 = compose(x2, x3)\n    x5 = fork(add, height, x4)\n    x6 = compose(x1, width)\n    x7 = fork(equality, size, x5)\n    x8 = fork( both, x7, x6)\n    x9 = extract(x1, x8)\n    x10 = last(x9)\n    x11 = palette(I)\n    x12 = remove(x10, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = size(x15)\n    x17 = increment(x16)\n    x18 = outbox(x15)\n    x19 = rbind(toobject, I)\n    x20 = totuple(x18)\n    x21 = apply(x19, x20)\n    x22 = ofcolor(I, x14)\n    x23 = colorcount(I, x14)\n    x24 = increment(x23)\n    x25 = frontiers(I)\n    x26 = colorfilter(x25, x14)\n    x27 = difference(x25, x26)\n    x28 = size(x27)\n    x29 = increment(x28)\n    x30 = rbind(multiply, x29)\n    x31 = apply(x30, x27)\n    x32 = asindices(I)\n    x33 = of corners(x32)\n    x34 = toobject(x33, I)\n    x35 = mostcolor(x34)\n    x36 = ofcolor(I, x15)\n    x37 = lbind(shift, x36)\n    x38 = mapply(x37, x31)\n    x39 = rbind(990, x38)\n    x40 = apply(x39, x33)\n    x41 = ofcolor(I, x18)\n    x42 = rbind(inter"], [1.1, "def solve_601cf0b0(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = shape(I)\n    x7 = canvas(x5, x6)\n    x8 = hconcat(I, x7)\n    x9 = objects(x8, F, T, T)\n    x10 = argmin(x9, numcolors)\n    x11 = normalize(x10)\n    x12 = toindices(x11)\n    x13 = increment(x12)\n    x14 = increment(x13)\n    x15 = toindices(x4)\n    x16 = increment(x15)\n    x17 = increment(x16)\n    x18 = astuple(x12, x17)\n    x19 = rbind(multiply, x18)\n    x20 = toindices(x11)\n    x21 = increment(x20)\n    x22 = increment(x21)\n    x23 = fork(multiply, x18, x22)\n    x24 = x23(x11)\n    x25 = palette(I)\n    x26 = other(x25, x10)\n    x27 = palette(I)\n    x28 = remove(x13, x27)\n    x29 = rbind(positive, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = fgpartition(x18)\n    x32 = merge(x31)\n    x33 = apply(x32, x32)\n    x34 = product(x30, x33)\n    x35 = fork(connect, first, last)\n    x36 = apply(x35, x34)\n    x37 = fork(subtract, first, last)\n    x38 =94872232\n    x39 = fork(subtract, x37, x38)\n    x40 = fork(equality, x36, x39)\n    x41 = mfilter(x34, x40)\n    x42 = size(x41)\n    x43 ="], [1.1, "def solve_e7775ead(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = branch(x1, trim, tophalf)\n    x2 = lefthalf(x1)\n    x3 = tophalf(x2)\n    x4 = vmirror(x3)\n    x5 = objects(x4, T, F, F)\n    x6 = order(x5, uppermost)\n    x7 = compose(color, x6)\n    x8 = apply(x7, x5)\n    x9 = merge(x8)\n    x10 = size(x1)\n    x11 = decrement(x10)\n    x12 = height(x2)\n    x13 = astuple(x12, x11)\n    x14 = crop(x2, ORIGIN, x13)\n    x15 = leastcolor(x14)\n    x16 = canvas(x15, x14)\n    x17 = hconcat(x16, x16)\n    x18 = compose(first, last)\n    x19 = compose(x18, first)\n    x20 = fork(subtract, x19, first)\n    x21 = compose(first, last)\n    x22 = compose(x21, first)\n    x23 = fork(subtract, x22, last)\n    x24 = fork(astuple, x23, x20)\n    x25 = compose(decrement, x24)\n    x26 = normalize(x2)\n    x27 = fork(add, first, x25)\n    x28 = toindices(x26)\n    x29 = compose(x27, x28)\n    x30 = fork(connect, x29, x21)\n    x31 = apply(x30, x8)\n    x32 = lbind(greater, x13)\n    x33 = compose(x32, first)\n    x34 = sfilter(x31, x33)\n    x35 = difference(x19, x34)\n    x36 = lbind(compose, center)\n    x37 = lbind(x36, positive)\n    x38 = chain(x39, x37, x29)\n    x39 =sfilter(x35, x38)\n    "], [1.1, "def solve_7965aa7b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = canvas(ZERO, x27)\n    x29 = astuple(x24, x18)\n    x30 = initset(x29)\n    x31 = insert(UNITY, x30)\n    x32 = insert(x28, x31)\n    x33 = width(I)\n    x34 = decrement(x33)\n    x35 = tojvec(x34)\n    x36 = height(I)\n    x37 = decrement(x36)\n    x38 = toivec(x37)\n    x39 = initset(x38)\n    x40 = insert(x35, x39)\n    x41 = insert(x36, x40)\n    x42 = width(I)\n    x43 = decrement(x42)\n    x44 = tojvec(x43)\n    "], [1.1, "def solve_df57a124(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = matcher(color, x3)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x9, x11)\n    x13 = merge(x12)\n    x14 = palette(x13)\n    x15 = matcher(identity, x3)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x14, x17)\n    x19 = merge(x18)\n    x20 = palette(x19)\n    x21 = totuple(x20)\n    x22 = apply(color, x21)\n    x23 = lbind(sfilter, x12)\n    x24 = lbind(matcher, identity)\n    x25 = chain(size, x23, x24)\n    x26 = compose(x25, vline)\n    x27 = chain(sfilter, x16, x26)\n    x28 = lbind(colorcount, x13)\n    x29 = fork(upscale, x28, x27)\n    x30 = decrement(x4)\n    x31 =1999(x30)\n    x32 = rbind(subtract, x31)\n    x33 = chain(x32, x29, first)\n    x34 = fork(apply, x33, x33)\n    x35 =88(x22)\n    x36 = x34(x35)\n    x37 = ofcolor(x36, x3)\n    x38 = rbind(adjacent, x37)\n    x39 = compose(x38, last)\n    x40 = extract(x41, x39)\n    x41 = initset("], [1.1, "def solve_8a907dfc(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_c6ba9eff(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(size, dedupe, first)\n    x5 = matcher(x4, ONE)\n    x6 = compose(first, cmirror)\n    x7 = chain(size, dedupe, x6)\n    x8 = matcher(x7, ONE)\n    x9 = fork(both, x5, x8)\n    x10 = rbind(rapply, I)\n    x11 = compose(initset, first)\n    x12 = chain(first, x10, x11)\n    x13 = compose(x12, x5)\n    x14 = extract(x3, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = trim(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = asobject(x20)\n    x22 = mostcolor(I)\n    x23 = matcher(first, x22)\n    x24 = compose(flip, x23)\n    x25 = sfilter(x21, x24)\n    x26 = partition(x25)\n    x27 = fork(multiply, height, width)\n    x28 = fork(equality, size, x27)\n    x29 = sfilter(x26, x28)\n    x30 = argmax(x29, x27)\n    x31 = difference(x22, x30)\n    x32 = asobject(x31)\n    x33 = matcher(first, x22)\n    x34 = compose(flip, x33)\n    x35 = sfilter(x32, x34)\n    x36 = sizefilter(x31, ONE)\n    x37 = argmax(x36, size)\n    x38 = remove(x37, x36)\n    x39 = merge(x38)\n    x40 = palette"], [1.1, "def solve_fa02ba69(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_afcf20be(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rbind(ofcolor, ONE)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = extract(x6, x9)\n    x11 = x10(I)\n    x12 = mostcolor(I)\n    x13 = palette(I)\n    x14 = remove(x12, x13)\n    x15 = other(x14, TWO)\n    x16 = ofcolor(x11, x15)\n    x17 = rightmost(x16)\n    x18 = equality(x17, ZERO)\n    x19 = branch(x18, identity, vmirror)\n    x20 = x19(x11)\n    x21 = ofcolor(x20, x15)\n    x22 = ofcolor(x20, TWO)\n    x23 = apply(last, x22)\n    x24 = insert(ZERO, x23)\n    x25 = width(x20)\n    x26 = insert(x25, x24)\n    x27 = order(x26, identity)\n    x28 = last(x27)\n    x29 = remove(x28, x27)\n    x30 = first(x27)\n    x31 = remove(x30, x27)\n    x32 = pair(x29, x31)\n    x33 = size(x29)\n    x34 = interval(ZERO, x33, ONE)\n    x35 = pair(x34, x32)\n    x36 = lbind(fork, connect)\n    x37 = compose(first, last)\n    x38 = chain(decrement, last, last)\n    x39 = lbind(lbind, add)\n    x40 = compose(x39, first)\n    x41 = lbind("], [1.1, "def solve_1a6acc1c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = height(I)\n    x7 = width(I)\n    x8 = add(x6, x7)\n    x9 = add(x5, x8)\n    x10 = I(I, x4)\n    x11 = I(I, x7)\n    x12 = width(I)\n    x13 = increment(x12)\n    x14 = divide(x13, x11)\n    x15 = height(I)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = divide(x17, x11)\n    x19 = width(I)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(multiply, x14)\n    x23 = apply(x22, x21)\n    x24 = lbind(shift, x22)\n    x25 = mapply(x24, x23)\n    x26 = fill(I, FOUR, x25)\n    x27 = canvas(ZERO, x8)\n    x28 = asindices(x27)\n    x29 = box(x28)\n    x30 = toobject(x29, I)\n    x31 = mostcolor(x30)\n    x32 = occurrences(x26, x31)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, identity, dmirror)\n    x36 = x35(x16)\n    x37 = equality(x36, ONE)\n    x38 = branch(x37, identity, vmirror)\n    x39 = x38(x51)\n    x40 = downscale(x39, x3)\n    x41 = ofcolor(x40, x31)\n    x42 =91000(x41, asobject)\n    x43 = ofcolor(x"], [1.1, "def solve_d597c11f(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_f1a0a95b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_3b3e2d03(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, hmirror)\n    x3 = combine(x1, x2)\n    x4 = chain(uppermost, merge, fgpartition)\n    x5 = rbind(rapply, I)\n    x6 = chain(first, x5, initset)\n    x7 = compose(x4, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x3, x8)\n    x10 = x9(I)\n    x11 = fgpartition(x10)\n    x12 = merge(x11)\n    x13 = width(x12)\n    x14 = astuple(NEG_ONE, x13)\n    x15 = invert(x13)\n    x16 = astuple(NEG_ONE, x15)\n    x17 = double(x13)\n    x18 = astuple(NEG_TWO, x17)\n    x19 = double(x13)\n    x20 = invert(x19)\n    x21 = astuple(NEG_TWO, x20)\n    x22 = multiply(THREE, TEN)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = lbind(multiply, x14)\n    x25 = apply(x24, x23)\n    x26 = lbind(multiply, x16)\n    x27 = apply(x26, x23)\n    x28 = lbind(multiply, x18)\n    x29 = apply(x28, x23)\n    x30 = lbind(multiply, x21)\n    x31 = apply(x30, x23)\n    x32 = lbind(shift, x12)\n    x33 = mapply(x32, x25)\n    x34 = lbind(shift, x12)\n    x35 = mapply(x34, x27)\n    x36 = lbind(shift, x12)\n    x37 = mapply(x36, x29)\n    x38 = lbind(shift, x"], [1.1, "def solve_53e3346b(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 =00000000\n    \"\"\"\n    x3 =00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind("], [1.1, "def solve_048b64fd(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = sfilter(x31, x30)\n    x33 = merge(x32)\n    x34 = rot90(x30)\n    x35 = downscale(x33, x34)\n    x36 = objects(x35, T, F, F)\n    x37 = argmax(x36, x24)\n    x38 = last(x37)\n    x39 = remove(x39, x36"], [1.1, "def solve_d0765819(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = initset(x7)\n    x13 = add(x15, x12)\n    x14 =tojvec(x13)\n    x15 = drilltext(x14, x7)\n    x16 = lbind(argmin, x15)\n    x17 = compose(x16, toindices)\n    x18 = fork(difference, box, x17)\n    x19 = fork(equality, x18, identity)\n    x20 = compose(x19, switch)\n    x21 = rbind(multiply, xICS)\n    x22 = rbind(divide, xIts)\n    x23 = compose(x21, x22)\n    x24 = fork(equality, x23, identity)\n    x25 = compose(x24, x11)\n    x26 = lbind(apply, x25)\n    x27 = rbind(multiply, x10)\n    x28 = rbind(divide, x13)\n    x29 = x26(x14)\n    x30 = x27(x29)\n    x31 = fork(equality, x28, x30)\n    x32 = compose(x27, x11)\n    x33 = lbind(apply, x32)\n    x34 = rbind(toobject, I)\n    x35 = compose(x33, x34)\n    x36 = apply(x35, x15)\n    x37 = chain(x26, x24, x30)\n    x38 = x37(x36)\n    x39 = rbind(add, x38)\n    x40 = compose("], [1.1, "def solve_c7c2662f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, x3)\n    x5 = matcher(x4, TWO)\n    x6 = compose(x4, size)\n    x7 = sfilter(x3, x6)\n    x8 = chain(hline, sfilter, fgpartition)\n    x9 = merge(x7)\n    x10 = palette(x9)\n    x11 = intersection(x10, x8)\n    x12 = astuple(identity, rot90)\n    x13 = astuple(rot180, rot270)\n    x14 = combine(x12, x13)\n    x15 = astuple(identity, rot270)\n    x16 = astuple(rot180, rot90)\n    x17 = combine(x15, x16)\n    x18 = pair(x14, x17)\n    x19 = rbind(rapply, I)\n    x20 = compose(initset, first)\n    x21 = chain(first, x19, x20)\n    x22 = rbind(ofcolor, EIGHT)\n    x23 = chain(lowermost, x22, x21)\n    x24 = matcher(x23, ZERO)\n    x25 = extract(x18, x24)\n    x26 = first(x25)\n    x27 = last(x25)\n    x28 = x26(I)\n    x29 = decrement(x28)\n    x30 = astuple(x29, x27)\n    x31 = palette(I)\n    x32 = first(x31)\n    x33 = last(x31)\n    x34 = switch(x20, x33, x25)\n    x35 = branch(x34, hmirror, vmirror)\n    x36 = x35(x42)\n    x37 = canvas(x30, x36)\n    x38 = paint(x37, x34)\n    x39 = ofcolor(x38, EIGHT)\n    x40 = shift(x39,"], [1.1, "def solve_5480b6c7(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, contained)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, ulcorner, x31)\n    x34 = fork(subtract, x33, x31)\n    x35 = fork(add, toivec, x34)\n    x36 = fork(add, tojvec, x35)\n    x37 = fork(add, normalize, x36)\n    x38 = mapply(x37, x4)\n    O = paint(I, x38)"], [1.1, "def solve_2bb3c351(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b28f5123(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = replace(I, SIX, TWO)\n    x2 = objects(x1, T, F, T)\n    x3 = merge(x2)\n    x4 = color(x3)\n    x5 = subgrid(x3, x1)\n    x6 = argmax(x5, width)\n    x7 = astuple(TWO, ONE)\n    x8 = x5(x6)\n    x9 = box(x3)\n    x10 = fill(x6, x4, x9)\n    x11 = fill(x10, x4, x7)\n    x12 = lbind(O = merge(x6)\n    x13 = compose(color, x12)\n    x14 = fork(equality, identity, x13)\n    x15 = height(x11)\n    x16 = decrement(x15)\n    x17 =909(astuple, x16)\n    x18 = compose(last, first)\n    x19 = rbind(contained, x17)\n    x20 = sfilter(x11, x18)\n    x21 =\n    0202277522\n    last, x19)\n    x22 = width(x11)\n    x23 = subtract(x25, x22)\n    x24 = astuple(x23, x24)\n    x25 = canvas(ZERO, x24)\n    x26 = asindices(x25)\n    x27 = fgpartition(x25)\n    x28 = merge(x27)\n    x29 = palette(x28)\n    x30 = lbind(shift, x28)\n    x31 = mapply(x30, x29)\n    x32 = paint(x25, x31)\n    x33 =scale(x32, UNITY)\n    x34 = ofcolor(x33, x4)\n    x35 = asindices(x33)\n    x36 = remove(x35, x3333)\n    x37 =    x37 = lbind(recolor, x4)\n    x38 = lbind(mapply, x33)\n    x39 = rbind(ofcolor, x4)\n    x40 = chain("], [1.1, "def solve_e6723d67(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = sfilter(x1, vline)\n    x5 = size(x4)\n    x6 = greater(x3, x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(first, x14)\n    x16 = compose(flip, x15)\n    x17 = rbind(sfilter, x16)\n    x18 = mostcolor(x10)\n    x19 = lbind(recolor, x18)\n    x20 = rbind(sfilter, x15)\n    x21 = compose(toindices, x20)\n    x22 = fork(combine, x21, outbox)\n    x23 = compose(x19, x22)\n    x24 = fork(combine, x17, x23)\n    x25 = shape(x10)\n    x26 = add(TWO, x25)\n    x27 = canvas(x18, x26)\n    x28 = asobject(x10)\n    x29 = shift(x28, UNITY)\n    x30 = paint(x27, x29)\n    x31 = rbind(shift, NEG_UNITY)\n    x32 = lbind(occurrences, x30)\n    x33 = compose(x31, x32)\n    x34 = compose(x33, x24)\n    x35 = chain(positive, size, x34)\n    x36 = sfilter(x12, x35)\n    x37 = chain(first, x33, x24)\n    x38 = compose(ulcorner, x24)\n    x39 = fork(subtract, x37, x38)\n"], [1.1, "def solve_32761d00(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_de886222(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, ONE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, identity, rot90)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = rot180(x6)\n    x8 = sfilter(x3, x7)\n    x9 = merge(x8)\n    x10 = rot180(x9)\n    x11 = sfilter(x3, x4)\n    x12 = merge(x11)\n    x13 = rot270(x12)\n    x14 = sfilter(x3, x4)\n    x15 = argmax(x14, size)\n    x16 = ulcorner(x15)\n    x17 = subgrid(x15, x7)\n    x18 = objects(x17, T, F, F)\n    x19 = rbind(colorcount, ZERO)\n    x20 = argmax(x18, x19)\n    x21 = height(x20)\n    x22 = width(x20)\n    x23 = vsplit(x20, x22)\n    x24 = apply(ulcorner, x23)\n    x25 = mapply(x2200, x24)\n    x26 = combine(x21, x25)\n    x27 = palette(x25)\n    x28 = llcorner(x27)\n    x29 = matcher(first, x28)\n    x30 = rbind(sfilter, x29)\n    x31 = lbind(compose, flip)\n    x32 = lbind(matcher, first)\n    x33 = chain(x30, x31, x32)\n    x34 = lbind(paint, x17)\n    x35 = rbind(compose, asobject)\n    x36 = lbind(rbind, extract)\n    x37 = chain(x34, x35, x36)\n    x38 = fork(shift, identity, x37)\n    x39 = rbind(shift, x38)\n    x40 = compose(x39"], [1.1, "def solve_2e9b2df7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = width(x11)\n    x21 = decrement(x20)\n    x22 = tojvec(x21)\n    x23 = identity(DOWN)\n    x24 = connect(ORIGIN, x22)\n    x25 = fill(x18, THREE, x24)\n    x26 = identity(x12)\n    x27 = width(x12)\n    x28 = decrement(x27)\n    x29 = tojvec(x28)\n    x30 = identity(corners)\n    x31 = fill(x25, THREE, x30)\n    x32 = identity(x26)\n    x33 = identity(x256)\n    x34 = connect(ORIGIN, x24)\n    x35 = fill(x39, THREE, x34)\n    x36 = identity(x30)\n    x37 = fill(x35, THREE, x36)\n    x38 = add(x27, x36)\n    x39 = fill(x37, THREE, x38)\n    x40 = add(x29, x36)\n    x41 = fill(x40, THREE, x39)\n    x42 = combine(x34, x41)"], [1.1, "def solve_fbb4eb24(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = vsplit(I, TWO)\n    x7 = hsplit(I, TWO)\n    x8 = extract(x6, x4)\n    x9 = extract(x7, x4)\n    x10 = asobject(x8)\n    x11 = ulcorner(x9)\n    x12 = vplit(x10, TWO)\n    x13 = hsplit(x11, TWO)\n    x14 = neighbors(x13)\n    x15 = mapply(palette, x14)\n    x16 = astuple(x11, x12)\n    x17 = ulcorner(x9)\n    x18 = vsubtract(x17, x12)\n    x19 = hsplit(x19, TWO)\n    x20 = rbind(ofcolor, TWO)\n    x21 = compose(x20, x10)\n    x22 = fork(subtract, x21, x17)\n    x23 = corners(x15)\n    x24 = apply(x22, x23)\n    x25 = ZERO(x24)\n    x26 = fgpartition(x25)\n    x27 = merge(x26)\n    x28 = difference(x27, x25)\n    x29 = intersection(x28, x25)\n    x30 = shift(x29, DOWN)\n    x31 = extract(x30, x17)\n    x32 = initset(x15)\n    x33 = insert(x22, x32)\n    x34 = insert(x26, x33)\n    x35 = combine(x35, x34)\n    x36 = product(x35, x35)\n    x37 = power(increment, TWO)\n    x38 = x37(ORIGIN)\n    x39 = height(x38)\n    x40 = divide(x39, x37)\n    x41 = width"], [1.1, "def solve_54b7a60d(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = vsplit(I, x1)\n    x3 = apply(asobject, x2)\n    x4 = apply(hperiod, x3)\n    x5 = minimum(x4)\n    x6 = width(I)\n    x7 = hsplit(I, x6)\n    x8 = apply(asobject, x7)\n    x9 = apply(vperiod, x8)\n    x10 = minimum(x9)\n    x11 = matcher(hperiod, x5)\n    x12 = sfilter(x3, x11)\n    x13 = mapply(palette, x12)\n    x14 = matcher(vperiod, x10)\n    x15 = sfilter(x8, x14)\n    x16 = mapply(palette, x15)\n    x17 = palette(I)\n    x18 = combine(x13, x16)\n    x19 = rbind(contained, x18)\n    x20 = argmin(x17, x19)\n    x21 = palette(I)\n    x22 = remove(x20, x21)\n    x23 = other(x22, x20)\n    x24 = ofcolor(I, x20)\n    x25 = ofcolor(I, x10)\n    x26 = ofcolor(I, x5)\n    x27 = subgrid(x20, I)\n    x28 = subgrid(x25, I)\n    x29 = asobject(x28)\n    x30 = hperiod(x29)\n    x31 = height(I)\n    x32 = divide(x31, x30)\n    x33 = fgpartition(x32)\n    x34 = merge(x33)\n    x35 = x20(x34)\n    x36 = lbind(shift, x24)\n    x37 = shift(x35, x36)\n    x38 = toobject(x37, x28)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    x41 = toobject(x40, x28)\n    x42 = astuple("], [1.1, "def solve_b3351aa3(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors(d687)\n    x10 = lbind(lbind, sfilter)\n    x11 = rbind(colorcount, I)\n    x12 = chain(x11, x10, frontiers)\n    x13 = matcher(x12, TWO)\n    x14 = dmirror(x7)\n    x15 = lbind(hupscale, x14)\n    x16 = chain(x15, tojvec, x13)\n    x17 = compose(x16, x12)\n    x18 = fork(combine, vfrontier, hfrontier)\n    x19 = fork(combine, x17, x18)\n    x20 = fork(combine, x19, x7)\n    x21 = palette9(I)\n    x22 = extract(x21, x20)\n    x23 = lbind(hupscale, x7)\n    x24 = chain(x23, positive, x20)\n    x25 = dmirror(x7)\n    x26 = palette(x25)\n    x27 = other(x26, x22)\n    x28 =422(x28, x22)\n    x29 = rbind(rapply, x28)\n    x30 = compose(x29, initset)\n    x31 = argmax(x28, x30)\n    x32 = x28(x31)\n    x33 = ofcolor(x35, x27)\n    x34 =[contained(x33, x34)\n    x35 = ofcolor(x35, x27)\n    x36 = sfilter(x34, x35)\n    x37 = difference(x35, x36)\n    x38 = ofcolor("], [1.1, "def solve_28d1bbf1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_dc0730b9(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = argmax(x2, width)\n    x4 = height(x3)\n    x5 = halve(x4)\n    x6 = frontiers(x3)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = astuple(x5, x6)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x44 = interval(x13, x12, ONE)\n    x15 = lbind(shift, x11)\n    x16 = apply(x15, x44)\n    x17 = rbind(multiply, x5)\n    x18 = apply(x17, x16)\n    x19 = rbind(hmatching, x11)\n    x20 = rbind(vmatching, x11)\n    x21 = fork(either, x19, x20)\n    x22 = compose(x21, initset)\n    x23 = fork(extract, x22, x18)\n    x24 = compose(size, x23)\n    x25 = increment(x5)\n    x26 = interval(x25, x25, ONE)\n    x27 = corners(x11)\n    x28 = insert(x15, x27)\n    x29 = insert(x16, x28)\n    x30 = insert(x11, x29)\n    x31 =riercorner(x30)\n    x32 = apply(size, x31)\n    x33 = increment(x5)\n    x34 = interval(x33, x32, ONE)\n    x35 = apply(tojvec, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = fill(x10, FOUR, x36)\n    x38 = x42(x37)\n    x39 =703725(x38)\n    x40 = increment(x5)\n    x41 ="], [1.1, "def solve_d3e5f487(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_4eca0cab(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = ONE(x3)\n    x5 = ONE(I)\n    x6 = rot270(x4)\n    x7 = astuple(identity, rot270)\n    x8 = astuple(rot180, rot90)\n    x9 = combine(x7, x8)\n    x10 = sfilter(x9, square)\n    x11 = difference(x3, x10)\n    x12 = rot90(x11)\n    x13 = rbind(rapply, x2)\n    x14 = chain(first, x13, initset)\n    x15 = fork(combine, identity, x14)\n    x16 = extract(x15, x11)\n    x17 = mapply(x16, x12)\n    x18 = first(x17)\n    x19 = trim(x18)\n    x20 = dmirror(x19)\n    x21 = asobject(x20)\n    x22 = height(x21)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = apply(double, x24)\n    x26 = shape(x21)\n    x27 = apply(asobject, x21)\n    x28 = chain(first, x27, last)\n    x29 = asindices(x21)\n    x30 = ofcolor(x21, ZERO)\n    x31 = ofcolor(x21, ONE)\n    x32 = intersection(x29, x30)\n    x33 = fill(x21, ZERO, x32)\n    x34 = height(x21)\n    x35 = equality(x34, ZERO)\n    x36 = branch(x35, x22, vsplit)\n    x37 = lbind(recolor, ZERO)\n    x38 =88a104 last(I)\n    x39 = chain(x37, x37, x38)\n    x40 = difference(x39, x31)\n    x41"], [1.1, "def solve_7abfe236(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = fork(multiply, height, width)\n    x4 = argmax(x2, x3)\n    x5 = mostcolor(x4)\n    x6 = mostcolor(I)\n    x7 = canvas(x6, TWO_BY_TWO)\n    x8 = initset(x4)\n    x9 = insert(x8, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 = mapply(ineighbors, x11)\n    x13 = fill(x7, ONE, x12)\n    x14 =fill(x13,004, x11)\n    x15 = ofcolor(x14, x5)\n    x16 = rbind(adjacent, x15)\n    x17 = mfilter(x15, x16)\n    O = fill(x14, x5, x17)\n    return O"], [1.1, "def solve_bba87be2(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = height(I)\n    x5 = divide(x3, x4)\n    x6 = increment(x5)\n    x7 = width(I)\n    x8 = halve(x7)\n    x9 = increment(x8)\n    x10 = height(I)\n    x11 = divide(x9, x10)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = prapply(astuple, x13, x13)\n    x15 = lbind(canvas, ZERO)\n    x16 = lbind(occurrences, I)\n    x17 = compose(x15, x16)\n    x18 = lbind(apply, multiply)\n    x19 = chain(x17, x18, frontiers)\n    x20 = matcher(x19,45)\n    x21 = fork(recolor, color, x20)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x14, x22)\n    x24 = paint(I, x23)\n    x25 =101015(x23)\n    x26 = matcher(x22, x25)\n    x27 = mfilter(x1, x26)\n    O = paint(x24, x27)\n    return O"], [1.1, "def solve_74887115(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = chain(positive, first, x1)\n    x3 = lbind(lbind, sfilter)\n    x4 =539a539a6(I)\n    x5 = compose(x2, x3)\n    x6 = fork(sfilter, identity, x5)\n    x7 = equality(x4, x6)\n    x8 = branch(x7, identity, x6)\n    x9 = x8(I)\n    O = partition(x9)\n    return O"], [1.1, "def solve_b902a6ba(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 =29ec(d406)\n    x3 =92(flip, FOUR)\n    x4 = shape(I)\n    x5 = maximum(x4)\n    x6 =675(x5)\n    x7 = interval(TWO, x6, ONE)\n    x8 = rbind(multiply, x5)\n    x9 = apply(x8, x7)\n    x10 = rbind(multiply, FOUR)\n    x11 = apply(x10, x9)\n    x12 = matcher(numcolors, FOUR)\n    x13 = sfilter(x11, x12)\n    x14 = apply(color, x13)\n    x15 = mostcommon(x14)\n    x16 = repeat(x15, ONE)\n    O = x15(I)\n    return O"], [1.1, "def solve_88acd047(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 =66(I)\n    x4 =364(x3)\n    x5 = decrement(x4)\n    x6 = branch(x5, identity, initset)\n    x7 = branch(x5, identity, outbox)\n    x8 = x6(x7)\n    x9 = ulcorner(x8)\n    x10 = decrement(x9)\n    x11 = branch(x5, identity, initset)\n    x12 = x11(x10)\n    x13 = initset(x12)\n    x14 = insert(x9, x13)\n    x15 = width(I)\n    x16 = decrement(x15)\n    x17 = tojvec(x16)\n    x18 = connect(ORIGIN, x17)\n    x19 = height(I)\n    x20 = decrement(x19)\n    x21 = toivec(x20)\n    x22 = connect(ORIGIN, x21)\n    x23 = compress(I)\n    x24 = numcolors(x23)\n    x25 = equality(x24, ONE)\n    x26 = branch(x25, identity, x22)\n    x27 = branch(x25, identity, x24)\n    x28 = width(x26)\n    x29 = decrement(x28)\n    x30 = tojvec(x29)\n    x31 = connect(ORIGIN, x30)\n    x32 = height(x26)\n    x33 = decrement(x32)\n    x34 = toivec(x33)\n    x35 = connect(ORIGIN, x34)\n    x36 = connect(ORIGIN, x28)\n    x37 = connect(ORIGIN, x29)\n    x38 = fill(I, THREE, x36)\n    x39 = fill(x38, EIGHT, x37)\n    x40 = fill(x39, TWO, x35)\n    O = fill(x40, ONE, x39)\n    return O"], [1.1, "def solve_edf3b147(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = rot270(I)\n    x2 = fork(product, identity, identity)\n    x3 = apply(x2, x1)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, identity, identity)\n    x6 = x5(x1)\n    x7 =    488712738(x6)\n    O = x5(x7)\n    return O"], [1.1, "def solve_17b4feea(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =441001F\n    0000000001\n    x2 = merge(x1)\n    x4 = fill(I, NEG_ONE, x3)\n    x5 = astuple(x11, x12)\n    x6 = ulcorner(x2)\n    x7 = increment(x6)\n    x8 = rbind(subtract, x7)\n    x9 = chain(even, x8, last)\n    x10 = sfilter(x1, x9)\n    x11 = fork(connect, first, last)\n    x12 = compose(flip, x9)\n    x13 = rbind(sfilter, x12)\n    x14 = chain(decrement, x13, last)\n    x15 = fork(astuple, x11, x14)\n    x16 = apply(x15, x10)\n    O = paint(x4, x16)\n    return O"], [1.1, "def solve_d110545f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(equality, height, width)\n    x7 = size(x5)\n    x8 = interval(ZERO, x7, x6)\n    x9 = sfilter(x8, x4)\n    x10 = rbind(contained, x8)\n    x11 = compose(x10, outbox)\n    x12 = sfilter(x9, x11)\n    x13 = FOUR(x12)\n    x14 = increment(x13)\n    x15 =455(x12)\n    x16 = decrement(x15)\n    x17 = canvas(ZERO, x16)\n    x18 = asobject(x17)\n    x19 = shift(x18, UNITY)\n    x20 = paint(x17, x19)\n    x21 = height(x17)\n    x22 = width(x17)\n    x23 = astuple(x21, x22)\n    x24 = crop(x20, ORIGIN, x23)\n    x25 = hmirror(x24)\n    x26 = vmirror(x24)\n    x27 = ofcolor(x25, ZERO)\n    x28 = ofcolor(x26, ZERO)\n    x29 = product(x27, x28)\n    x30 = insert(x28, x29)\n    x31 = ofcolor(x20, TWO)\n    x32 = mapply(neighbors, x31)\n    x33 = difference(x30, x32)\n    O = fill(x20, ONE, x33)\n    return O"], [1.1, "def solve_1a7fd12c(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(I, ONE)\n    x4 =866(numcolors, trim)\n    x5 = compose(multiply, repeat)\n    x6 = matcher(dedupe, x5)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x4)\n    x9 = compose(x8, x6)\n    x10 = initset(identity)\n    x11 = matcher(x10, ZERO)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = argmax(x13, last)\n    x15 = height(x14)\n    x16 = increment(x15)\n    x17 = interval(ZERO, x16, ONE)\n    x18 = insert(x14, x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x17)\n    O = paint(I, x20)\n    return O"], [1.1, "def solve_e60115ad(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(add, first, last)\n    x9 = fork(connect, x7, x8)\n    x10 = fork(equality, x9, identity)\n    x11 =\n    x10(x2)\n    x12 = leastcolor(x11)\n    x13 = tojvec(SIX)\n    x14 = crop(x13, identity)\n    x15 = height(x14)\n    x16 = width(x14)\n    x17 = vsplit(x16, x15)\n    x18 = compose(x17, first)\n    x19 = fork(equality, identity, x18)\n    x20 = compose(x19, last)\n    x21 = width(x2)\n    x22 = vsplit(x21, x12)\n    x23 =885112(x22)\n    x24 = invert(x23)\n    x25 = shift(x14, x24)\n    x26 = shift(x25, x24)\n    x27 = palette(x26)\n    x28 = lbind(shift, x26)\n    x29 = occurrences(x28, x27)\n    x30 = mapply(x28, x29)\n    O = paint(x23, x30)\n    return O"], [1.1, "def solve_79f29e04(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 =850d687anch(x8, ORIGIN, toindices)\n    x10 = matcher(first, x39)\n    x11 = compose(flip, x10)\n    x12 = sfilter(x1, x11)\n    x13 = rbind(contained, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x6, x14)\n    x16 = merge(x15)\n    x17 = palette(x16)\n    x18 = matcher(first, x39)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x16, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x20)\n    x23 = fork(combine, x22, x22)\n    x24 = rbind(shoot, UNITY)\n    x25 = compose(x24, last)\n    x26 = fork(recolor, first, x25)\n    x27 = mapply(x26, x4)\n    O = paint(x6, x27)\n    return O"], [1.1, "def solve_2ccd11ae(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    4577300009\n    3011433066\n    7854836027\n    1929100002\n    \"\"\"\n    x1 = halve(x1)\n    x2 = rbind(shoot, x4)\n    x3 = rbind(shoot, x2)\n    x4 = fork(combine, x2, x3)\n    x5 = rbind(shoot, x2)\n    x6 = rbind(shoot, x4)\n    x7 = fork(combine, x6, x5)\n    x8 = fork(combine, x4, x7)\n    x9 = leastcolor(I)\n    x10 = rbind(toobject, I)\n    x11 = rbind(colorcount, x9)\n    x12 = chain(x11, x10, dneighbors)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x1, x13)\n    x15 = x14(I)\n    x16 = last(x15)\n    x17 = subgrid(x16, x15)\n    x18 = index(x17, DOWN)\n    x19 = subgrid(x18, x15)\n    x20 = hmirror(x19)\n    x21 = replace(x20, x9, x8)\n    x22 = replace(x21, x10, x7)\n    x23 = replace(x22, x19, x8)\n    x24 = hmirror(x23)\n    O = replace(x24, x10, x5)\n    return O"], [1.1, "def solve_6524061a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = width(I)\n    x2 =215(I)\n    x3 = halve(x1)\n    x4 = increment(x3)\n    x5 = width(I)\n    x6 = divide(x5, x4)\n    x7 = astuple(x6, x4)\n    x8 = canvas(ZERO, x7)\n    x9 = ofcolor(x8, ONE)\n    x10 = rbind(multiply, x4)\n    x11 = apply(x10, x9)\n    x12 = rbind(multiply, x6)\n    x13 = apply(x12, x11)\n    x14 = ofcolor(x8, ONE)\n    x15 = rbind(intersection, x14)\n    x16 = apply(x15, x13)\n    O = fill(x8, ZERO, x16)\n    return O"], [1.1, "def solve_a311ede7(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, TWO, THREE)\n    x3 = switch(x2, ONE, FOUR)\n    x4 = switch(x3, EIGHT, FOUR)\n    x5 = astuple(FOUR, FOUR)\n    x6 = canvas(ZERO, x5)\n    x7 = asindices(x6)\n    x8 = fork(add, first, last)\n    x9 = chain(flip, even, x8)\n    x10 = sfilter(x7, x9)\n    x11 = initset(ORIGIN)\n    x12 = box(x7)\n    x13 = inbox(x7)\n    x14 = center(x7)\n    x15 = initset(x14)\n    x16 = lbind(toobject, x12)\n    x17 = compose(x4, x16)\n    x18 = lbind(toobject, x13)\n    x19 = compose(x4, x18)\n    x20 = lbind(toobject, x15)\n    x21 = compose(x4, x20)\n    x22 =454(x21)\n    x23 = merge(x11)\n    x24 = fill(x6, TWO, x23)\n    x25 = asindices(x24)\n    x26 = corners(x25)\n    x27 = toobject(x26, x24)\n    x28 = mostcolor(x27)\n    x29 = asindices(x24)\n    x30 = ofcolor(x24, x28)\n    x31 = difference(x29, x30)\n    x32 = rbind( fill, x28)\n    x33 = apply(x32, x31)\n    x34 = rbind(adjacent, x4)\n    x35 = mfilter(x34, x28)\n    x36 = mfilter(x34, x25)\n    x37 = paint(x24, x3)\n    x38 = paint(x37, x35)\n    O = fill(x38, x28, x36)\n    return O"], [1.1, "def solve_c25fc43f(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =159(I)\n    x2 = ofcolor(I, TWO)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.1, "def solve_f81fd587(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = height(x2)\n    x4 = halve(x3)\n    x5 = width(x2)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(O = maximum(x4)\n    x10 = double(x4)\n    x11 = interval(ZERO, x10, ONE)\n    x12 = rbind(multiply, x4)\n    x13 = apply(x12, x11)\n    x14 = rbind(multiply, x6)\n    x15 = apply(x14, x11)\n    x16 = pair(x13, x15)\n    x17 = rbind(add, ZERO)\n    x18 = compose(x17, first)\n    x19 = rbind(add, x8)\n    x20 = pair(x16, x19)\n    x21 = fork(combine, x18, x20)\n    x22 = mapply(x21, x30)\n    O = fill(x2, FOUR, x22)\n    return O"], [1.1, "def solve_e46bf51e(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = vperiod(x2)\n    x4 = height(I)\n    x5 = halve(x4)\n    x6 = add(x5, THREE)\n    x7 = width(I)\n    x8 = astuple(x6, x7)\n    x9 = partition(I)\n    x10 = lbind(colorcount, I)\n    x11 = argmax(x9, x10)\n    x12 = canvas(x11, x8)\n    x13 = apply(normalize, x12)\n    x14 = lbind(to67e509687\n    x15 =8877(x14)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x13, x17)\n    x19 = compose(invert, size)\n    x20 = order(x18, x19)\n    x21 = apply(last, x20)\n    x22 = mpapply(recolor, x21, x13)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_aaaa4e5d(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = uppermost(x7)\n    x10 = compose(toindices, normalize)\n    x11 = matcher(x10, x9)\n    x12 = uppermost(x7)\n    x13 = compose(toindices, normalize)\n    x14 = matcher(x13, x12)\n    x15 = leftmost(x7)\n    x16 = matcher(x15, x13)\n    x17 = uppermost(x7)\n    x18 = greater(x16, x17)\n    x19 = leftmost(x7)\n    x20 = matcher(x19, x14)\n    x21 = uppermost(x7)\n    x22 = matcher(x21, x18)\n    x23 = leftmost(x7)\n    x24 = matcher(x23, x14)\n    x25 = rightmost(x7)\n    x26 = matcher(x25, x24)\n    x27 = leftmost(x7)\n    x28 = matcher(x27, x28)\n    x29 = uppermost(x7)\n    x30 = matcher(x29, x25)\n    x31 = rightmost(x7)\n    x32 = matcher(x31, x29)\n    x33 = leftmost(x7)\n    x34 = sfilter(x33, x21)\n    x35 = argmax(x34, size)\n    x36 = difference(xs, x35)\n    x37 =884483replace(x36, x8, x5)\n    O = uppermost(x37)\n    return O"], [1.1, "def solve_94253c38(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 =523259\n    4292891824\n    \"\"\"\n    x2 = astuple(TWO, ONE)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = tophalf(x3)\n    x5 = dmirror(x4)\n    x6 = hupscale(x5, x4)\n    x7 = repeat(x6, TWO)\n    x8 = merge(x7)\n    O = vconcat(x3, x8)\n    return O"], [1.1, "def solve_aa2d0b61(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(150,197)\n    x9 = size(x3)\n    x10 = vsplit(x4, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hconcat, identity)\n    x14 = hmirror(x11)\n    x15 = matcher(x13, x14)\n    x16 = identity( Maurice222\n    0000000352\n    \"\"\"\n    x1 = leastcolor(x6)\n    x2 = vsplit(x6, x12)\n    x3 = apply(x13, x2)\n    x4 = maximum(x3)\n    x5 = ofcolor(x4, x1)\n    x6 = hmirror(x5)\n    x7 = fill(x6, ZERO, x1)\n    x8 = insert(x7, x5)\n    O = fill(x8, ZERO, x2)\n    return O"], [1.1, "def solve_0cc501ef(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette,I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.1, "def solve_36df1f97(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I asobject, I)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_7e21616c(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mostcolor(I)\n    x3 = ofcolor(I, x2)\n    x4 = partition(I)\n    x5 = sizefilter(x4, ONE)\n    x6 = difference(x4, x5)\n    x7 =1117fcbind(ofcolor, x2)\n    x8 = mapply(x7, x6)\n    x9 = fork(connect, ulcorner, urcorner)\n    x10 = fork(connect, urcorner, ulcorner)\n    x11 = fork(combine, x9, x10)\n    x12 = mapply(x11, x9)\n    O = fill(I, x2, x12)\n    return O"], [1.1, "def solve_429ab382(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =889(RIGHT)\n    x2 = halve(x1)\n    O = upscale(I, x2)\n    return O"], [1.1, "def solve_e6a81d9e(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =7326(I)\n    x2 = tophalf(x1)\n    O = bottomhalf(x1)\n    return O"], [1.1, "def solve_973c9f8a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = color(x8)\n    x11 = color(x9)\n    x12 =483(x7)\n    x13 =485(x7)\n    x14 =11(x12)\n    x15 =11(x13)\n    x16 = rbind(multiply, x4)\n    x17 = apply(x16, x14)\n    x18 = mapply(x16, x17)\n    x19 = merge(x9)\n    x20 = fill(I, x3, x19)\n    O = fill(x20, x11, x18)\n    return O"], [1.1, "def solve_2b62334e(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 =8888(66666666)\n    x2 = rbind(shoot, RIGHT)\n    x3 = rbind(shift, LEFT)\n    x4 = compose(x2, x3)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x1)\n    O = paint(I, x6)\n    return O"], [1.1, "def solve_ced800e1(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = heavily remind4448(I)\n    x2 =Example output:\n    4941910114\n    2732866842\n    8388760181\n    3013746873\n    1529944467\n    1491984894\n    6741268043\n    314479401f8(77769718\n    57648014328\n    1737465730\n    \"\"\"\n    x1 = rbind(greater, ONE)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.1, "def solve_4a350a1a(I):\n    \"\"\"\n    Example input:\n    4769158319\n    9010533467\n    7392644061\n    1765839672\n    7924919540\n    5529648847\n    0015439934\n    7492453523\n    0526068385\n    7488084094\n    Example output:\n    0107061630\n    0258902113\n    3658102435\n    6416022215\n    8483449027\n    2233500243\n    3542679388\n    3784285256\n    4496003163\n    7561944749\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = T sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape1fad0729(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = combine(x15, x16)\n    x18 = intersection(x15, x16)\n    x19 = difference(x17, x18)\n    O = fill(x14, THREE, x19)\n    return O"], [1.1, "def solve_2beef78b(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 =9999(I, T)\n    x2 = matcher(00000000, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = size(x4)\n    x6 = width(I)\n    x7 = multiply(x6, x5)\n    x8 = multiply(UNITY, x7)\n    x9 = canvas(ZERO, x8)\n    x10 = multiply(x6, x5)\n    x11 = decrement(x10)\n    x12 = lbind(astuple, x11)\n    x13 = rbind(shoot, UP_RIGHT)\n    x14 = compose(last, last)\n    x15 = chain(x13, x12, x14)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x4)\n    O = underpaint(x9, x17)\n    return O"], [1.1, "def solve_2e9ecf87(I):\n    \"\"\"\n    Example input:\n    1944104039\n    3296229732\n    2440653966\n    5722868179\n    4489363536\n    9045210256\n    9963731470\n    4544726285\n    4360258394\n    0725085321\n    Example output:\n    4792911203\n    5636446719\n    0827815435\n    3900090097\n    7297257483\n    6816837069\n    4676370585\n    1419490201\n    8024689528\n    9114657794\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = decrement(ORIGIN)\n    88777 ulcorner(I)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = fill(I, x1, x3)\n    x5 = shift(x2, UNITY)\n    x6 = underfill(x4, x1, x5)\n    x7 = rbind(shoot, LEFT)\n    x8 = compose(x7, last)\n    x9 = matcher(x8, x8)\n    x10 = sfilter(x3, x9)\n    O = fork(recolor, first, x10)\n    return O"], [1.1, "def solve_eb0ce75a(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = fork(combine, vfrontier, hfrontier)\n    x2 = compose(x1, size)\n    x3 = fork(difference, x2, toindices)\n    x4 = x2(I)\n    x5 = compose(size, x3)\n    x6 = matcher(x5, ZERO)\n    x7 = fork(both, x3, x6)\n    x8 = sfilter(x4, x7)\n    x9 = matcher(first, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 =0001\n    x13 = merge(x11)\n    x14 = dmirror(x12)\n    x15 = compose(x14, x12)\n    x16 = apply(x15, x13)\n    x17 = dedupe(x16)\n    x18 = order(x17, identity)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, ONE)\n    x23 = combine(x21, x22)\n    x24 = combine(x21, x20)\n    x25 = fork(hfrontier, vfrontier, hfrontier)\n    x26 = mapply(x25, x23)\n    x27 = fill(x19, SIX, x26)\n    O = fill(x27, ONE, x24)\n    return O"], [1.1, "def solve_3f4a996b(I):\n    \"\"\"\n    Example input:\n    3941501764\n    2722246048\n    4300545044\n    5400802597\n    5776563582\n    4835693860\n    6973128912\n    0707004054\n    3139440835\n    4177419630\n    Example output:\n    2951891827\n    9023687842\n    6608147321\n    9880137272\n    5052766554\n    1612894871\n    1399841748\n    6337929848\n    7395106765\n    6766111359\n    \"\"\"\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, ZERO)\n    x3 = branch(x2, width, height)\n    x4 = fork(equality, size, x3)\n    x5 = compose(flip, x4)\n    x6 = sfilter(I, x5)\n    x7 =191(x6)\n    x8 =222(x7, x5)\n    x9 = palette(x8)\n    x10 = repeat(x9, ONE)\n    x11 =14filter(x10, x5)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = height(x16)\n    x18 = width(x16)\n    x19 = multiply(x17, x18)\n    x20 = increment(x19)\n    x21 = invert(x20)\n    x22 = shift(x16, x21)\n    x23 = frontiers(I)\n    x24 = toindices(x16)\n    x25 = apply(center, x24)\n    x26 = lbind(shift, x24)\n    x27 = mapply(x26, x25)\n    O = paint(I, x27)\n    return O"], [1.1, "def solve_c0344aae(I):\n    \"\"\"\n    Example input:\n    0014834377\n    4933056377\n    4056579444\n    6024035031\n    5782678034\n    0507731631\n    8597201799\n    4334160844\n    7102657761\n    4679965441\n    Example output:\n    9501612438\n    7699794735\n    8168735976\n    2239528661\n    5009494893\n    3745669233\n    8497714890\n    0827336302\n    0501576727\n    0900968427\n    \"\"\"\n    x1 = height(I)\n    x2 = equality(x1, THREE)\n    x3 = branch(x2, dmirror, identity)\n    x4 = x3(I)\n    x5 = fgpartition(x4)\n    x6 = merge(x5)\n    x7 = equality(x1, TWO)\n    x8 = branch(x7, cmirror, outbox)\n    x9 = x8(x4)\n    x10 =\n    \"\"\"\n    x1 = branch(x7, hmirror, vmirror)\n    x2 = x1(x4)\n    x3 = equality(x1, ONE)\n    x4 = branch(x3, hmirror, vmirror)\n    x5 = x4(x4)\n    x6 = decrement(x1)\n    x7 = hconcat(x5, x6)\n    x8 = branch(x3, vmirror, hmirror)\n    x9 = x8(x4)\n    x10 = decrement(x7)\n    x11 = width(x4)\n    x12 = decrement(x11)\n    x13 = tojvec(x12)\n    x14 =jtoivec(x13)\n    x15 = branch(x11, x14, x9)\n    x16 = shape(x4)\n    x17 = canvas(ZERO, x16)\n    x18 = ofcolor(x4, ZERO)\n    x19 = ofcolor(x4, ONE)\n    x20 = intersection(x18, x19)\n    O = fill(x17, THREE, x20)\n    return O"]]}