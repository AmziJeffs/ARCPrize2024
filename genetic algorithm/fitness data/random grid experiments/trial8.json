{"d56f2372": [[0.29706172839506173, "def solve_80980c8c(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.3346827117477524, "def solve_f067c1cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_e2130830(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_79e19501(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_e004eac7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_91c19737(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_3dfaff7c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_6067f714(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_88014b3c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_7d66dc70(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3522599842454915, "def solve_4292352e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [0.3522599842454915, "def solve_da8109a3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [0.3522599842454915, "def solve_9da74771(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [0.39591901174509864, "def solve_6e229489(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.41699831998382725, "def solve_143f04ac(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.4529147812971343, "def solve_5346f40d(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    O = paint(x4, x6)\n    return O"], [0.4544472391184824, "def solve_579a4cd8(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.46631282942568797, "def solve_fac58b0f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, ONE)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.47145600561542583, "def solve_88e9b01f(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.47145600561542583, "def solve_8a389a87(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.47145600561542583, "def solve_88b57e6a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4744327528950218, "def solve_3ec4d1a9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.4784421882465361, "def solve_0ec2872f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = colorcount(I, ONE)\n    x7 = decrement(x6)\n    x8 = tojvec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = fill(x5, TWO, x9)\n    x11 = initset(UNITY)\n    x12 = equality(x6, FOUR)\n    x13 = branch(x12, x11, x9)\n    O = fill(x10, TWO, x13)\n    return O"], [0.47968970642883685, "def solve_ffb21a20(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.49325354355789136, "def solve_d7e7fb8c(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.49704719435154215, "def solve_4bd2cac0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_5288a131(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_646c37d8(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_9bd93218(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_6b50b3f4(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.49704719435154215, "def solve_3c5ee8a7(I):\n    x1 = rot180(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5056030890741036, "def solve_104d4f29(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_93d3624e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_cb6da758(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_784bf2d0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_071a486e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5130794983512649, "def solve_129b2d68(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.5307798906710026, "def solve_4f87ab55(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_bc6be8e6(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5585024261811583, "def solve_f2249a10(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_e2948e51(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5652441058672942, "def solve_dcda85ba(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_57838909(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_ac1538d5(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_d40492ae(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_a2356a7f(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.600627228917084, "def solve_bda7b226(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6016750389108988, "def solve_67ee853f(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6016750389108988, "def solve_0d9ce51e(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6016750389108988, "def solve_9deea0a3(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6181018953185965, "def solve_7df76510(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter,x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_65d07ff6(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_2f06c5db(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_249a078c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_39c6a054(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_5f284ee8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_3fce4902(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_72380bf2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_723a0307(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_8e82896a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_51e32dc5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6215666154221785, "def solve_310d6026(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [0.6243642582548613, "def solve_2be16dc0(I):\n    x1 = hsplit(I, TWO)\n    O = first(x1)\n    return O"], [0.6290331115167541, "def solve_4c4fdc4c(I):\n    x1 = trim(I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [0.6291436647232063, "def solve_e7119462(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_9dc6abd3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_f05cf0b9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_7b0aa453(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_b9a967e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_9f1ef182(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_e8d81717(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_ac6f23da(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_545614e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_41b7cca8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_b769e1f3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_32ba691d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_4dc8d598(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_016205dc(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_db073527(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6291436647232063, "def solve_073f70d8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6307531254528715, "def solve_a7de5013(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6411654239156103, "def solve_07584382(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.6416977053214553, "def solve_998098e3(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6416977053214553, "def solve_2d96430b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6452306454249964, "def solve_b4b088e8(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = sfilter(x9, x13)\n    x15 = compose(color, x11)\n    x16 = fork(recolor, x15, identity)\n    x17 = mapply(x16, x14)\n    O = paint(x5, x17)\n    return O"], [0.6602138625163511, "def solve_1e67fd3c(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6602138625163511, "def solve_1a0da53b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_0f30f1cf(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_289957b1(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6602138625163511, "def solve_65929c8e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6674861298852472, "def solve_8a2a4fd4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6703093706701909, "def solve_4dd520f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = dmirror(I)\n    x4 = equality(x3, x1)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6960644532404631, "def solve_9224f961(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.6978401405853463, "def solve_f6c16c47(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.6978401405853463, "def solve_b88c0a04(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.6987437235862725, "def solve_79fd51ca(I):\n    O = trim(I)\n    return O"], [0.6987437235862725, "def solve_d8260275(I):\n    O = trim(I)\n    return O"], [0.7014899869266334, "def solve_c65aa74c(I):\n    x1 = cmirror(I)\n    O = subgrid(x1, I)\n    return O"], [0.7018733468861346, "def solve_e5498a8a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = x3(I)\n    x6 = shape(x4)\n    x7 = canvas(ZERO, x6)\n    x8 = objects(x5, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    O = paint(x7, x13)\n    return O"], [0.7052501974196685, "def solve_0136aa78(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7052501974196685, "def solve_3f321763(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7052501974196685, "def solve_8a1db87a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7092132972493429, "def solve_fd3d1835(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7209610573661548, "def solve_8b2b4267(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7209610573661548, "def solve_b2e862c8(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7209610573661548, "def solve_5a2b2d9c(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7209610573661548, "def solve_648ea28e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.726409536810065, "def solve_0cd3e000(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    O = paint(I, x5)\n    return O"], [0.7265166129217103, "def solve_3043fe93(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7265166129217103, "def solve_d1242cc5(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7265166129217103, "def solve_daf2f29d(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7289045042337138, "def solve_934ada89(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.7328950067132097, "def solve_a4a28622(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.7361102977736663, "def solve_13cf489a(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7361102977736663, "def solve_aa4a4210(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.739396261410893, "def solve_03da3cd5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_3ba524cb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_3b89e135(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7406782551101673, "def solve_43d5df35(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(toindices, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = objects(x5, T, F, T)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x5, x8)\n    return O"], [0.7410390952301974, "def solve_0fc2b845(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410606318002912, "def solve_8ebcfe2b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7411341780448716, "def solve_1764c709(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c001bb73(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7412792299071665, "def solve_b1cd4281(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.7414217191724711, "def solve_02aa9478(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7414599729228802, "def solve_a25f0c55(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, TWO)\n    x8 = astuple(TWO, x2)\n    x9 = power(decrement, TWO)\n    x10 = x9(x1)\n    x11 = x9(x2)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = crop(I, x12, x8)\n    x15 = crop(I, x13, x7)\n    x16 = asobject(x15)\n    x17 = asobject(x14)\n    x18 = vperiod(x16)\n    x19 = hperiod(x17)\n    x20 = astuple(x18, x19)\n    x21 = lbind(multiply, x20)\n    x22 = neighbors(ORIGIN)\n    x23 = mapply(neighbors, x22)\n    x24 = apply(x21, x23)\n    x25 = lbind(shift, x6)\n    x26 = mapply(x25, x24)\n    O = paint(I, x26)\n    return O"], [0.7414654147115858, "def solve_f4b508cf(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.7414654147115858, "def solve_a3533769(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_cfb94ee5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_c6b891b4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_9a7095b3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_4b316b5f(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7414654147115858, "def solve_b0d22c00(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_a98f16f8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_a146ca9a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_e3f5a841(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_94983672(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_e2e5080c(I):\n    x1 = asindices(I)\n    x2 = recolor(ZERO, x1)\n    x3 = lbind(shift, x2)\n    x4 = occurrences(I, x2)\n    x5 = mapply(x3, x4)\n    O = paint(I, x5)\n    return O"], [0.7414654147115858, "def solve_a075377a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_f09525e7(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7415785233617287, "def solve_8c71b7e0(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O"], [0.7419294883893283, "def solve_8ea6e1e5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_f5011454(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_a78f4125(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_f700ff56(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_9ffec60d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_1565ebba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_ea79e4e3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_58a82f52(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_55dde4d1(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_816ea530(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_c3e7dda6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_5a71d56d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_1196570b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_d295d8c3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_05894b53(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_717a5c31(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7420260064287781, "def solve_f239ea44(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7426909638249383, "def solve_57828555(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_dfbbb59c(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7437264972338323, "def solve_623b0c51(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.744309578111282, "def solve_fdfdf597(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_faf07838(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_f9f0600b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_d68d55f1(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_c122fbb2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.744309578111282, "def solve_ceb664ec(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_cc18addb(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.744309578111282, "def solve_16aff312(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_5095be16(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.744309578111282, "def solve_61339b62(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7448399954168033, "def solve_796e08f3(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.7450712646640288, "def solve_438f706b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7452006096033813, "def solve_7f62c837(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.7452339307767635, "def solve_cfcf28e2(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.7454693369193063, "def solve_c3cbe74a(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, vmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.7462669862994846, "def solve_c11b0301(I):\n    O = dmirror(I)\n    return O"], [0.7462669862994846, "def solve_c19cc311(I):\n    O = dmirror(I)\n    return O"], [0.7464740545096182, "def solve_c314532d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7467587450693074, "def solve_18a0ff35(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [0.747217364055525, "def solve_1fcc57a3(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(toivec, numcolors)\n    x5 = fork(add, lrcorner, x4)\n    x6 = fork(astuple, x3, x5)\n    x7 = compose(box, x6)\n    x8 = mapply(x7, x1)\n    O = fill(I, THREE, x8)\n    return O"], [0.7476233794761621, "def solve_186f2b6c(I):\n    O = rot180(I)\n    return O"], [0.7477556894835988, "def solve_c162868a(I):\n    O = hmirror(I)\n    return O"], [0.7481170341881848, "def solve_7a10dcbb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_4347c091(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_c130da4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7482565735643151, "def solve_2cfb3c38(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_db0f04e4(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_df7b466b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7484974551407092, "def solve_4bb77202(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7484974551407092, "def solve_69ce8055(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7484974551407092, "def solve_bb4716d0(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7487022635082722, "def solve_62cbca51(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7487035816092084, "def solve_7a629c7e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7491103860227947, "def solve_5d3c9642(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot270(I)\n    return O"], [0.7491103860227947, "def solve_ed3b0a28(I):\n    O = rot270(I)\n    return O"], [0.7491103860227947, "def solve_edeedba3(I):\n    O = rot270(I)\n    return O"], [0.749321253046244, "def solve_07d51b9c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_48a3de2d(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_fd338538(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_c26fe185(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_48b371f7(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_910f2054(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7494639973891709, "def solve_c79503c9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, vmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, hmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7496036464722639, "def solve_bec01355(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.7498499462550435, "def solve_bece834a(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7500179874205357, "def solve_b47661a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2,UNITY)\n    x4 = intersection(x2, x3)\n    x5 = mapply(neighbors, x4)\n    O = underfill(I, UP, x5)\n    return O"], [0.7501495720184375, "def solve_ca3658b4(I):\n    O = rot90(I)\n    return O"], [0.7501495720184375, "def solve_68bfb9aa(I):\n    O = rot90(I)\n    return O"], [0.7516087933992682, "def solve_812a3b60(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7518753424364076, "def solve_6c4516b1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7518753424364076, "def solve_3f3cd1f7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7561961853743412, "def solve_6fee0dcd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.7563226292282558, "def solve_32f4d056(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, mostcolor, x2)\n    return O"], [0.7585979722118071, "def solve_f3d2cdb4(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, decrement, x8)\n    O = hmirror(x9)\n    return O"], [0.7588892456530311, "def solve_4a20f76f(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.7588892456530311, "def solve_13ffcbf0(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.7598499462550435, "def solve_cee1a4ff(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7598499462550435, "def solve_0b377ec6(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7598499462550435, "def solve_9c547a2c(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7658391338746977, "def solve_66253f7c(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, FOUR)\n    x4 = switch(x3, TWO, SIX)\n    O = replace(x4, EIGHT, TWO)\n    return O"], [0.770283578319142, "def solve_2078d72b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_da990556(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_59c66f95(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_60f97838(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_a4705935(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_544f55d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_4553f1d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7760258071358489, "def solve_293b123d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7771381822376172, "def solve_876ab2dc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.7778393642444615, "def solve_02cc1bf7(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x2)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x2)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [0.7790633012367362, "def solve_487aa7fc(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_461aa8f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_497731f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_359d0d94(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_053e17b6(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7790633012367362, "def solve_31018754(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7829819910175547, "def solve_97f3d8a9(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.7829819910175547, "def solve_a0af9139(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.7871062946758173, "def solve_5bdd8550(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7871062946758173, "def solve_34ef23fc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7871062946758173, "def solve_f85e9eed(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7871062946758173, "def solve_2d7d386d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7871062946758173, "def solve_388e1b7f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7955660400848208, "def solve_95344ba8(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [1.0, "def solve_049372ee(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_a37c8aba(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 =uttuple(x6, x7)\n    x9 = repeat(x8, ONE)\n    O = x7(x9)\n    return O"], [1.0, "def solve_d19c3398(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_7ea63447(I):\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, THREE)\n    x3 = flip(x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x5(I)\n    x8 = x5(I)\n    x9 = first(x7)\n    x10 = last(x7)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x8, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = asindices(x11)\n    x23 = ofcolor(x11, x21)\n    x24 = difference(x22, x23)\n    x25 = astuple(x24, x3333)\n    x26 = apply(last, x25)\n    x27 = size(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = rbind(add, first)\n    x31 = compose(x30, last)\n    x32 = rbind(multiply, x31)\n    x33 = apply(x32, x29)\n    x34 = lbind(shift, x11)\n    x35 = mapply(x34, x33)\n    x36 = paint(x11, x35)\n    O = x6(x36)\n    return O"], [1.0, "def solve_7cc98818(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_3bda924f(I):\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(dneighbors, x1)\n    x3 = fork(difference, x2, toindices)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ZERO)\n    x6 = compose(x1, x5)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x1, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_20cebd2e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_78c33ff1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_962b3b43(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_14d818e9(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x12 = compose(x15, last)\n    x13 = sfilter(x13, x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x8, x15)\n    x17 = other(x16, x14)\n    x18 = rbind(colorcount, x14)\n    x19 = argmin(x17, x18)\n    x20 = apply(ulcorner, xx)\n    x21 = normalize(x19)\n    x22 = matcher(first, x14)\n    x23 = sfilter(x21, x22)\n    x24 = toindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = mapply(x25, x8)\n    x27 = ofcolor(I, x17)\n    x28 = backdrop(x27)\n    x29 = intersection(x27, x28)\n    O = fill(I, x17, x29)\n    return O"], [1.0, "def solve_e6b2b224(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_53a0909f(I):\n    x1 = objects(I, F, T, T)\n    x2 = subgrid(x1, I)\n    x3 = mostcolor(x2)\n    O = replace(x2, x3, ONE)\n    return O"], [1.0, "def solve_d2d3de8d(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = apply(ulcorner, x2)\n    x4 = apply(urcorner, x2)\n    x5 = apply(llcorner, x2)\n    x6 = apply(lrcorner, x2)\n    x7 = fill(I, ONE, x3)\n    x8 = fill(x7, TWO, x4)\n    x9 = fill(x8, THREE, x5)\n    O = fill(x9, FOUR, x6)\n    return O"], [1.0, "def solve_f51bcb8d(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO_BY_TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners, combine)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_c85f36ed(I):\n    x1 =O = subgrid(x2, I)\n    O = trim(x1)\n    return O"], [1.0, "def solve_80c2a33c(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6757fa8d(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_706088f6(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f111fd73(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = lbind(shift, x5)\n    x7 = mapply(x6, x4)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_568417bf(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da15407e(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = fill(I, x10, x30)\n    O = trim(x31)\n    return O"], [1.0, "def solve_913b1be3(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_25abc504(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = occurrences(x7, x21)\n    x25 = lbind(mapply, backdrop)\n    x26 = lbind(apply, toindices)\n    x27 = compose(x25, x26)\n    x28 = x27(x24)\n    x29 = x27(x25)\n    x30 = fill(x7, x4, x28)\n    x31 = fill(x30, x6, x29)\n    O = fill(x31, ONE, x30)\n    return O"], [1.0, "def solve_66aeef6e(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e7fe1202(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e57feb5d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_9fe0b56e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9b3d7e8f(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = x2(x2)\n    return O"], [1.0, "def solve_acafbc06(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_299c5df7(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_2be20951(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d17e2eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 =x26(x15)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x22, x30)\n    x32 = apply(x11, x31)\n    x33 = argmin(x32, size)\n    x34 = x22(x33)\n    x35 = x21(x34)\n    x36 = divide(x17, x35)\n    x37 = x51(x34)\n    x38 = x25(x37)\n    x39 = canvas(x38, x36)\n    O = paint(x39, x37)\n    return O"], [1.0, "def solve_4adc7313(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_a97ec318(I):\n    x1 = index(I, ORIGIN)\n    x2 = recolor(ORIGIN, x1)\n    x3 = apply(initset, x2)\n    x4 = toindices(x3)\n    x5 = chain(backdrop, first, last)\n    x6 = lbind(mapply, x5)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = compose(x6, x7)\n    x9 = position(x4, x8)\n    x10 = difference(x1, x9)\n    x11 = apply(x8, x10)\n    x12 = lbind(difference, x4)\n    x13 = compose(x12, x8)\n    x14 = rbind(ofcolor, ZERO)\n    x15 = compose(x14, x8)\n    x16 = fork(sfilter, x13, x15)\n    x17 = mapply(x16, x11)\n    O = fill(I, x1, x17)\n    return O"], [1.0, "def solve_bb3cbb31(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a5fbb767(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, flip)\n    x3 = branch(x1, decrement, ONE)\n    x4 = x2(I)\n    x5 = halve(x4)\n    x6 = x3(I)\n    x7 = rbind(shoot, x5)\n    x8 = compose(x7, x4)\n    x9 = fork(combine, x8, x5)\n    x10 = mapply(x9, x6)\n    O = fill(I, ONE, x10)\n    return O"], [1.0, "def solve_62f87671(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_8f1c175e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_11ee2f79(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_76d78f80(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose,initset)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = lbind(fork, greater)\n    x8 = lbind(chain, FOUR)\n    x9 = rbind(x8, x6)\n    x10 = lbind(rbind, contained)\n    x11 = compose(x9, x10)\n    x12 = lbind(compose, x2)\n    x13 = chain(x11, x12, x11)\n    x14 = lbind(compose, x4)\n    x15 = compose(x14, x13)\n    x16 = fork(x11, x15, x11)\n    x17 = compose(first, x16)\n    x18 = fork(9999, x17, x5)\n    x19 = compose(first, x5)\n    x20 = fork(recolor, x18, x19)\n    x21 = fork(remove, x20, x8)\n    x22 = fork(astuple, x21, x17)\n    x23 = fork(insert, x22, x83)\n    x24 = box(x23)\n    O = fill(I, x24, x24)\n    return O"], [1.0, "def solve_ea1a36f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_e763c4da(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, rbind, x6)\n    x8 = chain(merge, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [1.0, "def solve_f1a313bf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = rbind(colorcount, ZERO)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_b2e2b4c2(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = apply(d406, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = repeat(x6, ONE)\n    x8 = combine(x7, x4)\n    x9 = multiply(NEG_TWO, TEN)\n    x10 = interval(x9, x2, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = lbind(shift, x8)\n    x13 = mapply(x12, x11)\n    O = paint(x2, x13)\n    return O"], [1.0, "def solve_4275544e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = lbind(apply, maximum)\n    x6 = chain(x5, double, x4)\n    x7 = matcher(x6, EIGHT)\n    x8 = compose(flip, x7)\n    x9 = sfilter(I, x8)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = lbind(shift, x9)\n    x12 = chain(x10, x11, palette)\n    x13 = apply(x12, x9)\n    x14 = merge(x13)\n    x15 = mostcolor(x14)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = hconcat(I, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = argmax(x19, numcolors)\n    x21 = apply(ulcorner, x19)\n    x22 = normalize(x20)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x21)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_2937f851(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8fea3bcd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_58da7cea(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, TWO)\n    x6 = argmax(x4, x2)\n    x7 = neighbors(x6)\n    x8 = insert(x6, x7)\n    x9 = fill(x3, EIGHT, x8)\n    x10 = hmirror(x9)\n    x11 = replace(x10, EIGHT, ONE)\n    x12 = x2(x11)\n    x13 = merge(x12)\n    x14 = cover(x11, x13)\n    x15 = paint(x14, x12)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, EIGHT)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [1.0, "def solve_cc69ffc6(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c0e6387(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(O, x5)\n    return O"], [1.0, "def solve_b11ffdfa(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWOZERO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [1.0, "def solve_3cb67168(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_5b89bf48(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = leastcolor(I)\n    x5 = repeat(x4, ONE)\n    x6 = rbind(ofcolor, x4)\n    x7 = compose(x6, frontiers)\n    x8 = chain(size, x7, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = astuple(x19, x0)\n    x11 = canvas(x9, x10)\n    x12 = argmax(x11, x9)\n    x13 = subtract_normalize(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = difference(x14, x12)\n    x16 = rbind(multiply, x13)\n    x17 = apply(x16, x15)\n    x18 = rbind(interval, x12)\n    x19 = lbind(rbind, contained)\n    x20 = lbind(sfilter, x17)\n    x21 = compose(x19, x20)\n    x22 = lbind(compose, x21)\n    x23 = lbind(rbind, intersection)\n    x24 = compose(x22, x23)\n    x25 = lbind(rbind, shift)\n    x26 = lbind(apply, x25)\n    x27 = lbind(chain, x24)\n    x28 = x27(x41)\n    x29 = lbind(x28, x41)\n    x30 = rbind(x26, x8)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x21)\n    x33 = pair(x17, x12)\n    x34 = mapply(x32, x33)\n    O = paint(x11, x34)\n    return O"], [1.0, "def solve_00d75081(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = argmin(x1, uppermost)\n    x5 = argmax(x1, uppermost)\n    x6 = width(x3)\n    x7 = halve(x6)\n    x8 = height(x3)\n    x9 = height(x5)\n    x10 = interval(ZERO, x8, ONE)\n    x11 = lbind(multiply, x7)\n    x12 = rbind(divide, x7)\n    x13 = chain(x11, x12, last)\n    x14 = lbind(apply, last)\n    x15 = lbind(remove, x4)\n    x16 = lbind(astuple, x9)\n    x17 = chain(x14, x15, x16)\n    x18 = lbind(apply, first)\n    x19 = lbind(other, x9)\n    x20 = compose(x18, x19)\n    x21 = compose(x15, x20)\n    x22 = fork(combine, x17, x21)\n    x23 = compose(x12, matcher)\n    x24 = fork(combine, x23, x22)\n    x25 = fork(combine, x38, x12)\n    x26 = fork(combine, x26, x24)\n    x27 = fork(difference, x28, x22)\n    x28 = fork(mapply, x27, x27)\n    x29 = fork(difference, x28, last)\n    x30 = fork(recolor, first, x29)\n    x31 = mapply(x30, x5)\n    O = paint(x3, x31)\n    return O"], [1.0, "def solve_63e392f1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e24eeece(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_ef0ab38c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4f492ee7(I):\n    x1 = fgpartition(I)\n    x2 =matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_3cd09773(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_d9624359(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fb1ad7ac(I):\n    x1 = index(I, ORIGIN)\n    x2 = center(I)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x2, x4)\n    x6 = fill(I, FOUR, x5)\n    x7 = astuple(x3, ONE)\n    x8 = canvas(x1, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, DOWN)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = rbind(toobject, I)\n    x16 = lbind(compose, ZERO)\n    x17 = lbind(colorfilter, x15)\n    x18 = compose(x16, x17)\n    x19 = lbind(shift, x10)\n    x20 = rbind(multiply, x4)\n    x21 = chain(x19, x20, last)\n    x22 = mapply(x21, x14)\n    x23 = paint(x6, x22)\n    O = downscale(x23, THREE)\n    return O"], [1.0, "def solve_d9026414(I):\n    x1 = doublecolors(I)\n    x2 = decrement(x1)\n    x3 = compose(vfrontier, tojvec)\n    x4 = initset(ZERO)\n    x5 = lbind(rapply, x4)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(first, x6)\n    x8 = chain(x3, x7, x3)\n    x9 = matcher(x8, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fill(I, ZERO, x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x12, x14)\n    x16 = urcorner(x2)\n    x17 = lbind(shift, x16)\n    x18 = height(x12)\n    x19 = divide(x18, x19)\n    x20 = increment(x19)\n    x21 = width(x12)\n    x22 = divide(x21, x22)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x23)\n    x25 = apply(x24, x20)\n    x26 = mapply(x17, x25)\n    x27 = cover(x15, x26)\n    O = paint(x27, x200)\n    return O"], [1.0, "def solve_af609e9e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_343d91ee(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x8)\n    x4 = fork(either, vline, hline)\n    x5 = mfilter(x3, x4)\n    x6 = mostcolor(I)\n    x7 = shape(I)\n    x8 = canvas(x6, x7)\n    O = fill(x8, ONE, x5)\n    return O"], [1.0, "def solve_2b682033(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(non38, x1)\n    x3 = combine(x2, x2)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = tophalf(x4)\n    x7 = tophalf(x5)\n    x8 = bottomhalf(x4)\n    x9 = bottomhalf(x5)\n    x10 = astuple(x6, x7)\n    x11 = astuple(x8, x9)\n    x12 = combine(x10, x11)\n    x13 = rbind(adjacent, x12)\n    x14 = extract(x12, x13)\n    O = x14(x4)\n    return O"], [1.0, "def solve_ef5e29eb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_c0733203(I):\n    O = upscale(I, TWO)\n    return O"], [1.0, "def solve_846b1bdf(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_e7e994a3(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d2965672(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_7d1be212(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_181387ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, frontiers)\n    x7 = sfilter(x2, x6)\n    x8 = colorfilter(x4, ONE)\n    x9 = difference(x4, x8)\n    x10 = pair(x9, x8)\n    x11 = mapply( sfilter, x10)\n    x12 = leastcolor(x11)\n    x13 = shape(I)\n    x14 = canvas(x12, x13)\n    x15 = hconcat(I, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = rbind(colorcount, x12)\n    x18 = order(x16, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, x12)\n    x23 = combine(x21, x22)\n    x24 = intersection(x21, x22)\n    x25 = difference(x23, x24)\n    O = fill(x15, NINE, x25)\n    return O"], [1.0, "def solve_131b894f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_fbbb8b8e(I):\n    x1 = fill(I, FIVE, x2)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = index(I, x2)\n    x5 = lbind(shift, x2)\n    x6 = mapply(x5, x3)\n    O = fill(x1, x4, x6)\n    return O"], [1.0, "def solve_0bfc1c91(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x3)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x4)\n    x12 = ulcorner(x2)\n    x13 = lbind(subtract, x12)\n    x14 = rbind(shift, x12)\n    x15 = compose(x13, x14)\n    x16 = fork(hmirror, identity, x15)\n    x17 = mapply(x16, x11)\n    O = paint(x1, x17)\n    return O"], [1.0, "def solve_9579b0f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = palette(x8)\n    x10 = intersection(x9, x5)\n    x11 = first(x10)\n    x12 = shape(x5)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x3, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = first(x15)\n    x17 = compose(vdrop, vmirror)\n    x18 = rbind(hmatching, x17)\n    x19 = sfilter(x16, x18)\n    x20 = asindices(x19)\n    x21 = apply(x17, x20)\n    x22 = lbind(shift, x8)\n    x23 = mapply(x22, x21)\n    O = paint(x21, x23)\n    return O"], [1.0, "def solve_10cb4435(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_24164807(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_dc434a02(I):\n    x1 = ofcolor(I, THREE)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, THREE, ZERO)\n    x5 = replace(x4, EIGHT, ZERO)\n    x6 = compress(x5)\n    x7 = upscale(x6, THREE)\n    O = fill(x7, ZERO, x3)\n    return O"], [1.0, "def solve_cf1272d5(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = decrement(TWO)\n    x4 = toivec(x3)\n    x5 = crop(I, x4, THREE_BY_THREE)\n    x6 = asobject(x5)\n    x7 = decrement(x2)\n    x8 = astuple(x7, x8)\n    x9 = connect(x7, x8)\n    x10 = fill(I, SIX, x9)\n    x11 =object(x10, I)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = astuple(x11, x12)\n    x14 = lbind(multiply, x13)\n    x15 = apply(x14, x12)\n    x16 = lbind(shift, x11)\n    x17 = mapply(x16, x15)\n    O = fill(x10, FIVE, x17)\n    return O"], [1.0, "def solve_1e5255a3(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_114b60f6(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_8e9260a1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_311eb1f7(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_6b36777e(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(adjacent, x2)\n    x5 = mfilter(x3, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_b796a6f8(I):\n    x1 = switch(I, FOUR, ZERO)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = rbind(ofcolor, ZERO)\n    x7 = palette(x3)\n    x8 = palette(x10)\n    x9 = intersection(x7, x8)\n    x10 = fill(x5, ZERO, x9)\n    x11 = fill(x10, EIGHT, x4)\n    O = fill(x11, TWO, x5)\n    return O"], [1.0, "def solve_ba07786f(I):\n    x1 = matcher(first, THREE)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(ff28, x2)\n    x4 = fork(recolor, identity, x3)\n    x5 = mapply(x4, objects)\n    x6 = paint(I, x5)\n    x7 = replace(x6, EIGHT, ONE)\n    O = paint(x7, delta)\n    return O"], [1.0, "def solve_5ccb1afb(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(compose, x8)\n    x17 = chain(x16, x5, x6)\n    x18 = lbind(compose, x10)\n    x19 = chain(x18, x5, x6)\n    x20 = lbind(compose, x12)\n    x21 = chain(x20, x5, x6)\n    x22 = lbind(compose, x17)\n    x23 = chain(x21, x22, x6)\n    x24 = rbind(rapply, I)\n    x25 = chain(first, x24, initset)\n    x26 = fork(rapply, x25, x6)\n    x27 = compose(x25, x26)\n    x28 = mapply(x27, x2)\n    x29 = argmax(x28, x7)\n    O = x30(x29)\n    return O"], [1.0, "def solve_3405ecb8(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(astuple, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_a11fa586(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_ba39fe2b(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a6cbd52e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e79cbf7a(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [1.0, "def solve_b3617a6f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = mostcolor(x5)\n    x7 = leastcolor(I)\n    x8 = ofcolor(I, x7)\n    x9 = position(x5, x8)\n    x10 = shoot(x6, NEG_UNITY)\n    x11 = lrcorner(x8)\n    x12 = shoot(x11, UNITY)\n    x13 = fill(I, x1, x9)\n    O = fill(x13, x7, x12)\n    return O"], [1.0, "def solve_8ae96ca0(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_0a7a97ac(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, shape)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [1.0, "def solve_3fafaf9d(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f64281da(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_08aedea3(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = sfilter(x7, x4)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_0e42b48f(I):\n    x1 = Fgpartition(I)\n    x2 = objects(I, T, F, F)\n    x3 = order(x1, height)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = colorfilter(x2, x7)\n    x9 = power(outbox, TWO)\n    x10 = rbind(toobject, I)\n    x11 = mostcolor(I)\n    x12 = lbind(remove, x11)\n    x13 = chain(size, x12, palette)\n    x14 = chain(x13, x10, x9)\n    x15 = argmax(x8, x14)\n    x16 = ulcorner(x15)\n    x17 = shape(x15)\n    x18 = subtract(x16, x17)\n    x19 = decrement(x18)\n    x20 = multiply(x17, THREE)\n    x21 = add(x20, TWO_BY_TWO)\n    x22 = crop(I, x19, x21)\n    x23 = asobject(x22)\n    x24 = apply(ulcorner, x8)\n    x25 = increment(x17)\n    x26 = rbind(subtract, x25)\n    x27 = apply(x26, x24)\n    x28 = lbind(shift, x23)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_ea9e0567(I):\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = decrement(x4)\n    x6 = branch(x2, tojvec, lefthalf)\n    x7 = x6(I)\n    x8 = rbind(shoot, x5)\n    x9 = rbind(shoot, x7)\n    x10 = fork(combine, x8, x9)\n    x11 = x10(x7)\n    x12 = fill(x7, ZERO, x11)\n    x13 = ofcolor(x12, TWO)\n    x14 = subgrid(x13, x12)\n    x15 = x3(x14)\n    x16 = palette(x15)\n    x17 = contained(x16, x13)\n    x18 = height(x15)\n    x19 = trim(x15)\n    x20 = palette(x19)\n    x21 = contained(x20, x10)\n    x22 = height(x7)\n    x23 = divide(x22, x18)\n    x24 = increment(x23)\n    x25 = width(x7)\n    x26 = divide(x25, x19)\n    x27 = increment(x26)\n    x28 = repeat(x24, x27)\n    x29 = shift(x28, UNITY)\n    x30 = shift(x29, x24)\n    x31 = combine(x29, x30)\n    x32 = asindices(x29)\n    x33 = shape(x29)\n    x34 = outbox(x33)\n    x35 = remove(x34, x33)\n    x36 = lbind(adjacent, x32)\n    x37 = mfilter(x35, x36)\n    x38 = vmirror(x37)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    O = paint(x12, x40)\n    return O"], [1.0, "def solve_67c9f1ed(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e3c2207e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_9570d2b8(I):\n    x1 = shape(I)\n    x2 = connect(ORIGIN, x1)\n    x3 = height(I)\n    x4 = halve(x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = double(DOWN)\n    x12 = multiply(x11, x10)\n    x13 = subgrid(x12, I)\n    x14 = interval(ZERO, x2, ONE)\n    x15 = merge(x14)\n    x16 = double(x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(subtract, x56)\n    x20 = lbind(shift, x15)\n    x21 = mapply(x19, x20)\n    O = paint(x1, x21)\n    return O"], [1.0, "def solve_fdd6d693(I):\n    x1 = switch(I, FIVE, EIGHT)\n    x2 = switch(x1, FIVE, TWO)\n    x3 = objects(x2, T, F, T)\n    x4 = argmax(x3, size)\n    x5 = argmin(x3, size)\n    x6 = color(x4)\n    x7 = color(x5)\n    x8 = fill(x2, x6, x1)\n    O = fill(x8, x7, x4)\n    return O"], [1.0, "def solve_ee148566(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, shape)\n    x3 = compose(size, x1)\n    x4 = matcher(x3, TWO_BY_TWO)\n    x5 = dmirror(I)\n    x6 = papply(pair, x5, x1)\n    x7 = compose(size, dedupe)\n    x8 = matcher(x7, ONE)\n    x9 = dmirror(x8)\n    x10 = papply(pair, x9, x1)\n    x11 = compose(size, dedupe)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x4, x12)\n    x14 = fork(both, x7, x13)\n    x15 = fork(astuple, x14, x405)\n    x16 = argmax(x6, x15)\n    x17 = mostcolor(x16)\n    x18 = x16(I)\n    x19 = objects(x18, T, F, F)\n    x20 = colorfilter(x19, ZERO)\n    x21 = rbind(bordering, I)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x20, x22)\n    O = fill(x18, ONE, x23)\n    return O"], [1.0, "def solve_52cf2d5c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_60451d2d(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = first(x32)\n    x34 = shape(I)\n    x35 = halve(x34)\n    x36 = canvas(x11, x35)\n    O = fill(x36, x10, x33)\n    return O"], [1.0, "def solve_16d93893(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f421382c(I):\n    x1 = papply(d687, x2, x3)\n    x2 = compose(d07, numcolors)\n    x3 = fork(equality, x2, x3)\n    x4 = sfilter(x1, x3)\n    x5 = compose(flip, x4)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [1.0, "def solve_463c6181(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_237402ad(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(positive, size)\n    x3 = lbind(intersection, x2)\n    x4 = chain(positive, size, x3)\n    x5 = chain(x2, x4, dmirror)\n    x6 = objects(I, T, F, T)\n    x7 = merge(x6)\n    x8 = shift(x7, DOWN)\n    x9 = fill(I, ZERO, x8)\n    x10 = shift(x8, x5)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x2)\n    O = paint(x9, x12)\n    return O"], [1.0, "def solve_2b328405(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_88fc14a0(I):\n    x1 = frontiers(I)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = difference(x1, x2)\n    x5 = mapply(toindices, x4)\n    x6 = difference(x3, x5)\n    x7 = fill(I, NEG_ONE, x5)\n    x8 = fill(x7, NEG_ONE, x6)\n    x9 = lbind(fork, subtract)\n    x10 = lbind(x9, positive)\n    x11 = lbind(x10, size)\n    x12 = rbind(intersection, x2)\n    x13 = chain(x11, x12, toindices)\n    x14 = compose(size, x13)\n    x15 = compose(x10, size)\n    x16 = lbind(lbind, intersection)\n    x17 = compose(x16, x13)\n    x18 = lbind(extract, x5)\n    x19 = fork(compose, x17, x18)\n    x20 = lbind(sfilter, x6)\n    x21 = chain(merge, x20, x19)\n    x22 = lbind(fork, recolor)\n    x23 = lbind(x22, color)\n    x24 = rbind(mapply, x23)\n    x25 = lbind(chain, x24)\n    x26 = lbind(rbind, occurrences)\n    x27 = chain(x25, x26, toindices)\n    x28 = lbind(lbind, combine)\n    x29 = chain(x27, x28, x27)\n    x30 = lbind(mapply, x25)\n    x31 = chain(x29, x30, x27)\n    x32 = fork(ofcolor, x21, x13)\n    x33 = fork(recolor, x25, x31)\n    x34 = mapply(x33, x6)\n    O = paint(x16, x34)\n    return O"], [1.0, "def solve_63363095(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_63ad581b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = Feca(TWO)\n    x4 = connect(ORIGIN, x3)\n    x5 = positive(x2)\n    x6 = asindices(I)\n    x7 = UNITY(x6)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = rbind(shoot, DOWN)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x8)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_3f1d6f48(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_32bd0f64(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_482fbab2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_747e3a4d(I):\n    x1 = lbind(colorcount, I)\n    x2 = compose(maximum, x1)\n    x3 = apply(x2, I)\n    x4 = minimum(x3)\n    x5 = astuple(ONE, x4)\n    x6 = astuple(TWO, x4)\n    x7 = canvas(x2, x5)\n    x8 = initset(x7)\n    x9 = recolor(ZERO, x8)\n    O = upscale(x9, TWO)\n    return O"], [1.0, "def solve_e9b926ab(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x999 = mostcolor(x8)\n    x10 = matcher(first, x999)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_739291b5(I):\n    x1 = shape(I)\n    x2 = index(I, ORIGIN)\n    x3 = decrement(x1)\n    x4 = upscale(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = argmin(x5, size)\n    x7 = cover(I, x6)\n    x8 = normalize(x6)\n    x9 = paint(x7, x8)\n    x10 = objects(x9, F, F, T)\n    x11 = argmin(x10, size)\n    x12 = multiply(x11, LEFT)\n    x13 = add(x12, x11)\n    x14 = canvas(x2, x13)\n    x15 = normalize(x11)\n    x16 = lbind(remove, last)\n    x17 = rbind(s6666, x16)\n    x18 = compose(x17, center)\n    x19 = rbind( webpagepply, x13)\n    x20 = compose(x19, center)\n    x21 = fork(combine, x18, x20)\n    x22 = rbind(occurrences, x14)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(dmirror, x24, x21)\n    x26 = chain(cmirror, x25, x21)\n    x27 = fork(combine, x26, x25)\n    x28 = apply(x27, x10)\n    x29 = dmirror(x28)\n    x30 = apply(x27, x29)\n    x31 = x17(x30)\n    x32 = x16(x31)\n    x33 = x25(x32)\n    x34 = shift(x33, UNITY)\n    x35 = paint(x9, x34)\n    O = x30(x35)\n    return O"], [1.0, "def solve_ed6bc6a5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d83299b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolors(x14)\n    x25 = difference(x23, x24)\n    x26 = mapply(x22, x25)\n    O = fill(x14, x13, x26)\n    return O"], [1.0, "def solve_e468e763(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_5fdd3418(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f474d964(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_98c63976(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = vperiod(x6)\n    x8 =toivec(x7)\n    x9 = add(x8, NEG_ONE)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = apply(numcolors, x11)\n    x13 = matcher(equality, ONE)\n    x14 = partition(I)\n    x15 = sfilter(x14, x13)\n    x16 = difference(x14, x15)\n    x17 = merge(x16)\n    x18 = cover(I, x17)\n    x19 = lbind(compose, flip)\n    x20 = lbind(matcher, first)\n    x21 = chain(x19, x20, mostcolor)\n    x22 = fork(19, identity, x21)\n    x23 = lbind(compose, flip)\n    x24 = lbind(matcher, first)\n    x25 = chain(x23, x24, x22)\n    x26 = fork(argmin, x22, x25)\n    x27 = fork(00000000, x26, x20)\n    x28 = mapply(x27, x18)\n    O = paint(x18, x28)\n    return O"], [1.0, "def solve_d3463493(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_99b28621(I):\n    x1 = shape(I)\n    x2 = decrement(x1)\n    O = connect(ORIGIN, x2)\n    return O"], [1.0, "def solve_fa985f5f(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_0a471b0c(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(add, x3)\n    x21 = rbind(insert, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(insert, x22, x21)\n    x24 = size(x1)\n    x25 = positive(x24)\n    x26 = size(x26)\n    x27 = increment(x25)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(tojvec, x28)\n    x30 = apply(23, x29)\n    x31 = mpapply(shift, x30, x22)\n    x32 = mapply(toivec, x31)\n    x33 = shift(x23, x32)\n    x34 = canvas(x11, x33)\n    x35 = paint(x34, x3)\n    O = x9(x35)\n    return O"], [1.0, "def solve_226abe4d(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_9e50dc8b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_3362ae76(I):\n    x1 = leastalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O"], [1.0, "def solve_9cb17147(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = dneighbors(UNITY)\n    x3 = insert(UNITY, x2)\n    x4 = lrcorner(x3)\n    x5 = halve(x4)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = intersection(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [1.0, "def solve_bc02fed4(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db308579(I):\n    x1 = lbind(contained, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, x8)\n    x11 = paint(x8, x10)\n    x12 = repeat(x11, ONE)\n    x13 = asindices(x8)\n    x14 = center(x13)\n    x15 = invert(x14)\n    x16 = shift(x13, x15)\n    x17 = apply(x5, x16)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = product(x20, x20)\n    x22 = fork(compose, first, last)\n    x23 = apply(x22, x21)\n    x24 = product(x23, x23)\n    x25 = fork(compose, FIVE, flip)\n    x26 = apply(x25, x24)\n    x27 = mapply(box, x26)\n    O = fill(x8, x17, x27)\n    return O"], [1.0, "def solve_f5574119(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = compose(center, x3)\n    x5 = compose(dneighbors, x4)\n    x6 = fork(difference, x5, x4)\n    x7 = compose(first, x6)\n    x8 = chain(x4, x7, x8)\n    x9 = fork(recolor, x8, x4)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_5fab8a3f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d8afbcfe(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(color, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(F25, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, outbox, initset)\n    x13 = corners(x6)\n    x14 = mapply(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = inbox(x7)\n    x17 = sfilter(x16, x11)\n    x18 = combine(x15, x17)\n    x19 = fill(x5, ONE, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(matcher, normalize)\n    x23 = lbind(extract, x21)\n    x24 = chain(ulcorner, x23, x22)\n    x25 = compose(x24, toindices)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x5, x27)\n    return O"], [1.0, "def solve_b55466a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(difference, x2)\n    O = fill(I, ZERO, x3)\n    return O"], [1.1, "def solve_9bbba443(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, FOUR)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, FOUR)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = hperiod(x22)\n    x35 = hperiod(x26)\n    x36 = interval(x33, x34, ONE)\n    x37 = matcher(x35, x36)\n    x38 = astuple(x33, x37)\n    x39 = lbind(x astuple, x38)\n    x40 = lbind(compose, flip)\n    x41 = lbind(matcher, first)\n    x42 = chain(x39, x"], [1.1, "def solve_0b5463cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d963864a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x"], [1.1, "def solve_839a928e(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_f943f05d(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = vsplit(I, TWO)\n    x4 = hsplit(I, TWO)\n    x5 = astuple(x3, x4)\n    x6 = intersection(x5, x2)\n    x7 = argmax(x6, size)\n    x8 = matcher(x4, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(color, first)\n    x11 = fork(recolor, x10, x9)\n    x12 = rbind(sfilter, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(paint, identity, x13)\n    x15 = toindices(x9)\n    x16 = fgpartition(I)\n    x17 = merge(x16)\n    x18 = normalize(x17)\n    x19 = SEVEN(x18)\n    x20 = initset(x19)\n    x21 = insert(x7, x20)\n    x22 = product(x21, x19)\n    x23 = EIGHT(x22)\n    x24 = ofcolor(x23, x10)\n    x25 = inbox(x24)\n    x26 = difference(x25, x24)\n    x27 = fill(x23, x10, x26)\n    x28 = NEG_UNITY(x27)\n    x29 = initset(x28)\n    x30 = recolor(x24, x29)\n    x31 = fill(x27, x10, x30)\n    x32 = ofcolor(x31, x10)\n    x33 = ulcorner(x2)\n    x34 = shift(x32, x33)\n    x35 = lrcorner(x322)\n    x36 = shift(x34, x35)\n    x37 = fill(x31, x10, x36)\n    x38 = ofcolor(x37, x10)\n    x39 = sizefilter(x38, ONE)\n    x"], [1.1, "def solve_779f532a(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_54b92419(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_8d7b81ff(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = decrement(x17)\n    x19 = mapply(x16, x x18)\n    x20 = intersection(x4, x4)\n    x21 = combine(x16, x20)\n    x22 = fill(x3, ZERO, x21)\n    x23 = astuple(x18, x19)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = lbind(shift, x25)\n    x27 = height(x3)\n    x28 = decrement(x27)\n    x29 =mapply(x26, x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    x32 = asindices(x31)\n    x33 = lbind(shift, x32)\n    x34 = ofcolor(x33, ZERO)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = objects(x38, T, T, T)\n    x38 = insert(x37, x37)\n    x39 = add(x37, THREE)\n    x40 = asindices(x39)\n    "], [1.1, "def solve_0210594b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(lowermost, x1)\n    x3 = compose(rightmost, x1)\n    x4 = fork(equality, x2, x3)\n    x5 = compose(toivec, x4)\n    x6 = lbind(apply, initset)\n    x7 = compose(x6,666404)\n    x8 = fork(inter260, x5, x7)\n    x9 = compose(rot90, x8)\n    x10 = compose(rot180, x8)\n    x11 = compose(rot270, x8)\n    x12 = fork(equality, x9, x11)\n    x13 = fork(either, x10, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(14, x8)\n    x16 = fork(compose, x13, x15)\n    x17 = width(I)\n    x18 = height(I)\n    x19 =596(I)\n    x20 = decrement(x18)\n    x21 = lbind(astuple, x20)\n    x22 = chain(increment, x21, x16)\n    x23 = fork(greater, x26, x22)\n    x24 = compose(x23, x14)\n    x25 = sfilter(x19, x24)\n    x26 = lbind(apply, initset)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x24, x27)\n    x29 = fork(rapply, x28, x26)\n    x30 = compose(initset, x29)\n    x31 = fork(rapply, x30, x25)\n    x32 = compose(first, x31)\n    x33 = fork(remove, x32, last)\n    x34 = fork(astuple, x40, x33)\n    x35 = size(x1)\n    x36 = power(x34, x35)\n    x37 = astuple(x36, x333)\n    x38 = x34(I)\n"], [1.1, "def solve_3ff06587(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x66)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_d7837f2c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(bordering, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(color, x1)\n    x8 = totuple(x3)\n    x9 = apply(color, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, x1)\n    x12 = repeat(x10, ONE)\n    x13 = x11(x12)\n    x14 = x11(x4)\n    x15 = x11(x14)\n    x16 = x11(x13)\n    x17 = x11(x16)\n    x18 = apply(leftmost, x15)\n    x19 = leftmost(x18)\n    x20 = subtract(x19, x18)\n    x21 = double(x20)\n    x22 = astuple(THREE, x21)\n    x23 = repeat(x22, ONE)\n    x24 = merge(x23)\n    x25 = dmirror(x24)\n    x26 = astuple(x25, x24)\n    x27 = combine(x26, x23)\n    x28 = multiply(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = astuple(x26, x29)\n    x31 = dmirror(x30)\n    x32 = combine(x30, x31)\n    x33 = combine(x28, x32)\n    x34 = recolor(x25, x33)\n    x35 = mostcolor(I)\n    x36 = x35(x4)\n    x37 = paint(x16, x36)\n    x38 = paint(x37, x34)\n    x39 = height(x38)\n    x40 = width(x38)\n    x41 = astuple(x39, x40)\n    x42 = crop(x38, ORIGIN, x41)\n    x43 ="], [1.1, "def solve_cb8a8a34(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(raindices, x24)\n    x26 = chain(x20, x25, last)\n    x27 = fork(compose, x26, x22)\n    x28 = chain(x16, x27, x6)\n    x29 = rbind(contained, x5)\n    x30 = chain(x29, first, last)\n    x31 = compose(x27, x30)\n    x32 = chain(x16, x27, x6)\n    x33 = fork(contained(x32, x31)\n    x34 = fork(1997, x33, x28)\n    x35 = fork(59eb, x24, x28)\n"], [1.1, "def solve_0275d5bf(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x29, last)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine,"], [1.1, "def solve_653cf0fd(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0aaf94f3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_91125bee(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_bb312312(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = chain(x1, positive, dmirror)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = initset(x9)\n    x13 = insert(x11, x12)\n    x14 = backdrop(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = dmirror(x20)\n    x22 = ofcolor(x20, x11)\n    x23 = compose(palette, last)\n    x24 = rbind(remove, x23)\n    x25 = chain(x24, remove, first)\n    x26 = ofcolor(x20, x26)\n    x27 = rightmost(x26)\n    x28 = leftmost(x26)\n    x29 = ofcolor(x20, x13)\n    x30 = leftmost(x29)\n    x31 = greater(x27, x30)\n    x32 = ofcolor(x20, x15)\n    x33 = leftmost(x31)\n    x34 = rightmost(x31)\n    x35 = astuple(x32, x34)\n    x36 = astuple(x32, x35)\n    x37 = greater(x33, x36)\n    x38 = rightmost(x33)\n    x39 = leftmost(x33)\n    x40 = subtract(x38, x39)\n    x41 = astuple(x37"], [1.1, "def solve_51e10f6a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(first, x34)\n    x38 = portrait(x37)\n    x39 = branch(x38, x35, x34)\n    x40 = branch(x38, x35, x34)\n    x"], [1.1, "def solve_88f1239a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2136be83(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x04, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_1e260436(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = matcher(identity, ZERO)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmax(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = fork(4000,0100, vmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, ONE)\n    x11 = fork(both, x7, x10)\n    x12 =11(I)\n    x13 =\n    x14 = extract(x12, x11)\n    x15 = first(x13)\n    x16 = last(x13)\n    x17 = palette(x15)\n    x18 = equality(x17, x12)\n    x19 =457(x15)\n    x20 = repeat(x16, x19)\n    x21 =057(x20, UNITY)\n    x22 =457(x21)\n    x23 = asindices(x22)\n    x24 = ofcolor(x12, ZERO)\n    x25 = ofcolor(x12, x16)\n    x26 = intersection(x24, x25)\n    x27 = outbox(x13)\n    x28 = difference(x27, x26)\n    x29 = subgrid(x28, x12)\n    x30 = intersection(x23, x26)\n    x31 = outbox(x30)\n    x32 = frontiers(x31)\n    x33 = mapply(toindices, x32)\n    x34 = difference(x33, x30)\n    x35 = toobject(x34, x69)\n    x36 = objects(x12, T, F, T)\n    x37 = rbind(colorcount, x12)\n    x38 = argmax(x36, x37)\n    x39 = rbind(colorcount, x12)\n    x40 = apply(x19, x2)\n    x41 = remove(x38, x40"], [1.1, "def solve_36c0f792(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_8bdb17e6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_093a9904(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_48ebe9ca(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = center(x5)\n    x7 = rbind(shoot, x6)\n    x8 = center(x2)\n    x9 = rbind(shoot, x8)\n    x10 = center(x5)\n    x11 = rbind(shoot, x10)\n    x12 = decrement(x1)\n    x13 = tojvec(x12)\n    x14 = rbind(shoot, x13)\n    x15 = decrement(x2)\n    x16 = astuple(x12, x15)\n    x17 = double(x16)\n    x18 = shoot(x11, x17)\n    x19 = shoot(x6, x18)\n    x20 = combine(x17, x19)\n    x21 = center(x2)\n    x22 = invert(x21)\n    x23 = power(x22, TWO)\n    x24 = asindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = lbind(multiply, x25)\n    x27 = apply(x26, x3)\n    x28 = mapply(x27, x27)\n    x29 = mapply(x28, x25)\n    x30 = paint(I, x29)\n    x31 = objects(x30, F, T, T)\n    x32 = argmax(x31, numcolors)\n    x33 = subgrid(x32, x30)\n    x34 = interval(ONE, SIX, ONE)\n    x35 = lbind(power, rot90)\n    x36 = lbind(power, outbox)\n    x37 = chain(x35, x36, x000)\n    x38 = apply(x37, x34)\n    x39 = lbind(dedupe, x38)\n    x40 = lbind(chain, x39)\n"], [1.1, "def solve_d964881b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(toobject, x1)\n    x5 = matcher(x4, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = ofcolor(I, ONE)\n    x9 = rbind(contained, x8)\n    x10 = lbind(rbind,adjacent)\n    x11 = compose(x10, initset)\n    x12 = chain(x11, x9, last)\n    x13 = sfilter(x5, x12)\n    x14 = fill(I, ZERO, x13)\n    x15 = ZERO(x5)\n    x16 = gravitate(x15, x14)\n    x17 = replace(x16, ONE, x15)\n    x18 = trim(x17)\n    x19 = x15(x18)\n    x20 = x12(x19)\n    x21 = apply(first, x20)\n    x22 = asobject(x21)\n    x23 = apply(first, x22)\n    x24 =mapply(dneighbors, x23)\n    x25 = mapply(toobject, x24)\n    x26 = cultural verb25(x25)\n    x27 = mostcolor(I)\n    x28 = ofcolor(x25, x27)\n    x29 = asindices(x28)\n    x30 = box(x29)\n    x31 = difference(x30, x28)\n    x32 = toobject(x31, x25)\n    x33 = apply(position, x32)\n    x34 = shift(x30, x33)\n    x35 = ofcolor(x26, x27)\n    x36 = recolor(x27, x34)\n    x37 = shift(x45, x36)\n    x38 = ofcolor(x28, x27)\n    x39 = mapply(toindices, x38)\n    x40"], [1.1, "def solve_55c9016a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =799(I)\n    x2 = Fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, portrait, x8)\n    x10 = branch(x00000, identity, rot90)\n    x11 = fork(even, branch, rot180)\n    x12 = compose(flip, x11)\n    x13 = rbind(sfilter, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x13)\n    x16 = chain(first, x14, x15)\n    x17 = rbind(branch, I)\n    x18 = rbind(x17, x16)\n    x19 = chain(initset, x18, x16)\n    x20 = fork(rapply, x19, x16)\n    x21 = compose(initset, x12)\n    x22 = fork(rapply, x21, x16)\n    x23 = compose(initset, x12)\n    x24 = fork(rapply, x23, x16)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, TWO)\n    x27 = x26(x22)\n    x28 = first(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, UNITY)\n    x31 = branch(x29, x30, x22)\n    x32 = initset(x15)\n    x33 = NEG_ONE(x32)\n    x34 = shift(x33, x33)\n    x35 = branch(x33, x24, x28)\n    x36 = interval(x35, ONE, x153)\n    x37 = pair(x36, x34)\n    x38 = fork(multiply,"], [1.1, "def solve_5e4fa839(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = positive(x1)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(comb"], [1.1, "def solve_206a4c7d(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(x1, first)\n    x3 = rbind(compose, last)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(center, first)\n    x8 = compose(center, last)\n    x9 = fork(subtract, x7, x8)\n    x10 = fork(multiply, x7, x5)\n    x11 = fork(add, x8, x10)\n    x12 = compose(halve, x11)\n    x13 = fork( interval, tojvec, x12)\n    x14 = compose(x13, x7)\n    x15 = fork(multiply, x5, THREE)\n    x16 = fork(add, x14, x15)\n    x17 = fork( tojvec, x12, x16)\n    x18 = fork(apply, x17, x14)\n    x19 = fork(apply, x18, x16)\n    x20 =     dimensional_trial)\n    x21 = lbind(ofcolor, I)\n    x22 = palette(I)\n    x23 = compose(x21, x22)\n    x24 = argmax(x22, x23)\n    x25 = fork(subtract, label, x24)\n    x26 = decrement(x25)\n    x27 = toivec(x26)\n    x28 = shoot(x27, UNITY)\n    x29 = fgpartition(I)\n    x30 = merge(x29)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, leftmost)\n    x33 = fork(subtract, rbind, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x28)\n    x36 = fill(I, x24, x35)\n    x37 = fill(x36, x24, x1)\n    x38 = fill("], [1.1, "def solve_427d4a8b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 =ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_60af70bc(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x33 = sfilter(x38, x33)\n    x34 = apply(first, x33"], [1.1, "def solve_c92c4acd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = repeat(x24, ONE)\n    x26 = combine(x3, x25)\n    x27 = paint(x16, x26)\n    x28 = astuple(vmirror, hmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = canvas(x8, x28)\n    x31 = asindices(x30)\n    x32 = combine(x29, x31)\n    x33 = subtract(NINE, x32)\n    x34 = astuple(VEN, x33)\n    x35 = astuple(cmirror, dmirror)\n    x36 = astuple(hmirror, vmirror)\n    x37 = combine(x35, x36)\n    x38 = astuple(x334, x000000)\n    x39 = astuple(x380, cmirror)\n    x40 = combine(x38, x39)\n    x41 = fill(x37"], [1.1, "def solve_9b0f28c5(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivecfac9412)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_28d3e048(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_69236ba2(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_dda02bbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_969594f8(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x61, TWO)\n    x37 = lbind(colorcount, x23)\n    x38 = argmax(x36, x37)\n    x39 = ofcolor(x23, x28)\n    "], [1.1, "def solve_b5d0cad0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = initset(ORIGIN)\n    x2 = difference(x1, x1)\n    x3 = power(first, TWO)\n    x4 = first(x2)\n    x5 = lbind(c8f9)\n    x6 = lbind(eb281, x4)\n    x7 = lbind(lbind, shift)\n    x8 = compose(x5, x7)\n    x9 = lbind(rbind, shift)\n    x10 = compose(x9, x8)\n    x11 = fork(compose, x7, x10)\n    x12 = lbind( solve, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, identity, x13)\n    x15 = fork(difference, identity, x14)\n    x16 = lbind(rbind, intersection)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x15)\n    x19 = fork(lbind, x17, x18)\n    x20 = compose(x17, x19)\n    x21 = fork(rot90, x20, x19)\n    x22 = power(x21, FOUR)\n    x23 = x22(I)\n    x24 = fork(rot180, x22, x19)\n    x25 = power(x24, FOUR)\n    x26 = x25(x23)\n    x27 = x25(x22)\n    x28 = fork(rot180, x26, x27)\n    x29 = fork(mapply, x28, x26)\n    x30 = compose(x29, x21)\n    x31 = fork(paint, identity, x30)\n    x32 = x31(x9)\n    x33 = objects(x32, T, F, F)\n    x34 = colorfilter(x33, TWO)\n    x35 = first(x34)\n    x36 = lbind(adjacent, x35)\n    x37 =x36(x36)\n    x38 = fgpartition(x32)\n    x39 = merge("], [1.1, "def solve_7d467376(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_c8269178(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = ONE(I)\n    x2 = increment(TWO)\n    x3 = increment(x2)\n    x4 = astuple(x3, x3)\n    x5 = astuple(THREE, ORIGIN)\n    x6 = astuple(THREE, ZERO_BY_TWO)\n    x7 = crop(x5, ORIGIN, x6)\n    x8 = crop(x3, ZERO_BY_TWO)\n    x9 = Zconcat(x7, x8)\n    x10 = hconcat(x9, x7)\n    x11 = hconcat(x10, x8)\n    x12 = vconcat(x11, x11)\n    x13 = vconcat(x12, x12)\n    x14 = hconcat(x13, x11)\n    x15 = hconcat(x14, x10)\n    x16 = vconcat(x15, x11)\n    x17 = vconcat(x16, x10)\n    x18 = cellwise(x17, x9,x1)\n    x19 = asobject(x18)\n    x20 = mostcolor(I)\n    x21 = matcher(first, x20)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x19, x22)\n    x24 = apply(initset, x23)\n    x25 = sfilter(x24, x4)\n    x26 = frontiers(I)\n    x27 = sfilter(x26, x22)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, identity, dmirror)\n    x31 = x30(I)\n    x32 = lefthalf(x31)\n    x33 = righthalf(x31)\n    x34 = vmirror(x33)\n    x35 = vmirror(x34)\n    x36 = shape(x35)\n    x37 = multiply(x36, x36)\n    x38 = add(x37, ZERO)\n    x39 = canvas(x"], [1.1, "def solve_f41f0c20(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(add, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a39a19c6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_533b4fa0(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(vfrontier, x5)\n    x7 = mapply(hfrontier, x5)\n    x8 = uppermost(x7)\n    x9 = leftmost(x7)\n    x10 = greater(x8, x9)\n    x11 = uppermost(x7)\n    x12 = greater(x8, x11)\n    x13 = either(x10, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(I)\n    x16 = center(x15)\n    x17 = hfrontier(x16)\n    x18 = add(x16, x17)\n    x19 = shift(x18, x16)\n    x20 = x14(x19)\n    x21 = palette(x20)\n    x22 = remove(ZERO, x21)\n    x23 = other(x22, x12)\n    x24 = ofcolor(x20, x23)\n    x25 = mapply(neighbors, x24)\n    x26 = difference(x25, x24)\n    x27 = toobject(x26, x50)\n    x28 = add(x25, x27)\n    x29 = shift(x28, x27)\n    x30 = fill(x5, x23, x29)\n    x31 =bordering(x30)\n    x32 =3333(x31, x30)\n    x33 = fork(both, x24, x32)\n    x34 = extract(x28, x33)\n    x35 = other(x28, x34)\n    x36 = ofcolor(x20, x23)\n    x37 = initset(x36)\n    x38 = shift(x37, UNITY)\n    x39 = fill(x30, x23, x38)\n    x40 = shift"], [1.1, "def solve_4a4f5673(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_40ba5af8(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1dad6357(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x31 = shape(I)\n    x32 = decrement(x31)\n    x33 = initset(x32)\n    x34 = insert(x19, x33)\n    x35 = astuple(x21, x26)\n    x36 = astuple(x31, x35)\n    x37 = combine(x35, x36)\n    x38 = lefthalf(I)\n    x39 = righthalf(I)\n    x40 = bottomhalf(x39)\n    x41 = mostcolor(x38)\n    "], [1.1, "def solve_a4429cb9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8a69493a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(4258, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(4 fgpartition, x17)\n    x23 = merge(x22)\n    x24 =0000000(x23)\n    x25 = matcher(first, x10)\n    x26 = compose(flip, x25)\n    x27 = asindices(x16)\n    x28 = delta(x27)\n    x29 = lbind(fork, manhattan)\n    x30 = lbind(x29, identity)\n    x31 = lbind(compose, initset)\n    x32 = lbind(rbind, manhattan)\n    x33 = compose(x31, x32)\n    x34 = lbind(lbind, greater)\n    x35 = chain(x34, x33, x25)\n    x36 = compose(x36, x25)\n    x37 = fork(contained, x36, x40)\n    x38 = compose(x37, x27)\n    x39 = lbind(lbind,ANGEmatch)\n    x40 = chain(x39, x33, x33)\n    x41 = fork("], [1.1, "def solve_7540585f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract,x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_5835846c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 =TWO(x28)\n    x40 = x19(x39)\n    x41 = x16(x40)\n"], [1.1, "def solve_9af4a8be(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, size)\n"], [1.1, "def solve_eb021fbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_5828824f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_2202c643(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_871653b5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d2b59785(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = dmirror(x23)\n    x25 = asobject(x24)\n    x26 = shape(x12)\n    x27 = shift(x25, x26)\n    x28 = ofcolor(x13, x6)\n    x29 = paint(x13, x28)\n    x30 = ofcolor(x29, x4)\n    x31 = initset(x40)\n    x32 = insert(x15, x31)\n    x33 = insert(x16, x32)\n    x34 = insert(x19, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x31, x36)\n    x38 = ofcolor(x13, x6)\n    x39 = height(x38)\n    x40 = insert(x39, x38)\n    x41 = destructive height(x40)\n    x42 = width(x38)"], [1.1, "def solve_909253d8(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8cc2a21b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x40, x22)\n    x36 = x35(x10)\n    x37 = x35(xI)\n    x38 = x35(x74"], [1.1, "def solve_311a245d(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d95cba31(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_de116543(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x24)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x24)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x24)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x24)"], [1.1, "def solve_d195e4c1(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(x5, x5)\n    x7 = fill(x6, FIVE, x3)\n    x8 = objects(x7, F, F, T)\n    x9 = argmax(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = remove(x9, x8)\n    x12 = toindices(x10)\n    x13 = lbind(intersection, x12)\n    x14 = chain(x13, dneighbors, last)\n    x15 = rbind(greater, x10)\n    x16 = chain(x15, dedupe, last)\n    x17 = fork(greater, x14, x16)\n    x18 = compose(x15, first)\n    x19 = chain(size, dedupe, x18)\n    x20 = size(x11)\n    x21 = equality(x19, x20)\n    x22 = branch(x21, uintcorner, vmirror)\n    x23 = x22(x10)\n    x24 = objects(x7, T, F, T)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, x7)\n    x27 = asobject(x26)\n    x28 = matcher(first, ZERO)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x25, x29)\n    x31 = lefthalf(x30)\n    x32 = righthalf(x30)\n    x33 = palette(x31)\n    x34 = lbind(intersection, x33)\n    x35 = chain(size, x34, toindices)\n    x36 = sfilter(x32, x35)\n    x37 = rbind(shift, x31)\n    x38 = lbind(occurrences, x779)\n    x"], [1.1, "def solve_b67cec33(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_706cc69b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_52297eaa(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_39bb83e5(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =6666(I)\n    x2 =6666(I)\n    x3 = index(x1, ORIGIN)\n    x4 = decrement(x1)\n    x5 = positive(x3)\n    x6 = branch(x5, x4, x1)\n    x7 = crop(x1, ORIGIN, THREE_BY_THREE)\n    x8 = asobject(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fork(both, x lefthalf, tophalf)\n    x13 = sfilter(x11, x12)\n    x14 = compose(dmirror, vmirror)\n    x15 = argmin(x13, x14)\n    x16 = width(x11)\n    x17 =66(ONE, x16)\n    x18 = tojvec(x17)\n    x19 = index(x11, x18)\n    x20 = uppermost(x11)\n    x21 = matcher(first, x20)\n    x22 =sfilter(x11, x21)\n    x23 = leftmost(x11)\n    x24 = matcher(first, x23)\n    x25 = sfilter(x11, x24)\n    x26 = width(x11)\n    x27 = invert(x26)\n    x28 = tojvec(x27)\n    x29 = index(x11, x28)\n    x30 = astuple(x24, x22)\n    x31 = initset(x30)\n    x32 = cover(x11, x31)\n    x33 =sfilter(x3, x32)\n    x34 = height(x11)\n    x35 = astuple(x24, x22)\n    x36 = astuple(x31, x35)\n    x37 = subtract(x36, x30)\n    x38 = crop(x37,Example output:\n    00006\n    00020\n    00003\n    00002\n    0020\n    \"\"\"\n    x1"], [1.1, "def solve_3b663fe0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = lowermost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_b5c657cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shift(x23, x26)\n    x28 = toindices(x27)\n    x29 = lbind(add, DOWN)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x29, x28)\n    x32 = rbind(shoot, RIGHT)\n    x33 = mapply(x32, x28)\n    x34 = lowermost(x23)\n    x35 = invert(x34)\n    x36 = manhattan(x35, x32)\n    x37 = rightmost(x23)\n    x38 = decrement(x37)\n    x39 = matcher(x38, x34)\n"], [1.1, "def solve_122be82e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_f5f5c7a5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = astuple(x15, x18)\n    x26 = portrait(x24)\n    x27 = branch(x26, identity, cmirror)\n    x28 = x27(x3)\n    x29 = dmirror(x28)\n    x30 = branch(x24, identity, height)\n    x31 = x30(xmirror)\n    x32 = decrement(x31)\n    x33 = rbind(toobject, x35)\n    x34 = rbind(colorcount, ZERO)\n    x35 = chain(x33, x34, x31)\n    x36 = matcher(x35, x32)\n    x37 = sfilter(x4, x36)\n    x38 = compose(color, x37)\n    x39 = multiply(x84, LEFT)\n    x40 = rbind(greater"], [1.1, "def solve_4e5017db(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multcorner, x12)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_f13645d1(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =Example output:\n    6661\n    564\n    5499\n    1346\n    1469\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, identity, shape)\n    x4 = x3(I)\n    x5 = maximum(x3)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = x3(I)\n    x9 = height(I)\n    x10 = decrement(x9)\n    x11 = multiply(x10, x5)\n    x12 = crop(I, ORIGIN, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = hmirror(x15)\n    x17 = vmirror(x12)\n    x18 = combine(x13, x16)\n    x19 = product(x18, x18)\n    x20 = argmax(x19, size)\n    x21 = apply(color, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x13, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x14, x23)\n    x27 = uppermost(x24)\n    x28 = greater(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = last(x28)\n    x31 = remove(x30, x8)\n    x32 =Lo repeat(x31, ONE)\n    x33 = first(x32)\n    x34 = branch(x22, x33, x25)\n    x35 = branch(x26, x28, x30)\n    x36 = branch(x29, x32, x35)\n    x37 = apply(normalize, x31)\n    x38 = astuple(x31, x37)\n    x39 = remove(x38, x31)\n    x40 = apply(ulcorner, x39)\n    x41 = rbind("], [1.1, "def solve_264e2f5e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_d560feb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b4eb549b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(TEN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x11, x18)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = height(x21)\n    x24 = decrement(x23)\n    x25 = lbind(astuple, x24)\n    x26 = lbind(shift, x21)\n    x27 =compose(x25, x26)\n    x28 = apply(x27, x3)\n    x29 =389(x28)\n    x30 = argmax(x80, x29)\n    x31 = matcher(first, x3)\n    x32 =sfilter(x30, x31)\n    x33 = apply(dneighbors, x32)\n    x34 = lbind(shift, x32)\n    x35 = mapply(x34, x33)\n    x36 = double(x24)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x34)\n    x39 = lbind(shift, x32)\n    x40 = mapply(x39, x38)\n    x41 = cover(I,"], [1.1, "def solve_bd33027e(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_fc39db2b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = intersection(x1, x5)\n    x7 = lbind(colorcount, x4)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, color)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, x4)\n    x14 = argmax(xofcolor, x13)\n    x15 = ofcolor(x14, x8)\n    x16 = apply(initset, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, x12, x15)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x16)\n    x22 = objects(x4, T, F, F)\n    x23 = colorfilter(x22, x8)\n    x24 = rbind(manhattan, xcorIGIN)\n    x25 = chain(first, x24, last)\n    x26 = sfilter(x23, x25)\n    x27 = compose(rightmost, x25)\n    x28 = compose(minimum, x25)\n    x29 = fork(subtract, x28, x27)\n    x30 = fork(add, x29, x21)\n    x31 = rbind(contained, x15)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(asindices, x33, x20)\n    x35 = fork(difference, x29, x34)\n    x36 = fork(add, x34, x35)\n    x37 = fork(connect, x30, x36)\n    x38 = rbind(mapply,"], [1.1, "def solve_3a8a8763(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(vsplit, height, width)\n    x7 = x6(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = palette(x7)\n    x11 = remove(x9, x10)\n    x12 = other(x11, x1)\n    x13 = combine(x12, x7)\n    x14 = shape(x13)\n    x15 = canvas(x1, x14)\n    x16 = hconcat(x15, x13)\n    x17 = objects(x16, T, F, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, ORIGIN)\n    x20 = argmin(x18, x19)\n    x21 = remove(x20, x18)\n    x22 = TEN(flow)\n    x23 = input:\n    x22, x21)\n    x24 = argmin(x22, x23)\n    x25 =909(x24, DOWN)\n    x26 = uppermost(x25)\n    x27 = rightmost(x24)\n    x28 = astuple(x26, x27)\n    x29 = leftmost(x24)\n    x30 = leftmost(x27)\n    x31 = astuple(x29, x30)\n    x32 = add(x28, x31)\n    x33 = initset(x32)\n    x34 = ofcolor(x33, x12)\n    x35 = sizefilter(x34, ONE)\n    x36 = lbind(vmatching, x34)\n    x37 = fork(either, x35, x36)\n    x38 = rbind(gravitate, x34)\n    x39 = compose(x38, initset)\n    x40 = fork(add,"], [1.1, "def solve_1903dfb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_183c8c42(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_bfdb8162(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = tophalf(x3)\n    x5 = lefthalf(x4)\n    x6 = tophalf(x2)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(x2)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = righthalf(x9)\n    x12 = index(x4, ORIGIN)\n    x13 = width(x12)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = index(x3, x15)\n    x17 = height(x6)\n    x18 = decrement(x17)\n    x19 = toivec(x18)\n    x20 = index(x3, x19)\n    x21 = shape(x7)\n    x22 = decrement(x21)\n    x23 = index(x3, x22)\n    x24 = compress(x4)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = fill(x28, x30, x26)\n    x30 = ofcolor(x29, x27)\n    x31 = ulcorner(x30)\n    x32 = index(x3, x31)\n    x33 = lrcorner(x30)\n    x34 = add(x33, UNITY)\n    x35 = initset(x34)\n    x36 = cover(x29, x35)\n    x37 = ofcolor(x36, x27)\n    x38 = urcorner(x37)\n    x39 = add(x38, ulcorner)\n    x50 =676(x39)\n    x51 = initset(x50)\n    x52 = fill(x36, x27, x51)\n    O"], [1.1, "def solve_799c7858(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(rot90, x6, x23)\n    x25 = power(x24, TWO)\n    x26 = x25(I)\n    x27 = palette(x26)\n    x28 = lbind(ofcolor, x26)\n    x29 = compose(leftmost, x28)\n    x30 = matcher(x29, ZERO)\n    x31 = palette(x26)\n    x32 = rightmost(x26)\n    x33 = matcher(x32, ZERO)\n    x34 = fork(either, x30, x33)\n    x35 = palette(x26)\n    x36 = rightmost(x26)\n    x37 = matcher(x36, ZERO)\n    x38 = fork(either, x35, x37)"], [1.1, "def solve_e2056b27(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =6666(I)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = double(x2)\n    x7 = canvas(x5, x6)\n    x8 = paint(x7, x2)\n    x9 = shape(I)\n    x10 = decrement(x9)\n    x11 = index(I, x10)\n    x12 = divide(x33, x11)\n    x13 = astuple(x10, x12)\n    x14 = canvas(x11, x13)\n    x15 = paint(x14, x2)\n    x16 = width(I)\n    x17 = ulcorner(x2)\n    x18 = width(I)\n    x19 =678(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = canvas(x11, x20)\n    x22 = hconcat(I, x21)\n    x23 = hsplit(x22, TWO)\n    x24 = merge(x23)\n    x25 = last(x23)\n    x26 = vmirror(x25)\n    x27 = vconcat(x22, x26)\n    O = vconcat(x27, x24)\n    return O"], [1.1, "def solve_dbedb1fd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x11, x20)\n    x22 = other(x21, x15)\n    x23 =6 ofcolor(I, x22)\n    x24 = mapply(neighbors, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x19)\n    x28 =4612f35(x23)\n    x29 = ofcolor(I, x27)\n    x30 = sfilter(x29, x28)\n    x31 = subgrid(x30, I)\n    x32 = ofcolor(x31, x19)\n    x33 = mapply(neighbors, x32)\n    x34 = toobject(x33, x31)\n    x35 = objects(x39, T, F, F)\n    x36 = sizefilter(x35, ONE)\n    x37 = merge(x36)\n    O = subgrid(x37, x31)\n    return O"], [1.1, "def solve_15fde576(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =201(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.1, "def solve_c855f467(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = mostcolor(I)\n    x8 = ofcolor(x6, x7)\n    x9 = leastcolor(x6)\n    x10 = ofcolor(x1, x9)\n    x11 = combine(x8, x10)\n    x12 = intersection(x8, x10)\n    x13 = difference(x11, x12)\n    O = fill(x6, fill(x6, x11)\n    return O"], [1.1, "def solve_04b9b4ef(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = astuple(TWO, ONE)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, asindices)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, x5)\n    x12 = chain(x8, x6, x5)\n    x13 = compose(x9, x6)\n    x14 = fork(mapply, x11, x12)\n    x15 = fork(mapply, x11, x13)\n    x16 = fork(lastuple, x14, x15)\n    x17 = repeat(x16, TWO)\n    x18 = mapply(x16, x2)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = paint(I, x20)\n    x22 = shift(x20, UNITY)\n    x23 = paint(x21, x22)\n    x24 =571(x28)\n    x25 = ulcorner(x24)\n    x26 = subgrid(x24, x25)\n    x27 = compose(toindices, normalize)\n    x28 = matcher(x27, x18)\n    x29 = normalize(x24)\n    x30 = sfilter(x29, x28)\n    x31 = difference(x29, x30)\n    O = fill(x23, ZERO, x31)\n    return O"], [1.1, "def solve_be0faf5b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = rbind(Sfilter, TWO)\n    x2 = apply(x1, I)\n    x3 = contained(TWO, x2)\n    x4 = branch(x3, height, width)\n    x5 = x4(I)\n    x6 = partition(I)\n    x7 = palette(x6)\n    x8 = matcher(identity, x5)\n    x9 = argmin(x7, x8)\n    x10 = color(x9)\n    x11 =92(85, toindices)\n    x12 = apply(x11, x10)\n    x13 = TIREE(x12)\n    x14 = branch(x13, hmirror, vmirror)\n    x15 = x14(x6)\n    x16 = x13(x15)\n    x17 = shape(x6)\n    x18 = canvas(x10, x17)\n    x19 = TWO_BY_TWO)\n    x20 = paint(x18, x19)\n    x21 = rbind(tocount, SIX)\n    x22 = apply(x21, x2)\n    x23 = normalize(x22)\n    x24 = color(x23)\n    x25 = remove(x23, x26)\n    x26 = other(x25, x24)\n    x27 = ofcolor(x26, x24)\n    x28 = last(x27)\n    x29 = ofcolor(x25, x24)\n    x30 = rbind(intersection, x28)\n    x31 = mapply(x30, x29)\n    O = fill(x23, x47, x31)\n    return O"], [1.1, "def solve_3331e564(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = UNITY(I)\n    x2 =31(x1)\n    x3 = decrement(x2)\n    x4 = tojvec(x3)\n    x5 = shoot(x4, UP_RIGHT)\n    x6 = shift(x5, UNITY)\n    O = fill(I, THREE, x6)\n    return O"], [1.1, "def solve_fb9e858f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersectionx15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.1, "def solve_f1f6b9c7(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = input:\n    8888888989\n    8888888989\n    8888888989\n    5555585555\n    4555555555\n    4555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [1.1, "def solve_35608ece(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, numcolors)\n    x4 = difference(x3, x2)\n    x5 = apply(initset, x4)\n    x6 = rbind(404a4755\n    b27 upper3846\n    11111151\n    429511529\n    uple ofcolor(I, x1)\n    x1 = prapply(connect, x5, x6)\n    x2 = compose(72,175)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, x1, x3)\n    x5 = fork(recolor, color, x6)\n    x6 = mapply(x5, x4)\n    O = paint(x4, x6)\n    return O"], [1.1, "def solve_61b4d629(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = rbind(subgrid, x6)\n    x8 = apply(x7, x2)\n    x9 = rot90(x8)\n    x10 = fgpartition(x9)\n    x11 = merge(x10)\n    x12 = solve(x11, x9)\n    x13 = index(x12, ORIGIN)\n    x14 = subgrid(x12, x9)\n    x15 = apply(x7, x12)\n    x16 = rot90(x15)\n    x17 =fgpartition(x16)\n    x18 = merge(x17)\n    x19 =644(x18)\n    x20 = palette(x19)\n    x21 = other(x20, ZERO)\n    x22 = objects(x6, T, F, T)\n    x23 = colorfilter(x22, x21)\n    x24 = sfilter(x21, vline)\n    x25 = difference(x21, x24)\n    x26 = astuple(x25, x26)\n    x27 = rbind(shoot, UP)\n    x28 = mapply(x27, x6)\n    O = fill(x9, x21, x28)\n    return O"], [1.1, "def solve_4dd9eb26(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval( ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = ofcolor(I, ZERO)\n    x11 = ofcolor(I, FOUR)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, x7)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = compose(x13, x17)\n    x19 = rbind(shoot, THREE_BY_THREE)\n    x20 = compose(x14, x19)\n    x21 = rbind(shoot, THREE_BY_THREE)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot,Example output:\n    x27 = fork(recolor, identity, x24)\n    x28 = mapply(x27, x3)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_6a84b1f4(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = compose(x1, shape)\n    x3 = rbind( multiply(TWO, THREE)\n    x4 = rbind(multiply, THREE)\n    x5 = compose(x4, x2)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x1, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = x1(x11)\n    x13 = x2(x10)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(I, x15)\n    O = subgrid(x10, x16)\n    return O"], [1.1, "def solve_2a708adb(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(rapply, I)\n    x2 = initset(I)\n    x3 = lbind(add, DOWN)\n    x4 = chain(first, x1, x3)\n    x5 = compose(x4, decrement)\n    x6 = fork(difference, x5, toindices)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x2, x8)\n    x10 =775(x9)\n    x11 =(x10)\n    x12 = equality(x11, x12)\n    x13 = branch(x12, x11, x8)\n    x14 = shift(x13, UNITY)\n    x15 =27(x14)\n    x16 = ulcorner(x15)\n    x17 = lrcorner(x15)\n    x18 = shape(x15)\n    x19 = maximum(x18)\n    x20 = multiply(THREE, TEN)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = rbind(multiply, x15)\n    x23 = apply(x22, x21)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x21)\n    x26 = pair(x25, x26)\n    x27 = mapply(box, x26)\n    x28 = mapply(x25, x27)\n    O = fill(x10, ZERO, x28)\n    return O"], [1.1, "def solve_af2b8f36(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =6666(I)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, frontiers)\n    x4 = mfilter(x1, x3)\n    O = fill(x1, ZERO, x4)\n    return O"], [1.1, "def solve_76c140d9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =680(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, x1)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = trim(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(identity, x14)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(size, x16)\n    x18 = argmin(x4, x17)\n    x19 = repeat(x18, ONE)\n    x20 = asobject(x19)\n    x21 = palette(x20)\n    x22 = totuple(x21)\n    x23 = first(x22)\n    x24 = last(x22)\n    x25 = neighbors(UNITY)\n    x26 = remove(x23, x25)\n    x27 = recolor(x24, x26)\n    x28 = lbind(shift, x26)\n    x29 = ofcolor(x13, x23)\n    x30 = mapply(x28, x29)\n    x31 = shift(x30, UP_RIGHT)\n    x32 = combine(x27, x31)\n    x33 = paint(x13, x32)\n    O = trim(x33)\n    return O"], [1.1, "def solve_31d34b94(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(8matcher, first)\n    x2 = compose(x1, last)\n    x3 = lbind(multiply, THREE)\n    x4 = compose(x3, x2)\n    x5 = fork(extract, identity, x4)\n    x6 = compose(last, x5)\n    x7 = compose(ff28, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.1, "def solve_84cab0b3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =1111(I)\n    x2 = matcher(identity, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(positive, size, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(dmirror, x6)\n    x8 = power(x7, FOUR)\n    x9 = x8(I)\n    x10 = dedupe(x9)\n    x11 = dmirror(x10)\n    x12 = dedupe(x11)\n    O = dmirror(x12)\n    return O"], [1.1, "def solve_97504b06(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, THREE, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 =\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = lbind(multiply, x14)\n    x16 = decrement(x15)\n    x17 = lbind(outbox, x9)\n    x18 = initset(x17)\n    x19 = fill(x13, THREE, x18)\n    x20 = outbox(x19)\n    x21 = backdrop(x20)\n    x22 = lbind(toobject, x21)\n    x23 = compose(x22, initset)\n    x24 = ofcolor(x19, ONE)\n    x25 = sfilter(x24, x23)\n    x26 = difference(x24, x25)\n    x27 = fill(x19, THREE, x26)\n    x28 = interval(x8, x12, ONE)\n    x29 = rbind(multiply, x14)\n    x30 = apply(x29, x28)\n    x31 = lbind(shift, x24)\n    x32 = mapply(x31, x30)\n    O = fill(x27, TWO, x32)\n    return O"], [1.1, "def solve_c55e563f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = dmirror(I)\n    x3 =081928e5(x2)\n    x4 = lbind(shift, x3)\n    x5 = rbind(difference, x1)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = partition(I)\n    x9 = sfilter(x8, x7)\n    x10 = argmax(x9, size)\n    x11 = remove(x10, x9)\n    x12 = apply(initset, x11)\n    x13 = toindices(x10)\n    x14 = lbind(argmin, x12)\n    x15 = lbind(rbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = argmin(x13, x16)\n    x18 = cover(I, x10)\n    x19 = paint(x18, x17)\n    x20 = complec(x7)\n    x21 = palette(I)\n    x22 = other(x21, ZERO)\n    x23 = colorcount(x20, x22)\n    x24 = asindices(x20)\n    x25 = ofcolor(x20, x22)\n    x26 = difference(x24, x25)\n    x27 = asobject(x20)\n    x28 = matcher(first, x22)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x27, ulcorner, x29)\n    x31 = fork(shift, identity, x30)\n    x32 = mapply(x31, x26)\n    x33 = paint(x19, x32)\n    O = x23(x33)\n    return O"], [1.1, "def solve_197e1496(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x28 = canvas(x24, x25)\n    x29 = paint(x28, x2)\n    x30 = normalize(x11)\n    x31 = matcher(first, x4)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 = paint(x29, x33)\n        O = x21(x34)\n    return O"], [1.1, "def solve_7682831b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(numcolors, x1)\n    x3 = lbind(apply, multiply)\n    x4 = lbind(I, frontiers)\n    x5 = chain(x3, x4, frontiers)\n    x6 = chain(size, dedupe, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = fork(sfilter, x9, x8)\n    x11 = compose(size, x10)\n    x12 = argmin(x2, x11)\n    x13 = rightmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x12)\n    x18 = shift(x17, NEG_UNITY)\n    x19 =171(x16)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x18)\n    x22 = paint(x16, x21)\n    O = x15(x22)\n    return O"], [1.1, "def solve_5c05747b(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = leftmost(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = ofcolor(I, x10)\n    x18 =16(x17)\n    x19 = asindices(x18)\n    x20 = lowermost(x19)\n    x21 = toobject(x20, I)\n    x22 = mostcolor(x21)\n    x23 = ofcolor(I, x22)\n    x24 = uppermost(x23)\n    x25 = toivec(x24)\n    x26 = invert(x25)\n    x27 = rbind(shoot, UP)\n    x28 = rightmost(x27)\n    x29 = equality(x28, x26)\n    x30 = branch(x29, x22, x25)\n    x31 = branch(x29, x27, x25)\n    x32 =22its(x30)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, x26, x25)\n    x36 = branch(x34, x27, x25)\n    x37 = x35(x36)\n    x38 = intersection(x37, x35)\n    x39 = branch(x34, x36, x38)\n    O = x39(x36)\n    return O"], [1.1, "def solve_e0239dc4(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =429(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_33ca9808(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =63(I)\n    x6 = astuple(dmirror, cmirror)\n    x7 = astuple(hmirror, identity)\n    x8 = combine(x6, x7)\n    x9 = rbind(d511f180x8)\n    x10 = rbind(ofcolor, x4)\n    x11 = compose( center, x10)\n    x12 = compose(x19, x11)\n    x13 = chain(x9, vline, x12)\n    x14 = rbind(intersection, x2)\n    x15 = chain(size, x14, x13)\n    x16 = matcher(x15, ZERO)\n    x17 = objects(I, T, F, T)\n    x18 = sfilter(x17, x16)\n    x19 = argmax(x18, size)\n    x20 = matcher(color, x4)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = argmax(x22, size)\n    x24 = replace(I, x4, ZERO)\n    O = paint(x24, x23)\n    return O"], [1.1, "def solve_44de6db7(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = ONE00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_00d2babd(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =977788399000\n    8888248466\n    2422408323\n    53204a843\n    0330528329\n    4042542324\n    8025038323\n    \"\"\"\n    x1 = matcher(first, x3)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = shape(x3)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x3, x8)\n    x10 = multiply(x4, x4)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x9)\n    x13 = multiply(x4, x4)\n    x14 = width(I)\n    x15 = halve(x14)\n    x16 = compose(last, last)\n    x17 = matcher(x16, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x13, x18)\n    O = fill(x12, x3, x19)\n    return O"], [1.1, "def solve_01a38f42(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = size(x2)\n    x23 = positive(x22)\n    x24 = branch(x23, hsplit, vmirror)\n    x25 = x24(I)\n    x26 = first(x25)\n    x27 = lbind(recolor, x21)\n    x28 = lrcorner(x2)\n    x29 = paint(x18, x28)\n    x30 = branch(x5, vmirror, hmirror)\n    x31 = x30(x29)\n     move(x29, x31, x2)\n    O = x30(x32)\n    return O"], [1.1, "def solve_c95e326f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    O =88888(I, TWO)\n    return O"], [1.1, "def solve_65105cab(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x1)\n    x4 =    5899240800\n    48rotExample44\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x2)\n    x4 =5899240800\n    48its\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = equality(x1, x2)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.1, "def solve_30d4beb2(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =2331152277(I)\n    x2 =04227119915, x1)\n    x3 = apply(d406, x2)\n    x4 = lefthalf(x3)\n    x5 = righthalf(x3)\n    x6 = palette(x4)\n    x7 = contained(x6, x5)\n    x8 = contained(x7, x5)\n    x9 = branch(x8, identity, dmirror)\n    x10 = x9(x4)\n    x11 = x9(x5)\n    x12 = canvas(ZERO, THREE_BY_THREE)\n    x13 = branch(x8, identity, vmirror)\n    x14 = x13(x10)\n    x15 = hconcat(x14, x13)\n    x16 = asobject(x15)\n    x17 = occurrences(x16, x3)\n    x18 = first(x17)\n    x19 = ulcorner(x18)\n    x20 = lbind(shift, x18)\n    x21 = occurrences(x16, x9)\n    x22 = mapply(x20, x21)\n    O = fill(x17, ONE, x22)\n    return O"], [1.1, "def solve_d25a7a3e(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =66666666(I, TWO)\n    x2 = rot180(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, x2, x2)\n    O = canvas(x4, UNITY)\n    return O"], [1.1, "def solve_f1132913(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x2)\n    x11 = greater(x10, FOUR)\n    x12 = branch(x11, RIGHT, DOWN)\n    x13 = subgrid(x12, I)\n    x14 = add(RIGHT, DOWN)\n    x15 = decrement(x14)\n    x16 = x9(x15)\n    x17 = height(x13)\n    x18 = fgpartition(x13)\n    x19 = merge(x18)\n    x20 = fill(x13, ZERO, x19)\n    x21 = subtract(x17, x20)\n    x22 = replace(x21, FOUR, ZERO)\n    x23 = width(x13)\n    x24 =630alf(x23, width)\n    x25 = downscale(x12, x24)\n    x26 = ofcolor(x25, FOUR)\n    x27 = fill(x25, ZERO, x26)\n    O = x9(x27)\n    return O"], [1.1, "def solve_c77b1a33(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 =695651860160970\n    x15 =665513890(x12)\n    x16 = solve_694f1293(x15)\n    x17 = tophalf(x16)\n    x18 = numcolors(x17)\n    x19 = lowermost(x16)\n    x20 = lefthalf(x12)\n    x21 = righthalf(x12)\n    x22 = objects(x16, T, F, F)\n    x23 = colorfilter(x22, x3)\n    x24 = merge(x23)\n    x25 = cellwise(x14, x23, x24)\n    x26 = DOWNscale(x25, x18)\n    x27 = crop(x26, ORIGIN, x20)\n    x28 = urcorner(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x28)\n    x31 = apply(initset, x30)\n    x32 = ofcolor(x25, x3)\n    x33 = ofcolor(x25, x8)\n    x34 = intersection(x32, x33)\n    x35 = cover(x5, x20)\n    O = fill(x35, NEG_ONE, x34)\n    return O"], [1.1, "def solve_a67c6f36(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(\n    2885576013\n    6585562088\n    5568272651\n    ulcornerner\n    \"\"\"\n    x2 = lefthalf(I)\n    x3 = righthalf(I)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = tophalf(x3)\n    x7 = bottomhalf(x3)\n    x8 = combine(x4, x5)\n    x9 = combine(x6, x7)\n    x10 = combine(x8, x9)\n    O = fill(x1, TWO, x10)\n    return O"], [1.1, "def solve_ad32f302(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =52R5528\n    x2 =55215\n    x3 = tophalf(I)\n    x4 = lefthalf(x3)\n    x5 = tophalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = Tphalf(x8)\n    x10 = tophalf(x9)\n    x11 = righthalf(x10)\n    x12 = bottomhalf(x11)\n    x13 = lefthalf(x12)\n    x14 =tophalf(x13)\n    x15 = tophalf(x14)\n    x16 = righthalf(x15)\n    x17 = index(I, ORIGIN)\n    x18 = width(I)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = index(I, x20)\n    x22 = height(I)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = index(I, x24)\n    x26 = shape(I)\n    x27 = decrement(x26)\n    x28 = add(x22, x27)\n    x29 = add(x24, x28)\n    x30 = canvas(x11, x29)\n    x31 = asobject(x30)\n    x32 = occurrences(x10, x31)\n    x33 =\n    35(x32)\n    x34 =\n    (normalize, toindices)\n    x35 = lbind(shift, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x10, x36)\n    return O"], [1.1, "def solve_6741114b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =91112(I)\n    x2 = switch(x1, EIGHT, TWO)\n    x3 = switch(x2, TWO, TWO)\n    x4 = switch(x3, ONE, TEN)\n    x5 = fork(combine, vfrontier, hfrontier)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    O = x7(x7)\n    return O"], [1.1, "def solve_90a38d7b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(x3, initset)\n    x5 =78(x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(hmirror, vmirror)\n    x8 =HKapply(x7, x6)\n    x9 = compress(x8)\n    O = fill(x9, ZERO, x3)\n    return O"], [1.1, "def solve_82a2d37c(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =887(I)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_7c17c2b6(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 =\ufffd Bit(x11, uppermost)\n    x13 = ulcorner(x12)\n    x14 = llcorner(x12)\n    x15 = hmatching(x13, x14)\n    x16 = branch(x15, NEG_ONE, ONE)\n    x17 = branch(x15, double, outbox)\n    x18 = initset(x13)\n    x19 = insert(x14, x18)\n    x20 = insert(x16, x19)\n    x21 = recolor(x3, x20)\n    x22 = uppermost(x12)\n    x23 = toivec(x22)\n    x24 = add(x23, x4)\n    x25 = insert(x27, x24)\n    x26 = merge(x27)\n    x27 = cover(x6, x26)\n    x28 = forever package(x27)\n    x29 = astuple(x23, x8)\n    x30 = astuple(x28, x9)\n    x31 = combine(x29, x30)\n    x32 = hfrontier(x31)\n    x33 = vfrontier(x31)\n    x34 = combine(x32, x33)\n    x35 = combine(x31, x34)\n    x36 = fill(x27, x3, x35)\n    x37 = paint(x36, x24)\n    O = paint(x37, x25)\n    return O"], [1.1, "def solve_8c885980(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 =4418228(x1)\n    x3 =241111(x2)\n    x4 = matcher(color, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 =44fcc829(I)\n    x8 = rbind(shoot, UNITY)\n    x9 = mapply(x8, x7)\n    x10 = power(outbox, TWO)\n    x11 = apply(x10, x9)\n    x12 = initset(x2)\n    x13 = insert(x12, x11)\n    x14 = corners(x13)\n    x15 = toobject(x14, I)\n    x16 = mostcolor(x15)\n    x17 = ofcolor(I, x16)\n    x18 = mapply(neighbors, x17)\n    x19 = toindices(x18)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x5)\n    x22 = combine(x19, x21)\n    O = fill(I, x16, x22)\n    return O"], [1.1, "def solve_d6eb9269(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(I)\n    x3 =4444(I)\n    x4 =54444\n    45398831881\n    54568096698\n    43285167973\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = shape(x24)\n    x26 = canvas(x1, x25)\n    x27 = paint(x26, x24)\n    x28 = ofcolor(x27, THREE)\n    x29 = combine(x21, x28)\n    x30 = mapply(x19, x29)\n    x31 = fill(x27, THREE, x30)\n    x32 = x169(x31)\n    x33 =40(x32)\n    x34 = shift(x31, x33)\n    O = fill(x27, THREE, x34)\n    return O"], [1.1, "def solve_df53b005(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = branch(x16, x17, x19)\n    x21 = branch(x12, x16, x20)\n    x22 = branch(x12, x9, x21)\n    x23 = PApply(x22, x21)\n    x24 =280(x23)\n    x25 = branch(x16, x18, x19)\n    x26 = Field(x25, x24)\n    x27 = branch(x8, x22, x25)\n    x28 = fork(combine, vfrontier, hfrontier)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(ofcolor, x12)\n    x31 = palette(x12)\n    x32 = remove(x13, x31)\n    x33 = lbind(43444, x12)\n    x34 = power(x33, x30)\n    x35 = x32(x32)\n    x36 = x30(x34)\n    x37 = fill(x15, x39, x36)\n    x38 = fill(x37, x30, x34)\n    O = fill(x38, x39, x36)\n    return O"]], "1e97544e": [[0.05090373268510345, "def solve_2cfb3c38(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_db0f04e4(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_df7b466b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.052301372264443736, "def solve_f239ea44(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.06555616266185658, "def solve_a3533769(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_c6b891b4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_9a7095b3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_b1cd4281(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.06555616266185658, "def solve_8ebcfe2b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_a98f16f8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_7f62c837(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.06555616266185658, "def solve_876ab2dc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.06555616266185658, "def solve_0fc2b845(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_bec01355(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.06555616266185658, "def solve_a146ca9a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_e3f5a841(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_94983672(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_e2e5080c(I):\n    x1 = asindices(I)\n    x2 = recolor(ZERO, x1)\n    x3 = lbind(shift, x2)\n    x4 = occurrences(I, x2)\n    x5 = mapply(x3, x4)\n    O = paint(I, x5)\n    return O"], [0.06555616266185658, "def solve_a075377a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_f09525e7(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06576619581453758, "def solve_a25f0c55(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, TWO)\n    x8 = astuple(TWO, x2)\n    x9 = power(decrement, TWO)\n    x10 = x9(x1)\n    x11 = x9(x2)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = crop(I, x12, x8)\n    x15 = crop(I, x13, x7)\n    x16 = asobject(x15)\n    x17 = asobject(x14)\n    x18 = vperiod(x16)\n    x19 = hperiod(x17)\n    x20 = astuple(x18, x19)\n    x21 = lbind(multiply, x20)\n    x22 = neighbors(ORIGIN)\n    x23 = mapply(neighbors, x22)\n    x24 = apply(x21, x23)\n    x25 = lbind(shift, x6)\n    x26 = mapply(x25, x24)\n    O = paint(I, x26)\n    return O"], [0.06616669170244732, "def solve_1fcc57a3(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(toivec, numcolors)\n    x5 = fork(add, lrcorner, x4)\n    x6 = fork(astuple, x3, x5)\n    x7 = compose(box, x6)\n    x8 = mapply(x7, x1)\n    O = fill(I, THREE, x8)\n    return O"], [0.06676341038177405, "def solve_1764c709(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.06927348904207718, "def solve_4b316b5f(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.0702135574591548, "def solve_cfb94ee5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0702135574591548, "def solve_b0d22c00(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0709170432415734, "def solve_07d51b9c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_48a3de2d(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_fd338538(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_c26fe185(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_48b371f7(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_910f2054(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.07122438525624594, "def solve_6fee0dcd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.0712347097911809, "def solve_b4b088e8(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = sfilter(x9, x13)\n    x15 = compose(color, x11)\n    x16 = fork(recolor, x15, identity)\n    x17 = mapply(x16, x14)\n    O = paint(x5, x17)\n    return O"], [0.07287345360169127, "def solve_b47661a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2,UNITY)\n    x4 = intersection(x2, x3)\n    x5 = mapply(neighbors, x4)\n    O = underfill(I, UP, x5)\n    return O"], [0.07315303196464965, "def solve_8c71b7e0(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O"], [0.07641808482315048, "def solve_7df76510(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter,x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_65d07ff6(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_2f06c5db(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_249a078c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_39c6a054(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_5f284ee8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_3fce4902(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_72380bf2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_723a0307(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_8e82896a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_51e32dc5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07909280166991962, "def solve_7a629c7e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.08283557492092357, "def solve_bece834a(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.08598473307451636, "def solve_5bdd8550(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.08598473307451636, "def solve_34ef23fc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.08598473307451636, "def solve_f85e9eed(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.08598473307451636, "def solve_2d7d386d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.08598473307451636, "def solve_388e1b7f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.0868238750835419, "def solve_8ea6e1e5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_f5011454(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_a78f4125(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_f700ff56(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_9ffec60d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_1565ebba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_ea79e4e3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_58a82f52(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_55dde4d1(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_816ea530(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_c3e7dda6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_5a71d56d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_1196570b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_d295d8c3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_05894b53(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_717a5c31(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.09320112108071621, "def solve_482fbab2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09320112108071621, "def solve_226abe4d(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09864306622018416, "def solve_32f4d056(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, mostcolor, x2)\n    return O"], [0.10350267054002193, "def solve_293b123d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.10434388482560263, "def solve_934ada89(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.11410495726315961, "def solve_a4a28622(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.11698201361888237, "def solve_c79503c9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, vmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, hmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.11873730483078786, "def solve_c001bb73(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.1239852807263826, "def solve_6c4516b1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.1239852807263826, "def solve_3f3cd1f7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.12638696646420425, "def solve_cfcf28e2(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.13134103434345124, "def solve_03da3cd5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_3ba524cb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_3b89e135(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.1314364028975242, "def solve_0136aa78(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.1314364028975242, "def solve_3f321763(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.1314364028975242, "def solve_8a1db87a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.13508938916939192, "def solve_8a2a4fd4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13516742090301934, "def solve_43d5df35(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(toindices, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = objects(x5, T, F, T)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x5, x8)\n    return O"], [0.1391543174866792, "def solve_796e08f3(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.13931408711647267, "def solve_438f706b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.14125400895450432, "def solve_18a0ff35(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [0.1430138225359875, "def solve_f4b508cf(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.1446674399549113, "def solve_c65aa74c(I):\n    x1 = cmirror(I)\n    O = subgrid(x1, I)\n    return O"], [0.15924388832696912, "def solve_7a10dcbb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_4347c091(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_c130da4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.1674035410278312, "def solve_02aa9478(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.16903724504454612, "def solve_57828555(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_dfbbb59c(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.1695915995493272, "def solve_c162868a(I):\n    O = hmirror(I)\n    return O"], [0.1773065582183363, "def solve_143f04ac(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.18260399346960612, "def solve_0cd3e000(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    O = paint(I, x5)\n    return O"], [0.18335650834767755, "def solve_cee1a4ff(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18335650834767755, "def solve_0b377ec6(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.18335650834767755, "def solve_9c547a2c(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.19082520987900767, "def solve_4bb77202(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.19082520987900767, "def solve_69ce8055(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.19082520987900767, "def solve_bb4716d0(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.1958638344623164, "def solve_fd3d1835(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.20306126840468763, "def solve_c11b0301(I):\n    O = dmirror(I)\n    return O"], [0.20306126840468763, "def solve_c19cc311(I):\n    O = dmirror(I)\n    return O"], [0.20940552136163237, "def solve_ca3658b4(I):\n    O = rot90(I)\n    return O"], [0.20940552136163237, "def solve_68bfb9aa(I):\n    O = rot90(I)\n    return O"], [0.20955539093771366, "def solve_5d3c9642(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot270(I)\n    return O"], [0.20955539093771366, "def solve_ed3b0a28(I):\n    O = rot270(I)\n    return O"], [0.20955539093771366, "def solve_edeedba3(I):\n    O = rot270(I)\n    return O"], [0.21163349155215624, "def solve_66253f7c(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, FOUR)\n    x4 = switch(x3, TWO, SIX)\n    O = replace(x4, EIGHT, TWO)\n    return O"], [0.21391916164730382, "def solve_fdfdf597(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_faf07838(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_f9f0600b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_d68d55f1(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_c122fbb2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_ceb664ec(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_cc18addb(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_16aff312(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_5095be16(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.21391916164730382, "def solve_61339b62(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21904040042169512, "def solve_186f2b6c(I):\n    O = rot180(I)\n    return O"], [0.21924101368423873, "def solve_13cf489a(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.21924101368423873, "def solve_aa4a4210(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.22840986411980327, "def solve_97f3d8a9(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.22840986411980327, "def solve_a0af9139(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.23217016065624474, "def solve_02cc1bf7(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x2)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x2)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [0.23899259784001745, "def solve_f3d2cdb4(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, decrement, x8)\n    O = hmirror(x9)\n    return O"], [0.24133801648130837, "def solve_9224f961(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2537260279414613, "def solve_e7119462(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_f05cf0b9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_41b7cca8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_32ba691d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.25570919672274256, "def solve_9dc6abd3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_7b0aa453(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_b9a967e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_9f1ef182(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_2be16dc0(I):\n    x1 = hsplit(I, TWO)\n    O = first(x1)\n    return O"], [0.25570919672274256, "def solve_e8d81717(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_ac6f23da(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_545614e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_b769e1f3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_4dc8d598(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_016205dc(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_db073527(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.25570919672274256, "def solve_073f70d8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2616281866281866, "def solve_79fd51ca(I):\n    O = trim(I)\n    return O"], [0.2616281866281866, "def solve_d8260275(I):\n    O = trim(I)\n    return O"], [0.2704028721250951, "def solve_f6c16c47(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.2704028721250951, "def solve_b88c0a04(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.28964767626019455, "def solve_4c4fdc4c(I):\n    x1 = trim(I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [0.29118241282602314, "def solve_487aa7fc(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_461aa8f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_497731f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_359d0d94(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_053e17b6(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29118241282602314, "def solve_31018754(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.29493888612223423, "def solve_3043fe93(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29493888612223423, "def solve_d1242cc5(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29493888612223423, "def solve_daf2f29d(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29664969986532563, "def solve_4a20f76f(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.29664969986532563, "def solve_13ffcbf0(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.3063136421137608, "def solve_62cbca51(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3082441023536176, "def solve_812a3b60(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.30952390634955546, "def solve_95344ba8(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.31011174594270147, "def solve_2078d72b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_da990556(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_59c66f95(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_60f97838(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_544f55d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_4553f1d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.3104501482052144, "def solve_c314532d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.315862919980845, "def solve_623b0c51(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.320952197319818, "def solve_67ee853f(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.320952197319818, "def solve_0d9ce51e(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.320952197319818, "def solve_9deea0a3(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.3314449532924934, "def solve_998098e3(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3314449532924934, "def solve_2d96430b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.35285797856791773, "def solve_8b2b4267(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35285797856791773, "def solve_b2e862c8(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35285797856791773, "def solve_5a2b2d9c(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.35285797856791773, "def solve_648ea28e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.37473544973544975, "def solve_e5498a8a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = x3(I)\n    x6 = shape(x4)\n    x7 = canvas(ZERO, x6)\n    x8 = objects(x5, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    O = paint(x7, x13)\n    return O"], [0.40995162868139406, "def solve_f2249a10(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_e2948e51(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.4171957671957672, "def solve_579a4cd8(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.4231949243417133, "def solve_88e9b01f(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4231949243417133, "def solve_8a389a87(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4231949243417133, "def solve_88b57e6a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.4793651490678112, "def solve_5346f40d(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    O = paint(x4, x6)\n    return O"], [0.47981000481000485, "def solve_e79cbf7a(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [0.48269935405826175, "def solve_a7de5013(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.5455548516524127, "def solve_80980c8c(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5586554186554187, "def solve_1e67fd3c(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.5586554186554187, "def solve_4dd520f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = dmirror(I)\n    x4 = equality(x3, x1)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.5586554186554187, "def solve_1a0da53b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_0f30f1cf(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_289957b1(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5586554186554187, "def solve_65929c8e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5801077246461932, "def solve_4f87ab55(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_bc6be8e6(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.656779053865826, "def solve_6e229489(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.6767316017316017, "def solve_4bd2cac0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_5288a131(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_646c37d8(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_9bd93218(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6767316017316017, "def solve_6b50b3f4(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6793066105327229, "def solve_d7e7fb8c(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.6867926404239254, "def solve_3c5ee8a7(I):\n    x1 = rot180(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.704578360372753, "def solve_0ec2872f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = colorcount(I, ONE)\n    x7 = decrement(x6)\n    x8 = tojvec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = fill(x5, TWO, x9)\n    x11 = initset(UNITY)\n    x12 = equality(x6, FOUR)\n    x13 = branch(x12, x11, x9)\n    O = fill(x10, TWO, x13)\n    return O"], [0.7047029674817701, "def solve_fac58b0f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, ONE)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.7047029674817701, "def solve_ffb21a20(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.7615634784502708, "def solve_129b2d68(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.7635281385281386, "def solve_104d4f29(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_93d3624e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_cb6da758(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_784bf2d0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_071a486e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.8704545454545455, "def solve_3ec4d1a9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_049372ee(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_a37c8aba(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 =uttuple(x6, x7)\n    x9 = repeat(x8, ONE)\n    O = x7(x9)\n    return O"], [1.0, "def solve_07584382(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_f067c1cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_d19c3398(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_7ea63447(I):\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, THREE)\n    x3 = flip(x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x5(I)\n    x8 = x5(I)\n    x9 = first(x7)\n    x10 = last(x7)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x8, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = asindices(x11)\n    x23 = ofcolor(x11, x21)\n    x24 = difference(x22, x23)\n    x25 = astuple(x24, x3333)\n    x26 = apply(last, x25)\n    x27 = size(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = rbind(add, first)\n    x31 = compose(x30, last)\n    x32 = rbind(multiply, x31)\n    x33 = apply(x32, x29)\n    x34 = lbind(shift, x11)\n    x35 = mapply(x34, x33)\n    x36 = paint(x11, x35)\n    O = x6(x36)\n    return O"], [1.0, "def solve_7cc98818(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_3bda924f(I):\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(dneighbors, x1)\n    x3 = fork(difference, x2, toindices)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ZERO)\n    x6 = compose(x1, x5)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x1, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_20cebd2e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_78c33ff1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_962b3b43(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_14d818e9(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x12 = compose(x15, last)\n    x13 = sfilter(x13, x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x8, x15)\n    x17 = other(x16, x14)\n    x18 = rbind(colorcount, x14)\n    x19 = argmin(x17, x18)\n    x20 = apply(ulcorner, xx)\n    x21 = normalize(x19)\n    x22 = matcher(first, x14)\n    x23 = sfilter(x21, x22)\n    x24 = toindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = mapply(x25, x8)\n    x27 = ofcolor(I, x17)\n    x28 = backdrop(x27)\n    x29 = intersection(x27, x28)\n    O = fill(I, x17, x29)\n    return O"], [1.0, "def solve_e6b2b224(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_53a0909f(I):\n    x1 = objects(I, F, T, T)\n    x2 = subgrid(x1, I)\n    x3 = mostcolor(x2)\n    O = replace(x2, x3, ONE)\n    return O"], [1.0, "def solve_d2d3de8d(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = apply(ulcorner, x2)\n    x4 = apply(urcorner, x2)\n    x5 = apply(llcorner, x2)\n    x6 = apply(lrcorner, x2)\n    x7 = fill(I, ONE, x3)\n    x8 = fill(x7, TWO, x4)\n    x9 = fill(x8, THREE, x5)\n    O = fill(x9, FOUR, x6)\n    return O"], [1.0, "def solve_310d6026(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_f51bcb8d(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO_BY_TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners, combine)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_c85f36ed(I):\n    x1 =O = subgrid(x2, I)\n    O = trim(x1)\n    return O"], [1.0, "def solve_80c2a33c(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6757fa8d(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_706088f6(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f111fd73(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = lbind(shift, x5)\n    x7 = mapply(x6, x4)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_e2130830(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_568417bf(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da15407e(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = fill(I, x10, x30)\n    O = trim(x31)\n    return O"], [1.0, "def solve_913b1be3(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_25abc504(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = occurrences(x7, x21)\n    x25 = lbind(mapply, backdrop)\n    x26 = lbind(apply, toindices)\n    x27 = compose(x25, x26)\n    x28 = x27(x24)\n    x29 = x27(x25)\n    x30 = fill(x7, x4, x28)\n    x31 = fill(x30, x6, x29)\n    O = fill(x31, ONE, x30)\n    return O"], [1.0, "def solve_66aeef6e(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e7fe1202(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_dcda85ba(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_e57feb5d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_9fe0b56e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4292352e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_9b3d7e8f(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = x2(x2)\n    return O"], [1.0, "def solve_acafbc06(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_299c5df7(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_2be20951(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d17e2eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 =x26(x15)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x22, x30)\n    x32 = apply(x11, x31)\n    x33 = argmin(x32, size)\n    x34 = x22(x33)\n    x35 = x21(x34)\n    x36 = divide(x17, x35)\n    x37 = x51(x34)\n    x38 = x25(x37)\n    x39 = canvas(x38, x36)\n    O = paint(x39, x37)\n    return O"], [1.0, "def solve_4adc7313(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_a97ec318(I):\n    x1 = index(I, ORIGIN)\n    x2 = recolor(ORIGIN, x1)\n    x3 = apply(initset, x2)\n    x4 = toindices(x3)\n    x5 = chain(backdrop, first, last)\n    x6 = lbind(mapply, x5)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = compose(x6, x7)\n    x9 = position(x4, x8)\n    x10 = difference(x1, x9)\n    x11 = apply(x8, x10)\n    x12 = lbind(difference, x4)\n    x13 = compose(x12, x8)\n    x14 = rbind(ofcolor, ZERO)\n    x15 = compose(x14, x8)\n    x16 = fork(sfilter, x13, x15)\n    x17 = mapply(x16, x11)\n    O = fill(I, x1, x17)\n    return O"], [1.0, "def solve_bb3cbb31(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a5fbb767(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, flip)\n    x3 = branch(x1, decrement, ONE)\n    x4 = x2(I)\n    x5 = halve(x4)\n    x6 = x3(I)\n    x7 = rbind(shoot, x5)\n    x8 = compose(x7, x4)\n    x9 = fork(combine, x8, x5)\n    x10 = mapply(x9, x6)\n    O = fill(I, ONE, x10)\n    return O"], [1.0, "def solve_62f87671(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_8f1c175e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_11ee2f79(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_76d78f80(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose,initset)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = lbind(fork, greater)\n    x8 = lbind(chain, FOUR)\n    x9 = rbind(x8, x6)\n    x10 = lbind(rbind, contained)\n    x11 = compose(x9, x10)\n    x12 = lbind(compose, x2)\n    x13 = chain(x11, x12, x11)\n    x14 = lbind(compose, x4)\n    x15 = compose(x14, x13)\n    x16 = fork(x11, x15, x11)\n    x17 = compose(first, x16)\n    x18 = fork(9999, x17, x5)\n    x19 = compose(first, x5)\n    x20 = fork(recolor, x18, x19)\n    x21 = fork(remove, x20, x8)\n    x22 = fork(astuple, x21, x17)\n    x23 = fork(insert, x22, x83)\n    x24 = box(x23)\n    O = fill(I, x24, x24)\n    return O"], [1.0, "def solve_ea1a36f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_e763c4da(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, rbind, x6)\n    x8 = chain(merge, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [1.0, "def solve_f1a313bf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = rbind(colorcount, ZERO)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_b2e2b4c2(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = apply(d406, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = repeat(x6, ONE)\n    x8 = combine(x7, x4)\n    x9 = multiply(NEG_TWO, TEN)\n    x10 = interval(x9, x2, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = lbind(shift, x8)\n    x13 = mapply(x12, x11)\n    O = paint(x2, x13)\n    return O"], [1.0, "def solve_4275544e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = lbind(apply, maximum)\n    x6 = chain(x5, double, x4)\n    x7 = matcher(x6, EIGHT)\n    x8 = compose(flip, x7)\n    x9 = sfilter(I, x8)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = lbind(shift, x9)\n    x12 = chain(x10, x11, palette)\n    x13 = apply(x12, x9)\n    x14 = merge(x13)\n    x15 = mostcolor(x14)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = hconcat(I, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = argmax(x19, numcolors)\n    x21 = apply(ulcorner, x19)\n    x22 = normalize(x20)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x21)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_2937f851(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8fea3bcd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_58da7cea(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, TWO)\n    x6 = argmax(x4, x2)\n    x7 = neighbors(x6)\n    x8 = insert(x6, x7)\n    x9 = fill(x3, EIGHT, x8)\n    x10 = hmirror(x9)\n    x11 = replace(x10, EIGHT, ONE)\n    x12 = x2(x11)\n    x13 = merge(x12)\n    x14 = cover(x11, x13)\n    x15 = paint(x14, x12)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, EIGHT)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [1.0, "def solve_79e19501(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_cc69ffc6(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c0e6387(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(O, x5)\n    return O"], [1.0, "def solve_b11ffdfa(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWOZERO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [1.0, "def solve_3cb67168(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_5b89bf48(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = leastcolor(I)\n    x5 = repeat(x4, ONE)\n    x6 = rbind(ofcolor, x4)\n    x7 = compose(x6, frontiers)\n    x8 = chain(size, x7, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = astuple(x19, x0)\n    x11 = canvas(x9, x10)\n    x12 = argmax(x11, x9)\n    x13 = subtract_normalize(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = difference(x14, x12)\n    x16 = rbind(multiply, x13)\n    x17 = apply(x16, x15)\n    x18 = rbind(interval, x12)\n    x19 = lbind(rbind, contained)\n    x20 = lbind(sfilter, x17)\n    x21 = compose(x19, x20)\n    x22 = lbind(compose, x21)\n    x23 = lbind(rbind, intersection)\n    x24 = compose(x22, x23)\n    x25 = lbind(rbind, shift)\n    x26 = lbind(apply, x25)\n    x27 = lbind(chain, x24)\n    x28 = x27(x41)\n    x29 = lbind(x28, x41)\n    x30 = rbind(x26, x8)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x21)\n    x33 = pair(x17, x12)\n    x34 = mapply(x32, x33)\n    O = paint(x11, x34)\n    return O"], [1.0, "def solve_00d75081(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = argmin(x1, uppermost)\n    x5 = argmax(x1, uppermost)\n    x6 = width(x3)\n    x7 = halve(x6)\n    x8 = height(x3)\n    x9 = height(x5)\n    x10 = interval(ZERO, x8, ONE)\n    x11 = lbind(multiply, x7)\n    x12 = rbind(divide, x7)\n    x13 = chain(x11, x12, last)\n    x14 = lbind(apply, last)\n    x15 = lbind(remove, x4)\n    x16 = lbind(astuple, x9)\n    x17 = chain(x14, x15, x16)\n    x18 = lbind(apply, first)\n    x19 = lbind(other, x9)\n    x20 = compose(x18, x19)\n    x21 = compose(x15, x20)\n    x22 = fork(combine, x17, x21)\n    x23 = compose(x12, matcher)\n    x24 = fork(combine, x23, x22)\n    x25 = fork(combine, x38, x12)\n    x26 = fork(combine, x26, x24)\n    x27 = fork(difference, x28, x22)\n    x28 = fork(mapply, x27, x27)\n    x29 = fork(difference, x28, last)\n    x30 = fork(recolor, first, x29)\n    x31 = mapply(x30, x5)\n    O = paint(x3, x31)\n    return O"], [1.0, "def solve_63e392f1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e24eeece(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_ef0ab38c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4f492ee7(I):\n    x1 = fgpartition(I)\n    x2 =matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_3cd09773(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_d9624359(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fb1ad7ac(I):\n    x1 = index(I, ORIGIN)\n    x2 = center(I)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x2, x4)\n    x6 = fill(I, FOUR, x5)\n    x7 = astuple(x3, ONE)\n    x8 = canvas(x1, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, DOWN)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = rbind(toobject, I)\n    x16 = lbind(compose, ZERO)\n    x17 = lbind(colorfilter, x15)\n    x18 = compose(x16, x17)\n    x19 = lbind(shift, x10)\n    x20 = rbind(multiply, x4)\n    x21 = chain(x19, x20, last)\n    x22 = mapply(x21, x14)\n    x23 = paint(x6, x22)\n    O = downscale(x23, THREE)\n    return O"], [1.0, "def solve_d9026414(I):\n    x1 = doublecolors(I)\n    x2 = decrement(x1)\n    x3 = compose(vfrontier, tojvec)\n    x4 = initset(ZERO)\n    x5 = lbind(rapply, x4)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(first, x6)\n    x8 = chain(x3, x7, x3)\n    x9 = matcher(x8, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fill(I, ZERO, x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x12, x14)\n    x16 = urcorner(x2)\n    x17 = lbind(shift, x16)\n    x18 = height(x12)\n    x19 = divide(x18, x19)\n    x20 = increment(x19)\n    x21 = width(x12)\n    x22 = divide(x21, x22)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x23)\n    x25 = apply(x24, x20)\n    x26 = mapply(x17, x25)\n    x27 = cover(x15, x26)\n    O = paint(x27, x200)\n    return O"], [1.0, "def solve_af609e9e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_343d91ee(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x8)\n    x4 = fork(either, vline, hline)\n    x5 = mfilter(x3, x4)\n    x6 = mostcolor(I)\n    x7 = shape(I)\n    x8 = canvas(x6, x7)\n    O = fill(x8, ONE, x5)\n    return O"], [1.0, "def solve_2b682033(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(non38, x1)\n    x3 = combine(x2, x2)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = tophalf(x4)\n    x7 = tophalf(x5)\n    x8 = bottomhalf(x4)\n    x9 = bottomhalf(x5)\n    x10 = astuple(x6, x7)\n    x11 = astuple(x8, x9)\n    x12 = combine(x10, x11)\n    x13 = rbind(adjacent, x12)\n    x14 = extract(x12, x13)\n    O = x14(x4)\n    return O"], [1.0, "def solve_ef5e29eb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_57838909(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_c0733203(I):\n    O = upscale(I, TWO)\n    return O"], [1.0, "def solve_c3cbe74a(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, vmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [1.0, "def solve_846b1bdf(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_e7e994a3(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d2965672(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_7d1be212(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_181387ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, frontiers)\n    x7 = sfilter(x2, x6)\n    x8 = colorfilter(x4, ONE)\n    x9 = difference(x4, x8)\n    x10 = pair(x9, x8)\n    x11 = mapply( sfilter, x10)\n    x12 = leastcolor(x11)\n    x13 = shape(I)\n    x14 = canvas(x12, x13)\n    x15 = hconcat(I, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = rbind(colorcount, x12)\n    x18 = order(x16, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, x12)\n    x23 = combine(x21, x22)\n    x24 = intersection(x21, x22)\n    x25 = difference(x23, x24)\n    O = fill(x15, NINE, x25)\n    return O"], [1.0, "def solve_131b894f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_fbbb8b8e(I):\n    x1 = fill(I, FIVE, x2)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = index(I, x2)\n    x5 = lbind(shift, x2)\n    x6 = mapply(x5, x3)\n    O = fill(x1, x4, x6)\n    return O"], [1.0, "def solve_0bfc1c91(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x3)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x4)\n    x12 = ulcorner(x2)\n    x13 = lbind(subtract, x12)\n    x14 = rbind(shift, x12)\n    x15 = compose(x13, x14)\n    x16 = fork(hmirror, identity, x15)\n    x17 = mapply(x16, x11)\n    O = paint(x1, x17)\n    return O"], [1.0, "def solve_da8109a3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_9579b0f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = palette(x8)\n    x10 = intersection(x9, x5)\n    x11 = first(x10)\n    x12 = shape(x5)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x3, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = first(x15)\n    x17 = compose(vdrop, vmirror)\n    x18 = rbind(hmatching, x17)\n    x19 = sfilter(x16, x18)\n    x20 = asindices(x19)\n    x21 = apply(x17, x20)\n    x22 = lbind(shift, x8)\n    x23 = mapply(x22, x21)\n    O = paint(x21, x23)\n    return O"], [1.0, "def solve_10cb4435(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_24164807(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e004eac7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_dc434a02(I):\n    x1 = ofcolor(I, THREE)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, THREE, ZERO)\n    x5 = replace(x4, EIGHT, ZERO)\n    x6 = compress(x5)\n    x7 = upscale(x6, THREE)\n    O = fill(x7, ZERO, x3)\n    return O"], [1.0, "def solve_cf1272d5(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = decrement(TWO)\n    x4 = toivec(x3)\n    x5 = crop(I, x4, THREE_BY_THREE)\n    x6 = asobject(x5)\n    x7 = decrement(x2)\n    x8 = astuple(x7, x8)\n    x9 = connect(x7, x8)\n    x10 = fill(I, SIX, x9)\n    x11 =object(x10, I)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = astuple(x11, x12)\n    x14 = lbind(multiply, x13)\n    x15 = apply(x14, x12)\n    x16 = lbind(shift, x11)\n    x17 = mapply(x16, x15)\n    O = fill(x10, FIVE, x17)\n    return O"], [1.0, "def solve_1e5255a3(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_114b60f6(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_8e9260a1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_311eb1f7(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_6b36777e(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(adjacent, x2)\n    x5 = mfilter(x3, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_b796a6f8(I):\n    x1 = switch(I, FOUR, ZERO)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = rbind(ofcolor, ZERO)\n    x7 = palette(x3)\n    x8 = palette(x10)\n    x9 = intersection(x7, x8)\n    x10 = fill(x5, ZERO, x9)\n    x11 = fill(x10, EIGHT, x4)\n    O = fill(x11, TWO, x5)\n    return O"], [1.0, "def solve_ba07786f(I):\n    x1 = matcher(first, THREE)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(ff28, x2)\n    x4 = fork(recolor, identity, x3)\n    x5 = mapply(x4, objects)\n    x6 = paint(I, x5)\n    x7 = replace(x6, EIGHT, ONE)\n    O = paint(x7, delta)\n    return O"], [1.0, "def solve_91c19737(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_a4705935(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_5ccb1afb(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(compose, x8)\n    x17 = chain(x16, x5, x6)\n    x18 = lbind(compose, x10)\n    x19 = chain(x18, x5, x6)\n    x20 = lbind(compose, x12)\n    x21 = chain(x20, x5, x6)\n    x22 = lbind(compose, x17)\n    x23 = chain(x21, x22, x6)\n    x24 = rbind(rapply, I)\n    x25 = chain(first, x24, initset)\n    x26 = fork(rapply, x25, x6)\n    x27 = compose(x25, x26)\n    x28 = mapply(x27, x2)\n    x29 = argmax(x28, x7)\n    O = x30(x29)\n    return O"], [1.0, "def solve_3405ecb8(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(astuple, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_a11fa586(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_ba39fe2b(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a6cbd52e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_b3617a6f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = mostcolor(x5)\n    x7 = leastcolor(I)\n    x8 = ofcolor(I, x7)\n    x9 = position(x5, x8)\n    x10 = shoot(x6, NEG_UNITY)\n    x11 = lrcorner(x8)\n    x12 = shoot(x11, UNITY)\n    x13 = fill(I, x1, x9)\n    O = fill(x13, x7, x12)\n    return O"], [1.0, "def solve_8ae96ca0(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_0a7a97ac(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, shape)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [1.0, "def solve_3fafaf9d(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f64281da(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_3dfaff7c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_08aedea3(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = sfilter(x7, x4)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_0e42b48f(I):\n    x1 = Fgpartition(I)\n    x2 = objects(I, T, F, F)\n    x3 = order(x1, height)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = colorfilter(x2, x7)\n    x9 = power(outbox, TWO)\n    x10 = rbind(toobject, I)\n    x11 = mostcolor(I)\n    x12 = lbind(remove, x11)\n    x13 = chain(size, x12, palette)\n    x14 = chain(x13, x10, x9)\n    x15 = argmax(x8, x14)\n    x16 = ulcorner(x15)\n    x17 = shape(x15)\n    x18 = subtract(x16, x17)\n    x19 = decrement(x18)\n    x20 = multiply(x17, THREE)\n    x21 = add(x20, TWO_BY_TWO)\n    x22 = crop(I, x19, x21)\n    x23 = asobject(x22)\n    x24 = apply(ulcorner, x8)\n    x25 = increment(x17)\n    x26 = rbind(subtract, x25)\n    x27 = apply(x26, x24)\n    x28 = lbind(shift, x23)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_ea9e0567(I):\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = decrement(x4)\n    x6 = branch(x2, tojvec, lefthalf)\n    x7 = x6(I)\n    x8 = rbind(shoot, x5)\n    x9 = rbind(shoot, x7)\n    x10 = fork(combine, x8, x9)\n    x11 = x10(x7)\n    x12 = fill(x7, ZERO, x11)\n    x13 = ofcolor(x12, TWO)\n    x14 = subgrid(x13, x12)\n    x15 = x3(x14)\n    x16 = palette(x15)\n    x17 = contained(x16, x13)\n    x18 = height(x15)\n    x19 = trim(x15)\n    x20 = palette(x19)\n    x21 = contained(x20, x10)\n    x22 = height(x7)\n    x23 = divide(x22, x18)\n    x24 = increment(x23)\n    x25 = width(x7)\n    x26 = divide(x25, x19)\n    x27 = increment(x26)\n    x28 = repeat(x24, x27)\n    x29 = shift(x28, UNITY)\n    x30 = shift(x29, x24)\n    x31 = combine(x29, x30)\n    x32 = asindices(x29)\n    x33 = shape(x29)\n    x34 = outbox(x33)\n    x35 = remove(x34, x33)\n    x36 = lbind(adjacent, x32)\n    x37 = mfilter(x35, x36)\n    x38 = vmirror(x37)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    O = paint(x12, x40)\n    return O"], [1.0, "def solve_67c9f1ed(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e3c2207e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_9570d2b8(I):\n    x1 = shape(I)\n    x2 = connect(ORIGIN, x1)\n    x3 = height(I)\n    x4 = halve(x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = double(DOWN)\n    x12 = multiply(x11, x10)\n    x13 = subgrid(x12, I)\n    x14 = interval(ZERO, x2, ONE)\n    x15 = merge(x14)\n    x16 = double(x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(subtract, x56)\n    x20 = lbind(shift, x15)\n    x21 = mapply(x19, x20)\n    O = paint(x1, x21)\n    return O"], [1.0, "def solve_fdd6d693(I):\n    x1 = switch(I, FIVE, EIGHT)\n    x2 = switch(x1, FIVE, TWO)\n    x3 = objects(x2, T, F, T)\n    x4 = argmax(x3, size)\n    x5 = argmin(x3, size)\n    x6 = color(x4)\n    x7 = color(x5)\n    x8 = fill(x2, x6, x1)\n    O = fill(x8, x7, x4)\n    return O"], [1.0, "def solve_ee148566(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, shape)\n    x3 = compose(size, x1)\n    x4 = matcher(x3, TWO_BY_TWO)\n    x5 = dmirror(I)\n    x6 = papply(pair, x5, x1)\n    x7 = compose(size, dedupe)\n    x8 = matcher(x7, ONE)\n    x9 = dmirror(x8)\n    x10 = papply(pair, x9, x1)\n    x11 = compose(size, dedupe)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x4, x12)\n    x14 = fork(both, x7, x13)\n    x15 = fork(astuple, x14, x405)\n    x16 = argmax(x6, x15)\n    x17 = mostcolor(x16)\n    x18 = x16(I)\n    x19 = objects(x18, T, F, F)\n    x20 = colorfilter(x19, ZERO)\n    x21 = rbind(bordering, I)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x20, x22)\n    O = fill(x18, ONE, x23)\n    return O"], [1.0, "def solve_52cf2d5c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_60451d2d(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = first(x32)\n    x34 = shape(I)\n    x35 = halve(x34)\n    x36 = canvas(x11, x35)\n    O = fill(x36, x10, x33)\n    return O"], [1.0, "def solve_6067f714(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_16d93893(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f421382c(I):\n    x1 = papply(d687, x2, x3)\n    x2 = compose(d07, numcolors)\n    x3 = fork(equality, x2, x3)\n    x4 = sfilter(x1, x3)\n    x5 = compose(flip, x4)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [1.0, "def solve_463c6181(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_237402ad(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(positive, size)\n    x3 = lbind(intersection, x2)\n    x4 = chain(positive, size, x3)\n    x5 = chain(x2, x4, dmirror)\n    x6 = objects(I, T, F, T)\n    x7 = merge(x6)\n    x8 = shift(x7, DOWN)\n    x9 = fill(I, ZERO, x8)\n    x10 = shift(x8, x5)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x2)\n    O = paint(x9, x12)\n    return O"], [1.0, "def solve_2b328405(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_88fc14a0(I):\n    x1 = frontiers(I)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = difference(x1, x2)\n    x5 = mapply(toindices, x4)\n    x6 = difference(x3, x5)\n    x7 = fill(I, NEG_ONE, x5)\n    x8 = fill(x7, NEG_ONE, x6)\n    x9 = lbind(fork, subtract)\n    x10 = lbind(x9, positive)\n    x11 = lbind(x10, size)\n    x12 = rbind(intersection, x2)\n    x13 = chain(x11, x12, toindices)\n    x14 = compose(size, x13)\n    x15 = compose(x10, size)\n    x16 = lbind(lbind, intersection)\n    x17 = compose(x16, x13)\n    x18 = lbind(extract, x5)\n    x19 = fork(compose, x17, x18)\n    x20 = lbind(sfilter, x6)\n    x21 = chain(merge, x20, x19)\n    x22 = lbind(fork, recolor)\n    x23 = lbind(x22, color)\n    x24 = rbind(mapply, x23)\n    x25 = lbind(chain, x24)\n    x26 = lbind(rbind, occurrences)\n    x27 = chain(x25, x26, toindices)\n    x28 = lbind(lbind, combine)\n    x29 = chain(x27, x28, x27)\n    x30 = lbind(mapply, x25)\n    x31 = chain(x29, x30, x27)\n    x32 = fork(ofcolor, x21, x13)\n    x33 = fork(recolor, x25, x31)\n    x34 = mapply(x33, x6)\n    O = paint(x16, x34)\n    return O"], [1.0, "def solve_63363095(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_63ad581b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = Feca(TWO)\n    x4 = connect(ORIGIN, x3)\n    x5 = positive(x2)\n    x6 = asindices(I)\n    x7 = UNITY(x6)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = rbind(shoot, DOWN)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x8)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_3f1d6f48(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_32bd0f64(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_747e3a4d(I):\n    x1 = lbind(colorcount, I)\n    x2 = compose(maximum, x1)\n    x3 = apply(x2, I)\n    x4 = minimum(x3)\n    x5 = astuple(ONE, x4)\n    x6 = astuple(TWO, x4)\n    x7 = canvas(x2, x5)\n    x8 = initset(x7)\n    x9 = recolor(ZERO, x8)\n    O = upscale(x9, TWO)\n    return O"], [1.0, "def solve_ac1538d5(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_bda7b226(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_9da74771(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_e9b926ab(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x999 = mostcolor(x8)\n    x10 = matcher(first, x999)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_739291b5(I):\n    x1 = shape(I)\n    x2 = index(I, ORIGIN)\n    x3 = decrement(x1)\n    x4 = upscale(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = argmin(x5, size)\n    x7 = cover(I, x6)\n    x8 = normalize(x6)\n    x9 = paint(x7, x8)\n    x10 = objects(x9, F, F, T)\n    x11 = argmin(x10, size)\n    x12 = multiply(x11, LEFT)\n    x13 = add(x12, x11)\n    x14 = canvas(x2, x13)\n    x15 = normalize(x11)\n    x16 = lbind(remove, last)\n    x17 = rbind(s6666, x16)\n    x18 = compose(x17, center)\n    x19 = rbind( webpagepply, x13)\n    x20 = compose(x19, center)\n    x21 = fork(combine, x18, x20)\n    x22 = rbind(occurrences, x14)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(dmirror, x24, x21)\n    x26 = chain(cmirror, x25, x21)\n    x27 = fork(combine, x26, x25)\n    x28 = apply(x27, x10)\n    x29 = dmirror(x28)\n    x30 = apply(x27, x29)\n    x31 = x17(x30)\n    x32 = x16(x31)\n    x33 = x25(x32)\n    x34 = shift(x33, UNITY)\n    x35 = paint(x9, x34)\n    O = x30(x35)\n    return O"], [1.0, "def solve_ed6bc6a5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d83299b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolors(x14)\n    x25 = difference(x23, x24)\n    x26 = mapply(x22, x25)\n    O = fill(x14, x13, x26)\n    return O"], [1.0, "def solve_e468e763(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_5fdd3418(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f474d964(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_d40492ae(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_98c63976(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = vperiod(x6)\n    x8 =toivec(x7)\n    x9 = add(x8, NEG_ONE)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = apply(numcolors, x11)\n    x13 = matcher(equality, ONE)\n    x14 = partition(I)\n    x15 = sfilter(x14, x13)\n    x16 = difference(x14, x15)\n    x17 = merge(x16)\n    x18 = cover(I, x17)\n    x19 = lbind(compose, flip)\n    x20 = lbind(matcher, first)\n    x21 = chain(x19, x20, mostcolor)\n    x22 = fork(19, identity, x21)\n    x23 = lbind(compose, flip)\n    x24 = lbind(matcher, first)\n    x25 = chain(x23, x24, x22)\n    x26 = fork(argmin, x22, x25)\n    x27 = fork(00000000, x26, x20)\n    x28 = mapply(x27, x18)\n    O = paint(x18, x28)\n    return O"], [1.0, "def solve_d3463493(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_88014b3c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_99b28621(I):\n    x1 = shape(I)\n    x2 = decrement(x1)\n    O = connect(ORIGIN, x2)\n    return O"], [1.0, "def solve_fa985f5f(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_0a471b0c(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(add, x3)\n    x21 = rbind(insert, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(insert, x22, x21)\n    x24 = size(x1)\n    x25 = positive(x24)\n    x26 = size(x26)\n    x27 = increment(x25)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(tojvec, x28)\n    x30 = apply(23, x29)\n    x31 = mpapply(shift, x30, x22)\n    x32 = mapply(toivec, x31)\n    x33 = shift(x23, x32)\n    x34 = canvas(x11, x33)\n    x35 = paint(x34, x3)\n    O = x9(x35)\n    return O"], [1.0, "def solve_7d66dc70(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_9e50dc8b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_3362ae76(I):\n    x1 = leastalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O"], [1.0, "def solve_9cb17147(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = dneighbors(UNITY)\n    x3 = insert(UNITY, x2)\n    x4 = lrcorner(x3)\n    x5 = halve(x4)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = intersection(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [1.0, "def solve_a2356a7f(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_bc02fed4(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db308579(I):\n    x1 = lbind(contained, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, x8)\n    x11 = paint(x8, x10)\n    x12 = repeat(x11, ONE)\n    x13 = asindices(x8)\n    x14 = center(x13)\n    x15 = invert(x14)\n    x16 = shift(x13, x15)\n    x17 = apply(x5, x16)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = product(x20, x20)\n    x22 = fork(compose, first, last)\n    x23 = apply(x22, x21)\n    x24 = product(x23, x23)\n    x25 = fork(compose, FIVE, flip)\n    x26 = apply(x25, x24)\n    x27 = mapply(box, x26)\n    O = fill(x8, x17, x27)\n    return O"], [1.0, "def solve_f5574119(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = compose(center, x3)\n    x5 = compose(dneighbors, x4)\n    x6 = fork(difference, x5, x4)\n    x7 = compose(first, x6)\n    x8 = chain(x4, x7, x8)\n    x9 = fork(recolor, x8, x4)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_5fab8a3f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d8afbcfe(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(color, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(F25, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, outbox, initset)\n    x13 = corners(x6)\n    x14 = mapply(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = inbox(x7)\n    x17 = sfilter(x16, x11)\n    x18 = combine(x15, x17)\n    x19 = fill(x5, ONE, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(matcher, normalize)\n    x23 = lbind(extract, x21)\n    x24 = chain(ulcorner, x23, x22)\n    x25 = compose(x24, toindices)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x5, x27)\n    return O"], [1.0, "def solve_b55466a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(difference, x2)\n    O = fill(I, ZERO, x3)\n    return O"], [1.1, "def solve_9bbba443(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, FOUR)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, FOUR)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = hperiod(x22)\n    x35 = hperiod(x26)\n    x36 = interval(x33, x34, ONE)\n    x37 = matcher(x35, x36)\n    x38 = astuple(x33, x37)\n    x39 = lbind(x astuple, x38)\n    x40 = lbind(compose, flip)\n    x41 = lbind(matcher, first)\n    x42 = chain(x39, x"], [1.1, "def solve_0b5463cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d963864a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x"], [1.1, "def solve_839a928e(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_f943f05d(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = vsplit(I, TWO)\n    x4 = hsplit(I, TWO)\n    x5 = astuple(x3, x4)\n    x6 = intersection(x5, x2)\n    x7 = argmax(x6, size)\n    x8 = matcher(x4, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(color, first)\n    x11 = fork(recolor, x10, x9)\n    x12 = rbind(sfilter, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(paint, identity, x13)\n    x15 = toindices(x9)\n    x16 = fgpartition(I)\n    x17 = merge(x16)\n    x18 = normalize(x17)\n    x19 = SEVEN(x18)\n    x20 = initset(x19)\n    x21 = insert(x7, x20)\n    x22 = product(x21, x19)\n    x23 = EIGHT(x22)\n    x24 = ofcolor(x23, x10)\n    x25 = inbox(x24)\n    x26 = difference(x25, x24)\n    x27 = fill(x23, x10, x26)\n    x28 = NEG_UNITY(x27)\n    x29 = initset(x28)\n    x30 = recolor(x24, x29)\n    x31 = fill(x27, x10, x30)\n    x32 = ofcolor(x31, x10)\n    x33 = ulcorner(x2)\n    x34 = shift(x32, x33)\n    x35 = lrcorner(x322)\n    x36 = shift(x34, x35)\n    x37 = fill(x31, x10, x36)\n    x38 = ofcolor(x37, x10)\n    x39 = sizefilter(x38, ONE)\n    x"], [1.1, "def solve_779f532a(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_54b92419(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_8d7b81ff(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = decrement(x17)\n    x19 = mapply(x16, x x18)\n    x20 = intersection(x4, x4)\n    x21 = combine(x16, x20)\n    x22 = fill(x3, ZERO, x21)\n    x23 = astuple(x18, x19)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = lbind(shift, x25)\n    x27 = height(x3)\n    x28 = decrement(x27)\n    x29 =mapply(x26, x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    x32 = asindices(x31)\n    x33 = lbind(shift, x32)\n    x34 = ofcolor(x33, ZERO)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = objects(x38, T, T, T)\n    x38 = insert(x37, x37)\n    x39 = add(x37, THREE)\n    x40 = asindices(x39)\n    "], [1.1, "def solve_0210594b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(lowermost, x1)\n    x3 = compose(rightmost, x1)\n    x4 = fork(equality, x2, x3)\n    x5 = compose(toivec, x4)\n    x6 = lbind(apply, initset)\n    x7 = compose(x6,666404)\n    x8 = fork(inter260, x5, x7)\n    x9 = compose(rot90, x8)\n    x10 = compose(rot180, x8)\n    x11 = compose(rot270, x8)\n    x12 = fork(equality, x9, x11)\n    x13 = fork(either, x10, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(14, x8)\n    x16 = fork(compose, x13, x15)\n    x17 = width(I)\n    x18 = height(I)\n    x19 =596(I)\n    x20 = decrement(x18)\n    x21 = lbind(astuple, x20)\n    x22 = chain(increment, x21, x16)\n    x23 = fork(greater, x26, x22)\n    x24 = compose(x23, x14)\n    x25 = sfilter(x19, x24)\n    x26 = lbind(apply, initset)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x24, x27)\n    x29 = fork(rapply, x28, x26)\n    x30 = compose(initset, x29)\n    x31 = fork(rapply, x30, x25)\n    x32 = compose(first, x31)\n    x33 = fork(remove, x32, last)\n    x34 = fork(astuple, x40, x33)\n    x35 = size(x1)\n    x36 = power(x34, x35)\n    x37 = astuple(x36, x333)\n    x38 = x34(I)\n"], [1.1, "def solve_3ff06587(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x66)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_d7837f2c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(bordering, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(color, x1)\n    x8 = totuple(x3)\n    x9 = apply(color, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, x1)\n    x12 = repeat(x10, ONE)\n    x13 = x11(x12)\n    x14 = x11(x4)\n    x15 = x11(x14)\n    x16 = x11(x13)\n    x17 = x11(x16)\n    x18 = apply(leftmost, x15)\n    x19 = leftmost(x18)\n    x20 = subtract(x19, x18)\n    x21 = double(x20)\n    x22 = astuple(THREE, x21)\n    x23 = repeat(x22, ONE)\n    x24 = merge(x23)\n    x25 = dmirror(x24)\n    x26 = astuple(x25, x24)\n    x27 = combine(x26, x23)\n    x28 = multiply(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = astuple(x26, x29)\n    x31 = dmirror(x30)\n    x32 = combine(x30, x31)\n    x33 = combine(x28, x32)\n    x34 = recolor(x25, x33)\n    x35 = mostcolor(I)\n    x36 = x35(x4)\n    x37 = paint(x16, x36)\n    x38 = paint(x37, x34)\n    x39 = height(x38)\n    x40 = width(x38)\n    x41 = astuple(x39, x40)\n    x42 = crop(x38, ORIGIN, x41)\n    x43 ="], [1.1, "def solve_cb8a8a34(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(raindices, x24)\n    x26 = chain(x20, x25, last)\n    x27 = fork(compose, x26, x22)\n    x28 = chain(x16, x27, x6)\n    x29 = rbind(contained, x5)\n    x30 = chain(x29, first, last)\n    x31 = compose(x27, x30)\n    x32 = chain(x16, x27, x6)\n    x33 = fork(contained(x32, x31)\n    x34 = fork(1997, x33, x28)\n    x35 = fork(59eb, x24, x28)\n"], [1.1, "def solve_0275d5bf(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x29, last)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine,"], [1.1, "def solve_653cf0fd(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0aaf94f3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_91125bee(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_bb312312(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = chain(x1, positive, dmirror)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = initset(x9)\n    x13 = insert(x11, x12)\n    x14 = backdrop(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = dmirror(x20)\n    x22 = ofcolor(x20, x11)\n    x23 = compose(palette, last)\n    x24 = rbind(remove, x23)\n    x25 = chain(x24, remove, first)\n    x26 = ofcolor(x20, x26)\n    x27 = rightmost(x26)\n    x28 = leftmost(x26)\n    x29 = ofcolor(x20, x13)\n    x30 = leftmost(x29)\n    x31 = greater(x27, x30)\n    x32 = ofcolor(x20, x15)\n    x33 = leftmost(x31)\n    x34 = rightmost(x31)\n    x35 = astuple(x32, x34)\n    x36 = astuple(x32, x35)\n    x37 = greater(x33, x36)\n    x38 = rightmost(x33)\n    x39 = leftmost(x33)\n    x40 = subtract(x38, x39)\n    x41 = astuple(x37"], [1.1, "def solve_51e10f6a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(first, x34)\n    x38 = portrait(x37)\n    x39 = branch(x38, x35, x34)\n    x40 = branch(x38, x35, x34)\n    x"], [1.1, "def solve_88f1239a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2136be83(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x04, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_1e260436(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = matcher(identity, ZERO)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmax(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = fork(4000,0100, vmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, ONE)\n    x11 = fork(both, x7, x10)\n    x12 =11(I)\n    x13 =\n    x14 = extract(x12, x11)\n    x15 = first(x13)\n    x16 = last(x13)\n    x17 = palette(x15)\n    x18 = equality(x17, x12)\n    x19 =457(x15)\n    x20 = repeat(x16, x19)\n    x21 =057(x20, UNITY)\n    x22 =457(x21)\n    x23 = asindices(x22)\n    x24 = ofcolor(x12, ZERO)\n    x25 = ofcolor(x12, x16)\n    x26 = intersection(x24, x25)\n    x27 = outbox(x13)\n    x28 = difference(x27, x26)\n    x29 = subgrid(x28, x12)\n    x30 = intersection(x23, x26)\n    x31 = outbox(x30)\n    x32 = frontiers(x31)\n    x33 = mapply(toindices, x32)\n    x34 = difference(x33, x30)\n    x35 = toobject(x34, x69)\n    x36 = objects(x12, T, F, T)\n    x37 = rbind(colorcount, x12)\n    x38 = argmax(x36, x37)\n    x39 = rbind(colorcount, x12)\n    x40 = apply(x19, x2)\n    x41 = remove(x38, x40"], [1.1, "def solve_36c0f792(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_8bdb17e6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_093a9904(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_48ebe9ca(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = center(x5)\n    x7 = rbind(shoot, x6)\n    x8 = center(x2)\n    x9 = rbind(shoot, x8)\n    x10 = center(x5)\n    x11 = rbind(shoot, x10)\n    x12 = decrement(x1)\n    x13 = tojvec(x12)\n    x14 = rbind(shoot, x13)\n    x15 = decrement(x2)\n    x16 = astuple(x12, x15)\n    x17 = double(x16)\n    x18 = shoot(x11, x17)\n    x19 = shoot(x6, x18)\n    x20 = combine(x17, x19)\n    x21 = center(x2)\n    x22 = invert(x21)\n    x23 = power(x22, TWO)\n    x24 = asindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = lbind(multiply, x25)\n    x27 = apply(x26, x3)\n    x28 = mapply(x27, x27)\n    x29 = mapply(x28, x25)\n    x30 = paint(I, x29)\n    x31 = objects(x30, F, T, T)\n    x32 = argmax(x31, numcolors)\n    x33 = subgrid(x32, x30)\n    x34 = interval(ONE, SIX, ONE)\n    x35 = lbind(power, rot90)\n    x36 = lbind(power, outbox)\n    x37 = chain(x35, x36, x000)\n    x38 = apply(x37, x34)\n    x39 = lbind(dedupe, x38)\n    x40 = lbind(chain, x39)\n"], [1.1, "def solve_d964881b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(toobject, x1)\n    x5 = matcher(x4, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = ofcolor(I, ONE)\n    x9 = rbind(contained, x8)\n    x10 = lbind(rbind,adjacent)\n    x11 = compose(x10, initset)\n    x12 = chain(x11, x9, last)\n    x13 = sfilter(x5, x12)\n    x14 = fill(I, ZERO, x13)\n    x15 = ZERO(x5)\n    x16 = gravitate(x15, x14)\n    x17 = replace(x16, ONE, x15)\n    x18 = trim(x17)\n    x19 = x15(x18)\n    x20 = x12(x19)\n    x21 = apply(first, x20)\n    x22 = asobject(x21)\n    x23 = apply(first, x22)\n    x24 =mapply(dneighbors, x23)\n    x25 = mapply(toobject, x24)\n    x26 = cultural verb25(x25)\n    x27 = mostcolor(I)\n    x28 = ofcolor(x25, x27)\n    x29 = asindices(x28)\n    x30 = box(x29)\n    x31 = difference(x30, x28)\n    x32 = toobject(x31, x25)\n    x33 = apply(position, x32)\n    x34 = shift(x30, x33)\n    x35 = ofcolor(x26, x27)\n    x36 = recolor(x27, x34)\n    x37 = shift(x45, x36)\n    x38 = ofcolor(x28, x27)\n    x39 = mapply(toindices, x38)\n    x40"], [1.1, "def solve_55c9016a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =799(I)\n    x2 = Fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, portrait, x8)\n    x10 = branch(x00000, identity, rot90)\n    x11 = fork(even, branch, rot180)\n    x12 = compose(flip, x11)\n    x13 = rbind(sfilter, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x13)\n    x16 = chain(first, x14, x15)\n    x17 = rbind(branch, I)\n    x18 = rbind(x17, x16)\n    x19 = chain(initset, x18, x16)\n    x20 = fork(rapply, x19, x16)\n    x21 = compose(initset, x12)\n    x22 = fork(rapply, x21, x16)\n    x23 = compose(initset, x12)\n    x24 = fork(rapply, x23, x16)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, TWO)\n    x27 = x26(x22)\n    x28 = first(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, UNITY)\n    x31 = branch(x29, x30, x22)\n    x32 = initset(x15)\n    x33 = NEG_ONE(x32)\n    x34 = shift(x33, x33)\n    x35 = branch(x33, x24, x28)\n    x36 = interval(x35, ONE, x153)\n    x37 = pair(x36, x34)\n    x38 = fork(multiply,"], [1.1, "def solve_5e4fa839(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = positive(x1)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(comb"], [1.1, "def solve_206a4c7d(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(x1, first)\n    x3 = rbind(compose, last)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(center, first)\n    x8 = compose(center, last)\n    x9 = fork(subtract, x7, x8)\n    x10 = fork(multiply, x7, x5)\n    x11 = fork(add, x8, x10)\n    x12 = compose(halve, x11)\n    x13 = fork( interval, tojvec, x12)\n    x14 = compose(x13, x7)\n    x15 = fork(multiply, x5, THREE)\n    x16 = fork(add, x14, x15)\n    x17 = fork( tojvec, x12, x16)\n    x18 = fork(apply, x17, x14)\n    x19 = fork(apply, x18, x16)\n    x20 =     dimensional_trial)\n    x21 = lbind(ofcolor, I)\n    x22 = palette(I)\n    x23 = compose(x21, x22)\n    x24 = argmax(x22, x23)\n    x25 = fork(subtract, label, x24)\n    x26 = decrement(x25)\n    x27 = toivec(x26)\n    x28 = shoot(x27, UNITY)\n    x29 = fgpartition(I)\n    x30 = merge(x29)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, leftmost)\n    x33 = fork(subtract, rbind, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x28)\n    x36 = fill(I, x24, x35)\n    x37 = fill(x36, x24, x1)\n    x38 = fill("], [1.1, "def solve_427d4a8b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 =ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_60af70bc(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x33 = sfilter(x38, x33)\n    x34 = apply(first, x33"], [1.1, "def solve_c92c4acd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = repeat(x24, ONE)\n    x26 = combine(x3, x25)\n    x27 = paint(x16, x26)\n    x28 = astuple(vmirror, hmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = canvas(x8, x28)\n    x31 = asindices(x30)\n    x32 = combine(x29, x31)\n    x33 = subtract(NINE, x32)\n    x34 = astuple(VEN, x33)\n    x35 = astuple(cmirror, dmirror)\n    x36 = astuple(hmirror, vmirror)\n    x37 = combine(x35, x36)\n    x38 = astuple(x334, x000000)\n    x39 = astuple(x380, cmirror)\n    x40 = combine(x38, x39)\n    x41 = fill(x37"], [1.1, "def solve_9b0f28c5(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivecfac9412)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_28d3e048(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_69236ba2(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_dda02bbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_969594f8(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x61, TWO)\n    x37 = lbind(colorcount, x23)\n    x38 = argmax(x36, x37)\n    x39 = ofcolor(x23, x28)\n    "], [1.1, "def solve_b5d0cad0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = initset(ORIGIN)\n    x2 = difference(x1, x1)\n    x3 = power(first, TWO)\n    x4 = first(x2)\n    x5 = lbind(c8f9)\n    x6 = lbind(eb281, x4)\n    x7 = lbind(lbind, shift)\n    x8 = compose(x5, x7)\n    x9 = lbind(rbind, shift)\n    x10 = compose(x9, x8)\n    x11 = fork(compose, x7, x10)\n    x12 = lbind( solve, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, identity, x13)\n    x15 = fork(difference, identity, x14)\n    x16 = lbind(rbind, intersection)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x15)\n    x19 = fork(lbind, x17, x18)\n    x20 = compose(x17, x19)\n    x21 = fork(rot90, x20, x19)\n    x22 = power(x21, FOUR)\n    x23 = x22(I)\n    x24 = fork(rot180, x22, x19)\n    x25 = power(x24, FOUR)\n    x26 = x25(x23)\n    x27 = x25(x22)\n    x28 = fork(rot180, x26, x27)\n    x29 = fork(mapply, x28, x26)\n    x30 = compose(x29, x21)\n    x31 = fork(paint, identity, x30)\n    x32 = x31(x9)\n    x33 = objects(x32, T, F, F)\n    x34 = colorfilter(x33, TWO)\n    x35 = first(x34)\n    x36 = lbind(adjacent, x35)\n    x37 =x36(x36)\n    x38 = fgpartition(x32)\n    x39 = merge("], [1.1, "def solve_7d467376(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_c8269178(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = ONE(I)\n    x2 = increment(TWO)\n    x3 = increment(x2)\n    x4 = astuple(x3, x3)\n    x5 = astuple(THREE, ORIGIN)\n    x6 = astuple(THREE, ZERO_BY_TWO)\n    x7 = crop(x5, ORIGIN, x6)\n    x8 = crop(x3, ZERO_BY_TWO)\n    x9 = Zconcat(x7, x8)\n    x10 = hconcat(x9, x7)\n    x11 = hconcat(x10, x8)\n    x12 = vconcat(x11, x11)\n    x13 = vconcat(x12, x12)\n    x14 = hconcat(x13, x11)\n    x15 = hconcat(x14, x10)\n    x16 = vconcat(x15, x11)\n    x17 = vconcat(x16, x10)\n    x18 = cellwise(x17, x9,x1)\n    x19 = asobject(x18)\n    x20 = mostcolor(I)\n    x21 = matcher(first, x20)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x19, x22)\n    x24 = apply(initset, x23)\n    x25 = sfilter(x24, x4)\n    x26 = frontiers(I)\n    x27 = sfilter(x26, x22)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, identity, dmirror)\n    x31 = x30(I)\n    x32 = lefthalf(x31)\n    x33 = righthalf(x31)\n    x34 = vmirror(x33)\n    x35 = vmirror(x34)\n    x36 = shape(x35)\n    x37 = multiply(x36, x36)\n    x38 = add(x37, ZERO)\n    x39 = canvas(x"], [1.1, "def solve_f41f0c20(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(add, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a39a19c6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_533b4fa0(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(vfrontier, x5)\n    x7 = mapply(hfrontier, x5)\n    x8 = uppermost(x7)\n    x9 = leftmost(x7)\n    x10 = greater(x8, x9)\n    x11 = uppermost(x7)\n    x12 = greater(x8, x11)\n    x13 = either(x10, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(I)\n    x16 = center(x15)\n    x17 = hfrontier(x16)\n    x18 = add(x16, x17)\n    x19 = shift(x18, x16)\n    x20 = x14(x19)\n    x21 = palette(x20)\n    x22 = remove(ZERO, x21)\n    x23 = other(x22, x12)\n    x24 = ofcolor(x20, x23)\n    x25 = mapply(neighbors, x24)\n    x26 = difference(x25, x24)\n    x27 = toobject(x26, x50)\n    x28 = add(x25, x27)\n    x29 = shift(x28, x27)\n    x30 = fill(x5, x23, x29)\n    x31 =bordering(x30)\n    x32 =3333(x31, x30)\n    x33 = fork(both, x24, x32)\n    x34 = extract(x28, x33)\n    x35 = other(x28, x34)\n    x36 = ofcolor(x20, x23)\n    x37 = initset(x36)\n    x38 = shift(x37, UNITY)\n    x39 = fill(x30, x23, x38)\n    x40 = shift"], [1.1, "def solve_4a4f5673(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_40ba5af8(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1dad6357(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x31 = shape(I)\n    x32 = decrement(x31)\n    x33 = initset(x32)\n    x34 = insert(x19, x33)\n    x35 = astuple(x21, x26)\n    x36 = astuple(x31, x35)\n    x37 = combine(x35, x36)\n    x38 = lefthalf(I)\n    x39 = righthalf(I)\n    x40 = bottomhalf(x39)\n    x41 = mostcolor(x38)\n    "], [1.1, "def solve_a4429cb9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8a69493a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(4258, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(4 fgpartition, x17)\n    x23 = merge(x22)\n    x24 =0000000(x23)\n    x25 = matcher(first, x10)\n    x26 = compose(flip, x25)\n    x27 = asindices(x16)\n    x28 = delta(x27)\n    x29 = lbind(fork, manhattan)\n    x30 = lbind(x29, identity)\n    x31 = lbind(compose, initset)\n    x32 = lbind(rbind, manhattan)\n    x33 = compose(x31, x32)\n    x34 = lbind(lbind, greater)\n    x35 = chain(x34, x33, x25)\n    x36 = compose(x36, x25)\n    x37 = fork(contained, x36, x40)\n    x38 = compose(x37, x27)\n    x39 = lbind(lbind,ANGEmatch)\n    x40 = chain(x39, x33, x33)\n    x41 = fork("], [1.1, "def solve_7540585f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract,x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_5835846c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 =TWO(x28)\n    x40 = x19(x39)\n    x41 = x16(x40)\n"], [1.1, "def solve_9af4a8be(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, size)\n"], [1.1, "def solve_eb021fbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_5828824f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_2202c643(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_871653b5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d2b59785(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = dmirror(x23)\n    x25 = asobject(x24)\n    x26 = shape(x12)\n    x27 = shift(x25, x26)\n    x28 = ofcolor(x13, x6)\n    x29 = paint(x13, x28)\n    x30 = ofcolor(x29, x4)\n    x31 = initset(x40)\n    x32 = insert(x15, x31)\n    x33 = insert(x16, x32)\n    x34 = insert(x19, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x31, x36)\n    x38 = ofcolor(x13, x6)\n    x39 = height(x38)\n    x40 = insert(x39, x38)\n    x41 = destructive height(x40)\n    x42 = width(x38)"], [1.1, "def solve_909253d8(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8cc2a21b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x40, x22)\n    x36 = x35(x10)\n    x37 = x35(xI)\n    x38 = x35(x74"], [1.1, "def solve_311a245d(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d95cba31(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_de116543(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x24)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x24)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x24)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x24)"], [1.1, "def solve_d195e4c1(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(x5, x5)\n    x7 = fill(x6, FIVE, x3)\n    x8 = objects(x7, F, F, T)\n    x9 = argmax(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = remove(x9, x8)\n    x12 = toindices(x10)\n    x13 = lbind(intersection, x12)\n    x14 = chain(x13, dneighbors, last)\n    x15 = rbind(greater, x10)\n    x16 = chain(x15, dedupe, last)\n    x17 = fork(greater, x14, x16)\n    x18 = compose(x15, first)\n    x19 = chain(size, dedupe, x18)\n    x20 = size(x11)\n    x21 = equality(x19, x20)\n    x22 = branch(x21, uintcorner, vmirror)\n    x23 = x22(x10)\n    x24 = objects(x7, T, F, T)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, x7)\n    x27 = asobject(x26)\n    x28 = matcher(first, ZERO)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x25, x29)\n    x31 = lefthalf(x30)\n    x32 = righthalf(x30)\n    x33 = palette(x31)\n    x34 = lbind(intersection, x33)\n    x35 = chain(size, x34, toindices)\n    x36 = sfilter(x32, x35)\n    x37 = rbind(shift, x31)\n    x38 = lbind(occurrences, x779)\n    x"], [1.1, "def solve_b67cec33(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_706cc69b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_52297eaa(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_39bb83e5(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =6666(I)\n    x2 =6666(I)\n    x3 = index(x1, ORIGIN)\n    x4 = decrement(x1)\n    x5 = positive(x3)\n    x6 = branch(x5, x4, x1)\n    x7 = crop(x1, ORIGIN, THREE_BY_THREE)\n    x8 = asobject(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fork(both, x lefthalf, tophalf)\n    x13 = sfilter(x11, x12)\n    x14 = compose(dmirror, vmirror)\n    x15 = argmin(x13, x14)\n    x16 = width(x11)\n    x17 =66(ONE, x16)\n    x18 = tojvec(x17)\n    x19 = index(x11, x18)\n    x20 = uppermost(x11)\n    x21 = matcher(first, x20)\n    x22 =sfilter(x11, x21)\n    x23 = leftmost(x11)\n    x24 = matcher(first, x23)\n    x25 = sfilter(x11, x24)\n    x26 = width(x11)\n    x27 = invert(x26)\n    x28 = tojvec(x27)\n    x29 = index(x11, x28)\n    x30 = astuple(x24, x22)\n    x31 = initset(x30)\n    x32 = cover(x11, x31)\n    x33 =sfilter(x3, x32)\n    x34 = height(x11)\n    x35 = astuple(x24, x22)\n    x36 = astuple(x31, x35)\n    x37 = subtract(x36, x30)\n    x38 = crop(x37,Example output:\n    00006\n    00020\n    00003\n    00002\n    0020\n    \"\"\"\n    x1"], [1.1, "def solve_3b663fe0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = lowermost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_b5c657cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shift(x23, x26)\n    x28 = toindices(x27)\n    x29 = lbind(add, DOWN)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x29, x28)\n    x32 = rbind(shoot, RIGHT)\n    x33 = mapply(x32, x28)\n    x34 = lowermost(x23)\n    x35 = invert(x34)\n    x36 = manhattan(x35, x32)\n    x37 = rightmost(x23)\n    x38 = decrement(x37)\n    x39 = matcher(x38, x34)\n"], [1.1, "def solve_122be82e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_f5f5c7a5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = astuple(x15, x18)\n    x26 = portrait(x24)\n    x27 = branch(x26, identity, cmirror)\n    x28 = x27(x3)\n    x29 = dmirror(x28)\n    x30 = branch(x24, identity, height)\n    x31 = x30(xmirror)\n    x32 = decrement(x31)\n    x33 = rbind(toobject, x35)\n    x34 = rbind(colorcount, ZERO)\n    x35 = chain(x33, x34, x31)\n    x36 = matcher(x35, x32)\n    x37 = sfilter(x4, x36)\n    x38 = compose(color, x37)\n    x39 = multiply(x84, LEFT)\n    x40 = rbind(greater"], [1.1, "def solve_4e5017db(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multcorner, x12)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_f13645d1(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =Example output:\n    6661\n    564\n    5499\n    1346\n    1469\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, identity, shape)\n    x4 = x3(I)\n    x5 = maximum(x3)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = x3(I)\n    x9 = height(I)\n    x10 = decrement(x9)\n    x11 = multiply(x10, x5)\n    x12 = crop(I, ORIGIN, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = hmirror(x15)\n    x17 = vmirror(x12)\n    x18 = combine(x13, x16)\n    x19 = product(x18, x18)\n    x20 = argmax(x19, size)\n    x21 = apply(color, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x13, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x14, x23)\n    x27 = uppermost(x24)\n    x28 = greater(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = last(x28)\n    x31 = remove(x30, x8)\n    x32 =Lo repeat(x31, ONE)\n    x33 = first(x32)\n    x34 = branch(x22, x33, x25)\n    x35 = branch(x26, x28, x30)\n    x36 = branch(x29, x32, x35)\n    x37 = apply(normalize, x31)\n    x38 = astuple(x31, x37)\n    x39 = remove(x38, x31)\n    x40 = apply(ulcorner, x39)\n    x41 = rbind("], [1.1, "def solve_264e2f5e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_d560feb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b4eb549b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(TEN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x11, x18)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = height(x21)\n    x24 = decrement(x23)\n    x25 = lbind(astuple, x24)\n    x26 = lbind(shift, x21)\n    x27 =compose(x25, x26)\n    x28 = apply(x27, x3)\n    x29 =389(x28)\n    x30 = argmax(x80, x29)\n    x31 = matcher(first, x3)\n    x32 =sfilter(x30, x31)\n    x33 = apply(dneighbors, x32)\n    x34 = lbind(shift, x32)\n    x35 = mapply(x34, x33)\n    x36 = double(x24)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x34)\n    x39 = lbind(shift, x32)\n    x40 = mapply(x39, x38)\n    x41 = cover(I,"], [1.1, "def solve_bd33027e(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_fc39db2b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = intersection(x1, x5)\n    x7 = lbind(colorcount, x4)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, color)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, x4)\n    x14 = argmax(xofcolor, x13)\n    x15 = ofcolor(x14, x8)\n    x16 = apply(initset, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, x12, x15)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x16)\n    x22 = objects(x4, T, F, F)\n    x23 = colorfilter(x22, x8)\n    x24 = rbind(manhattan, xcorIGIN)\n    x25 = chain(first, x24, last)\n    x26 = sfilter(x23, x25)\n    x27 = compose(rightmost, x25)\n    x28 = compose(minimum, x25)\n    x29 = fork(subtract, x28, x27)\n    x30 = fork(add, x29, x21)\n    x31 = rbind(contained, x15)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(asindices, x33, x20)\n    x35 = fork(difference, x29, x34)\n    x36 = fork(add, x34, x35)\n    x37 = fork(connect, x30, x36)\n    x38 = rbind(mapply,"], [1.1, "def solve_3a8a8763(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(vsplit, height, width)\n    x7 = x6(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = palette(x7)\n    x11 = remove(x9, x10)\n    x12 = other(x11, x1)\n    x13 = combine(x12, x7)\n    x14 = shape(x13)\n    x15 = canvas(x1, x14)\n    x16 = hconcat(x15, x13)\n    x17 = objects(x16, T, F, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, ORIGIN)\n    x20 = argmin(x18, x19)\n    x21 = remove(x20, x18)\n    x22 = TEN(flow)\n    x23 = input:\n    x22, x21)\n    x24 = argmin(x22, x23)\n    x25 =909(x24, DOWN)\n    x26 = uppermost(x25)\n    x27 = rightmost(x24)\n    x28 = astuple(x26, x27)\n    x29 = leftmost(x24)\n    x30 = leftmost(x27)\n    x31 = astuple(x29, x30)\n    x32 = add(x28, x31)\n    x33 = initset(x32)\n    x34 = ofcolor(x33, x12)\n    x35 = sizefilter(x34, ONE)\n    x36 = lbind(vmatching, x34)\n    x37 = fork(either, x35, x36)\n    x38 = rbind(gravitate, x34)\n    x39 = compose(x38, initset)\n    x40 = fork(add,"], [1.1, "def solve_1903dfb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_183c8c42(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_bfdb8162(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = tophalf(x3)\n    x5 = lefthalf(x4)\n    x6 = tophalf(x2)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(x2)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = righthalf(x9)\n    x12 = index(x4, ORIGIN)\n    x13 = width(x12)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = index(x3, x15)\n    x17 = height(x6)\n    x18 = decrement(x17)\n    x19 = toivec(x18)\n    x20 = index(x3, x19)\n    x21 = shape(x7)\n    x22 = decrement(x21)\n    x23 = index(x3, x22)\n    x24 = compress(x4)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = fill(x28, x30, x26)\n    x30 = ofcolor(x29, x27)\n    x31 = ulcorner(x30)\n    x32 = index(x3, x31)\n    x33 = lrcorner(x30)\n    x34 = add(x33, UNITY)\n    x35 = initset(x34)\n    x36 = cover(x29, x35)\n    x37 = ofcolor(x36, x27)\n    x38 = urcorner(x37)\n    x39 = add(x38, ulcorner)\n    x50 =676(x39)\n    x51 = initset(x50)\n    x52 = fill(x36, x27, x51)\n    O"], [1.1, "def solve_799c7858(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(rot90, x6, x23)\n    x25 = power(x24, TWO)\n    x26 = x25(I)\n    x27 = palette(x26)\n    x28 = lbind(ofcolor, x26)\n    x29 = compose(leftmost, x28)\n    x30 = matcher(x29, ZERO)\n    x31 = palette(x26)\n    x32 = rightmost(x26)\n    x33 = matcher(x32, ZERO)\n    x34 = fork(either, x30, x33)\n    x35 = palette(x26)\n    x36 = rightmost(x26)\n    x37 = matcher(x36, ZERO)\n    x38 = fork(either, x35, x37)"], [1.1, "def solve_e2056b27(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =6666(I)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = double(x2)\n    x7 = canvas(x5, x6)\n    x8 = paint(x7, x2)\n    x9 = shape(I)\n    x10 = decrement(x9)\n    x11 = index(I, x10)\n    x12 = divide(x33, x11)\n    x13 = astuple(x10, x12)\n    x14 = canvas(x11, x13)\n    x15 = paint(x14, x2)\n    x16 = width(I)\n    x17 = ulcorner(x2)\n    x18 = width(I)\n    x19 =678(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = canvas(x11, x20)\n    x22 = hconcat(I, x21)\n    x23 = hsplit(x22, TWO)\n    x24 = merge(x23)\n    x25 = last(x23)\n    x26 = vmirror(x25)\n    x27 = vconcat(x22, x26)\n    O = vconcat(x27, x24)\n    return O"], [1.1, "def solve_dbedb1fd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x11, x20)\n    x22 = other(x21, x15)\n    x23 =6 ofcolor(I, x22)\n    x24 = mapply(neighbors, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x19)\n    x28 =4612f35(x23)\n    x29 = ofcolor(I, x27)\n    x30 = sfilter(x29, x28)\n    x31 = subgrid(x30, I)\n    x32 = ofcolor(x31, x19)\n    x33 = mapply(neighbors, x32)\n    x34 = toobject(x33, x31)\n    x35 = objects(x39, T, F, F)\n    x36 = sizefilter(x35, ONE)\n    x37 = merge(x36)\n    O = subgrid(x37, x31)\n    return O"], [1.1, "def solve_15fde576(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =201(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.1, "def solve_c855f467(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = mostcolor(I)\n    x8 = ofcolor(x6, x7)\n    x9 = leastcolor(x6)\n    x10 = ofcolor(x1, x9)\n    x11 = combine(x8, x10)\n    x12 = intersection(x8, x10)\n    x13 = difference(x11, x12)\n    O = fill(x6, fill(x6, x11)\n    return O"], [1.1, "def solve_04b9b4ef(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = astuple(TWO, ONE)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, asindices)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, x5)\n    x12 = chain(x8, x6, x5)\n    x13 = compose(x9, x6)\n    x14 = fork(mapply, x11, x12)\n    x15 = fork(mapply, x11, x13)\n    x16 = fork(lastuple, x14, x15)\n    x17 = repeat(x16, TWO)\n    x18 = mapply(x16, x2)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = paint(I, x20)\n    x22 = shift(x20, UNITY)\n    x23 = paint(x21, x22)\n    x24 =571(x28)\n    x25 = ulcorner(x24)\n    x26 = subgrid(x24, x25)\n    x27 = compose(toindices, normalize)\n    x28 = matcher(x27, x18)\n    x29 = normalize(x24)\n    x30 = sfilter(x29, x28)\n    x31 = difference(x29, x30)\n    O = fill(x23, ZERO, x31)\n    return O"], [1.1, "def solve_be0faf5b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = rbind(Sfilter, TWO)\n    x2 = apply(x1, I)\n    x3 = contained(TWO, x2)\n    x4 = branch(x3, height, width)\n    x5 = x4(I)\n    x6 = partition(I)\n    x7 = palette(x6)\n    x8 = matcher(identity, x5)\n    x9 = argmin(x7, x8)\n    x10 = color(x9)\n    x11 =92(85, toindices)\n    x12 = apply(x11, x10)\n    x13 = TIREE(x12)\n    x14 = branch(x13, hmirror, vmirror)\n    x15 = x14(x6)\n    x16 = x13(x15)\n    x17 = shape(x6)\n    x18 = canvas(x10, x17)\n    x19 = TWO_BY_TWO)\n    x20 = paint(x18, x19)\n    x21 = rbind(tocount, SIX)\n    x22 = apply(x21, x2)\n    x23 = normalize(x22)\n    x24 = color(x23)\n    x25 = remove(x23, x26)\n    x26 = other(x25, x24)\n    x27 = ofcolor(x26, x24)\n    x28 = last(x27)\n    x29 = ofcolor(x25, x24)\n    x30 = rbind(intersection, x28)\n    x31 = mapply(x30, x29)\n    O = fill(x23, x47, x31)\n    return O"], [1.1, "def solve_3331e564(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = UNITY(I)\n    x2 =31(x1)\n    x3 = decrement(x2)\n    x4 = tojvec(x3)\n    x5 = shoot(x4, UP_RIGHT)\n    x6 = shift(x5, UNITY)\n    O = fill(I, THREE, x6)\n    return O"], [1.1, "def solve_fb9e858f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersectionx15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.1, "def solve_f1f6b9c7(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = input:\n    8888888989\n    8888888989\n    8888888989\n    5555585555\n    4555555555\n    4555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [1.1, "def solve_35608ece(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, numcolors)\n    x4 = difference(x3, x2)\n    x5 = apply(initset, x4)\n    x6 = rbind(404a4755\n    b27 upper3846\n    11111151\n    429511529\n    uple ofcolor(I, x1)\n    x1 = prapply(connect, x5, x6)\n    x2 = compose(72,175)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, x1, x3)\n    x5 = fork(recolor, color, x6)\n    x6 = mapply(x5, x4)\n    O = paint(x4, x6)\n    return O"], [1.1, "def solve_61b4d629(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = rbind(subgrid, x6)\n    x8 = apply(x7, x2)\n    x9 = rot90(x8)\n    x10 = fgpartition(x9)\n    x11 = merge(x10)\n    x12 = solve(x11, x9)\n    x13 = index(x12, ORIGIN)\n    x14 = subgrid(x12, x9)\n    x15 = apply(x7, x12)\n    x16 = rot90(x15)\n    x17 =fgpartition(x16)\n    x18 = merge(x17)\n    x19 =644(x18)\n    x20 = palette(x19)\n    x21 = other(x20, ZERO)\n    x22 = objects(x6, T, F, T)\n    x23 = colorfilter(x22, x21)\n    x24 = sfilter(x21, vline)\n    x25 = difference(x21, x24)\n    x26 = astuple(x25, x26)\n    x27 = rbind(shoot, UP)\n    x28 = mapply(x27, x6)\n    O = fill(x9, x21, x28)\n    return O"], [1.1, "def solve_4dd9eb26(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval( ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = ofcolor(I, ZERO)\n    x11 = ofcolor(I, FOUR)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, x7)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = compose(x13, x17)\n    x19 = rbind(shoot, THREE_BY_THREE)\n    x20 = compose(x14, x19)\n    x21 = rbind(shoot, THREE_BY_THREE)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot,Example output:\n    x27 = fork(recolor, identity, x24)\n    x28 = mapply(x27, x3)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_6a84b1f4(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = compose(x1, shape)\n    x3 = rbind( multiply(TWO, THREE)\n    x4 = rbind(multiply, THREE)\n    x5 = compose(x4, x2)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x1, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = x1(x11)\n    x13 = x2(x10)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(I, x15)\n    O = subgrid(x10, x16)\n    return O"], [1.1, "def solve_2a708adb(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(rapply, I)\n    x2 = initset(I)\n    x3 = lbind(add, DOWN)\n    x4 = chain(first, x1, x3)\n    x5 = compose(x4, decrement)\n    x6 = fork(difference, x5, toindices)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x2, x8)\n    x10 =775(x9)\n    x11 =(x10)\n    x12 = equality(x11, x12)\n    x13 = branch(x12, x11, x8)\n    x14 = shift(x13, UNITY)\n    x15 =27(x14)\n    x16 = ulcorner(x15)\n    x17 = lrcorner(x15)\n    x18 = shape(x15)\n    x19 = maximum(x18)\n    x20 = multiply(THREE, TEN)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = rbind(multiply, x15)\n    x23 = apply(x22, x21)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x21)\n    x26 = pair(x25, x26)\n    x27 = mapply(box, x26)\n    x28 = mapply(x25, x27)\n    O = fill(x10, ZERO, x28)\n    return O"], [1.1, "def solve_af2b8f36(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =6666(I)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, frontiers)\n    x4 = mfilter(x1, x3)\n    O = fill(x1, ZERO, x4)\n    return O"], [1.1, "def solve_76c140d9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =680(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, x1)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = trim(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(identity, x14)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(size, x16)\n    x18 = argmin(x4, x17)\n    x19 = repeat(x18, ONE)\n    x20 = asobject(x19)\n    x21 = palette(x20)\n    x22 = totuple(x21)\n    x23 = first(x22)\n    x24 = last(x22)\n    x25 = neighbors(UNITY)\n    x26 = remove(x23, x25)\n    x27 = recolor(x24, x26)\n    x28 = lbind(shift, x26)\n    x29 = ofcolor(x13, x23)\n    x30 = mapply(x28, x29)\n    x31 = shift(x30, UP_RIGHT)\n    x32 = combine(x27, x31)\n    x33 = paint(x13, x32)\n    O = trim(x33)\n    return O"], [1.1, "def solve_31d34b94(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(8matcher, first)\n    x2 = compose(x1, last)\n    x3 = lbind(multiply, THREE)\n    x4 = compose(x3, x2)\n    x5 = fork(extract, identity, x4)\n    x6 = compose(last, x5)\n    x7 = compose(ff28, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.1, "def solve_84cab0b3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =1111(I)\n    x2 = matcher(identity, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(positive, size, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(dmirror, x6)\n    x8 = power(x7, FOUR)\n    x9 = x8(I)\n    x10 = dedupe(x9)\n    x11 = dmirror(x10)\n    x12 = dedupe(x11)\n    O = dmirror(x12)\n    return O"], [1.1, "def solve_97504b06(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, THREE, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 =\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = lbind(multiply, x14)\n    x16 = decrement(x15)\n    x17 = lbind(outbox, x9)\n    x18 = initset(x17)\n    x19 = fill(x13, THREE, x18)\n    x20 = outbox(x19)\n    x21 = backdrop(x20)\n    x22 = lbind(toobject, x21)\n    x23 = compose(x22, initset)\n    x24 = ofcolor(x19, ONE)\n    x25 = sfilter(x24, x23)\n    x26 = difference(x24, x25)\n    x27 = fill(x19, THREE, x26)\n    x28 = interval(x8, x12, ONE)\n    x29 = rbind(multiply, x14)\n    x30 = apply(x29, x28)\n    x31 = lbind(shift, x24)\n    x32 = mapply(x31, x30)\n    O = fill(x27, TWO, x32)\n    return O"], [1.1, "def solve_c55e563f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = dmirror(I)\n    x3 =081928e5(x2)\n    x4 = lbind(shift, x3)\n    x5 = rbind(difference, x1)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = partition(I)\n    x9 = sfilter(x8, x7)\n    x10 = argmax(x9, size)\n    x11 = remove(x10, x9)\n    x12 = apply(initset, x11)\n    x13 = toindices(x10)\n    x14 = lbind(argmin, x12)\n    x15 = lbind(rbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = argmin(x13, x16)\n    x18 = cover(I, x10)\n    x19 = paint(x18, x17)\n    x20 = complec(x7)\n    x21 = palette(I)\n    x22 = other(x21, ZERO)\n    x23 = colorcount(x20, x22)\n    x24 = asindices(x20)\n    x25 = ofcolor(x20, x22)\n    x26 = difference(x24, x25)\n    x27 = asobject(x20)\n    x28 = matcher(first, x22)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x27, ulcorner, x29)\n    x31 = fork(shift, identity, x30)\n    x32 = mapply(x31, x26)\n    x33 = paint(x19, x32)\n    O = x23(x33)\n    return O"], [1.1, "def solve_197e1496(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x28 = canvas(x24, x25)\n    x29 = paint(x28, x2)\n    x30 = normalize(x11)\n    x31 = matcher(first, x4)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 = paint(x29, x33)\n        O = x21(x34)\n    return O"], [1.1, "def solve_7682831b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(numcolors, x1)\n    x3 = lbind(apply, multiply)\n    x4 = lbind(I, frontiers)\n    x5 = chain(x3, x4, frontiers)\n    x6 = chain(size, dedupe, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = fork(sfilter, x9, x8)\n    x11 = compose(size, x10)\n    x12 = argmin(x2, x11)\n    x13 = rightmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x12)\n    x18 = shift(x17, NEG_UNITY)\n    x19 =171(x16)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x18)\n    x22 = paint(x16, x21)\n    O = x15(x22)\n    return O"], [1.1, "def solve_5c05747b(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = leftmost(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = ofcolor(I, x10)\n    x18 =16(x17)\n    x19 = asindices(x18)\n    x20 = lowermost(x19)\n    x21 = toobject(x20, I)\n    x22 = mostcolor(x21)\n    x23 = ofcolor(I, x22)\n    x24 = uppermost(x23)\n    x25 = toivec(x24)\n    x26 = invert(x25)\n    x27 = rbind(shoot, UP)\n    x28 = rightmost(x27)\n    x29 = equality(x28, x26)\n    x30 = branch(x29, x22, x25)\n    x31 = branch(x29, x27, x25)\n    x32 =22its(x30)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, x26, x25)\n    x36 = branch(x34, x27, x25)\n    x37 = x35(x36)\n    x38 = intersection(x37, x35)\n    x39 = branch(x34, x36, x38)\n    O = x39(x36)\n    return O"], [1.1, "def solve_e0239dc4(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =429(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_33ca9808(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =63(I)\n    x6 = astuple(dmirror, cmirror)\n    x7 = astuple(hmirror, identity)\n    x8 = combine(x6, x7)\n    x9 = rbind(d511f180x8)\n    x10 = rbind(ofcolor, x4)\n    x11 = compose( center, x10)\n    x12 = compose(x19, x11)\n    x13 = chain(x9, vline, x12)\n    x14 = rbind(intersection, x2)\n    x15 = chain(size, x14, x13)\n    x16 = matcher(x15, ZERO)\n    x17 = objects(I, T, F, T)\n    x18 = sfilter(x17, x16)\n    x19 = argmax(x18, size)\n    x20 = matcher(color, x4)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = argmax(x22, size)\n    x24 = replace(I, x4, ZERO)\n    O = paint(x24, x23)\n    return O"], [1.1, "def solve_44de6db7(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = ONE00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_00d2babd(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =977788399000\n    8888248466\n    2422408323\n    53204a843\n    0330528329\n    4042542324\n    8025038323\n    \"\"\"\n    x1 = matcher(first, x3)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = shape(x3)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x3, x8)\n    x10 = multiply(x4, x4)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x9)\n    x13 = multiply(x4, x4)\n    x14 = width(I)\n    x15 = halve(x14)\n    x16 = compose(last, last)\n    x17 = matcher(x16, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x13, x18)\n    O = fill(x12, x3, x19)\n    return O"], [1.1, "def solve_01a38f42(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = size(x2)\n    x23 = positive(x22)\n    x24 = branch(x23, hsplit, vmirror)\n    x25 = x24(I)\n    x26 = first(x25)\n    x27 = lbind(recolor, x21)\n    x28 = lrcorner(x2)\n    x29 = paint(x18, x28)\n    x30 = branch(x5, vmirror, hmirror)\n    x31 = x30(x29)\n     move(x29, x31, x2)\n    O = x30(x32)\n    return O"], [1.1, "def solve_c95e326f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    O =88888(I, TWO)\n    return O"], [1.1, "def solve_65105cab(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x1)\n    x4 =    5899240800\n    48rotExample44\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x2)\n    x4 =5899240800\n    48its\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = equality(x1, x2)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.1, "def solve_30d4beb2(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =2331152277(I)\n    x2 =04227119915, x1)\n    x3 = apply(d406, x2)\n    x4 = lefthalf(x3)\n    x5 = righthalf(x3)\n    x6 = palette(x4)\n    x7 = contained(x6, x5)\n    x8 = contained(x7, x5)\n    x9 = branch(x8, identity, dmirror)\n    x10 = x9(x4)\n    x11 = x9(x5)\n    x12 = canvas(ZERO, THREE_BY_THREE)\n    x13 = branch(x8, identity, vmirror)\n    x14 = x13(x10)\n    x15 = hconcat(x14, x13)\n    x16 = asobject(x15)\n    x17 = occurrences(x16, x3)\n    x18 = first(x17)\n    x19 = ulcorner(x18)\n    x20 = lbind(shift, x18)\n    x21 = occurrences(x16, x9)\n    x22 = mapply(x20, x21)\n    O = fill(x17, ONE, x22)\n    return O"], [1.1, "def solve_d25a7a3e(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =66666666(I, TWO)\n    x2 = rot180(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, x2, x2)\n    O = canvas(x4, UNITY)\n    return O"], [1.1, "def solve_f1132913(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x2)\n    x11 = greater(x10, FOUR)\n    x12 = branch(x11, RIGHT, DOWN)\n    x13 = subgrid(x12, I)\n    x14 = add(RIGHT, DOWN)\n    x15 = decrement(x14)\n    x16 = x9(x15)\n    x17 = height(x13)\n    x18 = fgpartition(x13)\n    x19 = merge(x18)\n    x20 = fill(x13, ZERO, x19)\n    x21 = subtract(x17, x20)\n    x22 = replace(x21, FOUR, ZERO)\n    x23 = width(x13)\n    x24 =630alf(x23, width)\n    x25 = downscale(x12, x24)\n    x26 = ofcolor(x25, FOUR)\n    x27 = fill(x25, ZERO, x26)\n    O = x9(x27)\n    return O"], [1.1, "def solve_c77b1a33(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 =695651860160970\n    x15 =665513890(x12)\n    x16 = solve_694f1293(x15)\n    x17 = tophalf(x16)\n    x18 = numcolors(x17)\n    x19 = lowermost(x16)\n    x20 = lefthalf(x12)\n    x21 = righthalf(x12)\n    x22 = objects(x16, T, F, F)\n    x23 = colorfilter(x22, x3)\n    x24 = merge(x23)\n    x25 = cellwise(x14, x23, x24)\n    x26 = DOWNscale(x25, x18)\n    x27 = crop(x26, ORIGIN, x20)\n    x28 = urcorner(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x28)\n    x31 = apply(initset, x30)\n    x32 = ofcolor(x25, x3)\n    x33 = ofcolor(x25, x8)\n    x34 = intersection(x32, x33)\n    x35 = cover(x5, x20)\n    O = fill(x35, NEG_ONE, x34)\n    return O"], [1.1, "def solve_a67c6f36(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(\n    2885576013\n    6585562088\n    5568272651\n    ulcornerner\n    \"\"\"\n    x2 = lefthalf(I)\n    x3 = righthalf(I)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = tophalf(x3)\n    x7 = bottomhalf(x3)\n    x8 = combine(x4, x5)\n    x9 = combine(x6, x7)\n    x10 = combine(x8, x9)\n    O = fill(x1, TWO, x10)\n    return O"], [1.1, "def solve_ad32f302(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =52R5528\n    x2 =55215\n    x3 = tophalf(I)\n    x4 = lefthalf(x3)\n    x5 = tophalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = Tphalf(x8)\n    x10 = tophalf(x9)\n    x11 = righthalf(x10)\n    x12 = bottomhalf(x11)\n    x13 = lefthalf(x12)\n    x14 =tophalf(x13)\n    x15 = tophalf(x14)\n    x16 = righthalf(x15)\n    x17 = index(I, ORIGIN)\n    x18 = width(I)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = index(I, x20)\n    x22 = height(I)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = index(I, x24)\n    x26 = shape(I)\n    x27 = decrement(x26)\n    x28 = add(x22, x27)\n    x29 = add(x24, x28)\n    x30 = canvas(x11, x29)\n    x31 = asobject(x30)\n    x32 = occurrences(x10, x31)\n    x33 =\n    35(x32)\n    x34 =\n    (normalize, toindices)\n    x35 = lbind(shift, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x10, x36)\n    return O"], [1.1, "def solve_6741114b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =91112(I)\n    x2 = switch(x1, EIGHT, TWO)\n    x3 = switch(x2, TWO, TWO)\n    x4 = switch(x3, ONE, TEN)\n    x5 = fork(combine, vfrontier, hfrontier)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    O = x7(x7)\n    return O"], [1.1, "def solve_90a38d7b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(x3, initset)\n    x5 =78(x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(hmirror, vmirror)\n    x8 =HKapply(x7, x6)\n    x9 = compress(x8)\n    O = fill(x9, ZERO, x3)\n    return O"], [1.1, "def solve_82a2d37c(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =887(I)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_7c17c2b6(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 =\ufffd Bit(x11, uppermost)\n    x13 = ulcorner(x12)\n    x14 = llcorner(x12)\n    x15 = hmatching(x13, x14)\n    x16 = branch(x15, NEG_ONE, ONE)\n    x17 = branch(x15, double, outbox)\n    x18 = initset(x13)\n    x19 = insert(x14, x18)\n    x20 = insert(x16, x19)\n    x21 = recolor(x3, x20)\n    x22 = uppermost(x12)\n    x23 = toivec(x22)\n    x24 = add(x23, x4)\n    x25 = insert(x27, x24)\n    x26 = merge(x27)\n    x27 = cover(x6, x26)\n    x28 = forever package(x27)\n    x29 = astuple(x23, x8)\n    x30 = astuple(x28, x9)\n    x31 = combine(x29, x30)\n    x32 = hfrontier(x31)\n    x33 = vfrontier(x31)\n    x34 = combine(x32, x33)\n    x35 = combine(x31, x34)\n    x36 = fill(x27, x3, x35)\n    x37 = paint(x36, x24)\n    O = paint(x37, x25)\n    return O"], [1.1, "def solve_8c885980(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 =4418228(x1)\n    x3 =241111(x2)\n    x4 = matcher(color, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 =44fcc829(I)\n    x8 = rbind(shoot, UNITY)\n    x9 = mapply(x8, x7)\n    x10 = power(outbox, TWO)\n    x11 = apply(x10, x9)\n    x12 = initset(x2)\n    x13 = insert(x12, x11)\n    x14 = corners(x13)\n    x15 = toobject(x14, I)\n    x16 = mostcolor(x15)\n    x17 = ofcolor(I, x16)\n    x18 = mapply(neighbors, x17)\n    x19 = toindices(x18)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x5)\n    x22 = combine(x19, x21)\n    O = fill(I, x16, x22)\n    return O"], [1.1, "def solve_d6eb9269(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(I)\n    x3 =4444(I)\n    x4 =54444\n    45398831881\n    54568096698\n    43285167973\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = shape(x24)\n    x26 = canvas(x1, x25)\n    x27 = paint(x26, x24)\n    x28 = ofcolor(x27, THREE)\n    x29 = combine(x21, x28)\n    x30 = mapply(x19, x29)\n    x31 = fill(x27, THREE, x30)\n    x32 = x169(x31)\n    x33 =40(x32)\n    x34 = shift(x31, x33)\n    O = fill(x27, THREE, x34)\n    return O"], [1.1, "def solve_df53b005(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = branch(x16, x17, x19)\n    x21 = branch(x12, x16, x20)\n    x22 = branch(x12, x9, x21)\n    x23 = PApply(x22, x21)\n    x24 =280(x23)\n    x25 = branch(x16, x18, x19)\n    x26 = Field(x25, x24)\n    x27 = branch(x8, x22, x25)\n    x28 = fork(combine, vfrontier, hfrontier)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(ofcolor, x12)\n    x31 = palette(x12)\n    x32 = remove(x13, x31)\n    x33 = lbind(43444, x12)\n    x34 = power(x33, x30)\n    x35 = x32(x32)\n    x36 = x30(x34)\n    x37 = fill(x15, x39, x36)\n    x38 = fill(x37, x30, x34)\n    O = fill(x38, x39, x36)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_f4b508cf(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.08173484697705038, "def solve_a3533769(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_cfb94ee5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_c6b891b4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_9a7095b3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_43d5df35(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(toindices, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = objects(x5, T, F, T)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x5, x8)\n    return O"], [0.08173484697705038, "def solve_b0d22c00(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_03da3cd5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_a98f16f8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_f239ea44(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.08173484697705038, "def solve_7f62c837(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.08173484697705038, "def solve_a146ca9a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_3ba524cb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_e3f5a841(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_3b89e135(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_94983672(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_e2e5080c(I):\n    x1 = asindices(I)\n    x2 = recolor(ZERO, x1)\n    x3 = lbind(shift, x2)\n    x4 = occurrences(I, x2)\n    x5 = mapply(x3, x4)\n    O = paint(I, x5)\n    return O"], [0.08173484697705038, "def solve_a075377a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_f09525e7(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.08318632736744225, "def solve_8ea6e1e5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_f5011454(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_a78f4125(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_f700ff56(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_9ffec60d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_1565ebba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_ea79e4e3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_58a82f52(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_55dde4d1(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_816ea530(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_c3e7dda6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_5a71d56d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_1196570b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_d295d8c3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_05894b53(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_717a5c31(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.09095096982684804, "def solve_8c71b7e0(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O"], [0.12098612632347573, "def solve_796e08f3(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.12284772253271087, "def solve_c3cbe74a(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, vmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.12814991617905258, "def solve_2937f851(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.12814991617905258, "def solve_4f492ee7(I):\n    x1 = fgpartition(I)\n    x2 =matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.13468134728045977, "def solve_7a10dcbb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_02aa9478(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.13468134728045977, "def solve_1764c709(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_4347c091(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_c130da4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_c001bb73(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13763175228171098, "def solve_b47661a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2,UNITY)\n    x4 = intersection(x2, x3)\n    x5 = mapply(neighbors, x4)\n    O = underfill(I, UP, x5)\n    return O"], [0.13811265931525568, "def solve_4bb77202(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.13811265931525568, "def solve_69ce8055(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.13811265931525568, "def solve_bb4716d0(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.14433216575850083, "def solve_c65aa74c(I):\n    x1 = cmirror(I)\n    O = subgrid(x1, I)\n    return O"], [0.14633502634498852, "def solve_0fc2b845(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.147039853263387, "def solve_4b316b5f(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.14734893337901966, "def solve_b1cd4281(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.15329845560571315, "def solve_2b328405(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [0.1593593540932685, "def solve_cfcf28e2(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.16329154444249577, "def solve_1fcc57a3(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(toivec, numcolors)\n    x5 = fork(add, lrcorner, x4)\n    x6 = fork(astuple, x3, x5)\n    x7 = compose(box, x6)\n    x8 = mapply(x7, x1)\n    O = fill(I, THREE, x8)\n    return O"], [0.16390289732390728, "def solve_a25f0c55(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, TWO)\n    x8 = astuple(TWO, x2)\n    x9 = power(decrement, TWO)\n    x10 = x9(x1)\n    x11 = x9(x2)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = crop(I, x12, x8)\n    x15 = crop(I, x13, x7)\n    x16 = asobject(x15)\n    x17 = asobject(x14)\n    x18 = vperiod(x16)\n    x19 = hperiod(x17)\n    x20 = astuple(x18, x19)\n    x21 = lbind(multiply, x20)\n    x22 = neighbors(ORIGIN)\n    x23 = mapply(neighbors, x22)\n    x24 = apply(x21, x23)\n    x25 = lbind(shift, x6)\n    x26 = mapply(x25, x24)\n    O = paint(I, x26)\n    return O"], [0.168463732206312, "def solve_fdfdf597(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_faf07838(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_f9f0600b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_d68d55f1(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_c122fbb2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.168463732206312, "def solve_ceb664ec(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_cc18addb(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.168463732206312, "def solve_16aff312(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_5095be16(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.168463732206312, "def solve_61339b62(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.1697728934434557, "def solve_2078d72b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_da990556(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_59c66f95(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_60f97838(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_a4705935(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_544f55d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_4553f1d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.17098233381512817, "def solve_a4a28622(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.1816725678756399, "def solve_8ebcfe2b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.19986952115995066, "def solve_62cbca51(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.2005586948668813, "def solve_438f706b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.20252763457609518, "def solve_57828555(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_dfbbb59c(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20977289344345568, "def solve_c314532d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.2164395601101224, "def solve_97f3d8a9(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.2164395601101224, "def solve_66253f7c(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, FOUR)\n    x4 = switch(x3, TWO, SIX)\n    O = replace(x4, EIGHT, TWO)\n    return O"], [0.2164395601101224, "def solve_a0af9139(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.21724245422789054, "def solve_18a0ff35(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [0.22208695827893984, "def solve_812a3b60(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.23590358470014935, "def solve_c162868a(I):\n    O = hmirror(I)\n    return O"], [0.25543417203130403, "def solve_bece834a(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.2591731603200863, "def solve_623b0c51(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.27083729390236366, "def solve_2be16dc0(I):\n    x1 = hsplit(I, TWO)\n    O = first(x1)\n    return O"], [0.2730213103674518, "def solve_186f2b6c(I):\n    O = rot180(I)\n    return O"], [0.2735505434325868, "def solve_3043fe93(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2735505434325868, "def solve_d1242cc5(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2735505434325868, "def solve_daf2f29d(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.2781097602204145, "def solve_9dc6abd3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_7b0aa453(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_b9a967e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_9f1ef182(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_e8d81717(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_ac6f23da(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_545614e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_b769e1f3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_4dc8d598(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_016205dc(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_db073527(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.2781097602204145, "def solve_073f70d8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.28257229929506134, "def solve_6c4516b1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28257229929506134, "def solve_3f3cd1f7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28271352439090625, "def solve_487aa7fc(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_461aa8f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_497731f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_359d0d94(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_053e17b6(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.28271352439090625, "def solve_31018754(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.2912996173225872, "def solve_e7119462(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_f05cf0b9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_41b7cca8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_32ba691d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.29175210347734337, "def solve_79fd51ca(I):\n    O = trim(I)\n    return O"], [0.29175210347734337, "def solve_d8260275(I):\n    O = trim(I)\n    return O"], [0.29211676764739275, "def solve_4a20f76f(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.29211676764739275, "def solve_13ffcbf0(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.2957105825141008, "def solve_9224f961(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.2957105825141008, "def solve_fd3d1835(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.29660861186373566, "def solve_07d51b9c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_48a3de2d(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_fd338538(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_c26fe185(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_48b371f7(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_910f2054(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.3040514825339552, "def solve_f3d2cdb4(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, decrement, x8)\n    O = hmirror(x9)\n    return O"], [0.3074019960118805, "def solve_934ada89(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.3211048880742449, "def solve_c79503c9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, vmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, hmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.326168988805897, "def solve_998098e3(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.326168988805897, "def solve_2d96430b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3315011728051802, "def solve_f6c16c47(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.3315011728051802, "def solve_b88c0a04(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.3433800458555609, "def solve_02cc1bf7(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x2)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x2)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [0.34510675848655514, "def solve_67ee853f(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.34510675848655514, "def solve_0d9ce51e(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.34510675848655514, "def solve_9deea0a3(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.36791347770439387, "def solve_c11b0301(I):\n    O = dmirror(I)\n    return O"], [0.36791347770439387, "def solve_c19cc311(I):\n    O = dmirror(I)\n    return O"], [0.3702111384573228, "def solve_13cf489a(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.3702111384573228, "def solve_aa4a4210(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.3717660024843291, "def solve_ca3658b4(I):\n    O = rot90(I)\n    return O"], [0.3717660024843291, "def solve_68bfb9aa(I):\n    O = rot90(I)\n    return O"], [0.3807233128441688, "def solve_5d3c9642(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot270(I)\n    return O"], [0.3807233128441688, "def solve_ed3b0a28(I):\n    O = rot270(I)\n    return O"], [0.3807233128441688, "def solve_edeedba3(I):\n    O = rot270(I)\n    return O"], [0.39714205122608487, "def solve_310d6026(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [0.3997728934434557, "def solve_8b2b4267(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_cee1a4ff(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.3997728934434557, "def solve_b2e862c8(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_5a2b2d9c(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_648ea28e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_0b377ec6(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.3997728934434557, "def solve_9c547a2c(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.40355292428713774, "def solve_bec01355(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.4142102966358429, "def solve_6fee0dcd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.4221658498666133, "def solve_7a629c7e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.4338288639784522, "def solve_e5498a8a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = x3(I)\n    x6 = shape(x4)\n    x7 = canvas(ZERO, x6)\n    x8 = objects(x5, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    O = paint(x7, x13)\n    return O"], [0.44421029663584294, "def solve_2cfb3c38(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_db0f04e4(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_df7b466b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.4496658498666134, "def solve_32f4d056(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, mostcolor, x2)\n    return O"], [0.46513537732538296, "def solve_4c4fdc4c(I):\n    x1 = trim(I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [0.4653084736970792, "def solve_293b123d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.477399406494354, "def solve_8a2a4fd4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.4853084736970792, "def solve_5bdd8550(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.4853084736970792, "def solve_34ef23fc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.4853084736970792, "def solve_f85e9eed(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.4853084736970792, "def solve_2d7d386d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.4853084736970792, "def solve_388e1b7f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.516202927118657, "def solve_876ab2dc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.5235791174015115, "def solve_f2249a10(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_e2948e51(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5430215763602573, "def solve_0136aa78(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_3f321763(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_8a1db87a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5542587288414367, "def solve_4f87ab55(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_bc6be8e6(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5641693586048402, "def solve_88e9b01f(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5641693586048402, "def solve_8a389a87(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5641693586048402, "def solve_88b57e6a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.6014849716551933, "def solve_129b2d68(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.6406814241086747, "def solve_4dd520f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = dmirror(I)\n    x4 = equality(x3, x1)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.641276367065674, "def solve_104d4f29(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_93d3624e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_cb6da758(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_784bf2d0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_071a486e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.6460408141864922, "def solve_1e67fd3c(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6460408141864922, "def solve_1a0da53b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_0f30f1cf(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_289957b1(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6460408141864922, "def solve_65929c8e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6974910404158915, "def solve_5346f40d(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    O = paint(x4, x6)\n    return O"], [0.7540848163604722, "def solve_07584382(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7780474307942749, "def solve_6e229489(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.7815794829293188, "def solve_bda7b226(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.7915392052312495, "def solve_7df76510(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter,x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_65d07ff6(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_2f06c5db(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_249a078c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_39c6a054(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_5f284ee8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_3fce4902(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_72380bf2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_723a0307(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_8e82896a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_51e32dc5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.8585740049506482, "def solve_0ec2872f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = colorcount(I, ONE)\n    x7 = decrement(x6)\n    x8 = tojvec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = fill(x5, TWO, x9)\n    x11 = initset(UNITY)\n    x12 = equality(x6, FOUR)\n    x13 = branch(x12, x11, x9)\n    O = fill(x10, TWO, x13)\n    return O"], [0.8642031835623443, "def solve_d7e7fb8c(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.9081403808721191, "def solve_4bd2cac0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_5288a131(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_fac58b0f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, ONE)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.9081403808721191, "def solve_646c37d8(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_9bd93218(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_6b50b3f4(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9081403808721191, "def solve_3c5ee8a7(I):\n    x1 = rot180(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9182807290875006, "def solve_f067c1cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_80980c8c(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.9182807290875006, "def solve_e2130830(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_79e19501(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_e004eac7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_91c19737(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_3dfaff7c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_3ec4d1a9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_6067f714(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_88014b3c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_7d66dc70(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9183491285403049, "def solve_143f04ac(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_b4b088e8(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = sfilter(x9, x13)\n    x15 = compose(color, x11)\n    x16 = fork(recolor, x15, identity)\n    x17 = mapply(x16, x14)\n    O = paint(x5, x17)\n    return O"], [0.9185740049506481, "def solve_ffb21a20(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.95, "def solve_dcda85ba(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_57838909(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_ac1538d5(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_d40492ae(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_a2356a7f(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_049372ee(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_a37c8aba(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 =uttuple(x6, x7)\n    x9 = repeat(x8, ONE)\n    O = x7(x9)\n    return O"], [1.0, "def solve_d19c3398(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_7ea63447(I):\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, THREE)\n    x3 = flip(x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x5(I)\n    x8 = x5(I)\n    x9 = first(x7)\n    x10 = last(x7)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x8, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = asindices(x11)\n    x23 = ofcolor(x11, x21)\n    x24 = difference(x22, x23)\n    x25 = astuple(x24, x3333)\n    x26 = apply(last, x25)\n    x27 = size(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = rbind(add, first)\n    x31 = compose(x30, last)\n    x32 = rbind(multiply, x31)\n    x33 = apply(x32, x29)\n    x34 = lbind(shift, x11)\n    x35 = mapply(x34, x33)\n    x36 = paint(x11, x35)\n    O = x6(x36)\n    return O"], [1.0, "def solve_7cc98818(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_3bda924f(I):\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(dneighbors, x1)\n    x3 = fork(difference, x2, toindices)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ZERO)\n    x6 = compose(x1, x5)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x1, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_20cebd2e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_78c33ff1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_962b3b43(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_14d818e9(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x12 = compose(x15, last)\n    x13 = sfilter(x13, x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x8, x15)\n    x17 = other(x16, x14)\n    x18 = rbind(colorcount, x14)\n    x19 = argmin(x17, x18)\n    x20 = apply(ulcorner, xx)\n    x21 = normalize(x19)\n    x22 = matcher(first, x14)\n    x23 = sfilter(x21, x22)\n    x24 = toindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = mapply(x25, x8)\n    x27 = ofcolor(I, x17)\n    x28 = backdrop(x27)\n    x29 = intersection(x27, x28)\n    O = fill(I, x17, x29)\n    return O"], [1.0, "def solve_e6b2b224(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_53a0909f(I):\n    x1 = objects(I, F, T, T)\n    x2 = subgrid(x1, I)\n    x3 = mostcolor(x2)\n    O = replace(x2, x3, ONE)\n    return O"], [1.0, "def solve_d2d3de8d(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = apply(ulcorner, x2)\n    x4 = apply(urcorner, x2)\n    x5 = apply(llcorner, x2)\n    x6 = apply(lrcorner, x2)\n    x7 = fill(I, ONE, x3)\n    x8 = fill(x7, TWO, x4)\n    x9 = fill(x8, THREE, x5)\n    O = fill(x9, FOUR, x6)\n    return O"], [1.0, "def solve_f51bcb8d(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO_BY_TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners, combine)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_c85f36ed(I):\n    x1 =O = subgrid(x2, I)\n    O = trim(x1)\n    return O"], [1.0, "def solve_80c2a33c(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6757fa8d(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_706088f6(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f111fd73(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = lbind(shift, x5)\n    x7 = mapply(x6, x4)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_0cd3e000(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_568417bf(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da15407e(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = fill(I, x10, x30)\n    O = trim(x31)\n    return O"], [1.0, "def solve_913b1be3(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_25abc504(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = occurrences(x7, x21)\n    x25 = lbind(mapply, backdrop)\n    x26 = lbind(apply, toindices)\n    x27 = compose(x25, x26)\n    x28 = x27(x24)\n    x29 = x27(x25)\n    x30 = fill(x7, x4, x28)\n    x31 = fill(x30, x6, x29)\n    O = fill(x31, ONE, x30)\n    return O"], [1.0, "def solve_66aeef6e(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e7fe1202(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e57feb5d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_9fe0b56e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4292352e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_9b3d7e8f(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = x2(x2)\n    return O"], [1.0, "def solve_acafbc06(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_299c5df7(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_579a4cd8(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [1.0, "def solve_2be20951(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d17e2eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 =x26(x15)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x22, x30)\n    x32 = apply(x11, x31)\n    x33 = argmin(x32, size)\n    x34 = x22(x33)\n    x35 = x21(x34)\n    x36 = divide(x17, x35)\n    x37 = x51(x34)\n    x38 = x25(x37)\n    x39 = canvas(x38, x36)\n    O = paint(x39, x37)\n    return O"], [1.0, "def solve_4adc7313(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_a97ec318(I):\n    x1 = index(I, ORIGIN)\n    x2 = recolor(ORIGIN, x1)\n    x3 = apply(initset, x2)\n    x4 = toindices(x3)\n    x5 = chain(backdrop, first, last)\n    x6 = lbind(mapply, x5)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = compose(x6, x7)\n    x9 = position(x4, x8)\n    x10 = difference(x1, x9)\n    x11 = apply(x8, x10)\n    x12 = lbind(difference, x4)\n    x13 = compose(x12, x8)\n    x14 = rbind(ofcolor, ZERO)\n    x15 = compose(x14, x8)\n    x16 = fork(sfilter, x13, x15)\n    x17 = mapply(x16, x11)\n    O = fill(I, x1, x17)\n    return O"], [1.0, "def solve_bb3cbb31(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a5fbb767(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, flip)\n    x3 = branch(x1, decrement, ONE)\n    x4 = x2(I)\n    x5 = halve(x4)\n    x6 = x3(I)\n    x7 = rbind(shoot, x5)\n    x8 = compose(x7, x4)\n    x9 = fork(combine, x8, x5)\n    x10 = mapply(x9, x6)\n    O = fill(I, ONE, x10)\n    return O"], [1.0, "def solve_62f87671(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_8f1c175e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_11ee2f79(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_76d78f80(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose,initset)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = lbind(fork, greater)\n    x8 = lbind(chain, FOUR)\n    x9 = rbind(x8, x6)\n    x10 = lbind(rbind, contained)\n    x11 = compose(x9, x10)\n    x12 = lbind(compose, x2)\n    x13 = chain(x11, x12, x11)\n    x14 = lbind(compose, x4)\n    x15 = compose(x14, x13)\n    x16 = fork(x11, x15, x11)\n    x17 = compose(first, x16)\n    x18 = fork(9999, x17, x5)\n    x19 = compose(first, x5)\n    x20 = fork(recolor, x18, x19)\n    x21 = fork(remove, x20, x8)\n    x22 = fork(astuple, x21, x17)\n    x23 = fork(insert, x22, x83)\n    x24 = box(x23)\n    O = fill(I, x24, x24)\n    return O"], [1.0, "def solve_ea1a36f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_e763c4da(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, rbind, x6)\n    x8 = chain(merge, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [1.0, "def solve_f1a313bf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = rbind(colorcount, ZERO)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_b2e2b4c2(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = apply(d406, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = repeat(x6, ONE)\n    x8 = combine(x7, x4)\n    x9 = multiply(NEG_TWO, TEN)\n    x10 = interval(x9, x2, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = lbind(shift, x8)\n    x13 = mapply(x12, x11)\n    O = paint(x2, x13)\n    return O"], [1.0, "def solve_4275544e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = lbind(apply, maximum)\n    x6 = chain(x5, double, x4)\n    x7 = matcher(x6, EIGHT)\n    x8 = compose(flip, x7)\n    x9 = sfilter(I, x8)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = lbind(shift, x9)\n    x12 = chain(x10, x11, palette)\n    x13 = apply(x12, x9)\n    x14 = merge(x13)\n    x15 = mostcolor(x14)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = hconcat(I, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = argmax(x19, numcolors)\n    x21 = apply(ulcorner, x19)\n    x22 = normalize(x20)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x21)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_8fea3bcd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_58da7cea(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, TWO)\n    x6 = argmax(x4, x2)\n    x7 = neighbors(x6)\n    x8 = insert(x6, x7)\n    x9 = fill(x3, EIGHT, x8)\n    x10 = hmirror(x9)\n    x11 = replace(x10, EIGHT, ONE)\n    x12 = x2(x11)\n    x13 = merge(x12)\n    x14 = cover(x11, x13)\n    x15 = paint(x14, x12)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, EIGHT)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [1.0, "def solve_cc69ffc6(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c0e6387(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(O, x5)\n    return O"], [1.0, "def solve_b11ffdfa(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWOZERO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [1.0, "def solve_3cb67168(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_5b89bf48(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = leastcolor(I)\n    x5 = repeat(x4, ONE)\n    x6 = rbind(ofcolor, x4)\n    x7 = compose(x6, frontiers)\n    x8 = chain(size, x7, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = astuple(x19, x0)\n    x11 = canvas(x9, x10)\n    x12 = argmax(x11, x9)\n    x13 = subtract_normalize(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = difference(x14, x12)\n    x16 = rbind(multiply, x13)\n    x17 = apply(x16, x15)\n    x18 = rbind(interval, x12)\n    x19 = lbind(rbind, contained)\n    x20 = lbind(sfilter, x17)\n    x21 = compose(x19, x20)\n    x22 = lbind(compose, x21)\n    x23 = lbind(rbind, intersection)\n    x24 = compose(x22, x23)\n    x25 = lbind(rbind, shift)\n    x26 = lbind(apply, x25)\n    x27 = lbind(chain, x24)\n    x28 = x27(x41)\n    x29 = lbind(x28, x41)\n    x30 = rbind(x26, x8)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x21)\n    x33 = pair(x17, x12)\n    x34 = mapply(x32, x33)\n    O = paint(x11, x34)\n    return O"], [1.0, "def solve_00d75081(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = argmin(x1, uppermost)\n    x5 = argmax(x1, uppermost)\n    x6 = width(x3)\n    x7 = halve(x6)\n    x8 = height(x3)\n    x9 = height(x5)\n    x10 = interval(ZERO, x8, ONE)\n    x11 = lbind(multiply, x7)\n    x12 = rbind(divide, x7)\n    x13 = chain(x11, x12, last)\n    x14 = lbind(apply, last)\n    x15 = lbind(remove, x4)\n    x16 = lbind(astuple, x9)\n    x17 = chain(x14, x15, x16)\n    x18 = lbind(apply, first)\n    x19 = lbind(other, x9)\n    x20 = compose(x18, x19)\n    x21 = compose(x15, x20)\n    x22 = fork(combine, x17, x21)\n    x23 = compose(x12, matcher)\n    x24 = fork(combine, x23, x22)\n    x25 = fork(combine, x38, x12)\n    x26 = fork(combine, x26, x24)\n    x27 = fork(difference, x28, x22)\n    x28 = fork(mapply, x27, x27)\n    x29 = fork(difference, x28, last)\n    x30 = fork(recolor, first, x29)\n    x31 = mapply(x30, x5)\n    O = paint(x3, x31)\n    return O"], [1.0, "def solve_63e392f1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e24eeece(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_ef0ab38c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_3cd09773(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_d9624359(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fb1ad7ac(I):\n    x1 = index(I, ORIGIN)\n    x2 = center(I)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x2, x4)\n    x6 = fill(I, FOUR, x5)\n    x7 = astuple(x3, ONE)\n    x8 = canvas(x1, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, DOWN)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = rbind(toobject, I)\n    x16 = lbind(compose, ZERO)\n    x17 = lbind(colorfilter, x15)\n    x18 = compose(x16, x17)\n    x19 = lbind(shift, x10)\n    x20 = rbind(multiply, x4)\n    x21 = chain(x19, x20, last)\n    x22 = mapply(x21, x14)\n    x23 = paint(x6, x22)\n    O = downscale(x23, THREE)\n    return O"], [1.0, "def solve_d9026414(I):\n    x1 = doublecolors(I)\n    x2 = decrement(x1)\n    x3 = compose(vfrontier, tojvec)\n    x4 = initset(ZERO)\n    x5 = lbind(rapply, x4)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(first, x6)\n    x8 = chain(x3, x7, x3)\n    x9 = matcher(x8, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fill(I, ZERO, x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x12, x14)\n    x16 = urcorner(x2)\n    x17 = lbind(shift, x16)\n    x18 = height(x12)\n    x19 = divide(x18, x19)\n    x20 = increment(x19)\n    x21 = width(x12)\n    x22 = divide(x21, x22)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x23)\n    x25 = apply(x24, x20)\n    x26 = mapply(x17, x25)\n    x27 = cover(x15, x26)\n    O = paint(x27, x200)\n    return O"], [1.0, "def solve_af609e9e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_343d91ee(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x8)\n    x4 = fork(either, vline, hline)\n    x5 = mfilter(x3, x4)\n    x6 = mostcolor(I)\n    x7 = shape(I)\n    x8 = canvas(x6, x7)\n    O = fill(x8, ONE, x5)\n    return O"], [1.0, "def solve_2b682033(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(non38, x1)\n    x3 = combine(x2, x2)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = tophalf(x4)\n    x7 = tophalf(x5)\n    x8 = bottomhalf(x4)\n    x9 = bottomhalf(x5)\n    x10 = astuple(x6, x7)\n    x11 = astuple(x8, x9)\n    x12 = combine(x10, x11)\n    x13 = rbind(adjacent, x12)\n    x14 = extract(x12, x13)\n    O = x14(x4)\n    return O"], [1.0, "def solve_ef5e29eb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_c0733203(I):\n    O = upscale(I, TWO)\n    return O"], [1.0, "def solve_846b1bdf(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_e7e994a3(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d2965672(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_95344ba8(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [1.0, "def solve_7d1be212(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_181387ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, frontiers)\n    x7 = sfilter(x2, x6)\n    x8 = colorfilter(x4, ONE)\n    x9 = difference(x4, x8)\n    x10 = pair(x9, x8)\n    x11 = mapply( sfilter, x10)\n    x12 = leastcolor(x11)\n    x13 = shape(I)\n    x14 = canvas(x12, x13)\n    x15 = hconcat(I, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = rbind(colorcount, x12)\n    x18 = order(x16, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, x12)\n    x23 = combine(x21, x22)\n    x24 = intersection(x21, x22)\n    x25 = difference(x23, x24)\n    O = fill(x15, NINE, x25)\n    return O"], [1.0, "def solve_131b894f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_fbbb8b8e(I):\n    x1 = fill(I, FIVE, x2)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = index(I, x2)\n    x5 = lbind(shift, x2)\n    x6 = mapply(x5, x3)\n    O = fill(x1, x4, x6)\n    return O"], [1.0, "def solve_0bfc1c91(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x3)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x4)\n    x12 = ulcorner(x2)\n    x13 = lbind(subtract, x12)\n    x14 = rbind(shift, x12)\n    x15 = compose(x13, x14)\n    x16 = fork(hmirror, identity, x15)\n    x17 = mapply(x16, x11)\n    O = paint(x1, x17)\n    return O"], [1.0, "def solve_da8109a3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_9579b0f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = palette(x8)\n    x10 = intersection(x9, x5)\n    x11 = first(x10)\n    x12 = shape(x5)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x3, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = first(x15)\n    x17 = compose(vdrop, vmirror)\n    x18 = rbind(hmatching, x17)\n    x19 = sfilter(x16, x18)\n    x20 = asindices(x19)\n    x21 = apply(x17, x20)\n    x22 = lbind(shift, x8)\n    x23 = mapply(x22, x21)\n    O = paint(x21, x23)\n    return O"], [1.0, "def solve_10cb4435(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_24164807(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_dc434a02(I):\n    x1 = ofcolor(I, THREE)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, THREE, ZERO)\n    x5 = replace(x4, EIGHT, ZERO)\n    x6 = compress(x5)\n    x7 = upscale(x6, THREE)\n    O = fill(x7, ZERO, x3)\n    return O"], [1.0, "def solve_cf1272d5(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = decrement(TWO)\n    x4 = toivec(x3)\n    x5 = crop(I, x4, THREE_BY_THREE)\n    x6 = asobject(x5)\n    x7 = decrement(x2)\n    x8 = astuple(x7, x8)\n    x9 = connect(x7, x8)\n    x10 = fill(I, SIX, x9)\n    x11 =object(x10, I)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = astuple(x11, x12)\n    x14 = lbind(multiply, x13)\n    x15 = apply(x14, x12)\n    x16 = lbind(shift, x11)\n    x17 = mapply(x16, x15)\n    O = fill(x10, FIVE, x17)\n    return O"], [1.0, "def solve_1e5255a3(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_114b60f6(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_8e9260a1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_311eb1f7(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_6b36777e(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(adjacent, x2)\n    x5 = mfilter(x3, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_b796a6f8(I):\n    x1 = switch(I, FOUR, ZERO)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = rbind(ofcolor, ZERO)\n    x7 = palette(x3)\n    x8 = palette(x10)\n    x9 = intersection(x7, x8)\n    x10 = fill(x5, ZERO, x9)\n    x11 = fill(x10, EIGHT, x4)\n    O = fill(x11, TWO, x5)\n    return O"], [1.0, "def solve_ba07786f(I):\n    x1 = matcher(first, THREE)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(ff28, x2)\n    x4 = fork(recolor, identity, x3)\n    x5 = mapply(x4, objects)\n    x6 = paint(I, x5)\n    x7 = replace(x6, EIGHT, ONE)\n    O = paint(x7, delta)\n    return O"], [1.0, "def solve_5ccb1afb(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(compose, x8)\n    x17 = chain(x16, x5, x6)\n    x18 = lbind(compose, x10)\n    x19 = chain(x18, x5, x6)\n    x20 = lbind(compose, x12)\n    x21 = chain(x20, x5, x6)\n    x22 = lbind(compose, x17)\n    x23 = chain(x21, x22, x6)\n    x24 = rbind(rapply, I)\n    x25 = chain(first, x24, initset)\n    x26 = fork(rapply, x25, x6)\n    x27 = compose(x25, x26)\n    x28 = mapply(x27, x2)\n    x29 = argmax(x28, x7)\n    O = x30(x29)\n    return O"], [1.0, "def solve_3405ecb8(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(astuple, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_a11fa586(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_ba39fe2b(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a6cbd52e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e79cbf7a(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [1.0, "def solve_b3617a6f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = mostcolor(x5)\n    x7 = leastcolor(I)\n    x8 = ofcolor(I, x7)\n    x9 = position(x5, x8)\n    x10 = shoot(x6, NEG_UNITY)\n    x11 = lrcorner(x8)\n    x12 = shoot(x11, UNITY)\n    x13 = fill(I, x1, x9)\n    O = fill(x13, x7, x12)\n    return O"], [1.0, "def solve_8ae96ca0(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_0a7a97ac(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, shape)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [1.0, "def solve_3fafaf9d(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f64281da(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_08aedea3(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = sfilter(x7, x4)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_0e42b48f(I):\n    x1 = Fgpartition(I)\n    x2 = objects(I, T, F, F)\n    x3 = order(x1, height)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = colorfilter(x2, x7)\n    x9 = power(outbox, TWO)\n    x10 = rbind(toobject, I)\n    x11 = mostcolor(I)\n    x12 = lbind(remove, x11)\n    x13 = chain(size, x12, palette)\n    x14 = chain(x13, x10, x9)\n    x15 = argmax(x8, x14)\n    x16 = ulcorner(x15)\n    x17 = shape(x15)\n    x18 = subtract(x16, x17)\n    x19 = decrement(x18)\n    x20 = multiply(x17, THREE)\n    x21 = add(x20, TWO_BY_TWO)\n    x22 = crop(I, x19, x21)\n    x23 = asobject(x22)\n    x24 = apply(ulcorner, x8)\n    x25 = increment(x17)\n    x26 = rbind(subtract, x25)\n    x27 = apply(x26, x24)\n    x28 = lbind(shift, x23)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_ea9e0567(I):\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = decrement(x4)\n    x6 = branch(x2, tojvec, lefthalf)\n    x7 = x6(I)\n    x8 = rbind(shoot, x5)\n    x9 = rbind(shoot, x7)\n    x10 = fork(combine, x8, x9)\n    x11 = x10(x7)\n    x12 = fill(x7, ZERO, x11)\n    x13 = ofcolor(x12, TWO)\n    x14 = subgrid(x13, x12)\n    x15 = x3(x14)\n    x16 = palette(x15)\n    x17 = contained(x16, x13)\n    x18 = height(x15)\n    x19 = trim(x15)\n    x20 = palette(x19)\n    x21 = contained(x20, x10)\n    x22 = height(x7)\n    x23 = divide(x22, x18)\n    x24 = increment(x23)\n    x25 = width(x7)\n    x26 = divide(x25, x19)\n    x27 = increment(x26)\n    x28 = repeat(x24, x27)\n    x29 = shift(x28, UNITY)\n    x30 = shift(x29, x24)\n    x31 = combine(x29, x30)\n    x32 = asindices(x29)\n    x33 = shape(x29)\n    x34 = outbox(x33)\n    x35 = remove(x34, x33)\n    x36 = lbind(adjacent, x32)\n    x37 = mfilter(x35, x36)\n    x38 = vmirror(x37)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    O = paint(x12, x40)\n    return O"], [1.0, "def solve_67c9f1ed(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e3c2207e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_9570d2b8(I):\n    x1 = shape(I)\n    x2 = connect(ORIGIN, x1)\n    x3 = height(I)\n    x4 = halve(x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = double(DOWN)\n    x12 = multiply(x11, x10)\n    x13 = subgrid(x12, I)\n    x14 = interval(ZERO, x2, ONE)\n    x15 = merge(x14)\n    x16 = double(x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(subtract, x56)\n    x20 = lbind(shift, x15)\n    x21 = mapply(x19, x20)\n    O = paint(x1, x21)\n    return O"], [1.0, "def solve_fdd6d693(I):\n    x1 = switch(I, FIVE, EIGHT)\n    x2 = switch(x1, FIVE, TWO)\n    x3 = objects(x2, T, F, T)\n    x4 = argmax(x3, size)\n    x5 = argmin(x3, size)\n    x6 = color(x4)\n    x7 = color(x5)\n    x8 = fill(x2, x6, x1)\n    O = fill(x8, x7, x4)\n    return O"], [1.0, "def solve_ee148566(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, shape)\n    x3 = compose(size, x1)\n    x4 = matcher(x3, TWO_BY_TWO)\n    x5 = dmirror(I)\n    x6 = papply(pair, x5, x1)\n    x7 = compose(size, dedupe)\n    x8 = matcher(x7, ONE)\n    x9 = dmirror(x8)\n    x10 = papply(pair, x9, x1)\n    x11 = compose(size, dedupe)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x4, x12)\n    x14 = fork(both, x7, x13)\n    x15 = fork(astuple, x14, x405)\n    x16 = argmax(x6, x15)\n    x17 = mostcolor(x16)\n    x18 = x16(I)\n    x19 = objects(x18, T, F, F)\n    x20 = colorfilter(x19, ZERO)\n    x21 = rbind(bordering, I)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x20, x22)\n    O = fill(x18, ONE, x23)\n    return O"], [1.0, "def solve_52cf2d5c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_60451d2d(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = first(x32)\n    x34 = shape(I)\n    x35 = halve(x34)\n    x36 = canvas(x11, x35)\n    O = fill(x36, x10, x33)\n    return O"], [1.0, "def solve_16d93893(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f421382c(I):\n    x1 = papply(d687, x2, x3)\n    x2 = compose(d07, numcolors)\n    x3 = fork(equality, x2, x3)\n    x4 = sfilter(x1, x3)\n    x5 = compose(flip, x4)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [1.0, "def solve_463c6181(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_237402ad(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(positive, size)\n    x3 = lbind(intersection, x2)\n    x4 = chain(positive, size, x3)\n    x5 = chain(x2, x4, dmirror)\n    x6 = objects(I, T, F, T)\n    x7 = merge(x6)\n    x8 = shift(x7, DOWN)\n    x9 = fill(I, ZERO, x8)\n    x10 = shift(x8, x5)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x2)\n    O = paint(x9, x12)\n    return O"], [1.0, "def solve_88fc14a0(I):\n    x1 = frontiers(I)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = difference(x1, x2)\n    x5 = mapply(toindices, x4)\n    x6 = difference(x3, x5)\n    x7 = fill(I, NEG_ONE, x5)\n    x8 = fill(x7, NEG_ONE, x6)\n    x9 = lbind(fork, subtract)\n    x10 = lbind(x9, positive)\n    x11 = lbind(x10, size)\n    x12 = rbind(intersection, x2)\n    x13 = chain(x11, x12, toindices)\n    x14 = compose(size, x13)\n    x15 = compose(x10, size)\n    x16 = lbind(lbind, intersection)\n    x17 = compose(x16, x13)\n    x18 = lbind(extract, x5)\n    x19 = fork(compose, x17, x18)\n    x20 = lbind(sfilter, x6)\n    x21 = chain(merge, x20, x19)\n    x22 = lbind(fork, recolor)\n    x23 = lbind(x22, color)\n    x24 = rbind(mapply, x23)\n    x25 = lbind(chain, x24)\n    x26 = lbind(rbind, occurrences)\n    x27 = chain(x25, x26, toindices)\n    x28 = lbind(lbind, combine)\n    x29 = chain(x27, x28, x27)\n    x30 = lbind(mapply, x25)\n    x31 = chain(x29, x30, x27)\n    x32 = fork(ofcolor, x21, x13)\n    x33 = fork(recolor, x25, x31)\n    x34 = mapply(x33, x6)\n    O = paint(x16, x34)\n    return O"], [1.0, "def solve_63363095(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_63ad581b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = Feca(TWO)\n    x4 = connect(ORIGIN, x3)\n    x5 = positive(x2)\n    x6 = asindices(I)\n    x7 = UNITY(x6)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = rbind(shoot, DOWN)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x8)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_3f1d6f48(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_32bd0f64(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_482fbab2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_747e3a4d(I):\n    x1 = lbind(colorcount, I)\n    x2 = compose(maximum, x1)\n    x3 = apply(x2, I)\n    x4 = minimum(x3)\n    x5 = astuple(ONE, x4)\n    x6 = astuple(TWO, x4)\n    x7 = canvas(x2, x5)\n    x8 = initset(x7)\n    x9 = recolor(ZERO, x8)\n    O = upscale(x9, TWO)\n    return O"], [1.0, "def solve_9da74771(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_e9b926ab(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x999 = mostcolor(x8)\n    x10 = matcher(first, x999)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_739291b5(I):\n    x1 = shape(I)\n    x2 = index(I, ORIGIN)\n    x3 = decrement(x1)\n    x4 = upscale(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = argmin(x5, size)\n    x7 = cover(I, x6)\n    x8 = normalize(x6)\n    x9 = paint(x7, x8)\n    x10 = objects(x9, F, F, T)\n    x11 = argmin(x10, size)\n    x12 = multiply(x11, LEFT)\n    x13 = add(x12, x11)\n    x14 = canvas(x2, x13)\n    x15 = normalize(x11)\n    x16 = lbind(remove, last)\n    x17 = rbind(s6666, x16)\n    x18 = compose(x17, center)\n    x19 = rbind( webpagepply, x13)\n    x20 = compose(x19, center)\n    x21 = fork(combine, x18, x20)\n    x22 = rbind(occurrences, x14)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(dmirror, x24, x21)\n    x26 = chain(cmirror, x25, x21)\n    x27 = fork(combine, x26, x25)\n    x28 = apply(x27, x10)\n    x29 = dmirror(x28)\n    x30 = apply(x27, x29)\n    x31 = x17(x30)\n    x32 = x16(x31)\n    x33 = x25(x32)\n    x34 = shift(x33, UNITY)\n    x35 = paint(x9, x34)\n    O = x30(x35)\n    return O"], [1.0, "def solve_ed6bc6a5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a7de5013(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [1.0, "def solve_7d83299b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolors(x14)\n    x25 = difference(x23, x24)\n    x26 = mapply(x22, x25)\n    O = fill(x14, x13, x26)\n    return O"], [1.0, "def solve_e468e763(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_5fdd3418(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f474d964(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_98c63976(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = vperiod(x6)\n    x8 =toivec(x7)\n    x9 = add(x8, NEG_ONE)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = apply(numcolors, x11)\n    x13 = matcher(equality, ONE)\n    x14 = partition(I)\n    x15 = sfilter(x14, x13)\n    x16 = difference(x14, x15)\n    x17 = merge(x16)\n    x18 = cover(I, x17)\n    x19 = lbind(compose, flip)\n    x20 = lbind(matcher, first)\n    x21 = chain(x19, x20, mostcolor)\n    x22 = fork(19, identity, x21)\n    x23 = lbind(compose, flip)\n    x24 = lbind(matcher, first)\n    x25 = chain(x23, x24, x22)\n    x26 = fork(argmin, x22, x25)\n    x27 = fork(00000000, x26, x20)\n    x28 = mapply(x27, x18)\n    O = paint(x18, x28)\n    return O"], [1.0, "def solve_d3463493(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_99b28621(I):\n    x1 = shape(I)\n    x2 = decrement(x1)\n    O = connect(ORIGIN, x2)\n    return O"], [1.0, "def solve_fa985f5f(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_0a471b0c(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(add, x3)\n    x21 = rbind(insert, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(insert, x22, x21)\n    x24 = size(x1)\n    x25 = positive(x24)\n    x26 = size(x26)\n    x27 = increment(x25)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(tojvec, x28)\n    x30 = apply(23, x29)\n    x31 = mpapply(shift, x30, x22)\n    x32 = mapply(toivec, x31)\n    x33 = shift(x23, x32)\n    x34 = canvas(x11, x33)\n    x35 = paint(x34, x3)\n    O = x9(x35)\n    return O"], [1.0, "def solve_226abe4d(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_9e50dc8b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_3362ae76(I):\n    x1 = leastalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O"], [1.0, "def solve_9cb17147(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = dneighbors(UNITY)\n    x3 = insert(UNITY, x2)\n    x4 = lrcorner(x3)\n    x5 = halve(x4)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = intersection(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [1.0, "def solve_bc02fed4(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db308579(I):\n    x1 = lbind(contained, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, x8)\n    x11 = paint(x8, x10)\n    x12 = repeat(x11, ONE)\n    x13 = asindices(x8)\n    x14 = center(x13)\n    x15 = invert(x14)\n    x16 = shift(x13, x15)\n    x17 = apply(x5, x16)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = product(x20, x20)\n    x22 = fork(compose, first, last)\n    x23 = apply(x22, x21)\n    x24 = product(x23, x23)\n    x25 = fork(compose, FIVE, flip)\n    x26 = apply(x25, x24)\n    x27 = mapply(box, x26)\n    O = fill(x8, x17, x27)\n    return O"], [1.0, "def solve_f5574119(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = compose(center, x3)\n    x5 = compose(dneighbors, x4)\n    x6 = fork(difference, x5, x4)\n    x7 = compose(first, x6)\n    x8 = chain(x4, x7, x8)\n    x9 = fork(recolor, x8, x4)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_5fab8a3f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d8afbcfe(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(color, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(F25, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, outbox, initset)\n    x13 = corners(x6)\n    x14 = mapply(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = inbox(x7)\n    x17 = sfilter(x16, x11)\n    x18 = combine(x15, x17)\n    x19 = fill(x5, ONE, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(matcher, normalize)\n    x23 = lbind(extract, x21)\n    x24 = chain(ulcorner, x23, x22)\n    x25 = compose(x24, toindices)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x5, x27)\n    return O"], [1.0, "def solve_b55466a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(difference, x2)\n    O = fill(I, ZERO, x3)\n    return O"], [1.1, "def solve_9bbba443(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, FOUR)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, FOUR)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = hperiod(x22)\n    x35 = hperiod(x26)\n    x36 = interval(x33, x34, ONE)\n    x37 = matcher(x35, x36)\n    x38 = astuple(x33, x37)\n    x39 = lbind(x astuple, x38)\n    x40 = lbind(compose, flip)\n    x41 = lbind(matcher, first)\n    x42 = chain(x39, x"], [1.1, "def solve_0b5463cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d963864a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x"], [1.1, "def solve_839a928e(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_f943f05d(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = vsplit(I, TWO)\n    x4 = hsplit(I, TWO)\n    x5 = astuple(x3, x4)\n    x6 = intersection(x5, x2)\n    x7 = argmax(x6, size)\n    x8 = matcher(x4, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(color, first)\n    x11 = fork(recolor, x10, x9)\n    x12 = rbind(sfilter, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(paint, identity, x13)\n    x15 = toindices(x9)\n    x16 = fgpartition(I)\n    x17 = merge(x16)\n    x18 = normalize(x17)\n    x19 = SEVEN(x18)\n    x20 = initset(x19)\n    x21 = insert(x7, x20)\n    x22 = product(x21, x19)\n    x23 = EIGHT(x22)\n    x24 = ofcolor(x23, x10)\n    x25 = inbox(x24)\n    x26 = difference(x25, x24)\n    x27 = fill(x23, x10, x26)\n    x28 = NEG_UNITY(x27)\n    x29 = initset(x28)\n    x30 = recolor(x24, x29)\n    x31 = fill(x27, x10, x30)\n    x32 = ofcolor(x31, x10)\n    x33 = ulcorner(x2)\n    x34 = shift(x32, x33)\n    x35 = lrcorner(x322)\n    x36 = shift(x34, x35)\n    x37 = fill(x31, x10, x36)\n    x38 = ofcolor(x37, x10)\n    x39 = sizefilter(x38, ONE)\n    x"], [1.1, "def solve_779f532a(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_54b92419(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_8d7b81ff(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = decrement(x17)\n    x19 = mapply(x16, x x18)\n    x20 = intersection(x4, x4)\n    x21 = combine(x16, x20)\n    x22 = fill(x3, ZERO, x21)\n    x23 = astuple(x18, x19)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = lbind(shift, x25)\n    x27 = height(x3)\n    x28 = decrement(x27)\n    x29 =mapply(x26, x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    x32 = asindices(x31)\n    x33 = lbind(shift, x32)\n    x34 = ofcolor(x33, ZERO)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = objects(x38, T, T, T)\n    x38 = insert(x37, x37)\n    x39 = add(x37, THREE)\n    x40 = asindices(x39)\n    "], [1.1, "def solve_0210594b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(lowermost, x1)\n    x3 = compose(rightmost, x1)\n    x4 = fork(equality, x2, x3)\n    x5 = compose(toivec, x4)\n    x6 = lbind(apply, initset)\n    x7 = compose(x6,666404)\n    x8 = fork(inter260, x5, x7)\n    x9 = compose(rot90, x8)\n    x10 = compose(rot180, x8)\n    x11 = compose(rot270, x8)\n    x12 = fork(equality, x9, x11)\n    x13 = fork(either, x10, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(14, x8)\n    x16 = fork(compose, x13, x15)\n    x17 = width(I)\n    x18 = height(I)\n    x19 =596(I)\n    x20 = decrement(x18)\n    x21 = lbind(astuple, x20)\n    x22 = chain(increment, x21, x16)\n    x23 = fork(greater, x26, x22)\n    x24 = compose(x23, x14)\n    x25 = sfilter(x19, x24)\n    x26 = lbind(apply, initset)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x24, x27)\n    x29 = fork(rapply, x28, x26)\n    x30 = compose(initset, x29)\n    x31 = fork(rapply, x30, x25)\n    x32 = compose(first, x31)\n    x33 = fork(remove, x32, last)\n    x34 = fork(astuple, x40, x33)\n    x35 = size(x1)\n    x36 = power(x34, x35)\n    x37 = astuple(x36, x333)\n    x38 = x34(I)\n"], [1.1, "def solve_3ff06587(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x66)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_d7837f2c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(bordering, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(color, x1)\n    x8 = totuple(x3)\n    x9 = apply(color, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, x1)\n    x12 = repeat(x10, ONE)\n    x13 = x11(x12)\n    x14 = x11(x4)\n    x15 = x11(x14)\n    x16 = x11(x13)\n    x17 = x11(x16)\n    x18 = apply(leftmost, x15)\n    x19 = leftmost(x18)\n    x20 = subtract(x19, x18)\n    x21 = double(x20)\n    x22 = astuple(THREE, x21)\n    x23 = repeat(x22, ONE)\n    x24 = merge(x23)\n    x25 = dmirror(x24)\n    x26 = astuple(x25, x24)\n    x27 = combine(x26, x23)\n    x28 = multiply(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = astuple(x26, x29)\n    x31 = dmirror(x30)\n    x32 = combine(x30, x31)\n    x33 = combine(x28, x32)\n    x34 = recolor(x25, x33)\n    x35 = mostcolor(I)\n    x36 = x35(x4)\n    x37 = paint(x16, x36)\n    x38 = paint(x37, x34)\n    x39 = height(x38)\n    x40 = width(x38)\n    x41 = astuple(x39, x40)\n    x42 = crop(x38, ORIGIN, x41)\n    x43 ="], [1.1, "def solve_cb8a8a34(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(raindices, x24)\n    x26 = chain(x20, x25, last)\n    x27 = fork(compose, x26, x22)\n    x28 = chain(x16, x27, x6)\n    x29 = rbind(contained, x5)\n    x30 = chain(x29, first, last)\n    x31 = compose(x27, x30)\n    x32 = chain(x16, x27, x6)\n    x33 = fork(contained(x32, x31)\n    x34 = fork(1997, x33, x28)\n    x35 = fork(59eb, x24, x28)\n"], [1.1, "def solve_0275d5bf(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x29, last)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine,"], [1.1, "def solve_653cf0fd(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0aaf94f3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_91125bee(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_bb312312(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = chain(x1, positive, dmirror)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = initset(x9)\n    x13 = insert(x11, x12)\n    x14 = backdrop(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = dmirror(x20)\n    x22 = ofcolor(x20, x11)\n    x23 = compose(palette, last)\n    x24 = rbind(remove, x23)\n    x25 = chain(x24, remove, first)\n    x26 = ofcolor(x20, x26)\n    x27 = rightmost(x26)\n    x28 = leftmost(x26)\n    x29 = ofcolor(x20, x13)\n    x30 = leftmost(x29)\n    x31 = greater(x27, x30)\n    x32 = ofcolor(x20, x15)\n    x33 = leftmost(x31)\n    x34 = rightmost(x31)\n    x35 = astuple(x32, x34)\n    x36 = astuple(x32, x35)\n    x37 = greater(x33, x36)\n    x38 = rightmost(x33)\n    x39 = leftmost(x33)\n    x40 = subtract(x38, x39)\n    x41 = astuple(x37"], [1.1, "def solve_51e10f6a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(first, x34)\n    x38 = portrait(x37)\n    x39 = branch(x38, x35, x34)\n    x40 = branch(x38, x35, x34)\n    x"], [1.1, "def solve_88f1239a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2136be83(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x04, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_1e260436(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = matcher(identity, ZERO)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmax(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = fork(4000,0100, vmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, ONE)\n    x11 = fork(both, x7, x10)\n    x12 =11(I)\n    x13 =\n    x14 = extract(x12, x11)\n    x15 = first(x13)\n    x16 = last(x13)\n    x17 = palette(x15)\n    x18 = equality(x17, x12)\n    x19 =457(x15)\n    x20 = repeat(x16, x19)\n    x21 =057(x20, UNITY)\n    x22 =457(x21)\n    x23 = asindices(x22)\n    x24 = ofcolor(x12, ZERO)\n    x25 = ofcolor(x12, x16)\n    x26 = intersection(x24, x25)\n    x27 = outbox(x13)\n    x28 = difference(x27, x26)\n    x29 = subgrid(x28, x12)\n    x30 = intersection(x23, x26)\n    x31 = outbox(x30)\n    x32 = frontiers(x31)\n    x33 = mapply(toindices, x32)\n    x34 = difference(x33, x30)\n    x35 = toobject(x34, x69)\n    x36 = objects(x12, T, F, T)\n    x37 = rbind(colorcount, x12)\n    x38 = argmax(x36, x37)\n    x39 = rbind(colorcount, x12)\n    x40 = apply(x19, x2)\n    x41 = remove(x38, x40"], [1.1, "def solve_36c0f792(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_8bdb17e6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_093a9904(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_48ebe9ca(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = center(x5)\n    x7 = rbind(shoot, x6)\n    x8 = center(x2)\n    x9 = rbind(shoot, x8)\n    x10 = center(x5)\n    x11 = rbind(shoot, x10)\n    x12 = decrement(x1)\n    x13 = tojvec(x12)\n    x14 = rbind(shoot, x13)\n    x15 = decrement(x2)\n    x16 = astuple(x12, x15)\n    x17 = double(x16)\n    x18 = shoot(x11, x17)\n    x19 = shoot(x6, x18)\n    x20 = combine(x17, x19)\n    x21 = center(x2)\n    x22 = invert(x21)\n    x23 = power(x22, TWO)\n    x24 = asindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = lbind(multiply, x25)\n    x27 = apply(x26, x3)\n    x28 = mapply(x27, x27)\n    x29 = mapply(x28, x25)\n    x30 = paint(I, x29)\n    x31 = objects(x30, F, T, T)\n    x32 = argmax(x31, numcolors)\n    x33 = subgrid(x32, x30)\n    x34 = interval(ONE, SIX, ONE)\n    x35 = lbind(power, rot90)\n    x36 = lbind(power, outbox)\n    x37 = chain(x35, x36, x000)\n    x38 = apply(x37, x34)\n    x39 = lbind(dedupe, x38)\n    x40 = lbind(chain, x39)\n"], [1.1, "def solve_d964881b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(toobject, x1)\n    x5 = matcher(x4, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = ofcolor(I, ONE)\n    x9 = rbind(contained, x8)\n    x10 = lbind(rbind,adjacent)\n    x11 = compose(x10, initset)\n    x12 = chain(x11, x9, last)\n    x13 = sfilter(x5, x12)\n    x14 = fill(I, ZERO, x13)\n    x15 = ZERO(x5)\n    x16 = gravitate(x15, x14)\n    x17 = replace(x16, ONE, x15)\n    x18 = trim(x17)\n    x19 = x15(x18)\n    x20 = x12(x19)\n    x21 = apply(first, x20)\n    x22 = asobject(x21)\n    x23 = apply(first, x22)\n    x24 =mapply(dneighbors, x23)\n    x25 = mapply(toobject, x24)\n    x26 = cultural verb25(x25)\n    x27 = mostcolor(I)\n    x28 = ofcolor(x25, x27)\n    x29 = asindices(x28)\n    x30 = box(x29)\n    x31 = difference(x30, x28)\n    x32 = toobject(x31, x25)\n    x33 = apply(position, x32)\n    x34 = shift(x30, x33)\n    x35 = ofcolor(x26, x27)\n    x36 = recolor(x27, x34)\n    x37 = shift(x45, x36)\n    x38 = ofcolor(x28, x27)\n    x39 = mapply(toindices, x38)\n    x40"], [1.1, "def solve_55c9016a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =799(I)\n    x2 = Fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, portrait, x8)\n    x10 = branch(x00000, identity, rot90)\n    x11 = fork(even, branch, rot180)\n    x12 = compose(flip, x11)\n    x13 = rbind(sfilter, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x13)\n    x16 = chain(first, x14, x15)\n    x17 = rbind(branch, I)\n    x18 = rbind(x17, x16)\n    x19 = chain(initset, x18, x16)\n    x20 = fork(rapply, x19, x16)\n    x21 = compose(initset, x12)\n    x22 = fork(rapply, x21, x16)\n    x23 = compose(initset, x12)\n    x24 = fork(rapply, x23, x16)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, TWO)\n    x27 = x26(x22)\n    x28 = first(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, UNITY)\n    x31 = branch(x29, x30, x22)\n    x32 = initset(x15)\n    x33 = NEG_ONE(x32)\n    x34 = shift(x33, x33)\n    x35 = branch(x33, x24, x28)\n    x36 = interval(x35, ONE, x153)\n    x37 = pair(x36, x34)\n    x38 = fork(multiply,"], [1.1, "def solve_5e4fa839(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = positive(x1)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(comb"], [1.1, "def solve_206a4c7d(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(x1, first)\n    x3 = rbind(compose, last)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(center, first)\n    x8 = compose(center, last)\n    x9 = fork(subtract, x7, x8)\n    x10 = fork(multiply, x7, x5)\n    x11 = fork(add, x8, x10)\n    x12 = compose(halve, x11)\n    x13 = fork( interval, tojvec, x12)\n    x14 = compose(x13, x7)\n    x15 = fork(multiply, x5, THREE)\n    x16 = fork(add, x14, x15)\n    x17 = fork( tojvec, x12, x16)\n    x18 = fork(apply, x17, x14)\n    x19 = fork(apply, x18, x16)\n    x20 =     dimensional_trial)\n    x21 = lbind(ofcolor, I)\n    x22 = palette(I)\n    x23 = compose(x21, x22)\n    x24 = argmax(x22, x23)\n    x25 = fork(subtract, label, x24)\n    x26 = decrement(x25)\n    x27 = toivec(x26)\n    x28 = shoot(x27, UNITY)\n    x29 = fgpartition(I)\n    x30 = merge(x29)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, leftmost)\n    x33 = fork(subtract, rbind, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x28)\n    x36 = fill(I, x24, x35)\n    x37 = fill(x36, x24, x1)\n    x38 = fill("], [1.1, "def solve_427d4a8b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 =ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_60af70bc(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x33 = sfilter(x38, x33)\n    x34 = apply(first, x33"], [1.1, "def solve_c92c4acd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = repeat(x24, ONE)\n    x26 = combine(x3, x25)\n    x27 = paint(x16, x26)\n    x28 = astuple(vmirror, hmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = canvas(x8, x28)\n    x31 = asindices(x30)\n    x32 = combine(x29, x31)\n    x33 = subtract(NINE, x32)\n    x34 = astuple(VEN, x33)\n    x35 = astuple(cmirror, dmirror)\n    x36 = astuple(hmirror, vmirror)\n    x37 = combine(x35, x36)\n    x38 = astuple(x334, x000000)\n    x39 = astuple(x380, cmirror)\n    x40 = combine(x38, x39)\n    x41 = fill(x37"], [1.1, "def solve_9b0f28c5(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivecfac9412)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_28d3e048(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_69236ba2(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_dda02bbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_969594f8(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x61, TWO)\n    x37 = lbind(colorcount, x23)\n    x38 = argmax(x36, x37)\n    x39 = ofcolor(x23, x28)\n    "], [1.1, "def solve_b5d0cad0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = initset(ORIGIN)\n    x2 = difference(x1, x1)\n    x3 = power(first, TWO)\n    x4 = first(x2)\n    x5 = lbind(c8f9)\n    x6 = lbind(eb281, x4)\n    x7 = lbind(lbind, shift)\n    x8 = compose(x5, x7)\n    x9 = lbind(rbind, shift)\n    x10 = compose(x9, x8)\n    x11 = fork(compose, x7, x10)\n    x12 = lbind( solve, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, identity, x13)\n    x15 = fork(difference, identity, x14)\n    x16 = lbind(rbind, intersection)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x15)\n    x19 = fork(lbind, x17, x18)\n    x20 = compose(x17, x19)\n    x21 = fork(rot90, x20, x19)\n    x22 = power(x21, FOUR)\n    x23 = x22(I)\n    x24 = fork(rot180, x22, x19)\n    x25 = power(x24, FOUR)\n    x26 = x25(x23)\n    x27 = x25(x22)\n    x28 = fork(rot180, x26, x27)\n    x29 = fork(mapply, x28, x26)\n    x30 = compose(x29, x21)\n    x31 = fork(paint, identity, x30)\n    x32 = x31(x9)\n    x33 = objects(x32, T, F, F)\n    x34 = colorfilter(x33, TWO)\n    x35 = first(x34)\n    x36 = lbind(adjacent, x35)\n    x37 =x36(x36)\n    x38 = fgpartition(x32)\n    x39 = merge("], [1.1, "def solve_7d467376(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_c8269178(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = ONE(I)\n    x2 = increment(TWO)\n    x3 = increment(x2)\n    x4 = astuple(x3, x3)\n    x5 = astuple(THREE, ORIGIN)\n    x6 = astuple(THREE, ZERO_BY_TWO)\n    x7 = crop(x5, ORIGIN, x6)\n    x8 = crop(x3, ZERO_BY_TWO)\n    x9 = Zconcat(x7, x8)\n    x10 = hconcat(x9, x7)\n    x11 = hconcat(x10, x8)\n    x12 = vconcat(x11, x11)\n    x13 = vconcat(x12, x12)\n    x14 = hconcat(x13, x11)\n    x15 = hconcat(x14, x10)\n    x16 = vconcat(x15, x11)\n    x17 = vconcat(x16, x10)\n    x18 = cellwise(x17, x9,x1)\n    x19 = asobject(x18)\n    x20 = mostcolor(I)\n    x21 = matcher(first, x20)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x19, x22)\n    x24 = apply(initset, x23)\n    x25 = sfilter(x24, x4)\n    x26 = frontiers(I)\n    x27 = sfilter(x26, x22)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, identity, dmirror)\n    x31 = x30(I)\n    x32 = lefthalf(x31)\n    x33 = righthalf(x31)\n    x34 = vmirror(x33)\n    x35 = vmirror(x34)\n    x36 = shape(x35)\n    x37 = multiply(x36, x36)\n    x38 = add(x37, ZERO)\n    x39 = canvas(x"], [1.1, "def solve_f41f0c20(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(add, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a39a19c6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_533b4fa0(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(vfrontier, x5)\n    x7 = mapply(hfrontier, x5)\n    x8 = uppermost(x7)\n    x9 = leftmost(x7)\n    x10 = greater(x8, x9)\n    x11 = uppermost(x7)\n    x12 = greater(x8, x11)\n    x13 = either(x10, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(I)\n    x16 = center(x15)\n    x17 = hfrontier(x16)\n    x18 = add(x16, x17)\n    x19 = shift(x18, x16)\n    x20 = x14(x19)\n    x21 = palette(x20)\n    x22 = remove(ZERO, x21)\n    x23 = other(x22, x12)\n    x24 = ofcolor(x20, x23)\n    x25 = mapply(neighbors, x24)\n    x26 = difference(x25, x24)\n    x27 = toobject(x26, x50)\n    x28 = add(x25, x27)\n    x29 = shift(x28, x27)\n    x30 = fill(x5, x23, x29)\n    x31 =bordering(x30)\n    x32 =3333(x31, x30)\n    x33 = fork(both, x24, x32)\n    x34 = extract(x28, x33)\n    x35 = other(x28, x34)\n    x36 = ofcolor(x20, x23)\n    x37 = initset(x36)\n    x38 = shift(x37, UNITY)\n    x39 = fill(x30, x23, x38)\n    x40 = shift"], [1.1, "def solve_4a4f5673(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_40ba5af8(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1dad6357(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x31 = shape(I)\n    x32 = decrement(x31)\n    x33 = initset(x32)\n    x34 = insert(x19, x33)\n    x35 = astuple(x21, x26)\n    x36 = astuple(x31, x35)\n    x37 = combine(x35, x36)\n    x38 = lefthalf(I)\n    x39 = righthalf(I)\n    x40 = bottomhalf(x39)\n    x41 = mostcolor(x38)\n    "], [1.1, "def solve_a4429cb9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8a69493a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(4258, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(4 fgpartition, x17)\n    x23 = merge(x22)\n    x24 =0000000(x23)\n    x25 = matcher(first, x10)\n    x26 = compose(flip, x25)\n    x27 = asindices(x16)\n    x28 = delta(x27)\n    x29 = lbind(fork, manhattan)\n    x30 = lbind(x29, identity)\n    x31 = lbind(compose, initset)\n    x32 = lbind(rbind, manhattan)\n    x33 = compose(x31, x32)\n    x34 = lbind(lbind, greater)\n    x35 = chain(x34, x33, x25)\n    x36 = compose(x36, x25)\n    x37 = fork(contained, x36, x40)\n    x38 = compose(x37, x27)\n    x39 = lbind(lbind,ANGEmatch)\n    x40 = chain(x39, x33, x33)\n    x41 = fork("], [1.1, "def solve_7540585f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract,x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_5835846c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 =TWO(x28)\n    x40 = x19(x39)\n    x41 = x16(x40)\n"], [1.1, "def solve_9af4a8be(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, size)\n"], [1.1, "def solve_eb021fbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_5828824f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_2202c643(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_871653b5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d2b59785(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = dmirror(x23)\n    x25 = asobject(x24)\n    x26 = shape(x12)\n    x27 = shift(x25, x26)\n    x28 = ofcolor(x13, x6)\n    x29 = paint(x13, x28)\n    x30 = ofcolor(x29, x4)\n    x31 = initset(x40)\n    x32 = insert(x15, x31)\n    x33 = insert(x16, x32)\n    x34 = insert(x19, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x31, x36)\n    x38 = ofcolor(x13, x6)\n    x39 = height(x38)\n    x40 = insert(x39, x38)\n    x41 = destructive height(x40)\n    x42 = width(x38)"], [1.1, "def solve_909253d8(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8cc2a21b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x40, x22)\n    x36 = x35(x10)\n    x37 = x35(xI)\n    x38 = x35(x74"], [1.1, "def solve_311a245d(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d95cba31(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_de116543(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x24)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x24)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x24)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x24)"], [1.1, "def solve_d195e4c1(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(x5, x5)\n    x7 = fill(x6, FIVE, x3)\n    x8 = objects(x7, F, F, T)\n    x9 = argmax(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = remove(x9, x8)\n    x12 = toindices(x10)\n    x13 = lbind(intersection, x12)\n    x14 = chain(x13, dneighbors, last)\n    x15 = rbind(greater, x10)\n    x16 = chain(x15, dedupe, last)\n    x17 = fork(greater, x14, x16)\n    x18 = compose(x15, first)\n    x19 = chain(size, dedupe, x18)\n    x20 = size(x11)\n    x21 = equality(x19, x20)\n    x22 = branch(x21, uintcorner, vmirror)\n    x23 = x22(x10)\n    x24 = objects(x7, T, F, T)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, x7)\n    x27 = asobject(x26)\n    x28 = matcher(first, ZERO)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x25, x29)\n    x31 = lefthalf(x30)\n    x32 = righthalf(x30)\n    x33 = palette(x31)\n    x34 = lbind(intersection, x33)\n    x35 = chain(size, x34, toindices)\n    x36 = sfilter(x32, x35)\n    x37 = rbind(shift, x31)\n    x38 = lbind(occurrences, x779)\n    x"], [1.1, "def solve_b67cec33(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_706cc69b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_52297eaa(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_39bb83e5(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =6666(I)\n    x2 =6666(I)\n    x3 = index(x1, ORIGIN)\n    x4 = decrement(x1)\n    x5 = positive(x3)\n    x6 = branch(x5, x4, x1)\n    x7 = crop(x1, ORIGIN, THREE_BY_THREE)\n    x8 = asobject(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fork(both, x lefthalf, tophalf)\n    x13 = sfilter(x11, x12)\n    x14 = compose(dmirror, vmirror)\n    x15 = argmin(x13, x14)\n    x16 = width(x11)\n    x17 =66(ONE, x16)\n    x18 = tojvec(x17)\n    x19 = index(x11, x18)\n    x20 = uppermost(x11)\n    x21 = matcher(first, x20)\n    x22 =sfilter(x11, x21)\n    x23 = leftmost(x11)\n    x24 = matcher(first, x23)\n    x25 = sfilter(x11, x24)\n    x26 = width(x11)\n    x27 = invert(x26)\n    x28 = tojvec(x27)\n    x29 = index(x11, x28)\n    x30 = astuple(x24, x22)\n    x31 = initset(x30)\n    x32 = cover(x11, x31)\n    x33 =sfilter(x3, x32)\n    x34 = height(x11)\n    x35 = astuple(x24, x22)\n    x36 = astuple(x31, x35)\n    x37 = subtract(x36, x30)\n    x38 = crop(x37,Example output:\n    00006\n    00020\n    00003\n    00002\n    0020\n    \"\"\"\n    x1"], [1.1, "def solve_3b663fe0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = lowermost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_b5c657cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shift(x23, x26)\n    x28 = toindices(x27)\n    x29 = lbind(add, DOWN)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x29, x28)\n    x32 = rbind(shoot, RIGHT)\n    x33 = mapply(x32, x28)\n    x34 = lowermost(x23)\n    x35 = invert(x34)\n    x36 = manhattan(x35, x32)\n    x37 = rightmost(x23)\n    x38 = decrement(x37)\n    x39 = matcher(x38, x34)\n"], [1.1, "def solve_122be82e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_f5f5c7a5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = astuple(x15, x18)\n    x26 = portrait(x24)\n    x27 = branch(x26, identity, cmirror)\n    x28 = x27(x3)\n    x29 = dmirror(x28)\n    x30 = branch(x24, identity, height)\n    x31 = x30(xmirror)\n    x32 = decrement(x31)\n    x33 = rbind(toobject, x35)\n    x34 = rbind(colorcount, ZERO)\n    x35 = chain(x33, x34, x31)\n    x36 = matcher(x35, x32)\n    x37 = sfilter(x4, x36)\n    x38 = compose(color, x37)\n    x39 = multiply(x84, LEFT)\n    x40 = rbind(greater"], [1.1, "def solve_4e5017db(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multcorner, x12)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_f13645d1(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =Example output:\n    6661\n    564\n    5499\n    1346\n    1469\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, identity, shape)\n    x4 = x3(I)\n    x5 = maximum(x3)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = x3(I)\n    x9 = height(I)\n    x10 = decrement(x9)\n    x11 = multiply(x10, x5)\n    x12 = crop(I, ORIGIN, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = hmirror(x15)\n    x17 = vmirror(x12)\n    x18 = combine(x13, x16)\n    x19 = product(x18, x18)\n    x20 = argmax(x19, size)\n    x21 = apply(color, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x13, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x14, x23)\n    x27 = uppermost(x24)\n    x28 = greater(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = last(x28)\n    x31 = remove(x30, x8)\n    x32 =Lo repeat(x31, ONE)\n    x33 = first(x32)\n    x34 = branch(x22, x33, x25)\n    x35 = branch(x26, x28, x30)\n    x36 = branch(x29, x32, x35)\n    x37 = apply(normalize, x31)\n    x38 = astuple(x31, x37)\n    x39 = remove(x38, x31)\n    x40 = apply(ulcorner, x39)\n    x41 = rbind("], [1.1, "def solve_264e2f5e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_d560feb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b4eb549b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(TEN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x11, x18)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = height(x21)\n    x24 = decrement(x23)\n    x25 = lbind(astuple, x24)\n    x26 = lbind(shift, x21)\n    x27 =compose(x25, x26)\n    x28 = apply(x27, x3)\n    x29 =389(x28)\n    x30 = argmax(x80, x29)\n    x31 = matcher(first, x3)\n    x32 =sfilter(x30, x31)\n    x33 = apply(dneighbors, x32)\n    x34 = lbind(shift, x32)\n    x35 = mapply(x34, x33)\n    x36 = double(x24)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x34)\n    x39 = lbind(shift, x32)\n    x40 = mapply(x39, x38)\n    x41 = cover(I,"], [1.1, "def solve_bd33027e(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_fc39db2b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = intersection(x1, x5)\n    x7 = lbind(colorcount, x4)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, color)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, x4)\n    x14 = argmax(xofcolor, x13)\n    x15 = ofcolor(x14, x8)\n    x16 = apply(initset, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, x12, x15)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x16)\n    x22 = objects(x4, T, F, F)\n    x23 = colorfilter(x22, x8)\n    x24 = rbind(manhattan, xcorIGIN)\n    x25 = chain(first, x24, last)\n    x26 = sfilter(x23, x25)\n    x27 = compose(rightmost, x25)\n    x28 = compose(minimum, x25)\n    x29 = fork(subtract, x28, x27)\n    x30 = fork(add, x29, x21)\n    x31 = rbind(contained, x15)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(asindices, x33, x20)\n    x35 = fork(difference, x29, x34)\n    x36 = fork(add, x34, x35)\n    x37 = fork(connect, x30, x36)\n    x38 = rbind(mapply,"], [1.1, "def solve_3a8a8763(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(vsplit, height, width)\n    x7 = x6(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = palette(x7)\n    x11 = remove(x9, x10)\n    x12 = other(x11, x1)\n    x13 = combine(x12, x7)\n    x14 = shape(x13)\n    x15 = canvas(x1, x14)\n    x16 = hconcat(x15, x13)\n    x17 = objects(x16, T, F, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, ORIGIN)\n    x20 = argmin(x18, x19)\n    x21 = remove(x20, x18)\n    x22 = TEN(flow)\n    x23 = input:\n    x22, x21)\n    x24 = argmin(x22, x23)\n    x25 =909(x24, DOWN)\n    x26 = uppermost(x25)\n    x27 = rightmost(x24)\n    x28 = astuple(x26, x27)\n    x29 = leftmost(x24)\n    x30 = leftmost(x27)\n    x31 = astuple(x29, x30)\n    x32 = add(x28, x31)\n    x33 = initset(x32)\n    x34 = ofcolor(x33, x12)\n    x35 = sizefilter(x34, ONE)\n    x36 = lbind(vmatching, x34)\n    x37 = fork(either, x35, x36)\n    x38 = rbind(gravitate, x34)\n    x39 = compose(x38, initset)\n    x40 = fork(add,"], [1.1, "def solve_1903dfb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_183c8c42(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_bfdb8162(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = tophalf(x3)\n    x5 = lefthalf(x4)\n    x6 = tophalf(x2)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(x2)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = righthalf(x9)\n    x12 = index(x4, ORIGIN)\n    x13 = width(x12)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = index(x3, x15)\n    x17 = height(x6)\n    x18 = decrement(x17)\n    x19 = toivec(x18)\n    x20 = index(x3, x19)\n    x21 = shape(x7)\n    x22 = decrement(x21)\n    x23 = index(x3, x22)\n    x24 = compress(x4)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = fill(x28, x30, x26)\n    x30 = ofcolor(x29, x27)\n    x31 = ulcorner(x30)\n    x32 = index(x3, x31)\n    x33 = lrcorner(x30)\n    x34 = add(x33, UNITY)\n    x35 = initset(x34)\n    x36 = cover(x29, x35)\n    x37 = ofcolor(x36, x27)\n    x38 = urcorner(x37)\n    x39 = add(x38, ulcorner)\n    x50 =676(x39)\n    x51 = initset(x50)\n    x52 = fill(x36, x27, x51)\n    O"], [1.1, "def solve_799c7858(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(rot90, x6, x23)\n    x25 = power(x24, TWO)\n    x26 = x25(I)\n    x27 = palette(x26)\n    x28 = lbind(ofcolor, x26)\n    x29 = compose(leftmost, x28)\n    x30 = matcher(x29, ZERO)\n    x31 = palette(x26)\n    x32 = rightmost(x26)\n    x33 = matcher(x32, ZERO)\n    x34 = fork(either, x30, x33)\n    x35 = palette(x26)\n    x36 = rightmost(x26)\n    x37 = matcher(x36, ZERO)\n    x38 = fork(either, x35, x37)"], [1.1, "def solve_e2056b27(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =6666(I)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = double(x2)\n    x7 = canvas(x5, x6)\n    x8 = paint(x7, x2)\n    x9 = shape(I)\n    x10 = decrement(x9)\n    x11 = index(I, x10)\n    x12 = divide(x33, x11)\n    x13 = astuple(x10, x12)\n    x14 = canvas(x11, x13)\n    x15 = paint(x14, x2)\n    x16 = width(I)\n    x17 = ulcorner(x2)\n    x18 = width(I)\n    x19 =678(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = canvas(x11, x20)\n    x22 = hconcat(I, x21)\n    x23 = hsplit(x22, TWO)\n    x24 = merge(x23)\n    x25 = last(x23)\n    x26 = vmirror(x25)\n    x27 = vconcat(x22, x26)\n    O = vconcat(x27, x24)\n    return O"], [1.1, "def solve_dbedb1fd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x11, x20)\n    x22 = other(x21, x15)\n    x23 =6 ofcolor(I, x22)\n    x24 = mapply(neighbors, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x19)\n    x28 =4612f35(x23)\n    x29 = ofcolor(I, x27)\n    x30 = sfilter(x29, x28)\n    x31 = subgrid(x30, I)\n    x32 = ofcolor(x31, x19)\n    x33 = mapply(neighbors, x32)\n    x34 = toobject(x33, x31)\n    x35 = objects(x39, T, F, F)\n    x36 = sizefilter(x35, ONE)\n    x37 = merge(x36)\n    O = subgrid(x37, x31)\n    return O"], [1.1, "def solve_15fde576(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =201(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.1, "def solve_c855f467(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = mostcolor(I)\n    x8 = ofcolor(x6, x7)\n    x9 = leastcolor(x6)\n    x10 = ofcolor(x1, x9)\n    x11 = combine(x8, x10)\n    x12 = intersection(x8, x10)\n    x13 = difference(x11, x12)\n    O = fill(x6, fill(x6, x11)\n    return O"], [1.1, "def solve_04b9b4ef(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = astuple(TWO, ONE)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, asindices)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, x5)\n    x12 = chain(x8, x6, x5)\n    x13 = compose(x9, x6)\n    x14 = fork(mapply, x11, x12)\n    x15 = fork(mapply, x11, x13)\n    x16 = fork(lastuple, x14, x15)\n    x17 = repeat(x16, TWO)\n    x18 = mapply(x16, x2)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = paint(I, x20)\n    x22 = shift(x20, UNITY)\n    x23 = paint(x21, x22)\n    x24 =571(x28)\n    x25 = ulcorner(x24)\n    x26 = subgrid(x24, x25)\n    x27 = compose(toindices, normalize)\n    x28 = matcher(x27, x18)\n    x29 = normalize(x24)\n    x30 = sfilter(x29, x28)\n    x31 = difference(x29, x30)\n    O = fill(x23, ZERO, x31)\n    return O"], [1.1, "def solve_be0faf5b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = rbind(Sfilter, TWO)\n    x2 = apply(x1, I)\n    x3 = contained(TWO, x2)\n    x4 = branch(x3, height, width)\n    x5 = x4(I)\n    x6 = partition(I)\n    x7 = palette(x6)\n    x8 = matcher(identity, x5)\n    x9 = argmin(x7, x8)\n    x10 = color(x9)\n    x11 =92(85, toindices)\n    x12 = apply(x11, x10)\n    x13 = TIREE(x12)\n    x14 = branch(x13, hmirror, vmirror)\n    x15 = x14(x6)\n    x16 = x13(x15)\n    x17 = shape(x6)\n    x18 = canvas(x10, x17)\n    x19 = TWO_BY_TWO)\n    x20 = paint(x18, x19)\n    x21 = rbind(tocount, SIX)\n    x22 = apply(x21, x2)\n    x23 = normalize(x22)\n    x24 = color(x23)\n    x25 = remove(x23, x26)\n    x26 = other(x25, x24)\n    x27 = ofcolor(x26, x24)\n    x28 = last(x27)\n    x29 = ofcolor(x25, x24)\n    x30 = rbind(intersection, x28)\n    x31 = mapply(x30, x29)\n    O = fill(x23, x47, x31)\n    return O"], [1.1, "def solve_3331e564(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = UNITY(I)\n    x2 =31(x1)\n    x3 = decrement(x2)\n    x4 = tojvec(x3)\n    x5 = shoot(x4, UP_RIGHT)\n    x6 = shift(x5, UNITY)\n    O = fill(I, THREE, x6)\n    return O"], [1.1, "def solve_fb9e858f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersectionx15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.1, "def solve_f1f6b9c7(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = input:\n    8888888989\n    8888888989\n    8888888989\n    5555585555\n    4555555555\n    4555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [1.1, "def solve_35608ece(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, numcolors)\n    x4 = difference(x3, x2)\n    x5 = apply(initset, x4)\n    x6 = rbind(404a4755\n    b27 upper3846\n    11111151\n    429511529\n    uple ofcolor(I, x1)\n    x1 = prapply(connect, x5, x6)\n    x2 = compose(72,175)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, x1, x3)\n    x5 = fork(recolor, color, x6)\n    x6 = mapply(x5, x4)\n    O = paint(x4, x6)\n    return O"], [1.1, "def solve_61b4d629(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = rbind(subgrid, x6)\n    x8 = apply(x7, x2)\n    x9 = rot90(x8)\n    x10 = fgpartition(x9)\n    x11 = merge(x10)\n    x12 = solve(x11, x9)\n    x13 = index(x12, ORIGIN)\n    x14 = subgrid(x12, x9)\n    x15 = apply(x7, x12)\n    x16 = rot90(x15)\n    x17 =fgpartition(x16)\n    x18 = merge(x17)\n    x19 =644(x18)\n    x20 = palette(x19)\n    x21 = other(x20, ZERO)\n    x22 = objects(x6, T, F, T)\n    x23 = colorfilter(x22, x21)\n    x24 = sfilter(x21, vline)\n    x25 = difference(x21, x24)\n    x26 = astuple(x25, x26)\n    x27 = rbind(shoot, UP)\n    x28 = mapply(x27, x6)\n    O = fill(x9, x21, x28)\n    return O"], [1.1, "def solve_4dd9eb26(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval( ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = ofcolor(I, ZERO)\n    x11 = ofcolor(I, FOUR)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, x7)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = compose(x13, x17)\n    x19 = rbind(shoot, THREE_BY_THREE)\n    x20 = compose(x14, x19)\n    x21 = rbind(shoot, THREE_BY_THREE)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot,Example output:\n    x27 = fork(recolor, identity, x24)\n    x28 = mapply(x27, x3)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_6a84b1f4(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = compose(x1, shape)\n    x3 = rbind( multiply(TWO, THREE)\n    x4 = rbind(multiply, THREE)\n    x5 = compose(x4, x2)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x1, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = x1(x11)\n    x13 = x2(x10)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(I, x15)\n    O = subgrid(x10, x16)\n    return O"], [1.1, "def solve_2a708adb(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(rapply, I)\n    x2 = initset(I)\n    x3 = lbind(add, DOWN)\n    x4 = chain(first, x1, x3)\n    x5 = compose(x4, decrement)\n    x6 = fork(difference, x5, toindices)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x2, x8)\n    x10 =775(x9)\n    x11 =(x10)\n    x12 = equality(x11, x12)\n    x13 = branch(x12, x11, x8)\n    x14 = shift(x13, UNITY)\n    x15 =27(x14)\n    x16 = ulcorner(x15)\n    x17 = lrcorner(x15)\n    x18 = shape(x15)\n    x19 = maximum(x18)\n    x20 = multiply(THREE, TEN)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = rbind(multiply, x15)\n    x23 = apply(x22, x21)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x21)\n    x26 = pair(x25, x26)\n    x27 = mapply(box, x26)\n    x28 = mapply(x25, x27)\n    O = fill(x10, ZERO, x28)\n    return O"], [1.1, "def solve_af2b8f36(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =6666(I)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, frontiers)\n    x4 = mfilter(x1, x3)\n    O = fill(x1, ZERO, x4)\n    return O"], [1.1, "def solve_76c140d9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =680(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, x1)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = trim(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(identity, x14)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(size, x16)\n    x18 = argmin(x4, x17)\n    x19 = repeat(x18, ONE)\n    x20 = asobject(x19)\n    x21 = palette(x20)\n    x22 = totuple(x21)\n    x23 = first(x22)\n    x24 = last(x22)\n    x25 = neighbors(UNITY)\n    x26 = remove(x23, x25)\n    x27 = recolor(x24, x26)\n    x28 = lbind(shift, x26)\n    x29 = ofcolor(x13, x23)\n    x30 = mapply(x28, x29)\n    x31 = shift(x30, UP_RIGHT)\n    x32 = combine(x27, x31)\n    x33 = paint(x13, x32)\n    O = trim(x33)\n    return O"], [1.1, "def solve_31d34b94(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(8matcher, first)\n    x2 = compose(x1, last)\n    x3 = lbind(multiply, THREE)\n    x4 = compose(x3, x2)\n    x5 = fork(extract, identity, x4)\n    x6 = compose(last, x5)\n    x7 = compose(ff28, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.1, "def solve_84cab0b3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =1111(I)\n    x2 = matcher(identity, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(positive, size, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(dmirror, x6)\n    x8 = power(x7, FOUR)\n    x9 = x8(I)\n    x10 = dedupe(x9)\n    x11 = dmirror(x10)\n    x12 = dedupe(x11)\n    O = dmirror(x12)\n    return O"], [1.1, "def solve_97504b06(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, THREE, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 =\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = lbind(multiply, x14)\n    x16 = decrement(x15)\n    x17 = lbind(outbox, x9)\n    x18 = initset(x17)\n    x19 = fill(x13, THREE, x18)\n    x20 = outbox(x19)\n    x21 = backdrop(x20)\n    x22 = lbind(toobject, x21)\n    x23 = compose(x22, initset)\n    x24 = ofcolor(x19, ONE)\n    x25 = sfilter(x24, x23)\n    x26 = difference(x24, x25)\n    x27 = fill(x19, THREE, x26)\n    x28 = interval(x8, x12, ONE)\n    x29 = rbind(multiply, x14)\n    x30 = apply(x29, x28)\n    x31 = lbind(shift, x24)\n    x32 = mapply(x31, x30)\n    O = fill(x27, TWO, x32)\n    return O"], [1.1, "def solve_c55e563f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = dmirror(I)\n    x3 =081928e5(x2)\n    x4 = lbind(shift, x3)\n    x5 = rbind(difference, x1)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = partition(I)\n    x9 = sfilter(x8, x7)\n    x10 = argmax(x9, size)\n    x11 = remove(x10, x9)\n    x12 = apply(initset, x11)\n    x13 = toindices(x10)\n    x14 = lbind(argmin, x12)\n    x15 = lbind(rbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = argmin(x13, x16)\n    x18 = cover(I, x10)\n    x19 = paint(x18, x17)\n    x20 = complec(x7)\n    x21 = palette(I)\n    x22 = other(x21, ZERO)\n    x23 = colorcount(x20, x22)\n    x24 = asindices(x20)\n    x25 = ofcolor(x20, x22)\n    x26 = difference(x24, x25)\n    x27 = asobject(x20)\n    x28 = matcher(first, x22)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x27, ulcorner, x29)\n    x31 = fork(shift, identity, x30)\n    x32 = mapply(x31, x26)\n    x33 = paint(x19, x32)\n    O = x23(x33)\n    return O"], [1.1, "def solve_197e1496(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x28 = canvas(x24, x25)\n    x29 = paint(x28, x2)\n    x30 = normalize(x11)\n    x31 = matcher(first, x4)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 = paint(x29, x33)\n        O = x21(x34)\n    return O"], [1.1, "def solve_7682831b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(numcolors, x1)\n    x3 = lbind(apply, multiply)\n    x4 = lbind(I, frontiers)\n    x5 = chain(x3, x4, frontiers)\n    x6 = chain(size, dedupe, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = fork(sfilter, x9, x8)\n    x11 = compose(size, x10)\n    x12 = argmin(x2, x11)\n    x13 = rightmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x12)\n    x18 = shift(x17, NEG_UNITY)\n    x19 =171(x16)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x18)\n    x22 = paint(x16, x21)\n    O = x15(x22)\n    return O"], [1.1, "def solve_5c05747b(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = leftmost(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = ofcolor(I, x10)\n    x18 =16(x17)\n    x19 = asindices(x18)\n    x20 = lowermost(x19)\n    x21 = toobject(x20, I)\n    x22 = mostcolor(x21)\n    x23 = ofcolor(I, x22)\n    x24 = uppermost(x23)\n    x25 = toivec(x24)\n    x26 = invert(x25)\n    x27 = rbind(shoot, UP)\n    x28 = rightmost(x27)\n    x29 = equality(x28, x26)\n    x30 = branch(x29, x22, x25)\n    x31 = branch(x29, x27, x25)\n    x32 =22its(x30)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, x26, x25)\n    x36 = branch(x34, x27, x25)\n    x37 = x35(x36)\n    x38 = intersection(x37, x35)\n    x39 = branch(x34, x36, x38)\n    O = x39(x36)\n    return O"], [1.1, "def solve_e0239dc4(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =429(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_33ca9808(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =63(I)\n    x6 = astuple(dmirror, cmirror)\n    x7 = astuple(hmirror, identity)\n    x8 = combine(x6, x7)\n    x9 = rbind(d511f180x8)\n    x10 = rbind(ofcolor, x4)\n    x11 = compose( center, x10)\n    x12 = compose(x19, x11)\n    x13 = chain(x9, vline, x12)\n    x14 = rbind(intersection, x2)\n    x15 = chain(size, x14, x13)\n    x16 = matcher(x15, ZERO)\n    x17 = objects(I, T, F, T)\n    x18 = sfilter(x17, x16)\n    x19 = argmax(x18, size)\n    x20 = matcher(color, x4)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = argmax(x22, size)\n    x24 = replace(I, x4, ZERO)\n    O = paint(x24, x23)\n    return O"], [1.1, "def solve_44de6db7(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = ONE00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_00d2babd(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =977788399000\n    8888248466\n    2422408323\n    53204a843\n    0330528329\n    4042542324\n    8025038323\n    \"\"\"\n    x1 = matcher(first, x3)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = shape(x3)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x3, x8)\n    x10 = multiply(x4, x4)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x9)\n    x13 = multiply(x4, x4)\n    x14 = width(I)\n    x15 = halve(x14)\n    x16 = compose(last, last)\n    x17 = matcher(x16, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x13, x18)\n    O = fill(x12, x3, x19)\n    return O"], [1.1, "def solve_01a38f42(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = size(x2)\n    x23 = positive(x22)\n    x24 = branch(x23, hsplit, vmirror)\n    x25 = x24(I)\n    x26 = first(x25)\n    x27 = lbind(recolor, x21)\n    x28 = lrcorner(x2)\n    x29 = paint(x18, x28)\n    x30 = branch(x5, vmirror, hmirror)\n    x31 = x30(x29)\n     move(x29, x31, x2)\n    O = x30(x32)\n    return O"], [1.1, "def solve_c95e326f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    O =88888(I, TWO)\n    return O"], [1.1, "def solve_65105cab(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x1)\n    x4 =    5899240800\n    48rotExample44\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x2)\n    x4 =5899240800\n    48its\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = equality(x1, x2)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.1, "def solve_30d4beb2(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =2331152277(I)\n    x2 =04227119915, x1)\n    x3 = apply(d406, x2)\n    x4 = lefthalf(x3)\n    x5 = righthalf(x3)\n    x6 = palette(x4)\n    x7 = contained(x6, x5)\n    x8 = contained(x7, x5)\n    x9 = branch(x8, identity, dmirror)\n    x10 = x9(x4)\n    x11 = x9(x5)\n    x12 = canvas(ZERO, THREE_BY_THREE)\n    x13 = branch(x8, identity, vmirror)\n    x14 = x13(x10)\n    x15 = hconcat(x14, x13)\n    x16 = asobject(x15)\n    x17 = occurrences(x16, x3)\n    x18 = first(x17)\n    x19 = ulcorner(x18)\n    x20 = lbind(shift, x18)\n    x21 = occurrences(x16, x9)\n    x22 = mapply(x20, x21)\n    O = fill(x17, ONE, x22)\n    return O"], [1.1, "def solve_d25a7a3e(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =66666666(I, TWO)\n    x2 = rot180(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, x2, x2)\n    O = canvas(x4, UNITY)\n    return O"], [1.1, "def solve_f1132913(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x2)\n    x11 = greater(x10, FOUR)\n    x12 = branch(x11, RIGHT, DOWN)\n    x13 = subgrid(x12, I)\n    x14 = add(RIGHT, DOWN)\n    x15 = decrement(x14)\n    x16 = x9(x15)\n    x17 = height(x13)\n    x18 = fgpartition(x13)\n    x19 = merge(x18)\n    x20 = fill(x13, ZERO, x19)\n    x21 = subtract(x17, x20)\n    x22 = replace(x21, FOUR, ZERO)\n    x23 = width(x13)\n    x24 =630alf(x23, width)\n    x25 = downscale(x12, x24)\n    x26 = ofcolor(x25, FOUR)\n    x27 = fill(x25, ZERO, x26)\n    O = x9(x27)\n    return O"], [1.1, "def solve_c77b1a33(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 =695651860160970\n    x15 =665513890(x12)\n    x16 = solve_694f1293(x15)\n    x17 = tophalf(x16)\n    x18 = numcolors(x17)\n    x19 = lowermost(x16)\n    x20 = lefthalf(x12)\n    x21 = righthalf(x12)\n    x22 = objects(x16, T, F, F)\n    x23 = colorfilter(x22, x3)\n    x24 = merge(x23)\n    x25 = cellwise(x14, x23, x24)\n    x26 = DOWNscale(x25, x18)\n    x27 = crop(x26, ORIGIN, x20)\n    x28 = urcorner(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x28)\n    x31 = apply(initset, x30)\n    x32 = ofcolor(x25, x3)\n    x33 = ofcolor(x25, x8)\n    x34 = intersection(x32, x33)\n    x35 = cover(x5, x20)\n    O = fill(x35, NEG_ONE, x34)\n    return O"], [1.1, "def solve_a67c6f36(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(\n    2885576013\n    6585562088\n    5568272651\n    ulcornerner\n    \"\"\"\n    x2 = lefthalf(I)\n    x3 = righthalf(I)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = tophalf(x3)\n    x7 = bottomhalf(x3)\n    x8 = combine(x4, x5)\n    x9 = combine(x6, x7)\n    x10 = combine(x8, x9)\n    O = fill(x1, TWO, x10)\n    return O"], [1.1, "def solve_ad32f302(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =52R5528\n    x2 =55215\n    x3 = tophalf(I)\n    x4 = lefthalf(x3)\n    x5 = tophalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = Tphalf(x8)\n    x10 = tophalf(x9)\n    x11 = righthalf(x10)\n    x12 = bottomhalf(x11)\n    x13 = lefthalf(x12)\n    x14 =tophalf(x13)\n    x15 = tophalf(x14)\n    x16 = righthalf(x15)\n    x17 = index(I, ORIGIN)\n    x18 = width(I)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = index(I, x20)\n    x22 = height(I)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = index(I, x24)\n    x26 = shape(I)\n    x27 = decrement(x26)\n    x28 = add(x22, x27)\n    x29 = add(x24, x28)\n    x30 = canvas(x11, x29)\n    x31 = asobject(x30)\n    x32 = occurrences(x10, x31)\n    x33 =\n    35(x32)\n    x34 =\n    (normalize, toindices)\n    x35 = lbind(shift, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x10, x36)\n    return O"], [1.1, "def solve_6741114b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =91112(I)\n    x2 = switch(x1, EIGHT, TWO)\n    x3 = switch(x2, TWO, TWO)\n    x4 = switch(x3, ONE, TEN)\n    x5 = fork(combine, vfrontier, hfrontier)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    O = x7(x7)\n    return O"], [1.1, "def solve_90a38d7b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(x3, initset)\n    x5 =78(x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(hmirror, vmirror)\n    x8 =HKapply(x7, x6)\n    x9 = compress(x8)\n    O = fill(x9, ZERO, x3)\n    return O"], [1.1, "def solve_82a2d37c(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =887(I)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_7c17c2b6(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 =\ufffd Bit(x11, uppermost)\n    x13 = ulcorner(x12)\n    x14 = llcorner(x12)\n    x15 = hmatching(x13, x14)\n    x16 = branch(x15, NEG_ONE, ONE)\n    x17 = branch(x15, double, outbox)\n    x18 = initset(x13)\n    x19 = insert(x14, x18)\n    x20 = insert(x16, x19)\n    x21 = recolor(x3, x20)\n    x22 = uppermost(x12)\n    x23 = toivec(x22)\n    x24 = add(x23, x4)\n    x25 = insert(x27, x24)\n    x26 = merge(x27)\n    x27 = cover(x6, x26)\n    x28 = forever package(x27)\n    x29 = astuple(x23, x8)\n    x30 = astuple(x28, x9)\n    x31 = combine(x29, x30)\n    x32 = hfrontier(x31)\n    x33 = vfrontier(x31)\n    x34 = combine(x32, x33)\n    x35 = combine(x31, x34)\n    x36 = fill(x27, x3, x35)\n    x37 = paint(x36, x24)\n    O = paint(x37, x25)\n    return O"], [1.1, "def solve_8c885980(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 =4418228(x1)\n    x3 =241111(x2)\n    x4 = matcher(color, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 =44fcc829(I)\n    x8 = rbind(shoot, UNITY)\n    x9 = mapply(x8, x7)\n    x10 = power(outbox, TWO)\n    x11 = apply(x10, x9)\n    x12 = initset(x2)\n    x13 = insert(x12, x11)\n    x14 = corners(x13)\n    x15 = toobject(x14, I)\n    x16 = mostcolor(x15)\n    x17 = ofcolor(I, x16)\n    x18 = mapply(neighbors, x17)\n    x19 = toindices(x18)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x5)\n    x22 = combine(x19, x21)\n    O = fill(I, x16, x22)\n    return O"], [1.1, "def solve_d6eb9269(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(I)\n    x3 =4444(I)\n    x4 =54444\n    45398831881\n    54568096698\n    43285167973\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = shape(x24)\n    x26 = canvas(x1, x25)\n    x27 = paint(x26, x24)\n    x28 = ofcolor(x27, THREE)\n    x29 = combine(x21, x28)\n    x30 = mapply(x19, x29)\n    x31 = fill(x27, THREE, x30)\n    x32 = x169(x31)\n    x33 =40(x32)\n    x34 = shift(x31, x33)\n    O = fill(x27, THREE, x34)\n    return O"], [1.1, "def solve_df53b005(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = branch(x16, x17, x19)\n    x21 = branch(x12, x16, x20)\n    x22 = branch(x12, x9, x21)\n    x23 = PApply(x22, x21)\n    x24 =280(x23)\n    x25 = branch(x16, x18, x19)\n    x26 = Field(x25, x24)\n    x27 = branch(x8, x22, x25)\n    x28 = fork(combine, vfrontier, hfrontier)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(ofcolor, x12)\n    x31 = palette(x12)\n    x32 = remove(x13, x31)\n    x33 = lbind(43444, x12)\n    x34 = power(x33, x30)\n    x35 = x32(x32)\n    x36 = x30(x34)\n    x37 = fill(x15, x39, x36)\n    x38 = fill(x37, x30, x34)\n    O = fill(x38, x39, x36)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_3ec4d1a9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.2482843137254902, "def solve_fac58b0f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, ONE)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.2482843137254902, "def solve_ffb21a20(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.28823529411764703, "def solve_3c5ee8a7(I):\n    x1 = rot180(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_4bd2cac0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_5288a131(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_646c37d8(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_9bd93218(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.30490196078431375, "def solve_6b50b3f4(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.32027505446623095, "def solve_129b2d68(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.3215686274509804, "def solve_80980c8c(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.3215686274509804, "def solve_143f04ac(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_0ec2872f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = colorcount(I, ONE)\n    x7 = decrement(x6)\n    x8 = tojvec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = fill(x5, TWO, x9)\n    x11 = initset(UNITY)\n    x12 = equality(x6, FOUR)\n    x13 = branch(x12, x11, x9)\n    O = fill(x10, TWO, x13)\n    return O"], [0.3296296296296296, "def solve_131b894f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [0.36851851851851847, "def solve_dcda85ba(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_57838909(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_ac1538d5(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_d40492ae(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_a2356a7f(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.37411764705882355, "def solve_d7e7fb8c(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.3931917211328976, "def solve_104d4f29(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_93d3624e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_cb6da758(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_784bf2d0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_071a486e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.40763616557734206, "def solve_f067c1cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_e2130830(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_79e19501(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_e004eac7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_91c19737(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_3dfaff7c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_6067f714(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_88014b3c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_7d66dc70(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.5232709913889689, "def solve_4f87ab55(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_bc6be8e6(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5833442265795207, "def solve_5346f40d(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    O = paint(x4, x6)\n    return O"], [0.5902430555555556, "def solve_f2249a10(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_e2948e51(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5916319444444444, "def solve_88e9b01f(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5916319444444444, "def solve_8a389a87(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5916319444444444, "def solve_88b57e6a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.5982804232804233, "def solve_579a4cd8(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.6163211951447245, "def solve_bda7b226(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [0.6194444444444445, "def solve_6e229489(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.631901366607249, "def solve_67ee853f(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.631901366607249, "def solve_0d9ce51e(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.631901366607249, "def solve_9deea0a3(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6368028313150265, "def solve_c65aa74c(I):\n    x1 = cmirror(I)\n    O = subgrid(x1, I)\n    return O"], [0.6600575299564271, "def solve_1e67fd3c(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.6600575299564271, "def solve_1a0da53b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_0f30f1cf(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_289957b1(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6600575299564271, "def solve_65929c8e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.660134929337232, "def solve_a7de5013(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.6672060197871419, "def solve_9dc6abd3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_7b0aa453(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_b9a967e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_9f1ef182(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_e8d81717(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_ac6f23da(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_545614e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_b769e1f3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_4dc8d598(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_016205dc(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_db073527(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6672060197871419, "def solve_073f70d8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.6696587388610415, "def solve_998098e3(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6696587388610415, "def solve_2d96430b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.671323326432022, "def solve_2be16dc0(I):\n    x1 = hsplit(I, TWO)\n    O = first(x1)\n    return O"], [0.6809463684463684, "def solve_4c4fdc4c(I):\n    x1 = trim(I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [0.6837830785199206, "def solve_7df76510(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter,x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_65d07ff6(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_2f06c5db(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_249a078c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_39c6a054(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_5f284ee8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_3fce4902(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_72380bf2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_723a0307(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_8e82896a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_51e32dc5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6901349293372321, "def solve_e7119462(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_f05cf0b9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_41b7cca8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_32ba691d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6979166666666667, "def solve_4dd520f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = dmirror(I)\n    x4 = equality(x3, x1)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.700481793212685, "def solve_8b2b4267(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_b2e862c8(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_c314532d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_5a2b2d9c(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_648ea28e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7076699956719423, "def solve_b4b088e8(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = sfilter(x9, x13)\n    x15 = compose(color, x11)\n    x16 = fork(recolor, x15, identity)\n    x17 = mapply(x16, x14)\n    O = paint(x5, x17)\n    return O"], [0.708073221478394, "def solve_4292352e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [0.708073221478394, "def solve_da8109a3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [0.708073221478394, "def solve_9da74771(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [0.7110653073286052, "def solve_310d6026(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [0.7121404907528761, "def solve_79fd51ca(I):\n    O = trim(I)\n    return O"], [0.7121404907528761, "def solve_d8260275(I):\n    O = trim(I)\n    return O"], [0.7167554635380722, "def solve_07584382(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7208389360698277, "def solve_13cf489a(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7208389360698277, "def solve_aa4a4210(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.7241016188672439, "def solve_0136aa78(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_3f321763(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_8a1db87a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7338151265460182, "def solve_3043fe93(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7338151265460182, "def solve_812a3b60(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7338151265460182, "def solve_d1242cc5(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7338151265460182, "def solve_daf2f29d(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7363222425722427, "def solve_623b0c51(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.7389341741650659, "def solve_4a20f76f(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.7389341741650659, "def solve_66253f7c(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, FOUR)\n    x4 = switch(x3, TWO, SIX)\n    O = replace(x4, EIGHT, TWO)\n    return O"], [0.7389341741650659, "def solve_13ffcbf0(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.7400296972330871, "def solve_8a2a4fd4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.741832732082732, "def solve_97f3d8a9(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.741832732082732, "def solve_a0af9139(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.7421484598793515, "def solve_cee1a4ff(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7421484598793515, "def solve_0b377ec6(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7421484598793515, "def solve_9c547a2c(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.7433389360698277, "def solve_bece834a(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.7433389360698277, "def solve_5d3c9642(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot270(I)\n    return O"], [0.7433389360698277, "def solve_0cd3e000(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    O = paint(I, x5)\n    return O"], [0.7433389360698277, "def solve_b1cd4281(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.7433389360698277, "def solve_c3cbe74a(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, vmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.7433389360698277, "def solve_186f2b6c(I):\n    O = rot180(I)\n    return O"], [0.7433389360698277, "def solve_ed3b0a28(I):\n    O = rot270(I)\n    return O"], [0.7433389360698277, "def solve_edeedba3(I):\n    O = rot270(I)\n    return O"], [0.7436960789269706, "def solve_8ea6e1e5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_f4b508cf(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.7436960789269706, "def solve_c162868a(I):\n    O = hmirror(I)\n    return O"], [0.7436960789269706, "def solve_a3533769(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_cfb94ee5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7436960789269706, "def solve_796e08f3(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.7436960789269706, "def solve_c6b891b4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_c11b0301(I):\n    O = dmirror(I)\n    return O"], [0.7436960789269706, "def solve_fdfdf597(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_faf07838(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_ca3658b4(I):\n    O = rot90(I)\n    return O"], [0.7436960789269706, "def solve_2cfb3c38(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_9a7095b3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_43d5df35(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(toindices, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = objects(x5, T, F, T)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x5, x8)\n    return O"], [0.7436960789269706, "def solve_f9f0600b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_f5011454(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_d68d55f1(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_4b316b5f(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7436960789269706, "def solve_a78f4125(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_f700ff56(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_db0f04e4(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_9ffec60d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_1565ebba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_8ebcfe2b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_b0d22c00(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7436960789269706, "def solve_68bfb9aa(I):\n    O = rot90(I)\n    return O"], [0.7436960789269706, "def solve_c122fbb2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_ea79e4e3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_58a82f52(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_6c4516b1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_03da3cd5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_a98f16f8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_f239ea44(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_57828555(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_55dde4d1(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_c19cc311(I):\n    O = dmirror(I)\n    return O"], [0.7436960789269706, "def solve_816ea530(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_c3e7dda6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_ceb664ec(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_cc18addb(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_5a71d56d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_438f706b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.7436960789269706, "def solve_16aff312(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_18a0ff35(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [0.7436960789269706, "def solve_0fc2b845(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_bec01355(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.7436960789269706, "def solve_1196570b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_5095be16(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_a146ca9a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_3ba524cb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_cfcf28e2(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.7436960789269706, "def solve_a25f0c55(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, TWO)\n    x8 = astuple(TWO, x2)\n    x9 = power(decrement, TWO)\n    x10 = x9(x1)\n    x11 = x9(x2)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = crop(I, x12, x8)\n    x15 = crop(I, x13, x7)\n    x16 = asobject(x15)\n    x17 = asobject(x14)\n    x18 = vperiod(x16)\n    x19 = hperiod(x17)\n    x20 = astuple(x18, x19)\n    x21 = lbind(multiply, x20)\n    x22 = neighbors(ORIGIN)\n    x23 = mapply(neighbors, x22)\n    x24 = apply(x21, x23)\n    x25 = lbind(shift, x6)\n    x26 = mapply(x25, x24)\n    O = paint(I, x26)\n    return O"], [0.7436960789269706, "def solve_1fcc57a3(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(toivec, numcolors)\n    x5 = fork(add, lrcorner, x4)\n    x6 = fork(astuple, x3, x5)\n    x7 = compose(box, x6)\n    x8 = mapply(x7, x1)\n    O = fill(I, THREE, x8)\n    return O"], [0.7436960789269706, "def solve_d295d8c3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_05894b53(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_8c71b7e0(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_df7b466b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_3f3cd1f7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_e3f5a841(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_dfbbb59c(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_3b89e135(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_94983672(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_6fee0dcd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.7436960789269706, "def solve_d3463493(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [0.7436960789269706, "def solve_7a629c7e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_e2e5080c(I):\n    x1 = asindices(I)\n    x2 = recolor(ZERO, x1)\n    x3 = lbind(shift, x2)\n    x4 = occurrences(I, x2)\n    x5 = mapply(x3, x4)\n    O = paint(I, x5)\n    return O"], [0.7436960789269706, "def solve_717a5c31(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_a075377a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_f09525e7(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_61339b62(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7440145502645503, "def solve_a4a28622(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.7459101546601546, "def solve_4bb77202(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7459101546601546, "def solve_69ce8055(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7459101546601546, "def solve_bb4716d0(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7469103646412563, "def solve_02cc1bf7(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x2)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x2)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [0.7472675074983992, "def solve_7a10dcbb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_1764c709(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7472675074983992, "def solve_4347c091(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_7f62c837(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.7472675074983992, "def solve_c130da4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7480334878120887, "def solve_f6c16c47(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.7480334878120887, "def solve_9224f961(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480334878120887, "def solve_b88c0a04(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.7480334878120887, "def solve_fd3d1835(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7504817932126848, "def solve_f3d2cdb4(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, decrement, x8)\n    O = hmirror(x9)\n    return O"], [0.7508389360698278, "def solve_b47661a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2,UNITY)\n    x4 = intersection(x2, x3)\n    x5 = mapply(neighbors, x4)\n    O = underfill(I, UP, x5)\n    return O"], [0.7508389360698278, "def solve_32f4d056(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, mostcolor, x2)\n    return O"], [0.7532198884507801, "def solve_07d51b9c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_48a3de2d(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_934ada89(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.7532198884507801, "def solve_fd338538(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_c79503c9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, vmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, hmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_c26fe185(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_48b371f7(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_910f2054(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7615532217841134, "def solve_02aa9478(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.7615532217841134, "def solve_c001bb73(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.767824074074074, "def solve_62cbca51(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7707743846330803, "def solve_293b123d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.7722675074983991, "def solve_876ab2dc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.7725859788359788, "def solve_5bdd8550(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_34ef23fc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_f85e9eed(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_2d7d386d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7725859788359788, "def solve_388e1b7f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7758389360698277, "def solve_2078d72b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_da990556(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_59c66f95(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_60f97838(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_a4705935(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_544f55d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_4553f1d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7819990673127664, "def solve_487aa7fc(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_461aa8f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_497731f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_359d0d94(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_053e17b6(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7819990673127664, "def solve_31018754(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.7968659515534824, "def solve_95344ba8(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8074074074074075, "def solve_e5498a8a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = x3(I)\n    x6 = shape(x4)\n    x7 = canvas(ZERO, x6)\n    x8 = objects(x5, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_049372ee(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_a37c8aba(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 =uttuple(x6, x7)\n    x9 = repeat(x8, ONE)\n    O = x7(x9)\n    return O"], [1.0, "def solve_d19c3398(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_7ea63447(I):\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, THREE)\n    x3 = flip(x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x5(I)\n    x8 = x5(I)\n    x9 = first(x7)\n    x10 = last(x7)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x8, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = asindices(x11)\n    x23 = ofcolor(x11, x21)\n    x24 = difference(x22, x23)\n    x25 = astuple(x24, x3333)\n    x26 = apply(last, x25)\n    x27 = size(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = rbind(add, first)\n    x31 = compose(x30, last)\n    x32 = rbind(multiply, x31)\n    x33 = apply(x32, x29)\n    x34 = lbind(shift, x11)\n    x35 = mapply(x34, x33)\n    x36 = paint(x11, x35)\n    O = x6(x36)\n    return O"], [1.0, "def solve_7cc98818(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_3bda924f(I):\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(dneighbors, x1)\n    x3 = fork(difference, x2, toindices)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ZERO)\n    x6 = compose(x1, x5)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x1, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_20cebd2e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_78c33ff1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_962b3b43(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_14d818e9(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x12 = compose(x15, last)\n    x13 = sfilter(x13, x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x8, x15)\n    x17 = other(x16, x14)\n    x18 = rbind(colorcount, x14)\n    x19 = argmin(x17, x18)\n    x20 = apply(ulcorner, xx)\n    x21 = normalize(x19)\n    x22 = matcher(first, x14)\n    x23 = sfilter(x21, x22)\n    x24 = toindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = mapply(x25, x8)\n    x27 = ofcolor(I, x17)\n    x28 = backdrop(x27)\n    x29 = intersection(x27, x28)\n    O = fill(I, x17, x29)\n    return O"], [1.0, "def solve_e6b2b224(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_53a0909f(I):\n    x1 = objects(I, F, T, T)\n    x2 = subgrid(x1, I)\n    x3 = mostcolor(x2)\n    O = replace(x2, x3, ONE)\n    return O"], [1.0, "def solve_d2d3de8d(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = apply(ulcorner, x2)\n    x4 = apply(urcorner, x2)\n    x5 = apply(llcorner, x2)\n    x6 = apply(lrcorner, x2)\n    x7 = fill(I, ONE, x3)\n    x8 = fill(x7, TWO, x4)\n    x9 = fill(x8, THREE, x5)\n    O = fill(x9, FOUR, x6)\n    return O"], [1.0, "def solve_f51bcb8d(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO_BY_TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners, combine)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_c85f36ed(I):\n    x1 =O = subgrid(x2, I)\n    O = trim(x1)\n    return O"], [1.0, "def solve_80c2a33c(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6757fa8d(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_706088f6(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f111fd73(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = lbind(shift, x5)\n    x7 = mapply(x6, x4)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_568417bf(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da15407e(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = fill(I, x10, x30)\n    O = trim(x31)\n    return O"], [1.0, "def solve_913b1be3(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_25abc504(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = occurrences(x7, x21)\n    x25 = lbind(mapply, backdrop)\n    x26 = lbind(apply, toindices)\n    x27 = compose(x25, x26)\n    x28 = x27(x24)\n    x29 = x27(x25)\n    x30 = fill(x7, x4, x28)\n    x31 = fill(x30, x6, x29)\n    O = fill(x31, ONE, x30)\n    return O"], [1.0, "def solve_66aeef6e(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e7fe1202(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e57feb5d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_9fe0b56e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_9b3d7e8f(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = x2(x2)\n    return O"], [1.0, "def solve_acafbc06(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_299c5df7(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_2be20951(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d17e2eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 =x26(x15)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x22, x30)\n    x32 = apply(x11, x31)\n    x33 = argmin(x32, size)\n    x34 = x22(x33)\n    x35 = x21(x34)\n    x36 = divide(x17, x35)\n    x37 = x51(x34)\n    x38 = x25(x37)\n    x39 = canvas(x38, x36)\n    O = paint(x39, x37)\n    return O"], [1.0, "def solve_4adc7313(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_a97ec318(I):\n    x1 = index(I, ORIGIN)\n    x2 = recolor(ORIGIN, x1)\n    x3 = apply(initset, x2)\n    x4 = toindices(x3)\n    x5 = chain(backdrop, first, last)\n    x6 = lbind(mapply, x5)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = compose(x6, x7)\n    x9 = position(x4, x8)\n    x10 = difference(x1, x9)\n    x11 = apply(x8, x10)\n    x12 = lbind(difference, x4)\n    x13 = compose(x12, x8)\n    x14 = rbind(ofcolor, ZERO)\n    x15 = compose(x14, x8)\n    x16 = fork(sfilter, x13, x15)\n    x17 = mapply(x16, x11)\n    O = fill(I, x1, x17)\n    return O"], [1.0, "def solve_bb3cbb31(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a5fbb767(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, flip)\n    x3 = branch(x1, decrement, ONE)\n    x4 = x2(I)\n    x5 = halve(x4)\n    x6 = x3(I)\n    x7 = rbind(shoot, x5)\n    x8 = compose(x7, x4)\n    x9 = fork(combine, x8, x5)\n    x10 = mapply(x9, x6)\n    O = fill(I, ONE, x10)\n    return O"], [1.0, "def solve_62f87671(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_8f1c175e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_11ee2f79(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_76d78f80(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose,initset)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = lbind(fork, greater)\n    x8 = lbind(chain, FOUR)\n    x9 = rbind(x8, x6)\n    x10 = lbind(rbind, contained)\n    x11 = compose(x9, x10)\n    x12 = lbind(compose, x2)\n    x13 = chain(x11, x12, x11)\n    x14 = lbind(compose, x4)\n    x15 = compose(x14, x13)\n    x16 = fork(x11, x15, x11)\n    x17 = compose(first, x16)\n    x18 = fork(9999, x17, x5)\n    x19 = compose(first, x5)\n    x20 = fork(recolor, x18, x19)\n    x21 = fork(remove, x20, x8)\n    x22 = fork(astuple, x21, x17)\n    x23 = fork(insert, x22, x83)\n    x24 = box(x23)\n    O = fill(I, x24, x24)\n    return O"], [1.0, "def solve_ea1a36f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_e763c4da(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, rbind, x6)\n    x8 = chain(merge, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [1.0, "def solve_f1a313bf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = rbind(colorcount, ZERO)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_b2e2b4c2(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = apply(d406, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = repeat(x6, ONE)\n    x8 = combine(x7, x4)\n    x9 = multiply(NEG_TWO, TEN)\n    x10 = interval(x9, x2, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = lbind(shift, x8)\n    x13 = mapply(x12, x11)\n    O = paint(x2, x13)\n    return O"], [1.0, "def solve_4275544e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = lbind(apply, maximum)\n    x6 = chain(x5, double, x4)\n    x7 = matcher(x6, EIGHT)\n    x8 = compose(flip, x7)\n    x9 = sfilter(I, x8)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = lbind(shift, x9)\n    x12 = chain(x10, x11, palette)\n    x13 = apply(x12, x9)\n    x14 = merge(x13)\n    x15 = mostcolor(x14)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = hconcat(I, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = argmax(x19, numcolors)\n    x21 = apply(ulcorner, x19)\n    x22 = normalize(x20)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x21)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_2937f851(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8fea3bcd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_58da7cea(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, TWO)\n    x6 = argmax(x4, x2)\n    x7 = neighbors(x6)\n    x8 = insert(x6, x7)\n    x9 = fill(x3, EIGHT, x8)\n    x10 = hmirror(x9)\n    x11 = replace(x10, EIGHT, ONE)\n    x12 = x2(x11)\n    x13 = merge(x12)\n    x14 = cover(x11, x13)\n    x15 = paint(x14, x12)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, EIGHT)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [1.0, "def solve_cc69ffc6(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c0e6387(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(O, x5)\n    return O"], [1.0, "def solve_b11ffdfa(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWOZERO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [1.0, "def solve_3cb67168(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_5b89bf48(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = leastcolor(I)\n    x5 = repeat(x4, ONE)\n    x6 = rbind(ofcolor, x4)\n    x7 = compose(x6, frontiers)\n    x8 = chain(size, x7, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = astuple(x19, x0)\n    x11 = canvas(x9, x10)\n    x12 = argmax(x11, x9)\n    x13 = subtract_normalize(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = difference(x14, x12)\n    x16 = rbind(multiply, x13)\n    x17 = apply(x16, x15)\n    x18 = rbind(interval, x12)\n    x19 = lbind(rbind, contained)\n    x20 = lbind(sfilter, x17)\n    x21 = compose(x19, x20)\n    x22 = lbind(compose, x21)\n    x23 = lbind(rbind, intersection)\n    x24 = compose(x22, x23)\n    x25 = lbind(rbind, shift)\n    x26 = lbind(apply, x25)\n    x27 = lbind(chain, x24)\n    x28 = x27(x41)\n    x29 = lbind(x28, x41)\n    x30 = rbind(x26, x8)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x21)\n    x33 = pair(x17, x12)\n    x34 = mapply(x32, x33)\n    O = paint(x11, x34)\n    return O"], [1.0, "def solve_00d75081(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = argmin(x1, uppermost)\n    x5 = argmax(x1, uppermost)\n    x6 = width(x3)\n    x7 = halve(x6)\n    x8 = height(x3)\n    x9 = height(x5)\n    x10 = interval(ZERO, x8, ONE)\n    x11 = lbind(multiply, x7)\n    x12 = rbind(divide, x7)\n    x13 = chain(x11, x12, last)\n    x14 = lbind(apply, last)\n    x15 = lbind(remove, x4)\n    x16 = lbind(astuple, x9)\n    x17 = chain(x14, x15, x16)\n    x18 = lbind(apply, first)\n    x19 = lbind(other, x9)\n    x20 = compose(x18, x19)\n    x21 = compose(x15, x20)\n    x22 = fork(combine, x17, x21)\n    x23 = compose(x12, matcher)\n    x24 = fork(combine, x23, x22)\n    x25 = fork(combine, x38, x12)\n    x26 = fork(combine, x26, x24)\n    x27 = fork(difference, x28, x22)\n    x28 = fork(mapply, x27, x27)\n    x29 = fork(difference, x28, last)\n    x30 = fork(recolor, first, x29)\n    x31 = mapply(x30, x5)\n    O = paint(x3, x31)\n    return O"], [1.0, "def solve_63e392f1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e24eeece(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_ef0ab38c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4f492ee7(I):\n    x1 = fgpartition(I)\n    x2 =matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_3cd09773(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_d9624359(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fb1ad7ac(I):\n    x1 = index(I, ORIGIN)\n    x2 = center(I)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x2, x4)\n    x6 = fill(I, FOUR, x5)\n    x7 = astuple(x3, ONE)\n    x8 = canvas(x1, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, DOWN)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = rbind(toobject, I)\n    x16 = lbind(compose, ZERO)\n    x17 = lbind(colorfilter, x15)\n    x18 = compose(x16, x17)\n    x19 = lbind(shift, x10)\n    x20 = rbind(multiply, x4)\n    x21 = chain(x19, x20, last)\n    x22 = mapply(x21, x14)\n    x23 = paint(x6, x22)\n    O = downscale(x23, THREE)\n    return O"], [1.0, "def solve_d9026414(I):\n    x1 = doublecolors(I)\n    x2 = decrement(x1)\n    x3 = compose(vfrontier, tojvec)\n    x4 = initset(ZERO)\n    x5 = lbind(rapply, x4)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(first, x6)\n    x8 = chain(x3, x7, x3)\n    x9 = matcher(x8, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fill(I, ZERO, x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x12, x14)\n    x16 = urcorner(x2)\n    x17 = lbind(shift, x16)\n    x18 = height(x12)\n    x19 = divide(x18, x19)\n    x20 = increment(x19)\n    x21 = width(x12)\n    x22 = divide(x21, x22)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x23)\n    x25 = apply(x24, x20)\n    x26 = mapply(x17, x25)\n    x27 = cover(x15, x26)\n    O = paint(x27, x200)\n    return O"], [1.0, "def solve_af609e9e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_343d91ee(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x8)\n    x4 = fork(either, vline, hline)\n    x5 = mfilter(x3, x4)\n    x6 = mostcolor(I)\n    x7 = shape(I)\n    x8 = canvas(x6, x7)\n    O = fill(x8, ONE, x5)\n    return O"], [1.0, "def solve_2b682033(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(non38, x1)\n    x3 = combine(x2, x2)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = tophalf(x4)\n    x7 = tophalf(x5)\n    x8 = bottomhalf(x4)\n    x9 = bottomhalf(x5)\n    x10 = astuple(x6, x7)\n    x11 = astuple(x8, x9)\n    x12 = combine(x10, x11)\n    x13 = rbind(adjacent, x12)\n    x14 = extract(x12, x13)\n    O = x14(x4)\n    return O"], [1.0, "def solve_ef5e29eb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_c0733203(I):\n    O = upscale(I, TWO)\n    return O"], [1.0, "def solve_846b1bdf(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_e7e994a3(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d2965672(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_7d1be212(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_181387ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, frontiers)\n    x7 = sfilter(x2, x6)\n    x8 = colorfilter(x4, ONE)\n    x9 = difference(x4, x8)\n    x10 = pair(x9, x8)\n    x11 = mapply( sfilter, x10)\n    x12 = leastcolor(x11)\n    x13 = shape(I)\n    x14 = canvas(x12, x13)\n    x15 = hconcat(I, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = rbind(colorcount, x12)\n    x18 = order(x16, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, x12)\n    x23 = combine(x21, x22)\n    x24 = intersection(x21, x22)\n    x25 = difference(x23, x24)\n    O = fill(x15, NINE, x25)\n    return O"], [1.0, "def solve_fbbb8b8e(I):\n    x1 = fill(I, FIVE, x2)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = index(I, x2)\n    x5 = lbind(shift, x2)\n    x6 = mapply(x5, x3)\n    O = fill(x1, x4, x6)\n    return O"], [1.0, "def solve_0bfc1c91(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x3)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x4)\n    x12 = ulcorner(x2)\n    x13 = lbind(subtract, x12)\n    x14 = rbind(shift, x12)\n    x15 = compose(x13, x14)\n    x16 = fork(hmirror, identity, x15)\n    x17 = mapply(x16, x11)\n    O = paint(x1, x17)\n    return O"], [1.0, "def solve_9579b0f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = palette(x8)\n    x10 = intersection(x9, x5)\n    x11 = first(x10)\n    x12 = shape(x5)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x3, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = first(x15)\n    x17 = compose(vdrop, vmirror)\n    x18 = rbind(hmatching, x17)\n    x19 = sfilter(x16, x18)\n    x20 = asindices(x19)\n    x21 = apply(x17, x20)\n    x22 = lbind(shift, x8)\n    x23 = mapply(x22, x21)\n    O = paint(x21, x23)\n    return O"], [1.0, "def solve_10cb4435(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_24164807(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_dc434a02(I):\n    x1 = ofcolor(I, THREE)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, THREE, ZERO)\n    x5 = replace(x4, EIGHT, ZERO)\n    x6 = compress(x5)\n    x7 = upscale(x6, THREE)\n    O = fill(x7, ZERO, x3)\n    return O"], [1.0, "def solve_cf1272d5(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = decrement(TWO)\n    x4 = toivec(x3)\n    x5 = crop(I, x4, THREE_BY_THREE)\n    x6 = asobject(x5)\n    x7 = decrement(x2)\n    x8 = astuple(x7, x8)\n    x9 = connect(x7, x8)\n    x10 = fill(I, SIX, x9)\n    x11 =object(x10, I)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = astuple(x11, x12)\n    x14 = lbind(multiply, x13)\n    x15 = apply(x14, x12)\n    x16 = lbind(shift, x11)\n    x17 = mapply(x16, x15)\n    O = fill(x10, FIVE, x17)\n    return O"], [1.0, "def solve_1e5255a3(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_114b60f6(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_8e9260a1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_311eb1f7(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_6b36777e(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(adjacent, x2)\n    x5 = mfilter(x3, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_b796a6f8(I):\n    x1 = switch(I, FOUR, ZERO)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = rbind(ofcolor, ZERO)\n    x7 = palette(x3)\n    x8 = palette(x10)\n    x9 = intersection(x7, x8)\n    x10 = fill(x5, ZERO, x9)\n    x11 = fill(x10, EIGHT, x4)\n    O = fill(x11, TWO, x5)\n    return O"], [1.0, "def solve_ba07786f(I):\n    x1 = matcher(first, THREE)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(ff28, x2)\n    x4 = fork(recolor, identity, x3)\n    x5 = mapply(x4, objects)\n    x6 = paint(I, x5)\n    x7 = replace(x6, EIGHT, ONE)\n    O = paint(x7, delta)\n    return O"], [1.0, "def solve_5ccb1afb(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(compose, x8)\n    x17 = chain(x16, x5, x6)\n    x18 = lbind(compose, x10)\n    x19 = chain(x18, x5, x6)\n    x20 = lbind(compose, x12)\n    x21 = chain(x20, x5, x6)\n    x22 = lbind(compose, x17)\n    x23 = chain(x21, x22, x6)\n    x24 = rbind(rapply, I)\n    x25 = chain(first, x24, initset)\n    x26 = fork(rapply, x25, x6)\n    x27 = compose(x25, x26)\n    x28 = mapply(x27, x2)\n    x29 = argmax(x28, x7)\n    O = x30(x29)\n    return O"], [1.0, "def solve_3405ecb8(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(astuple, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_a11fa586(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_ba39fe2b(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a6cbd52e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e79cbf7a(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [1.0, "def solve_b3617a6f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = mostcolor(x5)\n    x7 = leastcolor(I)\n    x8 = ofcolor(I, x7)\n    x9 = position(x5, x8)\n    x10 = shoot(x6, NEG_UNITY)\n    x11 = lrcorner(x8)\n    x12 = shoot(x11, UNITY)\n    x13 = fill(I, x1, x9)\n    O = fill(x13, x7, x12)\n    return O"], [1.0, "def solve_8ae96ca0(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_0a7a97ac(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, shape)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [1.0, "def solve_3fafaf9d(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f64281da(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_08aedea3(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = sfilter(x7, x4)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_0e42b48f(I):\n    x1 = Fgpartition(I)\n    x2 = objects(I, T, F, F)\n    x3 = order(x1, height)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = colorfilter(x2, x7)\n    x9 = power(outbox, TWO)\n    x10 = rbind(toobject, I)\n    x11 = mostcolor(I)\n    x12 = lbind(remove, x11)\n    x13 = chain(size, x12, palette)\n    x14 = chain(x13, x10, x9)\n    x15 = argmax(x8, x14)\n    x16 = ulcorner(x15)\n    x17 = shape(x15)\n    x18 = subtract(x16, x17)\n    x19 = decrement(x18)\n    x20 = multiply(x17, THREE)\n    x21 = add(x20, TWO_BY_TWO)\n    x22 = crop(I, x19, x21)\n    x23 = asobject(x22)\n    x24 = apply(ulcorner, x8)\n    x25 = increment(x17)\n    x26 = rbind(subtract, x25)\n    x27 = apply(x26, x24)\n    x28 = lbind(shift, x23)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_ea9e0567(I):\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = decrement(x4)\n    x6 = branch(x2, tojvec, lefthalf)\n    x7 = x6(I)\n    x8 = rbind(shoot, x5)\n    x9 = rbind(shoot, x7)\n    x10 = fork(combine, x8, x9)\n    x11 = x10(x7)\n    x12 = fill(x7, ZERO, x11)\n    x13 = ofcolor(x12, TWO)\n    x14 = subgrid(x13, x12)\n    x15 = x3(x14)\n    x16 = palette(x15)\n    x17 = contained(x16, x13)\n    x18 = height(x15)\n    x19 = trim(x15)\n    x20 = palette(x19)\n    x21 = contained(x20, x10)\n    x22 = height(x7)\n    x23 = divide(x22, x18)\n    x24 = increment(x23)\n    x25 = width(x7)\n    x26 = divide(x25, x19)\n    x27 = increment(x26)\n    x28 = repeat(x24, x27)\n    x29 = shift(x28, UNITY)\n    x30 = shift(x29, x24)\n    x31 = combine(x29, x30)\n    x32 = asindices(x29)\n    x33 = shape(x29)\n    x34 = outbox(x33)\n    x35 = remove(x34, x33)\n    x36 = lbind(adjacent, x32)\n    x37 = mfilter(x35, x36)\n    x38 = vmirror(x37)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    O = paint(x12, x40)\n    return O"], [1.0, "def solve_67c9f1ed(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e3c2207e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_9570d2b8(I):\n    x1 = shape(I)\n    x2 = connect(ORIGIN, x1)\n    x3 = height(I)\n    x4 = halve(x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = double(DOWN)\n    x12 = multiply(x11, x10)\n    x13 = subgrid(x12, I)\n    x14 = interval(ZERO, x2, ONE)\n    x15 = merge(x14)\n    x16 = double(x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(subtract, x56)\n    x20 = lbind(shift, x15)\n    x21 = mapply(x19, x20)\n    O = paint(x1, x21)\n    return O"], [1.0, "def solve_fdd6d693(I):\n    x1 = switch(I, FIVE, EIGHT)\n    x2 = switch(x1, FIVE, TWO)\n    x3 = objects(x2, T, F, T)\n    x4 = argmax(x3, size)\n    x5 = argmin(x3, size)\n    x6 = color(x4)\n    x7 = color(x5)\n    x8 = fill(x2, x6, x1)\n    O = fill(x8, x7, x4)\n    return O"], [1.0, "def solve_ee148566(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, shape)\n    x3 = compose(size, x1)\n    x4 = matcher(x3, TWO_BY_TWO)\n    x5 = dmirror(I)\n    x6 = papply(pair, x5, x1)\n    x7 = compose(size, dedupe)\n    x8 = matcher(x7, ONE)\n    x9 = dmirror(x8)\n    x10 = papply(pair, x9, x1)\n    x11 = compose(size, dedupe)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x4, x12)\n    x14 = fork(both, x7, x13)\n    x15 = fork(astuple, x14, x405)\n    x16 = argmax(x6, x15)\n    x17 = mostcolor(x16)\n    x18 = x16(I)\n    x19 = objects(x18, T, F, F)\n    x20 = colorfilter(x19, ZERO)\n    x21 = rbind(bordering, I)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x20, x22)\n    O = fill(x18, ONE, x23)\n    return O"], [1.0, "def solve_52cf2d5c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_60451d2d(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = first(x32)\n    x34 = shape(I)\n    x35 = halve(x34)\n    x36 = canvas(x11, x35)\n    O = fill(x36, x10, x33)\n    return O"], [1.0, "def solve_16d93893(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f421382c(I):\n    x1 = papply(d687, x2, x3)\n    x2 = compose(d07, numcolors)\n    x3 = fork(equality, x2, x3)\n    x4 = sfilter(x1, x3)\n    x5 = compose(flip, x4)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [1.0, "def solve_463c6181(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_237402ad(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(positive, size)\n    x3 = lbind(intersection, x2)\n    x4 = chain(positive, size, x3)\n    x5 = chain(x2, x4, dmirror)\n    x6 = objects(I, T, F, T)\n    x7 = merge(x6)\n    x8 = shift(x7, DOWN)\n    x9 = fill(I, ZERO, x8)\n    x10 = shift(x8, x5)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x2)\n    O = paint(x9, x12)\n    return O"], [1.0, "def solve_2b328405(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_88fc14a0(I):\n    x1 = frontiers(I)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = difference(x1, x2)\n    x5 = mapply(toindices, x4)\n    x6 = difference(x3, x5)\n    x7 = fill(I, NEG_ONE, x5)\n    x8 = fill(x7, NEG_ONE, x6)\n    x9 = lbind(fork, subtract)\n    x10 = lbind(x9, positive)\n    x11 = lbind(x10, size)\n    x12 = rbind(intersection, x2)\n    x13 = chain(x11, x12, toindices)\n    x14 = compose(size, x13)\n    x15 = compose(x10, size)\n    x16 = lbind(lbind, intersection)\n    x17 = compose(x16, x13)\n    x18 = lbind(extract, x5)\n    x19 = fork(compose, x17, x18)\n    x20 = lbind(sfilter, x6)\n    x21 = chain(merge, x20, x19)\n    x22 = lbind(fork, recolor)\n    x23 = lbind(x22, color)\n    x24 = rbind(mapply, x23)\n    x25 = lbind(chain, x24)\n    x26 = lbind(rbind, occurrences)\n    x27 = chain(x25, x26, toindices)\n    x28 = lbind(lbind, combine)\n    x29 = chain(x27, x28, x27)\n    x30 = lbind(mapply, x25)\n    x31 = chain(x29, x30, x27)\n    x32 = fork(ofcolor, x21, x13)\n    x33 = fork(recolor, x25, x31)\n    x34 = mapply(x33, x6)\n    O = paint(x16, x34)\n    return O"], [1.0, "def solve_63363095(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_63ad581b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = Feca(TWO)\n    x4 = connect(ORIGIN, x3)\n    x5 = positive(x2)\n    x6 = asindices(I)\n    x7 = UNITY(x6)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = rbind(shoot, DOWN)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x8)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_3f1d6f48(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_32bd0f64(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_482fbab2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_747e3a4d(I):\n    x1 = lbind(colorcount, I)\n    x2 = compose(maximum, x1)\n    x3 = apply(x2, I)\n    x4 = minimum(x3)\n    x5 = astuple(ONE, x4)\n    x6 = astuple(TWO, x4)\n    x7 = canvas(x2, x5)\n    x8 = initset(x7)\n    x9 = recolor(ZERO, x8)\n    O = upscale(x9, TWO)\n    return O"], [1.0, "def solve_e9b926ab(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x999 = mostcolor(x8)\n    x10 = matcher(first, x999)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_739291b5(I):\n    x1 = shape(I)\n    x2 = index(I, ORIGIN)\n    x3 = decrement(x1)\n    x4 = upscale(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = argmin(x5, size)\n    x7 = cover(I, x6)\n    x8 = normalize(x6)\n    x9 = paint(x7, x8)\n    x10 = objects(x9, F, F, T)\n    x11 = argmin(x10, size)\n    x12 = multiply(x11, LEFT)\n    x13 = add(x12, x11)\n    x14 = canvas(x2, x13)\n    x15 = normalize(x11)\n    x16 = lbind(remove, last)\n    x17 = rbind(s6666, x16)\n    x18 = compose(x17, center)\n    x19 = rbind( webpagepply, x13)\n    x20 = compose(x19, center)\n    x21 = fork(combine, x18, x20)\n    x22 = rbind(occurrences, x14)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(dmirror, x24, x21)\n    x26 = chain(cmirror, x25, x21)\n    x27 = fork(combine, x26, x25)\n    x28 = apply(x27, x10)\n    x29 = dmirror(x28)\n    x30 = apply(x27, x29)\n    x31 = x17(x30)\n    x32 = x16(x31)\n    x33 = x25(x32)\n    x34 = shift(x33, UNITY)\n    x35 = paint(x9, x34)\n    O = x30(x35)\n    return O"], [1.0, "def solve_ed6bc6a5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d83299b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolors(x14)\n    x25 = difference(x23, x24)\n    x26 = mapply(x22, x25)\n    O = fill(x14, x13, x26)\n    return O"], [1.0, "def solve_e468e763(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_5fdd3418(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f474d964(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_98c63976(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = vperiod(x6)\n    x8 =toivec(x7)\n    x9 = add(x8, NEG_ONE)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = apply(numcolors, x11)\n    x13 = matcher(equality, ONE)\n    x14 = partition(I)\n    x15 = sfilter(x14, x13)\n    x16 = difference(x14, x15)\n    x17 = merge(x16)\n    x18 = cover(I, x17)\n    x19 = lbind(compose, flip)\n    x20 = lbind(matcher, first)\n    x21 = chain(x19, x20, mostcolor)\n    x22 = fork(19, identity, x21)\n    x23 = lbind(compose, flip)\n    x24 = lbind(matcher, first)\n    x25 = chain(x23, x24, x22)\n    x26 = fork(argmin, x22, x25)\n    x27 = fork(00000000, x26, x20)\n    x28 = mapply(x27, x18)\n    O = paint(x18, x28)\n    return O"], [1.0, "def solve_99b28621(I):\n    x1 = shape(I)\n    x2 = decrement(x1)\n    O = connect(ORIGIN, x2)\n    return O"], [1.0, "def solve_fa985f5f(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_0a471b0c(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(add, x3)\n    x21 = rbind(insert, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(insert, x22, x21)\n    x24 = size(x1)\n    x25 = positive(x24)\n    x26 = size(x26)\n    x27 = increment(x25)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(tojvec, x28)\n    x30 = apply(23, x29)\n    x31 = mpapply(shift, x30, x22)\n    x32 = mapply(toivec, x31)\n    x33 = shift(x23, x32)\n    x34 = canvas(x11, x33)\n    x35 = paint(x34, x3)\n    O = x9(x35)\n    return O"], [1.0, "def solve_226abe4d(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_9e50dc8b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_3362ae76(I):\n    x1 = leastalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O"], [1.0, "def solve_9cb17147(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = dneighbors(UNITY)\n    x3 = insert(UNITY, x2)\n    x4 = lrcorner(x3)\n    x5 = halve(x4)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = intersection(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [1.0, "def solve_bc02fed4(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db308579(I):\n    x1 = lbind(contained, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, x8)\n    x11 = paint(x8, x10)\n    x12 = repeat(x11, ONE)\n    x13 = asindices(x8)\n    x14 = center(x13)\n    x15 = invert(x14)\n    x16 = shift(x13, x15)\n    x17 = apply(x5, x16)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = product(x20, x20)\n    x22 = fork(compose, first, last)\n    x23 = apply(x22, x21)\n    x24 = product(x23, x23)\n    x25 = fork(compose, FIVE, flip)\n    x26 = apply(x25, x24)\n    x27 = mapply(box, x26)\n    O = fill(x8, x17, x27)\n    return O"], [1.0, "def solve_f5574119(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = compose(center, x3)\n    x5 = compose(dneighbors, x4)\n    x6 = fork(difference, x5, x4)\n    x7 = compose(first, x6)\n    x8 = chain(x4, x7, x8)\n    x9 = fork(recolor, x8, x4)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_5fab8a3f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d8afbcfe(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(color, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(F25, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, outbox, initset)\n    x13 = corners(x6)\n    x14 = mapply(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = inbox(x7)\n    x17 = sfilter(x16, x11)\n    x18 = combine(x15, x17)\n    x19 = fill(x5, ONE, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(matcher, normalize)\n    x23 = lbind(extract, x21)\n    x24 = chain(ulcorner, x23, x22)\n    x25 = compose(x24, toindices)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x5, x27)\n    return O"], [1.0, "def solve_b55466a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(difference, x2)\n    O = fill(I, ZERO, x3)\n    return O"], [1.1, "def solve_9bbba443(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, FOUR)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, FOUR)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = hperiod(x22)\n    x35 = hperiod(x26)\n    x36 = interval(x33, x34, ONE)\n    x37 = matcher(x35, x36)\n    x38 = astuple(x33, x37)\n    x39 = lbind(x astuple, x38)\n    x40 = lbind(compose, flip)\n    x41 = lbind(matcher, first)\n    x42 = chain(x39, x"], [1.1, "def solve_0b5463cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d963864a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x"], [1.1, "def solve_839a928e(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_f943f05d(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = vsplit(I, TWO)\n    x4 = hsplit(I, TWO)\n    x5 = astuple(x3, x4)\n    x6 = intersection(x5, x2)\n    x7 = argmax(x6, size)\n    x8 = matcher(x4, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(color, first)\n    x11 = fork(recolor, x10, x9)\n    x12 = rbind(sfilter, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(paint, identity, x13)\n    x15 = toindices(x9)\n    x16 = fgpartition(I)\n    x17 = merge(x16)\n    x18 = normalize(x17)\n    x19 = SEVEN(x18)\n    x20 = initset(x19)\n    x21 = insert(x7, x20)\n    x22 = product(x21, x19)\n    x23 = EIGHT(x22)\n    x24 = ofcolor(x23, x10)\n    x25 = inbox(x24)\n    x26 = difference(x25, x24)\n    x27 = fill(x23, x10, x26)\n    x28 = NEG_UNITY(x27)\n    x29 = initset(x28)\n    x30 = recolor(x24, x29)\n    x31 = fill(x27, x10, x30)\n    x32 = ofcolor(x31, x10)\n    x33 = ulcorner(x2)\n    x34 = shift(x32, x33)\n    x35 = lrcorner(x322)\n    x36 = shift(x34, x35)\n    x37 = fill(x31, x10, x36)\n    x38 = ofcolor(x37, x10)\n    x39 = sizefilter(x38, ONE)\n    x"], [1.1, "def solve_779f532a(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_54b92419(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_8d7b81ff(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = decrement(x17)\n    x19 = mapply(x16, x x18)\n    x20 = intersection(x4, x4)\n    x21 = combine(x16, x20)\n    x22 = fill(x3, ZERO, x21)\n    x23 = astuple(x18, x19)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = lbind(shift, x25)\n    x27 = height(x3)\n    x28 = decrement(x27)\n    x29 =mapply(x26, x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    x32 = asindices(x31)\n    x33 = lbind(shift, x32)\n    x34 = ofcolor(x33, ZERO)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = objects(x38, T, T, T)\n    x38 = insert(x37, x37)\n    x39 = add(x37, THREE)\n    x40 = asindices(x39)\n    "], [1.1, "def solve_0210594b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(lowermost, x1)\n    x3 = compose(rightmost, x1)\n    x4 = fork(equality, x2, x3)\n    x5 = compose(toivec, x4)\n    x6 = lbind(apply, initset)\n    x7 = compose(x6,666404)\n    x8 = fork(inter260, x5, x7)\n    x9 = compose(rot90, x8)\n    x10 = compose(rot180, x8)\n    x11 = compose(rot270, x8)\n    x12 = fork(equality, x9, x11)\n    x13 = fork(either, x10, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(14, x8)\n    x16 = fork(compose, x13, x15)\n    x17 = width(I)\n    x18 = height(I)\n    x19 =596(I)\n    x20 = decrement(x18)\n    x21 = lbind(astuple, x20)\n    x22 = chain(increment, x21, x16)\n    x23 = fork(greater, x26, x22)\n    x24 = compose(x23, x14)\n    x25 = sfilter(x19, x24)\n    x26 = lbind(apply, initset)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x24, x27)\n    x29 = fork(rapply, x28, x26)\n    x30 = compose(initset, x29)\n    x31 = fork(rapply, x30, x25)\n    x32 = compose(first, x31)\n    x33 = fork(remove, x32, last)\n    x34 = fork(astuple, x40, x33)\n    x35 = size(x1)\n    x36 = power(x34, x35)\n    x37 = astuple(x36, x333)\n    x38 = x34(I)\n"], [1.1, "def solve_3ff06587(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x66)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_d7837f2c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(bordering, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(color, x1)\n    x8 = totuple(x3)\n    x9 = apply(color, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, x1)\n    x12 = repeat(x10, ONE)\n    x13 = x11(x12)\n    x14 = x11(x4)\n    x15 = x11(x14)\n    x16 = x11(x13)\n    x17 = x11(x16)\n    x18 = apply(leftmost, x15)\n    x19 = leftmost(x18)\n    x20 = subtract(x19, x18)\n    x21 = double(x20)\n    x22 = astuple(THREE, x21)\n    x23 = repeat(x22, ONE)\n    x24 = merge(x23)\n    x25 = dmirror(x24)\n    x26 = astuple(x25, x24)\n    x27 = combine(x26, x23)\n    x28 = multiply(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = astuple(x26, x29)\n    x31 = dmirror(x30)\n    x32 = combine(x30, x31)\n    x33 = combine(x28, x32)\n    x34 = recolor(x25, x33)\n    x35 = mostcolor(I)\n    x36 = x35(x4)\n    x37 = paint(x16, x36)\n    x38 = paint(x37, x34)\n    x39 = height(x38)\n    x40 = width(x38)\n    x41 = astuple(x39, x40)\n    x42 = crop(x38, ORIGIN, x41)\n    x43 ="], [1.1, "def solve_cb8a8a34(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(raindices, x24)\n    x26 = chain(x20, x25, last)\n    x27 = fork(compose, x26, x22)\n    x28 = chain(x16, x27, x6)\n    x29 = rbind(contained, x5)\n    x30 = chain(x29, first, last)\n    x31 = compose(x27, x30)\n    x32 = chain(x16, x27, x6)\n    x33 = fork(contained(x32, x31)\n    x34 = fork(1997, x33, x28)\n    x35 = fork(59eb, x24, x28)\n"], [1.1, "def solve_0275d5bf(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x29, last)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine,"], [1.1, "def solve_653cf0fd(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0aaf94f3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_91125bee(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_bb312312(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = chain(x1, positive, dmirror)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = initset(x9)\n    x13 = insert(x11, x12)\n    x14 = backdrop(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = dmirror(x20)\n    x22 = ofcolor(x20, x11)\n    x23 = compose(palette, last)\n    x24 = rbind(remove, x23)\n    x25 = chain(x24, remove, first)\n    x26 = ofcolor(x20, x26)\n    x27 = rightmost(x26)\n    x28 = leftmost(x26)\n    x29 = ofcolor(x20, x13)\n    x30 = leftmost(x29)\n    x31 = greater(x27, x30)\n    x32 = ofcolor(x20, x15)\n    x33 = leftmost(x31)\n    x34 = rightmost(x31)\n    x35 = astuple(x32, x34)\n    x36 = astuple(x32, x35)\n    x37 = greater(x33, x36)\n    x38 = rightmost(x33)\n    x39 = leftmost(x33)\n    x40 = subtract(x38, x39)\n    x41 = astuple(x37"], [1.1, "def solve_51e10f6a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(first, x34)\n    x38 = portrait(x37)\n    x39 = branch(x38, x35, x34)\n    x40 = branch(x38, x35, x34)\n    x"], [1.1, "def solve_88f1239a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2136be83(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x04, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_1e260436(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = matcher(identity, ZERO)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmax(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = fork(4000,0100, vmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, ONE)\n    x11 = fork(both, x7, x10)\n    x12 =11(I)\n    x13 =\n    x14 = extract(x12, x11)\n    x15 = first(x13)\n    x16 = last(x13)\n    x17 = palette(x15)\n    x18 = equality(x17, x12)\n    x19 =457(x15)\n    x20 = repeat(x16, x19)\n    x21 =057(x20, UNITY)\n    x22 =457(x21)\n    x23 = asindices(x22)\n    x24 = ofcolor(x12, ZERO)\n    x25 = ofcolor(x12, x16)\n    x26 = intersection(x24, x25)\n    x27 = outbox(x13)\n    x28 = difference(x27, x26)\n    x29 = subgrid(x28, x12)\n    x30 = intersection(x23, x26)\n    x31 = outbox(x30)\n    x32 = frontiers(x31)\n    x33 = mapply(toindices, x32)\n    x34 = difference(x33, x30)\n    x35 = toobject(x34, x69)\n    x36 = objects(x12, T, F, T)\n    x37 = rbind(colorcount, x12)\n    x38 = argmax(x36, x37)\n    x39 = rbind(colorcount, x12)\n    x40 = apply(x19, x2)\n    x41 = remove(x38, x40"], [1.1, "def solve_36c0f792(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_8bdb17e6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_093a9904(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_48ebe9ca(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = center(x5)\n    x7 = rbind(shoot, x6)\n    x8 = center(x2)\n    x9 = rbind(shoot, x8)\n    x10 = center(x5)\n    x11 = rbind(shoot, x10)\n    x12 = decrement(x1)\n    x13 = tojvec(x12)\n    x14 = rbind(shoot, x13)\n    x15 = decrement(x2)\n    x16 = astuple(x12, x15)\n    x17 = double(x16)\n    x18 = shoot(x11, x17)\n    x19 = shoot(x6, x18)\n    x20 = combine(x17, x19)\n    x21 = center(x2)\n    x22 = invert(x21)\n    x23 = power(x22, TWO)\n    x24 = asindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = lbind(multiply, x25)\n    x27 = apply(x26, x3)\n    x28 = mapply(x27, x27)\n    x29 = mapply(x28, x25)\n    x30 = paint(I, x29)\n    x31 = objects(x30, F, T, T)\n    x32 = argmax(x31, numcolors)\n    x33 = subgrid(x32, x30)\n    x34 = interval(ONE, SIX, ONE)\n    x35 = lbind(power, rot90)\n    x36 = lbind(power, outbox)\n    x37 = chain(x35, x36, x000)\n    x38 = apply(x37, x34)\n    x39 = lbind(dedupe, x38)\n    x40 = lbind(chain, x39)\n"], [1.1, "def solve_d964881b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(toobject, x1)\n    x5 = matcher(x4, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = ofcolor(I, ONE)\n    x9 = rbind(contained, x8)\n    x10 = lbind(rbind,adjacent)\n    x11 = compose(x10, initset)\n    x12 = chain(x11, x9, last)\n    x13 = sfilter(x5, x12)\n    x14 = fill(I, ZERO, x13)\n    x15 = ZERO(x5)\n    x16 = gravitate(x15, x14)\n    x17 = replace(x16, ONE, x15)\n    x18 = trim(x17)\n    x19 = x15(x18)\n    x20 = x12(x19)\n    x21 = apply(first, x20)\n    x22 = asobject(x21)\n    x23 = apply(first, x22)\n    x24 =mapply(dneighbors, x23)\n    x25 = mapply(toobject, x24)\n    x26 = cultural verb25(x25)\n    x27 = mostcolor(I)\n    x28 = ofcolor(x25, x27)\n    x29 = asindices(x28)\n    x30 = box(x29)\n    x31 = difference(x30, x28)\n    x32 = toobject(x31, x25)\n    x33 = apply(position, x32)\n    x34 = shift(x30, x33)\n    x35 = ofcolor(x26, x27)\n    x36 = recolor(x27, x34)\n    x37 = shift(x45, x36)\n    x38 = ofcolor(x28, x27)\n    x39 = mapply(toindices, x38)\n    x40"], [1.1, "def solve_55c9016a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =799(I)\n    x2 = Fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, portrait, x8)\n    x10 = branch(x00000, identity, rot90)\n    x11 = fork(even, branch, rot180)\n    x12 = compose(flip, x11)\n    x13 = rbind(sfilter, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x13)\n    x16 = chain(first, x14, x15)\n    x17 = rbind(branch, I)\n    x18 = rbind(x17, x16)\n    x19 = chain(initset, x18, x16)\n    x20 = fork(rapply, x19, x16)\n    x21 = compose(initset, x12)\n    x22 = fork(rapply, x21, x16)\n    x23 = compose(initset, x12)\n    x24 = fork(rapply, x23, x16)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, TWO)\n    x27 = x26(x22)\n    x28 = first(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, UNITY)\n    x31 = branch(x29, x30, x22)\n    x32 = initset(x15)\n    x33 = NEG_ONE(x32)\n    x34 = shift(x33, x33)\n    x35 = branch(x33, x24, x28)\n    x36 = interval(x35, ONE, x153)\n    x37 = pair(x36, x34)\n    x38 = fork(multiply,"], [1.1, "def solve_5e4fa839(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = positive(x1)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(comb"], [1.1, "def solve_206a4c7d(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(x1, first)\n    x3 = rbind(compose, last)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(center, first)\n    x8 = compose(center, last)\n    x9 = fork(subtract, x7, x8)\n    x10 = fork(multiply, x7, x5)\n    x11 = fork(add, x8, x10)\n    x12 = compose(halve, x11)\n    x13 = fork( interval, tojvec, x12)\n    x14 = compose(x13, x7)\n    x15 = fork(multiply, x5, THREE)\n    x16 = fork(add, x14, x15)\n    x17 = fork( tojvec, x12, x16)\n    x18 = fork(apply, x17, x14)\n    x19 = fork(apply, x18, x16)\n    x20 =     dimensional_trial)\n    x21 = lbind(ofcolor, I)\n    x22 = palette(I)\n    x23 = compose(x21, x22)\n    x24 = argmax(x22, x23)\n    x25 = fork(subtract, label, x24)\n    x26 = decrement(x25)\n    x27 = toivec(x26)\n    x28 = shoot(x27, UNITY)\n    x29 = fgpartition(I)\n    x30 = merge(x29)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, leftmost)\n    x33 = fork(subtract, rbind, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x28)\n    x36 = fill(I, x24, x35)\n    x37 = fill(x36, x24, x1)\n    x38 = fill("], [1.1, "def solve_427d4a8b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 =ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_60af70bc(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x33 = sfilter(x38, x33)\n    x34 = apply(first, x33"], [1.1, "def solve_c92c4acd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = repeat(x24, ONE)\n    x26 = combine(x3, x25)\n    x27 = paint(x16, x26)\n    x28 = astuple(vmirror, hmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = canvas(x8, x28)\n    x31 = asindices(x30)\n    x32 = combine(x29, x31)\n    x33 = subtract(NINE, x32)\n    x34 = astuple(VEN, x33)\n    x35 = astuple(cmirror, dmirror)\n    x36 = astuple(hmirror, vmirror)\n    x37 = combine(x35, x36)\n    x38 = astuple(x334, x000000)\n    x39 = astuple(x380, cmirror)\n    x40 = combine(x38, x39)\n    x41 = fill(x37"], [1.1, "def solve_9b0f28c5(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivecfac9412)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_28d3e048(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_69236ba2(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_dda02bbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_969594f8(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x61, TWO)\n    x37 = lbind(colorcount, x23)\n    x38 = argmax(x36, x37)\n    x39 = ofcolor(x23, x28)\n    "], [1.1, "def solve_b5d0cad0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = initset(ORIGIN)\n    x2 = difference(x1, x1)\n    x3 = power(first, TWO)\n    x4 = first(x2)\n    x5 = lbind(c8f9)\n    x6 = lbind(eb281, x4)\n    x7 = lbind(lbind, shift)\n    x8 = compose(x5, x7)\n    x9 = lbind(rbind, shift)\n    x10 = compose(x9, x8)\n    x11 = fork(compose, x7, x10)\n    x12 = lbind( solve, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, identity, x13)\n    x15 = fork(difference, identity, x14)\n    x16 = lbind(rbind, intersection)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x15)\n    x19 = fork(lbind, x17, x18)\n    x20 = compose(x17, x19)\n    x21 = fork(rot90, x20, x19)\n    x22 = power(x21, FOUR)\n    x23 = x22(I)\n    x24 = fork(rot180, x22, x19)\n    x25 = power(x24, FOUR)\n    x26 = x25(x23)\n    x27 = x25(x22)\n    x28 = fork(rot180, x26, x27)\n    x29 = fork(mapply, x28, x26)\n    x30 = compose(x29, x21)\n    x31 = fork(paint, identity, x30)\n    x32 = x31(x9)\n    x33 = objects(x32, T, F, F)\n    x34 = colorfilter(x33, TWO)\n    x35 = first(x34)\n    x36 = lbind(adjacent, x35)\n    x37 =x36(x36)\n    x38 = fgpartition(x32)\n    x39 = merge("], [1.1, "def solve_7d467376(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_c8269178(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = ONE(I)\n    x2 = increment(TWO)\n    x3 = increment(x2)\n    x4 = astuple(x3, x3)\n    x5 = astuple(THREE, ORIGIN)\n    x6 = astuple(THREE, ZERO_BY_TWO)\n    x7 = crop(x5, ORIGIN, x6)\n    x8 = crop(x3, ZERO_BY_TWO)\n    x9 = Zconcat(x7, x8)\n    x10 = hconcat(x9, x7)\n    x11 = hconcat(x10, x8)\n    x12 = vconcat(x11, x11)\n    x13 = vconcat(x12, x12)\n    x14 = hconcat(x13, x11)\n    x15 = hconcat(x14, x10)\n    x16 = vconcat(x15, x11)\n    x17 = vconcat(x16, x10)\n    x18 = cellwise(x17, x9,x1)\n    x19 = asobject(x18)\n    x20 = mostcolor(I)\n    x21 = matcher(first, x20)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x19, x22)\n    x24 = apply(initset, x23)\n    x25 = sfilter(x24, x4)\n    x26 = frontiers(I)\n    x27 = sfilter(x26, x22)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, identity, dmirror)\n    x31 = x30(I)\n    x32 = lefthalf(x31)\n    x33 = righthalf(x31)\n    x34 = vmirror(x33)\n    x35 = vmirror(x34)\n    x36 = shape(x35)\n    x37 = multiply(x36, x36)\n    x38 = add(x37, ZERO)\n    x39 = canvas(x"], [1.1, "def solve_f41f0c20(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(add, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a39a19c6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_533b4fa0(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(vfrontier, x5)\n    x7 = mapply(hfrontier, x5)\n    x8 = uppermost(x7)\n    x9 = leftmost(x7)\n    x10 = greater(x8, x9)\n    x11 = uppermost(x7)\n    x12 = greater(x8, x11)\n    x13 = either(x10, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(I)\n    x16 = center(x15)\n    x17 = hfrontier(x16)\n    x18 = add(x16, x17)\n    x19 = shift(x18, x16)\n    x20 = x14(x19)\n    x21 = palette(x20)\n    x22 = remove(ZERO, x21)\n    x23 = other(x22, x12)\n    x24 = ofcolor(x20, x23)\n    x25 = mapply(neighbors, x24)\n    x26 = difference(x25, x24)\n    x27 = toobject(x26, x50)\n    x28 = add(x25, x27)\n    x29 = shift(x28, x27)\n    x30 = fill(x5, x23, x29)\n    x31 =bordering(x30)\n    x32 =3333(x31, x30)\n    x33 = fork(both, x24, x32)\n    x34 = extract(x28, x33)\n    x35 = other(x28, x34)\n    x36 = ofcolor(x20, x23)\n    x37 = initset(x36)\n    x38 = shift(x37, UNITY)\n    x39 = fill(x30, x23, x38)\n    x40 = shift"], [1.1, "def solve_4a4f5673(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_40ba5af8(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1dad6357(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x31 = shape(I)\n    x32 = decrement(x31)\n    x33 = initset(x32)\n    x34 = insert(x19, x33)\n    x35 = astuple(x21, x26)\n    x36 = astuple(x31, x35)\n    x37 = combine(x35, x36)\n    x38 = lefthalf(I)\n    x39 = righthalf(I)\n    x40 = bottomhalf(x39)\n    x41 = mostcolor(x38)\n    "], [1.1, "def solve_a4429cb9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8a69493a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(4258, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(4 fgpartition, x17)\n    x23 = merge(x22)\n    x24 =0000000(x23)\n    x25 = matcher(first, x10)\n    x26 = compose(flip, x25)\n    x27 = asindices(x16)\n    x28 = delta(x27)\n    x29 = lbind(fork, manhattan)\n    x30 = lbind(x29, identity)\n    x31 = lbind(compose, initset)\n    x32 = lbind(rbind, manhattan)\n    x33 = compose(x31, x32)\n    x34 = lbind(lbind, greater)\n    x35 = chain(x34, x33, x25)\n    x36 = compose(x36, x25)\n    x37 = fork(contained, x36, x40)\n    x38 = compose(x37, x27)\n    x39 = lbind(lbind,ANGEmatch)\n    x40 = chain(x39, x33, x33)\n    x41 = fork("], [1.1, "def solve_7540585f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract,x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_5835846c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 =TWO(x28)\n    x40 = x19(x39)\n    x41 = x16(x40)\n"], [1.1, "def solve_9af4a8be(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, size)\n"], [1.1, "def solve_eb021fbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_5828824f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_2202c643(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_871653b5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d2b59785(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = dmirror(x23)\n    x25 = asobject(x24)\n    x26 = shape(x12)\n    x27 = shift(x25, x26)\n    x28 = ofcolor(x13, x6)\n    x29 = paint(x13, x28)\n    x30 = ofcolor(x29, x4)\n    x31 = initset(x40)\n    x32 = insert(x15, x31)\n    x33 = insert(x16, x32)\n    x34 = insert(x19, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x31, x36)\n    x38 = ofcolor(x13, x6)\n    x39 = height(x38)\n    x40 = insert(x39, x38)\n    x41 = destructive height(x40)\n    x42 = width(x38)"], [1.1, "def solve_909253d8(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8cc2a21b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x40, x22)\n    x36 = x35(x10)\n    x37 = x35(xI)\n    x38 = x35(x74"], [1.1, "def solve_311a245d(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d95cba31(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_de116543(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x24)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x24)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x24)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x24)"], [1.1, "def solve_d195e4c1(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(x5, x5)\n    x7 = fill(x6, FIVE, x3)\n    x8 = objects(x7, F, F, T)\n    x9 = argmax(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = remove(x9, x8)\n    x12 = toindices(x10)\n    x13 = lbind(intersection, x12)\n    x14 = chain(x13, dneighbors, last)\n    x15 = rbind(greater, x10)\n    x16 = chain(x15, dedupe, last)\n    x17 = fork(greater, x14, x16)\n    x18 = compose(x15, first)\n    x19 = chain(size, dedupe, x18)\n    x20 = size(x11)\n    x21 = equality(x19, x20)\n    x22 = branch(x21, uintcorner, vmirror)\n    x23 = x22(x10)\n    x24 = objects(x7, T, F, T)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, x7)\n    x27 = asobject(x26)\n    x28 = matcher(first, ZERO)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x25, x29)\n    x31 = lefthalf(x30)\n    x32 = righthalf(x30)\n    x33 = palette(x31)\n    x34 = lbind(intersection, x33)\n    x35 = chain(size, x34, toindices)\n    x36 = sfilter(x32, x35)\n    x37 = rbind(shift, x31)\n    x38 = lbind(occurrences, x779)\n    x"], [1.1, "def solve_b67cec33(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_706cc69b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_52297eaa(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_39bb83e5(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =6666(I)\n    x2 =6666(I)\n    x3 = index(x1, ORIGIN)\n    x4 = decrement(x1)\n    x5 = positive(x3)\n    x6 = branch(x5, x4, x1)\n    x7 = crop(x1, ORIGIN, THREE_BY_THREE)\n    x8 = asobject(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fork(both, x lefthalf, tophalf)\n    x13 = sfilter(x11, x12)\n    x14 = compose(dmirror, vmirror)\n    x15 = argmin(x13, x14)\n    x16 = width(x11)\n    x17 =66(ONE, x16)\n    x18 = tojvec(x17)\n    x19 = index(x11, x18)\n    x20 = uppermost(x11)\n    x21 = matcher(first, x20)\n    x22 =sfilter(x11, x21)\n    x23 = leftmost(x11)\n    x24 = matcher(first, x23)\n    x25 = sfilter(x11, x24)\n    x26 = width(x11)\n    x27 = invert(x26)\n    x28 = tojvec(x27)\n    x29 = index(x11, x28)\n    x30 = astuple(x24, x22)\n    x31 = initset(x30)\n    x32 = cover(x11, x31)\n    x33 =sfilter(x3, x32)\n    x34 = height(x11)\n    x35 = astuple(x24, x22)\n    x36 = astuple(x31, x35)\n    x37 = subtract(x36, x30)\n    x38 = crop(x37,Example output:\n    00006\n    00020\n    00003\n    00002\n    0020\n    \"\"\"\n    x1"], [1.1, "def solve_3b663fe0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = lowermost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_b5c657cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shift(x23, x26)\n    x28 = toindices(x27)\n    x29 = lbind(add, DOWN)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x29, x28)\n    x32 = rbind(shoot, RIGHT)\n    x33 = mapply(x32, x28)\n    x34 = lowermost(x23)\n    x35 = invert(x34)\n    x36 = manhattan(x35, x32)\n    x37 = rightmost(x23)\n    x38 = decrement(x37)\n    x39 = matcher(x38, x34)\n"], [1.1, "def solve_122be82e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_f5f5c7a5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = astuple(x15, x18)\n    x26 = portrait(x24)\n    x27 = branch(x26, identity, cmirror)\n    x28 = x27(x3)\n    x29 = dmirror(x28)\n    x30 = branch(x24, identity, height)\n    x31 = x30(xmirror)\n    x32 = decrement(x31)\n    x33 = rbind(toobject, x35)\n    x34 = rbind(colorcount, ZERO)\n    x35 = chain(x33, x34, x31)\n    x36 = matcher(x35, x32)\n    x37 = sfilter(x4, x36)\n    x38 = compose(color, x37)\n    x39 = multiply(x84, LEFT)\n    x40 = rbind(greater"], [1.1, "def solve_4e5017db(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multcorner, x12)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_f13645d1(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =Example output:\n    6661\n    564\n    5499\n    1346\n    1469\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, identity, shape)\n    x4 = x3(I)\n    x5 = maximum(x3)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = x3(I)\n    x9 = height(I)\n    x10 = decrement(x9)\n    x11 = multiply(x10, x5)\n    x12 = crop(I, ORIGIN, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = hmirror(x15)\n    x17 = vmirror(x12)\n    x18 = combine(x13, x16)\n    x19 = product(x18, x18)\n    x20 = argmax(x19, size)\n    x21 = apply(color, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x13, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x14, x23)\n    x27 = uppermost(x24)\n    x28 = greater(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = last(x28)\n    x31 = remove(x30, x8)\n    x32 =Lo repeat(x31, ONE)\n    x33 = first(x32)\n    x34 = branch(x22, x33, x25)\n    x35 = branch(x26, x28, x30)\n    x36 = branch(x29, x32, x35)\n    x37 = apply(normalize, x31)\n    x38 = astuple(x31, x37)\n    x39 = remove(x38, x31)\n    x40 = apply(ulcorner, x39)\n    x41 = rbind("], [1.1, "def solve_264e2f5e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_d560feb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b4eb549b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(TEN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x11, x18)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = height(x21)\n    x24 = decrement(x23)\n    x25 = lbind(astuple, x24)\n    x26 = lbind(shift, x21)\n    x27 =compose(x25, x26)\n    x28 = apply(x27, x3)\n    x29 =389(x28)\n    x30 = argmax(x80, x29)\n    x31 = matcher(first, x3)\n    x32 =sfilter(x30, x31)\n    x33 = apply(dneighbors, x32)\n    x34 = lbind(shift, x32)\n    x35 = mapply(x34, x33)\n    x36 = double(x24)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x34)\n    x39 = lbind(shift, x32)\n    x40 = mapply(x39, x38)\n    x41 = cover(I,"], [1.1, "def solve_bd33027e(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_fc39db2b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = intersection(x1, x5)\n    x7 = lbind(colorcount, x4)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, color)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, x4)\n    x14 = argmax(xofcolor, x13)\n    x15 = ofcolor(x14, x8)\n    x16 = apply(initset, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, x12, x15)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x16)\n    x22 = objects(x4, T, F, F)\n    x23 = colorfilter(x22, x8)\n    x24 = rbind(manhattan, xcorIGIN)\n    x25 = chain(first, x24, last)\n    x26 = sfilter(x23, x25)\n    x27 = compose(rightmost, x25)\n    x28 = compose(minimum, x25)\n    x29 = fork(subtract, x28, x27)\n    x30 = fork(add, x29, x21)\n    x31 = rbind(contained, x15)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(asindices, x33, x20)\n    x35 = fork(difference, x29, x34)\n    x36 = fork(add, x34, x35)\n    x37 = fork(connect, x30, x36)\n    x38 = rbind(mapply,"], [1.1, "def solve_3a8a8763(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(vsplit, height, width)\n    x7 = x6(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = palette(x7)\n    x11 = remove(x9, x10)\n    x12 = other(x11, x1)\n    x13 = combine(x12, x7)\n    x14 = shape(x13)\n    x15 = canvas(x1, x14)\n    x16 = hconcat(x15, x13)\n    x17 = objects(x16, T, F, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, ORIGIN)\n    x20 = argmin(x18, x19)\n    x21 = remove(x20, x18)\n    x22 = TEN(flow)\n    x23 = input:\n    x22, x21)\n    x24 = argmin(x22, x23)\n    x25 =909(x24, DOWN)\n    x26 = uppermost(x25)\n    x27 = rightmost(x24)\n    x28 = astuple(x26, x27)\n    x29 = leftmost(x24)\n    x30 = leftmost(x27)\n    x31 = astuple(x29, x30)\n    x32 = add(x28, x31)\n    x33 = initset(x32)\n    x34 = ofcolor(x33, x12)\n    x35 = sizefilter(x34, ONE)\n    x36 = lbind(vmatching, x34)\n    x37 = fork(either, x35, x36)\n    x38 = rbind(gravitate, x34)\n    x39 = compose(x38, initset)\n    x40 = fork(add,"], [1.1, "def solve_1903dfb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_183c8c42(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_bfdb8162(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = tophalf(x3)\n    x5 = lefthalf(x4)\n    x6 = tophalf(x2)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(x2)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = righthalf(x9)\n    x12 = index(x4, ORIGIN)\n    x13 = width(x12)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = index(x3, x15)\n    x17 = height(x6)\n    x18 = decrement(x17)\n    x19 = toivec(x18)\n    x20 = index(x3, x19)\n    x21 = shape(x7)\n    x22 = decrement(x21)\n    x23 = index(x3, x22)\n    x24 = compress(x4)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = fill(x28, x30, x26)\n    x30 = ofcolor(x29, x27)\n    x31 = ulcorner(x30)\n    x32 = index(x3, x31)\n    x33 = lrcorner(x30)\n    x34 = add(x33, UNITY)\n    x35 = initset(x34)\n    x36 = cover(x29, x35)\n    x37 = ofcolor(x36, x27)\n    x38 = urcorner(x37)\n    x39 = add(x38, ulcorner)\n    x50 =676(x39)\n    x51 = initset(x50)\n    x52 = fill(x36, x27, x51)\n    O"], [1.1, "def solve_799c7858(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(rot90, x6, x23)\n    x25 = power(x24, TWO)\n    x26 = x25(I)\n    x27 = palette(x26)\n    x28 = lbind(ofcolor, x26)\n    x29 = compose(leftmost, x28)\n    x30 = matcher(x29, ZERO)\n    x31 = palette(x26)\n    x32 = rightmost(x26)\n    x33 = matcher(x32, ZERO)\n    x34 = fork(either, x30, x33)\n    x35 = palette(x26)\n    x36 = rightmost(x26)\n    x37 = matcher(x36, ZERO)\n    x38 = fork(either, x35, x37)"], [1.1, "def solve_e2056b27(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =6666(I)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = double(x2)\n    x7 = canvas(x5, x6)\n    x8 = paint(x7, x2)\n    x9 = shape(I)\n    x10 = decrement(x9)\n    x11 = index(I, x10)\n    x12 = divide(x33, x11)\n    x13 = astuple(x10, x12)\n    x14 = canvas(x11, x13)\n    x15 = paint(x14, x2)\n    x16 = width(I)\n    x17 = ulcorner(x2)\n    x18 = width(I)\n    x19 =678(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = canvas(x11, x20)\n    x22 = hconcat(I, x21)\n    x23 = hsplit(x22, TWO)\n    x24 = merge(x23)\n    x25 = last(x23)\n    x26 = vmirror(x25)\n    x27 = vconcat(x22, x26)\n    O = vconcat(x27, x24)\n    return O"], [1.1, "def solve_dbedb1fd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x11, x20)\n    x22 = other(x21, x15)\n    x23 =6 ofcolor(I, x22)\n    x24 = mapply(neighbors, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x19)\n    x28 =4612f35(x23)\n    x29 = ofcolor(I, x27)\n    x30 = sfilter(x29, x28)\n    x31 = subgrid(x30, I)\n    x32 = ofcolor(x31, x19)\n    x33 = mapply(neighbors, x32)\n    x34 = toobject(x33, x31)\n    x35 = objects(x39, T, F, F)\n    x36 = sizefilter(x35, ONE)\n    x37 = merge(x36)\n    O = subgrid(x37, x31)\n    return O"], [1.1, "def solve_15fde576(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =201(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.1, "def solve_c855f467(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = mostcolor(I)\n    x8 = ofcolor(x6, x7)\n    x9 = leastcolor(x6)\n    x10 = ofcolor(x1, x9)\n    x11 = combine(x8, x10)\n    x12 = intersection(x8, x10)\n    x13 = difference(x11, x12)\n    O = fill(x6, fill(x6, x11)\n    return O"], [1.1, "def solve_04b9b4ef(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = astuple(TWO, ONE)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, asindices)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, x5)\n    x12 = chain(x8, x6, x5)\n    x13 = compose(x9, x6)\n    x14 = fork(mapply, x11, x12)\n    x15 = fork(mapply, x11, x13)\n    x16 = fork(lastuple, x14, x15)\n    x17 = repeat(x16, TWO)\n    x18 = mapply(x16, x2)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = paint(I, x20)\n    x22 = shift(x20, UNITY)\n    x23 = paint(x21, x22)\n    x24 =571(x28)\n    x25 = ulcorner(x24)\n    x26 = subgrid(x24, x25)\n    x27 = compose(toindices, normalize)\n    x28 = matcher(x27, x18)\n    x29 = normalize(x24)\n    x30 = sfilter(x29, x28)\n    x31 = difference(x29, x30)\n    O = fill(x23, ZERO, x31)\n    return O"], [1.1, "def solve_be0faf5b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = rbind(Sfilter, TWO)\n    x2 = apply(x1, I)\n    x3 = contained(TWO, x2)\n    x4 = branch(x3, height, width)\n    x5 = x4(I)\n    x6 = partition(I)\n    x7 = palette(x6)\n    x8 = matcher(identity, x5)\n    x9 = argmin(x7, x8)\n    x10 = color(x9)\n    x11 =92(85, toindices)\n    x12 = apply(x11, x10)\n    x13 = TIREE(x12)\n    x14 = branch(x13, hmirror, vmirror)\n    x15 = x14(x6)\n    x16 = x13(x15)\n    x17 = shape(x6)\n    x18 = canvas(x10, x17)\n    x19 = TWO_BY_TWO)\n    x20 = paint(x18, x19)\n    x21 = rbind(tocount, SIX)\n    x22 = apply(x21, x2)\n    x23 = normalize(x22)\n    x24 = color(x23)\n    x25 = remove(x23, x26)\n    x26 = other(x25, x24)\n    x27 = ofcolor(x26, x24)\n    x28 = last(x27)\n    x29 = ofcolor(x25, x24)\n    x30 = rbind(intersection, x28)\n    x31 = mapply(x30, x29)\n    O = fill(x23, x47, x31)\n    return O"], [1.1, "def solve_3331e564(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = UNITY(I)\n    x2 =31(x1)\n    x3 = decrement(x2)\n    x4 = tojvec(x3)\n    x5 = shoot(x4, UP_RIGHT)\n    x6 = shift(x5, UNITY)\n    O = fill(I, THREE, x6)\n    return O"], [1.1, "def solve_fb9e858f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersectionx15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.1, "def solve_f1f6b9c7(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = input:\n    8888888989\n    8888888989\n    8888888989\n    5555585555\n    4555555555\n    4555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [1.1, "def solve_35608ece(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, numcolors)\n    x4 = difference(x3, x2)\n    x5 = apply(initset, x4)\n    x6 = rbind(404a4755\n    b27 upper3846\n    11111151\n    429511529\n    uple ofcolor(I, x1)\n    x1 = prapply(connect, x5, x6)\n    x2 = compose(72,175)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, x1, x3)\n    x5 = fork(recolor, color, x6)\n    x6 = mapply(x5, x4)\n    O = paint(x4, x6)\n    return O"], [1.1, "def solve_61b4d629(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = rbind(subgrid, x6)\n    x8 = apply(x7, x2)\n    x9 = rot90(x8)\n    x10 = fgpartition(x9)\n    x11 = merge(x10)\n    x12 = solve(x11, x9)\n    x13 = index(x12, ORIGIN)\n    x14 = subgrid(x12, x9)\n    x15 = apply(x7, x12)\n    x16 = rot90(x15)\n    x17 =fgpartition(x16)\n    x18 = merge(x17)\n    x19 =644(x18)\n    x20 = palette(x19)\n    x21 = other(x20, ZERO)\n    x22 = objects(x6, T, F, T)\n    x23 = colorfilter(x22, x21)\n    x24 = sfilter(x21, vline)\n    x25 = difference(x21, x24)\n    x26 = astuple(x25, x26)\n    x27 = rbind(shoot, UP)\n    x28 = mapply(x27, x6)\n    O = fill(x9, x21, x28)\n    return O"], [1.1, "def solve_4dd9eb26(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval( ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = ofcolor(I, ZERO)\n    x11 = ofcolor(I, FOUR)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, x7)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = compose(x13, x17)\n    x19 = rbind(shoot, THREE_BY_THREE)\n    x20 = compose(x14, x19)\n    x21 = rbind(shoot, THREE_BY_THREE)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot,Example output:\n    x27 = fork(recolor, identity, x24)\n    x28 = mapply(x27, x3)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_6a84b1f4(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = compose(x1, shape)\n    x3 = rbind( multiply(TWO, THREE)\n    x4 = rbind(multiply, THREE)\n    x5 = compose(x4, x2)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x1, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = x1(x11)\n    x13 = x2(x10)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(I, x15)\n    O = subgrid(x10, x16)\n    return O"], [1.1, "def solve_2a708adb(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(rapply, I)\n    x2 = initset(I)\n    x3 = lbind(add, DOWN)\n    x4 = chain(first, x1, x3)\n    x5 = compose(x4, decrement)\n    x6 = fork(difference, x5, toindices)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x2, x8)\n    x10 =775(x9)\n    x11 =(x10)\n    x12 = equality(x11, x12)\n    x13 = branch(x12, x11, x8)\n    x14 = shift(x13, UNITY)\n    x15 =27(x14)\n    x16 = ulcorner(x15)\n    x17 = lrcorner(x15)\n    x18 = shape(x15)\n    x19 = maximum(x18)\n    x20 = multiply(THREE, TEN)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = rbind(multiply, x15)\n    x23 = apply(x22, x21)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x21)\n    x26 = pair(x25, x26)\n    x27 = mapply(box, x26)\n    x28 = mapply(x25, x27)\n    O = fill(x10, ZERO, x28)\n    return O"], [1.1, "def solve_af2b8f36(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =6666(I)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, frontiers)\n    x4 = mfilter(x1, x3)\n    O = fill(x1, ZERO, x4)\n    return O"], [1.1, "def solve_76c140d9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =680(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, x1)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = trim(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(identity, x14)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(size, x16)\n    x18 = argmin(x4, x17)\n    x19 = repeat(x18, ONE)\n    x20 = asobject(x19)\n    x21 = palette(x20)\n    x22 = totuple(x21)\n    x23 = first(x22)\n    x24 = last(x22)\n    x25 = neighbors(UNITY)\n    x26 = remove(x23, x25)\n    x27 = recolor(x24, x26)\n    x28 = lbind(shift, x26)\n    x29 = ofcolor(x13, x23)\n    x30 = mapply(x28, x29)\n    x31 = shift(x30, UP_RIGHT)\n    x32 = combine(x27, x31)\n    x33 = paint(x13, x32)\n    O = trim(x33)\n    return O"], [1.1, "def solve_31d34b94(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(8matcher, first)\n    x2 = compose(x1, last)\n    x3 = lbind(multiply, THREE)\n    x4 = compose(x3, x2)\n    x5 = fork(extract, identity, x4)\n    x6 = compose(last, x5)\n    x7 = compose(ff28, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.1, "def solve_84cab0b3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =1111(I)\n    x2 = matcher(identity, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(positive, size, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(dmirror, x6)\n    x8 = power(x7, FOUR)\n    x9 = x8(I)\n    x10 = dedupe(x9)\n    x11 = dmirror(x10)\n    x12 = dedupe(x11)\n    O = dmirror(x12)\n    return O"], [1.1, "def solve_97504b06(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, THREE, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 =\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = lbind(multiply, x14)\n    x16 = decrement(x15)\n    x17 = lbind(outbox, x9)\n    x18 = initset(x17)\n    x19 = fill(x13, THREE, x18)\n    x20 = outbox(x19)\n    x21 = backdrop(x20)\n    x22 = lbind(toobject, x21)\n    x23 = compose(x22, initset)\n    x24 = ofcolor(x19, ONE)\n    x25 = sfilter(x24, x23)\n    x26 = difference(x24, x25)\n    x27 = fill(x19, THREE, x26)\n    x28 = interval(x8, x12, ONE)\n    x29 = rbind(multiply, x14)\n    x30 = apply(x29, x28)\n    x31 = lbind(shift, x24)\n    x32 = mapply(x31, x30)\n    O = fill(x27, TWO, x32)\n    return O"], [1.1, "def solve_c55e563f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = dmirror(I)\n    x3 =081928e5(x2)\n    x4 = lbind(shift, x3)\n    x5 = rbind(difference, x1)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = partition(I)\n    x9 = sfilter(x8, x7)\n    x10 = argmax(x9, size)\n    x11 = remove(x10, x9)\n    x12 = apply(initset, x11)\n    x13 = toindices(x10)\n    x14 = lbind(argmin, x12)\n    x15 = lbind(rbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = argmin(x13, x16)\n    x18 = cover(I, x10)\n    x19 = paint(x18, x17)\n    x20 = complec(x7)\n    x21 = palette(I)\n    x22 = other(x21, ZERO)\n    x23 = colorcount(x20, x22)\n    x24 = asindices(x20)\n    x25 = ofcolor(x20, x22)\n    x26 = difference(x24, x25)\n    x27 = asobject(x20)\n    x28 = matcher(first, x22)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x27, ulcorner, x29)\n    x31 = fork(shift, identity, x30)\n    x32 = mapply(x31, x26)\n    x33 = paint(x19, x32)\n    O = x23(x33)\n    return O"], [1.1, "def solve_197e1496(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x28 = canvas(x24, x25)\n    x29 = paint(x28, x2)\n    x30 = normalize(x11)\n    x31 = matcher(first, x4)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 = paint(x29, x33)\n        O = x21(x34)\n    return O"], [1.1, "def solve_7682831b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(numcolors, x1)\n    x3 = lbind(apply, multiply)\n    x4 = lbind(I, frontiers)\n    x5 = chain(x3, x4, frontiers)\n    x6 = chain(size, dedupe, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = fork(sfilter, x9, x8)\n    x11 = compose(size, x10)\n    x12 = argmin(x2, x11)\n    x13 = rightmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x12)\n    x18 = shift(x17, NEG_UNITY)\n    x19 =171(x16)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x18)\n    x22 = paint(x16, x21)\n    O = x15(x22)\n    return O"], [1.1, "def solve_5c05747b(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = leftmost(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = ofcolor(I, x10)\n    x18 =16(x17)\n    x19 = asindices(x18)\n    x20 = lowermost(x19)\n    x21 = toobject(x20, I)\n    x22 = mostcolor(x21)\n    x23 = ofcolor(I, x22)\n    x24 = uppermost(x23)\n    x25 = toivec(x24)\n    x26 = invert(x25)\n    x27 = rbind(shoot, UP)\n    x28 = rightmost(x27)\n    x29 = equality(x28, x26)\n    x30 = branch(x29, x22, x25)\n    x31 = branch(x29, x27, x25)\n    x32 =22its(x30)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, x26, x25)\n    x36 = branch(x34, x27, x25)\n    x37 = x35(x36)\n    x38 = intersection(x37, x35)\n    x39 = branch(x34, x36, x38)\n    O = x39(x36)\n    return O"], [1.1, "def solve_e0239dc4(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =429(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_33ca9808(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =63(I)\n    x6 = astuple(dmirror, cmirror)\n    x7 = astuple(hmirror, identity)\n    x8 = combine(x6, x7)\n    x9 = rbind(d511f180x8)\n    x10 = rbind(ofcolor, x4)\n    x11 = compose( center, x10)\n    x12 = compose(x19, x11)\n    x13 = chain(x9, vline, x12)\n    x14 = rbind(intersection, x2)\n    x15 = chain(size, x14, x13)\n    x16 = matcher(x15, ZERO)\n    x17 = objects(I, T, F, T)\n    x18 = sfilter(x17, x16)\n    x19 = argmax(x18, size)\n    x20 = matcher(color, x4)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = argmax(x22, size)\n    x24 = replace(I, x4, ZERO)\n    O = paint(x24, x23)\n    return O"], [1.1, "def solve_44de6db7(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = ONE00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_00d2babd(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =977788399000\n    8888248466\n    2422408323\n    53204a843\n    0330528329\n    4042542324\n    8025038323\n    \"\"\"\n    x1 = matcher(first, x3)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = shape(x3)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x3, x8)\n    x10 = multiply(x4, x4)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x9)\n    x13 = multiply(x4, x4)\n    x14 = width(I)\n    x15 = halve(x14)\n    x16 = compose(last, last)\n    x17 = matcher(x16, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x13, x18)\n    O = fill(x12, x3, x19)\n    return O"], [1.1, "def solve_01a38f42(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = size(x2)\n    x23 = positive(x22)\n    x24 = branch(x23, hsplit, vmirror)\n    x25 = x24(I)\n    x26 = first(x25)\n    x27 = lbind(recolor, x21)\n    x28 = lrcorner(x2)\n    x29 = paint(x18, x28)\n    x30 = branch(x5, vmirror, hmirror)\n    x31 = x30(x29)\n     move(x29, x31, x2)\n    O = x30(x32)\n    return O"], [1.1, "def solve_c95e326f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    O =88888(I, TWO)\n    return O"], [1.1, "def solve_65105cab(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x1)\n    x4 =    5899240800\n    48rotExample44\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x2)\n    x4 =5899240800\n    48its\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = equality(x1, x2)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.1, "def solve_30d4beb2(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =2331152277(I)\n    x2 =04227119915, x1)\n    x3 = apply(d406, x2)\n    x4 = lefthalf(x3)\n    x5 = righthalf(x3)\n    x6 = palette(x4)\n    x7 = contained(x6, x5)\n    x8 = contained(x7, x5)\n    x9 = branch(x8, identity, dmirror)\n    x10 = x9(x4)\n    x11 = x9(x5)\n    x12 = canvas(ZERO, THREE_BY_THREE)\n    x13 = branch(x8, identity, vmirror)\n    x14 = x13(x10)\n    x15 = hconcat(x14, x13)\n    x16 = asobject(x15)\n    x17 = occurrences(x16, x3)\n    x18 = first(x17)\n    x19 = ulcorner(x18)\n    x20 = lbind(shift, x18)\n    x21 = occurrences(x16, x9)\n    x22 = mapply(x20, x21)\n    O = fill(x17, ONE, x22)\n    return O"], [1.1, "def solve_d25a7a3e(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =66666666(I, TWO)\n    x2 = rot180(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, x2, x2)\n    O = canvas(x4, UNITY)\n    return O"], [1.1, "def solve_f1132913(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x2)\n    x11 = greater(x10, FOUR)\n    x12 = branch(x11, RIGHT, DOWN)\n    x13 = subgrid(x12, I)\n    x14 = add(RIGHT, DOWN)\n    x15 = decrement(x14)\n    x16 = x9(x15)\n    x17 = height(x13)\n    x18 = fgpartition(x13)\n    x19 = merge(x18)\n    x20 = fill(x13, ZERO, x19)\n    x21 = subtract(x17, x20)\n    x22 = replace(x21, FOUR, ZERO)\n    x23 = width(x13)\n    x24 =630alf(x23, width)\n    x25 = downscale(x12, x24)\n    x26 = ofcolor(x25, FOUR)\n    x27 = fill(x25, ZERO, x26)\n    O = x9(x27)\n    return O"], [1.1, "def solve_c77b1a33(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 =695651860160970\n    x15 =665513890(x12)\n    x16 = solve_694f1293(x15)\n    x17 = tophalf(x16)\n    x18 = numcolors(x17)\n    x19 = lowermost(x16)\n    x20 = lefthalf(x12)\n    x21 = righthalf(x12)\n    x22 = objects(x16, T, F, F)\n    x23 = colorfilter(x22, x3)\n    x24 = merge(x23)\n    x25 = cellwise(x14, x23, x24)\n    x26 = DOWNscale(x25, x18)\n    x27 = crop(x26, ORIGIN, x20)\n    x28 = urcorner(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x28)\n    x31 = apply(initset, x30)\n    x32 = ofcolor(x25, x3)\n    x33 = ofcolor(x25, x8)\n    x34 = intersection(x32, x33)\n    x35 = cover(x5, x20)\n    O = fill(x35, NEG_ONE, x34)\n    return O"], [1.1, "def solve_a67c6f36(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(\n    2885576013\n    6585562088\n    5568272651\n    ulcornerner\n    \"\"\"\n    x2 = lefthalf(I)\n    x3 = righthalf(I)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = tophalf(x3)\n    x7 = bottomhalf(x3)\n    x8 = combine(x4, x5)\n    x9 = combine(x6, x7)\n    x10 = combine(x8, x9)\n    O = fill(x1, TWO, x10)\n    return O"], [1.1, "def solve_ad32f302(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =52R5528\n    x2 =55215\n    x3 = tophalf(I)\n    x4 = lefthalf(x3)\n    x5 = tophalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = Tphalf(x8)\n    x10 = tophalf(x9)\n    x11 = righthalf(x10)\n    x12 = bottomhalf(x11)\n    x13 = lefthalf(x12)\n    x14 =tophalf(x13)\n    x15 = tophalf(x14)\n    x16 = righthalf(x15)\n    x17 = index(I, ORIGIN)\n    x18 = width(I)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = index(I, x20)\n    x22 = height(I)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = index(I, x24)\n    x26 = shape(I)\n    x27 = decrement(x26)\n    x28 = add(x22, x27)\n    x29 = add(x24, x28)\n    x30 = canvas(x11, x29)\n    x31 = asobject(x30)\n    x32 = occurrences(x10, x31)\n    x33 =\n    35(x32)\n    x34 =\n    (normalize, toindices)\n    x35 = lbind(shift, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x10, x36)\n    return O"], [1.1, "def solve_6741114b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =91112(I)\n    x2 = switch(x1, EIGHT, TWO)\n    x3 = switch(x2, TWO, TWO)\n    x4 = switch(x3, ONE, TEN)\n    x5 = fork(combine, vfrontier, hfrontier)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    O = x7(x7)\n    return O"], [1.1, "def solve_90a38d7b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(x3, initset)\n    x5 =78(x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(hmirror, vmirror)\n    x8 =HKapply(x7, x6)\n    x9 = compress(x8)\n    O = fill(x9, ZERO, x3)\n    return O"], [1.1, "def solve_82a2d37c(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =887(I)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_7c17c2b6(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 =\ufffd Bit(x11, uppermost)\n    x13 = ulcorner(x12)\n    x14 = llcorner(x12)\n    x15 = hmatching(x13, x14)\n    x16 = branch(x15, NEG_ONE, ONE)\n    x17 = branch(x15, double, outbox)\n    x18 = initset(x13)\n    x19 = insert(x14, x18)\n    x20 = insert(x16, x19)\n    x21 = recolor(x3, x20)\n    x22 = uppermost(x12)\n    x23 = toivec(x22)\n    x24 = add(x23, x4)\n    x25 = insert(x27, x24)\n    x26 = merge(x27)\n    x27 = cover(x6, x26)\n    x28 = forever package(x27)\n    x29 = astuple(x23, x8)\n    x30 = astuple(x28, x9)\n    x31 = combine(x29, x30)\n    x32 = hfrontier(x31)\n    x33 = vfrontier(x31)\n    x34 = combine(x32, x33)\n    x35 = combine(x31, x34)\n    x36 = fill(x27, x3, x35)\n    x37 = paint(x36, x24)\n    O = paint(x37, x25)\n    return O"], [1.1, "def solve_8c885980(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 =4418228(x1)\n    x3 =241111(x2)\n    x4 = matcher(color, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 =44fcc829(I)\n    x8 = rbind(shoot, UNITY)\n    x9 = mapply(x8, x7)\n    x10 = power(outbox, TWO)\n    x11 = apply(x10, x9)\n    x12 = initset(x2)\n    x13 = insert(x12, x11)\n    x14 = corners(x13)\n    x15 = toobject(x14, I)\n    x16 = mostcolor(x15)\n    x17 = ofcolor(I, x16)\n    x18 = mapply(neighbors, x17)\n    x19 = toindices(x18)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x5)\n    x22 = combine(x19, x21)\n    O = fill(I, x16, x22)\n    return O"], [1.1, "def solve_d6eb9269(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(I)\n    x3 =4444(I)\n    x4 =54444\n    45398831881\n    54568096698\n    43285167973\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = shape(x24)\n    x26 = canvas(x1, x25)\n    x27 = paint(x26, x24)\n    x28 = ofcolor(x27, THREE)\n    x29 = combine(x21, x28)\n    x30 = mapply(x19, x29)\n    x31 = fill(x27, THREE, x30)\n    x32 = x169(x31)\n    x33 =40(x32)\n    x34 = shift(x31, x33)\n    O = fill(x27, THREE, x34)\n    return O"], [1.1, "def solve_df53b005(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = branch(x16, x17, x19)\n    x21 = branch(x12, x16, x20)\n    x22 = branch(x12, x9, x21)\n    x23 = PApply(x22, x21)\n    x24 =280(x23)\n    x25 = branch(x16, x18, x19)\n    x26 = Field(x25, x24)\n    x27 = branch(x8, x22, x25)\n    x28 = fork(combine, vfrontier, hfrontier)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(ofcolor, x12)\n    x31 = palette(x12)\n    x32 = remove(x13, x31)\n    x33 = lbind(43444, x12)\n    x34 = power(x33, x30)\n    x35 = x32(x32)\n    x36 = x30(x34)\n    x37 = fill(x15, x39, x36)\n    x38 = fill(x37, x30, x34)\n    O = fill(x38, x39, x36)\n    return O"]], "2037f2c7": [[0.39403220349444606, "def solve_0ec2872f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = canvas(x4, THREE_BY_THREE)\n    x6 = colorcount(I, ONE)\n    x7 = decrement(x6)\n    x8 = tojvec(x7)\n    x9 = connect(ORIGIN, x8)\n    x10 = fill(x5, TWO, x9)\n    x11 = initset(UNITY)\n    x12 = equality(x6, FOUR)\n    x13 = branch(x12, x11, x9)\n    O = fill(x10, TWO, x13)\n    return O"], [0.4709500322543801, "def solve_ffb21a20(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.4923960902221772, "def solve_6e229489(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.5024510069132495, "def solve_fac58b0f(I):\n    x1 = palette(I)\n    x2 = remove(ONE, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, ONE)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.5124660219282645, "def solve_4bd2cac0(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_5288a131(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_646c37d8(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_9bd93218(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_6b50b3f4(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5124660219282645, "def solve_3c5ee8a7(I):\n    x1 = rot180(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5251570172671126, "def solve_129b2d68(I):\n    x1 = mostcolor(I)\n    x2 = frontiers(I)\n    x3 = sfilter(x2, vline)\n    x4 = difference(x2, x3)\n    x5 = astuple(x4, x3)\n    x6 = apply(size, x5)\n    x7 = increment(x6)\n    O = canvas(x1, x7)\n    return O"], [0.5341705127937012, "def solve_dcda85ba(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_57838909(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_ac1538d5(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_d40492ae(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_a2356a7f(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5389342090692021, "def solve_80980c8c(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = shape(x5)\n    x7 = canvas(x3, x6)\n    x8 = normalize(x5)\n    O = paint(x7, x8)\n    return O"], [0.5437278100321579, "def solve_d7e7fb8c(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.5748260164859528, "def solve_579a4cd8(I):\n    x1 = asindices(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(greater, TWO)\n    x4 = compose(x3, size)\n    x5 = sfilter(x2, x4)\n    x6 = totuple(x5)\n    x7 = apply(color, x6)\n    x8 = apply(center, x6)\n    x9 = pair(x7, x8)\n    x10 = fill(I, ZERO, x1)\n    x11 = paint(x10, x9)\n    x12 = rbind(greater, ONE)\n    x13 = compose(dedupe, totuple)\n    x14 = chain(x12, size, x13)\n    x15 = sfilter(x11, x14)\n    x16 = rot90(x15)\n    x17 = sfilter(x16, x14)\n    O = rot270(x17)\n    return O"], [0.5863202149434034, "def solve_3ec4d1a9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.5920923733415621, "def solve_5346f40d(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    O = paint(x4, x6)\n    return O"], [0.6076921592043171, "def solve_143f04ac(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6194886937848373, "def solve_4f87ab55(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_bc6be8e6(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6309126220053929, "def solve_7df76510(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter,x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_65d07ff6(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_2f06c5db(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_249a078c(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_39c6a054(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_5f284ee8(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_3fce4902(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_72380bf2(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_723a0307(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_8e82896a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_51e32dc5(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.631933306897075, "def solve_104d4f29(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_93d3624e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_cb6da758(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_784bf2d0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_071a486e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.652277101112151, "def solve_88e9b01f(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.652277101112151, "def solve_8a389a87(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.652277101112151, "def solve_88b57e6a(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x1)\n    x6 = bottomhalf(x2)\n    x7 = astuple(x3, x4)\n    x8 = astuple(x5, x6)\n    x9 = combine(x7, x8)\n    O = leastcommon(x9)\n    return O"], [0.6557151442133381, "def solve_f2249a10(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_e2948e51(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.7120344565700184, "def solve_67ee853f(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.7120344565700184, "def solve_0d9ce51e(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.7120344565700184, "def solve_9deea0a3(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.7121560919415234, "def solve_4dd520f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = dmirror(I)\n    x4 = equality(x3, x1)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7313689109828214, "def solve_1e67fd3c(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [0.7313689109828214, "def solve_1a0da53b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_0f30f1cf(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_289957b1(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7313689109828214, "def solve_65929c8e(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7356195315428602, "def solve_a7de5013(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, THREE, x21)\n    return O"], [0.7485051527301684, "def solve_b4b088e8(I):\n    x1 = fgpartition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = subgrid(x4, I)\n    x6 = chain(color, merge, frontiers)\n    x7 = x6(I)\n    x8 = objects(x5, T, F, F)\n    x9 = colorfilter(x8, ZERO)\n    x10 = rbind(toobject, x5)\n    x11 = chain(x10, corners, outbox)\n    x12 = lbind(contained, x7)\n    x13 = chain(x12, palette, x11)\n    x14 = sfilter(x9, x13)\n    x15 = compose(color, x11)\n    x16 = fork(recolor, x15, identity)\n    x17 = mapply(x16, x14)\n    O = paint(x5, x17)\n    return O"], [0.7514237970163009, "def solve_9dc6abd3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_7b0aa453(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_8f1c175e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [0.7514237970163009, "def solve_b9a967e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_9f1ef182(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_2be16dc0(I):\n    x1 = hsplit(I, TWO)\n    O = first(x1)\n    return O"], [0.7514237970163009, "def solve_e8d81717(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_ac6f23da(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_545614e3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_b769e1f3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_4dc8d598(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_016205dc(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_e3c2207e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [0.7514237970163009, "def solve_db073527(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7514237970163009, "def solve_e9b926ab(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x999 = mostcolor(x8)\n    x10 = matcher(first, x999)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [0.7514237970163009, "def solve_073f70d8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, tophalf, lefthalf)\n    O = x2(I)\n    return O"], [0.7635614912120104, "def solve_8a2a4fd4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7702738530895862, "def solve_e7119462(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_f05cf0b9(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_41b7cca8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_32ba691d(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702994509699451, "def solve_0136aa78(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_3f321763(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_8a1db87a(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7707492564922985, "def solve_998098e3(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.7707492564922985, "def solve_2d96430b(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.783810190239905, "def solve_4c4fdc4c(I):\n    x1 = trim(I)\n    x2 = trim(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = tophalf(x2)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(x2)\n    x8 = lefthalf(x7)\n    x9 = bottomhalf(x2)\n    x10 = righthalf(x9)\n    x11 = index(I, ORIGIN)\n    x12 = width(I)\n    x13 = decrement(x12)\n    x14 = tojvec(x13)\n    x15 = index(I, x14)\n    x16 = height(I)\n    x17 = decrement(x16)\n    x18 = toivec(x17)\n    x19 = index(I, x18)\n    x20 = shape(I)\n    x21 = decrement(x20)\n    x22 = index(I, x21)\n    x23 = compress(I)\n    x24 = asindices(x23)\n    x25 = box(x24)\n    x26 = corners(x24)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, x23)\n    x29 = color(x28)\n    x30 = palette(x2)\n    x31 = other(x30, x29)\n    x32 = replace(x4, x31, x11)\n    x33 = replace(x6, x31, x15)\n    x34 = replace(x8, x31, x19)\n    x35 = replace(x10, x31, x22)\n    x36 = hconcat(x32, x33)\n    x37 = hconcat(x34, x35)\n    O = vconcat(x36, x37)\n    return O"], [0.793834335441106, "def solve_e5498a8a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = x3(I)\n    x6 = shape(x4)\n    x7 = canvas(ZERO, x6)\n    x8 = objects(x5, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = sizefilter(x11, ONE)\n    x13 = merge(x12)\n    O = paint(x7, x13)\n    return O"], [0.7946931652854432, "def solve_8b2b4267(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7946931652854432, "def solve_b2e862c8(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7946931652854432, "def solve_5a2b2d9c(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7946931652854432, "def solve_648ea28e(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.8058042763965544, "def solve_cee1a4ff(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8058042763965544, "def solve_3043fe93(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8058042763965544, "def solve_0b377ec6(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8058042763965544, "def solve_d1242cc5(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8058042763965544, "def solve_daf2f29d(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8058042763965544, "def solve_9c547a2c(I):\n    x1 = trim(I)\n    x2 = asobject(x1)\n    x3 = shift(x2, UNITY)\n    x4 = apply(initset, x3)\n    x5 = toindices(x3)\n    x6 = asindices(I)\n    x7 = corners(x6)\n    x8 = combine(x5, x7)\n    x9 = fill(I, NEG_ONE, x8)\n    x10 = fgpartition(x9)\n    x11 = asindices(I)\n    x12 = corners(x11)\n    x13 = toobject(x12, I)\n    x14 = combine(x3, x13)\n    x15 = mostcolor(x14)\n    x16 = fill(x9, x15, x8)\n    x17 = apply(color, x10)\n    x18 = rbind(contained, x17)\n    x19 = compose(x18, color)\n    x20 = sfilter(x4, x19)\n    x21 = lbind(colorfilter, x10)\n    x22 = chain(first, x21, color)\n    x23 = fork(gravitate, identity, x22)\n    x24 = fork(shift, identity, x23)\n    x25 = mapply(x24, x20)\n    O = paint(x16, x25)\n    return O"], [0.8141732132799135, "def solve_62cbca51(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8277590843976249, "def solve_c314532d(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_2078d72b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_da990556(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_59c66f95(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_60f97838(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_a4705935(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_544f55d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_4553f1d3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277875214971026, "def solve_812a3b60(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.829564622162508, "def solve_6c4516b1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.829564622162508, "def solve_3f3cd1f7(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.8296258545422006, "def solve_79fd51ca(I):\n    O = trim(I)\n    return O"], [0.8296258545422006, "def solve_d8260275(I):\n    O = trim(I)\n    return O"], [0.832671671596754, "def solve_6fee0dcd(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, EIGHT, x5)\n    return O"], [0.8372035288420694, "def solve_f4b508cf(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = compose(positive, size)\n    x4 = lbind(intersection, x2)\n    x5 = chain(x3, x4, dneighbors)\n    x6 = compose(positive, size)\n    x7 = lbind(intersection, x1)\n    x8 = chain(x6, x7, dneighbors)\n    x9 = sfilter(x1, x5)\n    x10 = sfilter(x2, x8)\n    x11 = cover(I, x9)\n    O = fill(x11, EIGHT, x10)\n    return O"], [0.8527276661680809, "def solve_9224f961(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8530872511837071, "def solve_f6c16c47(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.8530872511837071, "def solve_b88c0a04(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.8552576021850845, "def solve_13cf489a(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.8552576021850845, "def solve_aa4a4210(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = chain(x2, x1, last)\n    x4 = fork(recolor, first, x3)\n    x5 = astuple(SIX, THREE)\n    x6 = astuple(FOUR, EIGHT)\n    x7 = astuple(ONE, TWO)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x4, x10)\n    O = paint(I, x11)\n    return O"], [0.8566311155719072, "def solve_623b0c51(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = rbind(shoot, UNITY)\n    x4 = rbind(shoot, NEG_UNITY)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UP_RIGHT)\n    x7 = rbind(shoot, DOWN_LEFT)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = mapply(x9, x2)\n    O = fill(I, x1, x10)\n    return O"], [0.857945753402975, "def solve_c65aa74c(I):\n    x1 = cmirror(I)\n    O = subgrid(x1, I)\n    return O"], [0.8581546500312859, "def solve_934ada89(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = asobject(I)\n    x5 = difference(x4, x2)\n    x6 = leastcolor(x5)\n    x7 = colorcount(I, x6)\n    x8 = mostcolor(x5)\n    x9 = ofcolor(I, x6)\n    x10 = toindices(x2)\n    x11 = combine(x10, x9)\n    x12 = fill(I, x8, x11)\n    x13 = argmax(x1, width)\n    x14 = uppermost(x13)\n    x15 = argmax(x1, height)\n    x16 = leftmost(x15)\n    x17 = astuple(x14, x16)\n    x18 = initset(x17)\n    x19 = position(x9, x18)\n    x20 = multiply(x19, x7)\n    x21 = add(x17, x20)\n    x22 = hfrontier(x21)\n    x23 = vfrontier(x21)\n    x24 = combine(x22, x23)\n    O = fill(x12, x3, x24)\n    return O"], [0.858414186390205, "def solve_fd3d1835(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8604574970960375, "def solve_66253f7c(I):\n    x1 = switch(I, EIGHT, TWO)\n    x2 = switch(x1, THREE, FOUR)\n    x3 = switch(x2, EIGHT, FOUR)\n    x4 = switch(x3, TWO, SIX)\n    O = replace(x4, EIGHT, TWO)\n    return O"], [0.8624266748550173, "def solve_293b123d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = corners(x2)\n    x4 = toobject(x3, I)\n    x5 = mostcolor(x4)\n    x6 = colorfilter(x1, x5)\n    x7 = valmax(x6, size)\n    x8 = valmin(x6, size)\n    x9 = sizefilter(x6, x7)\n    x10 = sizefilter(x6, x8)\n    x11 = merge(x9)\n    x12 = fill(I, ONE, x11)\n    x13 = merge(x10)\n    O = fill(x12, EIGHT, x13)\n    return O"], [0.8631003992328367, "def solve_c3cbe74a(I):\n    x1 = astuple(identity, dmirror)\n    x2 = astuple(cmirror, vmirror)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, vmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = chain(size, dedupe, first)\n    x9 = matcher(x8, ONE)\n    x10 = compose(first, cmirror)\n    x11 = chain(size, dedupe, x10)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x9, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, first)\n    x16 = chain(first, x14, x15)\n    x17 = compose(x13, x16)\n    x18 = extract(x7, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = x19(I)\n    x22 = width(x21)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = index(x21, x24)\n    x26 = asobject(x21)\n    x27 = matcher(first, x25)\n    x28 = compose(flip, x27)\n    x29 = sfilter(x26, x28)\n    x30 = hperiod(x29)\n    x31 = width(x21)\n    x32 = increment(x31)\n    x33 = interval(ZERO, x32, x30)\n    x34 = apply(tojvec, x33)\n    x35 = lbind(shift, x29)\n    x36 = mapply(x35, x34)\n    x37 = paint(x21, x36)\n    O = x20(x37)\n    return O"], [0.8632787798855505, "def solve_5d3c9642(I):\n    x1 = rot180(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot270(I)\n    return O"], [0.8632787798855505, "def solve_ca3658b4(I):\n    O = rot90(I)\n    return O"], [0.8632787798855505, "def solve_68bfb9aa(I):\n    O = rot90(I)\n    return O"], [0.8632787798855505, "def solve_ed3b0a28(I):\n    O = rot270(I)\n    return O"], [0.8632787798855505, "def solve_edeedba3(I):\n    O = rot270(I)\n    return O"], [0.8634577218981633, "def solve_482fbab2(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.8634577218981633, "def solve_226abe4d(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.8635492590533458, "def solve_b1cd4281(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, UP)\n    x4 = ulcorner(x3)\n    x5 = urcorner(x3)\n    x6 = shoot(x4, NEG_UNITY)\n    x7 = shoot(x5, UP_RIGHT)\n    x8 = combine(x6, x7)\n    O = underfill(I, x1, x8)\n    return O"], [0.8636394223560959, "def solve_8c71b7e0(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = rot90(x1)\n    x3 = rot180(x1)\n    x4 = astuple(x2, x3)\n    x5 = astuple(FOUR, EIGHT)\n    x6 = apply(tojvec, x5)\n    x7 = apply(asobject, x4)\n    x8 = mpapply(shift, x7, x6)\n    O = paint(I, x8)\n    return O"], [0.863678348633302, "def solve_03da3cd5(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863678348633302, "def solve_3ba524cb(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863678348633302, "def solve_3b89e135(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863706518437685, "def solve_c11b0301(I):\n    O = dmirror(I)\n    return O"], [0.863706518437685, "def solve_c19cc311(I):\n    O = dmirror(I)\n    return O"], [0.8637867634430995, "def solve_fdfdf597(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_faf07838(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_f9f0600b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_d68d55f1(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_c122fbb2(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.8637867634430995, "def solve_ceb664ec(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_cc18addb(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.8637867634430995, "def solve_16aff312(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_5095be16(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8637867634430995, "def solve_61339b62(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.8638701955087361, "def solve_a3533769(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_cfb94ee5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_796e08f3(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, THREE, x8)\n    O = vmirror(x9)\n    return O"], [0.8638701955087361, "def solve_c6b891b4(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_9a7095b3(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_4b316b5f(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.8638701955087361, "def solve_4bb77202(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.8638701955087361, "def solve_b0d22c00(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_a98f16f8(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_f239ea44(I):\n    x1 = objects(I, T, F, F)\n    x2 = colorfilter(x1, ZERO)\n    x3 = rbind(bordering, I)\n    x4 = compose(flip, x3)\n    x5 = mfilter(x2, x4)\n    O = fill(I, ONE, x5)\n    return O"], [0.8638701955087361, "def solve_97f3d8a9(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.8638701955087361, "def solve_7f62c837(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, FOUR, x6)\n    return O"], [0.8638701955087361, "def solve_0fc2b845(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_b47661a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2,UNITY)\n    x4 = intersection(x2, x3)\n    x5 = mapply(neighbors, x4)\n    O = underfill(I, UP, x5)\n    return O"], [0.8638701955087361, "def solve_bec01355(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = inbox(x2)\n    x4 = recolor(ZERO, x3)\n    x5 = occurrences(I, x4)\n    x6 = normalize(x2)\n    x7 = shift(x6, NEG_UNITY)\n    x8 = lbind(shift, x7)\n    x9 = mapply(x8, x5)\n    O = fill(I, x1, x9)\n    return O"], [0.8638701955087361, "def solve_a146ca9a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_69ce8055(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.8638701955087361, "def solve_bb4716d0(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.8638701955087361, "def solve_e3f5a841(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_a0af9139(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = switch(x1, EIGHT, NINE)\n    x3 = switch(x2, TWO, SIX)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.8638701955087361, "def solve_94983672(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_e2e5080c(I):\n    x1 = asindices(I)\n    x2 = recolor(ZERO, x1)\n    x3 = lbind(shift, x2)\n    x4 = occurrences(I, x2)\n    x5 = mapply(x3, x4)\n    O = paint(I, x5)\n    return O"], [0.8638701955087361, "def solve_a075377a(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_f09525e7(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.8638763240862932, "def solve_43d5df35(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = mapply(toindices, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = objects(x5, T, F, T)\n    x7 = fork(recolor, color, backdrop)\n    x8 = mapply(x7, x6)\n    O = paint(x5, x8)\n    return O"], [0.8638878416543551, "def solve_a25f0c55(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, TWO)\n    x8 = astuple(TWO, x2)\n    x9 = power(decrement, TWO)\n    x10 = x9(x1)\n    x11 = x9(x2)\n    x12 = toivec(x11)\n    x13 = tojvec(x10)\n    x14 = crop(I, x12, x8)\n    x15 = crop(I, x13, x7)\n    x16 = asobject(x15)\n    x17 = asobject(x14)\n    x18 = vperiod(x16)\n    x19 = hperiod(x17)\n    x20 = astuple(x18, x19)\n    x21 = lbind(multiply, x20)\n    x22 = neighbors(ORIGIN)\n    x23 = mapply(neighbors, x22)\n    x24 = apply(x21, x23)\n    x25 = lbind(shift, x6)\n    x26 = mapply(x25, x24)\n    O = paint(I, x26)\n    return O"], [0.8638891638983809, "def solve_7a629c7e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8639170099334305, "def solve_876ab2dc(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = lbind(matcher, first)\n    x5 = compose(x4, mostcolor)\n    x6 = fork(sfilter, identity, x5)\n    x7 = fork(difference, identity, x6)\n    x8 = lbind(rbind, upscale)\n    x9 = interval(ONE, FOUR, ONE)\n    x10 = apply(x8, x9)\n    x11 = initset(identity)\n    x12 = insert(vmirror, x11)\n    x13 = insert(hmirror, x12)\n    x14 = insert(cmirror, x13)\n    x15 = insert(dmirror, x14)\n    x16 = fork(compose, first, last)\n    x17 = lbind(occurrences, I)\n    x18 = lbind(lbind, shift)\n    x19 = compose(x17, x7)\n    x20 = product(x15, x10)\n    x21 = apply(x16, x20)\n    x22 = rapply(x21, x3)\n    x23 = fork(mapply, x18, x19)\n    x24 = mapply(x23, x22)\n    O = paint(I, x24)\n    return O"], [0.8639438916538609, "def solve_7a10dcbb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_02aa9478(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = apply(ulcorner, x4)\n    x6 = lbind(shift, x3)\n    x7 = mapply(x6, x5)\n    O = paint(I, x7)\n    return O"], [0.8639438916538609, "def solve_1764c709(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_4347c091(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_c130da4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_c001bb73(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8640253338383225, "def solve_8ea6e1e5(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_f5011454(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_a78f4125(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_f700ff56(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_9ffec60d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_1565ebba(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_ea79e4e3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_58a82f52(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_55dde4d1(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_816ea530(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_c3e7dda6(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_5a71d56d(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_1196570b(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_d295d8c3(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_05894b53(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_717a5c31(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640642125094757, "def solve_1fcc57a3(I):\n    x1 = objects(I, F, T, T)\n    x2 = rbind(add, DOWN)\n    x3 = compose(x2, llcorner)\n    x4 = compose(toivec, numcolors)\n    x5 = fork(add, lrcorner, x4)\n    x6 = fork(astuple, x3, x5)\n    x7 = compose(box, x6)\n    x8 = mapply(x7, x1)\n    O = fill(I, THREE, x8)\n    return O"], [0.8640827805427497, "def solve_8ebcfe2b(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, toivec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.8641376097298877, "def solve_bece834a(I):\n    x1 = mostcolor(I)\n    x2 = rot270(I)\n    x3 = matcher(identity, x1)\n    x4 = rbind(sfilter, x3)\n    x5 = compose(flip, x3)\n    x6 = rbind(sfilter, x5)\n    x7 = fork(combine, x4, x6)\n    x8 = apply(x7, x2)\n    O = rot90(x8)\n    return O"], [0.8641376097298877, "def solve_c162868a(I):\n    O = hmirror(I)\n    return O"], [0.8641376097298877, "def solve_186f2b6c(I):\n    O = rot180(I)\n    return O"], [0.8641453134548085, "def solve_57828555(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_dfbbb59c(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8642721744821437, "def solve_18a0ff35(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, T)\n    x3 = rbind(shoot, RIGHT)\n    x4 = compose(x3, center)\n    x5 = fork(recolor, color, x4)\n    x6 = mapply(x5, x2)\n    x7 = paint(I, x6)\n    x8 = add(x1, DOWN_LEFT)\n    x9 = initset(x8)\n    x10 = mostcolor(I)\n    x11 = recolor(x10, x9)\n    x12 = objects(x7, T, F, T)\n    x13 = insert(x11, x12)\n    x14 = order(x13, uppermost)\n    x15 = first(x14)\n    x16 = remove(x11, x14)\n    x17 = remove(x15, x14)\n    x18 = compose(lrcorner, first)\n    x19 = compose(lrcorner, last)\n    x20 = fork(connect, x18, x19)\n    x21 = compose(color, first)\n    x22 = fork(recolor, x21, x20)\n    x23 = pair(x16, x17)\n    x24 = mapply(x22, x23)\n    O = underpaint(x7, x24)\n    return O"], [0.8642976086802397, "def solve_438f706b(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    O = paint(I, x5)\n    return O"], [0.8644589141181133, "def solve_cfcf28e2(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(subtract, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [0.8644624689419942, "def solve_c79503c9(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, vmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, hmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_07d51b9c(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_48a3de2d(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_fd338538(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_c26fe185(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_48b371f7(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_910f2054(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8656237858337551, "def solve_a4a28622(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.8657249113171893, "def solve_02cc1bf7(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = dedupe(x7)\n    x9 = order(x8, identity)\n    x10 = size(x9)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = interval(ONE, x12, ONE)\n    x14 = pair(x9, x13)\n    x15 = height(I)\n    x16 = astuple(x15, x2)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x17, x14)\n    x19 = lbind(extract, x18)\n    x20 = lbind(matcher, first)\n    x21 = chain(last, x19, x20)\n    x22 = compose(x21, x6)\n    x23 = fork(subtract, height, x6)\n    x24 = fork(repeat, x22, x23)\n    x25 = lbind(repeat, x2)\n    x26 = compose(x25, x6)\n    x27 = fork(combine, x26, x24)\n    x28 = apply(x27, x3)\n    O = dmirror(x28)\n    return O"], [0.8659287967270011, "def solve_4a20f76f(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.8659287967270011, "def solve_13ffcbf0(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.8679896929989098, "def solve_32f4d056(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, mostcolor, x2)\n    return O"], [0.8682381388304167, "def solve_f3d2cdb4(I):\n    x1 = vmirror(I)\n    x2 = fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, decrement, x8)\n    O = hmirror(x9)\n    return O"], [0.8687415090376716, "def solve_2cfb3c38(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_db0f04e4(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_df7b466b(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.895840777338116, "def solve_5bdd8550(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_34ef23fc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_f85e9eed(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_2d7d386d(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.895840777338116, "def solve_388e1b7f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.8966427298715387, "def solve_487aa7fc(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_461aa8f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_497731f2(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_359d0d94(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_053e17b6(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.8966427298715387, "def solve_31018754(I):\n    x1 = shape(I)\n    x2 = increment(x1)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [0.913019613011668, "def solve_95344ba8(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = shift(x6, LEFT)\n    x8 = paint(x4, x7)\n    x9 = shift(x6, RIGHT)\n    x10 = paint(x8, x9)\n    x11 = shift(x6, UP)\n    x12 = paint(x10, x11)\n    x13 = shift(x6, DOWN)\n    x14 = paint(x12, x13)\n    O = paint(x14, x6)\n    return O"], [1.0, "def solve_049372ee(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_a37c8aba(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 =uttuple(x6, x7)\n    x9 = repeat(x8, ONE)\n    O = x7(x9)\n    return O"], [1.0, "def solve_07584382(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_f067c1cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_d19c3398(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = rbind(rapply, I)\n    x9 = compose(initset, first)\n    x10 = chain(first, x8, x9)\n    x11 = rbind(ofcolor, EIGHT)\n    x12 = chain(lowermost, x11, x10)\n    x13 = matcher(x12, ZERO)\n    x14 = extract(x7, x13)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = x15(I)\n    x18 = rot180(x17)\n    x19 = shape(x18)\n    x20 = lbind(apply, first)\n    x21 = lbind(ofcolor, x18)\n    x22 = chain(size, x20, x21)\n    x23 = palette(I)\n    x24 = argmax(x23, x22)\n    x25 = partition(x18)\n    x26 = matcher(color, x24)\n    x27 = compose(flip, x26)\n    x28 = sfilter(x25, x27)\n    x29 = compose(invert, size)\n    x30 = order(x28, x29)\n    x31 = apply(normalize, x30)\n    x32 = size(x31)\n    x33 = interval(ZERO, x32, ONE)\n    x34 = apply(toivec, x33)\n    x35 = mpapply(shift, x31, x34)\n    x36 = canvas(x24, x19)\n    x37 = paint(x36, x35)\n    O = x16(x37)\n    return O"], [1.0, "def solve_7ea63447(I):\n    x1 = index(I, ORIGIN)\n    x2 = equality(x1, THREE)\n    x3 = flip(x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    x5 = branch(x3, righthalf, bottomhalf)\n    x6 = branch(x3, hconcat, vconcat)\n    x7 = x5(I)\n    x8 = x5(I)\n    x9 = first(x7)\n    x10 = last(x7)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x8, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = asindices(x11)\n    x23 = ofcolor(x11, x21)\n    x24 = difference(x22, x23)\n    x25 = astuple(x24, x3333)\n    x26 = apply(last, x25)\n    x27 = size(x26)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = rbind(add, first)\n    x31 = compose(x30, last)\n    x32 = rbind(multiply, x31)\n    x33 = apply(x32, x29)\n    x34 = lbind(shift, x11)\n    x35 = mapply(x34, x33)\n    x36 = paint(x11, x35)\n    O = x6(x36)\n    return O"], [1.0, "def solve_7cc98818(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = height(x2)\n    x4 = width(x2)\n    x5 = neighbors(ORIGIN)\n    x6 = toindices(x2)\n    x7 = lbind(shift, x6)\n    x8 = height(I)\n    x9 = divide(x8, x3)\n    x10 = width(I)\n    x11 = divide(x10, x4)\n    x12 = astuple(x9, x11)\n    x13 = maximum(x12)\n    x14 = increment(x13)\n    x15 = interval(ONE, x14, ONE)\n    x16 = astuple(x3, x4)\n    x17 = lbind(multiply, x16)\n    x18 = compose(crement, x17)\n    x19 = lbind(mapply, x7)\n    x20 = rbind(apply, x15)\n    x21 = lbind(rbind, multiply)\n    x22 = compose(x21, x18)\n    x23 = chain(x19, x20, x22)\n    x24 = rbind(toobject, I)\n    x25 = compose(x7, x18)\n    x26 = chain(palette, x24, x25)\n    x27 = mostcolor(I)\n    x28 = rbind(equality, x27)\n    x29 = rbind(argmin, x28)\n    x30 = compose(x29, x26)\n    x31 = fork(recolor, x30, x23)\n    x32 = mapply(x31, x5)\n    O = paint(I, x32)\n    return O"], [1.0, "def solve_3bda924f(I):\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(dneighbors, x1)\n    x3 = fork(difference, x2, toindices)\n    x4 = compose(size, x3)\n    x5 = matcher(x4, ZERO)\n    x6 = compose(x1, x5)\n    x7 = fork(equality, identity, x6)\n    x8 = sfilter(x1, x7)\n    O = fill(I, THREE, x8)\n    return O"], [1.0, "def solve_20cebd2e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_78c33ff1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_962b3b43(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_14d818e9(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x12 = compose(x15, last)\n    x13 = sfilter(x13, x12)\n    x14 = color(x13)\n    x15 = palette(I)\n    x16 = remove(x8, x15)\n    x17 = other(x16, x14)\n    x18 = rbind(colorcount, x14)\n    x19 = argmin(x17, x18)\n    x20 = apply(ulcorner, xx)\n    x21 = normalize(x19)\n    x22 = matcher(first, x14)\n    x23 = sfilter(x21, x22)\n    x24 = toindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = mapply(x25, x8)\n    x27 = ofcolor(I, x17)\n    x28 = backdrop(x27)\n    x29 = intersection(x27, x28)\n    O = fill(I, x17, x29)\n    return O"], [1.0, "def solve_e6b2b224(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_53a0909f(I):\n    x1 = objects(I, F, T, T)\n    x2 = subgrid(x1, I)\n    x3 = mostcolor(x2)\n    O = replace(x2, x3, ONE)\n    return O"], [1.0, "def solve_d2d3de8d(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = subgrid(x1, I)\n    x3 = apply(ulcorner, x2)\n    x4 = apply(urcorner, x2)\n    x5 = apply(llcorner, x2)\n    x6 = apply(lrcorner, x2)\n    x7 = fill(I, ONE, x3)\n    x8 = fill(x7, TWO, x4)\n    x9 = fill(x8, THREE, x5)\n    O = fill(x9, FOUR, x6)\n    return O"], [1.0, "def solve_310d6026(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = compose(size, x18)\n    x21 = fork(equality, x19, x20)\n    x22 = chain(positive, size, x14)\n    x23 = fork(both, x21, x22)\n    x24 = sfilter(x11, x23)\n    x25 = compose(size, x14)\n    x26 = valmax(x24, x25)\n    x27 = compose(size, x14)\n    x28 = matcher(x27, x26)\n    x29 = sfilter(x24, x28)\n    x30 = fork(multiply, first, last)\n    x31 = argmax(x29, x30)\n    x32 = interval(ZERO, TEN, ONE)\n    x33 = lbind(shift, x2)\n    x34 = lbind(multiply, x31)\n    x35 = compose(x33, x34)\n    x36 = mapply(x35, x32)\n    O = paint(x6, x36)\n    return O"], [1.0, "def solve_f51bcb8d(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO_BY_TWO)\n    x3 = canvas(ZERO, x2)\n    x4 = asobject(I)\n    x5 = shift(x4, UNITY)\n    x6 = paint(x3, x5)\n    x7 = asindices(x3)\n    x8 = fork(difference, box, corners, combine)\n    x9 = x8(x7)\n    x10 = lbind(lbind, manhattan)\n    x11 = rbind(compose, initset)\n    x12 = chain(x11, x10, initset)\n    x13 = lbind(argmin, x5)\n    x14 = chain(first, x13, x12)\n    x15 = fork(astuple, x14, identity)\n    x16 = apply(x15, x9)\n    O = paint(x6, x16)\n    return O"], [1.0, "def solve_c85f36ed(I):\n    x1 =O = subgrid(x2, I)\n    O = trim(x1)\n    return O"], [1.0, "def solve_80c2a33c(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_6757fa8d(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_706088f6(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f111fd73(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = lbind(shift, x5)\n    x7 = mapply(x6, x4)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_0cd3e000(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = asobject(x3)\n    x5 = shift(x4, UNITY)\n    O = paint(I, x5)\n    return O"], [1.0, "def solve_e2130830(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_568417bf(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = argmin(x3, numcolors)\n    x5 = argmax(x3, numcolors)\n    x6 = width(x5)\n    x7 = rbind(repeat, x6)\n    x8 = chain(dmirror, merge, x7)\n    x9 = upscale(x5, x6)\n    x10 = x8(x4)\n    x11 = x8(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da15407e(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = fill(I, x10, x30)\n    O = trim(x31)\n    return O"], [1.0, "def solve_913b1be3(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_25abc504(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = occurrences(x7, x21)\n    x25 = lbind(mapply, backdrop)\n    x26 = lbind(apply, toindices)\n    x27 = compose(x25, x26)\n    x28 = x27(x24)\n    x29 = x27(x25)\n    x30 = fill(x7, x4, x28)\n    x31 = fill(x30, x6, x29)\n    O = fill(x31, ONE, x30)\n    return O"], [1.0, "def solve_66aeef6e(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e7fe1202(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e57feb5d(I):\n    x1 = objects(I, T, F, F)\n    x2 = asindices(I)\n    x3 = outbox(x2)\n    x4 = lbind(adjacent, x3)\n    x5 = compose(x4, initset)\n    x6 = rbind(extract, x5)\n    x7 = compose(x6, toindices)\n    x8 = rbind(compose, initset)\n    x9 = lbind(rbind, manhattan)\n    x10 = chain(x8, x9, initset)\n    x11 = lbind(lbind, greater)\n    x12 = chain(x11, halve, size)\n    x13 = compose(x10, x7)\n    x14 = fork(compose, x12, x13)\n    x15 = fork(sfilter, toindices, x14)\n    x16 = mapply(x15, x1)\n    O = fill(I, EIGHT, x16)\n    return O"], [1.0, "def solve_9fe0b56e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4292352e(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_9b3d7e8f(I):\n    x1 = switch(I, THREE, FOUR)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = x2(x2)\n    return O"], [1.0, "def solve_acafbc06(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_299c5df7(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_2be20951(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d17e2eb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(multiply, THREE)\n    x27 = rbind(divide, THREE)\n    x28 =x26(x15)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = sfilter(x22, x30)\n    x32 = apply(x11, x31)\n    x33 = argmin(x32, size)\n    x34 = x22(x33)\n    x35 = x21(x34)\n    x36 = divide(x17, x35)\n    x37 = x51(x34)\n    x38 = x25(x37)\n    x39 = canvas(x38, x36)\n    O = paint(x39, x37)\n    return O"], [1.0, "def solve_4adc7313(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_a97ec318(I):\n    x1 = index(I, ORIGIN)\n    x2 = recolor(ORIGIN, x1)\n    x3 = apply(initset, x2)\n    x4 = toindices(x3)\n    x5 = chain(backdrop, first, last)\n    x6 = lbind(mapply, x5)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = compose(x6, x7)\n    x9 = position(x4, x8)\n    x10 = difference(x1, x9)\n    x11 = apply(x8, x10)\n    x12 = lbind(difference, x4)\n    x13 = compose(x12, x8)\n    x14 = rbind(ofcolor, ZERO)\n    x15 = compose(x14, x8)\n    x16 = fork(sfilter, x13, x15)\n    x17 = mapply(x16, x11)\n    O = fill(I, x1, x17)\n    return O"], [1.0, "def solve_bb3cbb31(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_a5fbb767(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, flip)\n    x3 = branch(x1, decrement, ONE)\n    x4 = x2(I)\n    x5 = halve(x4)\n    x6 = x3(I)\n    x7 = rbind(shoot, x5)\n    x8 = compose(x7, x4)\n    x9 = fork(combine, x8, x5)\n    x10 = mapply(x9, x6)\n    O = fill(I, ONE, x10)\n    return O"], [1.0, "def solve_62f87671(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_11ee2f79(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_76d78f80(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose,initset)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = lbind(fork, greater)\n    x8 = lbind(chain, FOUR)\n    x9 = rbind(x8, x6)\n    x10 = lbind(rbind, contained)\n    x11 = compose(x9, x10)\n    x12 = lbind(compose, x2)\n    x13 = chain(x11, x12, x11)\n    x14 = lbind(compose, x4)\n    x15 = compose(x14, x13)\n    x16 = fork(x11, x15, x11)\n    x17 = compose(first, x16)\n    x18 = fork(9999, x17, x5)\n    x19 = compose(first, x5)\n    x20 = fork(recolor, x18, x19)\n    x21 = fork(remove, x20, x8)\n    x22 = fork(astuple, x21, x17)\n    x23 = fork(insert, x22, x83)\n    x24 = box(x23)\n    O = fill(I, x24, x24)\n    return O"], [1.0, "def solve_ea1a36f4(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_e763c4da(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, rbind, x6)\n    x8 = chain(merge, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [1.0, "def solve_f1a313bf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = rbind(colorcount, ZERO)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = merge(x5)\n    x7 = color(x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_b2e2b4c2(I):\n    x1 = mostcolor(I)\n    x2 = replace(I, x1, ZERO)\n    x3 = apply(d406, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = repeat(x6, ONE)\n    x8 = combine(x7, x4)\n    x9 = multiply(NEG_TWO, TEN)\n    x10 = interval(x9, x2, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = lbind(shift, x8)\n    x13 = mapply(x12, x11)\n    O = paint(x2, x13)\n    return O"], [1.0, "def solve_4275544e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = lbind(apply, maximum)\n    x6 = chain(x5, double, x4)\n    x7 = matcher(x6, EIGHT)\n    x8 = compose(flip, x7)\n    x9 = sfilter(I, x8)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = lbind(shift, x9)\n    x12 = chain(x10, x11, palette)\n    x13 = apply(x12, x9)\n    x14 = merge(x13)\n    x15 = mostcolor(x14)\n    x16 = shape(I)\n    x17 = canvas(x15, x16)\n    x18 = hconcat(I, x17)\n    x19 = objects(x18, F, T, T)\n    x20 = argmax(x19, numcolors)\n    x21 = apply(ulcorner, x19)\n    x22 = normalize(x20)\n    x23 = lbind(shift, x22)\n    x24 = mapply(x23, x21)\n    O = paint(I, x24)\n    return O"], [1.0, "def solve_2937f851(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_8fea3bcd(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_58da7cea(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = objects(x3, T, F, F)\n    x5 = argmin(x4, TWO)\n    x6 = argmax(x4, x2)\n    x7 = neighbors(x6)\n    x8 = insert(x6, x7)\n    x9 = fill(x3, EIGHT, x8)\n    x10 = hmirror(x9)\n    x11 = replace(x10, EIGHT, ONE)\n    x12 = x2(x11)\n    x13 = merge(x12)\n    x14 = cover(x11, x13)\n    x15 = paint(x14, x12)\n    x16 = objects(x15, T, F, F)\n    x17 = colorfilter(x16, EIGHT)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    O = cover(x15, x19)\n    return O"], [1.0, "def solve_79e19501(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_cc69ffc6(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_4c0e6387(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(O, x5)\n    return O"], [1.0, "def solve_b11ffdfa(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWOZERO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [1.0, "def solve_3cb67168(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_5b89bf48(I):\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = leastcolor(I)\n    x5 = repeat(x4, ONE)\n    x6 = rbind(ofcolor, x4)\n    x7 = compose(x6, frontiers)\n    x8 = chain(size, x7, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = astuple(x19, x0)\n    x11 = canvas(x9, x10)\n    x12 = argmax(x11, x9)\n    x13 = subtract_normalize(x12)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = difference(x14, x12)\n    x16 = rbind(multiply, x13)\n    x17 = apply(x16, x15)\n    x18 = rbind(interval, x12)\n    x19 = lbind(rbind, contained)\n    x20 = lbind(sfilter, x17)\n    x21 = compose(x19, x20)\n    x22 = lbind(compose, x21)\n    x23 = lbind(rbind, intersection)\n    x24 = compose(x22, x23)\n    x25 = lbind(rbind, shift)\n    x26 = lbind(apply, x25)\n    x27 = lbind(chain, x24)\n    x28 = x27(x41)\n    x29 = lbind(x28, x41)\n    x30 = rbind(x26, x8)\n    x31 = compose(x29, x30)\n    x32 = fork(mapply, x31, x21)\n    x33 = pair(x17, x12)\n    x34 = mapply(x32, x33)\n    O = paint(x11, x34)\n    return O"], [1.0, "def solve_00d75081(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = argmin(x1, uppermost)\n    x5 = argmax(x1, uppermost)\n    x6 = width(x3)\n    x7 = halve(x6)\n    x8 = height(x3)\n    x9 = height(x5)\n    x10 = interval(ZERO, x8, ONE)\n    x11 = lbind(multiply, x7)\n    x12 = rbind(divide, x7)\n    x13 = chain(x11, x12, last)\n    x14 = lbind(apply, last)\n    x15 = lbind(remove, x4)\n    x16 = lbind(astuple, x9)\n    x17 = chain(x14, x15, x16)\n    x18 = lbind(apply, first)\n    x19 = lbind(other, x9)\n    x20 = compose(x18, x19)\n    x21 = compose(x15, x20)\n    x22 = fork(combine, x17, x21)\n    x23 = compose(x12, matcher)\n    x24 = fork(combine, x23, x22)\n    x25 = fork(combine, x38, x12)\n    x26 = fork(combine, x26, x24)\n    x27 = fork(difference, x28, x22)\n    x28 = fork(mapply, x27, x27)\n    x29 = fork(difference, x28, last)\n    x30 = fork(recolor, first, x29)\n    x31 = mapply(x30, x5)\n    O = paint(x3, x31)\n    return O"], [1.0, "def solve_63e392f1(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_e24eeece(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_ef0ab38c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_4f492ee7(I):\n    x1 = fgpartition(I)\n    x2 =matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_3cd09773(I):\n    x1 = astuple(identity, identity)\n    x2 = astuple(rot90, rot270)\n    x3 = astuple(x1, x2)\n    x4 = astuple(rot180, rot180)\n    x5 = astuple(rot270, rot90)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = leastcolor(I)\n    x9 = repeat(x8, ONE)\n    x10 = rbind(rapply, I)\n    x11 = chain(x10, initset, first)\n    x12 = compose(first, x11)\n    x13 = chain(dedupe, first, x12)\n    x14 = matcher(x13, x9)\n    x15 = extract(x7, x14)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 = x16(I)\n    x19 = ofcolor(x18, x8)\n    x20 = height(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = lbind(astuple, x20)\n    x23 = apply(x22, x21)\n    x24 = rbind(shoot, DOWN)\n    x25 = mapply(x24, x23)\n    x26 = fill(x18, FOUR, x25)\n    x27 = astuple(x20, x20)\n    x28 = canvas(ZERO, x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x27)\n    x31 = shape(I)\n    x32 = maximum(x31)\n    x33 = lbind(shift, x30)\n    x34 = interval(ZERO, x32, x20)\n    x35 = pair(x34, x34)\n    x36 = mapply(x33, x35)\n    x37 = fill(x26, TWO, x36)\n    O = x17(x37)\n    return O"], [1.0, "def solve_d9624359(I):\n    x1 = vmirror(I)\n    O = hconcat(x1, I)\n    return O"], [1.0, "def solve_fb1ad7ac(I):\n    x1 = index(I, ORIGIN)\n    x2 = center(I)\n    x3 = decrement(x2)\n    x4 = astuple(x3, ONE)\n    x5 = connect(x2, x4)\n    x6 = fill(I, FOUR, x5)\n    x7 = astuple(x3, ONE)\n    x8 = canvas(x1, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, DOWN)\n    x11 = shape(I)\n    x12 = maximum(x11)\n    x13 = lbind(shift, x10)\n    x14 = interval(ZERO, x12, ONE)\n    x15 = rbind(toobject, I)\n    x16 = lbind(compose, ZERO)\n    x17 = lbind(colorfilter, x15)\n    x18 = compose(x16, x17)\n    x19 = lbind(shift, x10)\n    x20 = rbind(multiply, x4)\n    x21 = chain(x19, x20, last)\n    x22 = mapply(x21, x14)\n    x23 = paint(x6, x22)\n    O = downscale(x23, THREE)\n    return O"], [1.0, "def solve_d9026414(I):\n    x1 = doublecolors(I)\n    x2 = decrement(x1)\n    x3 = compose(vfrontier, tojvec)\n    x4 = initset(ZERO)\n    x5 = lbind(rapply, x4)\n    x6 = lbind(ofcolor, I)\n    x7 = compose(first, x6)\n    x8 = chain(x3, x7, x3)\n    x9 = matcher(x8, ZERO)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fill(I, ZERO, x11)\n    x13 = asobject(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x12, x14)\n    x16 = urcorner(x2)\n    x17 = lbind(shift, x16)\n    x18 = height(x12)\n    x19 = divide(x18, x19)\n    x20 = increment(x19)\n    x21 = width(x12)\n    x22 = divide(x21, x22)\n    x23 = increment(x22)\n    x24 = rbind(multiply, x23)\n    x25 = apply(x24, x20)\n    x26 = mapply(x17, x25)\n    x27 = cover(x15, x26)\n    O = paint(x27, x200)\n    return O"], [1.0, "def solve_af609e9e(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_343d91ee(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x8)\n    x4 = fork(either, vline, hline)\n    x5 = mfilter(x3, x4)\n    x6 = mostcolor(I)\n    x7 = shape(I)\n    x8 = canvas(x6, x7)\n    O = fill(x8, ONE, x5)\n    return O"], [1.0, "def solve_2b682033(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(non38, x1)\n    x3 = combine(x2, x2)\n    x4 = lefthalf(I)\n    x5 = righthalf(I)\n    x6 = tophalf(x4)\n    x7 = tophalf(x5)\n    x8 = bottomhalf(x4)\n    x9 = bottomhalf(x5)\n    x10 = astuple(x6, x7)\n    x11 = astuple(x8, x9)\n    x12 = combine(x10, x11)\n    x13 = rbind(adjacent, x12)\n    x14 = extract(x12, x13)\n    O = x14(x4)\n    return O"], [1.0, "def solve_ef5e29eb(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_c0733203(I):\n    O = upscale(I, TWO)\n    return O"], [1.0, "def solve_846b1bdf(I):\n    x1 = partition(I)\n    x2 = fork(equality, corners, toindices)\n    x3 = extract(x1, x2)\n    x4 = subgrid(x3, I)\n    x5 = backdrop(x3)\n    x6 = cover(I, x5)\n    x7 = frontiers(x4)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x4)\n    x13 = x11(x6)\n    x14 = fgpartition(x13)\n    x15 = merge(x14)\n    x16 = normalize(x15)\n    x17 = mostcolor(x13)\n    x18 = color(x3)\n    x19 = palette(x12)\n    x20 = remove(x18, x19)\n    x21 = remove(x17, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x12, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x12, x22)\n    x27 = leftmost(x26)\n    x28 = greater(x25, x27)\n    x29 = ofcolor(x13, x23)\n    x30 = leftmost(x29)\n    x31 = ofcolor(x13, x22)\n    x32 = leftmost(x31)\n    x33 = greater(x30, x32)\n    x34 = equality(x28, x33)\n    x35 = branch(x34, identity, vmirror)\n    x36 = x35(x16)\n    x37 = shift(x36, UNITY)\n    x38 = paint(x12, x37)\n    O = x11(x38)\n    return O"], [1.0, "def solve_e7e994a3(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_d2965672(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_7d1be212(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_181387ae(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, frontiers)\n    x7 = sfilter(x2, x6)\n    x8 = colorfilter(x4, ONE)\n    x9 = difference(x4, x8)\n    x10 = pair(x9, x8)\n    x11 = mapply( sfilter, x10)\n    x12 = leastcolor(x11)\n    x13 = shape(I)\n    x14 = canvas(x12, x13)\n    x15 = hconcat(I, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = rbind(colorcount, x12)\n    x18 = order(x16, x17)\n    x19 = first(x18)\n    x20 = last(x18)\n    x21 = ofcolor(x19, ZERO)\n    x22 = ofcolor(x20, x12)\n    x23 = combine(x21, x22)\n    x24 = intersection(x21, x22)\n    x25 = difference(x23, x24)\n    O = fill(x15, NINE, x25)\n    return O"], [1.0, "def solve_131b894f(I):\n    x1 = objects(I, T, F, F)\n    x2 = lbind(colorfilter, x1)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ONE)\n    x5 = palette(I)\n    x6 = sfilter(x5, x4)\n    x7 = fork(equality, toindices, box)\n    x8 = rbind(contained, x6)\n    x9 = compose(x8, color)\n    x10 = sfilter(x1, x9)\n    x11 = rbind(greater, SEVEN)\n    x12 = compose(x11, size)\n    x13 = sfilter(x10, x12)\n    x14 = extract(x13, x7)\n    x15 = subgrid(x14, I)\n    O = trim(x15)\n    return O"], [1.0, "def solve_fbbb8b8e(I):\n    x1 = fill(I, FIVE, x2)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = index(I, x2)\n    x5 = lbind(shift, x2)\n    x6 = mapply(x5, x3)\n    O = fill(x1, x4, x6)\n    return O"], [1.0, "def solve_0bfc1c91(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x3)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x4)\n    x12 = ulcorner(x2)\n    x13 = lbind(subtract, x12)\n    x14 = rbind(shift, x12)\n    x15 = compose(x13, x14)\n    x16 = fork(hmirror, identity, x15)\n    x17 = mapply(x16, x11)\n    O = paint(x1, x17)\n    return O"], [1.0, "def solve_da8109a3(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_9579b0f7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = fgpartition(x6)\n    x8 = merge(x7)\n    x9 = palette(x8)\n    x10 = intersection(x9, x5)\n    x11 = first(x10)\n    x12 = shape(x5)\n    x13 = canvas(x11, x12)\n    x14 = hconcat(x3, x13)\n    x15 = objects(x14, T, F, T)\n    x16 = first(x15)\n    x17 = compose(vdrop, vmirror)\n    x18 = rbind(hmatching, x17)\n    x19 = sfilter(x16, x18)\n    x20 = asindices(x19)\n    x21 = apply(x17, x20)\n    x22 = lbind(shift, x8)\n    x23 = mapply(x22, x21)\n    O = paint(x21, x23)\n    return O"], [1.0, "def solve_10cb4435(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_24164807(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_e004eac7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_dc434a02(I):\n    x1 = ofcolor(I, THREE)\n    x2 = subgrid(x1, I)\n    x3 = ofcolor(x2, ZERO)\n    x4 = replace(I, THREE, ZERO)\n    x5 = replace(x4, EIGHT, ZERO)\n    x6 = compress(x5)\n    x7 = upscale(x6, THREE)\n    O = fill(x7, ZERO, x3)\n    return O"], [1.0, "def solve_cf1272d5(I):\n    x1 = crop(I, ORIGIN, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = decrement(TWO)\n    x4 = toivec(x3)\n    x5 = crop(I, x4, THREE_BY_THREE)\n    x6 = asobject(x5)\n    x7 = decrement(x2)\n    x8 = astuple(x7, x8)\n    x9 = connect(x7, x8)\n    x10 = fill(I, SIX, x9)\n    x11 =object(x10, I)\n    x12 = interval(ZERO, NINE, ONE)\n    x13 = astuple(x11, x12)\n    x14 = lbind(multiply, x13)\n    x15 = apply(x14, x12)\n    x16 = lbind(shift, x11)\n    x17 = mapply(x16, x15)\n    O = fill(x10, FIVE, x17)\n    return O"], [1.0, "def solve_1e5255a3(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_114b60f6(I):\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.0, "def solve_8e9260a1(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_311eb1f7(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_6b36777e(I):\n    x1 = fgpartition(I)\n    x2 = rot90(I)\n    x3 = colorfilter(x1, TWO)\n    x4 = rbind(adjacent, x2)\n    x5 = mfilter(x3, x4)\n    x6 = recolor(ONE, x5)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_b796a6f8(I):\n    x1 = switch(I, FOUR, ZERO)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = rbind(ofcolor, ZERO)\n    x7 = palette(x3)\n    x8 = palette(x10)\n    x9 = intersection(x7, x8)\n    x10 = fill(x5, ZERO, x9)\n    x11 = fill(x10, EIGHT, x4)\n    O = fill(x11, TWO, x5)\n    return O"], [1.0, "def solve_ba07786f(I):\n    x1 = matcher(first, THREE)\n    x2 = rbind(sfilter, x1)\n    x3 = compose(ff28, x2)\n    x4 = fork(recolor, identity, x3)\n    x5 = mapply(x4, objects)\n    x6 = paint(I, x5)\n    x7 = replace(x6, EIGHT, ONE)\n    O = paint(x7, delta)\n    return O"], [1.0, "def solve_91c19737(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5ccb1afb(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(compose, x8)\n    x17 = chain(x16, x5, x6)\n    x18 = lbind(compose, x10)\n    x19 = chain(x18, x5, x6)\n    x20 = lbind(compose, x12)\n    x21 = chain(x20, x5, x6)\n    x22 = lbind(compose, x17)\n    x23 = chain(x21, x22, x6)\n    x24 = rbind(rapply, I)\n    x25 = chain(first, x24, initset)\n    x26 = fork(rapply, x25, x6)\n    x27 = compose(x25, x26)\n    x28 = mapply(x27, x2)\n    x29 = argmax(x28, x7)\n    O = x30(x29)\n    return O"], [1.0, "def solve_3405ecb8(I):\n    x1 = asobject(I)\n    x2 = height(I)\n    x3 = decrement(x2)\n    x4 = lbind(astuple, x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(last, last)\n    x8 = chain(flip, x6, x7)\n    x9 = sfilter(x1, x8)\n    x10 = chain(x4, first, last)\n    x11 = compose(last, last)\n    x12 = fork(astuple, x10, x11)\n    x13 = fork(astuple, first, x12)\n    x14 = apply(x13, x9)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_a11fa586(I):\n    x1 = hconcat(I, I)\n    x2 = vconcat(x1, x1)\n    x3 = asindices(x2)\n    x4 = mostcolor(I)\n    x5 = ofcolor(x2, x4)\n    x6 = difference(x3, x5)\n    x7 = mapply(ineighbors, x6)\n    O = underfill(x2, EIGHT, x7)\n    return O"], [1.0, "def solve_ba39fe2b(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_a6cbd52e(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_e79cbf7a(I):\n    x1 = ofcolor(I, ONE)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = lefthalf(x3)\n    O = tophalf(x4)\n    return O"], [1.0, "def solve_b3617a6f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = mostcolor(x5)\n    x7 = leastcolor(I)\n    x8 = ofcolor(I, x7)\n    x9 = position(x5, x8)\n    x10 = shoot(x6, NEG_UNITY)\n    x11 = lrcorner(x8)\n    x12 = shoot(x11, UNITY)\n    x13 = fill(I, x1, x9)\n    O = fill(x13, x7, x12)\n    return O"], [1.0, "def solve_8ae96ca0(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_0a7a97ac(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, shape)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [1.0, "def solve_3fafaf9d(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_f64281da(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_3dfaff7c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_08aedea3(I):\n    x1 = first(I)\n    x2 = mostcommon(x1)\n    x3 = dmirror(I)\n    x4 = matcher(identity, x2)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(size, x5)\n    x7 = apply(x6, x3)\n    x8 = sfilter(x7, x4)\n    x9 = lbind(shift, x8)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_0e42b48f(I):\n    x1 = Fgpartition(I)\n    x2 = objects(I, T, F, F)\n    x3 = order(x1, height)\n    x4 = last(x3)\n    x5 = remove(x4, x3)\n    x6 = last(x5)\n    x7 = color(x6)\n    x8 = colorfilter(x2, x7)\n    x9 = power(outbox, TWO)\n    x10 = rbind(toobject, I)\n    x11 = mostcolor(I)\n    x12 = lbind(remove, x11)\n    x13 = chain(size, x12, palette)\n    x14 = chain(x13, x10, x9)\n    x15 = argmax(x8, x14)\n    x16 = ulcorner(x15)\n    x17 = shape(x15)\n    x18 = subtract(x16, x17)\n    x19 = decrement(x18)\n    x20 = multiply(x17, THREE)\n    x21 = add(x20, TWO_BY_TWO)\n    x22 = crop(I, x19, x21)\n    x23 = asobject(x22)\n    x24 = apply(ulcorner, x8)\n    x25 = increment(x17)\n    x26 = rbind(subtract, x25)\n    x27 = apply(x26, x24)\n    x28 = lbind(shift, x23)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [1.0, "def solve_ea9e0567(I):\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, vmirror, hmirror)\n    x4 = x3(I)\n    x5 = decrement(x4)\n    x6 = branch(x2, tojvec, lefthalf)\n    x7 = x6(I)\n    x8 = rbind(shoot, x5)\n    x9 = rbind(shoot, x7)\n    x10 = fork(combine, x8, x9)\n    x11 = x10(x7)\n    x12 = fill(x7, ZERO, x11)\n    x13 = ofcolor(x12, TWO)\n    x14 = subgrid(x13, x12)\n    x15 = x3(x14)\n    x16 = palette(x15)\n    x17 = contained(x16, x13)\n    x18 = height(x15)\n    x19 = trim(x15)\n    x20 = palette(x19)\n    x21 = contained(x20, x10)\n    x22 = height(x7)\n    x23 = divide(x22, x18)\n    x24 = increment(x23)\n    x25 = width(x7)\n    x26 = divide(x25, x19)\n    x27 = increment(x26)\n    x28 = repeat(x24, x27)\n    x29 = shift(x28, UNITY)\n    x30 = shift(x29, x24)\n    x31 = combine(x29, x30)\n    x32 = asindices(x29)\n    x33 = shape(x29)\n    x34 = outbox(x33)\n    x35 = remove(x34, x33)\n    x36 = lbind(adjacent, x32)\n    x37 = mfilter(x35, x36)\n    x38 = vmirror(x37)\n    x39 = invert(x38)\n    x40 = shift(x34, x39)\n    O = paint(x12, x40)\n    return O"], [1.0, "def solve_67c9f1ed(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_9570d2b8(I):\n    x1 = shape(I)\n    x2 = connect(ORIGIN, x1)\n    x3 = height(I)\n    x4 = halve(x3)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = ulcorner(x2)\n    x8 = lrcorner(x2)\n    x9 = shape(I)\n    x10 = maximum(x9)\n    x11 = double(DOWN)\n    x12 = multiply(x11, x10)\n    x13 = subgrid(x12, I)\n    x14 = interval(ZERO, x2, ONE)\n    x15 = merge(x14)\n    x16 = double(x13)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x15)\n    x19 = lbind(subtract, x56)\n    x20 = lbind(shift, x15)\n    x21 = mapply(x19, x20)\n    O = paint(x1, x21)\n    return O"], [1.0, "def solve_fdd6d693(I):\n    x1 = switch(I, FIVE, EIGHT)\n    x2 = switch(x1, FIVE, TWO)\n    x3 = objects(x2, T, F, T)\n    x4 = argmax(x3, size)\n    x5 = argmin(x3, size)\n    x6 = color(x4)\n    x7 = color(x5)\n    x8 = fill(x2, x6, x1)\n    O = fill(x8, x7, x4)\n    return O"], [1.0, "def solve_ee148566(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, shape)\n    x3 = compose(size, x1)\n    x4 = matcher(x3, TWO_BY_TWO)\n    x5 = dmirror(I)\n    x6 = papply(pair, x5, x1)\n    x7 = compose(size, dedupe)\n    x8 = matcher(x7, ONE)\n    x9 = dmirror(x8)\n    x10 = papply(pair, x9, x1)\n    x11 = compose(size, dedupe)\n    x12 = matcher(x11, ONE)\n    x13 = fork(both, x4, x12)\n    x14 = fork(both, x7, x13)\n    x15 = fork(astuple, x14, x405)\n    x16 = argmax(x6, x15)\n    x17 = mostcolor(x16)\n    x18 = x16(I)\n    x19 = objects(x18, T, F, F)\n    x20 = colorfilter(x19, ZERO)\n    x21 = rbind(bordering, I)\n    x22 = compose(flip, x21)\n    x23 = mfilter(x20, x22)\n    O = fill(x18, ONE, x23)\n    return O"], [1.0, "def solve_52cf2d5c(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_60451d2d(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = first(x32)\n    x34 = shape(I)\n    x35 = halve(x34)\n    x36 = canvas(x11, x35)\n    O = fill(x36, x10, x33)\n    return O"], [1.0, "def solve_6067f714(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_16d93893(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f421382c(I):\n    x1 = papply(d687, x2, x3)\n    x2 = compose(d07, numcolors)\n    x3 = fork(equality, x2, x3)\n    x4 = sfilter(x1, x3)\n    x5 = compose(flip, x4)\n    x6 = argmin(x4, size)\n    x7 = argmax(x4, size)\n    x8 = x5(x6)\n    x9 = x5(x7)\n    x10 = fill(I, ONE, x8)\n    O = fill(x10, TWO, x9)\n    return O"], [1.0, "def solve_463c6181(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_237402ad(I):\n    x1 = lbind(ofcolor, I)\n    x2 = compose(positive, size)\n    x3 = lbind(intersection, x2)\n    x4 = chain(positive, size, x3)\n    x5 = chain(x2, x4, dmirror)\n    x6 = objects(I, T, F, T)\n    x7 = merge(x6)\n    x8 = shift(x7, DOWN)\n    x9 = fill(I, ZERO, x8)\n    x10 = shift(x8, x5)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x2)\n    O = paint(x9, x12)\n    return O"], [1.0, "def solve_2b328405(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = color(x4)\n    x6 = palette(I)\n    x7 = remove(x5, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = toindices(x4)\n    x11 = apply(first, x10)\n    x12 = toindices(x4)\n    x13 = apply(last, x12)\n    x14 = rbind(contained, x11)\n    x15 = compose(x14, first)\n    x16 = rbind(contained, x13)\n    x17 = compose(x16, last)\n    x18 = fork(either, x15, x17)\n    x19 = ofcolor(I, x9)\n    x20 = sfilter(x19, x18)\n    x21 = rbind(gravitate, x4)\n    x22 = compose(x21, initset)\n    x23 = fork(add, identity, x22)\n    x24 = fork(connect, identity, x23)\n    x25 = mapply(x24, x20)\n    O = fill(I, x9, x25)\n    return O"], [1.0, "def solve_88fc14a0(I):\n    x1 = frontiers(I)\n    x2 = colorfilter(x1, ZERO)\n    x3 = ofcolor(I, ONE)\n    x4 = difference(x1, x2)\n    x5 = mapply(toindices, x4)\n    x6 = difference(x3, x5)\n    x7 = fill(I, NEG_ONE, x5)\n    x8 = fill(x7, NEG_ONE, x6)\n    x9 = lbind(fork, subtract)\n    x10 = lbind(x9, positive)\n    x11 = lbind(x10, size)\n    x12 = rbind(intersection, x2)\n    x13 = chain(x11, x12, toindices)\n    x14 = compose(size, x13)\n    x15 = compose(x10, size)\n    x16 = lbind(lbind, intersection)\n    x17 = compose(x16, x13)\n    x18 = lbind(extract, x5)\n    x19 = fork(compose, x17, x18)\n    x20 = lbind(sfilter, x6)\n    x21 = chain(merge, x20, x19)\n    x22 = lbind(fork, recolor)\n    x23 = lbind(x22, color)\n    x24 = rbind(mapply, x23)\n    x25 = lbind(chain, x24)\n    x26 = lbind(rbind, occurrences)\n    x27 = chain(x25, x26, toindices)\n    x28 = lbind(lbind, combine)\n    x29 = chain(x27, x28, x27)\n    x30 = lbind(mapply, x25)\n    x31 = chain(x29, x30, x27)\n    x32 = fork(ofcolor, x21, x13)\n    x33 = fork(recolor, x25, x31)\n    x34 = mapply(x33, x6)\n    O = paint(x16, x34)\n    return O"], [1.0, "def solve_63363095(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_63ad581b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = Feca(TWO)\n    x4 = connect(ORIGIN, x3)\n    x5 = positive(x2)\n    x6 = asindices(I)\n    x7 = UNITY(x6)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = rbind(shoot, DOWN)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x8)\n    O = paint(I, x11)\n    return O"], [1.0, "def solve_3f1d6f48(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_32bd0f64(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_747e3a4d(I):\n    x1 = lbind(colorcount, I)\n    x2 = compose(maximum, x1)\n    x3 = apply(x2, I)\n    x4 = minimum(x3)\n    x5 = astuple(ONE, x4)\n    x6 = astuple(TWO, x4)\n    x7 = canvas(x2, x5)\n    x8 = initset(x7)\n    x9 = recolor(ZERO, x8)\n    O = upscale(x9, TWO)\n    return O"], [1.0, "def solve_bda7b226(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = apply(color, x2)\n    x4 = rbind(canvas, UNITY)\n    x5 = apply(x4, x3)\n    x6 = merge(x5)\n    O = hmirror(x6)\n    return O"], [1.0, "def solve_9da74771(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 = ofcolor(x13, x12)\n    x15 = shift(x14, UNITY)\n    x16 = ofcolor(x8, x12)\n    x17 = difference(x16, x15)\n    x18 = compose(first, first)\n    x19 = compose(first, last)\n    x20 = fork(equality, x18, x19)\n    x21 = compose(last, first)\n    x22 = compose(last, last)\n    x23 = fork(equality, x21, x22)\n    x24 = fork(either, x20, x23)\n    x25 = product(x15, x17)\n    x26 = sfilter(x25, x24)\n    x27 = fork(connect, first, last)\n    x28 = mapply(x27, x26)\n    O = fill(x8, x12, x28)\n    return O"], [1.0, "def solve_739291b5(I):\n    x1 = shape(I)\n    x2 = index(I, ORIGIN)\n    x3 = decrement(x1)\n    x4 = upscale(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = argmin(x5, size)\n    x7 = cover(I, x6)\n    x8 = normalize(x6)\n    x9 = paint(x7, x8)\n    x10 = objects(x9, F, F, T)\n    x11 = argmin(x10, size)\n    x12 = multiply(x11, LEFT)\n    x13 = add(x12, x11)\n    x14 = canvas(x2, x13)\n    x15 = normalize(x11)\n    x16 = lbind(remove, last)\n    x17 = rbind(s6666, x16)\n    x18 = compose(x17, center)\n    x19 = rbind( webpagepply, x13)\n    x20 = compose(x19, center)\n    x21 = fork(combine, x18, x20)\n    x22 = rbind(occurrences, x14)\n    x23 = chain(positive, size, x22)\n    x24 = rbind(sfilter, x23)\n    x25 = chain(dmirror, x24, x21)\n    x26 = chain(cmirror, x25, x21)\n    x27 = fork(combine, x26, x25)\n    x28 = apply(x27, x10)\n    x29 = dmirror(x28)\n    x30 = apply(x27, x29)\n    x31 = x17(x30)\n    x32 = x16(x31)\n    x33 = x25(x32)\n    x34 = shift(x33, UNITY)\n    x35 = paint(x9, x34)\n    O = x30(x35)\n    return O"], [1.0, "def solve_ed6bc6a5(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_7d83299b(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolors(x14)\n    x25 = difference(x23, x24)\n    x26 = mapply(x22, x25)\n    O = fill(x14, x13, x26)\n    return O"], [1.0, "def solve_e468e763(I):\n    x1 = vmirror(I)\n    O = hconcat(I, x1)\n    return O"], [1.0, "def solve_5fdd3418(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f474d964(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_98c63976(I):\n    x1 = shape(I)\n    x2 = add(x1, TWO)\n    x3 = increment(x2)\n    x4 = asobject(I)\n    x5 = shift(x4, x3)\n    x6 = objects(I, T, F, F)\n    x7 = vperiod(x6)\n    x8 =toivec(x7)\n    x9 = add(x8, NEG_ONE)\n    x10 = interval(ZERO, x9, ONE)\n    x11 = apply(tojvec, x10)\n    x12 = apply(numcolors, x11)\n    x13 = matcher(equality, ONE)\n    x14 = partition(I)\n    x15 = sfilter(x14, x13)\n    x16 = difference(x14, x15)\n    x17 = merge(x16)\n    x18 = cover(I, x17)\n    x19 = lbind(compose, flip)\n    x20 = lbind(matcher, first)\n    x21 = chain(x19, x20, mostcolor)\n    x22 = fork(19, identity, x21)\n    x23 = lbind(compose, flip)\n    x24 = lbind(matcher, first)\n    x25 = chain(x23, x24, x22)\n    x26 = fork(argmin, x22, x25)\n    x27 = fork(00000000, x26, x20)\n    x28 = mapply(x27, x18)\n    O = paint(x18, x28)\n    return O"], [1.0, "def solve_d3463493(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = objects(I, T, F, F)\n    x4 = sfilter(x3, x2)\n    x5 = fork(equality, toindices, box)\n    x6 = sfilter(x4, x5)\n    x7 = totuple(x6)\n    x8 = apply(color, x7)\n    x9 = leastcommon(x8)\n    x10 = ofcolor(I, x9)\n    x11 = inbox(x10)\n    x12 = recolor(ZERO, x11)\n    x13 = occurrences(I, x12)\n    x14 = normalize(x10)\n    x15 = shift(x14, NEG_UNITY)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = fill(I, x9, x17)\n    return O"], [1.0, "def solve_88014b3c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_99b28621(I):\n    x1 = shape(I)\n    x2 = decrement(x1)\n    O = connect(ORIGIN, x2)\n    return O"], [1.0, "def solve_fa985f5f(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_0a471b0c(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(add, x3)\n    x21 = rbind(insert, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(insert, x22, x21)\n    x24 = size(x1)\n    x25 = positive(x24)\n    x26 = size(x26)\n    x27 = increment(x25)\n    x28 = interval(ZERO, x27, ONE)\n    x29 = apply(tojvec, x28)\n    x30 = apply(23, x29)\n    x31 = mpapply(shift, x30, x22)\n    x32 = mapply(toivec, x31)\n    x33 = shift(x23, x32)\n    x34 = canvas(x11, x33)\n    x35 = paint(x34, x3)\n    O = x9(x35)\n    return O"], [1.0, "def solve_7d66dc70(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_9e50dc8b(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_3362ae76(I):\n    x1 = leastalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = objects(x3, T, F, T)\n    x5 = merge(x4)\n    O = paint(x1, x5)\n    return O"], [1.0, "def solve_9cb17147(I):\n    x1 = ofcolor(I, EIGHT)\n    x2 = dneighbors(UNITY)\n    x3 = insert(UNITY, x2)\n    x4 = lrcorner(x3)\n    x5 = halve(x4)\n    x6 = shoot(x4, UP_RIGHT)\n    x7 = intersection(x5, x6)\n    O = fill(I, THREE, x7)\n    return O"], [1.0, "def solve_bc02fed4(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_db308579(I):\n    x1 = lbind(contained, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(multiply, x4)\n    x6 = apply(x5, x3)\n    x7 = astuple(NINE, NINE)\n    x8 = canvas(ZERO, x7)\n    x9 = asindices(x8)\n    x10 = shift(x9, x8)\n    x11 = paint(x8, x10)\n    x12 = repeat(x11, ONE)\n    x13 = asindices(x8)\n    x14 = center(x13)\n    x15 = invert(x14)\n    x16 = shift(x13, x15)\n    x17 = apply(x5, x16)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = product(x20, x20)\n    x22 = fork(compose, first, last)\n    x23 = apply(x22, x21)\n    x24 = product(x23, x23)\n    x25 = fork(compose, FIVE, flip)\n    x26 = apply(x25, x24)\n    x27 = mapply(box, x26)\n    O = fill(x8, x17, x27)\n    return O"], [1.0, "def solve_f5574119(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = compose(center, x3)\n    x5 = compose(dneighbors, x4)\n    x6 = fork(difference, x5, x4)\n    x7 = compose(first, x6)\n    x8 = chain(x4, x7, x8)\n    x9 = fork(recolor, x8, x4)\n    x10 = mapply(x9, x6)\n    O = paint(I, x10)\n    return O"], [1.0, "def solve_5fab8a3f(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d8afbcfe(I):\n    x1 = replace(I, FOUR, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(color, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(F25, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(subtract, x8)\n    x11 = compose(x9, x10)\n    x12 = chain(outbox, outbox, initset)\n    x13 = corners(x6)\n    x14 = mapply(x12, x13)\n    x15 = difference(x7, x14)\n    x16 = inbox(x7)\n    x17 = sfilter(x16, x11)\n    x18 = combine(x15, x17)\n    x19 = fill(x5, ONE, x18)\n    x20 = objects(x19, T, F, T)\n    x21 = apply(toindices, x20)\n    x22 = lbind(matcher, normalize)\n    x23 = lbind(extract, x21)\n    x24 = chain(ulcorner, x23, x22)\n    x25 = compose(x24, toindices)\n    x26 = fork(shift, identity, x25)\n    x27 = mapply(x26, x3)\n    O = paint(x5, x27)\n    return O"], [1.0, "def solve_b55466a6(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(difference, x2)\n    O = fill(I, ZERO, x3)\n    return O"], [1.1, "def solve_9bbba443(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, FOUR)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, FOUR)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = astuple(x30, x31)\n    x33 = maximum(x32)\n    x34 = hperiod(x22)\n    x35 = hperiod(x26)\n    x36 = interval(x33, x34, ONE)\n    x37 = matcher(x35, x36)\n    x38 = astuple(x33, x37)\n    x39 = lbind(x astuple, x38)\n    x40 = lbind(compose, flip)\n    x41 = lbind(matcher, first)\n    x42 = chain(x39, x"], [1.1, "def solve_0b5463cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d963864a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x"], [1.1, "def solve_839a928e(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_f943f05d(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = vsplit(I, TWO)\n    x4 = hsplit(I, TWO)\n    x5 = astuple(x3, x4)\n    x6 = intersection(x5, x2)\n    x7 = argmax(x6, size)\n    x8 = matcher(x4, x7)\n    x9 = sfilter(x1, x8)\n    x10 = compose(color, first)\n    x11 = fork(recolor, x10, x9)\n    x12 = rbind(sfilter, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(paint, identity, x13)\n    x15 = toindices(x9)\n    x16 = fgpartition(I)\n    x17 = merge(x16)\n    x18 = normalize(x17)\n    x19 = SEVEN(x18)\n    x20 = initset(x19)\n    x21 = insert(x7, x20)\n    x22 = product(x21, x19)\n    x23 = EIGHT(x22)\n    x24 = ofcolor(x23, x10)\n    x25 = inbox(x24)\n    x26 = difference(x25, x24)\n    x27 = fill(x23, x10, x26)\n    x28 = NEG_UNITY(x27)\n    x29 = initset(x28)\n    x30 = recolor(x24, x29)\n    x31 = fill(x27, x10, x30)\n    x32 = ofcolor(x31, x10)\n    x33 = ulcorner(x2)\n    x34 = shift(x32, x33)\n    x35 = lrcorner(x322)\n    x36 = shift(x34, x35)\n    x37 = fill(x31, x10, x36)\n    x38 = ofcolor(x37, x10)\n    x39 = sizefilter(x38, ONE)\n    x"], [1.1, "def solve_779f532a(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_54b92419(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_8d7b81ff(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = decrement(x17)\n    x19 = mapply(x16, x x18)\n    x20 = intersection(x4, x4)\n    x21 = combine(x16, x20)\n    x22 = fill(x3, ZERO, x21)\n    x23 = astuple(x18, x19)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = lbind(shift, x25)\n    x27 = height(x3)\n    x28 = decrement(x27)\n    x29 =mapply(x26, x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    x32 = asindices(x31)\n    x33 = lbind(shift, x32)\n    x34 = ofcolor(x33, ZERO)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = objects(x38, T, T, T)\n    x38 = insert(x37, x37)\n    x39 = add(x37, THREE)\n    x40 = asindices(x39)\n    "], [1.1, "def solve_0210594b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = rbind(ofcolor, ZERO)\n    x2 = compose(lowermost, x1)\n    x3 = compose(rightmost, x1)\n    x4 = fork(equality, x2, x3)\n    x5 = compose(toivec, x4)\n    x6 = lbind(apply, initset)\n    x7 = compose(x6,666404)\n    x8 = fork(inter260, x5, x7)\n    x9 = compose(rot90, x8)\n    x10 = compose(rot180, x8)\n    x11 = compose(rot270, x8)\n    x12 = fork(equality, x9, x11)\n    x13 = fork(either, x10, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(14, x8)\n    x16 = fork(compose, x13, x15)\n    x17 = width(I)\n    x18 = height(I)\n    x19 =596(I)\n    x20 = decrement(x18)\n    x21 = lbind(astuple, x20)\n    x22 = chain(increment, x21, x16)\n    x23 = fork(greater, x26, x22)\n    x24 = compose(x23, x14)\n    x25 = sfilter(x19, x24)\n    x26 = lbind(apply, initset)\n    x27 = compose(x26, last)\n    x28 = fork(compose, x24, x27)\n    x29 = fork(rapply, x28, x26)\n    x30 = compose(initset, x29)\n    x31 = fork(rapply, x30, x25)\n    x32 = compose(first, x31)\n    x33 = fork(remove, x32, last)\n    x34 = fork(astuple, x40, x33)\n    x35 = size(x1)\n    x36 = power(x34, x35)\n    x37 = astuple(x36, x333)\n    x38 = x34(I)\n"], [1.1, "def solve_3ff06587(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x66)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_d7837f2c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(bordering, I)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = totuple(x3)\n    x5 = apply(color, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(color, x1)\n    x8 = totuple(x3)\n    x9 = apply(color, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, x1)\n    x12 = repeat(x10, ONE)\n    x13 = x11(x12)\n    x14 = x11(x4)\n    x15 = x11(x14)\n    x16 = x11(x13)\n    x17 = x11(x16)\n    x18 = apply(leftmost, x15)\n    x19 = leftmost(x18)\n    x20 = subtract(x19, x18)\n    x21 = double(x20)\n    x22 = astuple(THREE, x21)\n    x23 = repeat(x22, ONE)\n    x24 = merge(x23)\n    x25 = dmirror(x24)\n    x26 = astuple(x25, x24)\n    x27 = combine(x26, x23)\n    x28 = multiply(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = astuple(x26, x29)\n    x31 = dmirror(x30)\n    x32 = combine(x30, x31)\n    x33 = combine(x28, x32)\n    x34 = recolor(x25, x33)\n    x35 = mostcolor(I)\n    x36 = x35(x4)\n    x37 = paint(x16, x36)\n    x38 = paint(x37, x34)\n    x39 = height(x38)\n    x40 = width(x38)\n    x41 = astuple(x39, x40)\n    x42 = crop(x38, ORIGIN, x41)\n    x43 ="], [1.1, "def solve_cb8a8a34(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(raindices, x24)\n    x26 = chain(x20, x25, last)\n    x27 = fork(compose, x26, x22)\n    x28 = chain(x16, x27, x6)\n    x29 = rbind(contained, x5)\n    x30 = chain(x29, first, last)\n    x31 = compose(x27, x30)\n    x32 = chain(x16, x27, x6)\n    x33 = fork(contained(x32, x31)\n    x34 = fork(1997, x33, x28)\n    x35 = fork(59eb, x24, x28)\n"], [1.1, "def solve_0275d5bf(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x29, last)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine,"], [1.1, "def solve_653cf0fd(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_0aaf94f3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_91125bee(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(dmirror, x6)\n    x11 = astuple(cmirror, x9)\n    x12 = initset(x11)\n    x13 = insert(x10, x12)\n    x14 = product(x1, x13)\n    x15 = asobject(I)\n    x16 = lbind(sfilter, x15)\n    x17 = lbind(compose, flip)\n    x18 = lbind(matcher, first)\n    x19 = chain(x16, x17, x18)\n    x20 = lbind(paint, I)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = lbind(fork, equality)\n    x24 = rbind(x23, identity)\n    x25 = compose(x19, first)\n    x26 = compose(x24, x22)\n    x27 = compose(initset, x22)\n    x28 = fork(rapply, x27, x25)\n    x29 = compose(first, x28)\n    x30 = compose(x20, x29)\n    x31 = fork(paint, x30, x21)\n    x32 = compose(initset, x26)\n    x33 = fork(rapply, x32, x31)\n    x34 = compose(first, x33)\n    x35 = sfilter(x14, x34)\n    x36 = lbind(colorcount, I)\n    x37 = compose(x36, first)\n    x38 = argmin(x35, x37)\n    x39 = first(x38)\n    x40"], [1.1, "def solve_bb312312(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ORIGIN)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = merge(x5)\n    x7 = chain(x1, positive, dmirror)\n    x8 = astuple(ONE, x6)\n    x9 = canvas(ONE, x8)\n    x10 = astuple(ONE, x7)\n    x11 = mostcolor(I)\n    x12 = initset(x9)\n    x13 = insert(x11, x12)\n    x14 = backdrop(x13)\n    x15 = toobject(x14, I)\n    x16 = matcher(first, x11)\n    x17 = compose(flip, x16)\n    x18 = sfilter(x15, x17)\n    x19 = hmirror(x18)\n    x20 = vmirror(x19)\n    x21 = dmirror(x20)\n    x22 = ofcolor(x20, x11)\n    x23 = compose(palette, last)\n    x24 = rbind(remove, x23)\n    x25 = chain(x24, remove, first)\n    x26 = ofcolor(x20, x26)\n    x27 = rightmost(x26)\n    x28 = leftmost(x26)\n    x29 = ofcolor(x20, x13)\n    x30 = leftmost(x29)\n    x31 = greater(x27, x30)\n    x32 = ofcolor(x20, x15)\n    x33 = leftmost(x31)\n    x34 = rightmost(x31)\n    x35 = astuple(x32, x34)\n    x36 = astuple(x32, x35)\n    x37 = greater(x33, x36)\n    x38 = rightmost(x33)\n    x39 = leftmost(x33)\n    x40 = subtract(x38, x39)\n    x41 = astuple(x37"], [1.1, "def solve_51e10f6a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(first, x34)\n    x38 = portrait(x37)\n    x39 = branch(x38, x35, x34)\n    x40 = branch(x38, x35, x34)\n    x"], [1.1, "def solve_88f1239a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2136be83(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x04, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_1e260436(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = matcher(identity, ZERO)\n    x3 = rbind(sfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmax(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = fork(4000,0100, vmirror)\n    x8 = rbind(sfilter, x6)\n    x9 = compose(size, x8)\n    x10 = matcher(x9, ONE)\n    x11 = fork(both, x7, x10)\n    x12 =11(I)\n    x13 =\n    x14 = extract(x12, x11)\n    x15 = first(x13)\n    x16 = last(x13)\n    x17 = palette(x15)\n    x18 = equality(x17, x12)\n    x19 =457(x15)\n    x20 = repeat(x16, x19)\n    x21 =057(x20, UNITY)\n    x22 =457(x21)\n    x23 = asindices(x22)\n    x24 = ofcolor(x12, ZERO)\n    x25 = ofcolor(x12, x16)\n    x26 = intersection(x24, x25)\n    x27 = outbox(x13)\n    x28 = difference(x27, x26)\n    x29 = subgrid(x28, x12)\n    x30 = intersection(x23, x26)\n    x31 = outbox(x30)\n    x32 = frontiers(x31)\n    x33 = mapply(toindices, x32)\n    x34 = difference(x33, x30)\n    x35 = toobject(x34, x69)\n    x36 = objects(x12, T, F, T)\n    x37 = rbind(colorcount, x12)\n    x38 = argmax(x36, x37)\n    x39 = rbind(colorcount, x12)\n    x40 = apply(x19, x2)\n    x41 = remove(x38, x40"], [1.1, "def solve_36c0f792(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = product(x6, x6)\n    x8 = compose(color, first)\n    x9 = compose(color, last)\n    x10 = fork(equality, x8, x9)\n    x11 = sfilter(x7, x10)\n    x12 = compose(leftmost, first)\n    x13 = compose(leftmost, last)\n    x14 = fork(equality, x12, x13)\n    x15 = compose(uppermost, first)\n    x16 = compose(uppermost, last)\n    x17 = fork(equality, x15, x16)\n    x18 = fork(either, x14, x17)\n    x19 = sfilter(x11, x18)\n    x20 = compose(color, first)\n    x21 = compose(center, first)\n    x22 = compose(center, last)\n    x23 = fork(connect, x21, x22)\n    x24 = fork(recolor, x20, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = matcher(last, ZERO)\n    x28 = decrement(x26)\n    x29 = matcher(last, x28)\n    x30 = fork(either, x27, x29)\n    x31 = matcher(first, ZERO)\n    x32 = decrement(x25)\n    x33 = matcher(first, x32)\n    x34 = fork(either, x31, x33)\n    x35 = toindices(x5)\n    x36 = sfilter(x35, x30)\n    x37 = equality(x35, x36)\n    x38 = mapply(x24, x19)\n    x39 = paint(I, x38)\n    x40 = branch(x37, x30, x34)\n    "], [1.1, "def solve_8bdb17e6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(colorcount, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(colorcount, x9)\n    x23 = apply(x22, x19)\n    x24 = pair(x21, x23)\n    x25 = fork(divide, first, last)\n    x26 = apply(x25, x24)\n    x27 = mostcommon(x26)\n    x28 = lbind(colorcount, x16)\n    x29 = lbind(colorcount, x9)\n    x30 = fork(divide, x28, x29)\n    x31 = matcher(x30, x27)\n    x32 = palette(x9)\n    x33 = sfilter(x32, x31)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, first)\n    x36 = sfilter(x16, x35)\n    x37 = sfilter(x9, x35)\n    x38 = height(x36)\n    x39 = height(x37)\n    x40 = divide(x38, x39)\n    x41 = width(x36)\n    x42"], [1.1, "def solve_093a9904(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_48ebe9ca(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmax(x4, size)\n    x6 = center(x5)\n    x7 = rbind(shoot, x6)\n    x8 = center(x2)\n    x9 = rbind(shoot, x8)\n    x10 = center(x5)\n    x11 = rbind(shoot, x10)\n    x12 = decrement(x1)\n    x13 = tojvec(x12)\n    x14 = rbind(shoot, x13)\n    x15 = decrement(x2)\n    x16 = astuple(x12, x15)\n    x17 = double(x16)\n    x18 = shoot(x11, x17)\n    x19 = shoot(x6, x18)\n    x20 = combine(x17, x19)\n    x21 = center(x2)\n    x22 = invert(x21)\n    x23 = power(x22, TWO)\n    x24 = asindices(x23)\n    x25 = lbind(shift, x24)\n    x26 = lbind(multiply, x25)\n    x27 = apply(x26, x3)\n    x28 = mapply(x27, x27)\n    x29 = mapply(x28, x25)\n    x30 = paint(I, x29)\n    x31 = objects(x30, F, T, T)\n    x32 = argmax(x31, numcolors)\n    x33 = subgrid(x32, x30)\n    x34 = interval(ONE, SIX, ONE)\n    x35 = lbind(power, rot90)\n    x36 = lbind(power, outbox)\n    x37 = chain(x35, x36, x000)\n    x38 = apply(x37, x34)\n    x39 = lbind(dedupe, x38)\n    x40 = lbind(chain, x39)\n"], [1.1, "def solve_d964881b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, ZERO)\n    x2 = rbind(colorcount, ZERO)\n    x3 = matcher(x2, ZERO)\n    x4 = lbind(toobject, x1)\n    x5 = matcher(x4, x3)\n    x6 = compose(x5, dneighbors)\n    x7 = compose(x6, last)\n    x8 = ofcolor(I, ONE)\n    x9 = rbind(contained, x8)\n    x10 = lbind(rbind,adjacent)\n    x11 = compose(x10, initset)\n    x12 = chain(x11, x9, last)\n    x13 = sfilter(x5, x12)\n    x14 = fill(I, ZERO, x13)\n    x15 = ZERO(x5)\n    x16 = gravitate(x15, x14)\n    x17 = replace(x16, ONE, x15)\n    x18 = trim(x17)\n    x19 = x15(x18)\n    x20 = x12(x19)\n    x21 = apply(first, x20)\n    x22 = asobject(x21)\n    x23 = apply(first, x22)\n    x24 =mapply(dneighbors, x23)\n    x25 = mapply(toobject, x24)\n    x26 = cultural verb25(x25)\n    x27 = mostcolor(I)\n    x28 = ofcolor(x25, x27)\n    x29 = asindices(x28)\n    x30 = box(x29)\n    x31 = difference(x30, x28)\n    x32 = toobject(x31, x25)\n    x33 = apply(position, x32)\n    x34 = shift(x30, x33)\n    x35 = ofcolor(x26, x27)\n    x36 = recolor(x27, x34)\n    x37 = shift(x45, x36)\n    x38 = ofcolor(x28, x27)\n    x39 = mapply(toindices, x38)\n    x40"], [1.1, "def solve_55c9016a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =799(I)\n    x2 = Fgpartition(x1)\n    x3 = merge(x2)\n    x4 = toindices(x3)\n    x5 = compose(double, halve)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x4, x7)\n    x9 = fill(x1, portrait, x8)\n    x10 = branch(x00000, identity, rot90)\n    x11 = fork(even, branch, rot180)\n    x12 = compose(flip, x11)\n    x13 = rbind(sfilter, x12)\n    x14 = rbind(rapply, I)\n    x15 = compose(initset, x13)\n    x16 = chain(first, x14, x15)\n    x17 = rbind(branch, I)\n    x18 = rbind(x17, x16)\n    x19 = chain(initset, x18, x16)\n    x20 = fork(rapply, x19, x16)\n    x21 = compose(initset, x12)\n    x22 = fork(rapply, x21, x16)\n    x23 = compose(initset, x12)\n    x24 = fork(rapply, x23, x16)\n    x25 = compose(dmirror, x24)\n    x26 = power(x25, TWO)\n    x27 = x26(x22)\n    x28 = first(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, UNITY)\n    x31 = branch(x29, x30, x22)\n    x32 = initset(x15)\n    x33 = NEG_ONE(x32)\n    x34 = shift(x33, x33)\n    x35 = branch(x33, x24, x28)\n    x36 = interval(x35, ONE, x153)\n    x37 = pair(x36, x34)\n    x38 = fork(multiply,"], [1.1, "def solve_5e4fa839(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = positive(x1)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multiply, x27)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(comb"], [1.1, "def solve_206a4c7d(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(x1, first)\n    x3 = rbind(compose, last)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = fork(sfilter, identity, x5)\n    x7 = compose(center, first)\n    x8 = compose(center, last)\n    x9 = fork(subtract, x7, x8)\n    x10 = fork(multiply, x7, x5)\n    x11 = fork(add, x8, x10)\n    x12 = compose(halve, x11)\n    x13 = fork( interval, tojvec, x12)\n    x14 = compose(x13, x7)\n    x15 = fork(multiply, x5, THREE)\n    x16 = fork(add, x14, x15)\n    x17 = fork( tojvec, x12, x16)\n    x18 = fork(apply, x17, x14)\n    x19 = fork(apply, x18, x16)\n    x20 =     dimensional_trial)\n    x21 = lbind(ofcolor, I)\n    x22 = palette(I)\n    x23 = compose(x21, x22)\n    x24 = argmax(x22, x23)\n    x25 = fork(subtract, label, x24)\n    x26 = decrement(x25)\n    x27 = toivec(x26)\n    x28 = shoot(x27, UNITY)\n    x29 = fgpartition(I)\n    x30 = merge(x29)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, leftmost)\n    x33 = fork(subtract, rbind, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x28)\n    x36 = fill(I, x24, x35)\n    x37 = fill(x36, x24, x1)\n    x38 = fill("], [1.1, "def solve_427d4a8b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 =ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_60af70bc(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x33 = sfilter(x38, x33)\n    x34 = apply(first, x33"], [1.1, "def solve_c92c4acd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = compose(maximum, shape)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = repeat(x24, ONE)\n    x26 = combine(x3, x25)\n    x27 = paint(x16, x26)\n    x28 = astuple(vmirror, hmirror)\n    x29 = astuple(hmirror, vmirror)\n    x30 = canvas(x8, x28)\n    x31 = asindices(x30)\n    x32 = combine(x29, x31)\n    x33 = subtract(NINE, x32)\n    x34 = astuple(VEN, x33)\n    x35 = astuple(cmirror, dmirror)\n    x36 = astuple(hmirror, vmirror)\n    x37 = combine(x35, x36)\n    x38 = astuple(x334, x000000)\n    x39 = astuple(x380, cmirror)\n    x40 = combine(x38, x39)\n    x41 = fill(x37"], [1.1, "def solve_9b0f28c5(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivecfac9412)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_28d3e048(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_69236ba2(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_dda02bbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_969594f8(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x61, TWO)\n    x37 = lbind(colorcount, x23)\n    x38 = argmax(x36, x37)\n    x39 = ofcolor(x23, x28)\n    "], [1.1, "def solve_b5d0cad0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = initset(ORIGIN)\n    x2 = difference(x1, x1)\n    x3 = power(first, TWO)\n    x4 = first(x2)\n    x5 = lbind(c8f9)\n    x6 = lbind(eb281, x4)\n    x7 = lbind(lbind, shift)\n    x8 = compose(x5, x7)\n    x9 = lbind(rbind, shift)\n    x10 = compose(x9, x8)\n    x11 = fork(compose, x7, x10)\n    x12 = lbind( solve, x4)\n    x13 = compose(x12, x11)\n    x14 = fork(sfilter, identity, x13)\n    x15 = fork(difference, identity, x14)\n    x16 = lbind(rbind, intersection)\n    x17 = compose(x16, x15)\n    x18 = fork(compose, x17, x15)\n    x19 = fork(lbind, x17, x18)\n    x20 = compose(x17, x19)\n    x21 = fork(rot90, x20, x19)\n    x22 = power(x21, FOUR)\n    x23 = x22(I)\n    x24 = fork(rot180, x22, x19)\n    x25 = power(x24, FOUR)\n    x26 = x25(x23)\n    x27 = x25(x22)\n    x28 = fork(rot180, x26, x27)\n    x29 = fork(mapply, x28, x26)\n    x30 = compose(x29, x21)\n    x31 = fork(paint, identity, x30)\n    x32 = x31(x9)\n    x33 = objects(x32, T, F, F)\n    x34 = colorfilter(x33, TWO)\n    x35 = first(x34)\n    x36 = lbind(adjacent, x35)\n    x37 =x36(x36)\n    x38 = fgpartition(x32)\n    x39 = merge("], [1.1, "def solve_7d467376(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_c8269178(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = ONE(I)\n    x2 = increment(TWO)\n    x3 = increment(x2)\n    x4 = astuple(x3, x3)\n    x5 = astuple(THREE, ORIGIN)\n    x6 = astuple(THREE, ZERO_BY_TWO)\n    x7 = crop(x5, ORIGIN, x6)\n    x8 = crop(x3, ZERO_BY_TWO)\n    x9 = Zconcat(x7, x8)\n    x10 = hconcat(x9, x7)\n    x11 = hconcat(x10, x8)\n    x12 = vconcat(x11, x11)\n    x13 = vconcat(x12, x12)\n    x14 = hconcat(x13, x11)\n    x15 = hconcat(x14, x10)\n    x16 = vconcat(x15, x11)\n    x17 = vconcat(x16, x10)\n    x18 = cellwise(x17, x9,x1)\n    x19 = asobject(x18)\n    x20 = mostcolor(I)\n    x21 = matcher(first, x20)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x19, x22)\n    x24 = apply(initset, x23)\n    x25 = sfilter(x24, x4)\n    x26 = frontiers(I)\n    x27 = sfilter(x26, x22)\n    x28 = size(x27)\n    x29 = positive(x28)\n    x30 = branch(x29, identity, dmirror)\n    x31 = x30(I)\n    x32 = lefthalf(x31)\n    x33 = righthalf(x31)\n    x34 = vmirror(x33)\n    x35 = vmirror(x34)\n    x36 = shape(x35)\n    x37 = multiply(x36, x36)\n    x38 = add(x37, ZERO)\n    x39 = canvas(x"], [1.1, "def solve_f41f0c20(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(add, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_a39a19c6(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_533b4fa0(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(I, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = mapply(vfrontier, x5)\n    x7 = mapply(hfrontier, x5)\n    x8 = uppermost(x7)\n    x9 = leftmost(x7)\n    x10 = greater(x8, x9)\n    x11 = uppermost(x7)\n    x12 = greater(x8, x11)\n    x13 = either(x10, x12)\n    x14 = branch(x13, identity, vmirror)\n    x15 = x14(I)\n    x16 = center(x15)\n    x17 = hfrontier(x16)\n    x18 = add(x16, x17)\n    x19 = shift(x18, x16)\n    x20 = x14(x19)\n    x21 = palette(x20)\n    x22 = remove(ZERO, x21)\n    x23 = other(x22, x12)\n    x24 = ofcolor(x20, x23)\n    x25 = mapply(neighbors, x24)\n    x26 = difference(x25, x24)\n    x27 = toobject(x26, x50)\n    x28 = add(x25, x27)\n    x29 = shift(x28, x27)\n    x30 = fill(x5, x23, x29)\n    x31 =bordering(x30)\n    x32 =3333(x31, x30)\n    x33 = fork(both, x24, x32)\n    x34 = extract(x28, x33)\n    x35 = other(x28, x34)\n    x36 = ofcolor(x20, x23)\n    x37 = initset(x36)\n    x38 = shift(x37, UNITY)\n    x39 = fill(x30, x23, x38)\n    x40 = shift"], [1.1, "def solve_4a4f5673(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_40ba5af8(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_1dad6357(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x31 = shape(I)\n    x32 = decrement(x31)\n    x33 = initset(x32)\n    x34 = insert(x19, x33)\n    x35 = astuple(x21, x26)\n    x36 = astuple(x31, x35)\n    x37 = combine(x35, x36)\n    x38 = lefthalf(I)\n    x39 = righthalf(I)\n    x40 = bottomhalf(x39)\n    x41 = mostcolor(x38)\n    "], [1.1, "def solve_a4429cb9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8a69493a(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, corners)\n    x3 = sfilter(x1, x2)\n    x4 = argmax(x3, size)\n    x5 = fgpartition(I)\n    x6 = merge(x5)\n    x7 = backdrop(x4)\n    x8 = toobject(x7, I)\n    x9 = difference(x6, x8)\n    x10 = mostcolor(I)\n    x11 = inbox(x4)\n    x12 = backdrop(x11)\n    x13 = toobject(x12, I)\n    x14 = matcher(first, x10)\n    x15 = compose(flip, x14)\n    x16 = sfilter(x13, x15)\n    x17 = subgrid(x9, I)\n    x18 = palette(x16)\n    x19 = order(x18, identity)\n    x20 = lbind(4258, x16)\n    x21 = apply(x20, x19)\n    x22 = lbind(4 fgpartition, x17)\n    x23 = merge(x22)\n    x24 =0000000(x23)\n    x25 = matcher(first, x10)\n    x26 = compose(flip, x25)\n    x27 = asindices(x16)\n    x28 = delta(x27)\n    x29 = lbind(fork, manhattan)\n    x30 = lbind(x29, identity)\n    x31 = lbind(compose, initset)\n    x32 = lbind(rbind, manhattan)\n    x33 = compose(x31, x32)\n    x34 = lbind(lbind, greater)\n    x35 = chain(x34, x33, x25)\n    x36 = compose(x36, x25)\n    x37 = fork(contained, x36, x40)\n    x38 = compose(x37, x27)\n    x39 = lbind(lbind,ANGEmatch)\n    x40 = chain(x39, x33, x33)\n    x41 = fork("], [1.1, "def solve_7540585f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract,x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_5835846c(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(difference, toindices, box)\n    x3 = compose(size, x2)\n    x4 = matcher(x3, ZERO)\n    x5 = rbind(add, FOUR)\n    x6 = chain(x5, double, width)\n    x7 = fork(equality, size, x6)\n    x8 = chain(x5, double, height)\n    x9 = fork(equality, size, x8)\n    x10 = fork(either, x7, x9)\n    x11 = fork(both, x4, x10)\n    x12 = extract(x1, x11)\n    x13 = toindices(x12)\n    x14 = center(x12)\n    x15 = vfrontier(x14)\n    x16 = intersection(x13, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = color(x12)\n    x22 = palette(I)\n    x23 = remove(x21, x22)\n    x24 = lbind(colorcount, I)\n    x25 = argmin(x23, x24)\n    x26 = other(x23, x25)\n    x27 = ofcolor(x20, x25)\n    x28 = ofcolor(x20, x21)\n    x29 = leftmost(x28)\n    x30 = lbind(greater, x29)\n    x31 = compose(x30, last)\n    x32 = sfilter(x27, x31)\n    x33 = difference(x27, x32)\n    x34 = vmirror(x32)\n    x35 = leftmost(x28)\n    x36 = leftmost(x32)\n    x37 = subtract(x35, x36)\n    x38 = add(TWO, x37)\n    x39 =TWO(x28)\n    x40 = x19(x39)\n    x41 = x16(x40)\n"], [1.1, "def solve_9af4a8be(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(colorcount, I)\n    x8 = argmin(x6, x7)\n    x9 = mostcolor(I)\n    x10 = shape(I)\n    x11 = increment(x10)\n    x12 = increment(x11)\n    x13 = canvas(x9, x12)\n    x14 = asobject(I)\n    x15 = shift(x14, UNITY)\n    x16 = paint(x13, x15)\n    x17 = repeat(identity, ONE)\n    x18 = astuple(cmirror, dmirror)\n    x19 = astuple(hmirror, vmirror)\n    x20 = combine(x18, x19)\n    x21 = combine(x17, x20)\n    x22 = fork(compose, first, last)\n    x23 = product(x21, x21)\n    x24 = apply(x22, x23)\n    x25 = ofcolor(x16, x4)\n    x26 = backdrop(x25)\n    x27 = toobject(x26, x16)\n    x28 = matcher(first, x8)\n    x29 = rbind(sfilter, x28)\n    x30 = matcher(first, x4)\n    x31 = rbind(sfilter, x30)\n    x32 = lbind(recolor, x9)\n    x33 = compose(x32, x31)\n    x34 = fork(combine, x29, x33)\n    x35 = lbind(lbind, shift)\n    x36 = lbind(occurrences, x16)\n    x37 = compose(x36, x34)\n    x38 = fork(mapply, x35, x37)\n    x39 = lbind(chain, x38)\n    x40 = lbind(x39, size)\n"], [1.1, "def solve_eb021fbb(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_5828824f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_2202c643(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_871653b5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d2b59785(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = dmirror(x23)\n    x25 = asobject(x24)\n    x26 = shape(x12)\n    x27 = shift(x25, x26)\n    x28 = ofcolor(x13, x6)\n    x29 = paint(x13, x28)\n    x30 = ofcolor(x29, x4)\n    x31 = initset(x40)\n    x32 = insert(x15, x31)\n    x33 = insert(x16, x32)\n    x34 = insert(x19, x33)\n    x35 = dmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x31, x36)\n    x38 = ofcolor(x13, x6)\n    x39 = height(x38)\n    x40 = insert(x39, x38)\n    x41 = destructive height(x40)\n    x42 = width(x38)"], [1.1, "def solve_909253d8(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_8cc2a21b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = apply(x7, x3)\n    x11 = apply(x9, x3)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, toivec)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = apply(x13, x3)\n    x19 = apply(x17, x4)\n    x20 = combine(x18, x19)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot, NEG_UNITY)\n    x26 = decrement(x2)\n    x27 = rbind(astuple, x26)\n    x28 = lbind(subtract, x26)\n    x29 = compose(x27, x28)\n    x30 = chain(x5, x25, x29)\n    x31 = apply(x24, x3)\n    x32 = apply(x30, x4)\n    x33 = combine(x31, x32)\n    x34 = rbind(valmax, numcolors)\n    x35 = matcher(x40, x22)\n    x36 = x35(x10)\n    x37 = x35(xI)\n    x38 = x35(x74"], [1.1, "def solve_311a245d(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_d95cba31(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_de116543(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x24)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x24)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x24)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x24)"], [1.1, "def solve_d195e4c1(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(x5, x5)\n    x7 = fill(x6, FIVE, x3)\n    x8 = objects(x7, F, F, T)\n    x9 = argmax(x8, numcolors)\n    x10 = normalize(x9)\n    x11 = remove(x9, x8)\n    x12 = toindices(x10)\n    x13 = lbind(intersection, x12)\n    x14 = chain(x13, dneighbors, last)\n    x15 = rbind(greater, x10)\n    x16 = chain(x15, dedupe, last)\n    x17 = fork(greater, x14, x16)\n    x18 = compose(x15, first)\n    x19 = chain(size, dedupe, x18)\n    x20 = size(x11)\n    x21 = equality(x19, x20)\n    x22 = branch(x21, uintcorner, vmirror)\n    x23 = x22(x10)\n    x24 = objects(x7, T, F, T)\n    x25 = argmax(x24, x23)\n    x26 = subgrid(x25, x7)\n    x27 = asobject(x26)\n    x28 = matcher(first, ZERO)\n    x29 = compose(flip, x28)\n    x30 = sfilter(x25, x29)\n    x31 = lefthalf(x30)\n    x32 = righthalf(x30)\n    x33 = palette(x31)\n    x34 = lbind(intersection, x33)\n    x35 = chain(size, x34, toindices)\n    x36 = sfilter(x32, x35)\n    x37 = rbind(shift, x31)\n    x38 = lbind(occurrences, x779)\n    x"], [1.1, "def solve_b67cec33(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_706cc69b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(initset, x7, x5)\n    x25 = compose(vmirror, x23)\n    x26 = fork(rapply, x24, x25)\n    x27 = compose(first, x26)\n    x28 = fork(paint, x23, x27)\n    x29 = fork(equality, identity, hmirror)\n    x30 = fork(equality, identity, vmirror)\n    x31 = fork(equality, identity, cmirror)\n    x32 = fork(equality, identity, dmirror)\n    x33 = fork(both, x29, x30)\n    x34 = fork(both, x31, x32)\n    x35 = fork(both, x33, x34)\n    x36 = compose(x"], [1.1, "def solve_52297eaa(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_39bb83e5(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =6666(I)\n    x2 =6666(I)\n    x3 = index(x1, ORIGIN)\n    x4 = decrement(x1)\n    x5 = positive(x3)\n    x6 = branch(x5, x4, x1)\n    x7 = crop(x1, ORIGIN, THREE_BY_THREE)\n    x8 = asobject(x7)\n    x9 = matcher(first, x8)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x2, x10)\n    x12 = fork(both, x lefthalf, tophalf)\n    x13 = sfilter(x11, x12)\n    x14 = compose(dmirror, vmirror)\n    x15 = argmin(x13, x14)\n    x16 = width(x11)\n    x17 =66(ONE, x16)\n    x18 = tojvec(x17)\n    x19 = index(x11, x18)\n    x20 = uppermost(x11)\n    x21 = matcher(first, x20)\n    x22 =sfilter(x11, x21)\n    x23 = leftmost(x11)\n    x24 = matcher(first, x23)\n    x25 = sfilter(x11, x24)\n    x26 = width(x11)\n    x27 = invert(x26)\n    x28 = tojvec(x27)\n    x29 = index(x11, x28)\n    x30 = astuple(x24, x22)\n    x31 = initset(x30)\n    x32 = cover(x11, x31)\n    x33 =sfilter(x3, x32)\n    x34 = height(x11)\n    x35 = astuple(x24, x22)\n    x36 = astuple(x31, x35)\n    x37 = subtract(x36, x30)\n    x38 = crop(x37,Example output:\n    00006\n    00020\n    00003\n    00002\n    0020\n    \"\"\"\n    x1"], [1.1, "def solve_3b663fe0(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN_LEFT)\n    x16 = lowermost(x2)\n    x17 = lowermost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(num"], [1.1, "def solve_b5c657cf(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = astuple(identity, rot90)\n    x2 = astuple(rot180, rot270)\n    x3 = combine(x1, x2)\n    x4 = astuple(identity, rot270)\n    x5 = astuple(rot180, rot90)\n    x6 = combine(x4, x5)\n    x7 = pair(x3, x6)\n    x8 = leastcolor(I)\n    x9 = rbind(ofcolor, x8)\n    x10 = rbind(rapply, I)\n    x11 = chain(first, x10, initset)\n    x12 = chain(hline, x9, x11)\n    x13 = rbind(ofcolor, x8)\n    x14 = rbind(rapply, I)\n    x15 = chain(first, x14, initset)\n    x16 = chain(leftmost, x13, x15)\n    x17 = matcher(x16, ZERO)\n    x18 = fork(both, x12, x17)\n    x19 = compose(x18, first)\n    x20 = extract(x7, x19)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = x21(I)\n    x24 = ofcolor(x23, x8)\n    x25 = argmax(x24, last)\n    x26 = add(x25, UP_RIGHT)\n    x27 = shift(x23, x26)\n    x28 = toindices(x27)\n    x29 = lbind(add, DOWN)\n    x30 = rbind(shoot, LEFT)\n    x31 = mapply(x29, x28)\n    x32 = rbind(shoot, RIGHT)\n    x33 = mapply(x32, x28)\n    x34 = lowermost(x23)\n    x35 = invert(x34)\n    x36 = manhattan(x35, x32)\n    x37 = rightmost(x23)\n    x38 = decrement(x37)\n    x39 = matcher(x38, x34)\n"], [1.1, "def solve_122be82e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_f5f5c7a5(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = astuple(x15, x18)\n    x26 = portrait(x24)\n    x27 = branch(x26, identity, cmirror)\n    x28 = x27(x3)\n    x29 = dmirror(x28)\n    x30 = branch(x24, identity, height)\n    x31 = x30(xmirror)\n    x32 = decrement(x31)\n    x33 = rbind(toobject, x35)\n    x34 = rbind(colorcount, ZERO)\n    x35 = chain(x33, x34, x31)\n    x36 = matcher(x35, x32)\n    x37 = sfilter(x4, x36)\n    x38 = compose(color, x37)\n    x39 = multiply(x84, LEFT)\n    x40 = rbind(greater"], [1.1, "def solve_4e5017db(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, rot90)\n    x3 = branch(x1, identity, rot270)\n    x4 = x2(I)\n    x5 = width(x4)\n    x6 = toivec(x5)\n    x7 = index(x4, x6)\n    x8 = shape(x4)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(x4, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, numcolors)\n    x13 = subgrid(x12, x4)\n    x14 = interval(ONE, FOUR, ONE)\n    x15 = lbind(power, rot90)\n    x16 = lbind(power, rot270)\n    x17 = rbind(rapply, x13)\n    x18 = compose(initset, x15)\n    x19 = chain(first, x17, x18)\n    x20 = rbind(rapply, x13)\n    x21 = compose(initset, x16)\n    x22 = chain(first, x20, x21)\n    x23 = compose(asobject, x19)\n    x24 = uppermost(x12)\n    x25 = lbind(add, x24)\n    x26 = height(x12)\n    x27 = increment(x26)\n    x28 = lbind(multcorner, x12)\n    x29 = chain(toivec, x25, x28)\n    x30 = fork(shift, x23, x29)\n    x31 = compose(asobject, x22)\n    x32 = uppermost(x12)\n    x33 = lbind(subtract, x32)\n    x34 = height(x12)\n    x35 = increment(x34)\n    x36 = lbind(multiply, x35)\n    x37 = chain(toivec, x33, x36)\n    x38 = fork(shift, x31, x37)\n    x39 = fork(combine"], [1.1, "def solve_f13645d1(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 =Example output:\n    6661\n    564\n    5499\n    1346\n    1469\n    \"\"\"\n    x2 = portrait(I)\n    x3 = branch(x2, identity, shape)\n    x4 = x3(I)\n    x5 = maximum(x3)\n    x6 = width(I)\n    x7 = halve(x6)\n    x8 = x3(I)\n    x9 = height(I)\n    x10 = decrement(x9)\n    x11 = multiply(x10, x5)\n    x12 = crop(I, ORIGIN, x11)\n    x13 = hmirror(x12)\n    x14 = vmirror(x12)\n    x15 = dmirror(x12)\n    x16 = hmirror(x15)\n    x17 = vmirror(x12)\n    x18 = combine(x13, x16)\n    x19 = product(x18, x18)\n    x20 = argmax(x19, size)\n    x21 = apply(color, x20)\n    x22 = first(x21)\n    x23 = last(x21)\n    x24 = ofcolor(x13, x23)\n    x25 = leftmost(x24)\n    x26 = ofcolor(x14, x23)\n    x27 = uppermost(x24)\n    x28 = greater(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = last(x28)\n    x31 = remove(x30, x8)\n    x32 =Lo repeat(x31, ONE)\n    x33 = first(x32)\n    x34 = branch(x22, x33, x25)\n    x35 = branch(x26, x28, x30)\n    x36 = branch(x29, x32, x35)\n    x37 = apply(normalize, x31)\n    x38 = astuple(x31, x37)\n    x39 = remove(x38, x31)\n    x40 = apply(ulcorner, x39)\n    x41 = rbind("], [1.1, "def solve_264e2f5e(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ZERO)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18"], [1.1, "def solve_d560feb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_b4eb549b(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(TEN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x11, x18)\n    x21 = first(x20)\n    x22 = last(x20)\n    x23 = height(x21)\n    x24 = decrement(x23)\n    x25 = lbind(astuple, x24)\n    x26 = lbind(shift, x21)\n    x27 =compose(x25, x26)\n    x28 = apply(x27, x3)\n    x29 =389(x28)\n    x30 = argmax(x80, x29)\n    x31 = matcher(first, x3)\n    x32 =sfilter(x30, x31)\n    x33 = apply(dneighbors, x32)\n    x34 = lbind(shift, x32)\n    x35 = mapply(x34, x33)\n    x36 = double(x24)\n    x37 = lbind(multiply, x36)\n    x38 = apply(x37, x34)\n    x39 = lbind(shift, x32)\n    x40 = mapply(x39, x38)\n    x41 = cover(I,"], [1.1, "def solve_bd33027e(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(contained, THREE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, THREE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, THREE)\n    x19 = asobject(I)\n    x20 = matcher(first, THREE)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x41)"], [1.1, "def solve_fc39db2b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = intersection(x1, x5)\n    x7 = lbind(colorcount, x4)\n    x8 = argmax(x6, x7)\n    x9 = remove(x8, x6)\n    x10 = rbind(contained, x9)\n    x11 = compose(x10, color)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, x4)\n    x14 = argmax(xofcolor, x13)\n    x15 = ofcolor(x14, x8)\n    x16 = apply(initset, x15)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, x12, x15)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x16)\n    x22 = objects(x4, T, F, F)\n    x23 = colorfilter(x22, x8)\n    x24 = rbind(manhattan, xcorIGIN)\n    x25 = chain(first, x24, last)\n    x26 = sfilter(x23, x25)\n    x27 = compose(rightmost, x25)\n    x28 = compose(minimum, x25)\n    x29 = fork(subtract, x28, x27)\n    x30 = fork(add, x29, x21)\n    x31 = rbind(contained, x15)\n    x32 = compose(x31, first)\n    x33 = rbind(sfilter, x32)\n    x34 = chain(asindices, x33, x20)\n    x35 = fork(difference, x29, x34)\n    x36 = fork(add, x34, x35)\n    x37 = fork(connect, x30, x36)\n    x38 = rbind(mapply,"], [1.1, "def solve_3a8a8763(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(vsplit, height, width)\n    x7 = x6(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = palette(x7)\n    x11 = remove(x9, x10)\n    x12 = other(x11, x1)\n    x13 = combine(x12, x7)\n    x14 = shape(x13)\n    x15 = canvas(x1, x14)\n    x16 = hconcat(x15, x13)\n    x17 = objects(x16, T, F, T)\n    x18 = colorfilter(x17, x12)\n    x19 = rbind(manhattan, ORIGIN)\n    x20 = argmin(x18, x19)\n    x21 = remove(x20, x18)\n    x22 = TEN(flow)\n    x23 = input:\n    x22, x21)\n    x24 = argmin(x22, x23)\n    x25 =909(x24, DOWN)\n    x26 = uppermost(x25)\n    x27 = rightmost(x24)\n    x28 = astuple(x26, x27)\n    x29 = leftmost(x24)\n    x30 = leftmost(x27)\n    x31 = astuple(x29, x30)\n    x32 = add(x28, x31)\n    x33 = initset(x32)\n    x34 = ofcolor(x33, x12)\n    x35 = sizefilter(x34, ONE)\n    x36 = lbind(vmatching, x34)\n    x37 = fork(either, x35, x36)\n    x38 = rbind(gravitate, x34)\n    x39 = compose(x38, initset)\n    x40 = fork(add,"], [1.1, "def solve_1903dfb3(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_183c8c42(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_bfdb8162(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = subgrid(x1, I)\n    x3 = trim(x2)\n    x4 = tophalf(x3)\n    x5 = lefthalf(x4)\n    x6 = tophalf(x2)\n    x7 = righthalf(x6)\n    x8 = bottomhalf(x2)\n    x9 = righthalf(x8)\n    x10 = bottomhalf(x2)\n    x11 = righthalf(x9)\n    x12 = index(x4, ORIGIN)\n    x13 = width(x12)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = index(x3, x15)\n    x17 = height(x6)\n    x18 = decrement(x17)\n    x19 = toivec(x18)\n    x20 = index(x3, x19)\n    x21 = shape(x7)\n    x22 = decrement(x21)\n    x23 = index(x3, x22)\n    x24 = compress(x4)\n    x25 = asindices(x24)\n    x26 = box(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = fill(x28, x30, x26)\n    x30 = ofcolor(x29, x27)\n    x31 = ulcorner(x30)\n    x32 = index(x3, x31)\n    x33 = lrcorner(x30)\n    x34 = add(x33, UNITY)\n    x35 = initset(x34)\n    x36 = cover(x29, x35)\n    x37 = ofcolor(x36, x27)\n    x38 = urcorner(x37)\n    x39 = add(x38, ulcorner)\n    x50 =676(x39)\n    x51 = initset(x50)\n    x52 = fill(x36, x27, x51)\n    O"], [1.1, "def solve_799c7858(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = palette(I)\n    x2 = lbind(rbind, sfilter)\n    x3 = lbind(compose, flip)\n    x4 = lbind(matcher, first)\n    x5 = chain(x2, x3, x4)\n    x6 = lbind(paint, I)\n    x7 = rbind(compose, asobject)\n    x8 = dmirror(I)\n    x9 = rbind(rapply, x8)\n    x10 = chain(first, x9, initset)\n    x11 = chain(x10, x7, x5)\n    x12 = compose(x6, x11)\n    x13 = compose(x7, x5)\n    x14 = compose(cmirror, x12)\n    x15 = compose(initset, x13)\n    x16 = fork(rapply, x15, x14)\n    x17 = compose(first, x16)\n    x18 = fork(paint, x12, x17)\n    x19 = chain(initset, x7, x5)\n    x20 = compose(hmirror, x18)\n    x21 = fork(rapply, x19, x20)\n    x22 = compose(first, x21)\n    x23 = fork(paint, x18, x22)\n    x24 = chain(rot90, x6, x23)\n    x25 = power(x24, TWO)\n    x26 = x25(I)\n    x27 = palette(x26)\n    x28 = lbind(ofcolor, x26)\n    x29 = compose(leftmost, x28)\n    x30 = matcher(x29, ZERO)\n    x31 = palette(x26)\n    x32 = rightmost(x26)\n    x33 = matcher(x32, ZERO)\n    x34 = fork(either, x30, x33)\n    x35 = palette(x26)\n    x36 = rightmost(x26)\n    x37 = matcher(x36, ZERO)\n    x38 = fork(either, x35, x37)"], [1.1, "def solve_e2056b27(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =6666(I)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = decrement(x3)\n    x5 = index(I, x4)\n    x6 = double(x2)\n    x7 = canvas(x5, x6)\n    x8 = paint(x7, x2)\n    x9 = shape(I)\n    x10 = decrement(x9)\n    x11 = index(I, x10)\n    x12 = divide(x33, x11)\n    x13 = astuple(x10, x12)\n    x14 = canvas(x11, x13)\n    x15 = paint(x14, x2)\n    x16 = width(I)\n    x17 = ulcorner(x2)\n    x18 = width(I)\n    x19 =678(x17, x18)\n    x20 = astuple(x16, x19)\n    x21 = canvas(x11, x20)\n    x22 = hconcat(I, x21)\n    x23 = hsplit(x22, TWO)\n    x24 = merge(x23)\n    x25 = last(x23)\n    x26 = vmirror(x25)\n    x27 = vconcat(x22, x26)\n    O = vconcat(x27, x24)\n    return O"], [1.1, "def solve_dbedb1fd(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = palette(I)\n    x21 = remove(x11, x20)\n    x22 = other(x21, x15)\n    x23 =6 ofcolor(I, x22)\n    x24 = mapply(neighbors, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x19)\n    x28 =4612f35(x23)\n    x29 = ofcolor(I, x27)\n    x30 = sfilter(x29, x28)\n    x31 = subgrid(x30, I)\n    x32 = ofcolor(x31, x19)\n    x33 = mapply(neighbors, x32)\n    x34 = toobject(x33, x31)\n    x35 = objects(x39, T, F, F)\n    x36 = sizefilter(x35, ONE)\n    x37 = merge(x36)\n    O = subgrid(x37, x31)\n    return O"], [1.1, "def solve_15fde576(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =201(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = branch(x4, dmirror, identity)\n    x6 = branch(x4, height, width)\n    x7 = x6(I)\n    x8 = astuple(ONE, x7)\n    x9 = x5(I)\n    x10 = crop(x9, ORIGIN, x8)\n    x11 = apply(dedupe, x10)\n    O = x5(x11)\n    return O"], [1.1, "def solve_c855f467(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = mostcolor(I)\n    x8 = ofcolor(x6, x7)\n    x9 = leastcolor(x6)\n    x10 = ofcolor(x1, x9)\n    x11 = combine(x8, x10)\n    x12 = intersection(x8, x10)\n    x13 = difference(x11, x12)\n    O = fill(x6, fill(x6, x11)\n    return O"], [1.1, "def solve_04b9b4ef(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = astuple(TWO, ONE)\n    x4 = rbind(contained, x3)\n    x5 = compose(x4, asindices)\n    x6 = rbind(sfilter, x5)\n    x7 = lbind(rbind, subtract)\n    x8 = lbind(occurrences, I)\n    x9 = lbind(lbind, shift)\n    x10 = compose(x7, ulcorner)\n    x11 = chain(x10, x6, x5)\n    x12 = chain(x8, x6, x5)\n    x13 = compose(x9, x6)\n    x14 = fork(mapply, x11, x12)\n    x15 = fork(mapply, x11, x13)\n    x16 = fork(lastuple, x14, x15)\n    x17 = repeat(x16, TWO)\n    x18 = mapply(x16, x2)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, NEG_UNITY)\n    x21 = paint(I, x20)\n    x22 = shift(x20, UNITY)\n    x23 = paint(x21, x22)\n    x24 =571(x28)\n    x25 = ulcorner(x24)\n    x26 = subgrid(x24, x25)\n    x27 = compose(toindices, normalize)\n    x28 = matcher(x27, x18)\n    x29 = normalize(x24)\n    x30 = sfilter(x29, x28)\n    x31 = difference(x29, x30)\n    O = fill(x23, ZERO, x31)\n    return O"], [1.1, "def solve_be0faf5b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = rbind(Sfilter, TWO)\n    x2 = apply(x1, I)\n    x3 = contained(TWO, x2)\n    x4 = branch(x3, height, width)\n    x5 = x4(I)\n    x6 = partition(I)\n    x7 = palette(x6)\n    x8 = matcher(identity, x5)\n    x9 = argmin(x7, x8)\n    x10 = color(x9)\n    x11 =92(85, toindices)\n    x12 = apply(x11, x10)\n    x13 = TIREE(x12)\n    x14 = branch(x13, hmirror, vmirror)\n    x15 = x14(x6)\n    x16 = x13(x15)\n    x17 = shape(x6)\n    x18 = canvas(x10, x17)\n    x19 = TWO_BY_TWO)\n    x20 = paint(x18, x19)\n    x21 = rbind(tocount, SIX)\n    x22 = apply(x21, x2)\n    x23 = normalize(x22)\n    x24 = color(x23)\n    x25 = remove(x23, x26)\n    x26 = other(x25, x24)\n    x27 = ofcolor(x26, x24)\n    x28 = last(x27)\n    x29 = ofcolor(x25, x24)\n    x30 = rbind(intersection, x28)\n    x31 = mapply(x30, x29)\n    O = fill(x23, x47, x31)\n    return O"], [1.1, "def solve_3331e564(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = UNITY(I)\n    x2 =31(x1)\n    x3 = decrement(x2)\n    x4 = tojvec(x3)\n    x5 = shoot(x4, UP_RIGHT)\n    x6 = shift(x5, UNITY)\n    O = fill(I, THREE, x6)\n    return O"], [1.1, "def solve_fb9e858f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersectionx15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.1, "def solve_f1f6b9c7(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = input:\n    8888888989\n    8888888989\n    8888888989\n    5555585555\n    4555555555\n    4555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = fork(add, height, width)\n    x3 = compose(decrement, x2)\n    x4 = fork(equality, size, x3)\n    x5 = fork(difference, toindices, box)\n    x6 = compose(size, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = sfilter(x1, x4)\n    x9 = difference(x1, x8)\n    x10 = sfilter(x9, x7)\n    x11 = merge(x1)\n    x12 = fill(I, TWO, x11)\n    x13 = merge(x8)\n    x14 = fill(x12, ONE, x13)\n    x15 = merge(x10)\n    O = fill(x14, SIX, x15)\n    return O"], [1.1, "def solve_35608ece(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = argmax(x2, numcolors)\n    x4 = difference(x3, x2)\n    x5 = apply(initset, x4)\n    x6 = rbind(404a4755\n    b27 upper3846\n    11111151\n    429511529\n    uple ofcolor(I, x1)\n    x1 = prapply(connect, x5, x6)\n    x2 = compose(72,175)\n    x3 = mapply(x2, x1)\n    x4 = fill(I, x1, x3)\n    x5 = fork(recolor, color, x6)\n    x6 = mapply(x5, x4)\n    O = paint(x4, x6)\n    return O"], [1.1, "def solve_61b4d629(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = rbind(subgrid, x6)\n    x8 = apply(x7, x2)\n    x9 = rot90(x8)\n    x10 = fgpartition(x9)\n    x11 = merge(x10)\n    x12 = solve(x11, x9)\n    x13 = index(x12, ORIGIN)\n    x14 = subgrid(x12, x9)\n    x15 = apply(x7, x12)\n    x16 = rot90(x15)\n    x17 =fgpartition(x16)\n    x18 = merge(x17)\n    x19 =644(x18)\n    x20 = palette(x19)\n    x21 = other(x20, ZERO)\n    x22 = objects(x6, T, F, T)\n    x23 = colorfilter(x22, x21)\n    x24 = sfilter(x21, vline)\n    x25 = difference(x21, x24)\n    x26 = astuple(x25, x26)\n    x27 = rbind(shoot, UP)\n    x28 = mapply(x27, x6)\n    O = fill(x9, x21, x28)\n    return O"], [1.1, "def solve_4dd9eb26(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = shape(I)\n    x2 = maximum(x1)\n    x3 = interval( ZERO, x2, ONE)\n    x4 = interval(ONE, x2, ONE)\n    x5 = rbind(toobject, I)\n    x6 = rbind(shoot, RIGHT)\n    x7 = chain(x5, x6, toivec)\n    x8 = rbind(shoot, DOWN)\n    x9 = chain(x5, x8, tojvec)\n    x10 = ofcolor(I, ZERO)\n    x11 = ofcolor(I, FOUR)\n    x12 = rbind(shoot, UP_RIGHT)\n    x13 = chain(x5, x12, x7)\n    x14 = rbind(shoot, UP_RIGHT)\n    x15 = decrement(x2)\n    x16 = lbind(astuple, x15)\n    x17 = chain(x5, x14, x16)\n    x18 = compose(x13, x17)\n    x19 = rbind(shoot, THREE_BY_THREE)\n    x20 = compose(x14, x19)\n    x21 = rbind(shoot, THREE_BY_THREE)\n    x22 = decrement(x2)\n    x23 = lbind(astuple, x22)\n    x24 = chain(x5, x21, x23)\n    x25 = rbind(shoot,Example output:\n    x27 = fork(recolor, identity, x24)\n    x28 = mapply(x27, x3)\n    O = paint(I, x28)\n    return O"], [1.1, "def solve_6a84b1f4(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = compose(x1, shape)\n    x3 = rbind( multiply(TWO, THREE)\n    x4 = rbind(multiply, THREE)\n    x5 = compose(x4, x2)\n    x6 = fork(equality, identity, x5)\n    x7 = compose(x6, last)\n    x8 = sfilter(x1, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = x1(x11)\n    x13 = x2(x10)\n    x14 = normalize(x13)\n    x15 = shift(x14, UNITY)\n    x16 = paint(I, x15)\n    O = subgrid(x10, x16)\n    return O"], [1.1, "def solve_2a708adb(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = rbind(rapply, I)\n    x2 = initset(I)\n    x3 = lbind(add, DOWN)\n    x4 = chain(first, x1, x3)\n    x5 = compose(x4, decrement)\n    x6 = fork(difference, x5, toindices)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, ZERO)\n    x9 = extract(x2, x8)\n    x10 =775(x9)\n    x11 =(x10)\n    x12 = equality(x11, x12)\n    x13 = branch(x12, x11, x8)\n    x14 = shift(x13, UNITY)\n    x15 =27(x14)\n    x16 = ulcorner(x15)\n    x17 = lrcorner(x15)\n    x18 = shape(x15)\n    x19 = maximum(x18)\n    x20 = multiply(THREE, TEN)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = rbind(multiply, x15)\n    x23 = apply(x22, x21)\n    x24 = rbind(multiply, x15)\n    x25 = apply(x24, x21)\n    x26 = pair(x25, x26)\n    x27 = mapply(box, x26)\n    x28 = mapply(x25, x27)\n    O = fill(x10, ZERO, x28)\n    return O"], [1.1, "def solve_af2b8f36(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =6666(I)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, frontiers)\n    x4 = mfilter(x1, x3)\n    O = fill(x1, ZERO, x4)\n    return O"], [1.1, "def solve_76c140d9(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =680(I)\n    x2 = objects(x1, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = merge(x4)\n    x6 = subgrid(x5, x1)\n    x7 = frontiers(x6)\n    x8 = sfilter(x7, hline)\n    x9 = size(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, dmirror, identity)\n    x12 = x11(x6)\n    x13 = trim(x12)\n    x14 = mostcolor(x13)\n    x15 = matcher(identity, x14)\n    x16 = rbind(sfilter, x15)\n    x17 = compose(size, x16)\n    x18 = argmin(x4, x17)\n    x19 = repeat(x18, ONE)\n    x20 = asobject(x19)\n    x21 = palette(x20)\n    x22 = totuple(x21)\n    x23 = first(x22)\n    x24 = last(x22)\n    x25 = neighbors(UNITY)\n    x26 = remove(x23, x25)\n    x27 = recolor(x24, x26)\n    x28 = lbind(shift, x26)\n    x29 = ofcolor(x13, x23)\n    x30 = mapply(x28, x29)\n    x31 = shift(x30, UP_RIGHT)\n    x32 = combine(x27, x31)\n    x33 = paint(x13, x32)\n    O = trim(x33)\n    return O"], [1.1, "def solve_31d34b94(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = lbind(8matcher, first)\n    x2 = compose(x1, last)\n    x3 = lbind(multiply, THREE)\n    x4 = compose(x3, x2)\n    x5 = fork(extract, identity, x4)\n    x6 = compose(last, x5)\n    x7 = compose(ff28, x6)\n    x8 = fork(recolor, color, x7)\n    x9 = mapply(x8, x1)\n    O = paint(I, x9)\n    return O"], [1.1, "def solve_84cab0b3(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =1111(I)\n    x2 = matcher(identity, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = chain(positive, size, x4)\n    x6 = rbind(sfilter, x5)\n    x7 = compose(dmirror, x6)\n    x8 = power(x7, FOUR)\n    x9 = x8(I)\n    x10 = dedupe(x9)\n    x11 = dmirror(x10)\n    x12 = dedupe(x11)\n    O = dmirror(x12)\n    return O"], [1.1, "def solve_97504b06(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, NEG_UNITY)\n    x5 = fill(I, THREE, x4)\n    x6 = shift(x3, UNITY)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, DOWN_LEFT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, UP_RIGHT)\n    x11 = fill(x9, SIX, x10)\n    x12 =\n    x13 = shape(I)\n    x14 = maximum(x13)\n    x15 = lbind(multiply, x14)\n    x16 = decrement(x15)\n    x17 = lbind(outbox, x9)\n    x18 = initset(x17)\n    x19 = fill(x13, THREE, x18)\n    x20 = outbox(x19)\n    x21 = backdrop(x20)\n    x22 = lbind(toobject, x21)\n    x23 = compose(x22, initset)\n    x24 = ofcolor(x19, ONE)\n    x25 = sfilter(x24, x23)\n    x26 = difference(x24, x25)\n    x27 = fill(x19, THREE, x26)\n    x28 = interval(x8, x12, ONE)\n    x29 = rbind(multiply, x14)\n    x30 = apply(x29, x28)\n    x31 = lbind(shift, x24)\n    x32 = mapply(x31, x30)\n    O = fill(x27, TWO, x32)\n    return O"], [1.1, "def solve_c55e563f(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = TWO_BY_TWO)\n    x2 = dmirror(I)\n    x3 =081928e5(x2)\n    x4 = lbind(shift, x3)\n    x5 = rbind(difference, x1)\n    x6 = chain(size, x4, x5)\n    x7 = matcher(x6, ZERO)\n    x8 = partition(I)\n    x9 = sfilter(x8, x7)\n    x10 = argmax(x9, size)\n    x11 = remove(x10, x9)\n    x12 = apply(initset, x11)\n    x13 = toindices(x10)\n    x14 = lbind(argmin, x12)\n    x15 = lbind(rbind, manhattan)\n    x16 = compose(x14, x15)\n    x17 = argmin(x13, x16)\n    x18 = cover(I, x10)\n    x19 = paint(x18, x17)\n    x20 = complec(x7)\n    x21 = palette(I)\n    x22 = other(x21, ZERO)\n    x23 = colorcount(x20, x22)\n    x24 = asindices(x20)\n    x25 = ofcolor(x20, x22)\n    x26 = difference(x24, x25)\n    x27 = asobject(x20)\n    x28 = matcher(first, x22)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(x27, ulcorner, x29)\n    x31 = fork(shift, identity, x30)\n    x32 = mapply(x31, x26)\n    x33 = paint(x19, x32)\n    O = x23(x33)\n    return O"], [1.1, "def solve_197e1496(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = fill(x6, NEG_ONE, x2)\n    x8 = objects(x7, F, F, T)\n    x9 = lbind(contained, FOUR)\n    x10 = compose(x9, palette)\n    x11 = extract(x8, x10)\n    x12 = lbind(sfilter, x8)\n    x13 = compose(size, x12)\n    x14 = rbind(compose, palette)\n    x15 = lbind(lbind, contained)\n    x16 = chain(x13, x14, x15)\n    x17 = merge(x8)\n    x18 = palette(I)\n    x19 = remove(x3, x18)\n    x20 = valmax(x19, x16)\n    x21 = matcher(x16, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(colorcount, x17)\n    x24 = argmax(x22, x23)\n    x25 = shape(I)\n    x28 = canvas(x24, x25)\n    x29 = paint(x28, x2)\n    x30 = normalize(x11)\n    x31 = matcher(first, x4)\n    x32 = compose(flip, x31)\n    x33 = sfilter(x30, x32)\n    x34 = paint(x29, x33)\n        O = x21(x34)\n    return O"], [1.1, "def solve_7682831b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(numcolors, x1)\n    x3 = lbind(apply, multiply)\n    x4 = lbind(I, frontiers)\n    x5 = chain(x3, x4, frontiers)\n    x6 = chain(size, dedupe, x5)\n    x7 = matcher(x6, ONE)\n    x8 = compose(flip, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = fork(sfilter, x9, x8)\n    x11 = compose(size, x10)\n    x12 = argmin(x2, x11)\n    x13 = rightmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x12)\n    x18 = shift(x17, NEG_UNITY)\n    x19 =171(x16)\n    x20 = lbind(shift, x19)\n    x21 = mapply(x20, x18)\n    x22 = paint(x16, x21)\n    O = x15(x22)\n    return O"], [1.1, "def solve_5c05747b(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = leftmost(x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = ofcolor(I, x10)\n    x18 =16(x17)\n    x19 = asindices(x18)\n    x20 = lowermost(x19)\n    x21 = toobject(x20, I)\n    x22 = mostcolor(x21)\n    x23 = ofcolor(I, x22)\n    x24 = uppermost(x23)\n    x25 = toivec(x24)\n    x26 = invert(x25)\n    x27 = rbind(shoot, UP)\n    x28 = rightmost(x27)\n    x29 = equality(x28, x26)\n    x30 = branch(x29, x22, x25)\n    x31 = branch(x29, x27, x25)\n    x32 =22its(x30)\n    x33 = size(x32)\n    x34 = positive(x33)\n    x35 = branch(x34, x26, x25)\n    x36 = branch(x34, x27, x25)\n    x37 = x35(x36)\n    x38 = intersection(x37, x35)\n    x39 = branch(x34, x36, x38)\n    O = x39(x36)\n    return O"], [1.1, "def solve_e0239dc4(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =429(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [1.1, "def solve_33ca9808(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 =63(I)\n    x6 = astuple(dmirror, cmirror)\n    x7 = astuple(hmirror, identity)\n    x8 = combine(x6, x7)\n    x9 = rbind(d511f180x8)\n    x10 = rbind(ofcolor, x4)\n    x11 = compose( center, x10)\n    x12 = compose(x19, x11)\n    x13 = chain(x9, vline, x12)\n    x14 = rbind(intersection, x2)\n    x15 = chain(size, x14, x13)\n    x16 = matcher(x15, ZERO)\n    x17 = objects(I, T, F, T)\n    x18 = sfilter(x17, x16)\n    x19 = argmax(x18, size)\n    x20 = matcher(color, x4)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = argmax(x22, size)\n    x24 = replace(I, x4, ZERO)\n    O = paint(x24, x23)\n    return O"], [1.1, "def solve_44de6db7(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = ONE00000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    0000000000\n    \"\"\"\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_00d2babd(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = toobject(x1, I)\n    x3 = mostcolor(x2)\n    x4 =977788399000\n    8888248466\n    2422408323\n    53204a843\n    0330528329\n    4042542324\n    8025038323\n    \"\"\"\n    x1 = matcher(first, x3)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x1, x2)\n    x4 = shape(x3)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x3, x8)\n    x10 = multiply(x4, x4)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x9)\n    x13 = multiply(x4, x4)\n    x14 = width(I)\n    x15 = halve(x14)\n    x16 = compose(last, last)\n    x17 = matcher(x16, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x13, x18)\n    O = fill(x12, x3, x19)\n    return O"], [1.1, "def solve_01a38f42(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = ONE(I)\n    x2 = dedupe(x1)\n    x3 = size(x2)\n    x4 = equality(x3, ONE)\n    x5 = flip(x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, vconcat)\n    x9 = x6(I)\n    x10 = x7(I)\n    x11 = index(x9, ORIGIN)\n    x12 = shape(x10)\n    x13 = decrement(x12)\n    x14 = index(x10, x13)\n    x15 = mostcolor(I)\n    x16 = mostcolor(I)\n    x17 = palette(I)\n    x18 = remove(x11, x17)\n    x19 = remove(x14, x18)\n    x20 = remove(x16, x19)\n    x21 = first(x20)\n    x22 = size(x2)\n    x23 = positive(x22)\n    x24 = branch(x23, hsplit, vmirror)\n    x25 = x24(I)\n    x26 = first(x25)\n    x27 = lbind(recolor, x21)\n    x28 = lrcorner(x2)\n    x29 = paint(x18, x28)\n    x30 = branch(x5, vmirror, hmirror)\n    x31 = x30(x29)\n     move(x29, x31, x2)\n    O = x30(x32)\n    return O"], [1.1, "def solve_c95e326f(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    O =88888(I, TWO)\n    return O"], [1.1, "def solve_65105cab(I):\n    \"\"\"\n    Example input:\n    5601472401\n    8054563207\n    3394663909\n    8171491481\n    4203995453\n    6547090993\n    3253369163\n    3716058707\n    4643498735\n    2109782214\n    Example output:\n    8266307895\n    6024456300\n    8698533303\n    0773730886\n    8494475202\n    1869267188\n    8686439631\n    4748983650\n    2549829759\n    7224471549\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x1)\n    x4 =    5899240800\n    48rotExample44\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = rot90(I)\n    x3 = color(x2)\n    x4 =5899240800\n    48its\n    8119268418\n    8974824121\n    3982068456\n    3614909629\n    \"\"\"\n    x2 = hmirror(I)\n    x3 = vmirror(I)\n    x4 = equality(x1, x2)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.1, "def solve_30d4beb2(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 =2331152277(I)\n    x2 =04227119915, x1)\n    x3 = apply(d406, x2)\n    x4 = lefthalf(x3)\n    x5 = righthalf(x3)\n    x6 = palette(x4)\n    x7 = contained(x6, x5)\n    x8 = contained(x7, x5)\n    x9 = branch(x8, identity, dmirror)\n    x10 = x9(x4)\n    x11 = x9(x5)\n    x12 = canvas(ZERO, THREE_BY_THREE)\n    x13 = branch(x8, identity, vmirror)\n    x14 = x13(x10)\n    x15 = hconcat(x14, x13)\n    x16 = asobject(x15)\n    x17 = occurrences(x16, x3)\n    x18 = first(x17)\n    x19 = ulcorner(x18)\n    x20 = lbind(shift, x18)\n    x21 = occurrences(x16, x9)\n    x22 = mapply(x20, x21)\n    O = fill(x17, ONE, x22)\n    return O"], [1.1, "def solve_d25a7a3e(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =66666666(I, TWO)\n    x2 = rot180(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, x2, x2)\n    O = canvas(x4, UNITY)\n    return O"], [1.1, "def solve_f1132913(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, leftmost)\n    x3 = astuple(ONE, TWO)\n    x4 = rbind(contained, x3)\n    x5 = lbind(compose, x4)\n    x6 = lbind(rbind, colorcount)\n    x7 = compose(x5, x6)\n    x8 = lbind(sfilter, x1)\n    x9 = chain(size, x8, x7)\n    x10 = size(x2)\n    x11 = greater(x10, FOUR)\n    x12 = branch(x11, RIGHT, DOWN)\n    x13 = subgrid(x12, I)\n    x14 = add(RIGHT, DOWN)\n    x15 = decrement(x14)\n    x16 = x9(x15)\n    x17 = height(x13)\n    x18 = fgpartition(x13)\n    x19 = merge(x18)\n    x20 = fill(x13, ZERO, x19)\n    x21 = subtract(x17, x20)\n    x22 = replace(x21, FOUR, ZERO)\n    x23 = width(x13)\n    x24 =630alf(x23, width)\n    x25 = downscale(x12, x24)\n    x26 = ofcolor(x25, FOUR)\n    x27 = fill(x25, ZERO, x26)\n    O = x9(x27)\n    return O"], [1.1, "def solve_c77b1a33(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 =695651860160970\n    x15 =665513890(x12)\n    x16 = solve_694f1293(x15)\n    x17 = tophalf(x16)\n    x18 = numcolors(x17)\n    x19 = lowermost(x16)\n    x20 = lefthalf(x12)\n    x21 = righthalf(x12)\n    x22 = objects(x16, T, F, F)\n    x23 = colorfilter(x22, x3)\n    x24 = merge(x23)\n    x25 = cellwise(x14, x23, x24)\n    x26 = DOWNscale(x25, x18)\n    x27 = crop(x26, ORIGIN, x20)\n    x28 = urcorner(x27)\n    x29 = asindices(x28)\n    x30 = shift(x29, x28)\n    x31 = apply(initset, x30)\n    x32 = ofcolor(x25, x3)\n    x33 = ofcolor(x25, x8)\n    x34 = intersection(x32, x33)\n    x35 = cover(x5, x20)\n    O = fill(x35, NEG_ONE, x34)\n    return O"], [1.1, "def solve_a67c6f36(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 = astuple(\n    2885576013\n    6585562088\n    5568272651\n    ulcornerner\n    \"\"\"\n    x2 = lefthalf(I)\n    x3 = righthalf(I)\n    x4 = tophalf(x2)\n    x5 = bottomhalf(x2)\n    x6 = tophalf(x3)\n    x7 = bottomhalf(x3)\n    x8 = combine(x4, x5)\n    x9 = combine(x6, x7)\n    x10 = combine(x8, x9)\n    O = fill(x1, TWO, x10)\n    return O"], [1.1, "def solve_ad32f302(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =52R5528\n    x2 =55215\n    x3 = tophalf(I)\n    x4 = lefthalf(x3)\n    x5 = tophalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = Tphalf(x8)\n    x10 = tophalf(x9)\n    x11 = righthalf(x10)\n    x12 = bottomhalf(x11)\n    x13 = lefthalf(x12)\n    x14 =tophalf(x13)\n    x15 = tophalf(x14)\n    x16 = righthalf(x15)\n    x17 = index(I, ORIGIN)\n    x18 = width(I)\n    x19 = decrement(x18)\n    x20 = tojvec(x19)\n    x21 = index(I, x20)\n    x22 = height(I)\n    x23 = decrement(x22)\n    x24 = toivec(x23)\n    x25 = index(I, x24)\n    x26 = shape(I)\n    x27 = decrement(x26)\n    x28 = add(x22, x27)\n    x29 = add(x24, x28)\n    x30 = canvas(x11, x29)\n    x31 = asobject(x30)\n    x32 = occurrences(x10, x31)\n    x33 =\n    35(x32)\n    x34 =\n    (normalize, toindices)\n    x35 = lbind(shift, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x10, x36)\n    return O"], [1.1, "def solve_6741114b(I):\n    \"\"\"\n    Example input:\n    9790687471\n    0798334620\n    1243505276\n    2449653666\n    9297593593\n    6508282336\n    0716583435\n    7380564791\n    9705540715\n    5218566770\n    Example output:\n    4623432764\n    2685079451\n    1084981359\n    4594515643\n    3645140349\n    6897811551\n    8116660173\n    5635795908\n    1244687611\n    5974961912\n    \"\"\"\n    x1 =91112(I)\n    x2 = switch(x1, EIGHT, TWO)\n    x3 = switch(x2, TWO, TWO)\n    x4 = switch(x3, ONE, TEN)\n    x5 = fork(combine, vfrontier, hfrontier)\n    x6 = compose(x5, x4)\n    x7 = extract(x1, x6)\n    O = x7(x7)\n    return O"], [1.1, "def solve_90a38d7b(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = asindices(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(adjacent, x2)\n    x4 = compose(x3, initset)\n    x5 =78(x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(hmirror, vmirror)\n    x8 =HKapply(x7, x6)\n    x9 = compress(x8)\n    O = fill(x9, ZERO, x3)\n    return O"], [1.1, "def solve_82a2d37c(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =887(I)\n    x2 = mostcolor(I)\n    x3 = shape(I)\n    O = canvas(x2, x3)\n    return O"], [1.1, "def solve_7c17c2b6(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 =\ufffd Bit(x11, uppermost)\n    x13 = ulcorner(x12)\n    x14 = llcorner(x12)\n    x15 = hmatching(x13, x14)\n    x16 = branch(x15, NEG_ONE, ONE)\n    x17 = branch(x15, double, outbox)\n    x18 = initset(x13)\n    x19 = insert(x14, x18)\n    x20 = insert(x16, x19)\n    x21 = recolor(x3, x20)\n    x22 = uppermost(x12)\n    x23 = toivec(x22)\n    x24 = add(x23, x4)\n    x25 = insert(x27, x24)\n    x26 = merge(x27)\n    x27 = cover(x6, x26)\n    x28 = forever package(x27)\n    x29 = astuple(x23, x8)\n    x30 = astuple(x28, x9)\n    x31 = combine(x29, x30)\n    x32 = hfrontier(x31)\n    x33 = vfrontier(x31)\n    x34 = combine(x32, x33)\n    x35 = combine(x31, x34)\n    x36 = fill(x27, x3, x35)\n    x37 = paint(x36, x24)\n    O = paint(x37, x25)\n    return O"], [1.1, "def solve_8c885980(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = partition(I)\n    x2 =4418228(x1)\n    x3 =241111(x2)\n    x4 = matcher(color, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x1, x5)\n    x7 =44fcc829(I)\n    x8 = rbind(shoot, UNITY)\n    x9 = mapply(x8, x7)\n    x10 = power(outbox, TWO)\n    x11 = apply(x10, x9)\n    x12 = initset(x2)\n    x13 = insert(x12, x11)\n    x14 = corners(x13)\n    x15 = toobject(x14, I)\n    x16 = mostcolor(x15)\n    x17 = ofcolor(I, x16)\n    x18 = mapply(neighbors, x17)\n    x19 = toindices(x18)\n    x20 = rbind(shoot, x19)\n    x21 = mapply(x20, x5)\n    x22 = combine(x19, x21)\n    O = fill(I, x16, x22)\n    return O"], [1.1, "def solve_d6eb9269(I):\n    \"\"\"\n    Example input:\n    9703485527\n    5948300435\n    9476693980\n    7753337304\n    2357906408\n    2300612785\n    0350276054\n    1569605302\n    5418921107\n    0042692117\n    Example output:\n    7218471301\n    0585007004\n    8175748040\n    0761056983\n    6642981808\n    3768831711\n    8443326989\n    2862238069\n    8709100121\n    9836057325\n    \"\"\"\n    x1 =4444(I)\n    x2 =4444(I)\n    x3 =4444(I)\n    x4 =54444\n    45398831881\n    54568096698\n    43285167973\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = shape(x24)\n    x26 = canvas(x1, x25)\n    x27 = paint(x26, x24)\n    x28 = ofcolor(x27, THREE)\n    x29 = combine(x21, x28)\n    x30 = mapply(x19, x29)\n    x31 = fill(x27, THREE, x30)\n    x32 = x169(x31)\n    x33 =40(x32)\n    x34 = shift(x31, x33)\n    O = fill(x27, THREE, x34)\n    return O"], [1.1, "def solve_df53b005(I):\n    \"\"\"\n    Example input:\n    1543082914\n    6331852028\n    2938232870\n    1113700147\n    8891245679\n    6369402450\n    7006333480\n    4192300534\n    2017410195\n    8940323949\n    Example output:\n    4889875505\n    4578434195\n    7338241979\n    7779028633\n    1997758431\n    1558758405\n    1287173283\n    4105322083\n    3449460094\n    3876147125\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = branch(x16, x17, x19)\n    x21 = branch(x12, x16, x20)\n    x22 = branch(x12, x9, x21)\n    x23 = PApply(x22, x21)\n    x24 =280(x23)\n    x25 = branch(x16, x18, x19)\n    x26 = Field(x25, x24)\n    x27 = branch(x8, x22, x25)\n    x28 = fork(combine, vfrontier, hfrontier)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(ofcolor, x12)\n    x31 = palette(x12)\n    x32 = remove(x13, x31)\n    x33 = lbind(43444, x12)\n    x34 = power(x33, x30)\n    x35 = x32(x32)\n    x36 = x30(x34)\n    x37 = fill(x15, x39, x36)\n    x38 = fill(x37, x30, x34)\n    O = fill(x38, x39, x36)\n    return O"]]}