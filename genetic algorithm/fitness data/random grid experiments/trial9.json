{"d56f2372": [[0.273995593168007, "def solve_3cfc9c7f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.273995593168007, "def solve_1cb74a12(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.28317283950617284, "def solve_8c472259(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = argmax(x5, size)\n    x7 = shape(x6)\n    x8 = canvas(x4, x7)\n    x9 = normalize(x6)\n    O = paint(x8, x9)\n    return O"], [0.29706172839506173, "def solve_7a7313cb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x24, x27)\n    O = paint(x14, x28)\n    return O"], [0.3040587683921017, "def solve_779c5f07(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.32625362023912746, "def solve_cd275006(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3346827117477524, "def solve_7d5ac4ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_0f143e14(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_f85106ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_66791150(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_f5e7d35f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_748c71ab(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_9d01c831(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_920e8a37(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_0dd67c96(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_37c1dc45(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_57edebc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_37d3c75d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_58ddfa13(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_5847c710(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.3346827117477524, "def solve_379256b0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.39591901174509864, "def solve_52aa6171(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.4093797170990154, "def solve_6a03ff2f(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.4093797170990154, "def solve_acf7ef78(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.41617597321745253, "def solve_48a4b03e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.41699831998382725, "def solve_d3df852a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.41699831998382725, "def solve_37f26949(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.41699831998382725, "def solve_9f5a128b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.41699831998382725, "def solve_5945c8f8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.41699831998382725, "def solve_caa628d3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.42558143469661397, "def solve_8048952c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.42558143469661397, "def solve_acc729c5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.47691676185236953, "def solve_0fa3496b(I):\n    x1 = replace(I, FIVE, ZERO)\n    O = downscale(x1, THREE)\n    return O"], [0.47968970642883685, "def solve_af243358(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.47968970642883685, "def solve_ffc46cf3(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.47968970642883685, "def solve_bf183830(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.48834613320120573, "def solve_695b04c8(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [0.49325354355789136, "def solve_cab6c0d6(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.49704719435154215, "def solve_2bd32f9a(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.500759187404115, "def solve_8e572b86(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(x1)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.5056030890741036, "def solve_acc6396a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_cb758191(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5056030890741036, "def solve_991f77e8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.5130794983512649, "def solve_5392da9c(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5130794983512649, "def solve_a1d477cf(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5307798906710026, "def solve_bc7aab33(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_bc999f25(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5307798906710026, "def solve_4aacf3da(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5585024261811583, "def solve_a51b2b24(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_2c70268a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5585024261811583, "def solve_0c691c5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5585024261811583, "def solve_e4a2a00b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5652441058672942, "def solve_4ec321af(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_3c154fcd(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = partition(x2)\n    x4 = rbind(contained, x3)\n    x5 = chain(flip, x4, shape)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, box)\n    x8 = sfilter(x6, x7)\n    x9 = fork(multiply, height, width)\n    x10 = argmin(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.5652441058672942, "def solve_21192291(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_acaa78f4(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_36a436ac(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_fdba1e94(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5652441058672942, "def solve_78b6e400(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.597602058740802, "def solve_d1aa6bc6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.6016750389108988, "def solve_5ee2ed15(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6181018953185965, "def solve_3cec28bf(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_4858d724(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_d3e9539f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_2fdb5b40(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_83d97f85(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_83d2826e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_3511bc60(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_9b28c643(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_1749b26a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_8ec26013(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6181018953185965, "def solve_de4c7f9b(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6206220158679393, "def solve_51f86cd5(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6285917506761496, "def solve_bd8e8cc3(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6291436647232063, "def solve_c2a7b8c8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_69b37bed(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_02913bb2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_4f73f41f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = fgpartition(x6)\n    x9 = merge(x8)\n    O = paint(x6, x9)\n    return O"], [0.6291436647232063, "def solve_c7a7f8bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6291436647232063, "def solve_ebe978f3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6307531254528715, "def solve_5b190dbc(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, FOUR, x21)\n    return O"], [0.6411654239156103, "def solve_bb620a85(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.6411654239156103, "def solve_54417fbb(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.6411654239156103, "def solve_613381a9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.6411654239156103, "def solve_06099666(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.6416977053214553, "def solve_28b18022(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.6572952903476961, "def solve_ce52c751(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6572952903476961, "def solve_e3948e19(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6572952903476961, "def solve_fb6a3538(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6577899317169728, "def solve_a94050ab(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(I)\n    O = replace(x4, x5, x3)\n    return O"], [0.6602138625163511, "def solve_e565140f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6674861298852472, "def solve_4f3e6051(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_4a2cae9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6674861298852472, "def solve_793ec4ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.6944224988098907, "def solve_1c371af5(I):\n    x1 = trim(I)\n    x2 = objects(x1, F, T, T)\n    x3 = argmin(x2, numcolors)\n    x4 = normalize(x3)\n    x5 = toindices(x4)\n    x6 = prapply(connect, x5, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    O = underfill(x1, NEG_ONE, x8)\n    return O"], [0.6972913335714946, "def solve_b21e7147(I):\n    x1 = replace(I, TWO, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.6978401405853463, "def solve_bb3654f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.6987437235862725, "def solve_e3288b92(I):\n    O = trim(I)\n    return O"], [0.7052501974196685, "def solve_b0611800(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7052501974196685, "def solve_2d7a66f6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7092132972493429, "def solve_c6314232(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7209610573661548, "def solve_f891c4a8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7209610573661548, "def solve_15e0cc19(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7253714992428528, "def solve_eea4254d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7253714992428528, "def solve_a7c745de(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7265166129217103, "def solve_57eacd28(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7298314042095231, "def solve_6f902f4f(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = equality(x1, TWO)\n    x8 = shape(I)\n    x9 = decrement(x8)\n    x10 = width(I)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = branch(x7, x9, x12)\n    x14 = shape(I)\n    x15 = canvas(ZERO, x14)\n    x16 = connect(x6, x13)\n    O = fill(x15, FIVE, x16)\n    return O"], [0.7320721684772659, "def solve_bec9c22f(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.7320721684772659, "def solve_ee5d4af4(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.7320721684772659, "def solve_c5e68849(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.7328950067132097, "def solve_bc1daf90(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.739396261410893, "def solve_b80839e3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_fdb0acbe(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.739396261410893, "def solve_8a97cf2f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.739396261410893, "def solve_e3338a93(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.7404615987876856, "def solve_2d5ab11f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x6, ONE)\n    x8 = compose(leastcolor, merge)\n    x9 = colorfilter(x1, x4)\n    x10 = branch(x7, x8, x9)\n    x11 = branch(x7, vsplit, hsplit)\n    x12 = x11(I, TWO)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = palette(x13)\n    x16 = other(x15, x4)\n    x17 = palette(x14)\n    x18 = other(x17, x4)\n    x19 = shape(x13)\n    x20 = canvas(x8, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.7408381713528028, "def solve_da21f6d1(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7410390952301974, "def solve_d7635a44(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_716a174e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_253b805d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410390952301974, "def solve_a676a927(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7410481494354517, "def solve_f4dc5c76(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7411341780448716, "def solve_f2096b1e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c5de83a6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c4e09e7a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_635666e9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_c7444194(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_7d9c0725(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7411341780448716, "def solve_b4aed7d9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7414345790655789, "def solve_0a800fed(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.7414654147115858, "def solve_0c392024(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_bd230512(I):\n    x1 = objects(I, T, T, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.7414654147115858, "def solve_84df100f(I):\n    O = subgrid(I, I)\n    return O"], [0.7414654147115858, "def solve_bd397569(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7414654147115858, "def solve_8662fe6e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_8f0b143a(I):\n    O = subgrid(I, I)\n    return O"], [0.7414654147115858, "def solve_1e890bf3(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor( ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ZERO, x6)\n    return O"], [0.7414654147115858, "def solve_4d895346(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_1e271162(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7414654147115858, "def solve_50c95d2f(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7414654147115858, "def solve_e1663f1d(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.7414654147115858, "def solve_d617735a(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7414654147115858, "def solve_c5ebf15c(I):\n    O = subgrid(I, I)\n    return O"], [0.7414654147115858, "def solve_c306676f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = subgrid(x2, I)\n    return O"], [0.7414654147115858, "def solve_c3d61afd(I):\n    x1 = subgrid(I, I)\n    x2 = ofcolor(x1, ZERO)\n    x3 = asindices(x1)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x1, ONE, x9)\n    x11 = asobject(x1)\n    O = paint(x10, x11)\n    return O"], [0.7414654147115858, "def solve_6826cc57(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = argmax(x2, size)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x3)\n    x6 = toindices(x5)\n    x7 = subgrid(x3, x4)\n    x8 = lbind(shift, x6)\n    x9 = compose(x8, ulcorner)\n    x10 = argmax(x2, x9)\n    O = paint(x7, x10)\n    return O"], [0.7414654147115858, "def solve_3bcc10c4(I):\n    x1 = fgpartition(I)\n    x2 = rbind(other, FIVE)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = mfilter(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7414654147115858, "def solve_635ec628(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, tojvec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7414654147115858, "def solve_a4fcfad4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7414654147115858, "def solve_1e80ad71(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7414654147115858, "def solve_6eab9749(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7414654147115858, "def solve_7b81549e(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7414654147115858, "def solve_fdd753a2(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, x3, x6)\n    return O"], [0.7415879821341823, "def solve_c47b6abd(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7417579528548929, "def solve_2584638b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    x9 = fill(I, THREE, x8)\n    x10 = leastcolor(I)\n    O = fill(x9, x10, x2)\n    return O"], [0.7418642138333315, "def solve_2ef41eed(I):\n    x1 = switch(I, FIVE, EIGHT)\n    O = switch(x1, EIGHT, TWO)\n    return O"], [0.7419294883893283, "def solve_ea8e4685(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7419294883893283, "def solve_e0139862(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7426154889655164, "def solve_fb2aaf40(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, EIGHT, x4)\n    return O"], [0.7426909638249383, "def solve_fe14b80d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_07bc7bf8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_fc85e1e8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_fe4f2046(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_f33b236f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_ab955f5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_bf9ff8c6(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_f587dd24(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7426909638249383, "def solve_f56a5596(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7428561853443109, "def solve_d35d909e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7428561853443109, "def solve_d1c6a0d1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7428561853443109, "def solve_8cef8041(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7428561853443109, "def solve_a3a308dc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7435915732269925, "def solve_eb35c029(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.744309578111282, "def solve_ca2e63dc(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.744309578111282, "def solve_c336986f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.744309578111282, "def solve_d25ff74b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7446400178861889, "def solve_cc3913f6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, THREE, x8)\n    return O"], [0.7453226770852263, "def solve_7a6bf329(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7453226770852263, "def solve_3a7ae0e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7454776898542618, "def solve_a6c6d923(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.7459462735098249, "def solve_1aa8aa90(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.746036831698095, "def solve_ae731499(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.746036831698095, "def solve_0dd0fea7(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7460752553878726, "def solve_87def718(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(first, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7461098366866447, "def solve_6020cdb7(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.7462543122718497, "def solve_dea0c6de(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.7462669862994846, "def solve_b0bb12b6(I):\n    O = dmirror(I)\n    return O"], [0.7462669862994846, "def solve_94df2242(I):\n    O = dmirror(I)\n    return O"], [0.746333046499446, "def solve_149172f1(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    O = fill(x3, EIGHT, x6)\n    return O"], [0.7464704508732226, "def solve_7aefc0d9(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, SIX, x6)\n    return O"], [0.7464740545096182, "def solve_090595df(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_952023cf(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_949e11ed(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_95e1f5bd(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_995d0378(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7464740545096182, "def solve_093d45a4(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7470375666629149, "def solve_641c4fad(I):\n    x1 = canvas(ZERO, TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7471075059718015, "def solve_e57e3d16(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.7476233794761621, "def solve_4c92211f(I):\n    O = rot180(I)\n    return O"], [0.7476233794761621, "def solve_61c15cb1(I):\n    O = rot180(I)\n    return O"], [0.7476233794761621, "def solve_cf3977c7(I):\n    x1 = dmirror(I)\n    x2 = ofcolor(x1, FIVE)\n    x3 = compose(even, last)\n    x4 = sfilter(x2, x3)\n    x5 = fill(x1, ZERO, x4)\n    O = cmirror(x5)\n    return O"], [0.7477556894835988, "def solve_d9c1689d(I):\n    O = hmirror(I)\n    return O"], [0.7480205264928822, "def solve_30cd65e1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7480205264928822, "def solve_5892fbd8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7481170341881848, "def solve_ca7c0ca7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_5ac41180(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_0116f63a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_4d23bdfb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_48a20be5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_4e04410e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_37640ca1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_c47b744d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_b7ac1985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_07802807(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_34d02bd8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_77938cf3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_45579b98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7481170341881848, "def solve_54f42531(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7482565735643151, "def solve_6def0516(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_5a0a1103(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_088f478e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_5b5cad0e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_65f22565(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_66feb675(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7482565735643151, "def solve_12ea1016(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7484974551407092, "def solve_ba808568(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7484974551407092, "def solve_aa743878(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7487022635082722, "def solve_fc7a1cd2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7487022635082722, "def solve_a9ea423d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7487022635082722, "def solve_a4ccf199(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7487035816092084, "def solve_20cfb589(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7487035816092084, "def solve_c4d662f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7487035816092084, "def solve_c209138f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7487035816092084, "def solve_eafcc2cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.749321253046244, "def solve_04afbd25(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_dd66d4d8(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.749321253046244, "def solve_27604466(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7493770004739405, "def solve_db2b3ef5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.7493770004739405, "def solve_6368fafd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.7493770004739405, "def solve_a928d1e8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.7496450540478259, "def solve_47da62e8(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.7498499462550435, "def solve_1ed0f29e(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7502934600072129, "def solve_5891b45d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, FOUR, x4)\n    return O"], [0.7516087933992682, "def solve_7e7a4dff(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7516087933992682, "def solve_a5917d87(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7516087933992682, "def solve_b35d6061(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7516087933992682, "def solve_818bb270(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7516087933992682, "def solve_57e90ff2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7518753424364076, "def solve_ca25a111(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7518753424364076, "def solve_3ea6f7ae(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7518753424364076, "def solve_6f52b8e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7518753424364076, "def solve_6b5ec5c6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7518753424364076, "def solve_78f894b0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7523054031940104, "def solve_abf4e182(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = fill(x11, ZERO, x7)\n    x13 = ofcolor(x12, ZERO)\n    x14 = asindices(x12)\n    x15 = ofcolor(x12, TWO)\n    x16 = mapply(ineighbors, x15)\n    O = fill(x12, ZERO, x16)\n    return O"], [0.7529344651823884, "def solve_d9a5abeb(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, FOUR, x5)\n    return O"], [0.753074068490033, "def solve_a1b6a9b4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x4, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x4, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x4, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7588892456530311, "def solve_47ff83cc(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.7701181820872997, "def solve_f742d004(I):\n    x1 = switch(I, FOUR, EIGHT)\n    x2 = switch(x1, TWO, FOUR)\n    x3 = switch(x2, ONE, FOUR)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.770283578319142, "def solve_e1d87129(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_f1eccfa6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_e631ca4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_60dce097(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_92cca2ad(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_4767b213(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_7c821108(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_9020706d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_54bb6e26(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_d9ab51fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.770283578319142, "def solve_0034d50a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7871062946758173, "def solve_18cebbff(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7874565695832656, "def solve_1ffcec24(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, T)\n    x3 = fork(connect, ulcorner, centerofmass)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, x1, x4)\n    O = replace(x5, ZERO, THREE)\n    return O"], [0.80795722245379, "def solve_b6d682da(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [1.0, "def solve_e429b307(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(O)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [1.0, "def solve_2efc50dd(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c75443ff(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = shape(x3)\n    x5 = canvas(ZERO, x4)\n    x6 = hconcat(x3, x5)\n    x7 = palette(x6)\n    x8 = remove(ZERO, x7)\n    x9 = other(x8, FOUR)\n    x10 = ofcolor(x6, x9)\n    x11 = ofcolor(x6, FOUR)\n    x12 = fill(x5, NINE, x11)\n    x13 = mapply(vfrontier, x10)\n    x14 = mapply(hfrontier, x11)\n    x15 = fill(x12, NEG_ONE, x14)\n    x16 = fill(x15, FOUR, x13)\n    x17 = fill(x16, ZERO, x12)\n    O = fill(x17, FIVE, x16)\n    return O"], [1.0, "def solve_dc193ef5(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = mostcolor(I)\n    x9 = inbox(x7)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = matcher(first, x8)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x11, x13)\n    x15 = hfill(I, TWO, x14)\n    x16 = color(x7)\n    x17 =box(x7)\n    x18 = fill(x15, x16, x17)\n    x19 = subgrid(x15, x18)\n    x20 = asobject(x19)\n    x21 = matcher(first, x8)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x25, hsplit, vsplit)\n    x27 = x26(I, TWO)\n    x28 = shape(x27)\n    x29 = canvas(x8, x28)\n    x30 = multiply(x28, x29)\n    x31 = shift(x23, x30)\n    x32 = paint(x29, x31)\n    x33 = rbind(contained, x32)\n    x34 = sfilter(x17, x33)\n    x35 = compose(hline, vline)\n    x36 = sfilter(x14, x35)\n    x37 = subgrid(x36, x32)\n    O = paint(x37, x31)\n    return O"], [1.0, "def solve_2b697a73(I):\n    x1 = astuple(I, THREE)\n    x2 = astuple(x1, x1)\n    x3 = astuple(LEFT, UNITY)\n    x4 = astuple(NEG_UNITY, x3)\n    x5 = astuple(rot90, x4)\n    x6 = astuple(rot180, x4)\n    x7 = astuple(rot270, x4)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x10, x6)\n    O = underfill(I, ZERO, x11)\n    return O"], [1.0, "def solve_2e99ed2b(I):\n    x1 = frontiers(I)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    O = move(x2, x100, x2)\n    return O"], [1.0, "def solve_461a90fb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = add(x23, x18)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = paint(I, x26)\n    x28 = ofcolor(x27, x9)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = paint(x27, x30)\n    return O"], [1.0, "def solve_f5ff553e(I):\n    x1 = objects(I, T, F, T)\n    x2 = Tizefilter(x1, ONE)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.0, "def solve_c8bbd18c(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = ulcorner(x1)\n    x6 = toindices(x5)\n    x7 = shape(x3)\n    x8 = add(x5, x7)\n    x9 = initset(x8)\n    x10 = shift(x3, x9)\n    x11 = toindices(x10)\n    x12 = fgpartition(x2)\n    x13 = merge(x12)\n    x14 = cover(I, x13)\n    x15 = fgpartition(x2)\n    x16 = merge(x15)\n    x17 = paint(x14, x16)\n    x18 = height(x11)\n    x19 = width(x11)\n    x20 = divide(x18, x19)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = Fgpartition(x17)\n    x24 = merge(x23)\n    x25 = mostcolor(I)\n    x26 = combine(x23, x24)\n    x27 = fill(x17, x25, x26)\n    x28 = astuple(x27, x920)\n    x29 = canvas(ZERO, x28)\n    x30 = asindices(x29)\n    x31 = recolor(x25, x30)\n    x32 = lbind(shift, x31)\n    x33 = occurrences(x27, x32)\n    x34 = mapply(x33, x22)\n    O = fill(x27, x25, x34)\n    return O"], [1.0, "def solve_88cbc542(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = argmin(x2, x3)\n    x5 = colorfilter(x1, x4)\n    x6 = rbind(vmatching, x4)\n    x7 = rbind(hmatching, x4)\n    x8 = fork(either, x6, x7)\n    x9 = extract(x5, x8)\n    x10 = rbind(gravitate, x4)\n    x11 = compose(center, x10)\n    x12 = fork(add, center, x11)\n    x13 = fork(connect, x12, backdrop)\n    x14 = shape(x9)\n    x15 = maximum(x14)\n    x16 = interval(ONE, x15, ONE)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(shift, x9)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = canvas(ZERO, x4)\n    return O"], [1.0, "def solve_23d7a91f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_506ee0e1(I):\n    x1 = height(I)\n    x2 = rot90(I)\n    x3 = subtract(x1, TWO)\n    x4 = multiply(NEG_ONE, THREE)\n    x5 = tojvec(x3)\n    x6 = shift(x2, x5)\n    O = underfill(I, THREE, x6)\n    return O"], [1.0, "def solve_0f8aa01b(I):\n    x1 = initset(identity)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [1.0, "def solve_03687d0a(I):\n    x1 = lbind(apply, maximum)\n    x2 = lbind(apply, downscale)\n    x3 = chain(x1, x2, frontiers)\n    x4 = fork(positive, size, dedupe)\n    x5 = lbind(apply, shape)\n    x6 = height(I)\n    x7 = lbind(pair, I)\n    x8 = chain(x4, x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = compose(color, x8)\n    x11 = fork(both, x9, x10)\n    x12 = extract(x10, x11)\n    x13 = rbind(colorcount, x12)\n    x14 = argmin(x12, x13)\n    x15 = delta(x14)\n    x16 = astuple(x11, x10)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x15, x17)\n    x19 = mpapply(recolor, x18, x13)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_b735f956(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, NINE, ZERO)\n    x3 = colorfilter(x1, NINE)\n    x4 = mapply(d4f5)\n    x5 = fill(x2,140, x4)\n    x6 = mapply(ff805, x5)\n    O = fill(x5, ONE, x6)\n    return O"], [1.0, "def solve_e3198cc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x39, x7)\n    x11 = remove(x8, x10)\n    x22 = merge(x11)\n    x23 = color(x12)\n    x24 = color(x8)\n    x25 = combine(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, x13, x26)\n    return O"], [1.0, "def solve_d1cadab6(I):\n    x1 = mostcolor(I)\n    x2 = box(I)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [1.0, "def solve_25b615f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = add(x26, THREE)\n    x8 = connect(x7, x7)\n    O = fork(recolor, color, x8)\n    return O"], [1.0, "def solve_52edf60f(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_97ffdbba(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = fork(equality, toindices, box)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, F, F, T)\n    x6 = sfilter(x5, x4)\n    x7 = difference(x5, x6)\n    O = fill(I, FOUR, x7)\n    return O"], [1.0, "def solve_d46a2c69(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, x7)\n    x9 = x6(x8)\n    x10 = branch(x5, compress, vmirror)\n    x11 = x5(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da77fe4c(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 =outbox(x13)\n    x15 = ulcorner(x14)\n    x16 = invert(x15)\n    x17 = shift(x16, UNITY)\n    x18 = shift(x16, LEFT)\n    x19 = interval(x17, x18, ONE)\n    x20 = apply(tojvec, x19)\n    x21 = apply(vfrontier, x20)\n    x22 = mapply(x21, x2)\n    x23 = combine(x17, x17)\n    x24 = fill(x8, x1, x23)\n    x25 = fill(x24, x2, x22)\n    O = fill(x25, x23, x24)\n    return O"], [1.0, "def solve_21f49bcf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9be1488a(I):\n    x1 = lbind(adjacent, I)\n    x2 = compose(x1, size)\n    x3 = fork(both, x2, box)\n    x4 = fork(both, x3, height)\n    x5 = fork(both, x4, width)\n    x6 = fork(both, hline, vline)\n    x7 = fork(both, center, rot90)\n    x8 = fork(both, center, rot270)\n    x9 = fork(both, x5, x6)\n    x10 = fork(both, x6, x8)\n    x11 = fork(connect, lefthalf, tophalf)\n    x12 = fork(branch, x11, x10)\n    x13 = fork(x12, positive, branch)\n    x14 = branch(x13, size, x7)\n    x15 = maximum(x14)\n    x16 = rot90(I)\n    x17 = double(x16)\n    x18 = interval(ONE, x17, ONE)\n    x19 = center(I)\n    x20 = pair(x18, x19)\n    x21 = objects(x23, F, T, T)\n    x22 = rbind(add, RIGHT)\n    x23 = compose(x22, center)\n    x24 = color(x23)\n    x25 = interval(ZERO, x17, ONE)\n    x26 = rbind(add, DOWN)\n    x27 = compose(x26, x23)\n    x28 = astuple(x15, x17)\n    x29 = astuple(x24, x23)\n    x30 = combine(x28, x29)\n    x31 = rbind(shoot, UP)\n    x32 = mapply(x31, x30)\n    x33 = fill(x23, FOUR, x32)\n    x34 = subgrid(x33, x20)\n    O = trim(x34)\n    return O"], [1.0, "def solve_541837c3(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_73bd7ba7(I):\n    x1 = trim(I)\n    x2 = repeat(dedupe, x1)\n    x3 = repeat(x2, ONE)\n    x4 = compress(x3)\n    x5 = width(x4)\n    x6 = halve(x5)\n    x7 = upscale(x4, x6)\n    x8 = height(x4)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = lbind(shift, x4)\n    x12 = mapply(x11, x10)\n    O = paint(x4, x12)\n    return O"], [1.0, "def solve_307cd6bd(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = shape(I)\n    x4 = multiply(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = ofcolor(I, x2)\n    x7 = lbind(shift, x6)\n    x8 = shape(I)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x6)\n    x11 = mapply(x7, x10)\n    O = fill(x5, x2, x11)\n    return O"], [1.0, "def solve_b8608c19(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = partition(I)\n    x4 = fork(multiply, height, width)\n    x5 = argmin(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = height(I)\n    x8 = divide(x7, THREE)\n    x9 = width(I)\n    x10 = interval(THREE, x9, ONE)\n    x11 = pair(x5, x10)\n    x12 = sfilter(x11, last)\n    x13 = fork(add, first, last)\n    x14 = rbind(multiply, x8)\n    x15 = apply(x14, x12)\n    x16 = mapply(x13, x15)\n    O = fill(I, x1, x16)\n    return O"], [1.0, "def solve_6b1bba2a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_4331602b(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_736ac3e7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_d24d1a03(I):\n    x1 = astuple(TEN, TEN)\n    x2 = canvas(ZERO, x1)\n    x3 = argmin(x2, size)\n    x4 = last(x2)\n    x5 = remove(x3, x2)\n    x6 = recolor(FIVE, x5)\n    x7 = recolor(lrcorner, x5)\n    x8 = add(x7, UNITY)\n    x9 = initset(x8)\n    x10 = insert(x6, x9)\n    x11 = branch(x4, x10, x3)\n    O = canvas(ZERO, x1)\n    return O"], [1.0, "def solve_a31d55d6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = matcher(first, x22)\n    x24 =sfilter(x21, x23)\n    x25 = chain(size, dedupe, first)\n    x26 = argmax(x24, x25)\n    x27 = matcher(first, x22)\n    x28 = sfilter(x24, x27)\n    x29 = difference(x28, x26)\n    x30 =matcher(first, x22)\n    x31 = sfilter(x29, x30)\n    x32 = combine(x26, x31)\n    x33 = mapply(x15, x32)\n    x34 = fill(I, THREE, x33)\n    O = fill(x34, EIGHT, x22)\n    return O"], [1.0, "def solve_2e5054dc(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_eb863460(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_487cb3b2(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_bb497512(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_bb563887(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_6ba5084d(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = index(x4, DOWN)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = lrcorner(x6)\n    x10 = shoot(x9, NEG_UNITY)\n    x11 = llcorner(x6)\n    x12 = shoot(x11, DOWN_LEFT)\n    x13 = combine(x8, x12)\n    x14 =Rbind(shoot, xdelta)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = fill(x4, THREE, x16)\n    x18 = replace(x17, FIVE, ZERO)\n    O = x5(x18)\n    return O"], [1.0, "def solve_e2fd9a2f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [1.0, "def solve_77fc21b4(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = lbind(colorfilter, x3)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, TWO)\n    x9 = palette(x2)\n    x10 = sfilter(x9, x8)\n    x11 = fork(equality, toindices, box)\n    x12 = rbind(contained, x5)\n    x13 = compose(x12, first)\n    x14 = rbind(contained, x10)\n    x15 = compose(x14, first)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x11, x16)\n    x18 = extract(x5, x17)\n    x19 = other(x5, x18)\n    x20 = ofcolor(x4, x19)\n    x21 = rightmost(x20)\n    x22 = manhattan(x21, x18)\n    x23 = uppermost(x20)\n    x24 = decrement(x23)\n    x25 = leftmost(x20)\n    x26 = rbind(add, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x40, x27)\n    x29 = rbind(vmatching, x20)\n    x30 = sfilter(x4, x29)\n    x31 = fork(either, vline, hline)\n    x32 = mfilter(x30, x31)\n    x33 = fill(x1, x19, x32)\n    x34 = replace(x33, x19, x5)\n    O = fill(x34, x10, x32)\n    return O"], [1.0, "def solve_56db1905(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, EIGHT, x4)\n    x6 = matcher(numcolors, ONE)\n    x7 = objects(x5, F, F, T)\n    x8 = difference(x7, x2)\n    x9 = fill(x5, TWO, x8)\n    x10 = colorfilter(x9, EIGHT)\n    x11 = rbind(adjacent, x2)\n    x12 = mfilter(x10, x11)\n    x13 = mfilter(x10, x12)\n    x14 = underfill(x9, THREE, x13)\n    x15 = rbind(adjacent, x2)\n    x16 = mfilter(x14, x15)\n    x17 = mfilter(x14, x16)\n    x18 = colorfilter(x17, TWO)\n    x19 = rbind(adjacent, x2)\n    x20 = mfilter(x18, x19)\n    x21 = mfilter(x18, x20)\n    x22 = fill(x9, THREE, x21)\n    O = replace(x22, EIGHT, ONE)\n    return O"], [1.0, "def solve_d7e0530a(I):\n    x1 = ofcolor(I, TWO)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = lbind(recolor, TWO)\n    x7 = chain(x6, x5, first)\n    x8 = chain(x5, x7, last)\n    x9 = fork(combine, first, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(multiply, first, x10)\n    x12 = compose(x4, last)\n    x13 = chain(x12, x11, x41)\n    x14 = fork(apply, x13, x11)\n    x15 = power(x14, TWO)\n    x16 = fork(difference, x9, last)\n    x17 = fork(recolor, x15, x16)\n    x18 = apply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f29eedf7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_ab3062e4(I):\n    x1 = remove(ZERO, x1)\n    x2 = astuple(x1, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = hmirror(x3)\n    x5 = vconcat(x3, x4)\n    x6 = double(x1)\n    x7 = astuple(x6, x5)\n    x8 = crop(I, DOWN, x7)\n    O = vconcat(x5, x8)\n    return O"], [1.0, "def solve_662408df(I):\n    x1 = ofcolor(I, TWO)\n    x2 = urcorner(x1)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = shoot(x2, DOWN_LEFT)\n    x5 = underfill(I, THREE, x3)\n    x6 = underfill(x5, ONE, x4)\n    x7 = rbind(shoot, LEFT)\n    x8 = mapply(x7, x3)\n    x9 = mapply(x7, x4)\n    x10 = underfill(x6, ONE, x9)\n    O = underfill(x10, THREE, x8)\n    return O"], [1.0, "def solve_a65d5fa7(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = initset(x3)\n    x5 = cover(I, x4)\n    x6 = upscale(x5, TWO)\n    x7 = shape(x6)\n    x8 = add(x6, TWO_BY_ZERO)\n    x9 = canvas(ZERO, x8)\n    x10 = asobject(x9)\n    x11 = shift(x10, UNITY)\n    O = paint(x9, x11)\n    return O"], [1.0, "def solve_fccc23eb(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = rbind(argmin, x83750696)\n    x10 = compose(x9, subgrid)\n    x11 = apply(x10, x5)\n    x12 = mapply(x8, x11)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_76d76b54(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 =intersection(x2, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x3, I)\n    x10 = increment(x4)\n    x11 = divide(x10, FOUR)\n    x12 = x11(x9)\n    x13 = hconcat(x9, x12)\n    x14 = hconcat(x13, x5)\n    x15 = vconcat(x13, x14)\n    x16 = vconcat(x15, x5)\n    O = cellwise(x16, x7, ZERO)\n    return O"], [1.0, "def solve_5a8b3933(I):\n    x1 = subgrid(I, I)\n    x2 = astuple(ONE, THREE)\n    x3 = astuple(TWO, FOUR)\n    x4 = initset(x2)\n    x5 = insert(x3, x4)\n    x6 = insert(x1, x5)\n    x7 = prapply(connect, x6, toindices)\n    x8 =8091409464\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = x9(x7)\n    x11 = halve(x1)\n    x12 = astuple(x11, x11)\n    x13 = x9(x12)\n    x14 = height(x10)\n    x15 = decrement(x14)\n    x16 = lbind(astuple, x15)\n    x17 = apply(x16, x13)\n    x18 = ZERO(x17)\n    x19 = fill(x1, EIGHT, x18)\n    x20 = fill(x19, FOUR, x7)\n    O = fill(x20, FOUR, x10)\n    return O"], [1.0, "def solve_5f806a07(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_b8e6e30f(I):\n    x1 = astuple(287, dmirror)\n    x2 = astuple(cmirror, NEG_ONE, x1)\n    x3 = hsplit(I, x2)\n    x4 = rbind(ofcolor, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = merge(x6)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_6f0e02fa(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    O = upscale(I, x2)\n    return O"], [1.0, "def solve_94a80115(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = equality(x1, x2)\n    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x5 = branch(x3, x2, x4)\n    x6 = vconcat(I, x5)\n    O = replace(x6, ONE, TWO)\n    return O"], [1.0, "def solve_52404df0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, identity)\n    x3 = branch(x1, decrement, height)\n    x4 = x3(I)\n    x5 = astuple(ONE, x4)\n    x6 = x2(I)\n    x7 = crop(x6, ORIGIN, x5)\n    x8 = branch(x7, decrement, width)\n    x9 = x8(x4)\n    x10 = astuple(ONE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = rot90(x11)\n    x13 = hconcat(x12, x1)\n    x14 = hsplit(x13, THREE)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = objects(x11, F, T, T)\n    x18 = ofcolor(x11, ONE)\n    x19 = ofcolor(x11, TWO)\n    x20 = rbind(shoot, DOWN)\n    x21 = mapply(x20, x17)\n    x22 = rbind(shoot, UP_RIGHT)\n    x23 = mapply(x22, x19)\n    x24 = fill(x11, ONE, x21)\n    x25 = fill(x24, TWO, x23)\n    x26 = fill(x25, ONE, x25)\n    O = x2(x26)\n    return O"], [1.0, "def solve_b0001103(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = objects(x14, T, F, T)\n    x21 = other(x20, x13)\n    x22 = subgrid(x21, x15)\n    x23 = llcorner(x9)\n    x24 = urcorner(x9)\n    x25 = shoot(x28, UNITY)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = shoot(x24, UP_RIGHT)\n    x28 = combine(x26, x27)\n    O = fill(x10, x3, x28)\n    return O"], [1.0, "def solve_311956be(I):\n    x1 = mostcolor(I)\n    x2 = hconcat(I, I)\n    x3 = upscale(I, THREE)\n    x4 = asobject(x3)\n    x5 = hperiod(x4)\n    x6 = vperiod(x4)\n    x7 = hperiod(x6)\n    x8 = vperiod(x6)\n    x9 = hperiod(x8)\n    x10 = hperiod(x4)\n    x11 = hperiod(x5)\n    x12 = hperiod(x6)\n    x13 = hperiod(x5)\n    x14 = vperiod(x6)\n    x15 = hperiod(x5)\n    x16 = vperiod(x6)\n    x17 = hperiod(x5)\n    x18 = hperiod(x6)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x4)\n    x25 = mapply(x24, x23)\n    x26 = paint(I, x25)\n    x27 = occurrences(x26, x4)\n    x28 = mapply(toindices, x27)\n    O = fill(x26, x1, x28)\n    return O"], [1.0, "def solve_9cdca2ab(I):\n    x1 = asobject(I)\n    x2 = leastcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = canvas(ZERO, x11)\n    x13 = paint(x12, x10)\n    O = paint(x13, x12)\n    return O"], [1.0, "def solve_400acd80(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argtoindices(x14)\n    x26 = x24(x25)\n    x27 = ofcolor(x15, x13)\n    x28 = intersection(x26, x27)\n    x29 = rbind(contained, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x22, x30)\n    x32 = lbind(shift, x24)\n    x33 = height(x12)\n    x34 = rbind(multiply, x33)\n    x35 = chain(x32, x34, last)\n    x36 = mapply(x35, x31)\n    x37 = paint(x14, x36)\n    O = x15(x37)\n    return O"], [1.0, "def solve_4f251d09(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_6e640b67(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = combine(x4, x6)\n    x6 = shape(x2)\n    x7 = hfrontier(x6)\n    x8 = insert(x3, x7)\n    x9 = fill(I, x3, x8)\n    x10 = hmirror(x2)\n    x11 = objects(x10, F, F, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, x9)\n    x14 = paint(x9, x13)\n    x15 = normalize(x12)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x14, x17)\n    return O"], [1.0, "def solve_2c118383(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_cb4194cd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x22 = combine(x8, x9)\n    x23 = intersection(x11, x12)\n    x24 = difference(x22, x23)\n    x25 = toobject(x24, I)\n    x26 = color(x25)\n    x27 = subgrid(x9, I)\n    x28 = solve(x27, x26)\n    x29 = replace(x28, x10, x264)\n    x30 = ofcolor(x29, x27)\n    x31 = subgrid(x30, x29)\n    x32 = numbercolors(x31)\n    x33 = first(x32)\n    x34 = normalize(x33)\n    x35 = last(x32)\n    x36 = remove(x34, x32)\n    x37 = remove(x35, x32)\n    x38 = combine(x36, x37)\n    x39 = fill(x29, x27, x38)\n    x40 = ofcolor(x39, x706)\n    x41 = replace(x39, x10, x04)\n    x42 = ofcolor(x41, x727)\n    x43 = rightmost(x40)\n    x44 = equality(x43, x82)\n    x45 = branch(x44, x41, x45)\n    x46 = rbind(shoot, DOWN)\n    x47 = mapply(x46, x34)\n    x48 = difference(x47, x41)\n    O = fill(x43, x27, x48)\n    return O"], [1.0, "def solve_7713104a(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = mapply(x22, x21)\n    O = fill(x7, x18, x23)\n    return O"], [1.0, "def solve_cbf7423c(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = halve(x2)\n    x4 = rbind(shoot, UP_RIGHT)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = fork(combine, x4, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(combine, x6, x9)\n    x11 = height(I)\n    x12 = rbind(valmax, x11)\n    x13 = hmatching(x12, x1)\n    x14 = branch(x13, x11, x10)\n    x15 = extract(x14, x14)\n    x16 = subgrid(x15, I)\n    O = trim(x16)\n    return O"], [1.0, "def solve_01da4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x3, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = argmin(x11, size)\n    x13 = subgrid(x12, I)\n    x14 = llcorner(x12)\n    x15 = replace(x13, x4, ZERO)\n    x16 = replace(x15, x17, x13)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = hconcat(x17, x14)\n    x21 = hconcat(x18, x15)\n    x22 = vconcat(x20, x21)\n    x23 = vconcat(x22, x17)\n    O = vconcat(x22, x18)\n    return O"], [1.0, "def solve_eaa6aa55(I):\n    x1 = objects(I, F, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = lbind(shift, x3)\n    x5 = apply(x4, x1)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = apply(x7, x5)\n    x9 = mapply(x4, x8)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_fdfcbe93(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1,x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [1.0, "def solve_1c41ed9f(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_23f7d8ef(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_05befef2(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = switch(x1, NEG_ONE, TWO)\n    x4 = switch(x2, EIGHT, x3)\n    x5 = combine(x4, x4)\n    x6 = intersection(x5, x4)\n    x7 = hmirror(x6)\n    x8 = vmirror(x6)\n    x9 = objects(x8, T, F, T)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 =dfmirror(x6)\n    x13 = toindices(x12)\n    x14 = rbind(first, x13)\n    x15 = toindices(x14)\n    x16 = mapply(x16, x9)\n    x17 = fill(x6, EIGHT, x13)\n    x18 = fill(x17, FOUR, x15)\n    O = fill(x18, ONE, x16)\n    return O"], [1.0, "def solve_5d13204b(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(fork, maximum)\n    x6 = lbind(lbind, subgrid)\n    x7 = lbind(compose, x5)\n    x8 = chain(x7, x6, x4)\n    x9 = lbind(colorcount, I)\n    x10 = compose(x9, x8)\n    x11 = fork(equality, x8, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_4d0d0b26(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4ea1adf2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_663bbba3(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = urcorner(x2)\n    x15 = ulcorner(x3)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = shoot(x12, UP_RIGHT)\n    x18 = shoot(x13, NEG_UNITY)\n    x19 = shoot(x11, UNITY)\n    x20 = shoot(x15, DOWN_LEFT)\n    x21 = shoot(x16, UP_RIGHT)\n    x22 = fork(combine, x14, x17)\n    x23 = fork( combine, x16, x18)\n    x24 = fork(combine, x22, x23)\n    x25 = x24(x2)\n    x26 = dmirror(x25)\n    x27 = invert(x26)\n    x28 = shape(x2)\n    x29 = canvas(ZERO, x28)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = asindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = mapply(x33, x31)\n    O = paint(x39, x34)\n    return O"], [1.0, "def solve_6866a66a(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_39f0038f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9d184417(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_44e6e0c8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_888867e7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_8ecafcbd(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_5cef4f22(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_dca06431(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_205c1eb7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_37a67f0e(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = chain(invert, center, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = astuple(identity, rot90)\n    x7 = astuple(rot180, rot270)\n    x8 = combine(x6, x7)\n    x9 = argmax(x8, x4)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = combine(x4, x11)\n    x13 = urcorner(x12)\n    x14 = shoot(x13, DOWN_LEFT)\n    x15 = combine(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = mapply(x6, x12)\n    x18 = combine(x6, x17)\n    x19 = fill(I, ONE, x18)\n    O = objects(x19, T, F, T)\n    return O"], [1.0, "def solve_22d10acb(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = x1(I, TWO)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = palette(x3)\n    x6 = width(x3)\n    x7 = rbind(repeat, x6)\n    x8 = compose(x7, merge)\n    x9 = matcher(x8, ONE)\n    x10 = compose(flip, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(x11, first)\n    x13 = rbind(sfilter, x12)\n    x14 = compose(x13, first)\n    x15 = fork(combine, x12, x14)\n    x16 = fork(recolor, x12, x15)\n    x17 = mapply(x16, x5)\n    O = paint(x3, x17)\n    return O"], [1.0, "def solve_f4d7c72f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x8)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_bf67fac6(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x55(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [1.0, "def solve_fbe9c8e6(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2c7776e6(I):\n    x1 = frontiers(I)\n    x2 = matcher(color, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(I, T, T, F)\n    x13 = colorfilter(x12, x11)\n    x14 = rbind(manhattan, x13)\n    x15 = chain(even, x14, initset)\n    x16 = sfilter(x13, x15)\n    x17 = compose(man, first)\n    x18 = apply(x17, x16)\n    x19 = branch(x6, x18, x111)\n    x20 = canvas(x11, THREE_BY_THREE)\n    x21 = matcher(first, x10)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x13, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x5, x22, x25)\n    O = canvas(x26, UNITY)\n    return O"], [1.0, "def solve_1ed4b2d8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices755(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_82ac6801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = x25(x22)\n    O = fill(x14, THREE, x26)\n    return O"], [1.0, "def solve_bca5b96d(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_5ce4c359(I):\n    x1 = frontiers(I)\n    x2 = rot98(I)\n    x3 = color(x2)\n    x4 = asobject(x2)\n    x5 = hperiod(x4)\n    x6 = apply(tojvec, x5)\n    x7 = increment(x6)\n    x8 = NEG_ONE(x7)\n    x9 = lbind(shift, x4)\n    x10 = height(I)\n    x11 = lbind(multiply, x10)\n    x12 = chain(x9, x11, last)\n    x13 = apply(x12, x7)\n    x14 = paint(I, x13)\n    x15 = mapply(x7, x1)\n    O = paint(x14, x15)\n    return O"], [1.0, "def solve_22ee5453(I):\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = vmirror(x2)\n    x6 = hconcat(x44, x5)\n    O = hconcat(x6, x2)\n    return O"], [1.0, "def solve_14f20b2c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_6f1a59c9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = shift(x2, x3)\n    x5 = paint(x1, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(x5, ONE, x8)\n    return O"], [1.0, "def solve_a7dd016d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(comb28, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_78fb1eb8(I):\n    x1 = lbind(occurrences, I)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 = fork(apply, x3, x1)\n    x5 = compose(positive, size)\n    x6 = rbind(compose, x4)\n    x7 = lbind(lbind, occurrences)\n    x8 = compose(x6, x7)\n    x9 = fork(compose, x5, x8)\n    x10 = compose(x1, x9)\n    x11 = fork(ofcolor, x10, identity)\n    x12 = chain(x6, x3, x11)\n    x13 = fork(mapply, x12, x11)\n    x14 = product(x1, x1)\n    x15 = power(x13, TWO)\n    x16 = astuple(x15, x12)\n    x17 = astuple(x14, x12)\n    x18 = astuple(x16, x17)\n    x19 = hfrontier(x18)\n    O = underfill(I, SIX, x19)\n    return O"], [1.0, "def solve_b390b195(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind( occurrences, TWO)\n    x6 = chain(first, x5, numcolors)\n    x7 = compose(x6, toindices)\n    x8 = fork(sfilter, identity, x7)\n    x9 = chain(x6, asobject, x8)\n    x10 = fork(shift, x9, ulcorner)\n    x11 = mapply(x10, x4)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = pair(x14, x14)\n    x16 = mapply(x9, x15)\n    O = paint(x12, x16)\n    return O"], [1.0, "def solve_04f035af(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_adc28b62(I):\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(SIX)\n    x7 = toivec(THREE)\n    x8 = insert(x6, x7)\n    x9 = tojvec(THREE)\n    x10 = insert(x6, x9)\n    x11 = fork(combine, identity, hmirror)\n    x12 = fork(combine, identity, vmirror)\n    x13 = x11(x12)\n    x14 = x11(x12)\n    x15 = paint(x13, x14)\n    x16 = paint(x15, x13)\n    O = x10(x16)\n    return O"], [1.0, "def solve_29e8bfe4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, hline)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_0494d546(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_a8f918ef(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = repeat(I, x1)\n    x3 = astuple(TWO, FIVE)\n    x4 = interval(THREE, x3, ONE)\n    x5 = prapply(recolor, x2)\n    x6 = lbind(mapply, vfrontier)\n    x7 = compose(x6, toindices)\n    x8 = fork(combine, x7, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_161660c3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f3b3318a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(I)\n    x18 = halve(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(shift, x2)\n    x21 = compose(x19, x20)\n    x22 = compose(x11, x21)\n    x23 = fork(combine, x21, x22)\n    x24 = compose(flip, x23)\n    x25 = mapply(x24, x4)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_4916fa47(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_d4d355c3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =e509e(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.0, "def solve_61a1ac03(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fork(equality, identity, vmirror)\n    x14 = mfilter(x6, x15)\n    O = underpaint(x5, x14)\n    return O"], [1.0, "def solve_9d6bfe8c(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_0af416ba(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_1ac28fec(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = objects(x7, T, F, F)\n    x10 = palette(x9)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x13, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.0, "def solve_7e6b9c4d(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_6c71573c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_0fe00193(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d05ed9d9(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.1, "def solve_e0527c88(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = mapply(x15, x13)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x21, x16)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x34)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x34)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x34)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x34)\n    x"], [1.1, "def solve_56d62acb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = x12(x7)\n    x9 = shape(x6)\n    x10 = increment(x9)\n    x11 = multiply(x10, x5)\n    x12 = canvas(x3, x11)\n    x13 = hconcat(x12, x12)\n    x14 = hconcat(x5, x13)\n    x15 = partition(x14)\n    x16 = apply(color, x15)\n    x17 = cover(I, x16)\n    x18 = argmax(x16, width)\n    x19 = astuple(x18, ulcorner)\n    x20 = canvas(x9, x19)\n    x21 = fill(x20, NEG_ONE, x19)\n    x22 = merge(x15)\n    x23 = cover(x21, x22)\n    x24 = asindices(x23)\n    x25 = ofcolor(x14, NINE)\n    x26 = difference(x24, x25)\n    x27 = fill(x14, NEG_ONE, x26)\n    x28 = ofcolor(x27, NINE)\n    x29 = subgrid(x28, x27)\n    x30 = asindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shift)\n    x33 = compose(x31, x32)\n    x34 = fork(combine, x33, x31)\n    x35 = mapply(x34, x29)\n    x36 = fill(x27, NEG_ONE, x35)\n    x37 = shift(x31, x33)\n    x38 = toindices(x37)\n    x39 = rbind(mapply, x38)"], [1.1, "def solve_0b057963(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, colorcount)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, colorcount)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = canvas(ZERO, x34)\n    x36 = lbind(multiply, x33)\n    x377 = apply(x36, x3)\n    x38 = lbind(shift, x10)\n    x39 = mapply(x38, x37)\n    O = fill("], [1.1, "def solve_03f2bda7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(argmax, x38)\n    x40 = mapply(x39, x32)\n    x41 = ofcolor(I, x4)\n    x42 = rbind(adjacent, x41)"], [1.1, "def solve_7adda415(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =6954025dad(I):\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(cmirror, dmirror)\n    x11 = astuple(hmirror, vmirror)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = astuple(NEG_TWO, rmirror)\n    x15 = astuple(fafffa47, x14)\n    x16 = combine(x13, x15)\n    x17 =173333(x16)\n    x18 = height(I)\n    x19 = astuple(x18, hsplit)\n    x20 = canvas(x4, x19)\n    x21 =6(I)\n    x22 = subgrid(x21, x20)\n    x23 = rot90(x22)\n    x24 = width(x23)\n    x25 = rbind(repeat, x24)\n    x26 = chain(rot90, x25, hmirror)\n    x27 = matcher(x26, x23)\n    x28 = objects(x22, F, F, T)\n    x29 = sfilter(x28, x27)\n    x30 = argmax(x29, size)\n    x31 = matcher(first, x4)\n    x32 = rbind(sfilter, x31)\n    x33 = lbind(recolor, x4)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x31)\n    x36 = fork(combine, x30, x35)\n    x37 = lbind(recolor, x10)\n    x38 = rbind(sfilter, x36)\n    x"], [1.1, "def solve_6207143f(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x35, x28)\n    x37 = lbind(shift, x24)\n    x38 = mapply(x37, x36)\n    x39 = fill(x23, TWO, x38)\n"], [1.1, "def solve_48ca015c(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_2c8b5bcb(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_34c1043f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x31 = last(x28)\n    x32 = x29(I)\n    x33 = palette(I)\n    x34 = lbind(ofcolor, x33)\n    x35 = compose(normalize, x34)\n    x36 = matcher(x35, x12)\n    x37 = extract(x33, x36)\n    x38 = remove(x37, x33)\n    x39 = lbind(colorcount, x33)\n    x40 = argmin(x38, x39)\n    "], [1.1, "def solve_ab01fcf9(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_d7ecd998(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = x9(I)\n    x11 = index(x10, ORIGIN)\n    x12 = width(x10)\n    x13 = multiply(x12, x12)\n    x14 = bottomhalf(x10)\n    x15 = rbind(rapply, x14)\n    x16 = compose(first, x15)\n    x17 = chain(x13, x15, x16)\n    x18 = matcher(x17, ZERO)\n    x19 = sfilter(x11, x18)\n    x20 = merge(x19)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = fork(astuple, x21, x22)\n    x24 = initset(x13)\n    x25 = matcher(x23, x24)\n    x26 = compose(flip, x25)\n    x27 = extract(x19, x26)\n    x28 = x27(x252)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 =586(x29, x30)\n    x32 = ofcolor(x31, x11)\n    x33 = x27(x32)\n    x34 = shift(x31, x33)\n    x35 = fill(x30, TWO, x34)\n    x36 = vmirror(x35)\n    x37 = lbind(shift, x35)\n    x38 = height(x36)\n    x39 = divide(x38, x36)\n    x40 = increment(x39)\n    x41"], [1.1, "def solve_62d51063(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = difference(x1, x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = lbind(shift, x3)\n    x7 = compose(x6, toivec)\n    x8 = interval(NEG_TWO, NEG_ONE, NEG_ONE)\n    x9 = mapply(x7, x8)\n    x10 = astuple(x9, x7)\n    x11 = x7(x10)\n    x12 = toindices(x11)\n    x13 = increment14(x12)\n    x14 = canvas(NEG_ONE, x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(x16, x16)\n    x18 = height(x1)\n    x19 = width(x1)\n    x20 = decrement(x18)\n    x21 = astuple(x19, x20)\n    x22 = ONE(x21)\n    x23 = width(x1)\n    x24 = halve(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = apply(tojvec, x26)\n    x28 = apply(asobject, x27)\n    x29 = lbind(shift, x15)\n    x30 = mapply(x29, x28)\n    x31 = hmirror(x30)\n    x32 = vmirror(x31)\n    x33 = objects(x32, F, F, T)\n    x34 = merge(x33)\n    x35 = paint(x16, x34)\n    x36 = astuple(x1, x19)\n    x37 = canvas(ZERO, x36)\n    x38 = asobject(x37)\n    x39 = rbind(adjacent, x38)\n    x40 = apply(x39, x32)\n    x41 ="], [1.1, "def solve_1b9db546(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_bd9f53ce(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = sfilter(x2, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = compose(hmirror, vmirror)\n    x7 = compose(vmirror, merge)\n    x8 = fork(equality, identity, x6)\n    x9 = fork(multiply, identity, height)\n    x10 = chain(x8, x9, first)\n    x11 = height(I)\n    x12 = width(I)\n    x13 = ZERO(x11)\n    x14 = multiply(x12, x13)\n    x15 = subtract(x14, TWO)\n    x16 = interval(ONE, x15, ONE)\n    x17 = colorcount(I, ZERO)\n    x18 = digitrepeat(x17, x16)\n    x19 = multiply(x18, x13)\n    x20 = subtract(x19, TWO)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = product(x16, x21)\n    x23 = multiply(x22, x13)\n    x24 = rbind(add, x23)\n    x25 = compose(invert, x24)\n    x26 = order(x22, x25)\n    x27 = apply(x25, x26)\n    x28 = size(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = mpapply(recolor, x27, x30)\n    x32 = mapply(decrement, x30)\n    x33 = decrement(x32)\n    x34 = ofcolor(I, ZERO)\n    x35 =\n    1611111466\n    6111111609\n    9111111623\n    9565159359\n    5150601141\n    6969911161\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n"], [1.1, "def solve_8684050e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = power(first, TWO)\n    x4 = power(last, TWO)\n    x5 = fork(astuple, x3, x4)\n    x6 = fork(connect, ulcorner, x5)\n    x7 = fork(difference, toindices, x6)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x7, x9)\n    x11 = sfilter(x2, x10)\n    x12 = argmax(x11, size)\n    x13 = color(x12)\n    x14 = toindices(x12)\n    x15 = fork(either, vline, hline)\n    x16 = x15(x14)\n    x17 = size(x16)\n    x18 = increment(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = product(x19, x19)\n    x21 = rbind(add, THREE)\n    x22 = rbind(interval, THREE)\n    x23 = fork(x22, x21, x44)\n    x24 = compose(x20, x23)\n    x25 = fork(connect, ulcorner, x24)\n    x26 = fork(recolor, color, x25)\n    x27 = mapply(x26, x12)\n    x28 = paint(I, x27)\n    x29 = interval(ZERO, x18, ONE)\n    x30 = pair(x29, x29)\n    x31 = apply(first, x30)\n    x32 = mapply(x27, x31)\n    x33 = paint(x28, x32)\n    x34 = interval(ZERO, x18, ONE)\n    x35 = pair(x34, x34)\n    x36 = apply(first, x35)\n    x37 = mapply(x27, x36)\n    x38 = paint(x33, x37)\n    x39 ="], [1.1, "def solve_65943cf0(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = compose(flip, x4)\n    x6 = extract(I, x5)\n    x7 = lbind(contained, THREE)\n    x8 = compose(minimum, shape)\n    x9 = matcher(x8, ONE)\n    x10 = lbind(apply, numcolors)\n    x11 = compose(x10, asobject)\n    x12 = fork(add, x3, x11)\n    x13 = compose(initset, x12)\n    x14 = fork(insert, ulcorner, toindices)\n    x15 = compose(first, x14)\n    x16 = apply(x15, x6)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = objects(x20, T, F, F)\n    x22 = compose(toivec, leftmost)\n    x23 = rbind(compose, center)\n    x24 = lbind(apply, toindices)\n    x25 = chain(x23, x24, leftmost)\n    x26 = lbind(sfilter, x21)\n    x27 = chain(size, x26, x25)\n    x28 = increment(x27)\n    x29 = double(x38)\n    x30 = interval(x28, x29, ONE)\n    x31 = apply(x25, x30)\n    x32 = interval(x29, x27, ONE)\n    x33 = lbind(multiply, x31)\n    x34 = apply(x33, x32)\n    x35 = lbind(shift, x23)\n    x36 = mapply(x35, x34)\n    x37 = fill(x20, THREE, x36)\n    x38 = index(x37, x25)\n    x39 = replace"], [1.1, "def solve_eedc2bba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = rbind(SEVEN, x8)\n    x10 = lbind(compose, x9)\n    x11 = lbind(power, I)\n    x12 = chain(x11, x10, x9)\n    x13 = compose(x12, x10)\n    x14 = lbind(apply, last)\n    x15 = chain(x14, corners, last)\n    x16 = lbind(rbind, equality)\n    x17 = fork(sfilter, x15, x15)\n    x18 = fork(compose, x17, x13)\n    x19 = lbind(lbind, astuple)\n    x20 =\n    last(x12)\n    x21 = lbind(last, x12)\n    x22 = compose(x21, x18)\n    x23 = fork( subtract, x18, x22)\n    x24 = fork(insert, x18, x23)\n    x25 = compose(last, x24)\n    x26 = compose(x19, x25)\n    x27 = fork(equality, x26, x23)\n    x28 = fork(insert, x27, x1)\n    x29 = compose(x16, x28)\n    x30 = rbind(branch, x29)\n    x31 = compose(x30, x25)\n    x32 = rbind(branch, x269)\n    x33 = compose(x32, x25)\n    x34 = chain(x33, x31, x21)\n    x35 = fork(contained, x39, x22)\n    x36 = fork(contained, x28, x23)\n    x37 = fork(contained, x36, x31)\n    x38 = fork(both, x35, x37)\n    x39"], [1.1, "def solve_f6f9897f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(equality, toindices, box)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x11)\n    x14 = compose(toindices, x11)\n    x15 = chain(first, x14, initset)\n    x16 = lbind(upscale, x13)\n    x17 = rbind(ofcolor, x1)\n    x18 = compose(x16, x17)\n    x19 = fork(combine, x18, x15)\n    x20 = x19(x1)\n    x21 = palette(x20)\n    x22 = lbind(rbind, subtract)\n    x23 = uppermost(x20)\n    x24 = rbind(colorcount, x23)\n    x25 = chain(toivec, x24, decrement)\n    x26 = matcher(x25, x21)\n    x27 = palette(I)\n    x28 = sfilter(x27, x26)\n    x29 = lbind(colorcount, I)\n    x30 = argmin(x28, x29)\n    x31 = ofcolor(I, x30)\n    x32 = ofcolor(I, x10)\n    x33 =, x31, x32)\n    x34 = ofcolor(I, x10)\n    x35 = leftmost(x34)\n    x36 = ofcolor(I, x30)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x3)\n    x39 = ofcolor(I, x30)\n    x40 = rightmost(x3)\n"], [1.1, "def solve_73f735b1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorfilter, x2)\n    x6 = chain(x5, color, x4)\n    x7 = fork(paint, identity, x6)\n    x8 = rbind(contained, x1)\n    x9 = compose(x8, first)\n    x10 = rbind(sfilter, x9)\n    x11 = lbind(rbind, compose)\n    x12 = chain(x10, x11, x8)\n    x13 = lbind(apply, last)\n    x14 = chain(x13, toindices, x12)\n    x15 = fork(sfilter, x12, x14)\n    x16 = compose(x15, x12)\n    x17 = lbind(rot90, EIGHT)\n    x18 = power(x17, TWO)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = x18(x21)\n    x23 = argmin(x61, x22)\n    x24 = argmax(x23, x18)\n    x25 = partition(x24)\n    x26 = fork(combine, vfrontier, hfrontier)\n    x27 = compose(x25, x26)\n    x28 = extract(x25, x27)\n    x29 = x28(x26)\n    x30 = x27(x29)\n    x31 = color(x3)\n    x32 = palette(I)\n    x33 = remove(x31, x32)\n    x34 = lbind(colorcount, I)\n    x35 = argmin(x34, x33)\n    x36 = first(x35)\n    x37 = last(x35)\n    x38 = x369(x36)\n    x39 = matcher(first, x37)\n    x40 = compose(flip, x"], [1.1, "def solve_9bb9450f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8db927dd(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f0ad6b35(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b4fbb646(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x17, x19)\n    x21 = shape(I)\n    x22 = canvas(x3, x21)\n    x23 = normalize(x2)\n    x24 = lbind(shift, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = divide(x25, x26)\n    x28 = downscale(x23, x27)\n    x29 = height(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(size, x30)\n    x32 = toindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = rbind(multiply, x29)\n    x35 = compose(x33, x34)\n    x36 = lbind(apply, x35)\n    x37 = lbind(lbind, shift)\n    x38 = rbind(occurrences, x22)\n    x39 = compose(x36, x38)\n    x40 = fork(mapply, x39, x36)\n    x41 = compose(x32"], [1.1, "def solve_b2e83c53(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, shape, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_b0b531dc(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_daef5183(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, EIGHT, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = toobject(x38, x22)\n    x40 =5779577(x39)\n    x"], [1.1, "def solve_bf2c3c87(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, NEG_ONE)\n    x10 = uppermost(x1)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, NEG_ONE)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)"], [1.1, "def solve_31341663(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = fgpartition(x4)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(manhattan, x7)\n    x9 = maximum(x8)\n    x10 = increment(x9)\n    x11 = interval(ONE, x10, invert)\n    x12 = lbind(shift, x6)\n    x13 = astuple(x2, x6)\n    x14 = canvas(x3, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = mapply(x12, x16)\n    x18 = fill(x14, x3, x17)\n    x19 = increment(x13)\n    x20 = width(x68)\n    x21 = increment(x20)\n    x22 = tojvec(x21)\n    x23 = tojvec(x22)\n    x24 = greater(x18, x23)\n    x25 = maximum(x24)\n    x26 = increment(x25)\n    x27 = subtract(x22, x26)\n    x28 = astuple(x27, x19)\n    x29 = canvas(x3, x28)\n    x30 = asindices(x29)\n    x31 = rbind(toobject, x19)\n    x32 = lbind(shift, x30)\n    x33 = compose(x31, x32)\n    x34 = rbind(colorcount, x3)\n    x35 = matcher(x34, TWO)\n    x36 =sfilter(x20, x35)\n    x37 = paint(x19, x36)\n    x38 = height(x37)\n    x39 = apply(first, x5)\n    x40 = increment(x39)\n    x41 = width(x37)\n    x42 = interval(ZERO, x41, x40"], [1.1, "def solve_b5521cea(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =375911021\n    x2 =7121750962\n     burned to62539\n    1807968069\n    6928222466\n    d51158662\n    \"\"\"\n    x1 =66666666(I, I)\n    x2 = palette(x1)\n    x3 = contained(x2, x1)\n    x4 = contained(x3, x2)\n    x5 = branch(x4, height, width)\n    x6 = x5(I)\n    x7 = partition(x1)\n    x8 = matcher(color, ZERO)\n    x9 = colorfilter(x7, x8)\n    x10 = difference(x7, x9)\n    x11 = extract(x10, x8)\n    x12 = other(x10, x11)\n    x13 = colorcount(x1, x12)\n    x14 = subtract(x13, TWO)\n    x15 = increment(x14)\n    x16 = canvas(ZERO, x15)\n    x17 = astuple(x13, x16)\n    x18 = canvas(ZERO, x17)\n    x19 = matcher(first, x12)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x4)\n    x24 = x22(x4)\n    x25 = x22(x2)\n    x26 = x22(x62)\n    x27 = x22(x8)\n    x28 = fork(gravitate, first, last)\n    x29 = fork(shift, x24, x28)\n    x30 = fork(multiply, x29, x23)\n    x31 = fork(add, x30, x21)\n    x32 = multiply(x31, x5)\n    x33 = shift(x15, x32)\n    x34 = merge(x15)\n    x35 = cover(x16, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x35, x36"], [1.1, "def solve_007f83d8(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(TWO, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(x1)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(ZERO, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x30, initset)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x4, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)"], [1.1, "def solve_25d4d5df(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, astuple)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_d0c7bbf2(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(matcher, x1)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, mostcolor, x3)\n    x5 = fork(sfilter, identity, x4)\n    x6 = lbind(fork, recolor)\n    x7 = lbind(x6, x5)\n    x8 = compose(x7, x5)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x5)\n    x11 = fork(rapply, x8, x10)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = intersection(x13, x2)\n    x15 = cover(I, x14)\n    x16 = palette(x15)\n    x17 = other(x16, ZERO)\n    x18 = ofcolor(x15, x17)\n    x19 = ofcolor(x15, x8)\n    x20 = intersection(x18, x19)\n    x21 = fill(x15, x17, x20)\n    x22 = ofcolor(x15, x17)\n    x23 = shape(x22)\n    x24 = canvas(ZERO, x23)\n    x25 = lbind(hmirror, x24)\n    x26 = lbind(vconcat, x22)\n    x27 = chain(x25, x26, x25)\n    x28 = compose(x27, x6)\n    x29 = lbind(hmirror, x)\n    x30 = chain(size, x29, x27)\n    x31 = matcher(x30, ZERO)\n    x32 = lbind(fork, both)\n    x33 = lbind(x32, x28)\n    x34 = compose(x33, x31)\n    x35 = lbind(fork, difference)\n    x36 = compose(x35, x31)\n    x37 = fork(x36, x34, x31)\n    x38 = apply(x37,"], [1.1, "def solve_dc7abbeb(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = connect(ORIGIN, x11)\n    x13 = astuple(x5, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = astuple(tojvec, x12)\n    x18 = frontiers(I)\n    x19 = mfilter(x18, hline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = astuple(x21, x17)\n    x23 = astuple(x21, x22)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = astuple(x27, x22)\n    x27 = shift(x25, x26)\n    x28 =887788725977(x27)\n    x29 = height(I)\n    x30 = decrement(x29)\n    x31 = toivec(x30)\n    x32 = shift(x27, x31)\n    x33 = apply(toindices, x32)\n    x34 = rbind(shift, x30)\n    x35 = compose(x34, backdrop)\n    x36 = argmax(x33, x35)\n    x37 = other(x33, x36)\n    x38 = height(I)\n    x39 = increment(x38)\n    x40 = tojvec(x39)\n    x41 = rbind(multiply, x40)\n    x42 = height(I)\n    x43 = increment(x"], [1.1, "def solve_227c28d1(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = lbind(apply, last)\n    x9 = chain(x8, x5, first)\n    x10 = rbind(sfilter, x4)\n    x11 = fork(pair, x10, identity)\n    x12 = compose(x9, size)\n    x13 = chain(x12, x5, first)\n    x14 = rbind(sfilter, x4)\n    x15 = fork(pair, x14, identity)\n    x16 = compose(x15, x7)\n    x17 = fork(sfilter, x11, x16)\n    x18 = fork(argmax, x17, x13)\n    x19 = width(I)\n    x20 =58318935r normalize(I)\n    x21 =58318935(I)\n    x22 = width(x21)\n    x23 = rbind(repeat, x22)\n    x24 = chain(lowermost, x23, x18)\n    x25 = matcher(x24, ZERO)\n    x26 = sfilter(x20, x25)\n    x27 = dmirror(x26)\n    x28 = shape(x27)\n    x29 = add(x28, x29)\n    x30 = crop(x27,ORIN, x29)\n    x31 = apply(x30, x27)\n    x32 = crop(x27, DOWN, x29)\n    x33 = apply(x32, x31)\n    x34 = crop(x27,asobject, x33)\n    x35 =apply(x34, x32)\n    x36 = apply(increment, x35)\n    x37 = apply(tojvec, x36)\n    x38 = prapply(shift, x37, x)\n    x39"], [1.1, "def solve_d7dd5804(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = downscale(I, THREE)\n    x5 = x3(x4)\n    x6 = equality(x5, TWO)\n    x7 = branch(x6, width, height)\n    x8 = x7(I)\n    x9 = astuple(ONE, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = connect(x10, x7)\n    x12 = fill(x10, EIGHT, x11)\n    x13 = rbind(ofcolor, TWO)\n    x14 = compose(lowermost, x13)\n    x15 = matcher(x14, ZERO)\n    x16 = compose(x15, x13)\n    x17 = fork(both, x13, x16)\n    x18 = extract(x11, x17)\n    x19 = x18(x18)\n    x20 = vmirror(x19)\n    x21 = objects(x20, T, F, F)\n    x22 = merge(x21)\n    x23 = cover(x20, x22)\n    x24 = apply( leftmost, x23)\n    x25 = size(x24)\n    x26 = width(x22)\n    x27 = subtract(x25, x26)\n    x28 = multiply(x27, TWO)\n    x29 = lbind(greater, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x24, x30)\n    x32 = compose(decrement, last)\n    x33 = chain(x29, x31, x32)\n    x34 = fork(greater, x30, x33)\n    x35 = decrement(x28)\n    x36 = lbind(astuple, x35)\n    x37 = lbind(shift, x22)\n    x38 = compose(x36, x37)\n    x39 = fork( compose, x35, x38)\n    x40 = decrement(x29"], [1.1, "def solve_237ab065(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_421879a0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_f0928a47(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x2)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7cb7dc6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_70bac250(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = x1(x3)\n    x5 = ulcorner(x4)\n    x6 = urcorner(x4)\n    x7 = shoot(x5, NEG_UNITY)\n    x8 = shoot(x6, UP_RIGHT)\n    x9 = combine(x7, x8)\n    x10 = intersection(x4, x9)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = extract(x10, x12)\n    x14 = mostcolor(I)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, color)\n    x17 = sfilter(x6, x16)\n    x18 = argmax(x17, size)\n    x19 = remove(x18, x17)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 = lbind(colorcount, x20)\n    x23 = argmin(x21, x22)\n    x24 = ofcolor(x20, x13)\n    x25 = ofcolor(x24, x23)\n    x26 = combine(x24, x25)\n    x27 = intersection(x24, x26)\n    x28 = mapply(neighbors, x27)\n    x29 = apply(neighbors, x28)\n    x30 = rbind(difference, x28)\n    x31 = compose(x30, toindices)\n    x32 = rbind(greater, ONE)\n    x33 = chain(x32, size, x31)\n    x34 = sfilter(x29, x33)\n    x35 = merge(x34)\n    x36 = palette(x35)\n    x37 = rbind(toobject, I)\n    x38 = apply(x37, x36)\n    x39 = rbind(colorcount, x38)\n    x40 = argmax(x38, x"], [1.1, "def solve_1034bd3e(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices27(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4"], [1.1, "def solve_cbc6ad31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(x8, identity)\n    x10 = lbind(matcher, first)\n    x11 = chain(x9, x10, x9)\n    x12 = lbind(chain, difference)\n    x13 = rbind(x12, toobject)\n    x14 = lbind(rbind, intersection)\n    x15 = compose(x14, toindices)\n    x16 = chain(x11, x13, x15)\n    x17 = lbind(contained, x1)\n    x18 = compose(x17, x16)\n    x19 = lbind(contained, x2)\n    x20 = compose(x19, x16)\n    x21 = fork(both, x18, x20)\n    x22 = fork(both, x11, x21)\n    x23 = compose(flip, x2)\n    x24 = fork(both, x23, x22)\n    x25 = fork(both, x21, x24)\n    x26 = lbind(contained, x1)\n    x27 = compose(x26, x14)\n    x28 = lbind(rbind, difference)\n    x29 = compose(x28, toindices)\n    x30 = fork(sfilter, x25, x29)\n    x31 = fork(difference, x30, toindices)\n    x32 = lbind(rbind, ZERO)\n    x33 = compose(x32, x31)\n    x34 = lbind(rbind, colorcount)\n    x35 = chain(x34, x33, x37)\n    x36 = fork(sfilter, x35, x30)\n    x37 = fork(equality, identity, x36)\n    x38 = compose"], [1.1, "def solve_230bbcb3(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =1964(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = fork(either, hline, vline)\n    x12 = x11(x10)\n    x13 = sfilter(x10, x12)\n    x14 = rbind(gravitate, x13)\n    x15 = compose(x14, initset)\n    x16 = fork(add, identity, x15)\n    x17 = fork(connect, identity, x16)\n    x18 = shape(I)\n    x19 = maximum(x18)\n    x20 = lbind(multiply, x19)\n    x21 = lbind(gravitate, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(add, identity, x22)\n    x24 = canvas(x9, x18)\n    x25 = palette(I)\n    x26 = remove(x4, x25)\n    x27 = lbind(colorcount, I)\n    x28 = argmin(x26, x27)\n    x29 = partition(I)\n    x30 = hascolor(I, x28)\n    x31 = palette(I)\n    x32 = remove(x8, x31)\n    x33 = lbind(ofcolor, I)\n    x34 = argmin(x32, x33)\n    x35 = ofcolor(I, x28)\n    x36 = ofcolor(I, x28)\n    x37 = intersection(x35, x36)\n    x38 = size(x37)\n    x39 = apply(first, x9)\n    x40 = apply(last, x9)\n    x41 = intersection(x39, x40)\n    x42"], [1.1, "def solve_2bee7eba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_dd0245dc(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_48ac1d0b(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7ad4bab(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_429c833a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = increment(x26)\n    x30 = branch(x28, x26, x29)\n    x31 = double(x30)\n    x32 = decrement(x31)\n    x33 = apply(normalize, x25)\n    x34 = interval(ZERO, x30, ONE)\n    x35 = pair(x34, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = astuple(x32, x32)\n    x38 = canvas(x1, x37)"], [1.1, "def solve_76a8d912(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, mostcolor)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmin(x4, size)\n    x6 = width(x5)\n    x7 = divide(x6, vline)\n    x8 = upscale(x3, x7)\n    x9 = shift(x8, UNITY)\n    x10 = paint(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, lrcorner)\n    x13 = paint(x10, x12)\n    x14 = normalize(x12)\n    x15 = objects(x6, T, T, T)\n    x16 = rbind(occurrences, x13)\n    x17 = compose(x16, toindices)\n    x18 = fork(laint, x17, x15)\n    x19 = normalize(x14)\n    x20 =rbind(multiply, x6)\n    x21 = apply(x20, x19)\n    x22 = rbind(apply, x21)\n    x23 = lbind(chain, x18)\n    x24 = lbind(x23, x22)\n    x25 = lbind(lbind, shift)\n    x26 = lbind(occurrences, x13)\n    x27 = fork(mapply, x26, x25)\n    x28 = compose(x27, last)\n    x29 = rbind(argmax, x28)\n    x30 = lbind(occurrences, x13)\n    x31 = fork(mapply, x30, x29)\n    x32 = compose(x31, x32)\n    x33 = fork(paint, identity, x323)\n    x34 = rbind(occurrences, x13)\n    x35 = fork(mapply, x33, x24)\n    x36 = compose(x34, x35)\n    x37 = fork(paint, x33, x36)\n    "], [1.1, "def solve_7b92f1ac(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = lbind(remove, x8)\n    x11 = chain(x10, toindices, x8)\n    x12 = chain(x11, x9, x11)\n    x13 = argmax(x9, x12)\n    x14 = rbind(contained, x13)\n    x15 = argmin(x8, x14)\n    x16 = asindices(I)\n    x17 = matcher(first, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = branch(x19, height, width)\n    x21 = informative24(x19)\n    x22 =\"\"\"\n    x23 = difference(x21, x19)\n    x24 = power(increment, TWO)\n    x25 = lbind(apply, x24)\n    x26 = lbind(fafffa47(x23)\n    x27 = lbind(fcc89999b\n    x28 = chain(x25, x26, x27)\n    x29 = x28(x4)\n    x30 = x28(x15)\n    x31 = x28(x14)\n    x32 = x29(x31)\n    x33 = x28(x20)\n    x34 = x28(x22)\n    x35 = combine(x29, x34)\n    x36 = x28(x30)\n    x37 = hconcat(x35, x36)\n    x38 = height(x27)\n    x39 =\n    x40 = divide(x38, x39)\n    x40 =fOUR(x27)\n    x41 = ofcolor(x77, x"], [1.1, "def solve_1813d2c7(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = urcorner(x30)\n    x32 =Rmirror(x31)\n    x33 = hmirror(x32)\n    x34 = NEG_UNITY(x33)\n    x35 = shoot(x31, UNITY)\n    x36 = recolor(x10, x34)\n    x37 = apply(x36, x35)\n    x38 = product(x37, x37)\n    x39 = power(x38, THREE)"], [1.1, "def solve_92e74302(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_2b8b79e7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x30)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_a971a618(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = intersection(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_cb0d2368(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = index(I, ORIGIN)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = branch(x9, x6, x4)\n    x11 = fill(x10, FOUR, x4)\n    x12 = lbind(contained, x6)\n    x13 = compose(x12, toindices)\n    x14 = fork(sfilter, x13, x11)\n    x15 = size(x1)\n    x16 = height(I)\n    x17 = width(I)\n    x18 = increment(x16)\n    x19 = astuple(x17, x18)\n    x20 = crop(I, ORIGIN, x19)\n    x21 = hmirror(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = asobject(x24)\n    x26 = vmirror(x25)\n    x27 = asobject(x26)\n    x28 = ulcorner(x27)\n    x29 = mostcolor(I)\n    x30 = lrcorner(x27)\n    x31 = index(I, x30)\n    x32 = subgrid(x31, x8)\n    x33 = asobject(x32)\n    x34 = hmirror(x33)\n    x35 = vmirror(x34)\n    x36 = asobject(x35)\n    x37 = astuple(x31, x36)\n    x38 = add(x37, x31)\n    x39 = width(I)\n    x40 = ulcorner(x36)\n    x41 = index(I, x40)\n    x42 = subtract(x40, x41)\n    x43 = add(x44, x42"], [1.1, "def solve_b5789320(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(d687bc2c\n    x5 = chain(positive, size, dedupe)\n    x6 = apply(x5, x1)\n    x7 = equality(x6, SIX)\n    x8 = branch(x7, vsplit, hsplit)\n    x9 = x8(I, TWO)\n    x10 = argmin(x9, numcolors)\n    x11 = argmax(x9, numcolors)\n    x12 = width(x11)\n    x13 = hsplit(x11, x12)\n    x14 =\n    x15 = divide(xx, x13)\n    x16 = width(x11)\n    x17 = divide(x16, x10)\n    x18 = ZERO(x17)\n    x19 = lbind(multiply, x18)\n    x20 = compose(x19, shape)\n    x21 = lbind(canvas, ZERO)\n    x22 = compose(x21, x20)\n    x23 = fork(concat, x20, x22)\n    x24 = colorfilter(x1, x12)\n    x25 = argmax(x24, x23)\n    x26 = ulcorner(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = shift(x25, x28)\n    x30 = paint(x29, x29)\n    x31 = interval(ONE, x30, ONE)\n    x32 = matcher(first, x25)\n    x33 = hfilter(x31, x32)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x22, x35)\n    x37 = fill(x30, x12, x36)\n    x38 = ofcolor(x37, x7)\n    x39 =\n    3723445279\n    x38(x"], [1.1, "def solve_9219208b(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9ef26332(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(first, last)\n    x37 = fork(equality, x35, x36)\n    x38 = sfilter(x31, x37)\n    x39 = matcher(first, ZERO)\n    x40 = compose(flip, x39)\n    x41 = fork(sfilter, x40, x39)\n    x46 = argmax(x"], [1.1, "def solve_b8b25c6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(x15, x16)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 = fork"], [1.1, "def solve_59cedf4e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(contained, F, T)\n    x14 = lbind(apply, urcorner)\n    x15 = compose(x14, x13)\n    x16 = fork(compose, x12, x15)\n    x17 = lbind(48, ZERO)\n    x18 = compose(x17, x16)\n    x19 = fork(sfilter, x15, x18)\n    x20 = fork(difference, x19, identity)\n    x21 = lbind(9chain, center)\n    x22 = lbind(x21, x20)\n    x23 = compose(x22, ulcorner)\n    x24 = chain(x2, x23, x20)\n    x25 = lbind(lbind, shift)\n    x26 = compose(x25, x23)\n    x27 = fork(mapply, x26, x24)\n    x28 = fork(mapply, x27, x26)\n    x29 = palette(I)\n    x30 =(x28, x29)\n    x31 = intersection(x40, x30)\n    x32 = first(x31)\n    x33 = other(x31, x32)\n    x34 = flip(x33)\n    x35 = dmirror(x34)\n    x36 = objects(x35, T, F, T)\n    x37 = apply(toindices, x36)\n    x38 = lbind(rbind,worldcorner)\n    x39 =666x38(x37"], [1.1, "def solve_57c319df(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_c9e8b1db(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = interval(rot180, rot180, ONE)\n    x21 = astuple(rot90, rot90)\n    x22 = astuple(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n"], [1.1, "def solve_f0ab5ef1(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2b4dd363(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x20 = compose(x24, x25)\n    x21 = fork(equality, identity, x20)\n    x22 = compose(x21, last)\n    x23 = rbind(multiply, x19)\n    x24 = rbind(divide, x19)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = compose(x26, last)\n    x28 = lbind(apply, first)\n    x29 = lbind(phrase, x8)\n    x30 = rbind(rapply, x27)\n    x31 = compose(initset, first)\n    x32 = chain(first, x30, x31)\n    x33 = compose(x28, x32)\n    x34 = extract(x15, x33"], [1.1, "def solve_4cfa3341(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, size)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(numcolors, ONE)\n    x43 ="], [1.1, "def solve_864531d4(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_7b267f73(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argmin(x23, x24)\n    x26 = ulcorner(x25)\n    x27 =652(x25, x22)\n    x28 = add(x26, x27)\n    x29 = lrcorner(x25)\n    x30 = invert(x28)\n    x31 = shift(x29, x30)\n    x32 = lefthalf(x15)\n    x33 = righthalf(x15)\n    x34 = vmirror(x33)\n    x35 = vconcat(x32, x34)\n    x36 = width(x9)\n    x37 = subtract(x35, x36)\n    x38 = tojvec(x37)\n    x39 = shift(x31, x38)\n    x40 =7(x39)\n    x41 = width(x10)\n    x42 = righthalf(x41)\n    x43"], [1.1, "def solve_679f2728(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x13, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f39bb665(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2d646e4a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = subgrid(x2, I)\n    x9 = frontiers(x8)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = size(x12)\n    x14 = repeat(x12, x13)\n    x15 = palette(x2)\n    x16 = remove(x12, x15)\n    x17 = lbind(colorcount, x16)\n    x18 = argmin(x12, x17)\n    x19 = ulcorner(x2)\n    x20 = shoot(x19, UNITY)\n    x21 = lrcorner(x2)\n    x22 = shoot(x21, NEG_UNITY)\n    x23 = urcorner(x2)\n    x24 = shoot(x23, UP_RIGHT)\n    x25 = llcorner(x2)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = combine(x20, x22)\n    x28 = combine(x24, x26)\n    x29 = combine(x27, x28)\n    x30 = branch(x12, x22, x27)\n    x31 = asindices(x30)\n    x32 = rbind(adjacent, x31)\n    x33 = argmin(x29, x32)\n    x34 = rbind(adjacent, x13)\n    x35 = apply(x34, x32)\n    x36 = vmirror(x34)\n    x37 = invert(x35)\n    x38 = apply(invert, x36)\n    x39 = pair(x37, x38)\n    x40 = shift(x39, UNITY)\n    O = mapply(last, x40)\n    return"], [1.1, "def solve_585cf2fd(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = cmirror(I)\n    x24 = h talk(x23, x22)\n    x25 = astuple(x24, x7)\n    x26 = dmirror(x25)\n    x27 = ulcorner(x25)\n    x28 = shoot(x27, UNITY)\n    x29 = shoot(x27, NEG_UNITY)\n    x30 = shoot(x27, UP_RIGHT)\n    x31 = shoot(x27, DOWN_LEFT)\n    x32 = combine(x28, x29)\n    x33 = combine(x30, x31)\n    x34 = combine(x32, x33)\n    x35 = astuple(x24, x7)\n    x36 = lbind(multiply, x35)\n    x37 = apply(x36, x34)\n    x38 = lbind(shift, x13)\n    x39 = mapply(x38, x37)\n    O = paint(I"], [1.1, "def solve_a4a81486(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = argmax(x8, size)\n    x11 = ulcorner(x9)\n    x12 = ulcorner(x10)\n    x13 = subgrid(x9, x5)\n    x14 = subgrid(x10, x5)\n    x15 = hconcat(x13, x14)\n    x16 = hconcat(x15, x5)\n    x17 = vconcat(x16, x17)\n    x18 = vconcat(x16, x19)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x7, x20)\n    x22 = paint(x21, x9)\n    x23 = solve_0dfd97113(x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x23, x4)\n    x26 = difference(x24, x25)\n    x27 = fill(x22, NEG_ONE, x26)\n    x28 = initset(x15)\n    x29 = rbind(manhattan, x28)\n    x30 = chain(even, halve, x29)\n    x31 = sfilter(x27, x30)\n    x32 = difference(x27, x31)\n    x33 = fill(x24, ONE, x32)\n    x34 = initset(x25)\n    x35 = insert(x24, x34)\n    x36 = product(x33, x35)\n    x37 = fork(connect, first, last)\n    x38 = mapply(x37, x36)\n    O"], [1.1, "def solve_769c66cb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = rbind(hconcat, x9)\n    x23 = compose(flip, x22)\n    x24 = rbind(hconcat, x10)\n    x25 = compose(flip, x24)\n    x26 = fork(combine, x23, x25)\n    x27 = fork(combine, x28, x26)\n    x28 = fork(either, vline, hline)\n    x29 = rbind(sfilter, x28)\n    x30 = rbind(difference, x76)\n    x31 = chain(size, x29, x30)\n    x32 = matcher(x31, ZERO)\n    x33 = fork(both, x26, x32)\n    x34 = extract(x15, x33)\n    x35 = x24(x34)\n    x36 = power(x22, TWO)\n    x37 = multiply(x36, x35)\n    x38 = x25(x34)\n    x39 = shift(x38, UNITY)\n    x40 = paint(x39, x37)\n"], [1.1, "def solve_5fcc6587(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(toivec, x2, vmirror)\n    x4 = x3(I)\n    x5 = partition(x4)\n    x6 = lbind(remove, ONE)\n    x7 = chain(center, first, last)\n    x8 = fork(subtract, x7, x6)\n    x9 = fork(multiply, height, width)\n    x10 = fork(equality, size, x9)\n    x11 = sfilter(x5, x10)\n    x12 = argmax(x11, numcolors)\n    x13 = remove(x12, x11)\n    x14 = corners(x12)\n    x15 = toobject(x14, I)\n    x16 = colorfilter(x15, ONE)\n    x17 = rbind(sfilter, x16)\n    x18 = argmin(x13, x17)\n    x19 = frontiers(I)\n    x20 = sfilter(x19, x18)\n    x21 = apply(ulcorner, x20)\n    x22 = size(x21)\n    x23 = equality(x22, ZERO)\n    x24 = branch(x23, hmirror, vmirror)\n    x25 = asobject(x24)\n    x26 = color(x25)\n    x27 = decrement(x22)\n    x28 = toivec(x27)\n    x29 = invert(x28)\n    x30 = insert(x27, x30)\n    x31 = backdrop(x30)\n    x32 = tojvec(x22)\n    x33 = invert(x32)\n    x34 = insert(x33, x30)\n    x35 = order(x32, x34)\n    x36 = combine(x31, x35)\n    x37 = fill(x6, x25, x36)\n    x38 = apply(x29, x35)\n    x39 = fill(x37, x24, x38)\n    x40 = asobject"], [1.1, "def solve_f06ca8d7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = argmax(x6, x10)\n    x12 = initset(x11)\n    x13 = matcher(x12, ZERO)\n    x14 = rbind(add, x6)\n    x15 = chain(flip, x13, x14)\n    x16 = fork(both, x13, x15)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x12, x17)\n    x19 = fork(add, x6, x17)\n    x20 = canvas(ZERO, THREE_BY_THREE)\n    x21 = asindices(x20)\n    x22 = toobject(x21, I)\n    x23 = mostcolor(x22)\n    x24 = uppermost(x18)\n    x25 = lbind(min, x24)\n    x26 = lbind(rbind, add)\n    x27 = chain(x25, x26, x26)\n    x28 = matcher(x27, x11)\n    x29 = initset(x18)\n    x30 = prapply(insert, x29, x28)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, x7)\n    x33 = fork(subtract, x32, x17)\n    x34 = fork(upscale, x33, x24)\n    x35 = fork(recolor, x24, x34)\n    x36 = mapply(x35, x18)\n    x37 = paint(x20, x36)\n    x38"], [1.1, "def solve_9fa912a8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4, x5)\n    x21 = compose(x19, x20)\n    x22 = lbind(sfilter, x8)\n    x23 = fork(inderer, x21, x22)\n    x24 = lbind(rbind, subtract)\n    x25 = chain(x17, x24, x23)\n    x26 = lbind(colorcount, I)\n    x27 = fork(equality, x25, x26)\n    x28 = sfilter(x18, x27)\n    x29 = fork(equality, x27, x28)\n    x30 = sfilter(x26, x29)\n    x31 = fork(paint, identity, x30)\n    x32 = lbind(rbind, add)\n    x33 = compose(x32, box)\n    x34 = fork(37940, x33, x33)\n    x35 = compose(x32, x34)\n    x36 = fork(difference, x35, x31)\n    x37 = fork(77fdfe, x35, x"], [1.1, "def solve_6ce3bf01(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = branch(x1, ZERO, THREE)\n    x2 = asobject(x1)\n    x3 = matcher(first, ZERO)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x5, x8)\n    x10 = argmax(x9, x7)\n    x11 = remove(x10, x9)\n    x12 = merge(x11)\n    x13 =32(x12)\n    x14 = apply(first, x11)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(I)\n    x20 = lbind(colorfilter, x12)\n    x21 = chain(size, x19, x20)\n    x22 = matcher(x21, ZERO)\n    x23 = colorfilter(x15, ZERO)\n    x24 = rbind( noises, x39)\n    x25 = compose(x24, outbox)\n    x26 = fork(branch, x25, outbox)\n    x27 = apply(x26, x23)\n    x28 = initset(x10)\n    x29 = insert(x13, x28)\n    x30 = backdrop(x29)\n    x31 = cover(I, x30)\n    x32 = normalize(x10)\n    x33 = shift(x32, UNITY)\n    x34 = paint(x31, x33)\n    x35 = rot90(x34)\n    x36 =normalize(x10)\n    x37 = shift(x36, UP_RIGHT)\n    x38 = paint(x35, x37)\n    x39 = rot270(x38)\n    x40 = shape(x10)\n    x41 = canvas"], [1.1, "def solve_17638a9e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_c7bd5ed4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_5d06f77c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_651e0313(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_05d8af31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_9b5ef738(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9a9553d8(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_38cb5881(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x32 = compose(x29, x30)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = lbind(apply, first)\n    x36 = rbind(sfilter, x28)\n    x37 = rbind(pair, x21)\n    x38 = chain(x35, x36, x37)\n    x39 = compose(x32, x38)\n    x40 = extract(x1, x39)\n    x41 = last(x40)\n    "], [1.1, "def solve_ce671096(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = ofcolor(x13, x9)\n    x15 = ofcolor(x13, x10)\n    x26 = subgrid(x14, x6)\n    x27 = subgrid(x15, x6)\n    x28 = palette(x16)\n    x29 = remove(x9, x28)\n    x30 = argmin(x29, x12)\n    x31 = rbind(colorcount, x30)\n    x32 = rbind(toobject, x31)\n    x33 = chain(x30, x32, initset)\n    x34 = apply(x33, x27)\n    x35 = ofcolor(x34, x10)\n    x36 = ofcolor(x34, x shoot)\n    x37 = apply(x35, x36)\n    x38 = fill(x6, x27, x37)\n    x39 = ofcolor(x38, x30)\n    x40 = ofcolor(x38, x356)\n    x41 = fill(x38, x39, x40)\n    x42 = mapply(x33, x34)\n    x43 = uppermost(x42)\n    x44 = lbind(10, x43)\n    x45 = shift(x44, NEG_UNITY)\n    x46 = lbind(greater, x43)\n    x47 = compose(x46, UP_RIGHT)\n    x48 = rbind(sfilter, x27)\n    x49 = chain(x47,"], [1.1, "def solve_57dc8aa7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = trim(I)\n    x2 =insert(ORIGIN, x1)\n    x3 = upscale(x2, TWO)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = asobject(x4)\n    x6 = toindices(x5)\n    x7 = ZERO_BY_TWO)\n    x8 = ulcorner(x6)\n    x9 = add(x8, UNITY)\n    x10 = shift(x6, x9)\n    x11 = fill(I, ZERO, x10)\n    x12 = lbind(shift, x6)\n    x13 = apply(x12, x11)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.1, "def solve_adfdbb72(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(SIX, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x3, urcorner)\n    x5 = astuple(x2, x4)\n    x6 = ofcolor(I, TWO)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = greater(x8, x9)\n    x11 = branch(x10, initset,548or487)\n    x12 = canvas(ZERO, x5)\n    x13 = compose(first, last)\n    x14 = chain(x13,951120, first)\n    x15 = lbind(contained, TWO)\n    x16 = compose(x15, first)\n    x17 = lbind(contained, THREE)\n    x18 = compose(x17, first)\n    x19 = fork(add, x16, x18)\n    x20 = fork(add, x14, x19)\n    x21 = compose(positive, size)\n    x22 = rbind(intersection, x7)\n    x23 = rbind(shoot, UP)\n    x24 = chain(x21, x22, x23)\n    x25 = sfilter(x15, x24)\n    x26 = chain(size, dedupe, first)\n    x27 = compose(positive, size)\n    x28 = lbind(compose, x27)\n    x29 = lbind(fork, intersection)\n    x30 = compose(x28, x29)\n    x31 = lbind(compose, x07)\n    x32 = compose(x31, x30)\n    x33 = fork(mapply, x26, x32)\n    x34 = fork(intersection, x33, x30)\n    x35 = mapply(x34, x25)\n    x36 = fill(I, THREE, x35)\n    O = fill(x36, EIGHT, x36)\n    return O"], [1.1, "def solve_10d54a56(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =2dc187(x2)\n    x4 = shape(x3)\n    x5 = merge(x1)\n    x6 = cover(I, x5)\n    x7 = hconcat(x6, x4)\n    x8 = hconcat(x7, x4)\n    O = vconcat(x8, x4)\n    return O"], [1.1, "def solve_7b51646f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    1 =64rot90(I)\n    x2 =64quire(x1, ONE)\n    O = replace(I, EIGHT, x2)\n    return O"], [1.1, "def solve_d377d2a7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =175(I)\n    x2 =7444(x1)\n    x3 =297(x2, box)\n    O = fill(I, FOUR, x3)\n    return O"], [1.1, "def solve_fae26e96(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = objects(x6, T, F, T)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x6, x14)\n    x16 = ofcolor(x15, x11)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = ofcolor(x20, x11)\n    x22 = ofcolor(x20, TWO)\n    x23 = pair(x21, x22)\n    x24 = mapply(first, x23)\n    x25 = mapply(last, x23)\n    x26 = fill(x15, SIX, x24)\n    O = fill(x26,060, x25)\n    return O"], [1.1, "def solve_fb5d5f60(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = compose(increment,\n    5510000000000000000\n    44709000000002b tojvec\n    0001000000001\n    2000000000000000030840\n    \"\"\"\n    x2 = increment(NINE)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = fork(multiply, tojvec, box)\n    x5 = fork(multiply, center, x4)\n    x6 = fork(add, size, x5)\n    x7 = compose(x6, toivec)\n    x8 = lbind(add, DOWN)\n    x9 = compose(x8, tojvec)\n    x10 = initset(x9)\n    x11 = lbind(insert, x10)\n    x12 = compose(backdrop, x11)\n    x13 = mapply(x12, x3)\n    x14 = fill(I, ZERO, x13)\n    O = replace(x14, SEVEN, FIVE)\n    return O"], [1.1, "def solve_f127aba6(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = extract(x8, x9)\n    x11 = lbind(sfilter, x8)\n    x12 = lbind(matcher, FOUR)\n    x13 = compose(x11, x12)\n    x14 = rbind(sfilter, x13)\n    x15 = merge(x8)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = palette(I)\n    x21 = remove(x8, x20)\n    x22 = repeat(x8, ONE)\n    x23 =263(x22)\n    x24 = ofcolor(x12, x23)\n    x25 = ofcolor(x12, x8)\n    x26 = ofcolor(x12, x1)\n    x27 = rbind(argmin, x27)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x38)\n    x32 = compose(x31, x30)\n    x33 = fork(subtract, identity, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x24)\n    x36 = ofcolor(x15, x23)\n    x37 = intersection(x36, x35)\n    x38 = mapply(neighbors, x37)\n    O = paint(x12, x38)\n    return O"], [1.1, "def solve_4a170175(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =if11(I)\n    x2 =077df224(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, x1, SEVEN)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [1.1, "def solve_a97522c1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =75dneighbors(x2)\n    x4 = insert(x2, x3)\n    O = fill(I, THREE, x4)\n    return O"], [1.1, "def solve_b4847676(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = apply(x2, x2)\n    x4 = repeat(x3, ONE)\n    x5 = puts(x4, UNITY)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = lbind(remove, NEG_ONE)\n    x9 = compose(x8, shape)\n    x10 = lbind(multiply, x1)\n    x11 = chain(x10, double, x9)\n    x12 = asindices(x5)\n    x13 = ofcolor(I, NEG_ONE)\n    x14 = difference(x13, x12)\n    x15 = partition(I)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x17, x14)\n    x19 = argmax(x18, x11)\n    x20 = other(x19, x9)\n    x21 = palette(I)\n    x22 = remove(x3, x21)\n    x23 = other(x22, x10)\n    x24 = ofcolor(I, x23)\n    x25 =39eb branch(x24, positive, decrement)\n    x26 = shoot(x22, UNITY)\n    x27 = shoot(x25, UP_RIGHT)\n    x28 = combine(x26, x27)\n    x29 = rbind(shoot, LEFT)\n    x30 = mapply(x29, x28)\n    x31 = underfill(I, x23, x30)\n    x32 = other(x31, x9)\n    x33 = ofcolor(x31, x23)\n    x34 = initset(x33)\n    x35 = cover(x32, x34)\n    x36 = height(x35)\n    x37 = equality(x36, ONE)\n    x38 = intersection(x33, x34)\n    O = fill(x37, x23, x38)\n    return O"], [1.1, "def solve_3f5a7225(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = mapply(x16, x4)\n    x21 = mapply(x12, x4)\n    x22 = combine(x20, x21)\n    x23 =0920(02)\n    x24 = lrcorner(x23)\n    x25 = height(x3)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, x278)\n    x28 = apply(x27, x25)\n    x29 = apply(x33, x28)\n    x30 = lbind(shift, x22)\n    x31 = mapply(x30, x29)\n    x32 = paint(x3, x31)\n    O = x2(x32)\n    return O"], [1.1, "def solve_ce669156(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = apply(merge, x3)\n    x5 = mapply(d12, x4)\n    x6 = portrait(x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = toindices(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x12, x16)\n    x18 = argmax(x17, lrcorner)\n    x19 = fgpartition(x88)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 =3906(x18, x21)\n    x23 = difference(x22, x18)\n    x24 = first(x23)\n    x25 = color(x18)\n    x26 =194(x24)\n    x27 = ofcolor(x88, x25)\n    x28 = leftmost(x27)\n    x29 = ofcolor(x88, x24)\n    x30 = leftmost(x29)\n    x31 = greater(x28, x30)\n    x32 = uppermost(x27)\n    x33 = neighbors(x32)\n    x34 = toobject(x33, x88)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x35, x36)\n    x38 = paint(x88, x37)\n    x39 = trim(x38)\n    O = x7(x39)\n    return O"], [1.1, "def solve_19eefb3f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = fork(subtract, last, width)\n    x7 = fork(multiply, x6, x5)\n    x8 =987(ORIGIN)\n    x9 = mapply(x7, x8)\n    x10 = subtract(SIX, x9)\n    x11 = power(outbox, x10)\n    x12 = palette(I)\n    x13 = apply(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = mfilter(x19, x16)\n    x18 = replace(I, x15, x9)\n    x19 = lbind(difference, x8)\n    x20 = chain(positive, size, x19)\n    x21 = matcher(x20, ZERO)\n    x22 = compose(first, x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x19, x23)\n    x25 = compose(maximum, x24)\n    x26 = matcher(x25, ONE)\n    x27 = sfilter(x24, x26)\n    x28 = apply(toindices, x27)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x30, x29)\n    x32 = fork(difference, x31, x23)\n    x33 = fork(shift, x27, x32)\n    x34 = mapply(x33, x27)\n    O = paint(x16, x34)\n    return O"], [1.1, "def solve_494c6f33(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(uppermost, x11)\n    x13 = order(x12, identity)\n    x14 = lbind(sfilter, x11)\n    x15 = lbind(matcher, uppermost)\n    x16 = compose(x14, x15)\n    x17 = chain(x16, x13, x16)\n    x18 = fork(85, x17, identity)\n    x19 = lbind(apply, color)\n    x20 = rbind(order, leftmost)\n    x21 = chain(x19, x20, x16)\n    x22 = fork(sfilter, x18, x21)\n    x23 = compose(x17, x22)\n    x24 = apply(x23, x13)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x21, x26)\n    x28 = multiply(TEN, TEN)\n    x29 = rbind(subtract, x28)\n    x30 = chain(x29, x27, size)\n    x31 = fork(rapply, x30, identity)\n    x32 = mapply(x31, x branch)\n    O = paint(x9, x32)\n    return O"], [1.1, "def solve_9c06eca8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = backdrop(x2)\n    x6 = cover(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(x7, ZERO)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x4)\n    x11 =353(x10)\n    x12 = palette(x11)\n    x13 = lbind(mfilter, x12)\n    x14 = rbind(toobject, x11)\n    x15 = lbind(ofcolor, x11)\n    x16 = chain(x13, x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x11)\n    O = fill(x6, x3, x18)\n    return O"], [1.1, "def solve_c91e11d0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = height(I)\n    x2 = subgrid(x1, I)\n    x3 = partition(x2)\n    x4 =multiply(x1, THREE)\n    x5 = astuple(x4, x4)\n    x6 = crop(x2, ORIGIN, x5)\n    x7 =39a8645d83733683\n    x8 =86(x6,9318669\n    8484969944\n    9810smart3ed(x8)\n    x9 = add(x1, THREE)\n    x10 = tojvec(x9)\n    x11 = height(x7)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = height(x10)\n    x15 = interval(x14, THREE, x14)\n    x16 = apply(tojvec, x15)\n    x17 = apply(asobject, x16)\n    x18 =44(x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x11)\n    O = paint(x2, x20)\n    return O"], [1.1, "def solve_35bf20ed(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = input:\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x2 = trim(I)\n    x3 = output(x2, ZERO)\n    x4 = order(x3, identity)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = size(x5)\n    x8 = interval(ZERO, x6, ONE)\n    x9 = mpapply(recolor, x8, x7)\n    O = paint(x3, x9)\n    return O"], [1.1, "def solve_708751d7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =73mirror(I)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = compose(x9, x10)\n    x12 = chain(x11, center, initset)\n    x13 = fork(gravitate, identity, x12)\n    x14 = compose(rot90, x13)\n    x15 = power(x14, FOUR)\n    x16 = fork(add, height, width)\n    x17 = fork(decrement, x16, x12)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(both, x15, x18)\n    x20 = mfilter(x3, x19)\n    O = fill(x5, FIVE, x20)\n    return O"], [1.1, "def solve_0397539c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = lbind(extract, x1)\n    x3 = chain(x2, positive, size)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(x4, urcorner)\n    x6 = compose(x4, DOWN)\n    x7 = fork(04, shape, x6)\n    x8 = chain(x5, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 =\"\"\"\n    x11 = fork(indices, x8, identity)\n    x12 = apply(x11, x1)\n    x13 = rbind(shoot, UP)\n    x14 = mapply(x13, x12)\n    x15 = underfill(I, ONE, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, ONE)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    x20 = cover(x15, x19)\n    O = paint(x20, x19)\n    return O"], [1.1, "def solve_08a6c6fb(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =795(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x3)\n    x5 = bottomhalf(x3)\n    x6 = tophalf(x2)\n    x7 = bottomhalf(x2)\n    x8 = connect(x4, x5)\n    x9 = connect(x4, x6)\n    x10 = combine(x8, x9)\n    O = leastcommon(x10)\n    return O"], [1.1, "def solve_ec5f4ef7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(multiply, height, width)\n    x2 = decrement(x1)\n    x3 =86(x2, F76)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = insert(x7, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = ofcolor(I, x11)\n    x14 = crop(I, x13, x11)\n    x15 =41(x14)\n    x16 = subgrid(x15, x5)\n    x17 = asobject(x16)\n    x18 = matcher(first, x11)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = trim(x20)\n    x22 = asobject(x21)\n    x23 = decrement(x22)\n    x24 =88 divide(x23, x12)\n    x25 = increment(x24)\n    x26 =777f25ff(I, x25)\n    x27 = asobject(x26)\n    x28 = decrement(x27)\n    x29 =88 divide(x28, x12)\n    x30 = increment(x29)\n    x31 = objects(x28, T, T, T)\n    x32 = colorfilter(x31, x11)\n    x33 = crop(x20, ORIGIN, x12)\n    x34 = valmin(x32, x33)\n    x35 = sizefilter(x32, x34)\n    x36 = recolor(x11, x34)\n    x37 = compose(flip, x28)\n    x38 = mfilter(x35, x37)\n    x39 = paint(I, x38)\n    O = subgrid(x39, x4)\n    return O"], [1.1, "def solve_cdb03031(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = compress(x7)\n    x9 = width(x8)\n    x10 = divide(x9, THREE)\n    x11 = downscale(x8, x10)\n    x12 = height(x8)\n    x13 = crop(x interval, ZERO, x12)\n    x14 = rbind(ofcolor, x5)\n    x15 = compose(x14, last)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x4, x17)\n    return O"], [1.1, "def solve_756ff3b4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(toindices, F normalize)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(intersection, x4)\n    x7 = compose(size, x6)\n    x8 = argmax(x5, x7)\n    x9 = height(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, x7, x6)\n    x12 = subtract(x11, TWO)\n    x13 = size(x8)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = output:\n    x12, x14)\n    x16 = interval(ONE, x12, ONE)\n    x17 = rbind(multiply, x15)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = subgrid(x4, x21)\n    return O"], [1.1, "def solve_ef7f753c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = lbind(toobject, I)\n    x11 = apply(x10, x9)\n    x12 = colorfilter(x11, x3)\n    x13 = combine(x12, x11)\n    x14 = toobject(x13, I)\n    x15 = difference(x4, x12)\n    x16 = apply(x11, x15)\n    x17 = rbind(manhattan, x3)\n    x18 = argmin(x16, x17)\n    x19 = mostcolor(I)\n    x20 = shape(I)\n    x21 = increment(x20)\n    x22 = canvas(x19, x21)\n    x23 = asobject(I)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x22, x24)\n    x26 = interval(ONE, FIVE, ONE)\n    x27 =\n    x28 = product(x26, x26)\n    x29 = totuple(x27)\n    x30 = apply(first, x29)\n    x31 = apply(last, x29)\n    x32 = combine(x30, x31)\n    x33 = lbind(shift, x28)\n    x34 = mapply(x33, x32)\n    O = paint(x19, x34)\n    return O"], [1.1, "def solve_fb0f0eff(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(apply, x12)\n    x14 = compose(x13, palette)\n    x15 = product(x4, x4)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 =885f761969(x16)\n    x19 =bdad(x18, x17)\n    x20 = compose(positive, size)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x22)\n    x23 = x22(x19)\n    x24 = fgpartition(I)\n    x25 = merge(x24)\n    x26 = cover(I, x25)\n    x27 = chain(x24, box, x22)\n    x28 = apply(x27, x28)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x29)\n    O = paint(x26, x30)\n    return O"], [1.1, "def solve_f5e72ac4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = mfilter(x2, hline)\n    x4 = height(x3)\n    x5 = vsplit(I, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 =975e(x6)\n    x9 = ofcolor(x6, ZERO)\n    x10 = toindices(x6)\n    x11 = combine(x10, x9)\n    x12 = fill(x6, ZERO, x11)\n    x13 = partition(x12)\n    x14 = difference(x1, x13)\n    x15 = argmax(x14, identity)\n    x16 = apply(color, x15)\n    x17 = increment(x16)\n    x18 = x17(x15)\n    x19 = shift(x15, x18)\n    x20 = shift(x19, x17)\n    x21 = fill(x12, ZERO, x20)\n    x22 = fill(x21, x8, x19)\n    x23 = combine(x13, x22)\n    x24 = mapply(hfrontier, x23)\n    x25 = fill(x24, x8, x19)\n    x26 = ofcolor(x25, x12)\n    x27 = palette(x25)\n    x28 = remove(x8, x27)\n    x29 = remove(x25, x28)\n    x30 = product(x26, x29)\n    x31 = first(x30)\n    x32 = last(x30)\n    x33 = hfrontier(x31)\n    x34 = vfrontier(x32)\n    x35 = combine(x33, x34)\n    O = fill(x35, x8, x35)\n    return O"], [1.1, "def solve_51c75ade(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = compose(decrement, width)\n    x15 =\n    x16 = vsplit(x6, TWO)\n    x17 = rbind(hsplit, TWO)\n    x18 = initset(x2)\n    x19 = lbind(insert, x18)\n    x20 = chain(insert, dedupe, x19)\n    x21 = x14(x16)\n    x22 = mapply(x21, x14)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_019c936c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirrorbind(IFApply, I)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 =000(x1, x7)\n    x9 = chain(x11, x4, x8)\n    x10 = fill(x6, EIGHT, x5)\n    O = fill(x10, TWO, x9)\n    return O"], [1.1, "def solve_01ac8d52(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = chain(flip, x2, shape)\n    x4 =5555frontier(I)\n    x5 = x2(x4)\n    x6 = lbind(shift, x5)\n    x7 = fork(recolor, x2, x6)\n    x8 = mapply(x7, x3)\n    O = paint(I, x8)\n    return O"], [1.1, "def solve_af17d3ef(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =589\n    58413\n    574698\n    569420\n    233400\n    \"\"\"\n    x2 = vmirror(I)\n    x3 = hconcat(I, x1)\n    x4 = hmirror(x2)\n    O = vconcat(x2, x4)\n    return O"], [1.1, "def solve_c71329f9(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =875(I)\n    x2 =86(I, THREE, FOUR)\n    x3 =00(x1, TWO)\n    x4 = interval(ZERO, NINE, FOUR)\n    x5 = rbind(shift, x3)\n    x6 = totuple(x4)\n    x7 = apply(x5, x6)\n    x8 = lefthalf(x1)\n    x9 = righthalf(x1)\n    x10 = palette(x8)\n    x11 = lbind(shift, x9)\n    x12 = occurrences(x8, x10)\n    x13 = mapply(x11, x12)\n    O =7555(x13)\n    return O"], [1.1, "def solve_0125051f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = helpsitter(I, T)\n    x2 =2c,022)\n    x3 = dmirror(x2)\n    x4 = papply(pair, x2, x3)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x6, x7)\n    x9 = apply(x5, x8)\n    O = subgrid(x9, I)\n    return O"], [1.1, "def solve_f9bce92e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = astuple(subgrid, x3)\n    x5 = remove(x3, x2)\n    x6 = apply(ulcorner, x5)\n    x7 = merge(x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x1)\n    x12 = decrement(x8)\n    x13 = hsplit(x11, x12)\n    x14 = rbind(ofcolor, x ZERO)\n    x15 = apply(x14, x13)\n    x16 = leastcommon(x15)\n    x17 = matcher(first, x16)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x15, x18)\n    x20 = fill(x6, TWO, x19)\n    O = x10(x20)\n    return O"], [1.1, "def solve_82ab6035(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 =555(dedupe, x3)\n    x7 = x5(x6)\n    x8 = replace(x1, THREE, x7)\n    x9 = x5(x8)\n    x10 = asobject(x9)\n    x11 = height(x10)\n    x12 = decrement(x11)\n    x13 = subtract(x12, ONE)\n    x14 = width(x10)\n    x15 = decrement(x14)\n    x16 = add(x15, THREE)\n    x17 = rbind(repeat, x9)\n    x18 = compose(x17, vmirror)\n    x19 = fork(combine, x17, x18)\n    x20 = asobject(x10)\n    x21 = matcher(first, THREE)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = fill(x8, ONE, x23)\n    x25 = trim(x24)\n    x26 = width(x25)\n    x27 = subtract(x26, DOWN)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = height(x25)\n    x32 = subtract(x31, x31)\n    x33 = toivec(x32)\n    x34 = shift(x29, x33)\n    x35 = paint(x30, x34)\n    x36 = ofcolor(x10, x3)\n    x37 = fork(connect, x29, x30)\n    x38 = fork(combine, x37, x39)\n    x39 = mapply(x38, x36)\n    O = fill(x35, x2, x39)\n    return O"], [1.1, "def solve_93eee4d2(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, THREE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = equality(x6, EIGHT)\n    x9 = switch(x6, vmirror, hmirror)\n    x10 = x9(x8)\n    x11 = x4(x10)\n    x12 = pair(x4, x11)\n    x13 = branch(x8, first, last)\n    x14 = extract(x12, x13)\n    x15 = first(x14)\n    x16 = ulcorner(x15)\n    x17 = rightmost(x15)\n    x18 = decrement(x17)\n    x19 = add(x16, x18)\n    x20 =57(x16, x19)\n    x21 = x6(x20)\n    x22 = pair(x21, x12)\n    x23 = apply(last, x22)\n    x24 = mpapply(recolor, x23, x20)\n    O = paint(x5, x24)\n    return O"], [1.1, "def solve_271bfdb6(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(O = lbind(multiply, THREE)\n    x3 = power(x2, FOUR)\n    x4 = x3(I)\n    x5 = ofcolor(x4, x1)\n    x6 = shift(x5, UNITY)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = toindices(x8)\n    x10 = shoot(x4, x9)\n    x11 = underfill(x4, x1, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = first(x12)\n    x14 = vfrontier(x13)\n    x15 = cover(x11, x5)\n    O = paint(x15, x13)\n    return O"]], "1e97544e": [[0.033904932127066766, "def solve_641c4fad(I):\n    x1 = canvas(ZERO, TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05063815704579213, "def solve_d9a5abeb(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, FOUR, x5)\n    return O"], [0.05090373268510345, "def solve_6def0516(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_5a0a1103(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_088f478e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_5b5cad0e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_65f22565(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_66feb675(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05090373268510345, "def solve_12ea1016(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.05978427658322649, "def solve_eb35c029(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.06413233469895704, "def solve_cc3913f6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, THREE, x8)\n    return O"], [0.06555616266185658, "def solve_0c392024(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_d7635a44(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_716a174e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_bd397569(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_8662fe6e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_1e890bf3(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor( ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ZERO, x6)\n    return O"], [0.06555616266185658, "def solve_4d895346(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_50c95d2f(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.06555616266185658, "def solve_253b805d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06555616266185658, "def solve_d617735a(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.06555616266185658, "def solve_635ec628(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, tojvec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.06555616266185658, "def solve_a676a927(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.06639197212020977, "def solve_7aefc0d9(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, SIX, x6)\n    return O"], [0.06736987102975263, "def solve_bd230512(I):\n    x1 = objects(I, T, T, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.06834668128402709, "def solve_0a800fed(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.06927348904207718, "def solve_1e271162(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.06927348904207718, "def solve_1e80ad71(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.06927348904207718, "def solve_7b81549e(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.06959741552663885, "def solve_ae731499(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.06959741552663885, "def solve_0dd0fea7(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.0702135574591548, "def solve_a4fcfad4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.0709170432415734, "def solve_04afbd25(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_dd66d4d8(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.0709170432415734, "def solve_27604466(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.07189074458127896, "def solve_dea0c6de(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.07215121867613122, "def solve_6eab9749(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.07224767729601905, "def solve_e2fd9a2f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [0.07287345360169127, "def solve_47da62e8(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.07443857865203833, "def solve_eafcc2cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.07641808482315048, "def solve_3cec28bf(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_4858d724(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_d3e9539f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_2fdb5b40(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_83d97f85(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_83d2826e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_3511bc60(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_9b28c643(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_1749b26a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_8ec26013(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07641808482315048, "def solve_de4c7f9b(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.07909280166991962, "def solve_20cfb589(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.07909280166991962, "def solve_c4d662f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.07909280166991962, "def solve_c209138f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.08288149159282109, "def solve_662408df(I):\n    x1 = ofcolor(I, TWO)\n    x2 = urcorner(x1)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = shoot(x2, DOWN_LEFT)\n    x5 = underfill(I, THREE, x3)\n    x6 = underfill(x5, ONE, x4)\n    x7 = rbind(shoot, LEFT)\n    x8 = mapply(x7, x3)\n    x9 = mapply(x7, x4)\n    x10 = underfill(x6, ONE, x9)\n    O = underfill(x10, THREE, x8)\n    return O"], [0.08598473307451636, "def solve_18cebbff(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.0868238750835419, "def solve_ea8e4685(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.0868238750835419, "def solve_e0139862(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08755545985583944, "def solve_b4aed7d9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.09047944699004852, "def solve_5891b45d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, FOUR, x4)\n    return O"], [0.09320112108071621, "def solve_4331602b(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09320112108071621, "def solve_bb497512(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09320112108071621, "def solve_6866a66a(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.09541539662006034, "def solve_a94050ab(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(I)\n    O = replace(x4, x5, x3)\n    return O"], [0.09577613189738625, "def solve_1ed0f29e(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.09720967561895832, "def solve_fdb0acbe(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.09720967561895832, "def solve_e3338a93(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.1009967820677068, "def solve_30cd65e1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.1009967820677068, "def solve_5892fbd8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.10940340166655955, "def solve_2584638b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    x9 = fill(I, THREE, x8)\n    x10 = leastcolor(I)\n    O = fill(x9, x10, x2)\n    return O"], [0.11129810647119638, "def solve_f4dc5c76(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.11410495726315961, "def solve_bc1daf90(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.11625404791005751, "def solve_1ffcec24(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, T)\n    x3 = fork(connect, ulcorner, centerofmass)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, x1, x4)\n    O = replace(x5, ZERO, THREE)\n    return O"], [0.11873730483078786, "def solve_f2096b1e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_c5de83a6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_c4e09e7a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_c7444194(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.11873730483078786, "def solve_7d9c0725(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.1217171472815362, "def solve_e1663f1d(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.1217171472815362, "def solve_fdd753a2(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, x3, x6)\n    return O"], [0.1239852807263826, "def solve_ca25a111(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.1239852807263826, "def solve_3ea6f7ae(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.1239852807263826, "def solve_6f52b8e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.1239852807263826, "def solve_6b5ec5c6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.1239852807263826, "def solve_78f894b0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.128059110522633, "def solve_fb2aaf40(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, EIGHT, x4)\n    return O"], [0.1291415585217549, "def solve_db2b3ef5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_6368fafd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.1291415585217549, "def solve_a928d1e8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.13134103434345124, "def solve_b80839e3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.13134103434345124, "def solve_8a97cf2f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.1314364028975242, "def solve_b0611800(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.1314364028975242, "def solve_2d7a66f6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.13256015955962436, "def solve_6020cdb7(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.13508938916939192, "def solve_4f3e6051(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13508938916939192, "def solve_4a2cae9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.13508938916939192, "def solve_793ec4ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.14343122109904335, "def solve_a6c6d923(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.14616952830534066, "def solve_635666e9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.15595293774320831, "def solve_c47b6abd(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.15924388832696912, "def solve_ca7c0ca7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_5ac41180(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_0116f63a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_4d23bdfb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_48a20be5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_4e04410e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_37640ca1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_c47b744d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_b7ac1985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_07802807(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_34d02bd8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_77938cf3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_45579b98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.15924388832696912, "def solve_54f42531(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.16724353719904816, "def solve_2ef41eed(I):\n    x1 = switch(I, FIVE, EIGHT)\n    O = switch(x1, EIGHT, TWO)\n    return O"], [0.16903724504454612, "def solve_fe14b80d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_07bc7bf8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_fc85e1e8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_fe4f2046(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_f33b236f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_ab955f5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_bf9ff8c6(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_f587dd24(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.16903724504454612, "def solve_f56a5596(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.1695915995493272, "def solve_d9c1689d(I):\n    O = hmirror(I)\n    return O"], [0.1773065582183363, "def solve_d3df852a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_37f26949(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_9f5a128b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_5945c8f8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.1773065582183363, "def solve_caa628d3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.18190769514794702, "def solve_7a6bf329(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.18190769514794702, "def solve_3a7ae0e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.19082520987900767, "def solve_ba808568(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.19082520987900767, "def solve_aa743878(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.19082520987900767, "def solve_87def718(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(first, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.19523826323804427, "def solve_1aa8aa90(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.1968197311802683, "def solve_d35d909e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.1968197311802683, "def solve_d1c6a0d1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.1968197311802683, "def solve_8cef8041(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.1968197311802683, "def solve_a3a308dc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.20306126840468763, "def solve_b0bb12b6(I):\n    O = dmirror(I)\n    return O"], [0.20306126840468763, "def solve_94df2242(I):\n    O = dmirror(I)\n    return O"], [0.21088209033434402, "def solve_f742d004(I):\n    x1 = switch(I, FOUR, EIGHT)\n    x2 = switch(x1, TWO, FOUR)\n    x3 = switch(x2, ONE, FOUR)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.21391916164730382, "def solve_ca2e63dc(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_c336986f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.21391916164730382, "def solve_d25ff74b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.2159483903946915, "def solve_c6314232(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.21904040042169512, "def solve_4c92211f(I):\n    O = rot180(I)\n    return O"], [0.21904040042169512, "def solve_61c15cb1(I):\n    O = rot180(I)\n    return O"], [0.21904040042169512, "def solve_cf3977c7(I):\n    x1 = dmirror(I)\n    x2 = ofcolor(x1, FIVE)\n    x3 = compose(even, last)\n    x4 = sfilter(x2, x3)\n    x5 = fill(x1, ZERO, x4)\n    O = cmirror(x5)\n    return O"], [0.2214111627976659, "def solve_149172f1(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    O = fill(x3, EIGHT, x6)\n    return O"], [0.2273060353683443, "def solve_b21e7147(I):\n    x1 = replace(I, TWO, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.23424985902563292, "def solve_6a03ff2f(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.23424985902563292, "def solve_acf7ef78(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.24469069263128604, "def solve_abf4e182(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = fill(x11, ZERO, x7)\n    x13 = ofcolor(x12, ZERO)\n    x14 = asindices(x12)\n    x15 = ofcolor(x12, TWO)\n    x16 = mapply(ineighbors, x15)\n    O = fill(x12, ZERO, x16)\n    return O"], [0.2537260279414613, "def solve_c2a7b8c8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_69b37bed(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_02913bb2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_4f73f41f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = fgpartition(x6)\n    x9 = merge(x8)\n    O = paint(x6, x9)\n    return O"], [0.2537260279414613, "def solve_c7a7f8bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2537260279414613, "def solve_ebe978f3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.25599965841567823, "def solve_b6d682da(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.2616281866281866, "def solve_e3288b92(I):\n    O = trim(I)\n    return O"], [0.2657948532948533, "def solve_84df100f(I):\n    O = subgrid(I, I)\n    return O"], [0.2657948532948533, "def solve_8f0b143a(I):\n    O = subgrid(I, I)\n    return O"], [0.2657948532948533, "def solve_c5ebf15c(I):\n    O = subgrid(I, I)\n    return O"], [0.2657948532948533, "def solve_c3d61afd(I):\n    x1 = subgrid(I, I)\n    x2 = ofcolor(x1, ZERO)\n    x3 = asindices(x1)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x1, ONE, x9)\n    x11 = asobject(x1)\n    O = paint(x10, x11)\n    return O"], [0.26877104377104377, "def solve_1c371af5(I):\n    x1 = trim(I)\n    x2 = objects(x1, F, T, T)\n    x3 = argmin(x2, numcolors)\n    x4 = normalize(x3)\n    x5 = toindices(x4)\n    x6 = prapply(connect, x5, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    O = underfill(x1, NEG_ONE, x8)\n    return O"], [0.2704028721250951, "def solve_bb3654f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.29493888612223423, "def solve_57eacd28(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.29664969986532563, "def solve_47ff83cc(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.2969700117912533, "def solve_cd275006(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3050218321375391, "def solve_a1b6a9b4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x4, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x4, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x4, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3063136421137608, "def solve_fc7a1cd2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3063136421137608, "def solve_a9ea423d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3063136421137608, "def solve_a4ccf199(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.3082441023536176, "def solve_7e7a4dff(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_a5917d87(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_b35d6061(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_818bb270(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.3082441023536176, "def solve_57e90ff2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.31011174594270147, "def solve_e1d87129(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_f1eccfa6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_e631ca4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_60dce097(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_92cca2ad(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_4767b213(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_7c821108(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_9020706d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_54bb6e26(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_d9ab51fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.31011174594270147, "def solve_0034d50a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.3104501482052144, "def solve_090595df(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_952023cf(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_949e11ed(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_95e1f5bd(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_995d0378(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.3104501482052144, "def solve_093d45a4(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.31313111917950626, "def solve_d1aa6bc6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.320952197319818, "def solve_5ee2ed15(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.3314449532924934, "def solve_28b18022(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.33324150002846714, "def solve_bec9c22f(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.33324150002846714, "def solve_ee5d4af4(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.33324150002846714, "def solve_c5e68849(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.3384341187221576, "def solve_ce52c751(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.3384341187221576, "def solve_e3948e19(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.3384341187221576, "def solve_fb6a3538(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.33873283589633685, "def solve_e57e3d16(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.35285797856791773, "def solve_15e0cc19(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.374103298388441, "def solve_6f902f4f(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = equality(x1, TWO)\n    x8 = shape(I)\n    x9 = decrement(x8)\n    x10 = width(I)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = branch(x7, x9, x12)\n    x14 = shape(I)\n    x15 = canvas(ZERO, x14)\n    x16 = connect(x6, x13)\n    O = fill(x15, FIVE, x16)\n    return O"], [0.3757230568198286, "def solve_8c472259(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = argmax(x5, size)\n    x7 = shape(x6)\n    x8 = canvas(x4, x7)\n    x9 = normalize(x6)\n    O = paint(x8, x9)\n    return O"], [0.4062968519814561, "def solve_779c5f07(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.40995162868139406, "def solve_a51b2b24(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_0c691c5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.40995162868139406, "def solve_e4a2a00b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.4170310435194296, "def solve_2c70268a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.4817155408844063, "def solve_5b190dbc(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, FOUR, x21)\n    return O"], [0.48382635882635877, "def solve_bd8e8cc3(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.49198875198875197, "def solve_2d5ab11f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x6, ONE)\n    x8 = compose(leastcolor, merge)\n    x9 = colorfilter(x1, x4)\n    x10 = branch(x7, x8, x9)\n    x11 = branch(x7, vsplit, hsplit)\n    x12 = x11(I, TWO)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = palette(x13)\n    x16 = other(x15, x4)\n    x17 = palette(x14)\n    x18 = other(x17, x4)\n    x19 = shape(x13)\n    x20 = canvas(x8, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.5025446278465109, "def solve_48a4b03e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.5064013204664738, "def solve_51f86cd5(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.5361593772393736, "def solve_8e572b86(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(x1)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.5371132714255592, "def solve_0fa3496b(I):\n    x1 = replace(I, FIVE, ZERO)\n    O = downscale(x1, THREE)\n    return O"], [0.540821806919368, "def solve_8048952c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.5586554186554187, "def solve_e565140f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.5682644504342618, "def solve_f891c4a8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.5682644504342618, "def solve_c306676f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = subgrid(x2, I)\n    return O"], [0.5801077246461932, "def solve_bc7aab33(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_bc999f25(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5801077246461932, "def solve_4aacf3da(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6185357460219338, "def solve_5392da9c(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6185357460219338, "def solve_a1d477cf(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.656779053865826, "def solve_52aa6171(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.6767316017316017, "def solve_2bd32f9a(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.6793066105327229, "def solve_cab6c0d6(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.6864027958823499, "def solve_695b04c8(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [0.6912337662337663, "def solve_eea4254d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.6912337662337663, "def solve_a7c745de(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7047029674817701, "def solve_af243358(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.7047029674817701, "def solve_ffc46cf3(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.7047029674817701, "def solve_bf183830(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.7554473304473305, "def solve_736ac3e7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [0.7635281385281386, "def solve_acc6396a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_cb758191(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.7635281385281386, "def solve_991f77e8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.770779698142647, "def solve_3c154fcd(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = partition(x2)\n    x4 = rbind(contained, x3)\n    x5 = chain(flip, x4, shape)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, box)\n    x8 = sfilter(x6, x7)\n    x9 = fork(multiply, height, width)\n    x10 = argmin(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.8704545454545455, "def solve_3cfc9c7f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.8704545454545455, "def solve_1cb74a12(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [1.0, "def solve_e429b307(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(O)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [1.0, "def solve_2efc50dd(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c75443ff(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = shape(x3)\n    x5 = canvas(ZERO, x4)\n    x6 = hconcat(x3, x5)\n    x7 = palette(x6)\n    x8 = remove(ZERO, x7)\n    x9 = other(x8, FOUR)\n    x10 = ofcolor(x6, x9)\n    x11 = ofcolor(x6, FOUR)\n    x12 = fill(x5, NINE, x11)\n    x13 = mapply(vfrontier, x10)\n    x14 = mapply(hfrontier, x11)\n    x15 = fill(x12, NEG_ONE, x14)\n    x16 = fill(x15, FOUR, x13)\n    x17 = fill(x16, ZERO, x12)\n    O = fill(x17, FIVE, x16)\n    return O"], [1.0, "def solve_dc193ef5(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = mostcolor(I)\n    x9 = inbox(x7)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = matcher(first, x8)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x11, x13)\n    x15 = hfill(I, TWO, x14)\n    x16 = color(x7)\n    x17 =box(x7)\n    x18 = fill(x15, x16, x17)\n    x19 = subgrid(x15, x18)\n    x20 = asobject(x19)\n    x21 = matcher(first, x8)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x25, hsplit, vsplit)\n    x27 = x26(I, TWO)\n    x28 = shape(x27)\n    x29 = canvas(x8, x28)\n    x30 = multiply(x28, x29)\n    x31 = shift(x23, x30)\n    x32 = paint(x29, x31)\n    x33 = rbind(contained, x32)\n    x34 = sfilter(x17, x33)\n    x35 = compose(hline, vline)\n    x36 = sfilter(x14, x35)\n    x37 = subgrid(x36, x32)\n    O = paint(x37, x31)\n    return O"], [1.0, "def solve_2b697a73(I):\n    x1 = astuple(I, THREE)\n    x2 = astuple(x1, x1)\n    x3 = astuple(LEFT, UNITY)\n    x4 = astuple(NEG_UNITY, x3)\n    x5 = astuple(rot90, x4)\n    x6 = astuple(rot180, x4)\n    x7 = astuple(rot270, x4)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x10, x6)\n    O = underfill(I, ZERO, x11)\n    return O"], [1.0, "def solve_4ec321af(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_2e99ed2b(I):\n    x1 = frontiers(I)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    O = move(x2, x100, x2)\n    return O"], [1.0, "def solve_461a90fb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = add(x23, x18)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = paint(I, x26)\n    x28 = ofcolor(x27, x9)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = paint(x27, x30)\n    return O"], [1.0, "def solve_f5ff553e(I):\n    x1 = objects(I, T, F, T)\n    x2 = Tizefilter(x1, ONE)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.0, "def solve_c8bbd18c(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = ulcorner(x1)\n    x6 = toindices(x5)\n    x7 = shape(x3)\n    x8 = add(x5, x7)\n    x9 = initset(x8)\n    x10 = shift(x3, x9)\n    x11 = toindices(x10)\n    x12 = fgpartition(x2)\n    x13 = merge(x12)\n    x14 = cover(I, x13)\n    x15 = fgpartition(x2)\n    x16 = merge(x15)\n    x17 = paint(x14, x16)\n    x18 = height(x11)\n    x19 = width(x11)\n    x20 = divide(x18, x19)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = Fgpartition(x17)\n    x24 = merge(x23)\n    x25 = mostcolor(I)\n    x26 = combine(x23, x24)\n    x27 = fill(x17, x25, x26)\n    x28 = astuple(x27, x920)\n    x29 = canvas(ZERO, x28)\n    x30 = asindices(x29)\n    x31 = recolor(x25, x30)\n    x32 = lbind(shift, x31)\n    x33 = occurrences(x27, x32)\n    x34 = mapply(x33, x22)\n    O = fill(x27, x25, x34)\n    return O"], [1.0, "def solve_7d5ac4ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_88cbc542(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = argmin(x2, x3)\n    x5 = colorfilter(x1, x4)\n    x6 = rbind(vmatching, x4)\n    x7 = rbind(hmatching, x4)\n    x8 = fork(either, x6, x7)\n    x9 = extract(x5, x8)\n    x10 = rbind(gravitate, x4)\n    x11 = compose(center, x10)\n    x12 = fork(add, center, x11)\n    x13 = fork(connect, x12, backdrop)\n    x14 = shape(x9)\n    x15 = maximum(x14)\n    x16 = interval(ONE, x15, ONE)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(shift, x9)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = canvas(ZERO, x4)\n    return O"], [1.0, "def solve_23d7a91f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_0f143e14(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_506ee0e1(I):\n    x1 = height(I)\n    x2 = rot90(I)\n    x3 = subtract(x1, TWO)\n    x4 = multiply(NEG_ONE, THREE)\n    x5 = tojvec(x3)\n    x6 = shift(x2, x5)\n    O = underfill(I, THREE, x6)\n    return O"], [1.0, "def solve_0f8aa01b(I):\n    x1 = initset(identity)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [1.0, "def solve_03687d0a(I):\n    x1 = lbind(apply, maximum)\n    x2 = lbind(apply, downscale)\n    x3 = chain(x1, x2, frontiers)\n    x4 = fork(positive, size, dedupe)\n    x5 = lbind(apply, shape)\n    x6 = height(I)\n    x7 = lbind(pair, I)\n    x8 = chain(x4, x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = compose(color, x8)\n    x11 = fork(both, x9, x10)\n    x12 = extract(x10, x11)\n    x13 = rbind(colorcount, x12)\n    x14 = argmin(x12, x13)\n    x15 = delta(x14)\n    x16 = astuple(x11, x10)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x15, x17)\n    x19 = mpapply(recolor, x18, x13)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_b735f956(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, NINE, ZERO)\n    x3 = colorfilter(x1, NINE)\n    x4 = mapply(d4f5)\n    x5 = fill(x2,140, x4)\n    x6 = mapply(ff805, x5)\n    O = fill(x5, ONE, x6)\n    return O"], [1.0, "def solve_e3198cc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x39, x7)\n    x11 = remove(x8, x10)\n    x22 = merge(x11)\n    x23 = color(x12)\n    x24 = color(x8)\n    x25 = combine(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, x13, x26)\n    return O"], [1.0, "def solve_d1cadab6(I):\n    x1 = mostcolor(I)\n    x2 = box(I)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [1.0, "def solve_25b615f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = add(x26, THREE)\n    x8 = connect(x7, x7)\n    O = fork(recolor, color, x8)\n    return O"], [1.0, "def solve_52edf60f(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_97ffdbba(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = fork(equality, toindices, box)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, F, F, T)\n    x6 = sfilter(x5, x4)\n    x7 = difference(x5, x6)\n    O = fill(I, FOUR, x7)\n    return O"], [1.0, "def solve_d46a2c69(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, x7)\n    x9 = x6(x8)\n    x10 = branch(x5, compress, vmirror)\n    x11 = x5(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da77fe4c(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 =outbox(x13)\n    x15 = ulcorner(x14)\n    x16 = invert(x15)\n    x17 = shift(x16, UNITY)\n    x18 = shift(x16, LEFT)\n    x19 = interval(x17, x18, ONE)\n    x20 = apply(tojvec, x19)\n    x21 = apply(vfrontier, x20)\n    x22 = mapply(x21, x2)\n    x23 = combine(x17, x17)\n    x24 = fill(x8, x1, x23)\n    x25 = fill(x24, x2, x22)\n    O = fill(x25, x23, x24)\n    return O"], [1.0, "def solve_21f49bcf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9be1488a(I):\n    x1 = lbind(adjacent, I)\n    x2 = compose(x1, size)\n    x3 = fork(both, x2, box)\n    x4 = fork(both, x3, height)\n    x5 = fork(both, x4, width)\n    x6 = fork(both, hline, vline)\n    x7 = fork(both, center, rot90)\n    x8 = fork(both, center, rot270)\n    x9 = fork(both, x5, x6)\n    x10 = fork(both, x6, x8)\n    x11 = fork(connect, lefthalf, tophalf)\n    x12 = fork(branch, x11, x10)\n    x13 = fork(x12, positive, branch)\n    x14 = branch(x13, size, x7)\n    x15 = maximum(x14)\n    x16 = rot90(I)\n    x17 = double(x16)\n    x18 = interval(ONE, x17, ONE)\n    x19 = center(I)\n    x20 = pair(x18, x19)\n    x21 = objects(x23, F, T, T)\n    x22 = rbind(add, RIGHT)\n    x23 = compose(x22, center)\n    x24 = color(x23)\n    x25 = interval(ZERO, x17, ONE)\n    x26 = rbind(add, DOWN)\n    x27 = compose(x26, x23)\n    x28 = astuple(x15, x17)\n    x29 = astuple(x24, x23)\n    x30 = combine(x28, x29)\n    x31 = rbind(shoot, UP)\n    x32 = mapply(x31, x30)\n    x33 = fill(x23, FOUR, x32)\n    x34 = subgrid(x33, x20)\n    O = trim(x34)\n    return O"], [1.0, "def solve_f85106ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_541837c3(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_73bd7ba7(I):\n    x1 = trim(I)\n    x2 = repeat(dedupe, x1)\n    x3 = repeat(x2, ONE)\n    x4 = compress(x3)\n    x5 = width(x4)\n    x6 = halve(x5)\n    x7 = upscale(x4, x6)\n    x8 = height(x4)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = lbind(shift, x4)\n    x12 = mapply(x11, x10)\n    O = paint(x4, x12)\n    return O"], [1.0, "def solve_307cd6bd(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = shape(I)\n    x4 = multiply(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = ofcolor(I, x2)\n    x7 = lbind(shift, x6)\n    x8 = shape(I)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x6)\n    x11 = mapply(x7, x10)\n    O = fill(x5, x2, x11)\n    return O"], [1.0, "def solve_bb620a85(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_b8608c19(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = partition(I)\n    x4 = fork(multiply, height, width)\n    x5 = argmin(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = height(I)\n    x8 = divide(x7, THREE)\n    x9 = width(I)\n    x10 = interval(THREE, x9, ONE)\n    x11 = pair(x5, x10)\n    x12 = sfilter(x11, last)\n    x13 = fork(add, first, last)\n    x14 = rbind(multiply, x8)\n    x15 = apply(x14, x12)\n    x16 = mapply(x13, x15)\n    O = fill(I, x1, x16)\n    return O"], [1.0, "def solve_66791150(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_6b1bba2a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_f5e7d35f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_748c71ab(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_9d01c831(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_d24d1a03(I):\n    x1 = astuple(TEN, TEN)\n    x2 = canvas(ZERO, x1)\n    x3 = argmin(x2, size)\n    x4 = last(x2)\n    x5 = remove(x3, x2)\n    x6 = recolor(FIVE, x5)\n    x7 = recolor(lrcorner, x5)\n    x8 = add(x7, UNITY)\n    x9 = initset(x8)\n    x10 = insert(x6, x9)\n    x11 = branch(x4, x10, x3)\n    O = canvas(ZERO, x1)\n    return O"], [1.0, "def solve_a31d55d6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = matcher(first, x22)\n    x24 =sfilter(x21, x23)\n    x25 = chain(size, dedupe, first)\n    x26 = argmax(x24, x25)\n    x27 = matcher(first, x22)\n    x28 = sfilter(x24, x27)\n    x29 = difference(x28, x26)\n    x30 =matcher(first, x22)\n    x31 = sfilter(x29, x30)\n    x32 = combine(x26, x31)\n    x33 = mapply(x15, x32)\n    x34 = fill(I, THREE, x33)\n    O = fill(x34, EIGHT, x22)\n    return O"], [1.0, "def solve_2e5054dc(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_eb863460(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_487cb3b2(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_920e8a37(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_bb563887(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_6ba5084d(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = index(x4, DOWN)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = lrcorner(x6)\n    x10 = shoot(x9, NEG_UNITY)\n    x11 = llcorner(x6)\n    x12 = shoot(x11, DOWN_LEFT)\n    x13 = combine(x8, x12)\n    x14 =Rbind(shoot, xdelta)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = fill(x4, THREE, x16)\n    x18 = replace(x17, FIVE, ZERO)\n    O = x5(x18)\n    return O"], [1.0, "def solve_77fc21b4(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = lbind(colorfilter, x3)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, TWO)\n    x9 = palette(x2)\n    x10 = sfilter(x9, x8)\n    x11 = fork(equality, toindices, box)\n    x12 = rbind(contained, x5)\n    x13 = compose(x12, first)\n    x14 = rbind(contained, x10)\n    x15 = compose(x14, first)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x11, x16)\n    x18 = extract(x5, x17)\n    x19 = other(x5, x18)\n    x20 = ofcolor(x4, x19)\n    x21 = rightmost(x20)\n    x22 = manhattan(x21, x18)\n    x23 = uppermost(x20)\n    x24 = decrement(x23)\n    x25 = leftmost(x20)\n    x26 = rbind(add, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x40, x27)\n    x29 = rbind(vmatching, x20)\n    x30 = sfilter(x4, x29)\n    x31 = fork(either, vline, hline)\n    x32 = mfilter(x30, x31)\n    x33 = fill(x1, x19, x32)\n    x34 = replace(x33, x19, x5)\n    O = fill(x34, x10, x32)\n    return O"], [1.0, "def solve_56db1905(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, EIGHT, x4)\n    x6 = matcher(numcolors, ONE)\n    x7 = objects(x5, F, F, T)\n    x8 = difference(x7, x2)\n    x9 = fill(x5, TWO, x8)\n    x10 = colorfilter(x9, EIGHT)\n    x11 = rbind(adjacent, x2)\n    x12 = mfilter(x10, x11)\n    x13 = mfilter(x10, x12)\n    x14 = underfill(x9, THREE, x13)\n    x15 = rbind(adjacent, x2)\n    x16 = mfilter(x14, x15)\n    x17 = mfilter(x14, x16)\n    x18 = colorfilter(x17, TWO)\n    x19 = rbind(adjacent, x2)\n    x20 = mfilter(x18, x19)\n    x21 = mfilter(x18, x20)\n    x22 = fill(x9, THREE, x21)\n    O = replace(x22, EIGHT, ONE)\n    return O"], [1.0, "def solve_d7e0530a(I):\n    x1 = ofcolor(I, TWO)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = lbind(recolor, TWO)\n    x7 = chain(x6, x5, first)\n    x8 = chain(x5, x7, last)\n    x9 = fork(combine, first, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(multiply, first, x10)\n    x12 = compose(x4, last)\n    x13 = chain(x12, x11, x41)\n    x14 = fork(apply, x13, x11)\n    x15 = power(x14, TWO)\n    x16 = fork(difference, x9, last)\n    x17 = fork(recolor, x15, x16)\n    x18 = apply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f29eedf7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_ab3062e4(I):\n    x1 = remove(ZERO, x1)\n    x2 = astuple(x1, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = hmirror(x3)\n    x5 = vconcat(x3, x4)\n    x6 = double(x1)\n    x7 = astuple(x6, x5)\n    x8 = crop(I, DOWN, x7)\n    O = vconcat(x5, x8)\n    return O"], [1.0, "def solve_0dd67c96(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_acc729c5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_54417fbb(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_37c1dc45(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_a65d5fa7(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = initset(x3)\n    x5 = cover(I, x4)\n    x6 = upscale(x5, TWO)\n    x7 = shape(x6)\n    x8 = add(x6, TWO_BY_ZERO)\n    x9 = canvas(ZERO, x8)\n    x10 = asobject(x9)\n    x11 = shift(x10, UNITY)\n    O = paint(x9, x11)\n    return O"], [1.0, "def solve_fccc23eb(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = rbind(argmin, x83750696)\n    x10 = compose(x9, subgrid)\n    x11 = apply(x10, x5)\n    x12 = mapply(x8, x11)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_76d76b54(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 =intersection(x2, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x3, I)\n    x10 = increment(x4)\n    x11 = divide(x10, FOUR)\n    x12 = x11(x9)\n    x13 = hconcat(x9, x12)\n    x14 = hconcat(x13, x5)\n    x15 = vconcat(x13, x14)\n    x16 = vconcat(x15, x5)\n    O = cellwise(x16, x7, ZERO)\n    return O"], [1.0, "def solve_5a8b3933(I):\n    x1 = subgrid(I, I)\n    x2 = astuple(ONE, THREE)\n    x3 = astuple(TWO, FOUR)\n    x4 = initset(x2)\n    x5 = insert(x3, x4)\n    x6 = insert(x1, x5)\n    x7 = prapply(connect, x6, toindices)\n    x8 =8091409464\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = x9(x7)\n    x11 = halve(x1)\n    x12 = astuple(x11, x11)\n    x13 = x9(x12)\n    x14 = height(x10)\n    x15 = decrement(x14)\n    x16 = lbind(astuple, x15)\n    x17 = apply(x16, x13)\n    x18 = ZERO(x17)\n    x19 = fill(x1, EIGHT, x18)\n    x20 = fill(x19, FOUR, x7)\n    O = fill(x20, FOUR, x10)\n    return O"], [1.0, "def solve_5f806a07(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_b8e6e30f(I):\n    x1 = astuple(287, dmirror)\n    x2 = astuple(cmirror, NEG_ONE, x1)\n    x3 = hsplit(I, x2)\n    x4 = rbind(ofcolor, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = merge(x6)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_6f0e02fa(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    O = upscale(I, x2)\n    return O"], [1.0, "def solve_94a80115(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = equality(x1, x2)\n    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x5 = branch(x3, x2, x4)\n    x6 = vconcat(I, x5)\n    O = replace(x6, ONE, TWO)\n    return O"], [1.0, "def solve_52404df0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, identity)\n    x3 = branch(x1, decrement, height)\n    x4 = x3(I)\n    x5 = astuple(ONE, x4)\n    x6 = x2(I)\n    x7 = crop(x6, ORIGIN, x5)\n    x8 = branch(x7, decrement, width)\n    x9 = x8(x4)\n    x10 = astuple(ONE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = rot90(x11)\n    x13 = hconcat(x12, x1)\n    x14 = hsplit(x13, THREE)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = objects(x11, F, T, T)\n    x18 = ofcolor(x11, ONE)\n    x19 = ofcolor(x11, TWO)\n    x20 = rbind(shoot, DOWN)\n    x21 = mapply(x20, x17)\n    x22 = rbind(shoot, UP_RIGHT)\n    x23 = mapply(x22, x19)\n    x24 = fill(x11, ONE, x21)\n    x25 = fill(x24, TWO, x23)\n    x26 = fill(x25, ONE, x25)\n    O = x2(x26)\n    return O"], [1.0, "def solve_b0001103(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = objects(x14, T, F, T)\n    x21 = other(x20, x13)\n    x22 = subgrid(x21, x15)\n    x23 = llcorner(x9)\n    x24 = urcorner(x9)\n    x25 = shoot(x28, UNITY)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = shoot(x24, UP_RIGHT)\n    x28 = combine(x26, x27)\n    O = fill(x10, x3, x28)\n    return O"], [1.0, "def solve_311956be(I):\n    x1 = mostcolor(I)\n    x2 = hconcat(I, I)\n    x3 = upscale(I, THREE)\n    x4 = asobject(x3)\n    x5 = hperiod(x4)\n    x6 = vperiod(x4)\n    x7 = hperiod(x6)\n    x8 = vperiod(x6)\n    x9 = hperiod(x8)\n    x10 = hperiod(x4)\n    x11 = hperiod(x5)\n    x12 = hperiod(x6)\n    x13 = hperiod(x5)\n    x14 = vperiod(x6)\n    x15 = hperiod(x5)\n    x16 = vperiod(x6)\n    x17 = hperiod(x5)\n    x18 = hperiod(x6)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x4)\n    x25 = mapply(x24, x23)\n    x26 = paint(I, x25)\n    x27 = occurrences(x26, x4)\n    x28 = mapply(toindices, x27)\n    O = fill(x26, x1, x28)\n    return O"], [1.0, "def solve_9cdca2ab(I):\n    x1 = asobject(I)\n    x2 = leastcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = canvas(ZERO, x11)\n    x13 = paint(x12, x10)\n    O = paint(x13, x12)\n    return O"], [1.0, "def solve_400acd80(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argtoindices(x14)\n    x26 = x24(x25)\n    x27 = ofcolor(x15, x13)\n    x28 = intersection(x26, x27)\n    x29 = rbind(contained, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x22, x30)\n    x32 = lbind(shift, x24)\n    x33 = height(x12)\n    x34 = rbind(multiply, x33)\n    x35 = chain(x32, x34, last)\n    x36 = mapply(x35, x31)\n    x37 = paint(x14, x36)\n    O = x15(x37)\n    return O"], [1.0, "def solve_4f251d09(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_6e640b67(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = combine(x4, x6)\n    x6 = shape(x2)\n    x7 = hfrontier(x6)\n    x8 = insert(x3, x7)\n    x9 = fill(I, x3, x8)\n    x10 = hmirror(x2)\n    x11 = objects(x10, F, F, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, x9)\n    x14 = paint(x9, x13)\n    x15 = normalize(x12)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x14, x17)\n    return O"], [1.0, "def solve_2c118383(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_cb4194cd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x22 = combine(x8, x9)\n    x23 = intersection(x11, x12)\n    x24 = difference(x22, x23)\n    x25 = toobject(x24, I)\n    x26 = color(x25)\n    x27 = subgrid(x9, I)\n    x28 = solve(x27, x26)\n    x29 = replace(x28, x10, x264)\n    x30 = ofcolor(x29, x27)\n    x31 = subgrid(x30, x29)\n    x32 = numbercolors(x31)\n    x33 = first(x32)\n    x34 = normalize(x33)\n    x35 = last(x32)\n    x36 = remove(x34, x32)\n    x37 = remove(x35, x32)\n    x38 = combine(x36, x37)\n    x39 = fill(x29, x27, x38)\n    x40 = ofcolor(x39, x706)\n    x41 = replace(x39, x10, x04)\n    x42 = ofcolor(x41, x727)\n    x43 = rightmost(x40)\n    x44 = equality(x43, x82)\n    x45 = branch(x44, x41, x45)\n    x46 = rbind(shoot, DOWN)\n    x47 = mapply(x46, x34)\n    x48 = difference(x47, x41)\n    O = fill(x43, x27, x48)\n    return O"], [1.0, "def solve_7713104a(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = mapply(x22, x21)\n    O = fill(x7, x18, x23)\n    return O"], [1.0, "def solve_21192291(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_cbf7423c(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = halve(x2)\n    x4 = rbind(shoot, UP_RIGHT)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = fork(combine, x4, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(combine, x6, x9)\n    x11 = height(I)\n    x12 = rbind(valmax, x11)\n    x13 = hmatching(x12, x1)\n    x14 = branch(x13, x11, x10)\n    x15 = extract(x14, x14)\n    x16 = subgrid(x15, I)\n    O = trim(x16)\n    return O"], [1.0, "def solve_01da4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x3, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = argmin(x11, size)\n    x13 = subgrid(x12, I)\n    x14 = llcorner(x12)\n    x15 = replace(x13, x4, ZERO)\n    x16 = replace(x15, x17, x13)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = hconcat(x17, x14)\n    x21 = hconcat(x18, x15)\n    x22 = vconcat(x20, x21)\n    x23 = vconcat(x22, x17)\n    O = vconcat(x22, x18)\n    return O"], [1.0, "def solve_eaa6aa55(I):\n    x1 = objects(I, F, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = lbind(shift, x3)\n    x5 = apply(x4, x1)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = apply(x7, x5)\n    x9 = mapply(x4, x8)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_fdfcbe93(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1,x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [1.0, "def solve_57edebc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_6826cc57(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = argmax(x2, size)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x3)\n    x6 = toindices(x5)\n    x7 = subgrid(x3, x4)\n    x8 = lbind(shift, x6)\n    x9 = compose(x8, ulcorner)\n    x10 = argmax(x2, x9)\n    O = paint(x7, x10)\n    return O"], [1.0, "def solve_1c41ed9f(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_23f7d8ef(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_05befef2(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = switch(x1, NEG_ONE, TWO)\n    x4 = switch(x2, EIGHT, x3)\n    x5 = combine(x4, x4)\n    x6 = intersection(x5, x4)\n    x7 = hmirror(x6)\n    x8 = vmirror(x6)\n    x9 = objects(x8, T, F, T)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 =dfmirror(x6)\n    x13 = toindices(x12)\n    x14 = rbind(first, x13)\n    x15 = toindices(x14)\n    x16 = mapply(x16, x9)\n    x17 = fill(x6, EIGHT, x13)\n    x18 = fill(x17, FOUR, x15)\n    O = fill(x18, ONE, x16)\n    return O"], [1.0, "def solve_5d13204b(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(fork, maximum)\n    x6 = lbind(lbind, subgrid)\n    x7 = lbind(compose, x5)\n    x8 = chain(x7, x6, x4)\n    x9 = lbind(colorcount, I)\n    x10 = compose(x9, x8)\n    x11 = fork(equality, x8, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_3bcc10c4(I):\n    x1 = fgpartition(I)\n    x2 = rbind(other, FIVE)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = mfilter(x5, x2)\n    O = paint(I, x6)\n    return O"], [1.0, "def solve_4d0d0b26(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4ea1adf2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_663bbba3(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = urcorner(x2)\n    x15 = ulcorner(x3)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = shoot(x12, UP_RIGHT)\n    x18 = shoot(x13, NEG_UNITY)\n    x19 = shoot(x11, UNITY)\n    x20 = shoot(x15, DOWN_LEFT)\n    x21 = shoot(x16, UP_RIGHT)\n    x22 = fork(combine, x14, x17)\n    x23 = fork( combine, x16, x18)\n    x24 = fork(combine, x22, x23)\n    x25 = x24(x2)\n    x26 = dmirror(x25)\n    x27 = invert(x26)\n    x28 = shape(x2)\n    x29 = canvas(ZERO, x28)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = asindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = mapply(x33, x31)\n    O = paint(x39, x34)\n    return O"], [1.0, "def solve_613381a9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_39f0038f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9d184417(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_44e6e0c8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_888867e7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_8ecafcbd(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_5cef4f22(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_37d3c75d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_dca06431(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_acaa78f4(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_205c1eb7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_37a67f0e(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = chain(invert, center, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = astuple(identity, rot90)\n    x7 = astuple(rot180, rot270)\n    x8 = combine(x6, x7)\n    x9 = argmax(x8, x4)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = combine(x4, x11)\n    x13 = urcorner(x12)\n    x14 = shoot(x13, DOWN_LEFT)\n    x15 = combine(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = mapply(x6, x12)\n    x18 = combine(x6, x17)\n    x19 = fill(I, ONE, x18)\n    O = objects(x19, T, F, T)\n    return O"], [1.0, "def solve_22d10acb(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = x1(I, TWO)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = palette(x3)\n    x6 = width(x3)\n    x7 = rbind(repeat, x6)\n    x8 = compose(x7, merge)\n    x9 = matcher(x8, ONE)\n    x10 = compose(flip, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(x11, first)\n    x13 = rbind(sfilter, x12)\n    x14 = compose(x13, first)\n    x15 = fork(combine, x12, x14)\n    x16 = fork(recolor, x12, x15)\n    x17 = mapply(x16, x5)\n    O = paint(x3, x17)\n    return O"], [1.0, "def solve_f4d7c72f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x8)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_bf67fac6(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x55(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [1.0, "def solve_fbe9c8e6(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2c7776e6(I):\n    x1 = frontiers(I)\n    x2 = matcher(color, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(I, T, T, F)\n    x13 = colorfilter(x12, x11)\n    x14 = rbind(manhattan, x13)\n    x15 = chain(even, x14, initset)\n    x16 = sfilter(x13, x15)\n    x17 = compose(man, first)\n    x18 = apply(x17, x16)\n    x19 = branch(x6, x18, x111)\n    x20 = canvas(x11, THREE_BY_THREE)\n    x21 = matcher(first, x10)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x13, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x5, x22, x25)\n    O = canvas(x26, UNITY)\n    return O"], [1.0, "def solve_1ed4b2d8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices755(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_82ac6801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = x25(x22)\n    O = fill(x14, THREE, x26)\n    return O"], [1.0, "def solve_bca5b96d(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_58ddfa13(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5ce4c359(I):\n    x1 = frontiers(I)\n    x2 = rot98(I)\n    x3 = color(x2)\n    x4 = asobject(x2)\n    x5 = hperiod(x4)\n    x6 = apply(tojvec, x5)\n    x7 = increment(x6)\n    x8 = NEG_ONE(x7)\n    x9 = lbind(shift, x4)\n    x10 = height(I)\n    x11 = lbind(multiply, x10)\n    x12 = chain(x9, x11, last)\n    x13 = apply(x12, x7)\n    x14 = paint(I, x13)\n    x15 = mapply(x7, x1)\n    O = paint(x14, x15)\n    return O"], [1.0, "def solve_22ee5453(I):\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = vmirror(x2)\n    x6 = hconcat(x44, x5)\n    O = hconcat(x6, x2)\n    return O"], [1.0, "def solve_14f20b2c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_6f1a59c9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = shift(x2, x3)\n    x5 = paint(x1, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(x5, ONE, x8)\n    return O"], [1.0, "def solve_5847c710(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_7a7313cb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x24, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_a7dd016d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(comb28, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_da21f6d1(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_36a436ac(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_78fb1eb8(I):\n    x1 = lbind(occurrences, I)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 = fork(apply, x3, x1)\n    x5 = compose(positive, size)\n    x6 = rbind(compose, x4)\n    x7 = lbind(lbind, occurrences)\n    x8 = compose(x6, x7)\n    x9 = fork(compose, x5, x8)\n    x10 = compose(x1, x9)\n    x11 = fork(ofcolor, x10, identity)\n    x12 = chain(x6, x3, x11)\n    x13 = fork(mapply, x12, x11)\n    x14 = product(x1, x1)\n    x15 = power(x13, TWO)\n    x16 = astuple(x15, x12)\n    x17 = astuple(x14, x12)\n    x18 = astuple(x16, x17)\n    x19 = hfrontier(x18)\n    O = underfill(I, SIX, x19)\n    return O"], [1.0, "def solve_b390b195(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind( occurrences, TWO)\n    x6 = chain(first, x5, numcolors)\n    x7 = compose(x6, toindices)\n    x8 = fork(sfilter, identity, x7)\n    x9 = chain(x6, asobject, x8)\n    x10 = fork(shift, x9, ulcorner)\n    x11 = mapply(x10, x4)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = pair(x14, x14)\n    x16 = mapply(x9, x15)\n    O = paint(x12, x16)\n    return O"], [1.0, "def solve_fdba1e94(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_04f035af(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_adc28b62(I):\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(SIX)\n    x7 = toivec(THREE)\n    x8 = insert(x6, x7)\n    x9 = tojvec(THREE)\n    x10 = insert(x6, x9)\n    x11 = fork(combine, identity, hmirror)\n    x12 = fork(combine, identity, vmirror)\n    x13 = x11(x12)\n    x14 = x11(x12)\n    x15 = paint(x13, x14)\n    x16 = paint(x15, x13)\n    O = x10(x16)\n    return O"], [1.0, "def solve_29e8bfe4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, hline)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_0494d546(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_a8f918ef(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = repeat(I, x1)\n    x3 = astuple(TWO, FIVE)\n    x4 = interval(THREE, x3, ONE)\n    x5 = prapply(recolor, x2)\n    x6 = lbind(mapply, vfrontier)\n    x7 = compose(x6, toindices)\n    x8 = fork(combine, x7, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_161660c3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f3b3318a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(I)\n    x18 = halve(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(shift, x2)\n    x21 = compose(x19, x20)\n    x22 = compose(x11, x21)\n    x23 = fork(combine, x21, x22)\n    x24 = compose(flip, x23)\n    x25 = mapply(x24, x4)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_78b6e400(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_4916fa47(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_d4d355c3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =e509e(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.0, "def solve_61a1ac03(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fork(equality, identity, vmirror)\n    x14 = mfilter(x6, x15)\n    O = underpaint(x5, x14)\n    return O"], [1.0, "def solve_06099666(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_9d6bfe8c(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_0af416ba(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_1ac28fec(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = objects(x7, T, F, F)\n    x10 = palette(x9)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x13, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.0, "def solve_7e6b9c4d(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_6c71573c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_0fe00193(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d05ed9d9(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_379256b0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.1, "def solve_e0527c88(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = mapply(x15, x13)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x21, x16)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x34)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x34)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x34)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x34)\n    x"], [1.1, "def solve_56d62acb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = x12(x7)\n    x9 = shape(x6)\n    x10 = increment(x9)\n    x11 = multiply(x10, x5)\n    x12 = canvas(x3, x11)\n    x13 = hconcat(x12, x12)\n    x14 = hconcat(x5, x13)\n    x15 = partition(x14)\n    x16 = apply(color, x15)\n    x17 = cover(I, x16)\n    x18 = argmax(x16, width)\n    x19 = astuple(x18, ulcorner)\n    x20 = canvas(x9, x19)\n    x21 = fill(x20, NEG_ONE, x19)\n    x22 = merge(x15)\n    x23 = cover(x21, x22)\n    x24 = asindices(x23)\n    x25 = ofcolor(x14, NINE)\n    x26 = difference(x24, x25)\n    x27 = fill(x14, NEG_ONE, x26)\n    x28 = ofcolor(x27, NINE)\n    x29 = subgrid(x28, x27)\n    x30 = asindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shift)\n    x33 = compose(x31, x32)\n    x34 = fork(combine, x33, x31)\n    x35 = mapply(x34, x29)\n    x36 = fill(x27, NEG_ONE, x35)\n    x37 = shift(x31, x33)\n    x38 = toindices(x37)\n    x39 = rbind(mapply, x38)"], [1.1, "def solve_0b057963(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, colorcount)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, colorcount)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = canvas(ZERO, x34)\n    x36 = lbind(multiply, x33)\n    x377 = apply(x36, x3)\n    x38 = lbind(shift, x10)\n    x39 = mapply(x38, x37)\n    O = fill("], [1.1, "def solve_03f2bda7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(argmax, x38)\n    x40 = mapply(x39, x32)\n    x41 = ofcolor(I, x4)\n    x42 = rbind(adjacent, x41)"], [1.1, "def solve_7adda415(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =6954025dad(I):\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(cmirror, dmirror)\n    x11 = astuple(hmirror, vmirror)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = astuple(NEG_TWO, rmirror)\n    x15 = astuple(fafffa47, x14)\n    x16 = combine(x13, x15)\n    x17 =173333(x16)\n    x18 = height(I)\n    x19 = astuple(x18, hsplit)\n    x20 = canvas(x4, x19)\n    x21 =6(I)\n    x22 = subgrid(x21, x20)\n    x23 = rot90(x22)\n    x24 = width(x23)\n    x25 = rbind(repeat, x24)\n    x26 = chain(rot90, x25, hmirror)\n    x27 = matcher(x26, x23)\n    x28 = objects(x22, F, F, T)\n    x29 = sfilter(x28, x27)\n    x30 = argmax(x29, size)\n    x31 = matcher(first, x4)\n    x32 = rbind(sfilter, x31)\n    x33 = lbind(recolor, x4)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x31)\n    x36 = fork(combine, x30, x35)\n    x37 = lbind(recolor, x10)\n    x38 = rbind(sfilter, x36)\n    x"], [1.1, "def solve_6207143f(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x35, x28)\n    x37 = lbind(shift, x24)\n    x38 = mapply(x37, x36)\n    x39 = fill(x23, TWO, x38)\n"], [1.1, "def solve_48ca015c(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_2c8b5bcb(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_34c1043f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x31 = last(x28)\n    x32 = x29(I)\n    x33 = palette(I)\n    x34 = lbind(ofcolor, x33)\n    x35 = compose(normalize, x34)\n    x36 = matcher(x35, x12)\n    x37 = extract(x33, x36)\n    x38 = remove(x37, x33)\n    x39 = lbind(colorcount, x33)\n    x40 = argmin(x38, x39)\n    "], [1.1, "def solve_ab01fcf9(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_d7ecd998(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = x9(I)\n    x11 = index(x10, ORIGIN)\n    x12 = width(x10)\n    x13 = multiply(x12, x12)\n    x14 = bottomhalf(x10)\n    x15 = rbind(rapply, x14)\n    x16 = compose(first, x15)\n    x17 = chain(x13, x15, x16)\n    x18 = matcher(x17, ZERO)\n    x19 = sfilter(x11, x18)\n    x20 = merge(x19)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = fork(astuple, x21, x22)\n    x24 = initset(x13)\n    x25 = matcher(x23, x24)\n    x26 = compose(flip, x25)\n    x27 = extract(x19, x26)\n    x28 = x27(x252)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 =586(x29, x30)\n    x32 = ofcolor(x31, x11)\n    x33 = x27(x32)\n    x34 = shift(x31, x33)\n    x35 = fill(x30, TWO, x34)\n    x36 = vmirror(x35)\n    x37 = lbind(shift, x35)\n    x38 = height(x36)\n    x39 = divide(x38, x36)\n    x40 = increment(x39)\n    x41"], [1.1, "def solve_62d51063(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = difference(x1, x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = lbind(shift, x3)\n    x7 = compose(x6, toivec)\n    x8 = interval(NEG_TWO, NEG_ONE, NEG_ONE)\n    x9 = mapply(x7, x8)\n    x10 = astuple(x9, x7)\n    x11 = x7(x10)\n    x12 = toindices(x11)\n    x13 = increment14(x12)\n    x14 = canvas(NEG_ONE, x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(x16, x16)\n    x18 = height(x1)\n    x19 = width(x1)\n    x20 = decrement(x18)\n    x21 = astuple(x19, x20)\n    x22 = ONE(x21)\n    x23 = width(x1)\n    x24 = halve(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = apply(tojvec, x26)\n    x28 = apply(asobject, x27)\n    x29 = lbind(shift, x15)\n    x30 = mapply(x29, x28)\n    x31 = hmirror(x30)\n    x32 = vmirror(x31)\n    x33 = objects(x32, F, F, T)\n    x34 = merge(x33)\n    x35 = paint(x16, x34)\n    x36 = astuple(x1, x19)\n    x37 = canvas(ZERO, x36)\n    x38 = asobject(x37)\n    x39 = rbind(adjacent, x38)\n    x40 = apply(x39, x32)\n    x41 ="], [1.1, "def solve_1b9db546(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_bd9f53ce(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = sfilter(x2, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = compose(hmirror, vmirror)\n    x7 = compose(vmirror, merge)\n    x8 = fork(equality, identity, x6)\n    x9 = fork(multiply, identity, height)\n    x10 = chain(x8, x9, first)\n    x11 = height(I)\n    x12 = width(I)\n    x13 = ZERO(x11)\n    x14 = multiply(x12, x13)\n    x15 = subtract(x14, TWO)\n    x16 = interval(ONE, x15, ONE)\n    x17 = colorcount(I, ZERO)\n    x18 = digitrepeat(x17, x16)\n    x19 = multiply(x18, x13)\n    x20 = subtract(x19, TWO)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = product(x16, x21)\n    x23 = multiply(x22, x13)\n    x24 = rbind(add, x23)\n    x25 = compose(invert, x24)\n    x26 = order(x22, x25)\n    x27 = apply(x25, x26)\n    x28 = size(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = mpapply(recolor, x27, x30)\n    x32 = mapply(decrement, x30)\n    x33 = decrement(x32)\n    x34 = ofcolor(I, ZERO)\n    x35 =\n    1611111466\n    6111111609\n    9111111623\n    9565159359\n    5150601141\n    6969911161\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n"], [1.1, "def solve_8684050e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = power(first, TWO)\n    x4 = power(last, TWO)\n    x5 = fork(astuple, x3, x4)\n    x6 = fork(connect, ulcorner, x5)\n    x7 = fork(difference, toindices, x6)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x7, x9)\n    x11 = sfilter(x2, x10)\n    x12 = argmax(x11, size)\n    x13 = color(x12)\n    x14 = toindices(x12)\n    x15 = fork(either, vline, hline)\n    x16 = x15(x14)\n    x17 = size(x16)\n    x18 = increment(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = product(x19, x19)\n    x21 = rbind(add, THREE)\n    x22 = rbind(interval, THREE)\n    x23 = fork(x22, x21, x44)\n    x24 = compose(x20, x23)\n    x25 = fork(connect, ulcorner, x24)\n    x26 = fork(recolor, color, x25)\n    x27 = mapply(x26, x12)\n    x28 = paint(I, x27)\n    x29 = interval(ZERO, x18, ONE)\n    x30 = pair(x29, x29)\n    x31 = apply(first, x30)\n    x32 = mapply(x27, x31)\n    x33 = paint(x28, x32)\n    x34 = interval(ZERO, x18, ONE)\n    x35 = pair(x34, x34)\n    x36 = apply(first, x35)\n    x37 = mapply(x27, x36)\n    x38 = paint(x33, x37)\n    x39 ="], [1.1, "def solve_65943cf0(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = compose(flip, x4)\n    x6 = extract(I, x5)\n    x7 = lbind(contained, THREE)\n    x8 = compose(minimum, shape)\n    x9 = matcher(x8, ONE)\n    x10 = lbind(apply, numcolors)\n    x11 = compose(x10, asobject)\n    x12 = fork(add, x3, x11)\n    x13 = compose(initset, x12)\n    x14 = fork(insert, ulcorner, toindices)\n    x15 = compose(first, x14)\n    x16 = apply(x15, x6)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = objects(x20, T, F, F)\n    x22 = compose(toivec, leftmost)\n    x23 = rbind(compose, center)\n    x24 = lbind(apply, toindices)\n    x25 = chain(x23, x24, leftmost)\n    x26 = lbind(sfilter, x21)\n    x27 = chain(size, x26, x25)\n    x28 = increment(x27)\n    x29 = double(x38)\n    x30 = interval(x28, x29, ONE)\n    x31 = apply(x25, x30)\n    x32 = interval(x29, x27, ONE)\n    x33 = lbind(multiply, x31)\n    x34 = apply(x33, x32)\n    x35 = lbind(shift, x23)\n    x36 = mapply(x35, x34)\n    x37 = fill(x20, THREE, x36)\n    x38 = index(x37, x25)\n    x39 = replace"], [1.1, "def solve_eedc2bba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = rbind(SEVEN, x8)\n    x10 = lbind(compose, x9)\n    x11 = lbind(power, I)\n    x12 = chain(x11, x10, x9)\n    x13 = compose(x12, x10)\n    x14 = lbind(apply, last)\n    x15 = chain(x14, corners, last)\n    x16 = lbind(rbind, equality)\n    x17 = fork(sfilter, x15, x15)\n    x18 = fork(compose, x17, x13)\n    x19 = lbind(lbind, astuple)\n    x20 =\n    last(x12)\n    x21 = lbind(last, x12)\n    x22 = compose(x21, x18)\n    x23 = fork( subtract, x18, x22)\n    x24 = fork(insert, x18, x23)\n    x25 = compose(last, x24)\n    x26 = compose(x19, x25)\n    x27 = fork(equality, x26, x23)\n    x28 = fork(insert, x27, x1)\n    x29 = compose(x16, x28)\n    x30 = rbind(branch, x29)\n    x31 = compose(x30, x25)\n    x32 = rbind(branch, x269)\n    x33 = compose(x32, x25)\n    x34 = chain(x33, x31, x21)\n    x35 = fork(contained, x39, x22)\n    x36 = fork(contained, x28, x23)\n    x37 = fork(contained, x36, x31)\n    x38 = fork(both, x35, x37)\n    x39"], [1.1, "def solve_f6f9897f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(equality, toindices, box)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x11)\n    x14 = compose(toindices, x11)\n    x15 = chain(first, x14, initset)\n    x16 = lbind(upscale, x13)\n    x17 = rbind(ofcolor, x1)\n    x18 = compose(x16, x17)\n    x19 = fork(combine, x18, x15)\n    x20 = x19(x1)\n    x21 = palette(x20)\n    x22 = lbind(rbind, subtract)\n    x23 = uppermost(x20)\n    x24 = rbind(colorcount, x23)\n    x25 = chain(toivec, x24, decrement)\n    x26 = matcher(x25, x21)\n    x27 = palette(I)\n    x28 = sfilter(x27, x26)\n    x29 = lbind(colorcount, I)\n    x30 = argmin(x28, x29)\n    x31 = ofcolor(I, x30)\n    x32 = ofcolor(I, x10)\n    x33 =, x31, x32)\n    x34 = ofcolor(I, x10)\n    x35 = leftmost(x34)\n    x36 = ofcolor(I, x30)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x3)\n    x39 = ofcolor(I, x30)\n    x40 = rightmost(x3)\n"], [1.1, "def solve_73f735b1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorfilter, x2)\n    x6 = chain(x5, color, x4)\n    x7 = fork(paint, identity, x6)\n    x8 = rbind(contained, x1)\n    x9 = compose(x8, first)\n    x10 = rbind(sfilter, x9)\n    x11 = lbind(rbind, compose)\n    x12 = chain(x10, x11, x8)\n    x13 = lbind(apply, last)\n    x14 = chain(x13, toindices, x12)\n    x15 = fork(sfilter, x12, x14)\n    x16 = compose(x15, x12)\n    x17 = lbind(rot90, EIGHT)\n    x18 = power(x17, TWO)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = x18(x21)\n    x23 = argmin(x61, x22)\n    x24 = argmax(x23, x18)\n    x25 = partition(x24)\n    x26 = fork(combine, vfrontier, hfrontier)\n    x27 = compose(x25, x26)\n    x28 = extract(x25, x27)\n    x29 = x28(x26)\n    x30 = x27(x29)\n    x31 = color(x3)\n    x32 = palette(I)\n    x33 = remove(x31, x32)\n    x34 = lbind(colorcount, I)\n    x35 = argmin(x34, x33)\n    x36 = first(x35)\n    x37 = last(x35)\n    x38 = x369(x36)\n    x39 = matcher(first, x37)\n    x40 = compose(flip, x"], [1.1, "def solve_9bb9450f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8db927dd(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f0ad6b35(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b4fbb646(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x17, x19)\n    x21 = shape(I)\n    x22 = canvas(x3, x21)\n    x23 = normalize(x2)\n    x24 = lbind(shift, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = divide(x25, x26)\n    x28 = downscale(x23, x27)\n    x29 = height(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(size, x30)\n    x32 = toindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = rbind(multiply, x29)\n    x35 = compose(x33, x34)\n    x36 = lbind(apply, x35)\n    x37 = lbind(lbind, shift)\n    x38 = rbind(occurrences, x22)\n    x39 = compose(x36, x38)\n    x40 = fork(mapply, x39, x36)\n    x41 = compose(x32"], [1.1, "def solve_b2e83c53(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, shape, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_b0b531dc(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_daef5183(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, EIGHT, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = toobject(x38, x22)\n    x40 =5779577(x39)\n    x"], [1.1, "def solve_bf2c3c87(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, NEG_ONE)\n    x10 = uppermost(x1)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, NEG_ONE)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)"], [1.1, "def solve_31341663(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = fgpartition(x4)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(manhattan, x7)\n    x9 = maximum(x8)\n    x10 = increment(x9)\n    x11 = interval(ONE, x10, invert)\n    x12 = lbind(shift, x6)\n    x13 = astuple(x2, x6)\n    x14 = canvas(x3, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = mapply(x12, x16)\n    x18 = fill(x14, x3, x17)\n    x19 = increment(x13)\n    x20 = width(x68)\n    x21 = increment(x20)\n    x22 = tojvec(x21)\n    x23 = tojvec(x22)\n    x24 = greater(x18, x23)\n    x25 = maximum(x24)\n    x26 = increment(x25)\n    x27 = subtract(x22, x26)\n    x28 = astuple(x27, x19)\n    x29 = canvas(x3, x28)\n    x30 = asindices(x29)\n    x31 = rbind(toobject, x19)\n    x32 = lbind(shift, x30)\n    x33 = compose(x31, x32)\n    x34 = rbind(colorcount, x3)\n    x35 = matcher(x34, TWO)\n    x36 =sfilter(x20, x35)\n    x37 = paint(x19, x36)\n    x38 = height(x37)\n    x39 = apply(first, x5)\n    x40 = increment(x39)\n    x41 = width(x37)\n    x42 = interval(ZERO, x41, x40"], [1.1, "def solve_b5521cea(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =375911021\n    x2 =7121750962\n     burned to62539\n    1807968069\n    6928222466\n    d51158662\n    \"\"\"\n    x1 =66666666(I, I)\n    x2 = palette(x1)\n    x3 = contained(x2, x1)\n    x4 = contained(x3, x2)\n    x5 = branch(x4, height, width)\n    x6 = x5(I)\n    x7 = partition(x1)\n    x8 = matcher(color, ZERO)\n    x9 = colorfilter(x7, x8)\n    x10 = difference(x7, x9)\n    x11 = extract(x10, x8)\n    x12 = other(x10, x11)\n    x13 = colorcount(x1, x12)\n    x14 = subtract(x13, TWO)\n    x15 = increment(x14)\n    x16 = canvas(ZERO, x15)\n    x17 = astuple(x13, x16)\n    x18 = canvas(ZERO, x17)\n    x19 = matcher(first, x12)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x4)\n    x24 = x22(x4)\n    x25 = x22(x2)\n    x26 = x22(x62)\n    x27 = x22(x8)\n    x28 = fork(gravitate, first, last)\n    x29 = fork(shift, x24, x28)\n    x30 = fork(multiply, x29, x23)\n    x31 = fork(add, x30, x21)\n    x32 = multiply(x31, x5)\n    x33 = shift(x15, x32)\n    x34 = merge(x15)\n    x35 = cover(x16, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x35, x36"], [1.1, "def solve_007f83d8(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(TWO, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(x1)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(ZERO, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x30, initset)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x4, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)"], [1.1, "def solve_25d4d5df(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, astuple)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_d0c7bbf2(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(matcher, x1)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, mostcolor, x3)\n    x5 = fork(sfilter, identity, x4)\n    x6 = lbind(fork, recolor)\n    x7 = lbind(x6, x5)\n    x8 = compose(x7, x5)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x5)\n    x11 = fork(rapply, x8, x10)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = intersection(x13, x2)\n    x15 = cover(I, x14)\n    x16 = palette(x15)\n    x17 = other(x16, ZERO)\n    x18 = ofcolor(x15, x17)\n    x19 = ofcolor(x15, x8)\n    x20 = intersection(x18, x19)\n    x21 = fill(x15, x17, x20)\n    x22 = ofcolor(x15, x17)\n    x23 = shape(x22)\n    x24 = canvas(ZERO, x23)\n    x25 = lbind(hmirror, x24)\n    x26 = lbind(vconcat, x22)\n    x27 = chain(x25, x26, x25)\n    x28 = compose(x27, x6)\n    x29 = lbind(hmirror, x)\n    x30 = chain(size, x29, x27)\n    x31 = matcher(x30, ZERO)\n    x32 = lbind(fork, both)\n    x33 = lbind(x32, x28)\n    x34 = compose(x33, x31)\n    x35 = lbind(fork, difference)\n    x36 = compose(x35, x31)\n    x37 = fork(x36, x34, x31)\n    x38 = apply(x37,"], [1.1, "def solve_dc7abbeb(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = connect(ORIGIN, x11)\n    x13 = astuple(x5, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = astuple(tojvec, x12)\n    x18 = frontiers(I)\n    x19 = mfilter(x18, hline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = astuple(x21, x17)\n    x23 = astuple(x21, x22)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = astuple(x27, x22)\n    x27 = shift(x25, x26)\n    x28 =887788725977(x27)\n    x29 = height(I)\n    x30 = decrement(x29)\n    x31 = toivec(x30)\n    x32 = shift(x27, x31)\n    x33 = apply(toindices, x32)\n    x34 = rbind(shift, x30)\n    x35 = compose(x34, backdrop)\n    x36 = argmax(x33, x35)\n    x37 = other(x33, x36)\n    x38 = height(I)\n    x39 = increment(x38)\n    x40 = tojvec(x39)\n    x41 = rbind(multiply, x40)\n    x42 = height(I)\n    x43 = increment(x"], [1.1, "def solve_227c28d1(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = lbind(apply, last)\n    x9 = chain(x8, x5, first)\n    x10 = rbind(sfilter, x4)\n    x11 = fork(pair, x10, identity)\n    x12 = compose(x9, size)\n    x13 = chain(x12, x5, first)\n    x14 = rbind(sfilter, x4)\n    x15 = fork(pair, x14, identity)\n    x16 = compose(x15, x7)\n    x17 = fork(sfilter, x11, x16)\n    x18 = fork(argmax, x17, x13)\n    x19 = width(I)\n    x20 =58318935r normalize(I)\n    x21 =58318935(I)\n    x22 = width(x21)\n    x23 = rbind(repeat, x22)\n    x24 = chain(lowermost, x23, x18)\n    x25 = matcher(x24, ZERO)\n    x26 = sfilter(x20, x25)\n    x27 = dmirror(x26)\n    x28 = shape(x27)\n    x29 = add(x28, x29)\n    x30 = crop(x27,ORIN, x29)\n    x31 = apply(x30, x27)\n    x32 = crop(x27, DOWN, x29)\n    x33 = apply(x32, x31)\n    x34 = crop(x27,asobject, x33)\n    x35 =apply(x34, x32)\n    x36 = apply(increment, x35)\n    x37 = apply(tojvec, x36)\n    x38 = prapply(shift, x37, x)\n    x39"], [1.1, "def solve_d7dd5804(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = downscale(I, THREE)\n    x5 = x3(x4)\n    x6 = equality(x5, TWO)\n    x7 = branch(x6, width, height)\n    x8 = x7(I)\n    x9 = astuple(ONE, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = connect(x10, x7)\n    x12 = fill(x10, EIGHT, x11)\n    x13 = rbind(ofcolor, TWO)\n    x14 = compose(lowermost, x13)\n    x15 = matcher(x14, ZERO)\n    x16 = compose(x15, x13)\n    x17 = fork(both, x13, x16)\n    x18 = extract(x11, x17)\n    x19 = x18(x18)\n    x20 = vmirror(x19)\n    x21 = objects(x20, T, F, F)\n    x22 = merge(x21)\n    x23 = cover(x20, x22)\n    x24 = apply( leftmost, x23)\n    x25 = size(x24)\n    x26 = width(x22)\n    x27 = subtract(x25, x26)\n    x28 = multiply(x27, TWO)\n    x29 = lbind(greater, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x24, x30)\n    x32 = compose(decrement, last)\n    x33 = chain(x29, x31, x32)\n    x34 = fork(greater, x30, x33)\n    x35 = decrement(x28)\n    x36 = lbind(astuple, x35)\n    x37 = lbind(shift, x22)\n    x38 = compose(x36, x37)\n    x39 = fork( compose, x35, x38)\n    x40 = decrement(x29"], [1.1, "def solve_237ab065(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_421879a0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_f0928a47(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x2)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7cb7dc6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_70bac250(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = x1(x3)\n    x5 = ulcorner(x4)\n    x6 = urcorner(x4)\n    x7 = shoot(x5, NEG_UNITY)\n    x8 = shoot(x6, UP_RIGHT)\n    x9 = combine(x7, x8)\n    x10 = intersection(x4, x9)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = extract(x10, x12)\n    x14 = mostcolor(I)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, color)\n    x17 = sfilter(x6, x16)\n    x18 = argmax(x17, size)\n    x19 = remove(x18, x17)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 = lbind(colorcount, x20)\n    x23 = argmin(x21, x22)\n    x24 = ofcolor(x20, x13)\n    x25 = ofcolor(x24, x23)\n    x26 = combine(x24, x25)\n    x27 = intersection(x24, x26)\n    x28 = mapply(neighbors, x27)\n    x29 = apply(neighbors, x28)\n    x30 = rbind(difference, x28)\n    x31 = compose(x30, toindices)\n    x32 = rbind(greater, ONE)\n    x33 = chain(x32, size, x31)\n    x34 = sfilter(x29, x33)\n    x35 = merge(x34)\n    x36 = palette(x35)\n    x37 = rbind(toobject, I)\n    x38 = apply(x37, x36)\n    x39 = rbind(colorcount, x38)\n    x40 = argmax(x38, x"], [1.1, "def solve_1034bd3e(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices27(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4"], [1.1, "def solve_cbc6ad31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(x8, identity)\n    x10 = lbind(matcher, first)\n    x11 = chain(x9, x10, x9)\n    x12 = lbind(chain, difference)\n    x13 = rbind(x12, toobject)\n    x14 = lbind(rbind, intersection)\n    x15 = compose(x14, toindices)\n    x16 = chain(x11, x13, x15)\n    x17 = lbind(contained, x1)\n    x18 = compose(x17, x16)\n    x19 = lbind(contained, x2)\n    x20 = compose(x19, x16)\n    x21 = fork(both, x18, x20)\n    x22 = fork(both, x11, x21)\n    x23 = compose(flip, x2)\n    x24 = fork(both, x23, x22)\n    x25 = fork(both, x21, x24)\n    x26 = lbind(contained, x1)\n    x27 = compose(x26, x14)\n    x28 = lbind(rbind, difference)\n    x29 = compose(x28, toindices)\n    x30 = fork(sfilter, x25, x29)\n    x31 = fork(difference, x30, toindices)\n    x32 = lbind(rbind, ZERO)\n    x33 = compose(x32, x31)\n    x34 = lbind(rbind, colorcount)\n    x35 = chain(x34, x33, x37)\n    x36 = fork(sfilter, x35, x30)\n    x37 = fork(equality, identity, x36)\n    x38 = compose"], [1.1, "def solve_230bbcb3(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =1964(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = fork(either, hline, vline)\n    x12 = x11(x10)\n    x13 = sfilter(x10, x12)\n    x14 = rbind(gravitate, x13)\n    x15 = compose(x14, initset)\n    x16 = fork(add, identity, x15)\n    x17 = fork(connect, identity, x16)\n    x18 = shape(I)\n    x19 = maximum(x18)\n    x20 = lbind(multiply, x19)\n    x21 = lbind(gravitate, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(add, identity, x22)\n    x24 = canvas(x9, x18)\n    x25 = palette(I)\n    x26 = remove(x4, x25)\n    x27 = lbind(colorcount, I)\n    x28 = argmin(x26, x27)\n    x29 = partition(I)\n    x30 = hascolor(I, x28)\n    x31 = palette(I)\n    x32 = remove(x8, x31)\n    x33 = lbind(ofcolor, I)\n    x34 = argmin(x32, x33)\n    x35 = ofcolor(I, x28)\n    x36 = ofcolor(I, x28)\n    x37 = intersection(x35, x36)\n    x38 = size(x37)\n    x39 = apply(first, x9)\n    x40 = apply(last, x9)\n    x41 = intersection(x39, x40)\n    x42"], [1.1, "def solve_2bee7eba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_dd0245dc(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_48ac1d0b(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7ad4bab(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_429c833a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = increment(x26)\n    x30 = branch(x28, x26, x29)\n    x31 = double(x30)\n    x32 = decrement(x31)\n    x33 = apply(normalize, x25)\n    x34 = interval(ZERO, x30, ONE)\n    x35 = pair(x34, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = astuple(x32, x32)\n    x38 = canvas(x1, x37)"], [1.1, "def solve_76a8d912(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, mostcolor)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmin(x4, size)\n    x6 = width(x5)\n    x7 = divide(x6, vline)\n    x8 = upscale(x3, x7)\n    x9 = shift(x8, UNITY)\n    x10 = paint(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, lrcorner)\n    x13 = paint(x10, x12)\n    x14 = normalize(x12)\n    x15 = objects(x6, T, T, T)\n    x16 = rbind(occurrences, x13)\n    x17 = compose(x16, toindices)\n    x18 = fork(laint, x17, x15)\n    x19 = normalize(x14)\n    x20 =rbind(multiply, x6)\n    x21 = apply(x20, x19)\n    x22 = rbind(apply, x21)\n    x23 = lbind(chain, x18)\n    x24 = lbind(x23, x22)\n    x25 = lbind(lbind, shift)\n    x26 = lbind(occurrences, x13)\n    x27 = fork(mapply, x26, x25)\n    x28 = compose(x27, last)\n    x29 = rbind(argmax, x28)\n    x30 = lbind(occurrences, x13)\n    x31 = fork(mapply, x30, x29)\n    x32 = compose(x31, x32)\n    x33 = fork(paint, identity, x323)\n    x34 = rbind(occurrences, x13)\n    x35 = fork(mapply, x33, x24)\n    x36 = compose(x34, x35)\n    x37 = fork(paint, x33, x36)\n    "], [1.1, "def solve_7b92f1ac(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = lbind(remove, x8)\n    x11 = chain(x10, toindices, x8)\n    x12 = chain(x11, x9, x11)\n    x13 = argmax(x9, x12)\n    x14 = rbind(contained, x13)\n    x15 = argmin(x8, x14)\n    x16 = asindices(I)\n    x17 = matcher(first, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = branch(x19, height, width)\n    x21 = informative24(x19)\n    x22 =\"\"\"\n    x23 = difference(x21, x19)\n    x24 = power(increment, TWO)\n    x25 = lbind(apply, x24)\n    x26 = lbind(fafffa47(x23)\n    x27 = lbind(fcc89999b\n    x28 = chain(x25, x26, x27)\n    x29 = x28(x4)\n    x30 = x28(x15)\n    x31 = x28(x14)\n    x32 = x29(x31)\n    x33 = x28(x20)\n    x34 = x28(x22)\n    x35 = combine(x29, x34)\n    x36 = x28(x30)\n    x37 = hconcat(x35, x36)\n    x38 = height(x27)\n    x39 =\n    x40 = divide(x38, x39)\n    x40 =fOUR(x27)\n    x41 = ofcolor(x77, x"], [1.1, "def solve_1813d2c7(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = urcorner(x30)\n    x32 =Rmirror(x31)\n    x33 = hmirror(x32)\n    x34 = NEG_UNITY(x33)\n    x35 = shoot(x31, UNITY)\n    x36 = recolor(x10, x34)\n    x37 = apply(x36, x35)\n    x38 = product(x37, x37)\n    x39 = power(x38, THREE)"], [1.1, "def solve_92e74302(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_2b8b79e7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x30)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_a971a618(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = intersection(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_cb0d2368(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = index(I, ORIGIN)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = branch(x9, x6, x4)\n    x11 = fill(x10, FOUR, x4)\n    x12 = lbind(contained, x6)\n    x13 = compose(x12, toindices)\n    x14 = fork(sfilter, x13, x11)\n    x15 = size(x1)\n    x16 = height(I)\n    x17 = width(I)\n    x18 = increment(x16)\n    x19 = astuple(x17, x18)\n    x20 = crop(I, ORIGIN, x19)\n    x21 = hmirror(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = asobject(x24)\n    x26 = vmirror(x25)\n    x27 = asobject(x26)\n    x28 = ulcorner(x27)\n    x29 = mostcolor(I)\n    x30 = lrcorner(x27)\n    x31 = index(I, x30)\n    x32 = subgrid(x31, x8)\n    x33 = asobject(x32)\n    x34 = hmirror(x33)\n    x35 = vmirror(x34)\n    x36 = asobject(x35)\n    x37 = astuple(x31, x36)\n    x38 = add(x37, x31)\n    x39 = width(I)\n    x40 = ulcorner(x36)\n    x41 = index(I, x40)\n    x42 = subtract(x40, x41)\n    x43 = add(x44, x42"], [1.1, "def solve_b5789320(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(d687bc2c\n    x5 = chain(positive, size, dedupe)\n    x6 = apply(x5, x1)\n    x7 = equality(x6, SIX)\n    x8 = branch(x7, vsplit, hsplit)\n    x9 = x8(I, TWO)\n    x10 = argmin(x9, numcolors)\n    x11 = argmax(x9, numcolors)\n    x12 = width(x11)\n    x13 = hsplit(x11, x12)\n    x14 =\n    x15 = divide(xx, x13)\n    x16 = width(x11)\n    x17 = divide(x16, x10)\n    x18 = ZERO(x17)\n    x19 = lbind(multiply, x18)\n    x20 = compose(x19, shape)\n    x21 = lbind(canvas, ZERO)\n    x22 = compose(x21, x20)\n    x23 = fork(concat, x20, x22)\n    x24 = colorfilter(x1, x12)\n    x25 = argmax(x24, x23)\n    x26 = ulcorner(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = shift(x25, x28)\n    x30 = paint(x29, x29)\n    x31 = interval(ONE, x30, ONE)\n    x32 = matcher(first, x25)\n    x33 = hfilter(x31, x32)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x22, x35)\n    x37 = fill(x30, x12, x36)\n    x38 = ofcolor(x37, x7)\n    x39 =\n    3723445279\n    x38(x"], [1.1, "def solve_9219208b(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9ef26332(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(first, last)\n    x37 = fork(equality, x35, x36)\n    x38 = sfilter(x31, x37)\n    x39 = matcher(first, ZERO)\n    x40 = compose(flip, x39)\n    x41 = fork(sfilter, x40, x39)\n    x46 = argmax(x"], [1.1, "def solve_b8b25c6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(x15, x16)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 = fork"], [1.1, "def solve_59cedf4e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(contained, F, T)\n    x14 = lbind(apply, urcorner)\n    x15 = compose(x14, x13)\n    x16 = fork(compose, x12, x15)\n    x17 = lbind(48, ZERO)\n    x18 = compose(x17, x16)\n    x19 = fork(sfilter, x15, x18)\n    x20 = fork(difference, x19, identity)\n    x21 = lbind(9chain, center)\n    x22 = lbind(x21, x20)\n    x23 = compose(x22, ulcorner)\n    x24 = chain(x2, x23, x20)\n    x25 = lbind(lbind, shift)\n    x26 = compose(x25, x23)\n    x27 = fork(mapply, x26, x24)\n    x28 = fork(mapply, x27, x26)\n    x29 = palette(I)\n    x30 =(x28, x29)\n    x31 = intersection(x40, x30)\n    x32 = first(x31)\n    x33 = other(x31, x32)\n    x34 = flip(x33)\n    x35 = dmirror(x34)\n    x36 = objects(x35, T, F, T)\n    x37 = apply(toindices, x36)\n    x38 = lbind(rbind,worldcorner)\n    x39 =666x38(x37"], [1.1, "def solve_57c319df(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_c9e8b1db(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = interval(rot180, rot180, ONE)\n    x21 = astuple(rot90, rot90)\n    x22 = astuple(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n"], [1.1, "def solve_f0ab5ef1(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2b4dd363(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x20 = compose(x24, x25)\n    x21 = fork(equality, identity, x20)\n    x22 = compose(x21, last)\n    x23 = rbind(multiply, x19)\n    x24 = rbind(divide, x19)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = compose(x26, last)\n    x28 = lbind(apply, first)\n    x29 = lbind(phrase, x8)\n    x30 = rbind(rapply, x27)\n    x31 = compose(initset, first)\n    x32 = chain(first, x30, x31)\n    x33 = compose(x28, x32)\n    x34 = extract(x15, x33"], [1.1, "def solve_4cfa3341(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, size)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(numcolors, ONE)\n    x43 ="], [1.1, "def solve_864531d4(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_7b267f73(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argmin(x23, x24)\n    x26 = ulcorner(x25)\n    x27 =652(x25, x22)\n    x28 = add(x26, x27)\n    x29 = lrcorner(x25)\n    x30 = invert(x28)\n    x31 = shift(x29, x30)\n    x32 = lefthalf(x15)\n    x33 = righthalf(x15)\n    x34 = vmirror(x33)\n    x35 = vconcat(x32, x34)\n    x36 = width(x9)\n    x37 = subtract(x35, x36)\n    x38 = tojvec(x37)\n    x39 = shift(x31, x38)\n    x40 =7(x39)\n    x41 = width(x10)\n    x42 = righthalf(x41)\n    x43"], [1.1, "def solve_679f2728(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x13, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f39bb665(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2d646e4a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = subgrid(x2, I)\n    x9 = frontiers(x8)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = size(x12)\n    x14 = repeat(x12, x13)\n    x15 = palette(x2)\n    x16 = remove(x12, x15)\n    x17 = lbind(colorcount, x16)\n    x18 = argmin(x12, x17)\n    x19 = ulcorner(x2)\n    x20 = shoot(x19, UNITY)\n    x21 = lrcorner(x2)\n    x22 = shoot(x21, NEG_UNITY)\n    x23 = urcorner(x2)\n    x24 = shoot(x23, UP_RIGHT)\n    x25 = llcorner(x2)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = combine(x20, x22)\n    x28 = combine(x24, x26)\n    x29 = combine(x27, x28)\n    x30 = branch(x12, x22, x27)\n    x31 = asindices(x30)\n    x32 = rbind(adjacent, x31)\n    x33 = argmin(x29, x32)\n    x34 = rbind(adjacent, x13)\n    x35 = apply(x34, x32)\n    x36 = vmirror(x34)\n    x37 = invert(x35)\n    x38 = apply(invert, x36)\n    x39 = pair(x37, x38)\n    x40 = shift(x39, UNITY)\n    O = mapply(last, x40)\n    return"], [1.1, "def solve_585cf2fd(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = cmirror(I)\n    x24 = h talk(x23, x22)\n    x25 = astuple(x24, x7)\n    x26 = dmirror(x25)\n    x27 = ulcorner(x25)\n    x28 = shoot(x27, UNITY)\n    x29 = shoot(x27, NEG_UNITY)\n    x30 = shoot(x27, UP_RIGHT)\n    x31 = shoot(x27, DOWN_LEFT)\n    x32 = combine(x28, x29)\n    x33 = combine(x30, x31)\n    x34 = combine(x32, x33)\n    x35 = astuple(x24, x7)\n    x36 = lbind(multiply, x35)\n    x37 = apply(x36, x34)\n    x38 = lbind(shift, x13)\n    x39 = mapply(x38, x37)\n    O = paint(I"], [1.1, "def solve_a4a81486(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = argmax(x8, size)\n    x11 = ulcorner(x9)\n    x12 = ulcorner(x10)\n    x13 = subgrid(x9, x5)\n    x14 = subgrid(x10, x5)\n    x15 = hconcat(x13, x14)\n    x16 = hconcat(x15, x5)\n    x17 = vconcat(x16, x17)\n    x18 = vconcat(x16, x19)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x7, x20)\n    x22 = paint(x21, x9)\n    x23 = solve_0dfd97113(x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x23, x4)\n    x26 = difference(x24, x25)\n    x27 = fill(x22, NEG_ONE, x26)\n    x28 = initset(x15)\n    x29 = rbind(manhattan, x28)\n    x30 = chain(even, halve, x29)\n    x31 = sfilter(x27, x30)\n    x32 = difference(x27, x31)\n    x33 = fill(x24, ONE, x32)\n    x34 = initset(x25)\n    x35 = insert(x24, x34)\n    x36 = product(x33, x35)\n    x37 = fork(connect, first, last)\n    x38 = mapply(x37, x36)\n    O"], [1.1, "def solve_769c66cb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = rbind(hconcat, x9)\n    x23 = compose(flip, x22)\n    x24 = rbind(hconcat, x10)\n    x25 = compose(flip, x24)\n    x26 = fork(combine, x23, x25)\n    x27 = fork(combine, x28, x26)\n    x28 = fork(either, vline, hline)\n    x29 = rbind(sfilter, x28)\n    x30 = rbind(difference, x76)\n    x31 = chain(size, x29, x30)\n    x32 = matcher(x31, ZERO)\n    x33 = fork(both, x26, x32)\n    x34 = extract(x15, x33)\n    x35 = x24(x34)\n    x36 = power(x22, TWO)\n    x37 = multiply(x36, x35)\n    x38 = x25(x34)\n    x39 = shift(x38, UNITY)\n    x40 = paint(x39, x37)\n"], [1.1, "def solve_5fcc6587(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(toivec, x2, vmirror)\n    x4 = x3(I)\n    x5 = partition(x4)\n    x6 = lbind(remove, ONE)\n    x7 = chain(center, first, last)\n    x8 = fork(subtract, x7, x6)\n    x9 = fork(multiply, height, width)\n    x10 = fork(equality, size, x9)\n    x11 = sfilter(x5, x10)\n    x12 = argmax(x11, numcolors)\n    x13 = remove(x12, x11)\n    x14 = corners(x12)\n    x15 = toobject(x14, I)\n    x16 = colorfilter(x15, ONE)\n    x17 = rbind(sfilter, x16)\n    x18 = argmin(x13, x17)\n    x19 = frontiers(I)\n    x20 = sfilter(x19, x18)\n    x21 = apply(ulcorner, x20)\n    x22 = size(x21)\n    x23 = equality(x22, ZERO)\n    x24 = branch(x23, hmirror, vmirror)\n    x25 = asobject(x24)\n    x26 = color(x25)\n    x27 = decrement(x22)\n    x28 = toivec(x27)\n    x29 = invert(x28)\n    x30 = insert(x27, x30)\n    x31 = backdrop(x30)\n    x32 = tojvec(x22)\n    x33 = invert(x32)\n    x34 = insert(x33, x30)\n    x35 = order(x32, x34)\n    x36 = combine(x31, x35)\n    x37 = fill(x6, x25, x36)\n    x38 = apply(x29, x35)\n    x39 = fill(x37, x24, x38)\n    x40 = asobject"], [1.1, "def solve_f06ca8d7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = argmax(x6, x10)\n    x12 = initset(x11)\n    x13 = matcher(x12, ZERO)\n    x14 = rbind(add, x6)\n    x15 = chain(flip, x13, x14)\n    x16 = fork(both, x13, x15)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x12, x17)\n    x19 = fork(add, x6, x17)\n    x20 = canvas(ZERO, THREE_BY_THREE)\n    x21 = asindices(x20)\n    x22 = toobject(x21, I)\n    x23 = mostcolor(x22)\n    x24 = uppermost(x18)\n    x25 = lbind(min, x24)\n    x26 = lbind(rbind, add)\n    x27 = chain(x25, x26, x26)\n    x28 = matcher(x27, x11)\n    x29 = initset(x18)\n    x30 = prapply(insert, x29, x28)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, x7)\n    x33 = fork(subtract, x32, x17)\n    x34 = fork(upscale, x33, x24)\n    x35 = fork(recolor, x24, x34)\n    x36 = mapply(x35, x18)\n    x37 = paint(x20, x36)\n    x38"], [1.1, "def solve_9fa912a8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4, x5)\n    x21 = compose(x19, x20)\n    x22 = lbind(sfilter, x8)\n    x23 = fork(inderer, x21, x22)\n    x24 = lbind(rbind, subtract)\n    x25 = chain(x17, x24, x23)\n    x26 = lbind(colorcount, I)\n    x27 = fork(equality, x25, x26)\n    x28 = sfilter(x18, x27)\n    x29 = fork(equality, x27, x28)\n    x30 = sfilter(x26, x29)\n    x31 = fork(paint, identity, x30)\n    x32 = lbind(rbind, add)\n    x33 = compose(x32, box)\n    x34 = fork(37940, x33, x33)\n    x35 = compose(x32, x34)\n    x36 = fork(difference, x35, x31)\n    x37 = fork(77fdfe, x35, x"], [1.1, "def solve_6ce3bf01(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = branch(x1, ZERO, THREE)\n    x2 = asobject(x1)\n    x3 = matcher(first, ZERO)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x5, x8)\n    x10 = argmax(x9, x7)\n    x11 = remove(x10, x9)\n    x12 = merge(x11)\n    x13 =32(x12)\n    x14 = apply(first, x11)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(I)\n    x20 = lbind(colorfilter, x12)\n    x21 = chain(size, x19, x20)\n    x22 = matcher(x21, ZERO)\n    x23 = colorfilter(x15, ZERO)\n    x24 = rbind( noises, x39)\n    x25 = compose(x24, outbox)\n    x26 = fork(branch, x25, outbox)\n    x27 = apply(x26, x23)\n    x28 = initset(x10)\n    x29 = insert(x13, x28)\n    x30 = backdrop(x29)\n    x31 = cover(I, x30)\n    x32 = normalize(x10)\n    x33 = shift(x32, UNITY)\n    x34 = paint(x31, x33)\n    x35 = rot90(x34)\n    x36 =normalize(x10)\n    x37 = shift(x36, UP_RIGHT)\n    x38 = paint(x35, x37)\n    x39 = rot270(x38)\n    x40 = shape(x10)\n    x41 = canvas"], [1.1, "def solve_17638a9e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_c7bd5ed4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_5d06f77c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_651e0313(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_05d8af31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_9b5ef738(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9a9553d8(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_38cb5881(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x32 = compose(x29, x30)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = lbind(apply, first)\n    x36 = rbind(sfilter, x28)\n    x37 = rbind(pair, x21)\n    x38 = chain(x35, x36, x37)\n    x39 = compose(x32, x38)\n    x40 = extract(x1, x39)\n    x41 = last(x40)\n    "], [1.1, "def solve_ce671096(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = ofcolor(x13, x9)\n    x15 = ofcolor(x13, x10)\n    x26 = subgrid(x14, x6)\n    x27 = subgrid(x15, x6)\n    x28 = palette(x16)\n    x29 = remove(x9, x28)\n    x30 = argmin(x29, x12)\n    x31 = rbind(colorcount, x30)\n    x32 = rbind(toobject, x31)\n    x33 = chain(x30, x32, initset)\n    x34 = apply(x33, x27)\n    x35 = ofcolor(x34, x10)\n    x36 = ofcolor(x34, x shoot)\n    x37 = apply(x35, x36)\n    x38 = fill(x6, x27, x37)\n    x39 = ofcolor(x38, x30)\n    x40 = ofcolor(x38, x356)\n    x41 = fill(x38, x39, x40)\n    x42 = mapply(x33, x34)\n    x43 = uppermost(x42)\n    x44 = lbind(10, x43)\n    x45 = shift(x44, NEG_UNITY)\n    x46 = lbind(greater, x43)\n    x47 = compose(x46, UP_RIGHT)\n    x48 = rbind(sfilter, x27)\n    x49 = chain(x47,"], [1.1, "def solve_57dc8aa7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = trim(I)\n    x2 =insert(ORIGIN, x1)\n    x3 = upscale(x2, TWO)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = asobject(x4)\n    x6 = toindices(x5)\n    x7 = ZERO_BY_TWO)\n    x8 = ulcorner(x6)\n    x9 = add(x8, UNITY)\n    x10 = shift(x6, x9)\n    x11 = fill(I, ZERO, x10)\n    x12 = lbind(shift, x6)\n    x13 = apply(x12, x11)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.1, "def solve_adfdbb72(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(SIX, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x3, urcorner)\n    x5 = astuple(x2, x4)\n    x6 = ofcolor(I, TWO)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = greater(x8, x9)\n    x11 = branch(x10, initset,548or487)\n    x12 = canvas(ZERO, x5)\n    x13 = compose(first, last)\n    x14 = chain(x13,951120, first)\n    x15 = lbind(contained, TWO)\n    x16 = compose(x15, first)\n    x17 = lbind(contained, THREE)\n    x18 = compose(x17, first)\n    x19 = fork(add, x16, x18)\n    x20 = fork(add, x14, x19)\n    x21 = compose(positive, size)\n    x22 = rbind(intersection, x7)\n    x23 = rbind(shoot, UP)\n    x24 = chain(x21, x22, x23)\n    x25 = sfilter(x15, x24)\n    x26 = chain(size, dedupe, first)\n    x27 = compose(positive, size)\n    x28 = lbind(compose, x27)\n    x29 = lbind(fork, intersection)\n    x30 = compose(x28, x29)\n    x31 = lbind(compose, x07)\n    x32 = compose(x31, x30)\n    x33 = fork(mapply, x26, x32)\n    x34 = fork(intersection, x33, x30)\n    x35 = mapply(x34, x25)\n    x36 = fill(I, THREE, x35)\n    O = fill(x36, EIGHT, x36)\n    return O"], [1.1, "def solve_10d54a56(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =2dc187(x2)\n    x4 = shape(x3)\n    x5 = merge(x1)\n    x6 = cover(I, x5)\n    x7 = hconcat(x6, x4)\n    x8 = hconcat(x7, x4)\n    O = vconcat(x8, x4)\n    return O"], [1.1, "def solve_7b51646f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    1 =64rot90(I)\n    x2 =64quire(x1, ONE)\n    O = replace(I, EIGHT, x2)\n    return O"], [1.1, "def solve_d377d2a7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =175(I)\n    x2 =7444(x1)\n    x3 =297(x2, box)\n    O = fill(I, FOUR, x3)\n    return O"], [1.1, "def solve_fae26e96(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = objects(x6, T, F, T)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x6, x14)\n    x16 = ofcolor(x15, x11)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = ofcolor(x20, x11)\n    x22 = ofcolor(x20, TWO)\n    x23 = pair(x21, x22)\n    x24 = mapply(first, x23)\n    x25 = mapply(last, x23)\n    x26 = fill(x15, SIX, x24)\n    O = fill(x26,060, x25)\n    return O"], [1.1, "def solve_fb5d5f60(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = compose(increment,\n    5510000000000000000\n    44709000000002b tojvec\n    0001000000001\n    2000000000000000030840\n    \"\"\"\n    x2 = increment(NINE)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = fork(multiply, tojvec, box)\n    x5 = fork(multiply, center, x4)\n    x6 = fork(add, size, x5)\n    x7 = compose(x6, toivec)\n    x8 = lbind(add, DOWN)\n    x9 = compose(x8, tojvec)\n    x10 = initset(x9)\n    x11 = lbind(insert, x10)\n    x12 = compose(backdrop, x11)\n    x13 = mapply(x12, x3)\n    x14 = fill(I, ZERO, x13)\n    O = replace(x14, SEVEN, FIVE)\n    return O"], [1.1, "def solve_f127aba6(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = extract(x8, x9)\n    x11 = lbind(sfilter, x8)\n    x12 = lbind(matcher, FOUR)\n    x13 = compose(x11, x12)\n    x14 = rbind(sfilter, x13)\n    x15 = merge(x8)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = palette(I)\n    x21 = remove(x8, x20)\n    x22 = repeat(x8, ONE)\n    x23 =263(x22)\n    x24 = ofcolor(x12, x23)\n    x25 = ofcolor(x12, x8)\n    x26 = ofcolor(x12, x1)\n    x27 = rbind(argmin, x27)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x38)\n    x32 = compose(x31, x30)\n    x33 = fork(subtract, identity, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x24)\n    x36 = ofcolor(x15, x23)\n    x37 = intersection(x36, x35)\n    x38 = mapply(neighbors, x37)\n    O = paint(x12, x38)\n    return O"], [1.1, "def solve_4a170175(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =if11(I)\n    x2 =077df224(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, x1, SEVEN)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [1.1, "def solve_a97522c1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =75dneighbors(x2)\n    x4 = insert(x2, x3)\n    O = fill(I, THREE, x4)\n    return O"], [1.1, "def solve_b4847676(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = apply(x2, x2)\n    x4 = repeat(x3, ONE)\n    x5 = puts(x4, UNITY)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = lbind(remove, NEG_ONE)\n    x9 = compose(x8, shape)\n    x10 = lbind(multiply, x1)\n    x11 = chain(x10, double, x9)\n    x12 = asindices(x5)\n    x13 = ofcolor(I, NEG_ONE)\n    x14 = difference(x13, x12)\n    x15 = partition(I)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x17, x14)\n    x19 = argmax(x18, x11)\n    x20 = other(x19, x9)\n    x21 = palette(I)\n    x22 = remove(x3, x21)\n    x23 = other(x22, x10)\n    x24 = ofcolor(I, x23)\n    x25 =39eb branch(x24, positive, decrement)\n    x26 = shoot(x22, UNITY)\n    x27 = shoot(x25, UP_RIGHT)\n    x28 = combine(x26, x27)\n    x29 = rbind(shoot, LEFT)\n    x30 = mapply(x29, x28)\n    x31 = underfill(I, x23, x30)\n    x32 = other(x31, x9)\n    x33 = ofcolor(x31, x23)\n    x34 = initset(x33)\n    x35 = cover(x32, x34)\n    x36 = height(x35)\n    x37 = equality(x36, ONE)\n    x38 = intersection(x33, x34)\n    O = fill(x37, x23, x38)\n    return O"], [1.1, "def solve_3f5a7225(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = mapply(x16, x4)\n    x21 = mapply(x12, x4)\n    x22 = combine(x20, x21)\n    x23 =0920(02)\n    x24 = lrcorner(x23)\n    x25 = height(x3)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, x278)\n    x28 = apply(x27, x25)\n    x29 = apply(x33, x28)\n    x30 = lbind(shift, x22)\n    x31 = mapply(x30, x29)\n    x32 = paint(x3, x31)\n    O = x2(x32)\n    return O"], [1.1, "def solve_ce669156(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = apply(merge, x3)\n    x5 = mapply(d12, x4)\n    x6 = portrait(x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = toindices(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x12, x16)\n    x18 = argmax(x17, lrcorner)\n    x19 = fgpartition(x88)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 =3906(x18, x21)\n    x23 = difference(x22, x18)\n    x24 = first(x23)\n    x25 = color(x18)\n    x26 =194(x24)\n    x27 = ofcolor(x88, x25)\n    x28 = leftmost(x27)\n    x29 = ofcolor(x88, x24)\n    x30 = leftmost(x29)\n    x31 = greater(x28, x30)\n    x32 = uppermost(x27)\n    x33 = neighbors(x32)\n    x34 = toobject(x33, x88)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x35, x36)\n    x38 = paint(x88, x37)\n    x39 = trim(x38)\n    O = x7(x39)\n    return O"], [1.1, "def solve_19eefb3f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = fork(subtract, last, width)\n    x7 = fork(multiply, x6, x5)\n    x8 =987(ORIGIN)\n    x9 = mapply(x7, x8)\n    x10 = subtract(SIX, x9)\n    x11 = power(outbox, x10)\n    x12 = palette(I)\n    x13 = apply(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = mfilter(x19, x16)\n    x18 = replace(I, x15, x9)\n    x19 = lbind(difference, x8)\n    x20 = chain(positive, size, x19)\n    x21 = matcher(x20, ZERO)\n    x22 = compose(first, x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x19, x23)\n    x25 = compose(maximum, x24)\n    x26 = matcher(x25, ONE)\n    x27 = sfilter(x24, x26)\n    x28 = apply(toindices, x27)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x30, x29)\n    x32 = fork(difference, x31, x23)\n    x33 = fork(shift, x27, x32)\n    x34 = mapply(x33, x27)\n    O = paint(x16, x34)\n    return O"], [1.1, "def solve_494c6f33(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(uppermost, x11)\n    x13 = order(x12, identity)\n    x14 = lbind(sfilter, x11)\n    x15 = lbind(matcher, uppermost)\n    x16 = compose(x14, x15)\n    x17 = chain(x16, x13, x16)\n    x18 = fork(85, x17, identity)\n    x19 = lbind(apply, color)\n    x20 = rbind(order, leftmost)\n    x21 = chain(x19, x20, x16)\n    x22 = fork(sfilter, x18, x21)\n    x23 = compose(x17, x22)\n    x24 = apply(x23, x13)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x21, x26)\n    x28 = multiply(TEN, TEN)\n    x29 = rbind(subtract, x28)\n    x30 = chain(x29, x27, size)\n    x31 = fork(rapply, x30, identity)\n    x32 = mapply(x31, x branch)\n    O = paint(x9, x32)\n    return O"], [1.1, "def solve_9c06eca8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = backdrop(x2)\n    x6 = cover(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(x7, ZERO)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x4)\n    x11 =353(x10)\n    x12 = palette(x11)\n    x13 = lbind(mfilter, x12)\n    x14 = rbind(toobject, x11)\n    x15 = lbind(ofcolor, x11)\n    x16 = chain(x13, x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x11)\n    O = fill(x6, x3, x18)\n    return O"], [1.1, "def solve_c91e11d0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = height(I)\n    x2 = subgrid(x1, I)\n    x3 = partition(x2)\n    x4 =multiply(x1, THREE)\n    x5 = astuple(x4, x4)\n    x6 = crop(x2, ORIGIN, x5)\n    x7 =39a8645d83733683\n    x8 =86(x6,9318669\n    8484969944\n    9810smart3ed(x8)\n    x9 = add(x1, THREE)\n    x10 = tojvec(x9)\n    x11 = height(x7)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = height(x10)\n    x15 = interval(x14, THREE, x14)\n    x16 = apply(tojvec, x15)\n    x17 = apply(asobject, x16)\n    x18 =44(x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x11)\n    O = paint(x2, x20)\n    return O"], [1.1, "def solve_35bf20ed(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = input:\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x2 = trim(I)\n    x3 = output(x2, ZERO)\n    x4 = order(x3, identity)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = size(x5)\n    x8 = interval(ZERO, x6, ONE)\n    x9 = mpapply(recolor, x8, x7)\n    O = paint(x3, x9)\n    return O"], [1.1, "def solve_708751d7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =73mirror(I)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = compose(x9, x10)\n    x12 = chain(x11, center, initset)\n    x13 = fork(gravitate, identity, x12)\n    x14 = compose(rot90, x13)\n    x15 = power(x14, FOUR)\n    x16 = fork(add, height, width)\n    x17 = fork(decrement, x16, x12)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(both, x15, x18)\n    x20 = mfilter(x3, x19)\n    O = fill(x5, FIVE, x20)\n    return O"], [1.1, "def solve_0397539c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = lbind(extract, x1)\n    x3 = chain(x2, positive, size)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(x4, urcorner)\n    x6 = compose(x4, DOWN)\n    x7 = fork(04, shape, x6)\n    x8 = chain(x5, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 =\"\"\"\n    x11 = fork(indices, x8, identity)\n    x12 = apply(x11, x1)\n    x13 = rbind(shoot, UP)\n    x14 = mapply(x13, x12)\n    x15 = underfill(I, ONE, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, ONE)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    x20 = cover(x15, x19)\n    O = paint(x20, x19)\n    return O"], [1.1, "def solve_08a6c6fb(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =795(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x3)\n    x5 = bottomhalf(x3)\n    x6 = tophalf(x2)\n    x7 = bottomhalf(x2)\n    x8 = connect(x4, x5)\n    x9 = connect(x4, x6)\n    x10 = combine(x8, x9)\n    O = leastcommon(x10)\n    return O"], [1.1, "def solve_ec5f4ef7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(multiply, height, width)\n    x2 = decrement(x1)\n    x3 =86(x2, F76)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = insert(x7, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = ofcolor(I, x11)\n    x14 = crop(I, x13, x11)\n    x15 =41(x14)\n    x16 = subgrid(x15, x5)\n    x17 = asobject(x16)\n    x18 = matcher(first, x11)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = trim(x20)\n    x22 = asobject(x21)\n    x23 = decrement(x22)\n    x24 =88 divide(x23, x12)\n    x25 = increment(x24)\n    x26 =777f25ff(I, x25)\n    x27 = asobject(x26)\n    x28 = decrement(x27)\n    x29 =88 divide(x28, x12)\n    x30 = increment(x29)\n    x31 = objects(x28, T, T, T)\n    x32 = colorfilter(x31, x11)\n    x33 = crop(x20, ORIGIN, x12)\n    x34 = valmin(x32, x33)\n    x35 = sizefilter(x32, x34)\n    x36 = recolor(x11, x34)\n    x37 = compose(flip, x28)\n    x38 = mfilter(x35, x37)\n    x39 = paint(I, x38)\n    O = subgrid(x39, x4)\n    return O"], [1.1, "def solve_cdb03031(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = compress(x7)\n    x9 = width(x8)\n    x10 = divide(x9, THREE)\n    x11 = downscale(x8, x10)\n    x12 = height(x8)\n    x13 = crop(x interval, ZERO, x12)\n    x14 = rbind(ofcolor, x5)\n    x15 = compose(x14, last)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x4, x17)\n    return O"], [1.1, "def solve_756ff3b4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(toindices, F normalize)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(intersection, x4)\n    x7 = compose(size, x6)\n    x8 = argmax(x5, x7)\n    x9 = height(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, x7, x6)\n    x12 = subtract(x11, TWO)\n    x13 = size(x8)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = output:\n    x12, x14)\n    x16 = interval(ONE, x12, ONE)\n    x17 = rbind(multiply, x15)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = subgrid(x4, x21)\n    return O"], [1.1, "def solve_ef7f753c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = lbind(toobject, I)\n    x11 = apply(x10, x9)\n    x12 = colorfilter(x11, x3)\n    x13 = combine(x12, x11)\n    x14 = toobject(x13, I)\n    x15 = difference(x4, x12)\n    x16 = apply(x11, x15)\n    x17 = rbind(manhattan, x3)\n    x18 = argmin(x16, x17)\n    x19 = mostcolor(I)\n    x20 = shape(I)\n    x21 = increment(x20)\n    x22 = canvas(x19, x21)\n    x23 = asobject(I)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x22, x24)\n    x26 = interval(ONE, FIVE, ONE)\n    x27 =\n    x28 = product(x26, x26)\n    x29 = totuple(x27)\n    x30 = apply(first, x29)\n    x31 = apply(last, x29)\n    x32 = combine(x30, x31)\n    x33 = lbind(shift, x28)\n    x34 = mapply(x33, x32)\n    O = paint(x19, x34)\n    return O"], [1.1, "def solve_fb0f0eff(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(apply, x12)\n    x14 = compose(x13, palette)\n    x15 = product(x4, x4)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 =885f761969(x16)\n    x19 =bdad(x18, x17)\n    x20 = compose(positive, size)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x22)\n    x23 = x22(x19)\n    x24 = fgpartition(I)\n    x25 = merge(x24)\n    x26 = cover(I, x25)\n    x27 = chain(x24, box, x22)\n    x28 = apply(x27, x28)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x29)\n    O = paint(x26, x30)\n    return O"], [1.1, "def solve_f5e72ac4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = mfilter(x2, hline)\n    x4 = height(x3)\n    x5 = vsplit(I, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 =975e(x6)\n    x9 = ofcolor(x6, ZERO)\n    x10 = toindices(x6)\n    x11 = combine(x10, x9)\n    x12 = fill(x6, ZERO, x11)\n    x13 = partition(x12)\n    x14 = difference(x1, x13)\n    x15 = argmax(x14, identity)\n    x16 = apply(color, x15)\n    x17 = increment(x16)\n    x18 = x17(x15)\n    x19 = shift(x15, x18)\n    x20 = shift(x19, x17)\n    x21 = fill(x12, ZERO, x20)\n    x22 = fill(x21, x8, x19)\n    x23 = combine(x13, x22)\n    x24 = mapply(hfrontier, x23)\n    x25 = fill(x24, x8, x19)\n    x26 = ofcolor(x25, x12)\n    x27 = palette(x25)\n    x28 = remove(x8, x27)\n    x29 = remove(x25, x28)\n    x30 = product(x26, x29)\n    x31 = first(x30)\n    x32 = last(x30)\n    x33 = hfrontier(x31)\n    x34 = vfrontier(x32)\n    x35 = combine(x33, x34)\n    O = fill(x35, x8, x35)\n    return O"], [1.1, "def solve_51c75ade(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = compose(decrement, width)\n    x15 =\n    x16 = vsplit(x6, TWO)\n    x17 = rbind(hsplit, TWO)\n    x18 = initset(x2)\n    x19 = lbind(insert, x18)\n    x20 = chain(insert, dedupe, x19)\n    x21 = x14(x16)\n    x22 = mapply(x21, x14)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_019c936c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirrorbind(IFApply, I)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 =000(x1, x7)\n    x9 = chain(x11, x4, x8)\n    x10 = fill(x6, EIGHT, x5)\n    O = fill(x10, TWO, x9)\n    return O"], [1.1, "def solve_01ac8d52(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = chain(flip, x2, shape)\n    x4 =5555frontier(I)\n    x5 = x2(x4)\n    x6 = lbind(shift, x5)\n    x7 = fork(recolor, x2, x6)\n    x8 = mapply(x7, x3)\n    O = paint(I, x8)\n    return O"], [1.1, "def solve_af17d3ef(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =589\n    58413\n    574698\n    569420\n    233400\n    \"\"\"\n    x2 = vmirror(I)\n    x3 = hconcat(I, x1)\n    x4 = hmirror(x2)\n    O = vconcat(x2, x4)\n    return O"], [1.1, "def solve_c71329f9(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =875(I)\n    x2 =86(I, THREE, FOUR)\n    x3 =00(x1, TWO)\n    x4 = interval(ZERO, NINE, FOUR)\n    x5 = rbind(shift, x3)\n    x6 = totuple(x4)\n    x7 = apply(x5, x6)\n    x8 = lefthalf(x1)\n    x9 = righthalf(x1)\n    x10 = palette(x8)\n    x11 = lbind(shift, x9)\n    x12 = occurrences(x8, x10)\n    x13 = mapply(x11, x12)\n    O =7555(x13)\n    return O"], [1.1, "def solve_0125051f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = helpsitter(I, T)\n    x2 =2c,022)\n    x3 = dmirror(x2)\n    x4 = papply(pair, x2, x3)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x6, x7)\n    x9 = apply(x5, x8)\n    O = subgrid(x9, I)\n    return O"], [1.1, "def solve_f9bce92e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = astuple(subgrid, x3)\n    x5 = remove(x3, x2)\n    x6 = apply(ulcorner, x5)\n    x7 = merge(x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x1)\n    x12 = decrement(x8)\n    x13 = hsplit(x11, x12)\n    x14 = rbind(ofcolor, x ZERO)\n    x15 = apply(x14, x13)\n    x16 = leastcommon(x15)\n    x17 = matcher(first, x16)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x15, x18)\n    x20 = fill(x6, TWO, x19)\n    O = x10(x20)\n    return O"], [1.1, "def solve_82ab6035(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 =555(dedupe, x3)\n    x7 = x5(x6)\n    x8 = replace(x1, THREE, x7)\n    x9 = x5(x8)\n    x10 = asobject(x9)\n    x11 = height(x10)\n    x12 = decrement(x11)\n    x13 = subtract(x12, ONE)\n    x14 = width(x10)\n    x15 = decrement(x14)\n    x16 = add(x15, THREE)\n    x17 = rbind(repeat, x9)\n    x18 = compose(x17, vmirror)\n    x19 = fork(combine, x17, x18)\n    x20 = asobject(x10)\n    x21 = matcher(first, THREE)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = fill(x8, ONE, x23)\n    x25 = trim(x24)\n    x26 = width(x25)\n    x27 = subtract(x26, DOWN)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = height(x25)\n    x32 = subtract(x31, x31)\n    x33 = toivec(x32)\n    x34 = shift(x29, x33)\n    x35 = paint(x30, x34)\n    x36 = ofcolor(x10, x3)\n    x37 = fork(connect, x29, x30)\n    x38 = fork(combine, x37, x39)\n    x39 = mapply(x38, x36)\n    O = fill(x35, x2, x39)\n    return O"], [1.1, "def solve_93eee4d2(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, THREE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = equality(x6, EIGHT)\n    x9 = switch(x6, vmirror, hmirror)\n    x10 = x9(x8)\n    x11 = x4(x10)\n    x12 = pair(x4, x11)\n    x13 = branch(x8, first, last)\n    x14 = extract(x12, x13)\n    x15 = first(x14)\n    x16 = ulcorner(x15)\n    x17 = rightmost(x15)\n    x18 = decrement(x17)\n    x19 = add(x16, x18)\n    x20 =57(x16, x19)\n    x21 = x6(x20)\n    x22 = pair(x21, x12)\n    x23 = apply(last, x22)\n    x24 = mpapply(recolor, x23, x20)\n    O = paint(x5, x24)\n    return O"], [1.1, "def solve_271bfdb6(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(O = lbind(multiply, THREE)\n    x3 = power(x2, FOUR)\n    x4 = x3(I)\n    x5 = ofcolor(x4, x1)\n    x6 = shift(x5, UNITY)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = toindices(x8)\n    x10 = shoot(x4, x9)\n    x11 = underfill(x4, x1, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = first(x12)\n    x14 = vfrontier(x13)\n    x15 = cover(x11, x5)\n    O = paint(x15, x13)\n    return O"]], "3490cc26": [[0.08173484697705038, "def solve_0c392024(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_bd230512(I):\n    x1 = objects(I, T, T, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.08173484697705038, "def solve_84df100f(I):\n    O = subgrid(I, I)\n    return O"], [0.08173484697705038, "def solve_bd397569(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.08173484697705038, "def solve_db2b3ef5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_f4dc5c76(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.08173484697705038, "def solve_6368fafd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_8662fe6e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_8f0b143a(I):\n    O = subgrid(I, I)\n    return O"], [0.08173484697705038, "def solve_1e890bf3(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor( ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ZERO, x6)\n    return O"], [0.08173484697705038, "def solve_4d895346(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_7a6bf329(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_50c95d2f(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.08173484697705038, "def solve_a928d1e8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.08173484697705038, "def solve_e1663f1d(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.08173484697705038, "def solve_b80839e3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_d617735a(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.08173484697705038, "def solve_c5ebf15c(I):\n    O = subgrid(I, I)\n    return O"], [0.08173484697705038, "def solve_c306676f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = subgrid(x2, I)\n    return O"], [0.08173484697705038, "def solve_2584638b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    x9 = fill(I, THREE, x8)\n    x10 = leastcolor(I)\n    O = fill(x9, x10, x2)\n    return O"], [0.08173484697705038, "def solve_c3d61afd(I):\n    x1 = subgrid(I, I)\n    x2 = ofcolor(x1, ZERO)\n    x3 = asindices(x1)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x1, ONE, x9)\n    x11 = asobject(x1)\n    O = paint(x10, x11)\n    return O"], [0.08173484697705038, "def solve_47da62e8(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.08173484697705038, "def solve_6f0e02fa(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    O = upscale(I, x2)\n    return O"], [0.08173484697705038, "def solve_3a7ae0e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.08173484697705038, "def solve_6826cc57(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = argmax(x2, size)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x3)\n    x6 = toindices(x5)\n    x7 = subgrid(x3, x4)\n    x8 = lbind(shift, x6)\n    x9 = compose(x8, ulcorner)\n    x10 = argmax(x2, x9)\n    O = paint(x7, x10)\n    return O"], [0.08173484697705038, "def solve_fdb0acbe(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.08173484697705038, "def solve_3bcc10c4(I):\n    x1 = fgpartition(I)\n    x2 = rbind(other, FIVE)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = mfilter(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.08173484697705038, "def solve_a4fcfad4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.08173484697705038, "def solve_8a97cf2f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.08173484697705038, "def solve_0a800fed(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.08173484697705038, "def solve_7aefc0d9(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, SIX, x6)\n    return O"], [0.08173484697705038, "def solve_e3338a93(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.08173484697705038, "def solve_fdd753a2(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, x3, x6)\n    return O"], [0.08318632736744225, "def solve_ea8e4685(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.08318632736744225, "def solve_e0139862(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.1179007840135784, "def solve_6020cdb7(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.12811265931525573, "def solve_87def718(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(first, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.12814991617905258, "def solve_4f251d09(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [0.13468134728045977, "def solve_f2096b1e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_c5de83a6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_ca7c0ca7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_5ac41180(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_0116f63a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_c4e09e7a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_635666e9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_4d23bdfb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_48a20be5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_4e04410e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_37640ca1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_c47b744d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_b7ac1985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_07802807(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_c7444194(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_34d02bd8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_7d9c0725(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_b4aed7d9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.13468134728045977, "def solve_77938cf3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_45579b98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13468134728045977, "def solve_54f42531(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.13811265931525568, "def solve_ba808568(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.13811265931525568, "def solve_aa743878(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.14098233381512817, "def solve_fb2aaf40(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, EIGHT, x4)\n    return O"], [0.14213804397579397, "def solve_635ec628(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, tojvec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.14633502634498852, "def solve_d7635a44(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_716a174e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_253b805d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.14633502634498852, "def solve_a676a927(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.147039853263387, "def solve_1e271162(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.147039853263387, "def solve_dea0c6de(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.147039853263387, "def solve_1e80ad71(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.147039853263387, "def solve_7b81549e(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.1497728934434557, "def solve_1aa8aa90(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.15201967101125663, "def solve_d35d909e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15201967101125663, "def solve_d1c6a0d1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15201967101125663, "def solve_8cef8041(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.15201967101125663, "def solve_a3a308dc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.168463732206312, "def solve_ca2e63dc(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.168463732206312, "def solve_c336986f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.168463732206312, "def solve_d25ff74b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.1697728934434557, "def solve_e1d87129(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_f1eccfa6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_e631ca4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_60dce097(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_92cca2ad(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_4767b213(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_2ef41eed(I):\n    x1 = switch(I, FIVE, EIGHT)\n    O = switch(x1, EIGHT, TWO)\n    return O"], [0.1697728934434557, "def solve_7c821108(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_9020706d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_54bb6e26(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_f742d004(I):\n    x1 = switch(I, FOUR, EIGHT)\n    x2 = switch(x1, TWO, FOUR)\n    x3 = switch(x2, ONE, FOUR)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.1697728934434557, "def solve_d9ab51fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.1697728934434557, "def solve_0034d50a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.17098233381512817, "def solve_bc1daf90(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.17676372824140774, "def solve_eb35c029(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.19326297813860446, "def solve_a6c6d923(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.19986952115995066, "def solve_fc7a1cd2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.19986952115995066, "def solve_a9ea423d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.19986952115995066, "def solve_a4ccf199(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.20252763457609518, "def solve_fe14b80d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_07bc7bf8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_fc85e1e8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_fe4f2046(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_f33b236f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_ab955f5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_bf9ff8c6(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_f587dd24(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20252763457609518, "def solve_f56a5596(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.20977289344345568, "def solve_090595df(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_952023cf(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_949e11ed(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_95e1f5bd(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_cc3913f6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, THREE, x8)\n    return O"], [0.20977289344345568, "def solve_995d0378(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_e57e3d16(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_093d45a4(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.20977289344345568, "def solve_6eab9749(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.22208695827893984, "def solve_7e7a4dff(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.22208695827893984, "def solve_a5917d87(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.22208695827893984, "def solve_b35d6061(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.22208695827893984, "def solve_818bb270(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.22208695827893984, "def solve_57e90ff2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.22284967714703272, "def solve_c47b6abd(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.23590358470014935, "def solve_d9c1689d(I):\n    O = hmirror(I)\n    return O"], [0.23955261355884788, "def solve_a1b6a9b4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x4, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x4, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x4, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.2473346261417366, "def solve_eea4254d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.2473346261417366, "def solve_a7c745de(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.25586824336349373, "def solve_1ed0f29e(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.2586505475668209, "def solve_149172f1(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    O = fill(x3, EIGHT, x6)\n    return O"], [0.26404839600723184, "def solve_7713104a(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = mapply(x22, x21)\n    O = fill(x7, x18, x23)\n    return O"], [0.2730213103674518, "def solve_4c92211f(I):\n    O = rot180(I)\n    return O"], [0.2730213103674518, "def solve_61c15cb1(I):\n    O = rot180(I)\n    return O"], [0.2730213103674518, "def solve_cf3977c7(I):\n    x1 = dmirror(I)\n    x2 = ofcolor(x1, FIVE)\n    x3 = compose(even, last)\n    x4 = sfilter(x2, x3)\n    x5 = fill(x1, ZERO, x4)\n    O = cmirror(x5)\n    return O"], [0.2735505434325868, "def solve_57eacd28(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.28257229929506134, "def solve_ca25a111(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28257229929506134, "def solve_3ea6f7ae(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28257229929506134, "def solve_6f52b8e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28257229929506134, "def solve_6b5ec5c6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.28257229929506134, "def solve_78f894b0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.2912996173225872, "def solve_c2a7b8c8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_69b37bed(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_02913bb2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_4f73f41f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = fgpartition(x6)\n    x9 = merge(x8)\n    O = paint(x6, x9)\n    return O"], [0.2912996173225872, "def solve_c7a7f8bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.2912996173225872, "def solve_ebe978f3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.29175210347734337, "def solve_e3288b92(I):\n    O = trim(I)\n    return O"], [0.29211676764739275, "def solve_47ff83cc(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.2957105825141008, "def solve_c6314232(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.29660861186373566, "def solve_04afbd25(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_dd66d4d8(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.29660861186373566, "def solve_27604466(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.31257229929506125, "def solve_30cd65e1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.31257229929506125, "def solve_5892fbd8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.31373011118259564, "def solve_5891b45d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, FOUR, x4)\n    return O"], [0.31572456964802403, "def solve_ce52c751(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.31572456964802403, "def solve_e3948e19(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.31572456964802403, "def solve_fb6a3538(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.32539807978492835, "def solve_1c371af5(I):\n    x1 = trim(I)\n    x2 = objects(x1, F, T, T)\n    x3 = argmin(x2, numcolors)\n    x4 = normalize(x3)\n    x5 = toindices(x4)\n    x6 = prapply(connect, x5, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    O = underfill(x1, NEG_ONE, x8)\n    return O"], [0.326168988805897, "def solve_28b18022(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.3315011728051802, "def solve_bb3654f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.33317059203131244, "def solve_b21e7147(I):\n    x1 = replace(I, TWO, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.3336617330787981, "def solve_abf4e182(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = fill(x11, ZERO, x7)\n    x13 = ofcolor(x12, ZERO)\n    x14 = asindices(x12)\n    x15 = ofcolor(x12, TWO)\n    x16 = mapply(ineighbors, x15)\n    O = fill(x12, ZERO, x16)\n    return O"], [0.34510675848655514, "def solve_5ee2ed15(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.3578518219057304, "def solve_662408df(I):\n    x1 = ofcolor(I, TWO)\n    x2 = urcorner(x1)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = shoot(x2, DOWN_LEFT)\n    x5 = underfill(I, THREE, x3)\n    x6 = underfill(x5, ONE, x4)\n    x7 = rbind(shoot, LEFT)\n    x8 = mapply(x7, x3)\n    x9 = mapply(x7, x4)\n    x10 = underfill(x6, ONE, x9)\n    O = underfill(x10, THREE, x8)\n    return O"], [0.36791347770439387, "def solve_b0bb12b6(I):\n    O = dmirror(I)\n    return O"], [0.36791347770439387, "def solve_94df2242(I):\n    O = dmirror(I)\n    return O"], [0.39070363482916604, "def solve_b6d682da(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.3997728934434557, "def solve_bec9c22f(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.3997728934434557, "def solve_f891c4a8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.3997728934434557, "def solve_ee5d4af4(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.3997728934434557, "def solve_6f902f4f(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = equality(x1, TWO)\n    x8 = shape(I)\n    x9 = decrement(x8)\n    x10 = width(I)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = branch(x7, x9, x12)\n    x14 = shape(I)\n    x15 = canvas(ZERO, x14)\n    x16 = connect(x6, x13)\n    O = fill(x15, FIVE, x16)\n    return O"], [0.3997728934434557, "def solve_15e0cc19(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.3997728934434557, "def solve_c5e68849(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.4121180954681841, "def solve_ae731499(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.4121180954681841, "def solve_0dd0fea7(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.4221658498666133, "def solve_20cfb589(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.4221658498666133, "def solve_c4d662f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.4221658498666133, "def solve_c209138f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.422860611640019, "def solve_d1aa6bc6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.44421029663584294, "def solve_d9a5abeb(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, FOUR, x5)\n    return O"], [0.44421029663584294, "def solve_6def0516(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_5a0a1103(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_088f478e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_5b5cad0e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_65f22565(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_66feb675(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44421029663584294, "def solve_12ea1016(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.44434496433667936, "def solve_641c4fad(I):\n    x1 = canvas(ZERO, TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.4496658498666134, "def solve_eafcc2cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.477399406494354, "def solve_4f3e6051(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.477399406494354, "def solve_4a2cae9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.477399406494354, "def solve_793ec4ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.4853084736970792, "def solve_18cebbff(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.4868002933135647, "def solve_1ffcec24(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, T)\n    x3 = fork(connect, ulcorner, centerofmass)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, x1, x4)\n    O = replace(x5, ZERO, THREE)\n    return O"], [0.49128802196072596, "def solve_6a03ff2f(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.49128802196072596, "def solve_acf7ef78(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.5220510475626974, "def solve_a94050ab(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(I)\n    O = replace(x4, x5, x3)\n    return O"], [0.5235791174015115, "def solve_a51b2b24(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_2c70268a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5235791174015115, "def solve_0c691c5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5235791174015115, "def solve_e4a2a00b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5371785329428144, "def solve_8c472259(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = argmax(x5, size)\n    x7 = shape(x6)\n    x8 = canvas(x4, x7)\n    x9 = normalize(x6)\n    O = paint(x8, x9)\n    return O"], [0.5430215763602573, "def solve_b0611800(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5430215763602573, "def solve_2d7a66f6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.5542587288414367, "def solve_bc7aab33(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_bc999f25(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5542587288414367, "def solve_4aacf3da(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5648229277707709, "def solve_cd275006(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.6014849716551933, "def solve_5392da9c(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6014849716551933, "def solve_a1d477cf(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.6318005578299697, "def solve_2d5ab11f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x6, ONE)\n    x8 = compose(leastcolor, merge)\n    x9 = colorfilter(x1, x4)\n    x10 = branch(x7, x8, x9)\n    x11 = branch(x7, vsplit, hsplit)\n    x12 = x11(I, TWO)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = palette(x13)\n    x16 = other(x15, x4)\n    x17 = palette(x14)\n    x18 = other(x17, x4)\n    x19 = shape(x13)\n    x20 = canvas(x8, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.641276367065674, "def solve_acc6396a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_cb758191(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.641276367065674, "def solve_991f77e8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.6460408141864922, "def solve_e565140f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6968040052377024, "def solve_0fa3496b(I):\n    x1 = replace(I, FIVE, ZERO)\n    O = downscale(x1, THREE)\n    return O"], [0.7540848163604722, "def solve_bb620a85(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7540848163604722, "def solve_54417fbb(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7540848163604722, "def solve_613381a9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7540848163604722, "def solve_06099666(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7780474307942749, "def solve_52aa6171(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.7915392052312495, "def solve_3cec28bf(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_4858d724(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_d3e9539f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_2fdb5b40(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_83d97f85(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_83d2826e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_3511bc60(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_9b28c643(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_1749b26a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_8ec26013(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.7915392052312495, "def solve_de4c7f9b(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.8642031835623443, "def solve_cab6c0d6(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.868349128540305, "def solve_8e572b86(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(x1)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.8869488761998838, "def solve_695b04c8(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [0.9081403808721191, "def solve_2bd32f9a(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.9182807290875006, "def solve_3cfc9c7f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_48a4b03e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.9182807290875006, "def solve_7d5ac4ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_0f143e14(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_f85106ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_66791150(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_f5e7d35f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_748c71ab(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_3c154fcd(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = partition(x2)\n    x4 = rbind(contained, x3)\n    x5 = chain(flip, x4, shape)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, box)\n    x8 = sfilter(x6, x7)\n    x9 = fork(multiply, height, width)\n    x10 = argmin(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9182807290875006, "def solve_9d01c831(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_920e8a37(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_0dd67c96(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_8048952c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_acc729c5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_37c1dc45(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_57edebc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_37d3c75d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_1cb74a12(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.9182807290875006, "def solve_58ddfa13(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_5847c710(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_7a7313cb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x24, x27)\n    O = paint(x14, x28)\n    return O"], [0.9182807290875006, "def solve_379256b0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.9183491285403049, "def solve_d3df852a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_37f26949(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_9f5a128b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_5945c8f8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9183491285403049, "def solve_caa628d3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.9185740049506481, "def solve_af243358(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.9185740049506481, "def solve_ffc46cf3(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.9185740049506481, "def solve_bf183830(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.95, "def solve_4ec321af(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_21192291(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_acaa78f4(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_36a436ac(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_fdba1e94(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.95, "def solve_78b6e400(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [1.0, "def solve_e429b307(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(O)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [1.0, "def solve_2efc50dd(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c75443ff(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = shape(x3)\n    x5 = canvas(ZERO, x4)\n    x6 = hconcat(x3, x5)\n    x7 = palette(x6)\n    x8 = remove(ZERO, x7)\n    x9 = other(x8, FOUR)\n    x10 = ofcolor(x6, x9)\n    x11 = ofcolor(x6, FOUR)\n    x12 = fill(x5, NINE, x11)\n    x13 = mapply(vfrontier, x10)\n    x14 = mapply(hfrontier, x11)\n    x15 = fill(x12, NEG_ONE, x14)\n    x16 = fill(x15, FOUR, x13)\n    x17 = fill(x16, ZERO, x12)\n    O = fill(x17, FIVE, x16)\n    return O"], [1.0, "def solve_dc193ef5(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = mostcolor(I)\n    x9 = inbox(x7)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = matcher(first, x8)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x11, x13)\n    x15 = hfill(I, TWO, x14)\n    x16 = color(x7)\n    x17 =box(x7)\n    x18 = fill(x15, x16, x17)\n    x19 = subgrid(x15, x18)\n    x20 = asobject(x19)\n    x21 = matcher(first, x8)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x25, hsplit, vsplit)\n    x27 = x26(I, TWO)\n    x28 = shape(x27)\n    x29 = canvas(x8, x28)\n    x30 = multiply(x28, x29)\n    x31 = shift(x23, x30)\n    x32 = paint(x29, x31)\n    x33 = rbind(contained, x32)\n    x34 = sfilter(x17, x33)\n    x35 = compose(hline, vline)\n    x36 = sfilter(x14, x35)\n    x37 = subgrid(x36, x32)\n    O = paint(x37, x31)\n    return O"], [1.0, "def solve_2b697a73(I):\n    x1 = astuple(I, THREE)\n    x2 = astuple(x1, x1)\n    x3 = astuple(LEFT, UNITY)\n    x4 = astuple(NEG_UNITY, x3)\n    x5 = astuple(rot90, x4)\n    x6 = astuple(rot180, x4)\n    x7 = astuple(rot270, x4)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x10, x6)\n    O = underfill(I, ZERO, x11)\n    return O"], [1.0, "def solve_2e99ed2b(I):\n    x1 = frontiers(I)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    O = move(x2, x100, x2)\n    return O"], [1.0, "def solve_461a90fb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = add(x23, x18)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = paint(I, x26)\n    x28 = ofcolor(x27, x9)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = paint(x27, x30)\n    return O"], [1.0, "def solve_f5ff553e(I):\n    x1 = objects(I, T, F, T)\n    x2 = Tizefilter(x1, ONE)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.0, "def solve_c8bbd18c(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = ulcorner(x1)\n    x6 = toindices(x5)\n    x7 = shape(x3)\n    x8 = add(x5, x7)\n    x9 = initset(x8)\n    x10 = shift(x3, x9)\n    x11 = toindices(x10)\n    x12 = fgpartition(x2)\n    x13 = merge(x12)\n    x14 = cover(I, x13)\n    x15 = fgpartition(x2)\n    x16 = merge(x15)\n    x17 = paint(x14, x16)\n    x18 = height(x11)\n    x19 = width(x11)\n    x20 = divide(x18, x19)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = Fgpartition(x17)\n    x24 = merge(x23)\n    x25 = mostcolor(I)\n    x26 = combine(x23, x24)\n    x27 = fill(x17, x25, x26)\n    x28 = astuple(x27, x920)\n    x29 = canvas(ZERO, x28)\n    x30 = asindices(x29)\n    x31 = recolor(x25, x30)\n    x32 = lbind(shift, x31)\n    x33 = occurrences(x27, x32)\n    x34 = mapply(x33, x22)\n    O = fill(x27, x25, x34)\n    return O"], [1.0, "def solve_88cbc542(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = argmin(x2, x3)\n    x5 = colorfilter(x1, x4)\n    x6 = rbind(vmatching, x4)\n    x7 = rbind(hmatching, x4)\n    x8 = fork(either, x6, x7)\n    x9 = extract(x5, x8)\n    x10 = rbind(gravitate, x4)\n    x11 = compose(center, x10)\n    x12 = fork(add, center, x11)\n    x13 = fork(connect, x12, backdrop)\n    x14 = shape(x9)\n    x15 = maximum(x14)\n    x16 = interval(ONE, x15, ONE)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(shift, x9)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = canvas(ZERO, x4)\n    return O"], [1.0, "def solve_23d7a91f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_506ee0e1(I):\n    x1 = height(I)\n    x2 = rot90(I)\n    x3 = subtract(x1, TWO)\n    x4 = multiply(NEG_ONE, THREE)\n    x5 = tojvec(x3)\n    x6 = shift(x2, x5)\n    O = underfill(I, THREE, x6)\n    return O"], [1.0, "def solve_0f8aa01b(I):\n    x1 = initset(identity)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [1.0, "def solve_03687d0a(I):\n    x1 = lbind(apply, maximum)\n    x2 = lbind(apply, downscale)\n    x3 = chain(x1, x2, frontiers)\n    x4 = fork(positive, size, dedupe)\n    x5 = lbind(apply, shape)\n    x6 = height(I)\n    x7 = lbind(pair, I)\n    x8 = chain(x4, x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = compose(color, x8)\n    x11 = fork(both, x9, x10)\n    x12 = extract(x10, x11)\n    x13 = rbind(colorcount, x12)\n    x14 = argmin(x12, x13)\n    x15 = delta(x14)\n    x16 = astuple(x11, x10)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x15, x17)\n    x19 = mpapply(recolor, x18, x13)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_b735f956(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, NINE, ZERO)\n    x3 = colorfilter(x1, NINE)\n    x4 = mapply(d4f5)\n    x5 = fill(x2,140, x4)\n    x6 = mapply(ff805, x5)\n    O = fill(x5, ONE, x6)\n    return O"], [1.0, "def solve_e3198cc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x39, x7)\n    x11 = remove(x8, x10)\n    x22 = merge(x11)\n    x23 = color(x12)\n    x24 = color(x8)\n    x25 = combine(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, x13, x26)\n    return O"], [1.0, "def solve_d1cadab6(I):\n    x1 = mostcolor(I)\n    x2 = box(I)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [1.0, "def solve_25b615f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = add(x26, THREE)\n    x8 = connect(x7, x7)\n    O = fork(recolor, color, x8)\n    return O"], [1.0, "def solve_52edf60f(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_97ffdbba(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = fork(equality, toindices, box)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, F, F, T)\n    x6 = sfilter(x5, x4)\n    x7 = difference(x5, x6)\n    O = fill(I, FOUR, x7)\n    return O"], [1.0, "def solve_d46a2c69(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, x7)\n    x9 = x6(x8)\n    x10 = branch(x5, compress, vmirror)\n    x11 = x5(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da77fe4c(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 =outbox(x13)\n    x15 = ulcorner(x14)\n    x16 = invert(x15)\n    x17 = shift(x16, UNITY)\n    x18 = shift(x16, LEFT)\n    x19 = interval(x17, x18, ONE)\n    x20 = apply(tojvec, x19)\n    x21 = apply(vfrontier, x20)\n    x22 = mapply(x21, x2)\n    x23 = combine(x17, x17)\n    x24 = fill(x8, x1, x23)\n    x25 = fill(x24, x2, x22)\n    O = fill(x25, x23, x24)\n    return O"], [1.0, "def solve_21f49bcf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9be1488a(I):\n    x1 = lbind(adjacent, I)\n    x2 = compose(x1, size)\n    x3 = fork(both, x2, box)\n    x4 = fork(both, x3, height)\n    x5 = fork(both, x4, width)\n    x6 = fork(both, hline, vline)\n    x7 = fork(both, center, rot90)\n    x8 = fork(both, center, rot270)\n    x9 = fork(both, x5, x6)\n    x10 = fork(both, x6, x8)\n    x11 = fork(connect, lefthalf, tophalf)\n    x12 = fork(branch, x11, x10)\n    x13 = fork(x12, positive, branch)\n    x14 = branch(x13, size, x7)\n    x15 = maximum(x14)\n    x16 = rot90(I)\n    x17 = double(x16)\n    x18 = interval(ONE, x17, ONE)\n    x19 = center(I)\n    x20 = pair(x18, x19)\n    x21 = objects(x23, F, T, T)\n    x22 = rbind(add, RIGHT)\n    x23 = compose(x22, center)\n    x24 = color(x23)\n    x25 = interval(ZERO, x17, ONE)\n    x26 = rbind(add, DOWN)\n    x27 = compose(x26, x23)\n    x28 = astuple(x15, x17)\n    x29 = astuple(x24, x23)\n    x30 = combine(x28, x29)\n    x31 = rbind(shoot, UP)\n    x32 = mapply(x31, x30)\n    x33 = fill(x23, FOUR, x32)\n    x34 = subgrid(x33, x20)\n    O = trim(x34)\n    return O"], [1.0, "def solve_541837c3(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_73bd7ba7(I):\n    x1 = trim(I)\n    x2 = repeat(dedupe, x1)\n    x3 = repeat(x2, ONE)\n    x4 = compress(x3)\n    x5 = width(x4)\n    x6 = halve(x5)\n    x7 = upscale(x4, x6)\n    x8 = height(x4)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = lbind(shift, x4)\n    x12 = mapply(x11, x10)\n    O = paint(x4, x12)\n    return O"], [1.0, "def solve_307cd6bd(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = shape(I)\n    x4 = multiply(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = ofcolor(I, x2)\n    x7 = lbind(shift, x6)\n    x8 = shape(I)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x6)\n    x11 = mapply(x7, x10)\n    O = fill(x5, x2, x11)\n    return O"], [1.0, "def solve_b8608c19(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = partition(I)\n    x4 = fork(multiply, height, width)\n    x5 = argmin(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = height(I)\n    x8 = divide(x7, THREE)\n    x9 = width(I)\n    x10 = interval(THREE, x9, ONE)\n    x11 = pair(x5, x10)\n    x12 = sfilter(x11, last)\n    x13 = fork(add, first, last)\n    x14 = rbind(multiply, x8)\n    x15 = apply(x14, x12)\n    x16 = mapply(x13, x15)\n    O = fill(I, x1, x16)\n    return O"], [1.0, "def solve_6b1bba2a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_779c5f07(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [1.0, "def solve_4331602b(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_736ac3e7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_d24d1a03(I):\n    x1 = astuple(TEN, TEN)\n    x2 = canvas(ZERO, x1)\n    x3 = argmin(x2, size)\n    x4 = last(x2)\n    x5 = remove(x3, x2)\n    x6 = recolor(FIVE, x5)\n    x7 = recolor(lrcorner, x5)\n    x8 = add(x7, UNITY)\n    x9 = initset(x8)\n    x10 = insert(x6, x9)\n    x11 = branch(x4, x10, x3)\n    O = canvas(ZERO, x1)\n    return O"], [1.0, "def solve_a31d55d6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = matcher(first, x22)\n    x24 =sfilter(x21, x23)\n    x25 = chain(size, dedupe, first)\n    x26 = argmax(x24, x25)\n    x27 = matcher(first, x22)\n    x28 = sfilter(x24, x27)\n    x29 = difference(x28, x26)\n    x30 =matcher(first, x22)\n    x31 = sfilter(x29, x30)\n    x32 = combine(x26, x31)\n    x33 = mapply(x15, x32)\n    x34 = fill(I, THREE, x33)\n    O = fill(x34, EIGHT, x22)\n    return O"], [1.0, "def solve_2e5054dc(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_eb863460(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_487cb3b2(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_bb497512(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_bb563887(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_6ba5084d(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = index(x4, DOWN)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = lrcorner(x6)\n    x10 = shoot(x9, NEG_UNITY)\n    x11 = llcorner(x6)\n    x12 = shoot(x11, DOWN_LEFT)\n    x13 = combine(x8, x12)\n    x14 =Rbind(shoot, xdelta)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = fill(x4, THREE, x16)\n    x18 = replace(x17, FIVE, ZERO)\n    O = x5(x18)\n    return O"], [1.0, "def solve_e2fd9a2f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [1.0, "def solve_77fc21b4(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = lbind(colorfilter, x3)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, TWO)\n    x9 = palette(x2)\n    x10 = sfilter(x9, x8)\n    x11 = fork(equality, toindices, box)\n    x12 = rbind(contained, x5)\n    x13 = compose(x12, first)\n    x14 = rbind(contained, x10)\n    x15 = compose(x14, first)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x11, x16)\n    x18 = extract(x5, x17)\n    x19 = other(x5, x18)\n    x20 = ofcolor(x4, x19)\n    x21 = rightmost(x20)\n    x22 = manhattan(x21, x18)\n    x23 = uppermost(x20)\n    x24 = decrement(x23)\n    x25 = leftmost(x20)\n    x26 = rbind(add, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x40, x27)\n    x29 = rbind(vmatching, x20)\n    x30 = sfilter(x4, x29)\n    x31 = fork(either, vline, hline)\n    x32 = mfilter(x30, x31)\n    x33 = fill(x1, x19, x32)\n    x34 = replace(x33, x19, x5)\n    O = fill(x34, x10, x32)\n    return O"], [1.0, "def solve_56db1905(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, EIGHT, x4)\n    x6 = matcher(numcolors, ONE)\n    x7 = objects(x5, F, F, T)\n    x8 = difference(x7, x2)\n    x9 = fill(x5, TWO, x8)\n    x10 = colorfilter(x9, EIGHT)\n    x11 = rbind(adjacent, x2)\n    x12 = mfilter(x10, x11)\n    x13 = mfilter(x10, x12)\n    x14 = underfill(x9, THREE, x13)\n    x15 = rbind(adjacent, x2)\n    x16 = mfilter(x14, x15)\n    x17 = mfilter(x14, x16)\n    x18 = colorfilter(x17, TWO)\n    x19 = rbind(adjacent, x2)\n    x20 = mfilter(x18, x19)\n    x21 = mfilter(x18, x20)\n    x22 = fill(x9, THREE, x21)\n    O = replace(x22, EIGHT, ONE)\n    return O"], [1.0, "def solve_d7e0530a(I):\n    x1 = ofcolor(I, TWO)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = lbind(recolor, TWO)\n    x7 = chain(x6, x5, first)\n    x8 = chain(x5, x7, last)\n    x9 = fork(combine, first, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(multiply, first, x10)\n    x12 = compose(x4, last)\n    x13 = chain(x12, x11, x41)\n    x14 = fork(apply, x13, x11)\n    x15 = power(x14, TWO)\n    x16 = fork(difference, x9, last)\n    x17 = fork(recolor, x15, x16)\n    x18 = apply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f29eedf7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_ab3062e4(I):\n    x1 = remove(ZERO, x1)\n    x2 = astuple(x1, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = hmirror(x3)\n    x5 = vconcat(x3, x4)\n    x6 = double(x1)\n    x7 = astuple(x6, x5)\n    x8 = crop(I, DOWN, x7)\n    O = vconcat(x5, x8)\n    return O"], [1.0, "def solve_bd8e8cc3(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [1.0, "def solve_a65d5fa7(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = initset(x3)\n    x5 = cover(I, x4)\n    x6 = upscale(x5, TWO)\n    x7 = shape(x6)\n    x8 = add(x6, TWO_BY_ZERO)\n    x9 = canvas(ZERO, x8)\n    x10 = asobject(x9)\n    x11 = shift(x10, UNITY)\n    O = paint(x9, x11)\n    return O"], [1.0, "def solve_fccc23eb(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = rbind(argmin, x83750696)\n    x10 = compose(x9, subgrid)\n    x11 = apply(x10, x5)\n    x12 = mapply(x8, x11)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_76d76b54(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 =intersection(x2, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x3, I)\n    x10 = increment(x4)\n    x11 = divide(x10, FOUR)\n    x12 = x11(x9)\n    x13 = hconcat(x9, x12)\n    x14 = hconcat(x13, x5)\n    x15 = vconcat(x13, x14)\n    x16 = vconcat(x15, x5)\n    O = cellwise(x16, x7, ZERO)\n    return O"], [1.0, "def solve_5a8b3933(I):\n    x1 = subgrid(I, I)\n    x2 = astuple(ONE, THREE)\n    x3 = astuple(TWO, FOUR)\n    x4 = initset(x2)\n    x5 = insert(x3, x4)\n    x6 = insert(x1, x5)\n    x7 = prapply(connect, x6, toindices)\n    x8 =8091409464\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = x9(x7)\n    x11 = halve(x1)\n    x12 = astuple(x11, x11)\n    x13 = x9(x12)\n    x14 = height(x10)\n    x15 = decrement(x14)\n    x16 = lbind(astuple, x15)\n    x17 = apply(x16, x13)\n    x18 = ZERO(x17)\n    x19 = fill(x1, EIGHT, x18)\n    x20 = fill(x19, FOUR, x7)\n    O = fill(x20, FOUR, x10)\n    return O"], [1.0, "def solve_5f806a07(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_b8e6e30f(I):\n    x1 = astuple(287, dmirror)\n    x2 = astuple(cmirror, NEG_ONE, x1)\n    x3 = hsplit(I, x2)\n    x4 = rbind(ofcolor, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = merge(x6)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_94a80115(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = equality(x1, x2)\n    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x5 = branch(x3, x2, x4)\n    x6 = vconcat(I, x5)\n    O = replace(x6, ONE, TWO)\n    return O"], [1.0, "def solve_52404df0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, identity)\n    x3 = branch(x1, decrement, height)\n    x4 = x3(I)\n    x5 = astuple(ONE, x4)\n    x6 = x2(I)\n    x7 = crop(x6, ORIGIN, x5)\n    x8 = branch(x7, decrement, width)\n    x9 = x8(x4)\n    x10 = astuple(ONE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = rot90(x11)\n    x13 = hconcat(x12, x1)\n    x14 = hsplit(x13, THREE)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = objects(x11, F, T, T)\n    x18 = ofcolor(x11, ONE)\n    x19 = ofcolor(x11, TWO)\n    x20 = rbind(shoot, DOWN)\n    x21 = mapply(x20, x17)\n    x22 = rbind(shoot, UP_RIGHT)\n    x23 = mapply(x22, x19)\n    x24 = fill(x11, ONE, x21)\n    x25 = fill(x24, TWO, x23)\n    x26 = fill(x25, ONE, x25)\n    O = x2(x26)\n    return O"], [1.0, "def solve_b0001103(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = objects(x14, T, F, T)\n    x21 = other(x20, x13)\n    x22 = subgrid(x21, x15)\n    x23 = llcorner(x9)\n    x24 = urcorner(x9)\n    x25 = shoot(x28, UNITY)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = shoot(x24, UP_RIGHT)\n    x28 = combine(x26, x27)\n    O = fill(x10, x3, x28)\n    return O"], [1.0, "def solve_311956be(I):\n    x1 = mostcolor(I)\n    x2 = hconcat(I, I)\n    x3 = upscale(I, THREE)\n    x4 = asobject(x3)\n    x5 = hperiod(x4)\n    x6 = vperiod(x4)\n    x7 = hperiod(x6)\n    x8 = vperiod(x6)\n    x9 = hperiod(x8)\n    x10 = hperiod(x4)\n    x11 = hperiod(x5)\n    x12 = hperiod(x6)\n    x13 = hperiod(x5)\n    x14 = vperiod(x6)\n    x15 = hperiod(x5)\n    x16 = vperiod(x6)\n    x17 = hperiod(x5)\n    x18 = hperiod(x6)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x4)\n    x25 = mapply(x24, x23)\n    x26 = paint(I, x25)\n    x27 = occurrences(x26, x4)\n    x28 = mapply(toindices, x27)\n    O = fill(x26, x1, x28)\n    return O"], [1.0, "def solve_9cdca2ab(I):\n    x1 = asobject(I)\n    x2 = leastcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = canvas(ZERO, x11)\n    x13 = paint(x12, x10)\n    O = paint(x13, x12)\n    return O"], [1.0, "def solve_51f86cd5(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [1.0, "def solve_400acd80(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argtoindices(x14)\n    x26 = x24(x25)\n    x27 = ofcolor(x15, x13)\n    x28 = intersection(x26, x27)\n    x29 = rbind(contained, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x22, x30)\n    x32 = lbind(shift, x24)\n    x33 = height(x12)\n    x34 = rbind(multiply, x33)\n    x35 = chain(x32, x34, last)\n    x36 = mapply(x35, x31)\n    x37 = paint(x14, x36)\n    O = x15(x37)\n    return O"], [1.0, "def solve_5b190dbc(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, FOUR, x21)\n    return O"], [1.0, "def solve_6e640b67(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = combine(x4, x6)\n    x6 = shape(x2)\n    x7 = hfrontier(x6)\n    x8 = insert(x3, x7)\n    x9 = fill(I, x3, x8)\n    x10 = hmirror(x2)\n    x11 = objects(x10, F, F, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, x9)\n    x14 = paint(x9, x13)\n    x15 = normalize(x12)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x14, x17)\n    return O"], [1.0, "def solve_2c118383(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_cb4194cd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x22 = combine(x8, x9)\n    x23 = intersection(x11, x12)\n    x24 = difference(x22, x23)\n    x25 = toobject(x24, I)\n    x26 = color(x25)\n    x27 = subgrid(x9, I)\n    x28 = solve(x27, x26)\n    x29 = replace(x28, x10, x264)\n    x30 = ofcolor(x29, x27)\n    x31 = subgrid(x30, x29)\n    x32 = numbercolors(x31)\n    x33 = first(x32)\n    x34 = normalize(x33)\n    x35 = last(x32)\n    x36 = remove(x34, x32)\n    x37 = remove(x35, x32)\n    x38 = combine(x36, x37)\n    x39 = fill(x29, x27, x38)\n    x40 = ofcolor(x39, x706)\n    x41 = replace(x39, x10, x04)\n    x42 = ofcolor(x41, x727)\n    x43 = rightmost(x40)\n    x44 = equality(x43, x82)\n    x45 = branch(x44, x41, x45)\n    x46 = rbind(shoot, DOWN)\n    x47 = mapply(x46, x34)\n    x48 = difference(x47, x41)\n    O = fill(x43, x27, x48)\n    return O"], [1.0, "def solve_cbf7423c(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = halve(x2)\n    x4 = rbind(shoot, UP_RIGHT)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = fork(combine, x4, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(combine, x6, x9)\n    x11 = height(I)\n    x12 = rbind(valmax, x11)\n    x13 = hmatching(x12, x1)\n    x14 = branch(x13, x11, x10)\n    x15 = extract(x14, x14)\n    x16 = subgrid(x15, I)\n    O = trim(x16)\n    return O"], [1.0, "def solve_01da4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x3, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = argmin(x11, size)\n    x13 = subgrid(x12, I)\n    x14 = llcorner(x12)\n    x15 = replace(x13, x4, ZERO)\n    x16 = replace(x15, x17, x13)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = hconcat(x17, x14)\n    x21 = hconcat(x18, x15)\n    x22 = vconcat(x20, x21)\n    x23 = vconcat(x22, x17)\n    O = vconcat(x22, x18)\n    return O"], [1.0, "def solve_eaa6aa55(I):\n    x1 = objects(I, F, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = lbind(shift, x3)\n    x5 = apply(x4, x1)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = apply(x7, x5)\n    x9 = mapply(x4, x8)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_fdfcbe93(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1,x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [1.0, "def solve_1c41ed9f(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_23f7d8ef(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_05befef2(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = switch(x1, NEG_ONE, TWO)\n    x4 = switch(x2, EIGHT, x3)\n    x5 = combine(x4, x4)\n    x6 = intersection(x5, x4)\n    x7 = hmirror(x6)\n    x8 = vmirror(x6)\n    x9 = objects(x8, T, F, T)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 =dfmirror(x6)\n    x13 = toindices(x12)\n    x14 = rbind(first, x13)\n    x15 = toindices(x14)\n    x16 = mapply(x16, x9)\n    x17 = fill(x6, EIGHT, x13)\n    x18 = fill(x17, FOUR, x15)\n    O = fill(x18, ONE, x16)\n    return O"], [1.0, "def solve_5d13204b(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(fork, maximum)\n    x6 = lbind(lbind, subgrid)\n    x7 = lbind(compose, x5)\n    x8 = chain(x7, x6, x4)\n    x9 = lbind(colorcount, I)\n    x10 = compose(x9, x8)\n    x11 = fork(equality, x8, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_4d0d0b26(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4ea1adf2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_663bbba3(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = urcorner(x2)\n    x15 = ulcorner(x3)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = shoot(x12, UP_RIGHT)\n    x18 = shoot(x13, NEG_UNITY)\n    x19 = shoot(x11, UNITY)\n    x20 = shoot(x15, DOWN_LEFT)\n    x21 = shoot(x16, UP_RIGHT)\n    x22 = fork(combine, x14, x17)\n    x23 = fork( combine, x16, x18)\n    x24 = fork(combine, x22, x23)\n    x25 = x24(x2)\n    x26 = dmirror(x25)\n    x27 = invert(x26)\n    x28 = shape(x2)\n    x29 = canvas(ZERO, x28)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = asindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = mapply(x33, x31)\n    O = paint(x39, x34)\n    return O"], [1.0, "def solve_6866a66a(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_39f0038f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9d184417(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_44e6e0c8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_888867e7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_8ecafcbd(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_5cef4f22(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_dca06431(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_205c1eb7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_37a67f0e(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = chain(invert, center, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = astuple(identity, rot90)\n    x7 = astuple(rot180, rot270)\n    x8 = combine(x6, x7)\n    x9 = argmax(x8, x4)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = combine(x4, x11)\n    x13 = urcorner(x12)\n    x14 = shoot(x13, DOWN_LEFT)\n    x15 = combine(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = mapply(x6, x12)\n    x18 = combine(x6, x17)\n    x19 = fill(I, ONE, x18)\n    O = objects(x19, T, F, T)\n    return O"], [1.0, "def solve_22d10acb(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = x1(I, TWO)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = palette(x3)\n    x6 = width(x3)\n    x7 = rbind(repeat, x6)\n    x8 = compose(x7, merge)\n    x9 = matcher(x8, ONE)\n    x10 = compose(flip, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(x11, first)\n    x13 = rbind(sfilter, x12)\n    x14 = compose(x13, first)\n    x15 = fork(combine, x12, x14)\n    x16 = fork(recolor, x12, x15)\n    x17 = mapply(x16, x5)\n    O = paint(x3, x17)\n    return O"], [1.0, "def solve_f4d7c72f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x8)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_bf67fac6(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x55(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [1.0, "def solve_fbe9c8e6(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2c7776e6(I):\n    x1 = frontiers(I)\n    x2 = matcher(color, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(I, T, T, F)\n    x13 = colorfilter(x12, x11)\n    x14 = rbind(manhattan, x13)\n    x15 = chain(even, x14, initset)\n    x16 = sfilter(x13, x15)\n    x17 = compose(man, first)\n    x18 = apply(x17, x16)\n    x19 = branch(x6, x18, x111)\n    x20 = canvas(x11, THREE_BY_THREE)\n    x21 = matcher(first, x10)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x13, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x5, x22, x25)\n    O = canvas(x26, UNITY)\n    return O"], [1.0, "def solve_1ed4b2d8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices755(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_82ac6801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = x25(x22)\n    O = fill(x14, THREE, x26)\n    return O"], [1.0, "def solve_bca5b96d(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_5ce4c359(I):\n    x1 = frontiers(I)\n    x2 = rot98(I)\n    x3 = color(x2)\n    x4 = asobject(x2)\n    x5 = hperiod(x4)\n    x6 = apply(tojvec, x5)\n    x7 = increment(x6)\n    x8 = NEG_ONE(x7)\n    x9 = lbind(shift, x4)\n    x10 = height(I)\n    x11 = lbind(multiply, x10)\n    x12 = chain(x9, x11, last)\n    x13 = apply(x12, x7)\n    x14 = paint(I, x13)\n    x15 = mapply(x7, x1)\n    O = paint(x14, x15)\n    return O"], [1.0, "def solve_22ee5453(I):\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = vmirror(x2)\n    x6 = hconcat(x44, x5)\n    O = hconcat(x6, x2)\n    return O"], [1.0, "def solve_14f20b2c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_6f1a59c9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = shift(x2, x3)\n    x5 = paint(x1, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(x5, ONE, x8)\n    return O"], [1.0, "def solve_a7dd016d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(comb28, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_da21f6d1(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_78fb1eb8(I):\n    x1 = lbind(occurrences, I)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 = fork(apply, x3, x1)\n    x5 = compose(positive, size)\n    x6 = rbind(compose, x4)\n    x7 = lbind(lbind, occurrences)\n    x8 = compose(x6, x7)\n    x9 = fork(compose, x5, x8)\n    x10 = compose(x1, x9)\n    x11 = fork(ofcolor, x10, identity)\n    x12 = chain(x6, x3, x11)\n    x13 = fork(mapply, x12, x11)\n    x14 = product(x1, x1)\n    x15 = power(x13, TWO)\n    x16 = astuple(x15, x12)\n    x17 = astuple(x14, x12)\n    x18 = astuple(x16, x17)\n    x19 = hfrontier(x18)\n    O = underfill(I, SIX, x19)\n    return O"], [1.0, "def solve_b390b195(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind( occurrences, TWO)\n    x6 = chain(first, x5, numcolors)\n    x7 = compose(x6, toindices)\n    x8 = fork(sfilter, identity, x7)\n    x9 = chain(x6, asobject, x8)\n    x10 = fork(shift, x9, ulcorner)\n    x11 = mapply(x10, x4)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = pair(x14, x14)\n    x16 = mapply(x9, x15)\n    O = paint(x12, x16)\n    return O"], [1.0, "def solve_04f035af(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_adc28b62(I):\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(SIX)\n    x7 = toivec(THREE)\n    x8 = insert(x6, x7)\n    x9 = tojvec(THREE)\n    x10 = insert(x6, x9)\n    x11 = fork(combine, identity, hmirror)\n    x12 = fork(combine, identity, vmirror)\n    x13 = x11(x12)\n    x14 = x11(x12)\n    x15 = paint(x13, x14)\n    x16 = paint(x15, x13)\n    O = x10(x16)\n    return O"], [1.0, "def solve_29e8bfe4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, hline)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_0494d546(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_a8f918ef(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = repeat(I, x1)\n    x3 = astuple(TWO, FIVE)\n    x4 = interval(THREE, x3, ONE)\n    x5 = prapply(recolor, x2)\n    x6 = lbind(mapply, vfrontier)\n    x7 = compose(x6, toindices)\n    x8 = fork(combine, x7, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_161660c3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f3b3318a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(I)\n    x18 = halve(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(shift, x2)\n    x21 = compose(x19, x20)\n    x22 = compose(x11, x21)\n    x23 = fork(combine, x21, x22)\n    x24 = compose(flip, x23)\n    x25 = mapply(x24, x4)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_4916fa47(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_d4d355c3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =e509e(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.0, "def solve_61a1ac03(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fork(equality, identity, vmirror)\n    x14 = mfilter(x6, x15)\n    O = underpaint(x5, x14)\n    return O"], [1.0, "def solve_9d6bfe8c(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_0af416ba(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_1ac28fec(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = objects(x7, T, F, F)\n    x10 = palette(x9)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x13, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.0, "def solve_7e6b9c4d(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_6c71573c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_0fe00193(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d05ed9d9(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.1, "def solve_e0527c88(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = mapply(x15, x13)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x21, x16)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x34)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x34)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x34)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x34)\n    x"], [1.1, "def solve_56d62acb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = x12(x7)\n    x9 = shape(x6)\n    x10 = increment(x9)\n    x11 = multiply(x10, x5)\n    x12 = canvas(x3, x11)\n    x13 = hconcat(x12, x12)\n    x14 = hconcat(x5, x13)\n    x15 = partition(x14)\n    x16 = apply(color, x15)\n    x17 = cover(I, x16)\n    x18 = argmax(x16, width)\n    x19 = astuple(x18, ulcorner)\n    x20 = canvas(x9, x19)\n    x21 = fill(x20, NEG_ONE, x19)\n    x22 = merge(x15)\n    x23 = cover(x21, x22)\n    x24 = asindices(x23)\n    x25 = ofcolor(x14, NINE)\n    x26 = difference(x24, x25)\n    x27 = fill(x14, NEG_ONE, x26)\n    x28 = ofcolor(x27, NINE)\n    x29 = subgrid(x28, x27)\n    x30 = asindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shift)\n    x33 = compose(x31, x32)\n    x34 = fork(combine, x33, x31)\n    x35 = mapply(x34, x29)\n    x36 = fill(x27, NEG_ONE, x35)\n    x37 = shift(x31, x33)\n    x38 = toindices(x37)\n    x39 = rbind(mapply, x38)"], [1.1, "def solve_0b057963(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, colorcount)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, colorcount)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = canvas(ZERO, x34)\n    x36 = lbind(multiply, x33)\n    x377 = apply(x36, x3)\n    x38 = lbind(shift, x10)\n    x39 = mapply(x38, x37)\n    O = fill("], [1.1, "def solve_03f2bda7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(argmax, x38)\n    x40 = mapply(x39, x32)\n    x41 = ofcolor(I, x4)\n    x42 = rbind(adjacent, x41)"], [1.1, "def solve_7adda415(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =6954025dad(I):\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(cmirror, dmirror)\n    x11 = astuple(hmirror, vmirror)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = astuple(NEG_TWO, rmirror)\n    x15 = astuple(fafffa47, x14)\n    x16 = combine(x13, x15)\n    x17 =173333(x16)\n    x18 = height(I)\n    x19 = astuple(x18, hsplit)\n    x20 = canvas(x4, x19)\n    x21 =6(I)\n    x22 = subgrid(x21, x20)\n    x23 = rot90(x22)\n    x24 = width(x23)\n    x25 = rbind(repeat, x24)\n    x26 = chain(rot90, x25, hmirror)\n    x27 = matcher(x26, x23)\n    x28 = objects(x22, F, F, T)\n    x29 = sfilter(x28, x27)\n    x30 = argmax(x29, size)\n    x31 = matcher(first, x4)\n    x32 = rbind(sfilter, x31)\n    x33 = lbind(recolor, x4)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x31)\n    x36 = fork(combine, x30, x35)\n    x37 = lbind(recolor, x10)\n    x38 = rbind(sfilter, x36)\n    x"], [1.1, "def solve_6207143f(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x35, x28)\n    x37 = lbind(shift, x24)\n    x38 = mapply(x37, x36)\n    x39 = fill(x23, TWO, x38)\n"], [1.1, "def solve_48ca015c(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_2c8b5bcb(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_34c1043f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x31 = last(x28)\n    x32 = x29(I)\n    x33 = palette(I)\n    x34 = lbind(ofcolor, x33)\n    x35 = compose(normalize, x34)\n    x36 = matcher(x35, x12)\n    x37 = extract(x33, x36)\n    x38 = remove(x37, x33)\n    x39 = lbind(colorcount, x33)\n    x40 = argmin(x38, x39)\n    "], [1.1, "def solve_ab01fcf9(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_d7ecd998(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = x9(I)\n    x11 = index(x10, ORIGIN)\n    x12 = width(x10)\n    x13 = multiply(x12, x12)\n    x14 = bottomhalf(x10)\n    x15 = rbind(rapply, x14)\n    x16 = compose(first, x15)\n    x17 = chain(x13, x15, x16)\n    x18 = matcher(x17, ZERO)\n    x19 = sfilter(x11, x18)\n    x20 = merge(x19)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = fork(astuple, x21, x22)\n    x24 = initset(x13)\n    x25 = matcher(x23, x24)\n    x26 = compose(flip, x25)\n    x27 = extract(x19, x26)\n    x28 = x27(x252)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 =586(x29, x30)\n    x32 = ofcolor(x31, x11)\n    x33 = x27(x32)\n    x34 = shift(x31, x33)\n    x35 = fill(x30, TWO, x34)\n    x36 = vmirror(x35)\n    x37 = lbind(shift, x35)\n    x38 = height(x36)\n    x39 = divide(x38, x36)\n    x40 = increment(x39)\n    x41"], [1.1, "def solve_62d51063(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = difference(x1, x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = lbind(shift, x3)\n    x7 = compose(x6, toivec)\n    x8 = interval(NEG_TWO, NEG_ONE, NEG_ONE)\n    x9 = mapply(x7, x8)\n    x10 = astuple(x9, x7)\n    x11 = x7(x10)\n    x12 = toindices(x11)\n    x13 = increment14(x12)\n    x14 = canvas(NEG_ONE, x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(x16, x16)\n    x18 = height(x1)\n    x19 = width(x1)\n    x20 = decrement(x18)\n    x21 = astuple(x19, x20)\n    x22 = ONE(x21)\n    x23 = width(x1)\n    x24 = halve(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = apply(tojvec, x26)\n    x28 = apply(asobject, x27)\n    x29 = lbind(shift, x15)\n    x30 = mapply(x29, x28)\n    x31 = hmirror(x30)\n    x32 = vmirror(x31)\n    x33 = objects(x32, F, F, T)\n    x34 = merge(x33)\n    x35 = paint(x16, x34)\n    x36 = astuple(x1, x19)\n    x37 = canvas(ZERO, x36)\n    x38 = asobject(x37)\n    x39 = rbind(adjacent, x38)\n    x40 = apply(x39, x32)\n    x41 ="], [1.1, "def solve_1b9db546(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_bd9f53ce(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = sfilter(x2, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = compose(hmirror, vmirror)\n    x7 = compose(vmirror, merge)\n    x8 = fork(equality, identity, x6)\n    x9 = fork(multiply, identity, height)\n    x10 = chain(x8, x9, first)\n    x11 = height(I)\n    x12 = width(I)\n    x13 = ZERO(x11)\n    x14 = multiply(x12, x13)\n    x15 = subtract(x14, TWO)\n    x16 = interval(ONE, x15, ONE)\n    x17 = colorcount(I, ZERO)\n    x18 = digitrepeat(x17, x16)\n    x19 = multiply(x18, x13)\n    x20 = subtract(x19, TWO)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = product(x16, x21)\n    x23 = multiply(x22, x13)\n    x24 = rbind(add, x23)\n    x25 = compose(invert, x24)\n    x26 = order(x22, x25)\n    x27 = apply(x25, x26)\n    x28 = size(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = mpapply(recolor, x27, x30)\n    x32 = mapply(decrement, x30)\n    x33 = decrement(x32)\n    x34 = ofcolor(I, ZERO)\n    x35 =\n    1611111466\n    6111111609\n    9111111623\n    9565159359\n    5150601141\n    6969911161\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n"], [1.1, "def solve_8684050e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = power(first, TWO)\n    x4 = power(last, TWO)\n    x5 = fork(astuple, x3, x4)\n    x6 = fork(connect, ulcorner, x5)\n    x7 = fork(difference, toindices, x6)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x7, x9)\n    x11 = sfilter(x2, x10)\n    x12 = argmax(x11, size)\n    x13 = color(x12)\n    x14 = toindices(x12)\n    x15 = fork(either, vline, hline)\n    x16 = x15(x14)\n    x17 = size(x16)\n    x18 = increment(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = product(x19, x19)\n    x21 = rbind(add, THREE)\n    x22 = rbind(interval, THREE)\n    x23 = fork(x22, x21, x44)\n    x24 = compose(x20, x23)\n    x25 = fork(connect, ulcorner, x24)\n    x26 = fork(recolor, color, x25)\n    x27 = mapply(x26, x12)\n    x28 = paint(I, x27)\n    x29 = interval(ZERO, x18, ONE)\n    x30 = pair(x29, x29)\n    x31 = apply(first, x30)\n    x32 = mapply(x27, x31)\n    x33 = paint(x28, x32)\n    x34 = interval(ZERO, x18, ONE)\n    x35 = pair(x34, x34)\n    x36 = apply(first, x35)\n    x37 = mapply(x27, x36)\n    x38 = paint(x33, x37)\n    x39 ="], [1.1, "def solve_65943cf0(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = compose(flip, x4)\n    x6 = extract(I, x5)\n    x7 = lbind(contained, THREE)\n    x8 = compose(minimum, shape)\n    x9 = matcher(x8, ONE)\n    x10 = lbind(apply, numcolors)\n    x11 = compose(x10, asobject)\n    x12 = fork(add, x3, x11)\n    x13 = compose(initset, x12)\n    x14 = fork(insert, ulcorner, toindices)\n    x15 = compose(first, x14)\n    x16 = apply(x15, x6)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = objects(x20, T, F, F)\n    x22 = compose(toivec, leftmost)\n    x23 = rbind(compose, center)\n    x24 = lbind(apply, toindices)\n    x25 = chain(x23, x24, leftmost)\n    x26 = lbind(sfilter, x21)\n    x27 = chain(size, x26, x25)\n    x28 = increment(x27)\n    x29 = double(x38)\n    x30 = interval(x28, x29, ONE)\n    x31 = apply(x25, x30)\n    x32 = interval(x29, x27, ONE)\n    x33 = lbind(multiply, x31)\n    x34 = apply(x33, x32)\n    x35 = lbind(shift, x23)\n    x36 = mapply(x35, x34)\n    x37 = fill(x20, THREE, x36)\n    x38 = index(x37, x25)\n    x39 = replace"], [1.1, "def solve_eedc2bba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = rbind(SEVEN, x8)\n    x10 = lbind(compose, x9)\n    x11 = lbind(power, I)\n    x12 = chain(x11, x10, x9)\n    x13 = compose(x12, x10)\n    x14 = lbind(apply, last)\n    x15 = chain(x14, corners, last)\n    x16 = lbind(rbind, equality)\n    x17 = fork(sfilter, x15, x15)\n    x18 = fork(compose, x17, x13)\n    x19 = lbind(lbind, astuple)\n    x20 =\n    last(x12)\n    x21 = lbind(last, x12)\n    x22 = compose(x21, x18)\n    x23 = fork( subtract, x18, x22)\n    x24 = fork(insert, x18, x23)\n    x25 = compose(last, x24)\n    x26 = compose(x19, x25)\n    x27 = fork(equality, x26, x23)\n    x28 = fork(insert, x27, x1)\n    x29 = compose(x16, x28)\n    x30 = rbind(branch, x29)\n    x31 = compose(x30, x25)\n    x32 = rbind(branch, x269)\n    x33 = compose(x32, x25)\n    x34 = chain(x33, x31, x21)\n    x35 = fork(contained, x39, x22)\n    x36 = fork(contained, x28, x23)\n    x37 = fork(contained, x36, x31)\n    x38 = fork(both, x35, x37)\n    x39"], [1.1, "def solve_f6f9897f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(equality, toindices, box)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x11)\n    x14 = compose(toindices, x11)\n    x15 = chain(first, x14, initset)\n    x16 = lbind(upscale, x13)\n    x17 = rbind(ofcolor, x1)\n    x18 = compose(x16, x17)\n    x19 = fork(combine, x18, x15)\n    x20 = x19(x1)\n    x21 = palette(x20)\n    x22 = lbind(rbind, subtract)\n    x23 = uppermost(x20)\n    x24 = rbind(colorcount, x23)\n    x25 = chain(toivec, x24, decrement)\n    x26 = matcher(x25, x21)\n    x27 = palette(I)\n    x28 = sfilter(x27, x26)\n    x29 = lbind(colorcount, I)\n    x30 = argmin(x28, x29)\n    x31 = ofcolor(I, x30)\n    x32 = ofcolor(I, x10)\n    x33 =, x31, x32)\n    x34 = ofcolor(I, x10)\n    x35 = leftmost(x34)\n    x36 = ofcolor(I, x30)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x3)\n    x39 = ofcolor(I, x30)\n    x40 = rightmost(x3)\n"], [1.1, "def solve_73f735b1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorfilter, x2)\n    x6 = chain(x5, color, x4)\n    x7 = fork(paint, identity, x6)\n    x8 = rbind(contained, x1)\n    x9 = compose(x8, first)\n    x10 = rbind(sfilter, x9)\n    x11 = lbind(rbind, compose)\n    x12 = chain(x10, x11, x8)\n    x13 = lbind(apply, last)\n    x14 = chain(x13, toindices, x12)\n    x15 = fork(sfilter, x12, x14)\n    x16 = compose(x15, x12)\n    x17 = lbind(rot90, EIGHT)\n    x18 = power(x17, TWO)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = x18(x21)\n    x23 = argmin(x61, x22)\n    x24 = argmax(x23, x18)\n    x25 = partition(x24)\n    x26 = fork(combine, vfrontier, hfrontier)\n    x27 = compose(x25, x26)\n    x28 = extract(x25, x27)\n    x29 = x28(x26)\n    x30 = x27(x29)\n    x31 = color(x3)\n    x32 = palette(I)\n    x33 = remove(x31, x32)\n    x34 = lbind(colorcount, I)\n    x35 = argmin(x34, x33)\n    x36 = first(x35)\n    x37 = last(x35)\n    x38 = x369(x36)\n    x39 = matcher(first, x37)\n    x40 = compose(flip, x"], [1.1, "def solve_9bb9450f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8db927dd(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f0ad6b35(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b4fbb646(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x17, x19)\n    x21 = shape(I)\n    x22 = canvas(x3, x21)\n    x23 = normalize(x2)\n    x24 = lbind(shift, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = divide(x25, x26)\n    x28 = downscale(x23, x27)\n    x29 = height(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(size, x30)\n    x32 = toindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = rbind(multiply, x29)\n    x35 = compose(x33, x34)\n    x36 = lbind(apply, x35)\n    x37 = lbind(lbind, shift)\n    x38 = rbind(occurrences, x22)\n    x39 = compose(x36, x38)\n    x40 = fork(mapply, x39, x36)\n    x41 = compose(x32"], [1.1, "def solve_b2e83c53(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, shape, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_b0b531dc(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_daef5183(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, EIGHT, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = toobject(x38, x22)\n    x40 =5779577(x39)\n    x"], [1.1, "def solve_bf2c3c87(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, NEG_ONE)\n    x10 = uppermost(x1)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, NEG_ONE)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)"], [1.1, "def solve_31341663(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = fgpartition(x4)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(manhattan, x7)\n    x9 = maximum(x8)\n    x10 = increment(x9)\n    x11 = interval(ONE, x10, invert)\n    x12 = lbind(shift, x6)\n    x13 = astuple(x2, x6)\n    x14 = canvas(x3, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = mapply(x12, x16)\n    x18 = fill(x14, x3, x17)\n    x19 = increment(x13)\n    x20 = width(x68)\n    x21 = increment(x20)\n    x22 = tojvec(x21)\n    x23 = tojvec(x22)\n    x24 = greater(x18, x23)\n    x25 = maximum(x24)\n    x26 = increment(x25)\n    x27 = subtract(x22, x26)\n    x28 = astuple(x27, x19)\n    x29 = canvas(x3, x28)\n    x30 = asindices(x29)\n    x31 = rbind(toobject, x19)\n    x32 = lbind(shift, x30)\n    x33 = compose(x31, x32)\n    x34 = rbind(colorcount, x3)\n    x35 = matcher(x34, TWO)\n    x36 =sfilter(x20, x35)\n    x37 = paint(x19, x36)\n    x38 = height(x37)\n    x39 = apply(first, x5)\n    x40 = increment(x39)\n    x41 = width(x37)\n    x42 = interval(ZERO, x41, x40"], [1.1, "def solve_b5521cea(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =375911021\n    x2 =7121750962\n     burned to62539\n    1807968069\n    6928222466\n    d51158662\n    \"\"\"\n    x1 =66666666(I, I)\n    x2 = palette(x1)\n    x3 = contained(x2, x1)\n    x4 = contained(x3, x2)\n    x5 = branch(x4, height, width)\n    x6 = x5(I)\n    x7 = partition(x1)\n    x8 = matcher(color, ZERO)\n    x9 = colorfilter(x7, x8)\n    x10 = difference(x7, x9)\n    x11 = extract(x10, x8)\n    x12 = other(x10, x11)\n    x13 = colorcount(x1, x12)\n    x14 = subtract(x13, TWO)\n    x15 = increment(x14)\n    x16 = canvas(ZERO, x15)\n    x17 = astuple(x13, x16)\n    x18 = canvas(ZERO, x17)\n    x19 = matcher(first, x12)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x4)\n    x24 = x22(x4)\n    x25 = x22(x2)\n    x26 = x22(x62)\n    x27 = x22(x8)\n    x28 = fork(gravitate, first, last)\n    x29 = fork(shift, x24, x28)\n    x30 = fork(multiply, x29, x23)\n    x31 = fork(add, x30, x21)\n    x32 = multiply(x31, x5)\n    x33 = shift(x15, x32)\n    x34 = merge(x15)\n    x35 = cover(x16, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x35, x36"], [1.1, "def solve_007f83d8(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(TWO, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(x1)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(ZERO, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x30, initset)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x4, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)"], [1.1, "def solve_25d4d5df(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, astuple)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_d0c7bbf2(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(matcher, x1)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, mostcolor, x3)\n    x5 = fork(sfilter, identity, x4)\n    x6 = lbind(fork, recolor)\n    x7 = lbind(x6, x5)\n    x8 = compose(x7, x5)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x5)\n    x11 = fork(rapply, x8, x10)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = intersection(x13, x2)\n    x15 = cover(I, x14)\n    x16 = palette(x15)\n    x17 = other(x16, ZERO)\n    x18 = ofcolor(x15, x17)\n    x19 = ofcolor(x15, x8)\n    x20 = intersection(x18, x19)\n    x21 = fill(x15, x17, x20)\n    x22 = ofcolor(x15, x17)\n    x23 = shape(x22)\n    x24 = canvas(ZERO, x23)\n    x25 = lbind(hmirror, x24)\n    x26 = lbind(vconcat, x22)\n    x27 = chain(x25, x26, x25)\n    x28 = compose(x27, x6)\n    x29 = lbind(hmirror, x)\n    x30 = chain(size, x29, x27)\n    x31 = matcher(x30, ZERO)\n    x32 = lbind(fork, both)\n    x33 = lbind(x32, x28)\n    x34 = compose(x33, x31)\n    x35 = lbind(fork, difference)\n    x36 = compose(x35, x31)\n    x37 = fork(x36, x34, x31)\n    x38 = apply(x37,"], [1.1, "def solve_dc7abbeb(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = connect(ORIGIN, x11)\n    x13 = astuple(x5, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = astuple(tojvec, x12)\n    x18 = frontiers(I)\n    x19 = mfilter(x18, hline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = astuple(x21, x17)\n    x23 = astuple(x21, x22)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = astuple(x27, x22)\n    x27 = shift(x25, x26)\n    x28 =887788725977(x27)\n    x29 = height(I)\n    x30 = decrement(x29)\n    x31 = toivec(x30)\n    x32 = shift(x27, x31)\n    x33 = apply(toindices, x32)\n    x34 = rbind(shift, x30)\n    x35 = compose(x34, backdrop)\n    x36 = argmax(x33, x35)\n    x37 = other(x33, x36)\n    x38 = height(I)\n    x39 = increment(x38)\n    x40 = tojvec(x39)\n    x41 = rbind(multiply, x40)\n    x42 = height(I)\n    x43 = increment(x"], [1.1, "def solve_227c28d1(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = lbind(apply, last)\n    x9 = chain(x8, x5, first)\n    x10 = rbind(sfilter, x4)\n    x11 = fork(pair, x10, identity)\n    x12 = compose(x9, size)\n    x13 = chain(x12, x5, first)\n    x14 = rbind(sfilter, x4)\n    x15 = fork(pair, x14, identity)\n    x16 = compose(x15, x7)\n    x17 = fork(sfilter, x11, x16)\n    x18 = fork(argmax, x17, x13)\n    x19 = width(I)\n    x20 =58318935r normalize(I)\n    x21 =58318935(I)\n    x22 = width(x21)\n    x23 = rbind(repeat, x22)\n    x24 = chain(lowermost, x23, x18)\n    x25 = matcher(x24, ZERO)\n    x26 = sfilter(x20, x25)\n    x27 = dmirror(x26)\n    x28 = shape(x27)\n    x29 = add(x28, x29)\n    x30 = crop(x27,ORIN, x29)\n    x31 = apply(x30, x27)\n    x32 = crop(x27, DOWN, x29)\n    x33 = apply(x32, x31)\n    x34 = crop(x27,asobject, x33)\n    x35 =apply(x34, x32)\n    x36 = apply(increment, x35)\n    x37 = apply(tojvec, x36)\n    x38 = prapply(shift, x37, x)\n    x39"], [1.1, "def solve_d7dd5804(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = downscale(I, THREE)\n    x5 = x3(x4)\n    x6 = equality(x5, TWO)\n    x7 = branch(x6, width, height)\n    x8 = x7(I)\n    x9 = astuple(ONE, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = connect(x10, x7)\n    x12 = fill(x10, EIGHT, x11)\n    x13 = rbind(ofcolor, TWO)\n    x14 = compose(lowermost, x13)\n    x15 = matcher(x14, ZERO)\n    x16 = compose(x15, x13)\n    x17 = fork(both, x13, x16)\n    x18 = extract(x11, x17)\n    x19 = x18(x18)\n    x20 = vmirror(x19)\n    x21 = objects(x20, T, F, F)\n    x22 = merge(x21)\n    x23 = cover(x20, x22)\n    x24 = apply( leftmost, x23)\n    x25 = size(x24)\n    x26 = width(x22)\n    x27 = subtract(x25, x26)\n    x28 = multiply(x27, TWO)\n    x29 = lbind(greater, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x24, x30)\n    x32 = compose(decrement, last)\n    x33 = chain(x29, x31, x32)\n    x34 = fork(greater, x30, x33)\n    x35 = decrement(x28)\n    x36 = lbind(astuple, x35)\n    x37 = lbind(shift, x22)\n    x38 = compose(x36, x37)\n    x39 = fork( compose, x35, x38)\n    x40 = decrement(x29"], [1.1, "def solve_237ab065(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_421879a0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_f0928a47(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x2)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7cb7dc6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_70bac250(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = x1(x3)\n    x5 = ulcorner(x4)\n    x6 = urcorner(x4)\n    x7 = shoot(x5, NEG_UNITY)\n    x8 = shoot(x6, UP_RIGHT)\n    x9 = combine(x7, x8)\n    x10 = intersection(x4, x9)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = extract(x10, x12)\n    x14 = mostcolor(I)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, color)\n    x17 = sfilter(x6, x16)\n    x18 = argmax(x17, size)\n    x19 = remove(x18, x17)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 = lbind(colorcount, x20)\n    x23 = argmin(x21, x22)\n    x24 = ofcolor(x20, x13)\n    x25 = ofcolor(x24, x23)\n    x26 = combine(x24, x25)\n    x27 = intersection(x24, x26)\n    x28 = mapply(neighbors, x27)\n    x29 = apply(neighbors, x28)\n    x30 = rbind(difference, x28)\n    x31 = compose(x30, toindices)\n    x32 = rbind(greater, ONE)\n    x33 = chain(x32, size, x31)\n    x34 = sfilter(x29, x33)\n    x35 = merge(x34)\n    x36 = palette(x35)\n    x37 = rbind(toobject, I)\n    x38 = apply(x37, x36)\n    x39 = rbind(colorcount, x38)\n    x40 = argmax(x38, x"], [1.1, "def solve_1034bd3e(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices27(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4"], [1.1, "def solve_cbc6ad31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(x8, identity)\n    x10 = lbind(matcher, first)\n    x11 = chain(x9, x10, x9)\n    x12 = lbind(chain, difference)\n    x13 = rbind(x12, toobject)\n    x14 = lbind(rbind, intersection)\n    x15 = compose(x14, toindices)\n    x16 = chain(x11, x13, x15)\n    x17 = lbind(contained, x1)\n    x18 = compose(x17, x16)\n    x19 = lbind(contained, x2)\n    x20 = compose(x19, x16)\n    x21 = fork(both, x18, x20)\n    x22 = fork(both, x11, x21)\n    x23 = compose(flip, x2)\n    x24 = fork(both, x23, x22)\n    x25 = fork(both, x21, x24)\n    x26 = lbind(contained, x1)\n    x27 = compose(x26, x14)\n    x28 = lbind(rbind, difference)\n    x29 = compose(x28, toindices)\n    x30 = fork(sfilter, x25, x29)\n    x31 = fork(difference, x30, toindices)\n    x32 = lbind(rbind, ZERO)\n    x33 = compose(x32, x31)\n    x34 = lbind(rbind, colorcount)\n    x35 = chain(x34, x33, x37)\n    x36 = fork(sfilter, x35, x30)\n    x37 = fork(equality, identity, x36)\n    x38 = compose"], [1.1, "def solve_230bbcb3(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =1964(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = fork(either, hline, vline)\n    x12 = x11(x10)\n    x13 = sfilter(x10, x12)\n    x14 = rbind(gravitate, x13)\n    x15 = compose(x14, initset)\n    x16 = fork(add, identity, x15)\n    x17 = fork(connect, identity, x16)\n    x18 = shape(I)\n    x19 = maximum(x18)\n    x20 = lbind(multiply, x19)\n    x21 = lbind(gravitate, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(add, identity, x22)\n    x24 = canvas(x9, x18)\n    x25 = palette(I)\n    x26 = remove(x4, x25)\n    x27 = lbind(colorcount, I)\n    x28 = argmin(x26, x27)\n    x29 = partition(I)\n    x30 = hascolor(I, x28)\n    x31 = palette(I)\n    x32 = remove(x8, x31)\n    x33 = lbind(ofcolor, I)\n    x34 = argmin(x32, x33)\n    x35 = ofcolor(I, x28)\n    x36 = ofcolor(I, x28)\n    x37 = intersection(x35, x36)\n    x38 = size(x37)\n    x39 = apply(first, x9)\n    x40 = apply(last, x9)\n    x41 = intersection(x39, x40)\n    x42"], [1.1, "def solve_2bee7eba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_dd0245dc(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_48ac1d0b(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7ad4bab(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_429c833a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = increment(x26)\n    x30 = branch(x28, x26, x29)\n    x31 = double(x30)\n    x32 = decrement(x31)\n    x33 = apply(normalize, x25)\n    x34 = interval(ZERO, x30, ONE)\n    x35 = pair(x34, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = astuple(x32, x32)\n    x38 = canvas(x1, x37)"], [1.1, "def solve_76a8d912(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, mostcolor)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmin(x4, size)\n    x6 = width(x5)\n    x7 = divide(x6, vline)\n    x8 = upscale(x3, x7)\n    x9 = shift(x8, UNITY)\n    x10 = paint(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, lrcorner)\n    x13 = paint(x10, x12)\n    x14 = normalize(x12)\n    x15 = objects(x6, T, T, T)\n    x16 = rbind(occurrences, x13)\n    x17 = compose(x16, toindices)\n    x18 = fork(laint, x17, x15)\n    x19 = normalize(x14)\n    x20 =rbind(multiply, x6)\n    x21 = apply(x20, x19)\n    x22 = rbind(apply, x21)\n    x23 = lbind(chain, x18)\n    x24 = lbind(x23, x22)\n    x25 = lbind(lbind, shift)\n    x26 = lbind(occurrences, x13)\n    x27 = fork(mapply, x26, x25)\n    x28 = compose(x27, last)\n    x29 = rbind(argmax, x28)\n    x30 = lbind(occurrences, x13)\n    x31 = fork(mapply, x30, x29)\n    x32 = compose(x31, x32)\n    x33 = fork(paint, identity, x323)\n    x34 = rbind(occurrences, x13)\n    x35 = fork(mapply, x33, x24)\n    x36 = compose(x34, x35)\n    x37 = fork(paint, x33, x36)\n    "], [1.1, "def solve_7b92f1ac(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = lbind(remove, x8)\n    x11 = chain(x10, toindices, x8)\n    x12 = chain(x11, x9, x11)\n    x13 = argmax(x9, x12)\n    x14 = rbind(contained, x13)\n    x15 = argmin(x8, x14)\n    x16 = asindices(I)\n    x17 = matcher(first, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = branch(x19, height, width)\n    x21 = informative24(x19)\n    x22 =\"\"\"\n    x23 = difference(x21, x19)\n    x24 = power(increment, TWO)\n    x25 = lbind(apply, x24)\n    x26 = lbind(fafffa47(x23)\n    x27 = lbind(fcc89999b\n    x28 = chain(x25, x26, x27)\n    x29 = x28(x4)\n    x30 = x28(x15)\n    x31 = x28(x14)\n    x32 = x29(x31)\n    x33 = x28(x20)\n    x34 = x28(x22)\n    x35 = combine(x29, x34)\n    x36 = x28(x30)\n    x37 = hconcat(x35, x36)\n    x38 = height(x27)\n    x39 =\n    x40 = divide(x38, x39)\n    x40 =fOUR(x27)\n    x41 = ofcolor(x77, x"], [1.1, "def solve_1813d2c7(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = urcorner(x30)\n    x32 =Rmirror(x31)\n    x33 = hmirror(x32)\n    x34 = NEG_UNITY(x33)\n    x35 = shoot(x31, UNITY)\n    x36 = recolor(x10, x34)\n    x37 = apply(x36, x35)\n    x38 = product(x37, x37)\n    x39 = power(x38, THREE)"], [1.1, "def solve_92e74302(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_2b8b79e7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x30)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_a971a618(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = intersection(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_cb0d2368(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = index(I, ORIGIN)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = branch(x9, x6, x4)\n    x11 = fill(x10, FOUR, x4)\n    x12 = lbind(contained, x6)\n    x13 = compose(x12, toindices)\n    x14 = fork(sfilter, x13, x11)\n    x15 = size(x1)\n    x16 = height(I)\n    x17 = width(I)\n    x18 = increment(x16)\n    x19 = astuple(x17, x18)\n    x20 = crop(I, ORIGIN, x19)\n    x21 = hmirror(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = asobject(x24)\n    x26 = vmirror(x25)\n    x27 = asobject(x26)\n    x28 = ulcorner(x27)\n    x29 = mostcolor(I)\n    x30 = lrcorner(x27)\n    x31 = index(I, x30)\n    x32 = subgrid(x31, x8)\n    x33 = asobject(x32)\n    x34 = hmirror(x33)\n    x35 = vmirror(x34)\n    x36 = asobject(x35)\n    x37 = astuple(x31, x36)\n    x38 = add(x37, x31)\n    x39 = width(I)\n    x40 = ulcorner(x36)\n    x41 = index(I, x40)\n    x42 = subtract(x40, x41)\n    x43 = add(x44, x42"], [1.1, "def solve_b5789320(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(d687bc2c\n    x5 = chain(positive, size, dedupe)\n    x6 = apply(x5, x1)\n    x7 = equality(x6, SIX)\n    x8 = branch(x7, vsplit, hsplit)\n    x9 = x8(I, TWO)\n    x10 = argmin(x9, numcolors)\n    x11 = argmax(x9, numcolors)\n    x12 = width(x11)\n    x13 = hsplit(x11, x12)\n    x14 =\n    x15 = divide(xx, x13)\n    x16 = width(x11)\n    x17 = divide(x16, x10)\n    x18 = ZERO(x17)\n    x19 = lbind(multiply, x18)\n    x20 = compose(x19, shape)\n    x21 = lbind(canvas, ZERO)\n    x22 = compose(x21, x20)\n    x23 = fork(concat, x20, x22)\n    x24 = colorfilter(x1, x12)\n    x25 = argmax(x24, x23)\n    x26 = ulcorner(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = shift(x25, x28)\n    x30 = paint(x29, x29)\n    x31 = interval(ONE, x30, ONE)\n    x32 = matcher(first, x25)\n    x33 = hfilter(x31, x32)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x22, x35)\n    x37 = fill(x30, x12, x36)\n    x38 = ofcolor(x37, x7)\n    x39 =\n    3723445279\n    x38(x"], [1.1, "def solve_9219208b(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9ef26332(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(first, last)\n    x37 = fork(equality, x35, x36)\n    x38 = sfilter(x31, x37)\n    x39 = matcher(first, ZERO)\n    x40 = compose(flip, x39)\n    x41 = fork(sfilter, x40, x39)\n    x46 = argmax(x"], [1.1, "def solve_b8b25c6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(x15, x16)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 = fork"], [1.1, "def solve_59cedf4e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(contained, F, T)\n    x14 = lbind(apply, urcorner)\n    x15 = compose(x14, x13)\n    x16 = fork(compose, x12, x15)\n    x17 = lbind(48, ZERO)\n    x18 = compose(x17, x16)\n    x19 = fork(sfilter, x15, x18)\n    x20 = fork(difference, x19, identity)\n    x21 = lbind(9chain, center)\n    x22 = lbind(x21, x20)\n    x23 = compose(x22, ulcorner)\n    x24 = chain(x2, x23, x20)\n    x25 = lbind(lbind, shift)\n    x26 = compose(x25, x23)\n    x27 = fork(mapply, x26, x24)\n    x28 = fork(mapply, x27, x26)\n    x29 = palette(I)\n    x30 =(x28, x29)\n    x31 = intersection(x40, x30)\n    x32 = first(x31)\n    x33 = other(x31, x32)\n    x34 = flip(x33)\n    x35 = dmirror(x34)\n    x36 = objects(x35, T, F, T)\n    x37 = apply(toindices, x36)\n    x38 = lbind(rbind,worldcorner)\n    x39 =666x38(x37"], [1.1, "def solve_57c319df(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_c9e8b1db(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = interval(rot180, rot180, ONE)\n    x21 = astuple(rot90, rot90)\n    x22 = astuple(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n"], [1.1, "def solve_f0ab5ef1(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2b4dd363(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x20 = compose(x24, x25)\n    x21 = fork(equality, identity, x20)\n    x22 = compose(x21, last)\n    x23 = rbind(multiply, x19)\n    x24 = rbind(divide, x19)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = compose(x26, last)\n    x28 = lbind(apply, first)\n    x29 = lbind(phrase, x8)\n    x30 = rbind(rapply, x27)\n    x31 = compose(initset, first)\n    x32 = chain(first, x30, x31)\n    x33 = compose(x28, x32)\n    x34 = extract(x15, x33"], [1.1, "def solve_4cfa3341(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, size)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(numcolors, ONE)\n    x43 ="], [1.1, "def solve_864531d4(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_7b267f73(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argmin(x23, x24)\n    x26 = ulcorner(x25)\n    x27 =652(x25, x22)\n    x28 = add(x26, x27)\n    x29 = lrcorner(x25)\n    x30 = invert(x28)\n    x31 = shift(x29, x30)\n    x32 = lefthalf(x15)\n    x33 = righthalf(x15)\n    x34 = vmirror(x33)\n    x35 = vconcat(x32, x34)\n    x36 = width(x9)\n    x37 = subtract(x35, x36)\n    x38 = tojvec(x37)\n    x39 = shift(x31, x38)\n    x40 =7(x39)\n    x41 = width(x10)\n    x42 = righthalf(x41)\n    x43"], [1.1, "def solve_679f2728(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x13, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f39bb665(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2d646e4a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = subgrid(x2, I)\n    x9 = frontiers(x8)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = size(x12)\n    x14 = repeat(x12, x13)\n    x15 = palette(x2)\n    x16 = remove(x12, x15)\n    x17 = lbind(colorcount, x16)\n    x18 = argmin(x12, x17)\n    x19 = ulcorner(x2)\n    x20 = shoot(x19, UNITY)\n    x21 = lrcorner(x2)\n    x22 = shoot(x21, NEG_UNITY)\n    x23 = urcorner(x2)\n    x24 = shoot(x23, UP_RIGHT)\n    x25 = llcorner(x2)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = combine(x20, x22)\n    x28 = combine(x24, x26)\n    x29 = combine(x27, x28)\n    x30 = branch(x12, x22, x27)\n    x31 = asindices(x30)\n    x32 = rbind(adjacent, x31)\n    x33 = argmin(x29, x32)\n    x34 = rbind(adjacent, x13)\n    x35 = apply(x34, x32)\n    x36 = vmirror(x34)\n    x37 = invert(x35)\n    x38 = apply(invert, x36)\n    x39 = pair(x37, x38)\n    x40 = shift(x39, UNITY)\n    O = mapply(last, x40)\n    return"], [1.1, "def solve_585cf2fd(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = cmirror(I)\n    x24 = h talk(x23, x22)\n    x25 = astuple(x24, x7)\n    x26 = dmirror(x25)\n    x27 = ulcorner(x25)\n    x28 = shoot(x27, UNITY)\n    x29 = shoot(x27, NEG_UNITY)\n    x30 = shoot(x27, UP_RIGHT)\n    x31 = shoot(x27, DOWN_LEFT)\n    x32 = combine(x28, x29)\n    x33 = combine(x30, x31)\n    x34 = combine(x32, x33)\n    x35 = astuple(x24, x7)\n    x36 = lbind(multiply, x35)\n    x37 = apply(x36, x34)\n    x38 = lbind(shift, x13)\n    x39 = mapply(x38, x37)\n    O = paint(I"], [1.1, "def solve_a4a81486(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = argmax(x8, size)\n    x11 = ulcorner(x9)\n    x12 = ulcorner(x10)\n    x13 = subgrid(x9, x5)\n    x14 = subgrid(x10, x5)\n    x15 = hconcat(x13, x14)\n    x16 = hconcat(x15, x5)\n    x17 = vconcat(x16, x17)\n    x18 = vconcat(x16, x19)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x7, x20)\n    x22 = paint(x21, x9)\n    x23 = solve_0dfd97113(x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x23, x4)\n    x26 = difference(x24, x25)\n    x27 = fill(x22, NEG_ONE, x26)\n    x28 = initset(x15)\n    x29 = rbind(manhattan, x28)\n    x30 = chain(even, halve, x29)\n    x31 = sfilter(x27, x30)\n    x32 = difference(x27, x31)\n    x33 = fill(x24, ONE, x32)\n    x34 = initset(x25)\n    x35 = insert(x24, x34)\n    x36 = product(x33, x35)\n    x37 = fork(connect, first, last)\n    x38 = mapply(x37, x36)\n    O"], [1.1, "def solve_769c66cb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = rbind(hconcat, x9)\n    x23 = compose(flip, x22)\n    x24 = rbind(hconcat, x10)\n    x25 = compose(flip, x24)\n    x26 = fork(combine, x23, x25)\n    x27 = fork(combine, x28, x26)\n    x28 = fork(either, vline, hline)\n    x29 = rbind(sfilter, x28)\n    x30 = rbind(difference, x76)\n    x31 = chain(size, x29, x30)\n    x32 = matcher(x31, ZERO)\n    x33 = fork(both, x26, x32)\n    x34 = extract(x15, x33)\n    x35 = x24(x34)\n    x36 = power(x22, TWO)\n    x37 = multiply(x36, x35)\n    x38 = x25(x34)\n    x39 = shift(x38, UNITY)\n    x40 = paint(x39, x37)\n"], [1.1, "def solve_5fcc6587(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(toivec, x2, vmirror)\n    x4 = x3(I)\n    x5 = partition(x4)\n    x6 = lbind(remove, ONE)\n    x7 = chain(center, first, last)\n    x8 = fork(subtract, x7, x6)\n    x9 = fork(multiply, height, width)\n    x10 = fork(equality, size, x9)\n    x11 = sfilter(x5, x10)\n    x12 = argmax(x11, numcolors)\n    x13 = remove(x12, x11)\n    x14 = corners(x12)\n    x15 = toobject(x14, I)\n    x16 = colorfilter(x15, ONE)\n    x17 = rbind(sfilter, x16)\n    x18 = argmin(x13, x17)\n    x19 = frontiers(I)\n    x20 = sfilter(x19, x18)\n    x21 = apply(ulcorner, x20)\n    x22 = size(x21)\n    x23 = equality(x22, ZERO)\n    x24 = branch(x23, hmirror, vmirror)\n    x25 = asobject(x24)\n    x26 = color(x25)\n    x27 = decrement(x22)\n    x28 = toivec(x27)\n    x29 = invert(x28)\n    x30 = insert(x27, x30)\n    x31 = backdrop(x30)\n    x32 = tojvec(x22)\n    x33 = invert(x32)\n    x34 = insert(x33, x30)\n    x35 = order(x32, x34)\n    x36 = combine(x31, x35)\n    x37 = fill(x6, x25, x36)\n    x38 = apply(x29, x35)\n    x39 = fill(x37, x24, x38)\n    x40 = asobject"], [1.1, "def solve_f06ca8d7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = argmax(x6, x10)\n    x12 = initset(x11)\n    x13 = matcher(x12, ZERO)\n    x14 = rbind(add, x6)\n    x15 = chain(flip, x13, x14)\n    x16 = fork(both, x13, x15)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x12, x17)\n    x19 = fork(add, x6, x17)\n    x20 = canvas(ZERO, THREE_BY_THREE)\n    x21 = asindices(x20)\n    x22 = toobject(x21, I)\n    x23 = mostcolor(x22)\n    x24 = uppermost(x18)\n    x25 = lbind(min, x24)\n    x26 = lbind(rbind, add)\n    x27 = chain(x25, x26, x26)\n    x28 = matcher(x27, x11)\n    x29 = initset(x18)\n    x30 = prapply(insert, x29, x28)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, x7)\n    x33 = fork(subtract, x32, x17)\n    x34 = fork(upscale, x33, x24)\n    x35 = fork(recolor, x24, x34)\n    x36 = mapply(x35, x18)\n    x37 = paint(x20, x36)\n    x38"], [1.1, "def solve_9fa912a8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4, x5)\n    x21 = compose(x19, x20)\n    x22 = lbind(sfilter, x8)\n    x23 = fork(inderer, x21, x22)\n    x24 = lbind(rbind, subtract)\n    x25 = chain(x17, x24, x23)\n    x26 = lbind(colorcount, I)\n    x27 = fork(equality, x25, x26)\n    x28 = sfilter(x18, x27)\n    x29 = fork(equality, x27, x28)\n    x30 = sfilter(x26, x29)\n    x31 = fork(paint, identity, x30)\n    x32 = lbind(rbind, add)\n    x33 = compose(x32, box)\n    x34 = fork(37940, x33, x33)\n    x35 = compose(x32, x34)\n    x36 = fork(difference, x35, x31)\n    x37 = fork(77fdfe, x35, x"], [1.1, "def solve_6ce3bf01(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = branch(x1, ZERO, THREE)\n    x2 = asobject(x1)\n    x3 = matcher(first, ZERO)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x5, x8)\n    x10 = argmax(x9, x7)\n    x11 = remove(x10, x9)\n    x12 = merge(x11)\n    x13 =32(x12)\n    x14 = apply(first, x11)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(I)\n    x20 = lbind(colorfilter, x12)\n    x21 = chain(size, x19, x20)\n    x22 = matcher(x21, ZERO)\n    x23 = colorfilter(x15, ZERO)\n    x24 = rbind( noises, x39)\n    x25 = compose(x24, outbox)\n    x26 = fork(branch, x25, outbox)\n    x27 = apply(x26, x23)\n    x28 = initset(x10)\n    x29 = insert(x13, x28)\n    x30 = backdrop(x29)\n    x31 = cover(I, x30)\n    x32 = normalize(x10)\n    x33 = shift(x32, UNITY)\n    x34 = paint(x31, x33)\n    x35 = rot90(x34)\n    x36 =normalize(x10)\n    x37 = shift(x36, UP_RIGHT)\n    x38 = paint(x35, x37)\n    x39 = rot270(x38)\n    x40 = shape(x10)\n    x41 = canvas"], [1.1, "def solve_17638a9e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_c7bd5ed4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_5d06f77c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_651e0313(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_05d8af31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_9b5ef738(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9a9553d8(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_38cb5881(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x32 = compose(x29, x30)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = lbind(apply, first)\n    x36 = rbind(sfilter, x28)\n    x37 = rbind(pair, x21)\n    x38 = chain(x35, x36, x37)\n    x39 = compose(x32, x38)\n    x40 = extract(x1, x39)\n    x41 = last(x40)\n    "], [1.1, "def solve_ce671096(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = ofcolor(x13, x9)\n    x15 = ofcolor(x13, x10)\n    x26 = subgrid(x14, x6)\n    x27 = subgrid(x15, x6)\n    x28 = palette(x16)\n    x29 = remove(x9, x28)\n    x30 = argmin(x29, x12)\n    x31 = rbind(colorcount, x30)\n    x32 = rbind(toobject, x31)\n    x33 = chain(x30, x32, initset)\n    x34 = apply(x33, x27)\n    x35 = ofcolor(x34, x10)\n    x36 = ofcolor(x34, x shoot)\n    x37 = apply(x35, x36)\n    x38 = fill(x6, x27, x37)\n    x39 = ofcolor(x38, x30)\n    x40 = ofcolor(x38, x356)\n    x41 = fill(x38, x39, x40)\n    x42 = mapply(x33, x34)\n    x43 = uppermost(x42)\n    x44 = lbind(10, x43)\n    x45 = shift(x44, NEG_UNITY)\n    x46 = lbind(greater, x43)\n    x47 = compose(x46, UP_RIGHT)\n    x48 = rbind(sfilter, x27)\n    x49 = chain(x47,"], [1.1, "def solve_57dc8aa7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = trim(I)\n    x2 =insert(ORIGIN, x1)\n    x3 = upscale(x2, TWO)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = asobject(x4)\n    x6 = toindices(x5)\n    x7 = ZERO_BY_TWO)\n    x8 = ulcorner(x6)\n    x9 = add(x8, UNITY)\n    x10 = shift(x6, x9)\n    x11 = fill(I, ZERO, x10)\n    x12 = lbind(shift, x6)\n    x13 = apply(x12, x11)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.1, "def solve_adfdbb72(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(SIX, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x3, urcorner)\n    x5 = astuple(x2, x4)\n    x6 = ofcolor(I, TWO)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = greater(x8, x9)\n    x11 = branch(x10, initset,548or487)\n    x12 = canvas(ZERO, x5)\n    x13 = compose(first, last)\n    x14 = chain(x13,951120, first)\n    x15 = lbind(contained, TWO)\n    x16 = compose(x15, first)\n    x17 = lbind(contained, THREE)\n    x18 = compose(x17, first)\n    x19 = fork(add, x16, x18)\n    x20 = fork(add, x14, x19)\n    x21 = compose(positive, size)\n    x22 = rbind(intersection, x7)\n    x23 = rbind(shoot, UP)\n    x24 = chain(x21, x22, x23)\n    x25 = sfilter(x15, x24)\n    x26 = chain(size, dedupe, first)\n    x27 = compose(positive, size)\n    x28 = lbind(compose, x27)\n    x29 = lbind(fork, intersection)\n    x30 = compose(x28, x29)\n    x31 = lbind(compose, x07)\n    x32 = compose(x31, x30)\n    x33 = fork(mapply, x26, x32)\n    x34 = fork(intersection, x33, x30)\n    x35 = mapply(x34, x25)\n    x36 = fill(I, THREE, x35)\n    O = fill(x36, EIGHT, x36)\n    return O"], [1.1, "def solve_10d54a56(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =2dc187(x2)\n    x4 = shape(x3)\n    x5 = merge(x1)\n    x6 = cover(I, x5)\n    x7 = hconcat(x6, x4)\n    x8 = hconcat(x7, x4)\n    O = vconcat(x8, x4)\n    return O"], [1.1, "def solve_7b51646f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    1 =64rot90(I)\n    x2 =64quire(x1, ONE)\n    O = replace(I, EIGHT, x2)\n    return O"], [1.1, "def solve_d377d2a7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =175(I)\n    x2 =7444(x1)\n    x3 =297(x2, box)\n    O = fill(I, FOUR, x3)\n    return O"], [1.1, "def solve_fae26e96(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = objects(x6, T, F, T)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x6, x14)\n    x16 = ofcolor(x15, x11)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = ofcolor(x20, x11)\n    x22 = ofcolor(x20, TWO)\n    x23 = pair(x21, x22)\n    x24 = mapply(first, x23)\n    x25 = mapply(last, x23)\n    x26 = fill(x15, SIX, x24)\n    O = fill(x26,060, x25)\n    return O"], [1.1, "def solve_fb5d5f60(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = compose(increment,\n    5510000000000000000\n    44709000000002b tojvec\n    0001000000001\n    2000000000000000030840\n    \"\"\"\n    x2 = increment(NINE)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = fork(multiply, tojvec, box)\n    x5 = fork(multiply, center, x4)\n    x6 = fork(add, size, x5)\n    x7 = compose(x6, toivec)\n    x8 = lbind(add, DOWN)\n    x9 = compose(x8, tojvec)\n    x10 = initset(x9)\n    x11 = lbind(insert, x10)\n    x12 = compose(backdrop, x11)\n    x13 = mapply(x12, x3)\n    x14 = fill(I, ZERO, x13)\n    O = replace(x14, SEVEN, FIVE)\n    return O"], [1.1, "def solve_f127aba6(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = extract(x8, x9)\n    x11 = lbind(sfilter, x8)\n    x12 = lbind(matcher, FOUR)\n    x13 = compose(x11, x12)\n    x14 = rbind(sfilter, x13)\n    x15 = merge(x8)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = palette(I)\n    x21 = remove(x8, x20)\n    x22 = repeat(x8, ONE)\n    x23 =263(x22)\n    x24 = ofcolor(x12, x23)\n    x25 = ofcolor(x12, x8)\n    x26 = ofcolor(x12, x1)\n    x27 = rbind(argmin, x27)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x38)\n    x32 = compose(x31, x30)\n    x33 = fork(subtract, identity, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x24)\n    x36 = ofcolor(x15, x23)\n    x37 = intersection(x36, x35)\n    x38 = mapply(neighbors, x37)\n    O = paint(x12, x38)\n    return O"], [1.1, "def solve_4a170175(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =if11(I)\n    x2 =077df224(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, x1, SEVEN)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [1.1, "def solve_a97522c1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =75dneighbors(x2)\n    x4 = insert(x2, x3)\n    O = fill(I, THREE, x4)\n    return O"], [1.1, "def solve_b4847676(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = apply(x2, x2)\n    x4 = repeat(x3, ONE)\n    x5 = puts(x4, UNITY)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = lbind(remove, NEG_ONE)\n    x9 = compose(x8, shape)\n    x10 = lbind(multiply, x1)\n    x11 = chain(x10, double, x9)\n    x12 = asindices(x5)\n    x13 = ofcolor(I, NEG_ONE)\n    x14 = difference(x13, x12)\n    x15 = partition(I)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x17, x14)\n    x19 = argmax(x18, x11)\n    x20 = other(x19, x9)\n    x21 = palette(I)\n    x22 = remove(x3, x21)\n    x23 = other(x22, x10)\n    x24 = ofcolor(I, x23)\n    x25 =39eb branch(x24, positive, decrement)\n    x26 = shoot(x22, UNITY)\n    x27 = shoot(x25, UP_RIGHT)\n    x28 = combine(x26, x27)\n    x29 = rbind(shoot, LEFT)\n    x30 = mapply(x29, x28)\n    x31 = underfill(I, x23, x30)\n    x32 = other(x31, x9)\n    x33 = ofcolor(x31, x23)\n    x34 = initset(x33)\n    x35 = cover(x32, x34)\n    x36 = height(x35)\n    x37 = equality(x36, ONE)\n    x38 = intersection(x33, x34)\n    O = fill(x37, x23, x38)\n    return O"], [1.1, "def solve_3f5a7225(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = mapply(x16, x4)\n    x21 = mapply(x12, x4)\n    x22 = combine(x20, x21)\n    x23 =0920(02)\n    x24 = lrcorner(x23)\n    x25 = height(x3)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, x278)\n    x28 = apply(x27, x25)\n    x29 = apply(x33, x28)\n    x30 = lbind(shift, x22)\n    x31 = mapply(x30, x29)\n    x32 = paint(x3, x31)\n    O = x2(x32)\n    return O"], [1.1, "def solve_ce669156(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = apply(merge, x3)\n    x5 = mapply(d12, x4)\n    x6 = portrait(x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = toindices(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x12, x16)\n    x18 = argmax(x17, lrcorner)\n    x19 = fgpartition(x88)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 =3906(x18, x21)\n    x23 = difference(x22, x18)\n    x24 = first(x23)\n    x25 = color(x18)\n    x26 =194(x24)\n    x27 = ofcolor(x88, x25)\n    x28 = leftmost(x27)\n    x29 = ofcolor(x88, x24)\n    x30 = leftmost(x29)\n    x31 = greater(x28, x30)\n    x32 = uppermost(x27)\n    x33 = neighbors(x32)\n    x34 = toobject(x33, x88)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x35, x36)\n    x38 = paint(x88, x37)\n    x39 = trim(x38)\n    O = x7(x39)\n    return O"], [1.1, "def solve_19eefb3f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = fork(subtract, last, width)\n    x7 = fork(multiply, x6, x5)\n    x8 =987(ORIGIN)\n    x9 = mapply(x7, x8)\n    x10 = subtract(SIX, x9)\n    x11 = power(outbox, x10)\n    x12 = palette(I)\n    x13 = apply(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = mfilter(x19, x16)\n    x18 = replace(I, x15, x9)\n    x19 = lbind(difference, x8)\n    x20 = chain(positive, size, x19)\n    x21 = matcher(x20, ZERO)\n    x22 = compose(first, x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x19, x23)\n    x25 = compose(maximum, x24)\n    x26 = matcher(x25, ONE)\n    x27 = sfilter(x24, x26)\n    x28 = apply(toindices, x27)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x30, x29)\n    x32 = fork(difference, x31, x23)\n    x33 = fork(shift, x27, x32)\n    x34 = mapply(x33, x27)\n    O = paint(x16, x34)\n    return O"], [1.1, "def solve_494c6f33(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(uppermost, x11)\n    x13 = order(x12, identity)\n    x14 = lbind(sfilter, x11)\n    x15 = lbind(matcher, uppermost)\n    x16 = compose(x14, x15)\n    x17 = chain(x16, x13, x16)\n    x18 = fork(85, x17, identity)\n    x19 = lbind(apply, color)\n    x20 = rbind(order, leftmost)\n    x21 = chain(x19, x20, x16)\n    x22 = fork(sfilter, x18, x21)\n    x23 = compose(x17, x22)\n    x24 = apply(x23, x13)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x21, x26)\n    x28 = multiply(TEN, TEN)\n    x29 = rbind(subtract, x28)\n    x30 = chain(x29, x27, size)\n    x31 = fork(rapply, x30, identity)\n    x32 = mapply(x31, x branch)\n    O = paint(x9, x32)\n    return O"], [1.1, "def solve_9c06eca8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = backdrop(x2)\n    x6 = cover(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(x7, ZERO)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x4)\n    x11 =353(x10)\n    x12 = palette(x11)\n    x13 = lbind(mfilter, x12)\n    x14 = rbind(toobject, x11)\n    x15 = lbind(ofcolor, x11)\n    x16 = chain(x13, x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x11)\n    O = fill(x6, x3, x18)\n    return O"], [1.1, "def solve_c91e11d0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = height(I)\n    x2 = subgrid(x1, I)\n    x3 = partition(x2)\n    x4 =multiply(x1, THREE)\n    x5 = astuple(x4, x4)\n    x6 = crop(x2, ORIGIN, x5)\n    x7 =39a8645d83733683\n    x8 =86(x6,9318669\n    8484969944\n    9810smart3ed(x8)\n    x9 = add(x1, THREE)\n    x10 = tojvec(x9)\n    x11 = height(x7)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = height(x10)\n    x15 = interval(x14, THREE, x14)\n    x16 = apply(tojvec, x15)\n    x17 = apply(asobject, x16)\n    x18 =44(x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x11)\n    O = paint(x2, x20)\n    return O"], [1.1, "def solve_35bf20ed(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = input:\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x2 = trim(I)\n    x3 = output(x2, ZERO)\n    x4 = order(x3, identity)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = size(x5)\n    x8 = interval(ZERO, x6, ONE)\n    x9 = mpapply(recolor, x8, x7)\n    O = paint(x3, x9)\n    return O"], [1.1, "def solve_708751d7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =73mirror(I)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = compose(x9, x10)\n    x12 = chain(x11, center, initset)\n    x13 = fork(gravitate, identity, x12)\n    x14 = compose(rot90, x13)\n    x15 = power(x14, FOUR)\n    x16 = fork(add, height, width)\n    x17 = fork(decrement, x16, x12)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(both, x15, x18)\n    x20 = mfilter(x3, x19)\n    O = fill(x5, FIVE, x20)\n    return O"], [1.1, "def solve_0397539c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = lbind(extract, x1)\n    x3 = chain(x2, positive, size)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(x4, urcorner)\n    x6 = compose(x4, DOWN)\n    x7 = fork(04, shape, x6)\n    x8 = chain(x5, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 =\"\"\"\n    x11 = fork(indices, x8, identity)\n    x12 = apply(x11, x1)\n    x13 = rbind(shoot, UP)\n    x14 = mapply(x13, x12)\n    x15 = underfill(I, ONE, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, ONE)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    x20 = cover(x15, x19)\n    O = paint(x20, x19)\n    return O"], [1.1, "def solve_08a6c6fb(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =795(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x3)\n    x5 = bottomhalf(x3)\n    x6 = tophalf(x2)\n    x7 = bottomhalf(x2)\n    x8 = connect(x4, x5)\n    x9 = connect(x4, x6)\n    x10 = combine(x8, x9)\n    O = leastcommon(x10)\n    return O"], [1.1, "def solve_ec5f4ef7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(multiply, height, width)\n    x2 = decrement(x1)\n    x3 =86(x2, F76)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = insert(x7, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = ofcolor(I, x11)\n    x14 = crop(I, x13, x11)\n    x15 =41(x14)\n    x16 = subgrid(x15, x5)\n    x17 = asobject(x16)\n    x18 = matcher(first, x11)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = trim(x20)\n    x22 = asobject(x21)\n    x23 = decrement(x22)\n    x24 =88 divide(x23, x12)\n    x25 = increment(x24)\n    x26 =777f25ff(I, x25)\n    x27 = asobject(x26)\n    x28 = decrement(x27)\n    x29 =88 divide(x28, x12)\n    x30 = increment(x29)\n    x31 = objects(x28, T, T, T)\n    x32 = colorfilter(x31, x11)\n    x33 = crop(x20, ORIGIN, x12)\n    x34 = valmin(x32, x33)\n    x35 = sizefilter(x32, x34)\n    x36 = recolor(x11, x34)\n    x37 = compose(flip, x28)\n    x38 = mfilter(x35, x37)\n    x39 = paint(I, x38)\n    O = subgrid(x39, x4)\n    return O"], [1.1, "def solve_cdb03031(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = compress(x7)\n    x9 = width(x8)\n    x10 = divide(x9, THREE)\n    x11 = downscale(x8, x10)\n    x12 = height(x8)\n    x13 = crop(x interval, ZERO, x12)\n    x14 = rbind(ofcolor, x5)\n    x15 = compose(x14, last)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x4, x17)\n    return O"], [1.1, "def solve_756ff3b4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(toindices, F normalize)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(intersection, x4)\n    x7 = compose(size, x6)\n    x8 = argmax(x5, x7)\n    x9 = height(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, x7, x6)\n    x12 = subtract(x11, TWO)\n    x13 = size(x8)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = output:\n    x12, x14)\n    x16 = interval(ONE, x12, ONE)\n    x17 = rbind(multiply, x15)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = subgrid(x4, x21)\n    return O"], [1.1, "def solve_ef7f753c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = lbind(toobject, I)\n    x11 = apply(x10, x9)\n    x12 = colorfilter(x11, x3)\n    x13 = combine(x12, x11)\n    x14 = toobject(x13, I)\n    x15 = difference(x4, x12)\n    x16 = apply(x11, x15)\n    x17 = rbind(manhattan, x3)\n    x18 = argmin(x16, x17)\n    x19 = mostcolor(I)\n    x20 = shape(I)\n    x21 = increment(x20)\n    x22 = canvas(x19, x21)\n    x23 = asobject(I)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x22, x24)\n    x26 = interval(ONE, FIVE, ONE)\n    x27 =\n    x28 = product(x26, x26)\n    x29 = totuple(x27)\n    x30 = apply(first, x29)\n    x31 = apply(last, x29)\n    x32 = combine(x30, x31)\n    x33 = lbind(shift, x28)\n    x34 = mapply(x33, x32)\n    O = paint(x19, x34)\n    return O"], [1.1, "def solve_fb0f0eff(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(apply, x12)\n    x14 = compose(x13, palette)\n    x15 = product(x4, x4)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 =885f761969(x16)\n    x19 =bdad(x18, x17)\n    x20 = compose(positive, size)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x22)\n    x23 = x22(x19)\n    x24 = fgpartition(I)\n    x25 = merge(x24)\n    x26 = cover(I, x25)\n    x27 = chain(x24, box, x22)\n    x28 = apply(x27, x28)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x29)\n    O = paint(x26, x30)\n    return O"], [1.1, "def solve_f5e72ac4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = mfilter(x2, hline)\n    x4 = height(x3)\n    x5 = vsplit(I, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 =975e(x6)\n    x9 = ofcolor(x6, ZERO)\n    x10 = toindices(x6)\n    x11 = combine(x10, x9)\n    x12 = fill(x6, ZERO, x11)\n    x13 = partition(x12)\n    x14 = difference(x1, x13)\n    x15 = argmax(x14, identity)\n    x16 = apply(color, x15)\n    x17 = increment(x16)\n    x18 = x17(x15)\n    x19 = shift(x15, x18)\n    x20 = shift(x19, x17)\n    x21 = fill(x12, ZERO, x20)\n    x22 = fill(x21, x8, x19)\n    x23 = combine(x13, x22)\n    x24 = mapply(hfrontier, x23)\n    x25 = fill(x24, x8, x19)\n    x26 = ofcolor(x25, x12)\n    x27 = palette(x25)\n    x28 = remove(x8, x27)\n    x29 = remove(x25, x28)\n    x30 = product(x26, x29)\n    x31 = first(x30)\n    x32 = last(x30)\n    x33 = hfrontier(x31)\n    x34 = vfrontier(x32)\n    x35 = combine(x33, x34)\n    O = fill(x35, x8, x35)\n    return O"], [1.1, "def solve_51c75ade(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = compose(decrement, width)\n    x15 =\n    x16 = vsplit(x6, TWO)\n    x17 = rbind(hsplit, TWO)\n    x18 = initset(x2)\n    x19 = lbind(insert, x18)\n    x20 = chain(insert, dedupe, x19)\n    x21 = x14(x16)\n    x22 = mapply(x21, x14)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_019c936c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirrorbind(IFApply, I)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 =000(x1, x7)\n    x9 = chain(x11, x4, x8)\n    x10 = fill(x6, EIGHT, x5)\n    O = fill(x10, TWO, x9)\n    return O"], [1.1, "def solve_01ac8d52(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = chain(flip, x2, shape)\n    x4 =5555frontier(I)\n    x5 = x2(x4)\n    x6 = lbind(shift, x5)\n    x7 = fork(recolor, x2, x6)\n    x8 = mapply(x7, x3)\n    O = paint(I, x8)\n    return O"], [1.1, "def solve_af17d3ef(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =589\n    58413\n    574698\n    569420\n    233400\n    \"\"\"\n    x2 = vmirror(I)\n    x3 = hconcat(I, x1)\n    x4 = hmirror(x2)\n    O = vconcat(x2, x4)\n    return O"], [1.1, "def solve_c71329f9(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =875(I)\n    x2 =86(I, THREE, FOUR)\n    x3 =00(x1, TWO)\n    x4 = interval(ZERO, NINE, FOUR)\n    x5 = rbind(shift, x3)\n    x6 = totuple(x4)\n    x7 = apply(x5, x6)\n    x8 = lefthalf(x1)\n    x9 = righthalf(x1)\n    x10 = palette(x8)\n    x11 = lbind(shift, x9)\n    x12 = occurrences(x8, x10)\n    x13 = mapply(x11, x12)\n    O =7555(x13)\n    return O"], [1.1, "def solve_0125051f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = helpsitter(I, T)\n    x2 =2c,022)\n    x3 = dmirror(x2)\n    x4 = papply(pair, x2, x3)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x6, x7)\n    x9 = apply(x5, x8)\n    O = subgrid(x9, I)\n    return O"], [1.1, "def solve_f9bce92e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = astuple(subgrid, x3)\n    x5 = remove(x3, x2)\n    x6 = apply(ulcorner, x5)\n    x7 = merge(x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x1)\n    x12 = decrement(x8)\n    x13 = hsplit(x11, x12)\n    x14 = rbind(ofcolor, x ZERO)\n    x15 = apply(x14, x13)\n    x16 = leastcommon(x15)\n    x17 = matcher(first, x16)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x15, x18)\n    x20 = fill(x6, TWO, x19)\n    O = x10(x20)\n    return O"], [1.1, "def solve_82ab6035(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 =555(dedupe, x3)\n    x7 = x5(x6)\n    x8 = replace(x1, THREE, x7)\n    x9 = x5(x8)\n    x10 = asobject(x9)\n    x11 = height(x10)\n    x12 = decrement(x11)\n    x13 = subtract(x12, ONE)\n    x14 = width(x10)\n    x15 = decrement(x14)\n    x16 = add(x15, THREE)\n    x17 = rbind(repeat, x9)\n    x18 = compose(x17, vmirror)\n    x19 = fork(combine, x17, x18)\n    x20 = asobject(x10)\n    x21 = matcher(first, THREE)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = fill(x8, ONE, x23)\n    x25 = trim(x24)\n    x26 = width(x25)\n    x27 = subtract(x26, DOWN)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = height(x25)\n    x32 = subtract(x31, x31)\n    x33 = toivec(x32)\n    x34 = shift(x29, x33)\n    x35 = paint(x30, x34)\n    x36 = ofcolor(x10, x3)\n    x37 = fork(connect, x29, x30)\n    x38 = fork(combine, x37, x39)\n    x39 = mapply(x38, x36)\n    O = fill(x35, x2, x39)\n    return O"], [1.1, "def solve_93eee4d2(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, THREE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = equality(x6, EIGHT)\n    x9 = switch(x6, vmirror, hmirror)\n    x10 = x9(x8)\n    x11 = x4(x10)\n    x12 = pair(x4, x11)\n    x13 = branch(x8, first, last)\n    x14 = extract(x12, x13)\n    x15 = first(x14)\n    x16 = ulcorner(x15)\n    x17 = rightmost(x15)\n    x18 = decrement(x17)\n    x19 = add(x16, x18)\n    x20 =57(x16, x19)\n    x21 = x6(x20)\n    x22 = pair(x21, x12)\n    x23 = apply(last, x22)\n    x24 = mpapply(recolor, x23, x20)\n    O = paint(x5, x24)\n    return O"], [1.1, "def solve_271bfdb6(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(O = lbind(multiply, THREE)\n    x3 = power(x2, FOUR)\n    x4 = x3(I)\n    x5 = ofcolor(x4, x1)\n    x6 = shift(x5, UNITY)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = toindices(x8)\n    x10 = shoot(x4, x9)\n    x11 = underfill(x4, x1, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = first(x12)\n    x14 = vfrontier(x13)\n    x15 = cover(x11, x5)\n    O = paint(x15, x13)\n    return O"]], "bf699163": [[0.1607843137254902, "def solve_3cfc9c7f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.1607843137254902, "def solve_1cb74a12(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.2482843137254902, "def solve_af243358(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.2482843137254902, "def solve_ffc46cf3(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.2482843137254902, "def solve_bf183830(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.30490196078431375, "def solve_2bd32f9a(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.32027505446623095, "def solve_5392da9c(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.32027505446623095, "def solve_a1d477cf(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.3215686274509804, "def solve_48a4b03e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.3215686274509804, "def solve_d3df852a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_37f26949(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_9f5a128b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_5945c8f8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3215686274509804, "def solve_cd275006(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.3215686274509804, "def solve_caa628d3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3382352941176471, "def solve_8048952c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.36851851851851847, "def solve_4ec321af(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_21192291(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_acaa78f4(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_36a436ac(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_fdba1e94(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.36851851851851847, "def solve_78b6e400(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.37411764705882355, "def solve_cab6c0d6(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.3796296296296296, "def solve_3c154fcd(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = partition(x2)\n    x4 = rbind(contained, x3)\n    x5 = chain(flip, x4, shape)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, box)\n    x8 = sfilter(x6, x7)\n    x9 = fork(multiply, height, width)\n    x10 = argmin(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.3931917211328976, "def solve_acc6396a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_cb758191(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3931917211328976, "def solve_991f77e8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.3966712532966403, "def solve_7a7313cb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x24, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_7d5ac4ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_0f143e14(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_f85106ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_66791150(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_f5e7d35f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_748c71ab(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_9d01c831(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_920e8a37(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_0dd67c96(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_acc729c5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_37c1dc45(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_57edebc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_37d3c75d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_58ddfa13(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_5847c710(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.40763616557734206, "def solve_379256b0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.41962962962962963, "def solve_695b04c8(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [0.5232709913889689, "def solve_bc7aab33(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_bc999f25(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5232709913889689, "def solve_4aacf3da(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.5361111111111111, "def solve_0fa3496b(I):\n    x1 = replace(I, FIVE, ZERO)\n    O = downscale(x1, THREE)\n    return O"], [0.5587301587301587, "def solve_8e572b86(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(x1)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.580258954008954, "def solve_6a03ff2f(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.580258954008954, "def solve_acf7ef78(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.5869256206756207, "def solve_8c472259(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = argmax(x5, size)\n    x7 = shape(x6)\n    x8 = canvas(x4, x7)\n    x9 = normalize(x6)\n    O = paint(x8, x9)\n    return O"], [0.5900055192264699, "def solve_2c70268a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.5902430555555556, "def solve_a51b2b24(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_0c691c5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5902430555555556, "def solve_e4a2a00b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.5921261574074075, "def solve_5b190dbc(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, FOUR, x21)\n    return O"], [0.5936739417989418, "def solve_779c5f07(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.6194444444444445, "def solve_52aa6171(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.6199160165858457, "def solve_51f86cd5(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.631901366607249, "def solve_5ee2ed15(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.6368028313150265, "def solve_84df100f(I):\n    O = subgrid(I, I)\n    return O"], [0.6368028313150265, "def solve_8f0b143a(I):\n    O = subgrid(I, I)\n    return O"], [0.6368028313150265, "def solve_c5ebf15c(I):\n    O = subgrid(I, I)\n    return O"], [0.6368028313150265, "def solve_c3d61afd(I):\n    x1 = subgrid(I, I)\n    x2 = ofcolor(x1, ZERO)\n    x3 = asindices(x1)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x1, ONE, x9)\n    x11 = asobject(x1)\n    O = paint(x10, x11)\n    return O"], [0.6600575299564271, "def solve_e565140f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.6696587388610415, "def solve_28b18022(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.674180469289165, "def solve_ce52c751(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.674180469289165, "def solve_e3948e19(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.674180469289165, "def solve_fb6a3538(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.6837830785199206, "def solve_3cec28bf(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_4858d724(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_d3e9539f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_2fdb5b40(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_83d97f85(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_83d2826e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_3511bc60(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_9b28c643(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_1749b26a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_8ec26013(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6837830785199206, "def solve_de4c7f9b(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6901349293372321, "def solve_c2a7b8c8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_69b37bed(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_02913bb2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_4f73f41f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = fgpartition(x6)\n    x9 = merge(x8)\n    O = paint(x6, x9)\n    return O"], [0.6901349293372321, "def solve_c7a7f8bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6901349293372321, "def solve_ebe978f3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.6946027369281046, "def solve_d1aa6bc6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.700481793212685, "def solve_090595df(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_952023cf(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_949e11ed(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_95e1f5bd(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_bec9c22f(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.700481793212685, "def solve_ee5d4af4(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.700481793212685, "def solve_995d0378(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_e57e3d16(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_093d45a4(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.700481793212685, "def solve_15e0cc19(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.700481793212685, "def solve_c5e68849(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.705324074074074, "def solve_6f902f4f(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = equality(x1, TWO)\n    x8 = shape(I)\n    x9 = decrement(x8)\n    x10 = width(I)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = branch(x7, x9, x12)\n    x14 = shape(I)\n    x15 = canvas(ZERO, x14)\n    x16 = connect(x6, x13)\n    O = fill(x15, FIVE, x16)\n    return O"], [0.7104098583877996, "def solve_f891c4a8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7121404907528761, "def solve_e3288b92(I):\n    O = trim(I)\n    return O"], [0.7134946202478152, "def solve_b6d682da(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.7167554635380722, "def solve_bb620a85(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7167554635380722, "def solve_54417fbb(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7167554635380722, "def solve_613381a9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7167554635380722, "def solve_06099666(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [0.7197420634920635, "def solve_1c371af5(I):\n    x1 = trim(I)\n    x2 = objects(x1, F, T, T)\n    x3 = argmin(x2, numcolors)\n    x4 = normalize(x3)\n    x5 = toindices(x4)\n    x6 = prapply(connect, x5, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    O = underfill(x1, NEG_ONE, x8)\n    return O"], [0.7241016188672439, "def solve_b0611800(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7241016188672439, "def solve_2d7a66f6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7275112822906941, "def solve_eea4254d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7275112822906941, "def solve_a7c745de(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.7319444444444445, "def solve_2d5ab11f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x6, ONE)\n    x8 = compose(leastcolor, merge)\n    x9 = colorfilter(x1, x4)\n    x10 = branch(x7, x8, x9)\n    x11 = branch(x7, vsplit, hsplit)\n    x12 = x11(I, TWO)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = palette(x13)\n    x16 = other(x15, x4)\n    x17 = palette(x14)\n    x18 = other(x17, x4)\n    x19 = shape(x13)\n    x20 = canvas(x8, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.7332222025846018, "def solve_a94050ab(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(I)\n    O = replace(x4, x5, x3)\n    return O"], [0.7338151265460182, "def solve_57eacd28(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.7338151265460182, "def solve_7e7a4dff(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7338151265460182, "def solve_a5917d87(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7338151265460182, "def solve_b35d6061(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7338151265460182, "def solve_818bb270(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7338151265460182, "def solve_57e90ff2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.7341722694031612, "def solve_1aa8aa90(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7347001544787553, "def solve_c6314232(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7382911070411071, "def solve_87def718(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(first, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7389341741650659, "def solve_47ff83cc(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.7400296972330871, "def solve_4f3e6051(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7400296972330871, "def solve_4a2cae9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7400296972330871, "def solve_793ec4ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7407407407407407, "def solve_bd8e8cc3(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.7411937544469493, "def solve_f742d004(I):\n    x1 = switch(I, FOUR, EIGHT)\n    x2 = switch(x1, TWO, FOUR)\n    x3 = switch(x2, ONE, FOUR)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.7432977043864142, "def solve_662408df(I):\n    x1 = ofcolor(I, TWO)\n    x2 = urcorner(x1)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = shoot(x2, DOWN_LEFT)\n    x5 = underfill(I, THREE, x3)\n    x6 = underfill(x5, ONE, x4)\n    x7 = rbind(shoot, LEFT)\n    x8 = mapply(x7, x3)\n    x9 = mapply(x7, x4)\n    x10 = underfill(x6, ONE, x9)\n    O = underfill(x10, THREE, x8)\n    return O"], [0.7433389360698277, "def solve_4c92211f(I):\n    O = rot180(I)\n    return O"], [0.7433389360698277, "def solve_1ffcec24(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, T)\n    x3 = fork(connect, ulcorner, centerofmass)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, x1, x4)\n    O = replace(x5, ZERO, THREE)\n    return O"], [0.7433389360698277, "def solve_61c15cb1(I):\n    O = rot180(I)\n    return O"], [0.7433389360698277, "def solve_1ed0f29e(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.7436574074074074, "def solve_2ef41eed(I):\n    x1 = switch(I, FIVE, EIGHT)\n    O = switch(x1, EIGHT, TWO)\n    return O"], [0.7436960789269706, "def solve_0c392024(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_641c4fad(I):\n    x1 = canvas(ZERO, TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_d7635a44(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_bd230512(I):\n    x1 = objects(I, T, T, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.7436960789269706, "def solve_716a174e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_ca25a111(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_d9a5abeb(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, FOUR, x5)\n    return O"], [0.7436960789269706, "def solve_20cfb589(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_bd397569(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_db2b3ef5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.7436960789269706, "def solve_fe14b80d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_b0bb12b6(I):\n    O = dmirror(I)\n    return O"], [0.7436960789269706, "def solve_6368fafd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.7436960789269706, "def solve_8662fe6e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_d9c1689d(I):\n    O = hmirror(I)\n    return O"], [0.7436960789269706, "def solve_6def0516(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_d35d909e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_c4d662f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_1e890bf3(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor( ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ZERO, x6)\n    return O"], [0.7436960789269706, "def solve_d1c6a0d1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_4d895346(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_1e271162(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7436960789269706, "def solve_7a6bf329(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7436960789269706, "def solve_50c95d2f(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.7436960789269706, "def solve_253b805d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_a928d1e8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.7436960789269706, "def solve_8cef8041(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_b80839e3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_cc3913f6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, THREE, x8)\n    return O"], [0.7436960789269706, "def solve_e2fd9a2f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [0.7436960789269706, "def solve_d617735a(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.7436960789269706, "def solve_ca2e63dc(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_c306676f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = subgrid(x2, I)\n    return O"], [0.7436960789269706, "def solve_2584638b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    x9 = fill(I, THREE, x8)\n    x10 = leastcolor(I)\n    O = fill(x9, x10, x2)\n    return O"], [0.7436960789269706, "def solve_c336986f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_47da62e8(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.7436960789269706, "def solve_ea8e4685(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_3a7ae0e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.7436960789269706, "def solve_07bc7bf8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_5a0a1103(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_6826cc57(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = argmax(x2, size)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x3)\n    x6 = toindices(x5)\n    x7 = subgrid(x3, x4)\n    x8 = lbind(shift, x6)\n    x9 = compose(x8, ulcorner)\n    x10 = argmax(x2, x9)\n    O = paint(x7, x10)\n    return O"], [0.7436960789269706, "def solve_fdb0acbe(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.7436960789269706, "def solve_fc85e1e8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_e0139862(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.7436960789269706, "def solve_94df2242(I):\n    O = dmirror(I)\n    return O"], [0.7436960789269706, "def solve_3bcc10c4(I):\n    x1 = fgpartition(I)\n    x2 = rbind(other, FIVE)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = mfilter(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.7436960789269706, "def solve_c209138f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.7436960789269706, "def solve_088f478e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_3ea6f7ae(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_fe4f2046(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_888867e7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_635ec628(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, tojvec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.7436960789269706, "def solve_dea0c6de(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.7436960789269706, "def solve_a676a927(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.7436960789269706, "def solve_ae731499(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7436960789269706, "def solve_a4fcfad4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.7436960789269706, "def solve_a3a308dc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.7436960789269706, "def solve_f33b236f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_ab955f5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_5b5cad0e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_8a97cf2f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.7436960789269706, "def solve_65f22565(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_da21f6d1(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [0.7436960789269706, "def solve_6f52b8e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_1e80ad71(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7436960789269706, "def solve_bf9ff8c6(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_0a800fed(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.7436960789269706, "def solve_d25ff74b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.7436960789269706, "def solve_f587dd24(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_f56a5596(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.7436960789269706, "def solve_66feb675(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_e3338a93(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.7436960789269706, "def solve_0dd0fea7(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.7436960789269706, "def solve_6eab9749(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.7436960789269706, "def solve_6b5ec5c6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7436960789269706, "def solve_7b81549e(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.7436960789269706, "def solve_12ea1016(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.7436960789269706, "def solve_78f894b0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.7440145502645503, "def solve_bc1daf90(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.7440145502645503, "def solve_fb2aaf40(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, EIGHT, x4)\n    return O"], [0.7440145502645503, "def solve_149172f1(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    O = fill(x3, EIGHT, x6)\n    return O"], [0.7440145502645503, "def solve_eb35c029(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.7456442312631633, "def solve_30cd65e1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7456442312631633, "def solve_5892fbd8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7456442312631633, "def solve_eafcc2cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.7459101546601546, "def solve_ba808568(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7459101546601546, "def solve_aa743878(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.7462998052025382, "def solve_5891b45d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, FOUR, x4)\n    return O"], [0.7472675074983992, "def solve_ca7c0ca7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_5ac41180(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_6020cdb7(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.7472675074983992, "def solve_0116f63a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_4d23bdfb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_48a20be5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_4e04410e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_37640ca1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_c47b744d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_b7ac1985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_07802807(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_34d02bd8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_7aefc0d9(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, SIX, x6)\n    return O"], [0.7472675074983992, "def solve_b4aed7d9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7472675074983992, "def solve_77938cf3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_45579b98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7472675074983992, "def solve_54f42531(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.7480334878120887, "def solve_b21e7147(I):\n    x1 = replace(I, TWO, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.7480334878120887, "def solve_bb3654f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.753110896713612, "def solve_cf3977c7(I):\n    x1 = dmirror(I)\n    x2 = ofcolor(x1, FIVE)\n    x3 = compose(even, last)\n    x4 = sfilter(x2, x3)\n    x5 = fill(x1, ZERO, x4)\n    O = cmirror(x5)\n    return O"], [0.7532198884507801, "def solve_04afbd25(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_dd66d4d8(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7532198884507801, "def solve_27604466(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.7535175074983992, "def solve_f4dc5c76(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.7579817932126849, "def solve_c47b6abd(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.7583002645502646, "def solve_a6c6d923(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.7592110873937874, "def solve_abf4e182(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = fill(x11, ZERO, x7)\n    x13 = ofcolor(x12, ZERO)\n    x14 = asindices(x12)\n    x15 = ofcolor(x12, TWO)\n    x16 = mapply(ineighbors, x15)\n    O = fill(x12, ZERO, x16)\n    return O"], [0.7615532217841134, "def solve_f2096b1e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c5de83a6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c4e09e7a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_635666e9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_c7444194(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7615532217841134, "def solve_7d9c0725(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.7675056027364944, "def solve_a1b6a9b4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x4, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x4, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x4, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.767824074074074, "def solve_fc7a1cd2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.767824074074074, "def solve_a9ea423d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.767824074074074, "def solve_a4ccf199(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.7725859788359788, "def solve_18cebbff(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [0.7732483461297021, "def solve_e1663f1d(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.7744675050279077, "def solve_fdd753a2(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, x3, x6)\n    return O"], [0.7758389360698277, "def solve_e1d87129(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_f1eccfa6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_e631ca4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_60dce097(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_92cca2ad(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_4767b213(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_7c821108(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_9020706d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_54bb6e26(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_d9ab51fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.7758389360698277, "def solve_0034d50a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [1.0, "def solve_e429b307(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(O)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [1.0, "def solve_2efc50dd(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c75443ff(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = shape(x3)\n    x5 = canvas(ZERO, x4)\n    x6 = hconcat(x3, x5)\n    x7 = palette(x6)\n    x8 = remove(ZERO, x7)\n    x9 = other(x8, FOUR)\n    x10 = ofcolor(x6, x9)\n    x11 = ofcolor(x6, FOUR)\n    x12 = fill(x5, NINE, x11)\n    x13 = mapply(vfrontier, x10)\n    x14 = mapply(hfrontier, x11)\n    x15 = fill(x12, NEG_ONE, x14)\n    x16 = fill(x15, FOUR, x13)\n    x17 = fill(x16, ZERO, x12)\n    O = fill(x17, FIVE, x16)\n    return O"], [1.0, "def solve_dc193ef5(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = mostcolor(I)\n    x9 = inbox(x7)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = matcher(first, x8)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x11, x13)\n    x15 = hfill(I, TWO, x14)\n    x16 = color(x7)\n    x17 =box(x7)\n    x18 = fill(x15, x16, x17)\n    x19 = subgrid(x15, x18)\n    x20 = asobject(x19)\n    x21 = matcher(first, x8)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x25, hsplit, vsplit)\n    x27 = x26(I, TWO)\n    x28 = shape(x27)\n    x29 = canvas(x8, x28)\n    x30 = multiply(x28, x29)\n    x31 = shift(x23, x30)\n    x32 = paint(x29, x31)\n    x33 = rbind(contained, x32)\n    x34 = sfilter(x17, x33)\n    x35 = compose(hline, vline)\n    x36 = sfilter(x14, x35)\n    x37 = subgrid(x36, x32)\n    O = paint(x37, x31)\n    return O"], [1.0, "def solve_2b697a73(I):\n    x1 = astuple(I, THREE)\n    x2 = astuple(x1, x1)\n    x3 = astuple(LEFT, UNITY)\n    x4 = astuple(NEG_UNITY, x3)\n    x5 = astuple(rot90, x4)\n    x6 = astuple(rot180, x4)\n    x7 = astuple(rot270, x4)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x10, x6)\n    O = underfill(I, ZERO, x11)\n    return O"], [1.0, "def solve_2e99ed2b(I):\n    x1 = frontiers(I)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    O = move(x2, x100, x2)\n    return O"], [1.0, "def solve_461a90fb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = add(x23, x18)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = paint(I, x26)\n    x28 = ofcolor(x27, x9)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = paint(x27, x30)\n    return O"], [1.0, "def solve_f5ff553e(I):\n    x1 = objects(I, T, F, T)\n    x2 = Tizefilter(x1, ONE)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.0, "def solve_c8bbd18c(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = ulcorner(x1)\n    x6 = toindices(x5)\n    x7 = shape(x3)\n    x8 = add(x5, x7)\n    x9 = initset(x8)\n    x10 = shift(x3, x9)\n    x11 = toindices(x10)\n    x12 = fgpartition(x2)\n    x13 = merge(x12)\n    x14 = cover(I, x13)\n    x15 = fgpartition(x2)\n    x16 = merge(x15)\n    x17 = paint(x14, x16)\n    x18 = height(x11)\n    x19 = width(x11)\n    x20 = divide(x18, x19)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = Fgpartition(x17)\n    x24 = merge(x23)\n    x25 = mostcolor(I)\n    x26 = combine(x23, x24)\n    x27 = fill(x17, x25, x26)\n    x28 = astuple(x27, x920)\n    x29 = canvas(ZERO, x28)\n    x30 = asindices(x29)\n    x31 = recolor(x25, x30)\n    x32 = lbind(shift, x31)\n    x33 = occurrences(x27, x32)\n    x34 = mapply(x33, x22)\n    O = fill(x27, x25, x34)\n    return O"], [1.0, "def solve_88cbc542(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = argmin(x2, x3)\n    x5 = colorfilter(x1, x4)\n    x6 = rbind(vmatching, x4)\n    x7 = rbind(hmatching, x4)\n    x8 = fork(either, x6, x7)\n    x9 = extract(x5, x8)\n    x10 = rbind(gravitate, x4)\n    x11 = compose(center, x10)\n    x12 = fork(add, center, x11)\n    x13 = fork(connect, x12, backdrop)\n    x14 = shape(x9)\n    x15 = maximum(x14)\n    x16 = interval(ONE, x15, ONE)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(shift, x9)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = canvas(ZERO, x4)\n    return O"], [1.0, "def solve_23d7a91f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_506ee0e1(I):\n    x1 = height(I)\n    x2 = rot90(I)\n    x3 = subtract(x1, TWO)\n    x4 = multiply(NEG_ONE, THREE)\n    x5 = tojvec(x3)\n    x6 = shift(x2, x5)\n    O = underfill(I, THREE, x6)\n    return O"], [1.0, "def solve_0f8aa01b(I):\n    x1 = initset(identity)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [1.0, "def solve_03687d0a(I):\n    x1 = lbind(apply, maximum)\n    x2 = lbind(apply, downscale)\n    x3 = chain(x1, x2, frontiers)\n    x4 = fork(positive, size, dedupe)\n    x5 = lbind(apply, shape)\n    x6 = height(I)\n    x7 = lbind(pair, I)\n    x8 = chain(x4, x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = compose(color, x8)\n    x11 = fork(both, x9, x10)\n    x12 = extract(x10, x11)\n    x13 = rbind(colorcount, x12)\n    x14 = argmin(x12, x13)\n    x15 = delta(x14)\n    x16 = astuple(x11, x10)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x15, x17)\n    x19 = mpapply(recolor, x18, x13)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_b735f956(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, NINE, ZERO)\n    x3 = colorfilter(x1, NINE)\n    x4 = mapply(d4f5)\n    x5 = fill(x2,140, x4)\n    x6 = mapply(ff805, x5)\n    O = fill(x5, ONE, x6)\n    return O"], [1.0, "def solve_e3198cc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x39, x7)\n    x11 = remove(x8, x10)\n    x22 = merge(x11)\n    x23 = color(x12)\n    x24 = color(x8)\n    x25 = combine(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, x13, x26)\n    return O"], [1.0, "def solve_d1cadab6(I):\n    x1 = mostcolor(I)\n    x2 = box(I)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [1.0, "def solve_25b615f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = add(x26, THREE)\n    x8 = connect(x7, x7)\n    O = fork(recolor, color, x8)\n    return O"], [1.0, "def solve_52edf60f(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_97ffdbba(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = fork(equality, toindices, box)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, F, F, T)\n    x6 = sfilter(x5, x4)\n    x7 = difference(x5, x6)\n    O = fill(I, FOUR, x7)\n    return O"], [1.0, "def solve_d46a2c69(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, x7)\n    x9 = x6(x8)\n    x10 = branch(x5, compress, vmirror)\n    x11 = x5(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da77fe4c(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 =outbox(x13)\n    x15 = ulcorner(x14)\n    x16 = invert(x15)\n    x17 = shift(x16, UNITY)\n    x18 = shift(x16, LEFT)\n    x19 = interval(x17, x18, ONE)\n    x20 = apply(tojvec, x19)\n    x21 = apply(vfrontier, x20)\n    x22 = mapply(x21, x2)\n    x23 = combine(x17, x17)\n    x24 = fill(x8, x1, x23)\n    x25 = fill(x24, x2, x22)\n    O = fill(x25, x23, x24)\n    return O"], [1.0, "def solve_21f49bcf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9be1488a(I):\n    x1 = lbind(adjacent, I)\n    x2 = compose(x1, size)\n    x3 = fork(both, x2, box)\n    x4 = fork(both, x3, height)\n    x5 = fork(both, x4, width)\n    x6 = fork(both, hline, vline)\n    x7 = fork(both, center, rot90)\n    x8 = fork(both, center, rot270)\n    x9 = fork(both, x5, x6)\n    x10 = fork(both, x6, x8)\n    x11 = fork(connect, lefthalf, tophalf)\n    x12 = fork(branch, x11, x10)\n    x13 = fork(x12, positive, branch)\n    x14 = branch(x13, size, x7)\n    x15 = maximum(x14)\n    x16 = rot90(I)\n    x17 = double(x16)\n    x18 = interval(ONE, x17, ONE)\n    x19 = center(I)\n    x20 = pair(x18, x19)\n    x21 = objects(x23, F, T, T)\n    x22 = rbind(add, RIGHT)\n    x23 = compose(x22, center)\n    x24 = color(x23)\n    x25 = interval(ZERO, x17, ONE)\n    x26 = rbind(add, DOWN)\n    x27 = compose(x26, x23)\n    x28 = astuple(x15, x17)\n    x29 = astuple(x24, x23)\n    x30 = combine(x28, x29)\n    x31 = rbind(shoot, UP)\n    x32 = mapply(x31, x30)\n    x33 = fill(x23, FOUR, x32)\n    x34 = subgrid(x33, x20)\n    O = trim(x34)\n    return O"], [1.0, "def solve_541837c3(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_73bd7ba7(I):\n    x1 = trim(I)\n    x2 = repeat(dedupe, x1)\n    x3 = repeat(x2, ONE)\n    x4 = compress(x3)\n    x5 = width(x4)\n    x6 = halve(x5)\n    x7 = upscale(x4, x6)\n    x8 = height(x4)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = lbind(shift, x4)\n    x12 = mapply(x11, x10)\n    O = paint(x4, x12)\n    return O"], [1.0, "def solve_307cd6bd(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = shape(I)\n    x4 = multiply(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = ofcolor(I, x2)\n    x7 = lbind(shift, x6)\n    x8 = shape(I)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x6)\n    x11 = mapply(x7, x10)\n    O = fill(x5, x2, x11)\n    return O"], [1.0, "def solve_b8608c19(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = partition(I)\n    x4 = fork(multiply, height, width)\n    x5 = argmin(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = height(I)\n    x8 = divide(x7, THREE)\n    x9 = width(I)\n    x10 = interval(THREE, x9, ONE)\n    x11 = pair(x5, x10)\n    x12 = sfilter(x11, last)\n    x13 = fork(add, first, last)\n    x14 = rbind(multiply, x8)\n    x15 = apply(x14, x12)\n    x16 = mapply(x13, x15)\n    O = fill(I, x1, x16)\n    return O"], [1.0, "def solve_6b1bba2a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_4331602b(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_736ac3e7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_d24d1a03(I):\n    x1 = astuple(TEN, TEN)\n    x2 = canvas(ZERO, x1)\n    x3 = argmin(x2, size)\n    x4 = last(x2)\n    x5 = remove(x3, x2)\n    x6 = recolor(FIVE, x5)\n    x7 = recolor(lrcorner, x5)\n    x8 = add(x7, UNITY)\n    x9 = initset(x8)\n    x10 = insert(x6, x9)\n    x11 = branch(x4, x10, x3)\n    O = canvas(ZERO, x1)\n    return O"], [1.0, "def solve_a31d55d6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = matcher(first, x22)\n    x24 =sfilter(x21, x23)\n    x25 = chain(size, dedupe, first)\n    x26 = argmax(x24, x25)\n    x27 = matcher(first, x22)\n    x28 = sfilter(x24, x27)\n    x29 = difference(x28, x26)\n    x30 =matcher(first, x22)\n    x31 = sfilter(x29, x30)\n    x32 = combine(x26, x31)\n    x33 = mapply(x15, x32)\n    x34 = fill(I, THREE, x33)\n    O = fill(x34, EIGHT, x22)\n    return O"], [1.0, "def solve_2e5054dc(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_eb863460(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_487cb3b2(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_bb497512(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_bb563887(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_6ba5084d(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = index(x4, DOWN)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = lrcorner(x6)\n    x10 = shoot(x9, NEG_UNITY)\n    x11 = llcorner(x6)\n    x12 = shoot(x11, DOWN_LEFT)\n    x13 = combine(x8, x12)\n    x14 =Rbind(shoot, xdelta)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = fill(x4, THREE, x16)\n    x18 = replace(x17, FIVE, ZERO)\n    O = x5(x18)\n    return O"], [1.0, "def solve_77fc21b4(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = lbind(colorfilter, x3)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, TWO)\n    x9 = palette(x2)\n    x10 = sfilter(x9, x8)\n    x11 = fork(equality, toindices, box)\n    x12 = rbind(contained, x5)\n    x13 = compose(x12, first)\n    x14 = rbind(contained, x10)\n    x15 = compose(x14, first)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x11, x16)\n    x18 = extract(x5, x17)\n    x19 = other(x5, x18)\n    x20 = ofcolor(x4, x19)\n    x21 = rightmost(x20)\n    x22 = manhattan(x21, x18)\n    x23 = uppermost(x20)\n    x24 = decrement(x23)\n    x25 = leftmost(x20)\n    x26 = rbind(add, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x40, x27)\n    x29 = rbind(vmatching, x20)\n    x30 = sfilter(x4, x29)\n    x31 = fork(either, vline, hline)\n    x32 = mfilter(x30, x31)\n    x33 = fill(x1, x19, x32)\n    x34 = replace(x33, x19, x5)\n    O = fill(x34, x10, x32)\n    return O"], [1.0, "def solve_56db1905(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, EIGHT, x4)\n    x6 = matcher(numcolors, ONE)\n    x7 = objects(x5, F, F, T)\n    x8 = difference(x7, x2)\n    x9 = fill(x5, TWO, x8)\n    x10 = colorfilter(x9, EIGHT)\n    x11 = rbind(adjacent, x2)\n    x12 = mfilter(x10, x11)\n    x13 = mfilter(x10, x12)\n    x14 = underfill(x9, THREE, x13)\n    x15 = rbind(adjacent, x2)\n    x16 = mfilter(x14, x15)\n    x17 = mfilter(x14, x16)\n    x18 = colorfilter(x17, TWO)\n    x19 = rbind(adjacent, x2)\n    x20 = mfilter(x18, x19)\n    x21 = mfilter(x18, x20)\n    x22 = fill(x9, THREE, x21)\n    O = replace(x22, EIGHT, ONE)\n    return O"], [1.0, "def solve_d7e0530a(I):\n    x1 = ofcolor(I, TWO)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = lbind(recolor, TWO)\n    x7 = chain(x6, x5, first)\n    x8 = chain(x5, x7, last)\n    x9 = fork(combine, first, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(multiply, first, x10)\n    x12 = compose(x4, last)\n    x13 = chain(x12, x11, x41)\n    x14 = fork(apply, x13, x11)\n    x15 = power(x14, TWO)\n    x16 = fork(difference, x9, last)\n    x17 = fork(recolor, x15, x16)\n    x18 = apply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f29eedf7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_ab3062e4(I):\n    x1 = remove(ZERO, x1)\n    x2 = astuple(x1, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = hmirror(x3)\n    x5 = vconcat(x3, x4)\n    x6 = double(x1)\n    x7 = astuple(x6, x5)\n    x8 = crop(I, DOWN, x7)\n    O = vconcat(x5, x8)\n    return O"], [1.0, "def solve_a65d5fa7(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = initset(x3)\n    x5 = cover(I, x4)\n    x6 = upscale(x5, TWO)\n    x7 = shape(x6)\n    x8 = add(x6, TWO_BY_ZERO)\n    x9 = canvas(ZERO, x8)\n    x10 = asobject(x9)\n    x11 = shift(x10, UNITY)\n    O = paint(x9, x11)\n    return O"], [1.0, "def solve_fccc23eb(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = rbind(argmin, x83750696)\n    x10 = compose(x9, subgrid)\n    x11 = apply(x10, x5)\n    x12 = mapply(x8, x11)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_76d76b54(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 =intersection(x2, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x3, I)\n    x10 = increment(x4)\n    x11 = divide(x10, FOUR)\n    x12 = x11(x9)\n    x13 = hconcat(x9, x12)\n    x14 = hconcat(x13, x5)\n    x15 = vconcat(x13, x14)\n    x16 = vconcat(x15, x5)\n    O = cellwise(x16, x7, ZERO)\n    return O"], [1.0, "def solve_5a8b3933(I):\n    x1 = subgrid(I, I)\n    x2 = astuple(ONE, THREE)\n    x3 = astuple(TWO, FOUR)\n    x4 = initset(x2)\n    x5 = insert(x3, x4)\n    x6 = insert(x1, x5)\n    x7 = prapply(connect, x6, toindices)\n    x8 =8091409464\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = x9(x7)\n    x11 = halve(x1)\n    x12 = astuple(x11, x11)\n    x13 = x9(x12)\n    x14 = height(x10)\n    x15 = decrement(x14)\n    x16 = lbind(astuple, x15)\n    x17 = apply(x16, x13)\n    x18 = ZERO(x17)\n    x19 = fill(x1, EIGHT, x18)\n    x20 = fill(x19, FOUR, x7)\n    O = fill(x20, FOUR, x10)\n    return O"], [1.0, "def solve_5f806a07(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_b8e6e30f(I):\n    x1 = astuple(287, dmirror)\n    x2 = astuple(cmirror, NEG_ONE, x1)\n    x3 = hsplit(I, x2)\n    x4 = rbind(ofcolor, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = merge(x6)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_6f0e02fa(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    O = upscale(I, x2)\n    return O"], [1.0, "def solve_94a80115(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = equality(x1, x2)\n    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x5 = branch(x3, x2, x4)\n    x6 = vconcat(I, x5)\n    O = replace(x6, ONE, TWO)\n    return O"], [1.0, "def solve_52404df0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, identity)\n    x3 = branch(x1, decrement, height)\n    x4 = x3(I)\n    x5 = astuple(ONE, x4)\n    x6 = x2(I)\n    x7 = crop(x6, ORIGIN, x5)\n    x8 = branch(x7, decrement, width)\n    x9 = x8(x4)\n    x10 = astuple(ONE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = rot90(x11)\n    x13 = hconcat(x12, x1)\n    x14 = hsplit(x13, THREE)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = objects(x11, F, T, T)\n    x18 = ofcolor(x11, ONE)\n    x19 = ofcolor(x11, TWO)\n    x20 = rbind(shoot, DOWN)\n    x21 = mapply(x20, x17)\n    x22 = rbind(shoot, UP_RIGHT)\n    x23 = mapply(x22, x19)\n    x24 = fill(x11, ONE, x21)\n    x25 = fill(x24, TWO, x23)\n    x26 = fill(x25, ONE, x25)\n    O = x2(x26)\n    return O"], [1.0, "def solve_b0001103(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = objects(x14, T, F, T)\n    x21 = other(x20, x13)\n    x22 = subgrid(x21, x15)\n    x23 = llcorner(x9)\n    x24 = urcorner(x9)\n    x25 = shoot(x28, UNITY)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = shoot(x24, UP_RIGHT)\n    x28 = combine(x26, x27)\n    O = fill(x10, x3, x28)\n    return O"], [1.0, "def solve_311956be(I):\n    x1 = mostcolor(I)\n    x2 = hconcat(I, I)\n    x3 = upscale(I, THREE)\n    x4 = asobject(x3)\n    x5 = hperiod(x4)\n    x6 = vperiod(x4)\n    x7 = hperiod(x6)\n    x8 = vperiod(x6)\n    x9 = hperiod(x8)\n    x10 = hperiod(x4)\n    x11 = hperiod(x5)\n    x12 = hperiod(x6)\n    x13 = hperiod(x5)\n    x14 = vperiod(x6)\n    x15 = hperiod(x5)\n    x16 = vperiod(x6)\n    x17 = hperiod(x5)\n    x18 = hperiod(x6)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x4)\n    x25 = mapply(x24, x23)\n    x26 = paint(I, x25)\n    x27 = occurrences(x26, x4)\n    x28 = mapply(toindices, x27)\n    O = fill(x26, x1, x28)\n    return O"], [1.0, "def solve_9cdca2ab(I):\n    x1 = asobject(I)\n    x2 = leastcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = canvas(ZERO, x11)\n    x13 = paint(x12, x10)\n    O = paint(x13, x12)\n    return O"], [1.0, "def solve_400acd80(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argtoindices(x14)\n    x26 = x24(x25)\n    x27 = ofcolor(x15, x13)\n    x28 = intersection(x26, x27)\n    x29 = rbind(contained, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x22, x30)\n    x32 = lbind(shift, x24)\n    x33 = height(x12)\n    x34 = rbind(multiply, x33)\n    x35 = chain(x32, x34, last)\n    x36 = mapply(x35, x31)\n    x37 = paint(x14, x36)\n    O = x15(x37)\n    return O"], [1.0, "def solve_4f251d09(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_6e640b67(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = combine(x4, x6)\n    x6 = shape(x2)\n    x7 = hfrontier(x6)\n    x8 = insert(x3, x7)\n    x9 = fill(I, x3, x8)\n    x10 = hmirror(x2)\n    x11 = objects(x10, F, F, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, x9)\n    x14 = paint(x9, x13)\n    x15 = normalize(x12)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x14, x17)\n    return O"], [1.0, "def solve_2c118383(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_cb4194cd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x22 = combine(x8, x9)\n    x23 = intersection(x11, x12)\n    x24 = difference(x22, x23)\n    x25 = toobject(x24, I)\n    x26 = color(x25)\n    x27 = subgrid(x9, I)\n    x28 = solve(x27, x26)\n    x29 = replace(x28, x10, x264)\n    x30 = ofcolor(x29, x27)\n    x31 = subgrid(x30, x29)\n    x32 = numbercolors(x31)\n    x33 = first(x32)\n    x34 = normalize(x33)\n    x35 = last(x32)\n    x36 = remove(x34, x32)\n    x37 = remove(x35, x32)\n    x38 = combine(x36, x37)\n    x39 = fill(x29, x27, x38)\n    x40 = ofcolor(x39, x706)\n    x41 = replace(x39, x10, x04)\n    x42 = ofcolor(x41, x727)\n    x43 = rightmost(x40)\n    x44 = equality(x43, x82)\n    x45 = branch(x44, x41, x45)\n    x46 = rbind(shoot, DOWN)\n    x47 = mapply(x46, x34)\n    x48 = difference(x47, x41)\n    O = fill(x43, x27, x48)\n    return O"], [1.0, "def solve_7713104a(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = mapply(x22, x21)\n    O = fill(x7, x18, x23)\n    return O"], [1.0, "def solve_cbf7423c(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = halve(x2)\n    x4 = rbind(shoot, UP_RIGHT)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = fork(combine, x4, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(combine, x6, x9)\n    x11 = height(I)\n    x12 = rbind(valmax, x11)\n    x13 = hmatching(x12, x1)\n    x14 = branch(x13, x11, x10)\n    x15 = extract(x14, x14)\n    x16 = subgrid(x15, I)\n    O = trim(x16)\n    return O"], [1.0, "def solve_01da4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x3, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = argmin(x11, size)\n    x13 = subgrid(x12, I)\n    x14 = llcorner(x12)\n    x15 = replace(x13, x4, ZERO)\n    x16 = replace(x15, x17, x13)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = hconcat(x17, x14)\n    x21 = hconcat(x18, x15)\n    x22 = vconcat(x20, x21)\n    x23 = vconcat(x22, x17)\n    O = vconcat(x22, x18)\n    return O"], [1.0, "def solve_eaa6aa55(I):\n    x1 = objects(I, F, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = lbind(shift, x3)\n    x5 = apply(x4, x1)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = apply(x7, x5)\n    x9 = mapply(x4, x8)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_fdfcbe93(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1,x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [1.0, "def solve_1c41ed9f(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_23f7d8ef(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_05befef2(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = switch(x1, NEG_ONE, TWO)\n    x4 = switch(x2, EIGHT, x3)\n    x5 = combine(x4, x4)\n    x6 = intersection(x5, x4)\n    x7 = hmirror(x6)\n    x8 = vmirror(x6)\n    x9 = objects(x8, T, F, T)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 =dfmirror(x6)\n    x13 = toindices(x12)\n    x14 = rbind(first, x13)\n    x15 = toindices(x14)\n    x16 = mapply(x16, x9)\n    x17 = fill(x6, EIGHT, x13)\n    x18 = fill(x17, FOUR, x15)\n    O = fill(x18, ONE, x16)\n    return O"], [1.0, "def solve_5d13204b(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(fork, maximum)\n    x6 = lbind(lbind, subgrid)\n    x7 = lbind(compose, x5)\n    x8 = chain(x7, x6, x4)\n    x9 = lbind(colorcount, I)\n    x10 = compose(x9, x8)\n    x11 = fork(equality, x8, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_4d0d0b26(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4ea1adf2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_663bbba3(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = urcorner(x2)\n    x15 = ulcorner(x3)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = shoot(x12, UP_RIGHT)\n    x18 = shoot(x13, NEG_UNITY)\n    x19 = shoot(x11, UNITY)\n    x20 = shoot(x15, DOWN_LEFT)\n    x21 = shoot(x16, UP_RIGHT)\n    x22 = fork(combine, x14, x17)\n    x23 = fork( combine, x16, x18)\n    x24 = fork(combine, x22, x23)\n    x25 = x24(x2)\n    x26 = dmirror(x25)\n    x27 = invert(x26)\n    x28 = shape(x2)\n    x29 = canvas(ZERO, x28)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = asindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = mapply(x33, x31)\n    O = paint(x39, x34)\n    return O"], [1.0, "def solve_6866a66a(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [1.0, "def solve_39f0038f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9d184417(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_44e6e0c8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_8ecafcbd(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_5cef4f22(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_dca06431(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_205c1eb7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [1.0, "def solve_37a67f0e(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = chain(invert, center, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = astuple(identity, rot90)\n    x7 = astuple(rot180, rot270)\n    x8 = combine(x6, x7)\n    x9 = argmax(x8, x4)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = combine(x4, x11)\n    x13 = urcorner(x12)\n    x14 = shoot(x13, DOWN_LEFT)\n    x15 = combine(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = mapply(x6, x12)\n    x18 = combine(x6, x17)\n    x19 = fill(I, ONE, x18)\n    O = objects(x19, T, F, T)\n    return O"], [1.0, "def solve_22d10acb(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = x1(I, TWO)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = palette(x3)\n    x6 = width(x3)\n    x7 = rbind(repeat, x6)\n    x8 = compose(x7, merge)\n    x9 = matcher(x8, ONE)\n    x10 = compose(flip, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(x11, first)\n    x13 = rbind(sfilter, x12)\n    x14 = compose(x13, first)\n    x15 = fork(combine, x12, x14)\n    x16 = fork(recolor, x12, x15)\n    x17 = mapply(x16, x5)\n    O = paint(x3, x17)\n    return O"], [1.0, "def solve_f4d7c72f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x8)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_bf67fac6(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x55(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [1.0, "def solve_fbe9c8e6(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2c7776e6(I):\n    x1 = frontiers(I)\n    x2 = matcher(color, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(I, T, T, F)\n    x13 = colorfilter(x12, x11)\n    x14 = rbind(manhattan, x13)\n    x15 = chain(even, x14, initset)\n    x16 = sfilter(x13, x15)\n    x17 = compose(man, first)\n    x18 = apply(x17, x16)\n    x19 = branch(x6, x18, x111)\n    x20 = canvas(x11, THREE_BY_THREE)\n    x21 = matcher(first, x10)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x13, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x5, x22, x25)\n    O = canvas(x26, UNITY)\n    return O"], [1.0, "def solve_1ed4b2d8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices755(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_82ac6801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = x25(x22)\n    O = fill(x14, THREE, x26)\n    return O"], [1.0, "def solve_bca5b96d(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_5ce4c359(I):\n    x1 = frontiers(I)\n    x2 = rot98(I)\n    x3 = color(x2)\n    x4 = asobject(x2)\n    x5 = hperiod(x4)\n    x6 = apply(tojvec, x5)\n    x7 = increment(x6)\n    x8 = NEG_ONE(x7)\n    x9 = lbind(shift, x4)\n    x10 = height(I)\n    x11 = lbind(multiply, x10)\n    x12 = chain(x9, x11, last)\n    x13 = apply(x12, x7)\n    x14 = paint(I, x13)\n    x15 = mapply(x7, x1)\n    O = paint(x14, x15)\n    return O"], [1.0, "def solve_22ee5453(I):\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = vmirror(x2)\n    x6 = hconcat(x44, x5)\n    O = hconcat(x6, x2)\n    return O"], [1.0, "def solve_14f20b2c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_6f1a59c9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = shift(x2, x3)\n    x5 = paint(x1, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(x5, ONE, x8)\n    return O"], [1.0, "def solve_a7dd016d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(comb28, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_78fb1eb8(I):\n    x1 = lbind(occurrences, I)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 = fork(apply, x3, x1)\n    x5 = compose(positive, size)\n    x6 = rbind(compose, x4)\n    x7 = lbind(lbind, occurrences)\n    x8 = compose(x6, x7)\n    x9 = fork(compose, x5, x8)\n    x10 = compose(x1, x9)\n    x11 = fork(ofcolor, x10, identity)\n    x12 = chain(x6, x3, x11)\n    x13 = fork(mapply, x12, x11)\n    x14 = product(x1, x1)\n    x15 = power(x13, TWO)\n    x16 = astuple(x15, x12)\n    x17 = astuple(x14, x12)\n    x18 = astuple(x16, x17)\n    x19 = hfrontier(x18)\n    O = underfill(I, SIX, x19)\n    return O"], [1.0, "def solve_b390b195(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind( occurrences, TWO)\n    x6 = chain(first, x5, numcolors)\n    x7 = compose(x6, toindices)\n    x8 = fork(sfilter, identity, x7)\n    x9 = chain(x6, asobject, x8)\n    x10 = fork(shift, x9, ulcorner)\n    x11 = mapply(x10, x4)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = pair(x14, x14)\n    x16 = mapply(x9, x15)\n    O = paint(x12, x16)\n    return O"], [1.0, "def solve_04f035af(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_adc28b62(I):\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(SIX)\n    x7 = toivec(THREE)\n    x8 = insert(x6, x7)\n    x9 = tojvec(THREE)\n    x10 = insert(x6, x9)\n    x11 = fork(combine, identity, hmirror)\n    x12 = fork(combine, identity, vmirror)\n    x13 = x11(x12)\n    x14 = x11(x12)\n    x15 = paint(x13, x14)\n    x16 = paint(x15, x13)\n    O = x10(x16)\n    return O"], [1.0, "def solve_29e8bfe4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, hline)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_0494d546(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_a8f918ef(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = repeat(I, x1)\n    x3 = astuple(TWO, FIVE)\n    x4 = interval(THREE, x3, ONE)\n    x5 = prapply(recolor, x2)\n    x6 = lbind(mapply, vfrontier)\n    x7 = compose(x6, toindices)\n    x8 = fork(combine, x7, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_161660c3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f3b3318a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(I)\n    x18 = halve(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(shift, x2)\n    x21 = compose(x19, x20)\n    x22 = compose(x11, x21)\n    x23 = fork(combine, x21, x22)\n    x24 = compose(flip, x23)\n    x25 = mapply(x24, x4)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_4916fa47(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_d4d355c3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =e509e(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.0, "def solve_61a1ac03(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fork(equality, identity, vmirror)\n    x14 = mfilter(x6, x15)\n    O = underpaint(x5, x14)\n    return O"], [1.0, "def solve_9d6bfe8c(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_0af416ba(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_1ac28fec(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = objects(x7, T, F, F)\n    x10 = palette(x9)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x13, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.0, "def solve_7e6b9c4d(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_6c71573c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_0fe00193(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d05ed9d9(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.1, "def solve_e0527c88(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = mapply(x15, x13)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x21, x16)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x34)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x34)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x34)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x34)\n    x"], [1.1, "def solve_56d62acb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = x12(x7)\n    x9 = shape(x6)\n    x10 = increment(x9)\n    x11 = multiply(x10, x5)\n    x12 = canvas(x3, x11)\n    x13 = hconcat(x12, x12)\n    x14 = hconcat(x5, x13)\n    x15 = partition(x14)\n    x16 = apply(color, x15)\n    x17 = cover(I, x16)\n    x18 = argmax(x16, width)\n    x19 = astuple(x18, ulcorner)\n    x20 = canvas(x9, x19)\n    x21 = fill(x20, NEG_ONE, x19)\n    x22 = merge(x15)\n    x23 = cover(x21, x22)\n    x24 = asindices(x23)\n    x25 = ofcolor(x14, NINE)\n    x26 = difference(x24, x25)\n    x27 = fill(x14, NEG_ONE, x26)\n    x28 = ofcolor(x27, NINE)\n    x29 = subgrid(x28, x27)\n    x30 = asindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shift)\n    x33 = compose(x31, x32)\n    x34 = fork(combine, x33, x31)\n    x35 = mapply(x34, x29)\n    x36 = fill(x27, NEG_ONE, x35)\n    x37 = shift(x31, x33)\n    x38 = toindices(x37)\n    x39 = rbind(mapply, x38)"], [1.1, "def solve_0b057963(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, colorcount)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, colorcount)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = canvas(ZERO, x34)\n    x36 = lbind(multiply, x33)\n    x377 = apply(x36, x3)\n    x38 = lbind(shift, x10)\n    x39 = mapply(x38, x37)\n    O = fill("], [1.1, "def solve_03f2bda7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(argmax, x38)\n    x40 = mapply(x39, x32)\n    x41 = ofcolor(I, x4)\n    x42 = rbind(adjacent, x41)"], [1.1, "def solve_7adda415(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =6954025dad(I):\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(cmirror, dmirror)\n    x11 = astuple(hmirror, vmirror)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = astuple(NEG_TWO, rmirror)\n    x15 = astuple(fafffa47, x14)\n    x16 = combine(x13, x15)\n    x17 =173333(x16)\n    x18 = height(I)\n    x19 = astuple(x18, hsplit)\n    x20 = canvas(x4, x19)\n    x21 =6(I)\n    x22 = subgrid(x21, x20)\n    x23 = rot90(x22)\n    x24 = width(x23)\n    x25 = rbind(repeat, x24)\n    x26 = chain(rot90, x25, hmirror)\n    x27 = matcher(x26, x23)\n    x28 = objects(x22, F, F, T)\n    x29 = sfilter(x28, x27)\n    x30 = argmax(x29, size)\n    x31 = matcher(first, x4)\n    x32 = rbind(sfilter, x31)\n    x33 = lbind(recolor, x4)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x31)\n    x36 = fork(combine, x30, x35)\n    x37 = lbind(recolor, x10)\n    x38 = rbind(sfilter, x36)\n    x"], [1.1, "def solve_6207143f(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x35, x28)\n    x37 = lbind(shift, x24)\n    x38 = mapply(x37, x36)\n    x39 = fill(x23, TWO, x38)\n"], [1.1, "def solve_48ca015c(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_2c8b5bcb(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_34c1043f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x31 = last(x28)\n    x32 = x29(I)\n    x33 = palette(I)\n    x34 = lbind(ofcolor, x33)\n    x35 = compose(normalize, x34)\n    x36 = matcher(x35, x12)\n    x37 = extract(x33, x36)\n    x38 = remove(x37, x33)\n    x39 = lbind(colorcount, x33)\n    x40 = argmin(x38, x39)\n    "], [1.1, "def solve_ab01fcf9(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_d7ecd998(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = x9(I)\n    x11 = index(x10, ORIGIN)\n    x12 = width(x10)\n    x13 = multiply(x12, x12)\n    x14 = bottomhalf(x10)\n    x15 = rbind(rapply, x14)\n    x16 = compose(first, x15)\n    x17 = chain(x13, x15, x16)\n    x18 = matcher(x17, ZERO)\n    x19 = sfilter(x11, x18)\n    x20 = merge(x19)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = fork(astuple, x21, x22)\n    x24 = initset(x13)\n    x25 = matcher(x23, x24)\n    x26 = compose(flip, x25)\n    x27 = extract(x19, x26)\n    x28 = x27(x252)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 =586(x29, x30)\n    x32 = ofcolor(x31, x11)\n    x33 = x27(x32)\n    x34 = shift(x31, x33)\n    x35 = fill(x30, TWO, x34)\n    x36 = vmirror(x35)\n    x37 = lbind(shift, x35)\n    x38 = height(x36)\n    x39 = divide(x38, x36)\n    x40 = increment(x39)\n    x41"], [1.1, "def solve_62d51063(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = difference(x1, x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = lbind(shift, x3)\n    x7 = compose(x6, toivec)\n    x8 = interval(NEG_TWO, NEG_ONE, NEG_ONE)\n    x9 = mapply(x7, x8)\n    x10 = astuple(x9, x7)\n    x11 = x7(x10)\n    x12 = toindices(x11)\n    x13 = increment14(x12)\n    x14 = canvas(NEG_ONE, x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(x16, x16)\n    x18 = height(x1)\n    x19 = width(x1)\n    x20 = decrement(x18)\n    x21 = astuple(x19, x20)\n    x22 = ONE(x21)\n    x23 = width(x1)\n    x24 = halve(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = apply(tojvec, x26)\n    x28 = apply(asobject, x27)\n    x29 = lbind(shift, x15)\n    x30 = mapply(x29, x28)\n    x31 = hmirror(x30)\n    x32 = vmirror(x31)\n    x33 = objects(x32, F, F, T)\n    x34 = merge(x33)\n    x35 = paint(x16, x34)\n    x36 = astuple(x1, x19)\n    x37 = canvas(ZERO, x36)\n    x38 = asobject(x37)\n    x39 = rbind(adjacent, x38)\n    x40 = apply(x39, x32)\n    x41 ="], [1.1, "def solve_1b9db546(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_bd9f53ce(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = sfilter(x2, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = compose(hmirror, vmirror)\n    x7 = compose(vmirror, merge)\n    x8 = fork(equality, identity, x6)\n    x9 = fork(multiply, identity, height)\n    x10 = chain(x8, x9, first)\n    x11 = height(I)\n    x12 = width(I)\n    x13 = ZERO(x11)\n    x14 = multiply(x12, x13)\n    x15 = subtract(x14, TWO)\n    x16 = interval(ONE, x15, ONE)\n    x17 = colorcount(I, ZERO)\n    x18 = digitrepeat(x17, x16)\n    x19 = multiply(x18, x13)\n    x20 = subtract(x19, TWO)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = product(x16, x21)\n    x23 = multiply(x22, x13)\n    x24 = rbind(add, x23)\n    x25 = compose(invert, x24)\n    x26 = order(x22, x25)\n    x27 = apply(x25, x26)\n    x28 = size(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = mpapply(recolor, x27, x30)\n    x32 = mapply(decrement, x30)\n    x33 = decrement(x32)\n    x34 = ofcolor(I, ZERO)\n    x35 =\n    1611111466\n    6111111609\n    9111111623\n    9565159359\n    5150601141\n    6969911161\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n"], [1.1, "def solve_8684050e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = power(first, TWO)\n    x4 = power(last, TWO)\n    x5 = fork(astuple, x3, x4)\n    x6 = fork(connect, ulcorner, x5)\n    x7 = fork(difference, toindices, x6)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x7, x9)\n    x11 = sfilter(x2, x10)\n    x12 = argmax(x11, size)\n    x13 = color(x12)\n    x14 = toindices(x12)\n    x15 = fork(either, vline, hline)\n    x16 = x15(x14)\n    x17 = size(x16)\n    x18 = increment(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = product(x19, x19)\n    x21 = rbind(add, THREE)\n    x22 = rbind(interval, THREE)\n    x23 = fork(x22, x21, x44)\n    x24 = compose(x20, x23)\n    x25 = fork(connect, ulcorner, x24)\n    x26 = fork(recolor, color, x25)\n    x27 = mapply(x26, x12)\n    x28 = paint(I, x27)\n    x29 = interval(ZERO, x18, ONE)\n    x30 = pair(x29, x29)\n    x31 = apply(first, x30)\n    x32 = mapply(x27, x31)\n    x33 = paint(x28, x32)\n    x34 = interval(ZERO, x18, ONE)\n    x35 = pair(x34, x34)\n    x36 = apply(first, x35)\n    x37 = mapply(x27, x36)\n    x38 = paint(x33, x37)\n    x39 ="], [1.1, "def solve_65943cf0(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = compose(flip, x4)\n    x6 = extract(I, x5)\n    x7 = lbind(contained, THREE)\n    x8 = compose(minimum, shape)\n    x9 = matcher(x8, ONE)\n    x10 = lbind(apply, numcolors)\n    x11 = compose(x10, asobject)\n    x12 = fork(add, x3, x11)\n    x13 = compose(initset, x12)\n    x14 = fork(insert, ulcorner, toindices)\n    x15 = compose(first, x14)\n    x16 = apply(x15, x6)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = objects(x20, T, F, F)\n    x22 = compose(toivec, leftmost)\n    x23 = rbind(compose, center)\n    x24 = lbind(apply, toindices)\n    x25 = chain(x23, x24, leftmost)\n    x26 = lbind(sfilter, x21)\n    x27 = chain(size, x26, x25)\n    x28 = increment(x27)\n    x29 = double(x38)\n    x30 = interval(x28, x29, ONE)\n    x31 = apply(x25, x30)\n    x32 = interval(x29, x27, ONE)\n    x33 = lbind(multiply, x31)\n    x34 = apply(x33, x32)\n    x35 = lbind(shift, x23)\n    x36 = mapply(x35, x34)\n    x37 = fill(x20, THREE, x36)\n    x38 = index(x37, x25)\n    x39 = replace"], [1.1, "def solve_eedc2bba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = rbind(SEVEN, x8)\n    x10 = lbind(compose, x9)\n    x11 = lbind(power, I)\n    x12 = chain(x11, x10, x9)\n    x13 = compose(x12, x10)\n    x14 = lbind(apply, last)\n    x15 = chain(x14, corners, last)\n    x16 = lbind(rbind, equality)\n    x17 = fork(sfilter, x15, x15)\n    x18 = fork(compose, x17, x13)\n    x19 = lbind(lbind, astuple)\n    x20 =\n    last(x12)\n    x21 = lbind(last, x12)\n    x22 = compose(x21, x18)\n    x23 = fork( subtract, x18, x22)\n    x24 = fork(insert, x18, x23)\n    x25 = compose(last, x24)\n    x26 = compose(x19, x25)\n    x27 = fork(equality, x26, x23)\n    x28 = fork(insert, x27, x1)\n    x29 = compose(x16, x28)\n    x30 = rbind(branch, x29)\n    x31 = compose(x30, x25)\n    x32 = rbind(branch, x269)\n    x33 = compose(x32, x25)\n    x34 = chain(x33, x31, x21)\n    x35 = fork(contained, x39, x22)\n    x36 = fork(contained, x28, x23)\n    x37 = fork(contained, x36, x31)\n    x38 = fork(both, x35, x37)\n    x39"], [1.1, "def solve_f6f9897f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(equality, toindices, box)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x11)\n    x14 = compose(toindices, x11)\n    x15 = chain(first, x14, initset)\n    x16 = lbind(upscale, x13)\n    x17 = rbind(ofcolor, x1)\n    x18 = compose(x16, x17)\n    x19 = fork(combine, x18, x15)\n    x20 = x19(x1)\n    x21 = palette(x20)\n    x22 = lbind(rbind, subtract)\n    x23 = uppermost(x20)\n    x24 = rbind(colorcount, x23)\n    x25 = chain(toivec, x24, decrement)\n    x26 = matcher(x25, x21)\n    x27 = palette(I)\n    x28 = sfilter(x27, x26)\n    x29 = lbind(colorcount, I)\n    x30 = argmin(x28, x29)\n    x31 = ofcolor(I, x30)\n    x32 = ofcolor(I, x10)\n    x33 =, x31, x32)\n    x34 = ofcolor(I, x10)\n    x35 = leftmost(x34)\n    x36 = ofcolor(I, x30)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x3)\n    x39 = ofcolor(I, x30)\n    x40 = rightmost(x3)\n"], [1.1, "def solve_73f735b1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorfilter, x2)\n    x6 = chain(x5, color, x4)\n    x7 = fork(paint, identity, x6)\n    x8 = rbind(contained, x1)\n    x9 = compose(x8, first)\n    x10 = rbind(sfilter, x9)\n    x11 = lbind(rbind, compose)\n    x12 = chain(x10, x11, x8)\n    x13 = lbind(apply, last)\n    x14 = chain(x13, toindices, x12)\n    x15 = fork(sfilter, x12, x14)\n    x16 = compose(x15, x12)\n    x17 = lbind(rot90, EIGHT)\n    x18 = power(x17, TWO)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = x18(x21)\n    x23 = argmin(x61, x22)\n    x24 = argmax(x23, x18)\n    x25 = partition(x24)\n    x26 = fork(combine, vfrontier, hfrontier)\n    x27 = compose(x25, x26)\n    x28 = extract(x25, x27)\n    x29 = x28(x26)\n    x30 = x27(x29)\n    x31 = color(x3)\n    x32 = palette(I)\n    x33 = remove(x31, x32)\n    x34 = lbind(colorcount, I)\n    x35 = argmin(x34, x33)\n    x36 = first(x35)\n    x37 = last(x35)\n    x38 = x369(x36)\n    x39 = matcher(first, x37)\n    x40 = compose(flip, x"], [1.1, "def solve_9bb9450f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8db927dd(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f0ad6b35(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b4fbb646(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x17, x19)\n    x21 = shape(I)\n    x22 = canvas(x3, x21)\n    x23 = normalize(x2)\n    x24 = lbind(shift, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = divide(x25, x26)\n    x28 = downscale(x23, x27)\n    x29 = height(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(size, x30)\n    x32 = toindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = rbind(multiply, x29)\n    x35 = compose(x33, x34)\n    x36 = lbind(apply, x35)\n    x37 = lbind(lbind, shift)\n    x38 = rbind(occurrences, x22)\n    x39 = compose(x36, x38)\n    x40 = fork(mapply, x39, x36)\n    x41 = compose(x32"], [1.1, "def solve_b2e83c53(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, shape, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_b0b531dc(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_daef5183(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, EIGHT, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = toobject(x38, x22)\n    x40 =5779577(x39)\n    x"], [1.1, "def solve_bf2c3c87(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, NEG_ONE)\n    x10 = uppermost(x1)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, NEG_ONE)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)"], [1.1, "def solve_31341663(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = fgpartition(x4)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(manhattan, x7)\n    x9 = maximum(x8)\n    x10 = increment(x9)\n    x11 = interval(ONE, x10, invert)\n    x12 = lbind(shift, x6)\n    x13 = astuple(x2, x6)\n    x14 = canvas(x3, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = mapply(x12, x16)\n    x18 = fill(x14, x3, x17)\n    x19 = increment(x13)\n    x20 = width(x68)\n    x21 = increment(x20)\n    x22 = tojvec(x21)\n    x23 = tojvec(x22)\n    x24 = greater(x18, x23)\n    x25 = maximum(x24)\n    x26 = increment(x25)\n    x27 = subtract(x22, x26)\n    x28 = astuple(x27, x19)\n    x29 = canvas(x3, x28)\n    x30 = asindices(x29)\n    x31 = rbind(toobject, x19)\n    x32 = lbind(shift, x30)\n    x33 = compose(x31, x32)\n    x34 = rbind(colorcount, x3)\n    x35 = matcher(x34, TWO)\n    x36 =sfilter(x20, x35)\n    x37 = paint(x19, x36)\n    x38 = height(x37)\n    x39 = apply(first, x5)\n    x40 = increment(x39)\n    x41 = width(x37)\n    x42 = interval(ZERO, x41, x40"], [1.1, "def solve_b5521cea(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =375911021\n    x2 =7121750962\n     burned to62539\n    1807968069\n    6928222466\n    d51158662\n    \"\"\"\n    x1 =66666666(I, I)\n    x2 = palette(x1)\n    x3 = contained(x2, x1)\n    x4 = contained(x3, x2)\n    x5 = branch(x4, height, width)\n    x6 = x5(I)\n    x7 = partition(x1)\n    x8 = matcher(color, ZERO)\n    x9 = colorfilter(x7, x8)\n    x10 = difference(x7, x9)\n    x11 = extract(x10, x8)\n    x12 = other(x10, x11)\n    x13 = colorcount(x1, x12)\n    x14 = subtract(x13, TWO)\n    x15 = increment(x14)\n    x16 = canvas(ZERO, x15)\n    x17 = astuple(x13, x16)\n    x18 = canvas(ZERO, x17)\n    x19 = matcher(first, x12)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x4)\n    x24 = x22(x4)\n    x25 = x22(x2)\n    x26 = x22(x62)\n    x27 = x22(x8)\n    x28 = fork(gravitate, first, last)\n    x29 = fork(shift, x24, x28)\n    x30 = fork(multiply, x29, x23)\n    x31 = fork(add, x30, x21)\n    x32 = multiply(x31, x5)\n    x33 = shift(x15, x32)\n    x34 = merge(x15)\n    x35 = cover(x16, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x35, x36"], [1.1, "def solve_007f83d8(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(TWO, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(x1)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(ZERO, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x30, initset)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x4, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)"], [1.1, "def solve_25d4d5df(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, astuple)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_d0c7bbf2(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(matcher, x1)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, mostcolor, x3)\n    x5 = fork(sfilter, identity, x4)\n    x6 = lbind(fork, recolor)\n    x7 = lbind(x6, x5)\n    x8 = compose(x7, x5)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x5)\n    x11 = fork(rapply, x8, x10)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = intersection(x13, x2)\n    x15 = cover(I, x14)\n    x16 = palette(x15)\n    x17 = other(x16, ZERO)\n    x18 = ofcolor(x15, x17)\n    x19 = ofcolor(x15, x8)\n    x20 = intersection(x18, x19)\n    x21 = fill(x15, x17, x20)\n    x22 = ofcolor(x15, x17)\n    x23 = shape(x22)\n    x24 = canvas(ZERO, x23)\n    x25 = lbind(hmirror, x24)\n    x26 = lbind(vconcat, x22)\n    x27 = chain(x25, x26, x25)\n    x28 = compose(x27, x6)\n    x29 = lbind(hmirror, x)\n    x30 = chain(size, x29, x27)\n    x31 = matcher(x30, ZERO)\n    x32 = lbind(fork, both)\n    x33 = lbind(x32, x28)\n    x34 = compose(x33, x31)\n    x35 = lbind(fork, difference)\n    x36 = compose(x35, x31)\n    x37 = fork(x36, x34, x31)\n    x38 = apply(x37,"], [1.1, "def solve_dc7abbeb(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = connect(ORIGIN, x11)\n    x13 = astuple(x5, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = astuple(tojvec, x12)\n    x18 = frontiers(I)\n    x19 = mfilter(x18, hline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = astuple(x21, x17)\n    x23 = astuple(x21, x22)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = astuple(x27, x22)\n    x27 = shift(x25, x26)\n    x28 =887788725977(x27)\n    x29 = height(I)\n    x30 = decrement(x29)\n    x31 = toivec(x30)\n    x32 = shift(x27, x31)\n    x33 = apply(toindices, x32)\n    x34 = rbind(shift, x30)\n    x35 = compose(x34, backdrop)\n    x36 = argmax(x33, x35)\n    x37 = other(x33, x36)\n    x38 = height(I)\n    x39 = increment(x38)\n    x40 = tojvec(x39)\n    x41 = rbind(multiply, x40)\n    x42 = height(I)\n    x43 = increment(x"], [1.1, "def solve_227c28d1(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = lbind(apply, last)\n    x9 = chain(x8, x5, first)\n    x10 = rbind(sfilter, x4)\n    x11 = fork(pair, x10, identity)\n    x12 = compose(x9, size)\n    x13 = chain(x12, x5, first)\n    x14 = rbind(sfilter, x4)\n    x15 = fork(pair, x14, identity)\n    x16 = compose(x15, x7)\n    x17 = fork(sfilter, x11, x16)\n    x18 = fork(argmax, x17, x13)\n    x19 = width(I)\n    x20 =58318935r normalize(I)\n    x21 =58318935(I)\n    x22 = width(x21)\n    x23 = rbind(repeat, x22)\n    x24 = chain(lowermost, x23, x18)\n    x25 = matcher(x24, ZERO)\n    x26 = sfilter(x20, x25)\n    x27 = dmirror(x26)\n    x28 = shape(x27)\n    x29 = add(x28, x29)\n    x30 = crop(x27,ORIN, x29)\n    x31 = apply(x30, x27)\n    x32 = crop(x27, DOWN, x29)\n    x33 = apply(x32, x31)\n    x34 = crop(x27,asobject, x33)\n    x35 =apply(x34, x32)\n    x36 = apply(increment, x35)\n    x37 = apply(tojvec, x36)\n    x38 = prapply(shift, x37, x)\n    x39"], [1.1, "def solve_d7dd5804(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = downscale(I, THREE)\n    x5 = x3(x4)\n    x6 = equality(x5, TWO)\n    x7 = branch(x6, width, height)\n    x8 = x7(I)\n    x9 = astuple(ONE, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = connect(x10, x7)\n    x12 = fill(x10, EIGHT, x11)\n    x13 = rbind(ofcolor, TWO)\n    x14 = compose(lowermost, x13)\n    x15 = matcher(x14, ZERO)\n    x16 = compose(x15, x13)\n    x17 = fork(both, x13, x16)\n    x18 = extract(x11, x17)\n    x19 = x18(x18)\n    x20 = vmirror(x19)\n    x21 = objects(x20, T, F, F)\n    x22 = merge(x21)\n    x23 = cover(x20, x22)\n    x24 = apply( leftmost, x23)\n    x25 = size(x24)\n    x26 = width(x22)\n    x27 = subtract(x25, x26)\n    x28 = multiply(x27, TWO)\n    x29 = lbind(greater, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x24, x30)\n    x32 = compose(decrement, last)\n    x33 = chain(x29, x31, x32)\n    x34 = fork(greater, x30, x33)\n    x35 = decrement(x28)\n    x36 = lbind(astuple, x35)\n    x37 = lbind(shift, x22)\n    x38 = compose(x36, x37)\n    x39 = fork( compose, x35, x38)\n    x40 = decrement(x29"], [1.1, "def solve_237ab065(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_421879a0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_f0928a47(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x2)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7cb7dc6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_70bac250(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = x1(x3)\n    x5 = ulcorner(x4)\n    x6 = urcorner(x4)\n    x7 = shoot(x5, NEG_UNITY)\n    x8 = shoot(x6, UP_RIGHT)\n    x9 = combine(x7, x8)\n    x10 = intersection(x4, x9)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = extract(x10, x12)\n    x14 = mostcolor(I)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, color)\n    x17 = sfilter(x6, x16)\n    x18 = argmax(x17, size)\n    x19 = remove(x18, x17)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 = lbind(colorcount, x20)\n    x23 = argmin(x21, x22)\n    x24 = ofcolor(x20, x13)\n    x25 = ofcolor(x24, x23)\n    x26 = combine(x24, x25)\n    x27 = intersection(x24, x26)\n    x28 = mapply(neighbors, x27)\n    x29 = apply(neighbors, x28)\n    x30 = rbind(difference, x28)\n    x31 = compose(x30, toindices)\n    x32 = rbind(greater, ONE)\n    x33 = chain(x32, size, x31)\n    x34 = sfilter(x29, x33)\n    x35 = merge(x34)\n    x36 = palette(x35)\n    x37 = rbind(toobject, I)\n    x38 = apply(x37, x36)\n    x39 = rbind(colorcount, x38)\n    x40 = argmax(x38, x"], [1.1, "def solve_1034bd3e(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices27(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4"], [1.1, "def solve_cbc6ad31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(x8, identity)\n    x10 = lbind(matcher, first)\n    x11 = chain(x9, x10, x9)\n    x12 = lbind(chain, difference)\n    x13 = rbind(x12, toobject)\n    x14 = lbind(rbind, intersection)\n    x15 = compose(x14, toindices)\n    x16 = chain(x11, x13, x15)\n    x17 = lbind(contained, x1)\n    x18 = compose(x17, x16)\n    x19 = lbind(contained, x2)\n    x20 = compose(x19, x16)\n    x21 = fork(both, x18, x20)\n    x22 = fork(both, x11, x21)\n    x23 = compose(flip, x2)\n    x24 = fork(both, x23, x22)\n    x25 = fork(both, x21, x24)\n    x26 = lbind(contained, x1)\n    x27 = compose(x26, x14)\n    x28 = lbind(rbind, difference)\n    x29 = compose(x28, toindices)\n    x30 = fork(sfilter, x25, x29)\n    x31 = fork(difference, x30, toindices)\n    x32 = lbind(rbind, ZERO)\n    x33 = compose(x32, x31)\n    x34 = lbind(rbind, colorcount)\n    x35 = chain(x34, x33, x37)\n    x36 = fork(sfilter, x35, x30)\n    x37 = fork(equality, identity, x36)\n    x38 = compose"], [1.1, "def solve_230bbcb3(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =1964(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = fork(either, hline, vline)\n    x12 = x11(x10)\n    x13 = sfilter(x10, x12)\n    x14 = rbind(gravitate, x13)\n    x15 = compose(x14, initset)\n    x16 = fork(add, identity, x15)\n    x17 = fork(connect, identity, x16)\n    x18 = shape(I)\n    x19 = maximum(x18)\n    x20 = lbind(multiply, x19)\n    x21 = lbind(gravitate, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(add, identity, x22)\n    x24 = canvas(x9, x18)\n    x25 = palette(I)\n    x26 = remove(x4, x25)\n    x27 = lbind(colorcount, I)\n    x28 = argmin(x26, x27)\n    x29 = partition(I)\n    x30 = hascolor(I, x28)\n    x31 = palette(I)\n    x32 = remove(x8, x31)\n    x33 = lbind(ofcolor, I)\n    x34 = argmin(x32, x33)\n    x35 = ofcolor(I, x28)\n    x36 = ofcolor(I, x28)\n    x37 = intersection(x35, x36)\n    x38 = size(x37)\n    x39 = apply(first, x9)\n    x40 = apply(last, x9)\n    x41 = intersection(x39, x40)\n    x42"], [1.1, "def solve_2bee7eba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_dd0245dc(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_48ac1d0b(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7ad4bab(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_429c833a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = increment(x26)\n    x30 = branch(x28, x26, x29)\n    x31 = double(x30)\n    x32 = decrement(x31)\n    x33 = apply(normalize, x25)\n    x34 = interval(ZERO, x30, ONE)\n    x35 = pair(x34, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = astuple(x32, x32)\n    x38 = canvas(x1, x37)"], [1.1, "def solve_76a8d912(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, mostcolor)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmin(x4, size)\n    x6 = width(x5)\n    x7 = divide(x6, vline)\n    x8 = upscale(x3, x7)\n    x9 = shift(x8, UNITY)\n    x10 = paint(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, lrcorner)\n    x13 = paint(x10, x12)\n    x14 = normalize(x12)\n    x15 = objects(x6, T, T, T)\n    x16 = rbind(occurrences, x13)\n    x17 = compose(x16, toindices)\n    x18 = fork(laint, x17, x15)\n    x19 = normalize(x14)\n    x20 =rbind(multiply, x6)\n    x21 = apply(x20, x19)\n    x22 = rbind(apply, x21)\n    x23 = lbind(chain, x18)\n    x24 = lbind(x23, x22)\n    x25 = lbind(lbind, shift)\n    x26 = lbind(occurrences, x13)\n    x27 = fork(mapply, x26, x25)\n    x28 = compose(x27, last)\n    x29 = rbind(argmax, x28)\n    x30 = lbind(occurrences, x13)\n    x31 = fork(mapply, x30, x29)\n    x32 = compose(x31, x32)\n    x33 = fork(paint, identity, x323)\n    x34 = rbind(occurrences, x13)\n    x35 = fork(mapply, x33, x24)\n    x36 = compose(x34, x35)\n    x37 = fork(paint, x33, x36)\n    "], [1.1, "def solve_7b92f1ac(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = lbind(remove, x8)\n    x11 = chain(x10, toindices, x8)\n    x12 = chain(x11, x9, x11)\n    x13 = argmax(x9, x12)\n    x14 = rbind(contained, x13)\n    x15 = argmin(x8, x14)\n    x16 = asindices(I)\n    x17 = matcher(first, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = branch(x19, height, width)\n    x21 = informative24(x19)\n    x22 =\"\"\"\n    x23 = difference(x21, x19)\n    x24 = power(increment, TWO)\n    x25 = lbind(apply, x24)\n    x26 = lbind(fafffa47(x23)\n    x27 = lbind(fcc89999b\n    x28 = chain(x25, x26, x27)\n    x29 = x28(x4)\n    x30 = x28(x15)\n    x31 = x28(x14)\n    x32 = x29(x31)\n    x33 = x28(x20)\n    x34 = x28(x22)\n    x35 = combine(x29, x34)\n    x36 = x28(x30)\n    x37 = hconcat(x35, x36)\n    x38 = height(x27)\n    x39 =\n    x40 = divide(x38, x39)\n    x40 =fOUR(x27)\n    x41 = ofcolor(x77, x"], [1.1, "def solve_1813d2c7(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = urcorner(x30)\n    x32 =Rmirror(x31)\n    x33 = hmirror(x32)\n    x34 = NEG_UNITY(x33)\n    x35 = shoot(x31, UNITY)\n    x36 = recolor(x10, x34)\n    x37 = apply(x36, x35)\n    x38 = product(x37, x37)\n    x39 = power(x38, THREE)"], [1.1, "def solve_92e74302(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_2b8b79e7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x30)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_a971a618(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = intersection(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_cb0d2368(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = index(I, ORIGIN)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = branch(x9, x6, x4)\n    x11 = fill(x10, FOUR, x4)\n    x12 = lbind(contained, x6)\n    x13 = compose(x12, toindices)\n    x14 = fork(sfilter, x13, x11)\n    x15 = size(x1)\n    x16 = height(I)\n    x17 = width(I)\n    x18 = increment(x16)\n    x19 = astuple(x17, x18)\n    x20 = crop(I, ORIGIN, x19)\n    x21 = hmirror(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = asobject(x24)\n    x26 = vmirror(x25)\n    x27 = asobject(x26)\n    x28 = ulcorner(x27)\n    x29 = mostcolor(I)\n    x30 = lrcorner(x27)\n    x31 = index(I, x30)\n    x32 = subgrid(x31, x8)\n    x33 = asobject(x32)\n    x34 = hmirror(x33)\n    x35 = vmirror(x34)\n    x36 = asobject(x35)\n    x37 = astuple(x31, x36)\n    x38 = add(x37, x31)\n    x39 = width(I)\n    x40 = ulcorner(x36)\n    x41 = index(I, x40)\n    x42 = subtract(x40, x41)\n    x43 = add(x44, x42"], [1.1, "def solve_b5789320(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(d687bc2c\n    x5 = chain(positive, size, dedupe)\n    x6 = apply(x5, x1)\n    x7 = equality(x6, SIX)\n    x8 = branch(x7, vsplit, hsplit)\n    x9 = x8(I, TWO)\n    x10 = argmin(x9, numcolors)\n    x11 = argmax(x9, numcolors)\n    x12 = width(x11)\n    x13 = hsplit(x11, x12)\n    x14 =\n    x15 = divide(xx, x13)\n    x16 = width(x11)\n    x17 = divide(x16, x10)\n    x18 = ZERO(x17)\n    x19 = lbind(multiply, x18)\n    x20 = compose(x19, shape)\n    x21 = lbind(canvas, ZERO)\n    x22 = compose(x21, x20)\n    x23 = fork(concat, x20, x22)\n    x24 = colorfilter(x1, x12)\n    x25 = argmax(x24, x23)\n    x26 = ulcorner(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = shift(x25, x28)\n    x30 = paint(x29, x29)\n    x31 = interval(ONE, x30, ONE)\n    x32 = matcher(first, x25)\n    x33 = hfilter(x31, x32)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x22, x35)\n    x37 = fill(x30, x12, x36)\n    x38 = ofcolor(x37, x7)\n    x39 =\n    3723445279\n    x38(x"], [1.1, "def solve_9219208b(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9ef26332(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(first, last)\n    x37 = fork(equality, x35, x36)\n    x38 = sfilter(x31, x37)\n    x39 = matcher(first, ZERO)\n    x40 = compose(flip, x39)\n    x41 = fork(sfilter, x40, x39)\n    x46 = argmax(x"], [1.1, "def solve_b8b25c6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(x15, x16)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 = fork"], [1.1, "def solve_59cedf4e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(contained, F, T)\n    x14 = lbind(apply, urcorner)\n    x15 = compose(x14, x13)\n    x16 = fork(compose, x12, x15)\n    x17 = lbind(48, ZERO)\n    x18 = compose(x17, x16)\n    x19 = fork(sfilter, x15, x18)\n    x20 = fork(difference, x19, identity)\n    x21 = lbind(9chain, center)\n    x22 = lbind(x21, x20)\n    x23 = compose(x22, ulcorner)\n    x24 = chain(x2, x23, x20)\n    x25 = lbind(lbind, shift)\n    x26 = compose(x25, x23)\n    x27 = fork(mapply, x26, x24)\n    x28 = fork(mapply, x27, x26)\n    x29 = palette(I)\n    x30 =(x28, x29)\n    x31 = intersection(x40, x30)\n    x32 = first(x31)\n    x33 = other(x31, x32)\n    x34 = flip(x33)\n    x35 = dmirror(x34)\n    x36 = objects(x35, T, F, T)\n    x37 = apply(toindices, x36)\n    x38 = lbind(rbind,worldcorner)\n    x39 =666x38(x37"], [1.1, "def solve_57c319df(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_c9e8b1db(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = interval(rot180, rot180, ONE)\n    x21 = astuple(rot90, rot90)\n    x22 = astuple(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n"], [1.1, "def solve_f0ab5ef1(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2b4dd363(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x20 = compose(x24, x25)\n    x21 = fork(equality, identity, x20)\n    x22 = compose(x21, last)\n    x23 = rbind(multiply, x19)\n    x24 = rbind(divide, x19)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = compose(x26, last)\n    x28 = lbind(apply, first)\n    x29 = lbind(phrase, x8)\n    x30 = rbind(rapply, x27)\n    x31 = compose(initset, first)\n    x32 = chain(first, x30, x31)\n    x33 = compose(x28, x32)\n    x34 = extract(x15, x33"], [1.1, "def solve_4cfa3341(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, size)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(numcolors, ONE)\n    x43 ="], [1.1, "def solve_864531d4(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_7b267f73(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argmin(x23, x24)\n    x26 = ulcorner(x25)\n    x27 =652(x25, x22)\n    x28 = add(x26, x27)\n    x29 = lrcorner(x25)\n    x30 = invert(x28)\n    x31 = shift(x29, x30)\n    x32 = lefthalf(x15)\n    x33 = righthalf(x15)\n    x34 = vmirror(x33)\n    x35 = vconcat(x32, x34)\n    x36 = width(x9)\n    x37 = subtract(x35, x36)\n    x38 = tojvec(x37)\n    x39 = shift(x31, x38)\n    x40 =7(x39)\n    x41 = width(x10)\n    x42 = righthalf(x41)\n    x43"], [1.1, "def solve_679f2728(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x13, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f39bb665(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2d646e4a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = subgrid(x2, I)\n    x9 = frontiers(x8)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = size(x12)\n    x14 = repeat(x12, x13)\n    x15 = palette(x2)\n    x16 = remove(x12, x15)\n    x17 = lbind(colorcount, x16)\n    x18 = argmin(x12, x17)\n    x19 = ulcorner(x2)\n    x20 = shoot(x19, UNITY)\n    x21 = lrcorner(x2)\n    x22 = shoot(x21, NEG_UNITY)\n    x23 = urcorner(x2)\n    x24 = shoot(x23, UP_RIGHT)\n    x25 = llcorner(x2)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = combine(x20, x22)\n    x28 = combine(x24, x26)\n    x29 = combine(x27, x28)\n    x30 = branch(x12, x22, x27)\n    x31 = asindices(x30)\n    x32 = rbind(adjacent, x31)\n    x33 = argmin(x29, x32)\n    x34 = rbind(adjacent, x13)\n    x35 = apply(x34, x32)\n    x36 = vmirror(x34)\n    x37 = invert(x35)\n    x38 = apply(invert, x36)\n    x39 = pair(x37, x38)\n    x40 = shift(x39, UNITY)\n    O = mapply(last, x40)\n    return"], [1.1, "def solve_585cf2fd(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = cmirror(I)\n    x24 = h talk(x23, x22)\n    x25 = astuple(x24, x7)\n    x26 = dmirror(x25)\n    x27 = ulcorner(x25)\n    x28 = shoot(x27, UNITY)\n    x29 = shoot(x27, NEG_UNITY)\n    x30 = shoot(x27, UP_RIGHT)\n    x31 = shoot(x27, DOWN_LEFT)\n    x32 = combine(x28, x29)\n    x33 = combine(x30, x31)\n    x34 = combine(x32, x33)\n    x35 = astuple(x24, x7)\n    x36 = lbind(multiply, x35)\n    x37 = apply(x36, x34)\n    x38 = lbind(shift, x13)\n    x39 = mapply(x38, x37)\n    O = paint(I"], [1.1, "def solve_a4a81486(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = argmax(x8, size)\n    x11 = ulcorner(x9)\n    x12 = ulcorner(x10)\n    x13 = subgrid(x9, x5)\n    x14 = subgrid(x10, x5)\n    x15 = hconcat(x13, x14)\n    x16 = hconcat(x15, x5)\n    x17 = vconcat(x16, x17)\n    x18 = vconcat(x16, x19)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x7, x20)\n    x22 = paint(x21, x9)\n    x23 = solve_0dfd97113(x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x23, x4)\n    x26 = difference(x24, x25)\n    x27 = fill(x22, NEG_ONE, x26)\n    x28 = initset(x15)\n    x29 = rbind(manhattan, x28)\n    x30 = chain(even, halve, x29)\n    x31 = sfilter(x27, x30)\n    x32 = difference(x27, x31)\n    x33 = fill(x24, ONE, x32)\n    x34 = initset(x25)\n    x35 = insert(x24, x34)\n    x36 = product(x33, x35)\n    x37 = fork(connect, first, last)\n    x38 = mapply(x37, x36)\n    O"], [1.1, "def solve_769c66cb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = rbind(hconcat, x9)\n    x23 = compose(flip, x22)\n    x24 = rbind(hconcat, x10)\n    x25 = compose(flip, x24)\n    x26 = fork(combine, x23, x25)\n    x27 = fork(combine, x28, x26)\n    x28 = fork(either, vline, hline)\n    x29 = rbind(sfilter, x28)\n    x30 = rbind(difference, x76)\n    x31 = chain(size, x29, x30)\n    x32 = matcher(x31, ZERO)\n    x33 = fork(both, x26, x32)\n    x34 = extract(x15, x33)\n    x35 = x24(x34)\n    x36 = power(x22, TWO)\n    x37 = multiply(x36, x35)\n    x38 = x25(x34)\n    x39 = shift(x38, UNITY)\n    x40 = paint(x39, x37)\n"], [1.1, "def solve_5fcc6587(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(toivec, x2, vmirror)\n    x4 = x3(I)\n    x5 = partition(x4)\n    x6 = lbind(remove, ONE)\n    x7 = chain(center, first, last)\n    x8 = fork(subtract, x7, x6)\n    x9 = fork(multiply, height, width)\n    x10 = fork(equality, size, x9)\n    x11 = sfilter(x5, x10)\n    x12 = argmax(x11, numcolors)\n    x13 = remove(x12, x11)\n    x14 = corners(x12)\n    x15 = toobject(x14, I)\n    x16 = colorfilter(x15, ONE)\n    x17 = rbind(sfilter, x16)\n    x18 = argmin(x13, x17)\n    x19 = frontiers(I)\n    x20 = sfilter(x19, x18)\n    x21 = apply(ulcorner, x20)\n    x22 = size(x21)\n    x23 = equality(x22, ZERO)\n    x24 = branch(x23, hmirror, vmirror)\n    x25 = asobject(x24)\n    x26 = color(x25)\n    x27 = decrement(x22)\n    x28 = toivec(x27)\n    x29 = invert(x28)\n    x30 = insert(x27, x30)\n    x31 = backdrop(x30)\n    x32 = tojvec(x22)\n    x33 = invert(x32)\n    x34 = insert(x33, x30)\n    x35 = order(x32, x34)\n    x36 = combine(x31, x35)\n    x37 = fill(x6, x25, x36)\n    x38 = apply(x29, x35)\n    x39 = fill(x37, x24, x38)\n    x40 = asobject"], [1.1, "def solve_f06ca8d7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = argmax(x6, x10)\n    x12 = initset(x11)\n    x13 = matcher(x12, ZERO)\n    x14 = rbind(add, x6)\n    x15 = chain(flip, x13, x14)\n    x16 = fork(both, x13, x15)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x12, x17)\n    x19 = fork(add, x6, x17)\n    x20 = canvas(ZERO, THREE_BY_THREE)\n    x21 = asindices(x20)\n    x22 = toobject(x21, I)\n    x23 = mostcolor(x22)\n    x24 = uppermost(x18)\n    x25 = lbind(min, x24)\n    x26 = lbind(rbind, add)\n    x27 = chain(x25, x26, x26)\n    x28 = matcher(x27, x11)\n    x29 = initset(x18)\n    x30 = prapply(insert, x29, x28)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, x7)\n    x33 = fork(subtract, x32, x17)\n    x34 = fork(upscale, x33, x24)\n    x35 = fork(recolor, x24, x34)\n    x36 = mapply(x35, x18)\n    x37 = paint(x20, x36)\n    x38"], [1.1, "def solve_9fa912a8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4, x5)\n    x21 = compose(x19, x20)\n    x22 = lbind(sfilter, x8)\n    x23 = fork(inderer, x21, x22)\n    x24 = lbind(rbind, subtract)\n    x25 = chain(x17, x24, x23)\n    x26 = lbind(colorcount, I)\n    x27 = fork(equality, x25, x26)\n    x28 = sfilter(x18, x27)\n    x29 = fork(equality, x27, x28)\n    x30 = sfilter(x26, x29)\n    x31 = fork(paint, identity, x30)\n    x32 = lbind(rbind, add)\n    x33 = compose(x32, box)\n    x34 = fork(37940, x33, x33)\n    x35 = compose(x32, x34)\n    x36 = fork(difference, x35, x31)\n    x37 = fork(77fdfe, x35, x"], [1.1, "def solve_6ce3bf01(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = branch(x1, ZERO, THREE)\n    x2 = asobject(x1)\n    x3 = matcher(first, ZERO)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x5, x8)\n    x10 = argmax(x9, x7)\n    x11 = remove(x10, x9)\n    x12 = merge(x11)\n    x13 =32(x12)\n    x14 = apply(first, x11)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(I)\n    x20 = lbind(colorfilter, x12)\n    x21 = chain(size, x19, x20)\n    x22 = matcher(x21, ZERO)\n    x23 = colorfilter(x15, ZERO)\n    x24 = rbind( noises, x39)\n    x25 = compose(x24, outbox)\n    x26 = fork(branch, x25, outbox)\n    x27 = apply(x26, x23)\n    x28 = initset(x10)\n    x29 = insert(x13, x28)\n    x30 = backdrop(x29)\n    x31 = cover(I, x30)\n    x32 = normalize(x10)\n    x33 = shift(x32, UNITY)\n    x34 = paint(x31, x33)\n    x35 = rot90(x34)\n    x36 =normalize(x10)\n    x37 = shift(x36, UP_RIGHT)\n    x38 = paint(x35, x37)\n    x39 = rot270(x38)\n    x40 = shape(x10)\n    x41 = canvas"], [1.1, "def solve_17638a9e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_c7bd5ed4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_5d06f77c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_651e0313(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_05d8af31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_9b5ef738(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9a9553d8(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_38cb5881(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x32 = compose(x29, x30)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = lbind(apply, first)\n    x36 = rbind(sfilter, x28)\n    x37 = rbind(pair, x21)\n    x38 = chain(x35, x36, x37)\n    x39 = compose(x32, x38)\n    x40 = extract(x1, x39)\n    x41 = last(x40)\n    "], [1.1, "def solve_ce671096(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = ofcolor(x13, x9)\n    x15 = ofcolor(x13, x10)\n    x26 = subgrid(x14, x6)\n    x27 = subgrid(x15, x6)\n    x28 = palette(x16)\n    x29 = remove(x9, x28)\n    x30 = argmin(x29, x12)\n    x31 = rbind(colorcount, x30)\n    x32 = rbind(toobject, x31)\n    x33 = chain(x30, x32, initset)\n    x34 = apply(x33, x27)\n    x35 = ofcolor(x34, x10)\n    x36 = ofcolor(x34, x shoot)\n    x37 = apply(x35, x36)\n    x38 = fill(x6, x27, x37)\n    x39 = ofcolor(x38, x30)\n    x40 = ofcolor(x38, x356)\n    x41 = fill(x38, x39, x40)\n    x42 = mapply(x33, x34)\n    x43 = uppermost(x42)\n    x44 = lbind(10, x43)\n    x45 = shift(x44, NEG_UNITY)\n    x46 = lbind(greater, x43)\n    x47 = compose(x46, UP_RIGHT)\n    x48 = rbind(sfilter, x27)\n    x49 = chain(x47,"], [1.1, "def solve_57dc8aa7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = trim(I)\n    x2 =insert(ORIGIN, x1)\n    x3 = upscale(x2, TWO)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = asobject(x4)\n    x6 = toindices(x5)\n    x7 = ZERO_BY_TWO)\n    x8 = ulcorner(x6)\n    x9 = add(x8, UNITY)\n    x10 = shift(x6, x9)\n    x11 = fill(I, ZERO, x10)\n    x12 = lbind(shift, x6)\n    x13 = apply(x12, x11)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.1, "def solve_adfdbb72(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(SIX, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x3, urcorner)\n    x5 = astuple(x2, x4)\n    x6 = ofcolor(I, TWO)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = greater(x8, x9)\n    x11 = branch(x10, initset,548or487)\n    x12 = canvas(ZERO, x5)\n    x13 = compose(first, last)\n    x14 = chain(x13,951120, first)\n    x15 = lbind(contained, TWO)\n    x16 = compose(x15, first)\n    x17 = lbind(contained, THREE)\n    x18 = compose(x17, first)\n    x19 = fork(add, x16, x18)\n    x20 = fork(add, x14, x19)\n    x21 = compose(positive, size)\n    x22 = rbind(intersection, x7)\n    x23 = rbind(shoot, UP)\n    x24 = chain(x21, x22, x23)\n    x25 = sfilter(x15, x24)\n    x26 = chain(size, dedupe, first)\n    x27 = compose(positive, size)\n    x28 = lbind(compose, x27)\n    x29 = lbind(fork, intersection)\n    x30 = compose(x28, x29)\n    x31 = lbind(compose, x07)\n    x32 = compose(x31, x30)\n    x33 = fork(mapply, x26, x32)\n    x34 = fork(intersection, x33, x30)\n    x35 = mapply(x34, x25)\n    x36 = fill(I, THREE, x35)\n    O = fill(x36, EIGHT, x36)\n    return O"], [1.1, "def solve_10d54a56(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =2dc187(x2)\n    x4 = shape(x3)\n    x5 = merge(x1)\n    x6 = cover(I, x5)\n    x7 = hconcat(x6, x4)\n    x8 = hconcat(x7, x4)\n    O = vconcat(x8, x4)\n    return O"], [1.1, "def solve_7b51646f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    1 =64rot90(I)\n    x2 =64quire(x1, ONE)\n    O = replace(I, EIGHT, x2)\n    return O"], [1.1, "def solve_d377d2a7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =175(I)\n    x2 =7444(x1)\n    x3 =297(x2, box)\n    O = fill(I, FOUR, x3)\n    return O"], [1.1, "def solve_fae26e96(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = objects(x6, T, F, T)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x6, x14)\n    x16 = ofcolor(x15, x11)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = ofcolor(x20, x11)\n    x22 = ofcolor(x20, TWO)\n    x23 = pair(x21, x22)\n    x24 = mapply(first, x23)\n    x25 = mapply(last, x23)\n    x26 = fill(x15, SIX, x24)\n    O = fill(x26,060, x25)\n    return O"], [1.1, "def solve_fb5d5f60(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = compose(increment,\n    5510000000000000000\n    44709000000002b tojvec\n    0001000000001\n    2000000000000000030840\n    \"\"\"\n    x2 = increment(NINE)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = fork(multiply, tojvec, box)\n    x5 = fork(multiply, center, x4)\n    x6 = fork(add, size, x5)\n    x7 = compose(x6, toivec)\n    x8 = lbind(add, DOWN)\n    x9 = compose(x8, tojvec)\n    x10 = initset(x9)\n    x11 = lbind(insert, x10)\n    x12 = compose(backdrop, x11)\n    x13 = mapply(x12, x3)\n    x14 = fill(I, ZERO, x13)\n    O = replace(x14, SEVEN, FIVE)\n    return O"], [1.1, "def solve_f127aba6(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = extract(x8, x9)\n    x11 = lbind(sfilter, x8)\n    x12 = lbind(matcher, FOUR)\n    x13 = compose(x11, x12)\n    x14 = rbind(sfilter, x13)\n    x15 = merge(x8)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = palette(I)\n    x21 = remove(x8, x20)\n    x22 = repeat(x8, ONE)\n    x23 =263(x22)\n    x24 = ofcolor(x12, x23)\n    x25 = ofcolor(x12, x8)\n    x26 = ofcolor(x12, x1)\n    x27 = rbind(argmin, x27)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x38)\n    x32 = compose(x31, x30)\n    x33 = fork(subtract, identity, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x24)\n    x36 = ofcolor(x15, x23)\n    x37 = intersection(x36, x35)\n    x38 = mapply(neighbors, x37)\n    O = paint(x12, x38)\n    return O"], [1.1, "def solve_4a170175(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =if11(I)\n    x2 =077df224(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, x1, SEVEN)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [1.1, "def solve_a97522c1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =75dneighbors(x2)\n    x4 = insert(x2, x3)\n    O = fill(I, THREE, x4)\n    return O"], [1.1, "def solve_b4847676(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = apply(x2, x2)\n    x4 = repeat(x3, ONE)\n    x5 = puts(x4, UNITY)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = lbind(remove, NEG_ONE)\n    x9 = compose(x8, shape)\n    x10 = lbind(multiply, x1)\n    x11 = chain(x10, double, x9)\n    x12 = asindices(x5)\n    x13 = ofcolor(I, NEG_ONE)\n    x14 = difference(x13, x12)\n    x15 = partition(I)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x17, x14)\n    x19 = argmax(x18, x11)\n    x20 = other(x19, x9)\n    x21 = palette(I)\n    x22 = remove(x3, x21)\n    x23 = other(x22, x10)\n    x24 = ofcolor(I, x23)\n    x25 =39eb branch(x24, positive, decrement)\n    x26 = shoot(x22, UNITY)\n    x27 = shoot(x25, UP_RIGHT)\n    x28 = combine(x26, x27)\n    x29 = rbind(shoot, LEFT)\n    x30 = mapply(x29, x28)\n    x31 = underfill(I, x23, x30)\n    x32 = other(x31, x9)\n    x33 = ofcolor(x31, x23)\n    x34 = initset(x33)\n    x35 = cover(x32, x34)\n    x36 = height(x35)\n    x37 = equality(x36, ONE)\n    x38 = intersection(x33, x34)\n    O = fill(x37, x23, x38)\n    return O"], [1.1, "def solve_3f5a7225(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = mapply(x16, x4)\n    x21 = mapply(x12, x4)\n    x22 = combine(x20, x21)\n    x23 =0920(02)\n    x24 = lrcorner(x23)\n    x25 = height(x3)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, x278)\n    x28 = apply(x27, x25)\n    x29 = apply(x33, x28)\n    x30 = lbind(shift, x22)\n    x31 = mapply(x30, x29)\n    x32 = paint(x3, x31)\n    O = x2(x32)\n    return O"], [1.1, "def solve_ce669156(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = apply(merge, x3)\n    x5 = mapply(d12, x4)\n    x6 = portrait(x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = toindices(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x12, x16)\n    x18 = argmax(x17, lrcorner)\n    x19 = fgpartition(x88)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 =3906(x18, x21)\n    x23 = difference(x22, x18)\n    x24 = first(x23)\n    x25 = color(x18)\n    x26 =194(x24)\n    x27 = ofcolor(x88, x25)\n    x28 = leftmost(x27)\n    x29 = ofcolor(x88, x24)\n    x30 = leftmost(x29)\n    x31 = greater(x28, x30)\n    x32 = uppermost(x27)\n    x33 = neighbors(x32)\n    x34 = toobject(x33, x88)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x35, x36)\n    x38 = paint(x88, x37)\n    x39 = trim(x38)\n    O = x7(x39)\n    return O"], [1.1, "def solve_19eefb3f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = fork(subtract, last, width)\n    x7 = fork(multiply, x6, x5)\n    x8 =987(ORIGIN)\n    x9 = mapply(x7, x8)\n    x10 = subtract(SIX, x9)\n    x11 = power(outbox, x10)\n    x12 = palette(I)\n    x13 = apply(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = mfilter(x19, x16)\n    x18 = replace(I, x15, x9)\n    x19 = lbind(difference, x8)\n    x20 = chain(positive, size, x19)\n    x21 = matcher(x20, ZERO)\n    x22 = compose(first, x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x19, x23)\n    x25 = compose(maximum, x24)\n    x26 = matcher(x25, ONE)\n    x27 = sfilter(x24, x26)\n    x28 = apply(toindices, x27)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x30, x29)\n    x32 = fork(difference, x31, x23)\n    x33 = fork(shift, x27, x32)\n    x34 = mapply(x33, x27)\n    O = paint(x16, x34)\n    return O"], [1.1, "def solve_494c6f33(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(uppermost, x11)\n    x13 = order(x12, identity)\n    x14 = lbind(sfilter, x11)\n    x15 = lbind(matcher, uppermost)\n    x16 = compose(x14, x15)\n    x17 = chain(x16, x13, x16)\n    x18 = fork(85, x17, identity)\n    x19 = lbind(apply, color)\n    x20 = rbind(order, leftmost)\n    x21 = chain(x19, x20, x16)\n    x22 = fork(sfilter, x18, x21)\n    x23 = compose(x17, x22)\n    x24 = apply(x23, x13)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x21, x26)\n    x28 = multiply(TEN, TEN)\n    x29 = rbind(subtract, x28)\n    x30 = chain(x29, x27, size)\n    x31 = fork(rapply, x30, identity)\n    x32 = mapply(x31, x branch)\n    O = paint(x9, x32)\n    return O"], [1.1, "def solve_9c06eca8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = backdrop(x2)\n    x6 = cover(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(x7, ZERO)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x4)\n    x11 =353(x10)\n    x12 = palette(x11)\n    x13 = lbind(mfilter, x12)\n    x14 = rbind(toobject, x11)\n    x15 = lbind(ofcolor, x11)\n    x16 = chain(x13, x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x11)\n    O = fill(x6, x3, x18)\n    return O"], [1.1, "def solve_c91e11d0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = height(I)\n    x2 = subgrid(x1, I)\n    x3 = partition(x2)\n    x4 =multiply(x1, THREE)\n    x5 = astuple(x4, x4)\n    x6 = crop(x2, ORIGIN, x5)\n    x7 =39a8645d83733683\n    x8 =86(x6,9318669\n    8484969944\n    9810smart3ed(x8)\n    x9 = add(x1, THREE)\n    x10 = tojvec(x9)\n    x11 = height(x7)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = height(x10)\n    x15 = interval(x14, THREE, x14)\n    x16 = apply(tojvec, x15)\n    x17 = apply(asobject, x16)\n    x18 =44(x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x11)\n    O = paint(x2, x20)\n    return O"], [1.1, "def solve_35bf20ed(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = input:\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x2 = trim(I)\n    x3 = output(x2, ZERO)\n    x4 = order(x3, identity)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = size(x5)\n    x8 = interval(ZERO, x6, ONE)\n    x9 = mpapply(recolor, x8, x7)\n    O = paint(x3, x9)\n    return O"], [1.1, "def solve_708751d7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =73mirror(I)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = compose(x9, x10)\n    x12 = chain(x11, center, initset)\n    x13 = fork(gravitate, identity, x12)\n    x14 = compose(rot90, x13)\n    x15 = power(x14, FOUR)\n    x16 = fork(add, height, width)\n    x17 = fork(decrement, x16, x12)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(both, x15, x18)\n    x20 = mfilter(x3, x19)\n    O = fill(x5, FIVE, x20)\n    return O"], [1.1, "def solve_0397539c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = lbind(extract, x1)\n    x3 = chain(x2, positive, size)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(x4, urcorner)\n    x6 = compose(x4, DOWN)\n    x7 = fork(04, shape, x6)\n    x8 = chain(x5, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 =\"\"\"\n    x11 = fork(indices, x8, identity)\n    x12 = apply(x11, x1)\n    x13 = rbind(shoot, UP)\n    x14 = mapply(x13, x12)\n    x15 = underfill(I, ONE, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, ONE)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    x20 = cover(x15, x19)\n    O = paint(x20, x19)\n    return O"], [1.1, "def solve_08a6c6fb(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =795(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x3)\n    x5 = bottomhalf(x3)\n    x6 = tophalf(x2)\n    x7 = bottomhalf(x2)\n    x8 = connect(x4, x5)\n    x9 = connect(x4, x6)\n    x10 = combine(x8, x9)\n    O = leastcommon(x10)\n    return O"], [1.1, "def solve_ec5f4ef7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(multiply, height, width)\n    x2 = decrement(x1)\n    x3 =86(x2, F76)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = insert(x7, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = ofcolor(I, x11)\n    x14 = crop(I, x13, x11)\n    x15 =41(x14)\n    x16 = subgrid(x15, x5)\n    x17 = asobject(x16)\n    x18 = matcher(first, x11)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = trim(x20)\n    x22 = asobject(x21)\n    x23 = decrement(x22)\n    x24 =88 divide(x23, x12)\n    x25 = increment(x24)\n    x26 =777f25ff(I, x25)\n    x27 = asobject(x26)\n    x28 = decrement(x27)\n    x29 =88 divide(x28, x12)\n    x30 = increment(x29)\n    x31 = objects(x28, T, T, T)\n    x32 = colorfilter(x31, x11)\n    x33 = crop(x20, ORIGIN, x12)\n    x34 = valmin(x32, x33)\n    x35 = sizefilter(x32, x34)\n    x36 = recolor(x11, x34)\n    x37 = compose(flip, x28)\n    x38 = mfilter(x35, x37)\n    x39 = paint(I, x38)\n    O = subgrid(x39, x4)\n    return O"], [1.1, "def solve_cdb03031(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = compress(x7)\n    x9 = width(x8)\n    x10 = divide(x9, THREE)\n    x11 = downscale(x8, x10)\n    x12 = height(x8)\n    x13 = crop(x interval, ZERO, x12)\n    x14 = rbind(ofcolor, x5)\n    x15 = compose(x14, last)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x4, x17)\n    return O"], [1.1, "def solve_756ff3b4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(toindices, F normalize)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(intersection, x4)\n    x7 = compose(size, x6)\n    x8 = argmax(x5, x7)\n    x9 = height(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, x7, x6)\n    x12 = subtract(x11, TWO)\n    x13 = size(x8)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = output:\n    x12, x14)\n    x16 = interval(ONE, x12, ONE)\n    x17 = rbind(multiply, x15)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = subgrid(x4, x21)\n    return O"], [1.1, "def solve_ef7f753c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = lbind(toobject, I)\n    x11 = apply(x10, x9)\n    x12 = colorfilter(x11, x3)\n    x13 = combine(x12, x11)\n    x14 = toobject(x13, I)\n    x15 = difference(x4, x12)\n    x16 = apply(x11, x15)\n    x17 = rbind(manhattan, x3)\n    x18 = argmin(x16, x17)\n    x19 = mostcolor(I)\n    x20 = shape(I)\n    x21 = increment(x20)\n    x22 = canvas(x19, x21)\n    x23 = asobject(I)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x22, x24)\n    x26 = interval(ONE, FIVE, ONE)\n    x27 =\n    x28 = product(x26, x26)\n    x29 = totuple(x27)\n    x30 = apply(first, x29)\n    x31 = apply(last, x29)\n    x32 = combine(x30, x31)\n    x33 = lbind(shift, x28)\n    x34 = mapply(x33, x32)\n    O = paint(x19, x34)\n    return O"], [1.1, "def solve_fb0f0eff(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(apply, x12)\n    x14 = compose(x13, palette)\n    x15 = product(x4, x4)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 =885f761969(x16)\n    x19 =bdad(x18, x17)\n    x20 = compose(positive, size)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x22)\n    x23 = x22(x19)\n    x24 = fgpartition(I)\n    x25 = merge(x24)\n    x26 = cover(I, x25)\n    x27 = chain(x24, box, x22)\n    x28 = apply(x27, x28)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x29)\n    O = paint(x26, x30)\n    return O"], [1.1, "def solve_f5e72ac4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = mfilter(x2, hline)\n    x4 = height(x3)\n    x5 = vsplit(I, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 =975e(x6)\n    x9 = ofcolor(x6, ZERO)\n    x10 = toindices(x6)\n    x11 = combine(x10, x9)\n    x12 = fill(x6, ZERO, x11)\n    x13 = partition(x12)\n    x14 = difference(x1, x13)\n    x15 = argmax(x14, identity)\n    x16 = apply(color, x15)\n    x17 = increment(x16)\n    x18 = x17(x15)\n    x19 = shift(x15, x18)\n    x20 = shift(x19, x17)\n    x21 = fill(x12, ZERO, x20)\n    x22 = fill(x21, x8, x19)\n    x23 = combine(x13, x22)\n    x24 = mapply(hfrontier, x23)\n    x25 = fill(x24, x8, x19)\n    x26 = ofcolor(x25, x12)\n    x27 = palette(x25)\n    x28 = remove(x8, x27)\n    x29 = remove(x25, x28)\n    x30 = product(x26, x29)\n    x31 = first(x30)\n    x32 = last(x30)\n    x33 = hfrontier(x31)\n    x34 = vfrontier(x32)\n    x35 = combine(x33, x34)\n    O = fill(x35, x8, x35)\n    return O"], [1.1, "def solve_51c75ade(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = compose(decrement, width)\n    x15 =\n    x16 = vsplit(x6, TWO)\n    x17 = rbind(hsplit, TWO)\n    x18 = initset(x2)\n    x19 = lbind(insert, x18)\n    x20 = chain(insert, dedupe, x19)\n    x21 = x14(x16)\n    x22 = mapply(x21, x14)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_019c936c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirrorbind(IFApply, I)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 =000(x1, x7)\n    x9 = chain(x11, x4, x8)\n    x10 = fill(x6, EIGHT, x5)\n    O = fill(x10, TWO, x9)\n    return O"], [1.1, "def solve_01ac8d52(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = chain(flip, x2, shape)\n    x4 =5555frontier(I)\n    x5 = x2(x4)\n    x6 = lbind(shift, x5)\n    x7 = fork(recolor, x2, x6)\n    x8 = mapply(x7, x3)\n    O = paint(I, x8)\n    return O"], [1.1, "def solve_af17d3ef(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =589\n    58413\n    574698\n    569420\n    233400\n    \"\"\"\n    x2 = vmirror(I)\n    x3 = hconcat(I, x1)\n    x4 = hmirror(x2)\n    O = vconcat(x2, x4)\n    return O"], [1.1, "def solve_c71329f9(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =875(I)\n    x2 =86(I, THREE, FOUR)\n    x3 =00(x1, TWO)\n    x4 = interval(ZERO, NINE, FOUR)\n    x5 = rbind(shift, x3)\n    x6 = totuple(x4)\n    x7 = apply(x5, x6)\n    x8 = lefthalf(x1)\n    x9 = righthalf(x1)\n    x10 = palette(x8)\n    x11 = lbind(shift, x9)\n    x12 = occurrences(x8, x10)\n    x13 = mapply(x11, x12)\n    O =7555(x13)\n    return O"], [1.1, "def solve_0125051f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = helpsitter(I, T)\n    x2 =2c,022)\n    x3 = dmirror(x2)\n    x4 = papply(pair, x2, x3)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x6, x7)\n    x9 = apply(x5, x8)\n    O = subgrid(x9, I)\n    return O"], [1.1, "def solve_f9bce92e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = astuple(subgrid, x3)\n    x5 = remove(x3, x2)\n    x6 = apply(ulcorner, x5)\n    x7 = merge(x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x1)\n    x12 = decrement(x8)\n    x13 = hsplit(x11, x12)\n    x14 = rbind(ofcolor, x ZERO)\n    x15 = apply(x14, x13)\n    x16 = leastcommon(x15)\n    x17 = matcher(first, x16)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x15, x18)\n    x20 = fill(x6, TWO, x19)\n    O = x10(x20)\n    return O"], [1.1, "def solve_82ab6035(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 =555(dedupe, x3)\n    x7 = x5(x6)\n    x8 = replace(x1, THREE, x7)\n    x9 = x5(x8)\n    x10 = asobject(x9)\n    x11 = height(x10)\n    x12 = decrement(x11)\n    x13 = subtract(x12, ONE)\n    x14 = width(x10)\n    x15 = decrement(x14)\n    x16 = add(x15, THREE)\n    x17 = rbind(repeat, x9)\n    x18 = compose(x17, vmirror)\n    x19 = fork(combine, x17, x18)\n    x20 = asobject(x10)\n    x21 = matcher(first, THREE)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = fill(x8, ONE, x23)\n    x25 = trim(x24)\n    x26 = width(x25)\n    x27 = subtract(x26, DOWN)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = height(x25)\n    x32 = subtract(x31, x31)\n    x33 = toivec(x32)\n    x34 = shift(x29, x33)\n    x35 = paint(x30, x34)\n    x36 = ofcolor(x10, x3)\n    x37 = fork(connect, x29, x30)\n    x38 = fork(combine, x37, x39)\n    x39 = mapply(x38, x36)\n    O = fill(x35, x2, x39)\n    return O"], [1.1, "def solve_93eee4d2(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, THREE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = equality(x6, EIGHT)\n    x9 = switch(x6, vmirror, hmirror)\n    x10 = x9(x8)\n    x11 = x4(x10)\n    x12 = pair(x4, x11)\n    x13 = branch(x8, first, last)\n    x14 = extract(x12, x13)\n    x15 = first(x14)\n    x16 = ulcorner(x15)\n    x17 = rightmost(x15)\n    x18 = decrement(x17)\n    x19 = add(x16, x18)\n    x20 =57(x16, x19)\n    x21 = x6(x20)\n    x22 = pair(x21, x12)\n    x23 = apply(last, x22)\n    x24 = mpapply(recolor, x23, x20)\n    O = paint(x5, x24)\n    return O"], [1.1, "def solve_271bfdb6(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(O = lbind(multiply, THREE)\n    x3 = power(x2, FOUR)\n    x4 = x3(I)\n    x5 = ofcolor(x4, x1)\n    x6 = shift(x5, UNITY)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = toindices(x8)\n    x10 = shoot(x4, x9)\n    x11 = underfill(x4, x1, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = first(x12)\n    x14 = vfrontier(x13)\n    x15 = cover(x11, x5)\n    O = paint(x15, x13)\n    return O"]], "2037f2c7": [[0.46247462637088876, "def solve_695b04c8(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = hconcat(x2, x3)\n    x5 = hconcat(x4, x4)\n    O = hconcat(x5, x4)\n    return O"], [0.4709500322543801, "def solve_af243358(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.4709500322543801, "def solve_ffc46cf3(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.4709500322543801, "def solve_bf183830(I):\n    x1 = palette(I)\n    x2 = remove(TWO, x1)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, T, F, T)\n    x9 = colorfilter(x8, TWO)\n    x10 = size(x9)\n    x11 = double(x10)\n    x12 = interval(ZERO, x11, TWO)\n    x13 = apply(tojvec, x12)\n    x14 = astuple(ONE, NINE)\n    x15 = canvas(x4, x14)\n    x16 = fill(x15, ONE, x13)\n    x17 = hsplit(x16, THREE)\n    O = merge(x17)\n    return O"], [0.4923960902221772, "def solve_52aa6171(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, UNITY)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = astuple(SIX, SIX)\n    x7 = canvas(ZERO, x6)\n    O = paint(x7, x5)\n    return O"], [0.5124660219282645, "def solve_2bd32f9a(I):\n    x1 = rot270(I)\n    x2 = crop(x1, ORIGIN, THREE_BY_THREE)\n    O = rot90(x2)\n    return O"], [0.5251570172671126, "def solve_5392da9c(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5251570172671126, "def solve_a1d477cf(I):\n    x1 = asindices(I)\n    x2 = corners(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = rbind(equality, x4)\n    x7 = argmin(x5, x6)\n    x8 = asindices(I)\n    x9 = ofcolor(I, x4)\n    x10 = difference(x8, x9)\n    x11 = fill(I, x7, x10)\n    x12 = frontiers(x11)\n    x13 = sfilter(x12, vline)\n    x14 = difference(x12, x13)\n    x15 = astuple(x14, x13)\n    x16 = apply(size, x15)\n    x17 = increment(x16)\n    O = canvas(x4, x17)\n    return O"], [0.5267563220461772, "def solve_736ac3e7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [0.5341705127937012, "def solve_4ec321af(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_21192291(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_acaa78f4(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_36a436ac(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_fdba1e94(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5341705127937012, "def solve_78b6e400(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = neighbors(UNITY)\n    x8 = initset(UNITY)\n    x9 = recolor(x5, x7)\n    x10 = recolor(x6, x8)\n    x11 = combine(x9, x10)\n    x12 = occurrences(I, x11)\n    x13 = size(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, x6, x5)\n    O = canvas(x15, UNITY)\n    return O"], [0.5437278100321579, "def solve_cab6c0d6(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = astuple(ONE, THREE)\n    x8 = size(x6)\n    x9 = order(x6, leftmost)\n    x10 = apply(color, x9)\n    x11 = rbind(canvas, UNITY)\n    x12 = apply(x11, x10)\n    x13 = merge(x12)\n    x14 = dmirror(x13)\n    x15 = subtract(NINE, x8)\n    x16 = astuple(ONE, x15)\n    x17 = mostcolor(I)\n    x18 = canvas(x17, x16)\n    x19 = hconcat(x14, x18)\n    x20 = hsplit(x19, THREE)\n    x21 = merge(x20)\n    x22 = crop(x21, ORIGIN, x7)\n    x23 = crop(x21, DOWN, x7)\n    x24 = crop(x21, TWO_BY_ZERO, x7)\n    x25 = vmirror(x23)\n    x26 = vconcat(x22, x25)\n    O = vconcat(x26, x24)\n    return O"], [0.562653757943613, "def solve_3c154fcd(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = partition(x2)\n    x4 = rbind(contained, x3)\n    x5 = chain(flip, x4, shape)\n    x6 = sfilter(x1, x5)\n    x7 = fork(equality, toindices, box)\n    x8 = sfilter(x6, x7)\n    x9 = fork(multiply, height, width)\n    x10 = argmin(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.5656761343415933, "def solve_48a4b03e(I):\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, numcolors)\n    x3 = mostcolor(x2)\n    x4 = matcher(first, x3)\n    x5 = sfilter(x2, x4)\n    x6 = shape(x5)\n    x7 = normalize(x5)\n    x8 = mostcolor(I)\n    x9 = canvas(x8, x6)\n    O = paint(x9, x7)\n    return O"], [0.5730284728096737, "def solve_0fa3496b(I):\n    x1 = replace(I, FIVE, ZERO)\n    O = downscale(x1, THREE)\n    return O"], [0.5863202149434034, "def solve_3cfc9c7f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.5863202149434034, "def solve_1cb74a12(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = other(x4, x3)\n    x6 = objects(I, T, T, F)\n    x7 = matcher(color, x5)\n    x8 = extract(x6, x7)\n    O = subgrid(x8, I)\n    return O"], [0.5863747631863573, "def solve_8e572b86(I):\n    x1 = replace(I, FIVE, ZERO)\n    x2 = objects(x1, T, F, T)\n    x3 = first(x2)\n    x4 = portrait(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(x1)\n    x7 = objects(x6, T, F, T)\n    x8 = order(x7, uppermost)\n    x9 = apply(color, x8)\n    x10 = dedupe(x9)\n    x11 = size(x10)\n    x12 = rbind(repeat, x11)\n    x13 = apply(x12, x10)\n    O = x5(x13)\n    return O"], [0.5963048638279206, "def solve_779c5f07(I):\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = lefthalf(x27)\n    O = tophalf(x28)\n    return O"], [0.6076921592043171, "def solve_d3df852a(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6076921592043171, "def solve_37f26949(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6076921592043171, "def solve_9f5a128b(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6076921592043171, "def solve_5945c8f8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6076921592043171, "def solve_caa628d3(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [0.6194886937848373, "def solve_bc7aab33(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_bc999f25(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6194886937848373, "def solve_4aacf3da(I):\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = frontiers(I)\n    x7 = merge(x6)\n    x8 = mostcolor(x7)\n    x9 = astuple(x3, x5)\n    x10 = canvas(x8, x9)\n    x11 = asindices(x10)\n    x12 = toobject(x11, I)\n    x13 = increment(x5)\n    x14 = tojvec(x13)\n    x15 = shift(x11, x14)\n    x16 = toobject(x15, I)\n    x17 = decrement(x3)\n    x18 = toivec(x17)\n    x19 = shift(x11, x18)\n    x20 = toobject(x19, I)\n    x21 = decrement(x3)\n    x22 = increment(x5)\n    x23 = astuple(x21, x22)\n    x24 = shift(x11, x23)\n    x25 = toobject(x24, I)\n    x26 = palette(I)\n    x27 = other(x26, x8)\n    x28 = matcher(first, x27)\n    x29 = rbind(sfilter, x28)\n    x30 = chain(toindices, x29, normalize)\n    x31 = x30(x12)\n    x32 = x30(x16)\n    x33 = x30(x20)\n    x34 = x30(x25)\n    x35 = combine(x31, x32)\n    x36 = combine(x33, x34)\n    x37 = combine(x35, x36)\n    O = fill(x10, x27, x37)\n    return O"], [0.6201635964679443, "def solve_8048952c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [0.6309126220053929, "def solve_3cec28bf(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_4858d724(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_d3e9539f(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_2fdb5b40(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_83d97f85(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_83d2826e(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_3511bc60(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_9b28c643(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_1749b26a(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_8ec26013(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.6309126220053929, "def solve_de4c7f9b(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [0.631933306897075, "def solve_acc6396a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_cb758191(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.631933306897075, "def solve_991f77e8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = palette(I)\n    x8 = remove(x3, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(x6, F, T, T)\n    x13 = rbind(colorcount, x10)\n    x14 = valmax(x12, x13)\n    x15 = rbind(colorcount, x10)\n    x16 = matcher(x15, x14)\n    x17 = sfilter(x12, x16)\n    x18 = apply(ulcorner, x17)\n    x19 = first(x12)\n    x20 = shape(x19)\n    x21 = increment(x20)\n    x22 = rbind(divide, x21)\n    x23 = apply(x22, x18)\n    x24 = sfilter(x1, hline)\n    x25 = size(x24)\n    x26 = sfilter(x1, vline)\n    x27 = size(x26)\n    x28 = astuple(x25, x27)\n    x29 = increment(x28)\n    x30 = canvas(x11, x29)\n    O = fill(x30, ONE, x23)\n    return O"], [0.6557151442133381, "def solve_a51b2b24(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_2c70268a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(x2)\n    x18 = canvas(x16, x17)\n    x19 = matcher(first, x16)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x2)\n    x24 = x22(x6)\n    x25 = x22(x8)\n    x26 = x22(x4)\n    x27 = paint(x18, x23)\n    x28 = paint(x27, x24)\n    x29 = paint(x28, x25)\n    O = paint(x29, x26)\n    return O"], [0.6557151442133381, "def solve_0c691c5c(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6557151442133381, "def solve_e4a2a00b(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = tophalf(x1)\n    x4 = bottomhalf(x1)\n    x5 = tophalf(x2)\n    x6 = bottomhalf(x2)\n    x7 = rbind(ofcolor, ZERO)\n    x8 = fork(difference, asindices, x7)\n    x9 = fork(toobject, x8, identity)\n    x10 = x9(x5)\n    x11 = x9(x4)\n    x12 = x9(x6)\n    x13 = paint(x3, x12)\n    x14 = paint(x13, x11)\n    O = paint(x14, x10)\n    return O"], [0.6748161707949084, "def solve_51f86cd5(I):\n    x1 = width(I)\n    x2 = increment(x1)\n    x3 = divide(x2, THREE)\n    x4 = decrement(x3)\n    x5 = height(I)\n    x6 = astuple(x5, x4)\n    x7 = crop(I, ORIGIN, x6)\n    x8 = add(x4, ONE)\n    x9 = tojvec(x8)\n    x10 = crop(I, x9, x6)\n    x11 = double(x4)\n    x12 = add(x11, TWO)\n    x13 = tojvec(x12)\n    x14 = crop(I, x13, x6)\n    x15 = palette(x7)\n    x16 = palette(x10)\n    x17 = palette(x14)\n    x18 = intersection(x15, x16)\n    x19 = intersection(x18, x17)\n    x20 = first(x19)\n    x21 = other(x15, x20)\n    x22 = other(x16, x20)\n    x23 = other(x17, x20)\n    x24 = canvas(x20, x6)\n    x25 = ofcolor(x7, x21)\n    x26 = ofcolor(x10, x22)\n    x27 = ofcolor(x14, x23)\n    x28 = fill(x24, x23, x27)\n    x29 = fill(x28, x22, x26)\n    O = fill(x29, x21, x25)\n    return O"], [0.6906801139687889, "def solve_bd8e8cc3(I):\n    x1 = width(I)\n    x2 = halve(x1)\n    x3 = tojvec(x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = astuple(x5, x2)\n    x7 = connect(x3, x6)\n    x8 = toobject(x7, I)\n    x9 = numcolors(x8)\n    x10 = equality(x9, ONE)\n    x11 = branch(x10, lefthalf, tophalf)\n    x12 = branch(x10, righthalf, bottomhalf)\n    x13 = x11(I)\n    x14 = x12(I)\n    x15 = palette(x13)\n    x16 = other(x15, ZERO)\n    x17 = palette(x14)\n    x18 = other(x17, ZERO)\n    x19 = shape(x13)\n    x20 = canvas(ZERO, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.6938245927181472, "def solve_cd275006(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [0.7015207131565243, "def solve_8c472259(I):\n    x1 = partition(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x1, size)\n    x4 = color(x3)\n    x5 = remove(x3, x1)\n    x6 = argmax(x5, size)\n    x7 = shape(x6)\n    x8 = canvas(x4, x7)\n    x9 = normalize(x6)\n    O = paint(x8, x9)\n    return O"], [0.7120344565700184, "def solve_5ee2ed15(I):\n    x1 = hsplit(I, THREE)\n    O = first(x1)\n    return O"], [0.7313689109828214, "def solve_e565140f(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = shape(x7)\n    x10 = palette(x7)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x7, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [0.7356195315428602, "def solve_5b190dbc(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = palette(x7)\n    x16 = other(x15, x12)\n    x17 = palette(x8)\n    x18 = other(x17, x12)\n    x19 = ofcolor(x7, x16)\n    x20 = ofcolor(x8, x18)\n    x21 = combine(x19, x20)\n    O = fill(x14, FOUR, x21)\n    return O"], [0.7407050283391268, "def solve_6a03ff2f(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.7407050283391268, "def solve_acf7ef78(I):\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = valmax(x2, shape)\n    x4 = canvas(x1, x3)\n    x5 = apply(normalize, x2)\n    x6 = lbind(subtract, x3)\n    x7 = chain(halve, x6, shape)\n    x8 = fork(shift, identity, x7)\n    x9 = mapply(x8, x5)\n    O = paint(x4, x9)\n    return O"], [0.7513894621344644, "def solve_ce52c751(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.7513894621344644, "def solve_e3948e19(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.7513894621344644, "def solve_fb6a3538(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(I)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [0.7514237970163009, "def solve_205c1eb7(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = x2(I, TWO)\n    x4 = order(x3, numcolors)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = objects(x6, F, F, T)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(first, x9)\n    x11 = compose(flip, x10)\n    x12 = rbind(sfilter, x11)\n    x13 = lbind(occurrences, x5)\n    x14 = compose(x13, x12)\n    x15 = chain(positive, size, x14)\n    x16 = sfilter(x7, x15)\n    x17 = chain(first, x13, x12)\n    x18 = compose(ulcorner, x12)\n    x19 = fork(subtract, x17, x18)\n    x20 = fork(shift, identity, x19)\n    x21 = apply(x20, x16)\n    x22 = compose(decrement, width)\n    x23 = chain(positive, decrement, x22)\n    x24 = mfilter(x21, x23)\n    O = paint(x5, x24)\n    return O"], [0.7567692985514706, "def solve_a94050ab(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(I)\n    O = replace(x4, x5, x3)\n    return O"], [0.7635614912120104, "def solve_4f3e6051(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7635614912120104, "def solve_4a2cae9f(I):\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7635614912120104, "def solve_793ec4ea(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = mostcolor(I)\n    O = replace(x3, x4, ZERO)\n    return O"], [0.7702738530895862, "def solve_c2a7b8c8(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_69b37bed(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_02913bb2(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_4f73f41f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = fgpartition(x6)\n    x9 = merge(x8)\n    O = paint(x6, x9)\n    return O"], [0.7702738530895862, "def solve_c7a7f8bb(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702738530895862, "def solve_ebe978f3(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = equality(x1, x2)\n    x4 = branch(x3, lefthalf, tophalf)\n    O = x4(I)\n    return O"], [0.7702994509699451, "def solve_b0611800(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7702994509699451, "def solve_2d7a66f6(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = merge(x4)\n    x6 = subgrid(x5, I)\n    x7 = mostcolor(x6)\n    x8 = leastcolor(x6)\n    O = switch(x6, x7, x8)\n    return O"], [0.7707492564922985, "def solve_28b18022(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x5(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = fgpartition(x8)\n    x10 = merge(x9)\n    O = paint(x7, x10)\n    return O"], [0.7717845608238315, "def solve_d1aa6bc6(I):\n    x1 = index(I, ORIGIN)\n    x2 = width(I)\n    x3 = halve(x2)\n    x4 = astuple(x3, x2)\n    x5 = canvas(x1, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = compose(x6, last)\n    x8 = fork(recolor, first, x7)\n    x9 = asobject(I)\n    x10 = mapply(x8, x9)\n    O = paint(x5, x10)\n    return O"], [0.7848766235472429, "def solve_2d5ab11f(I):\n    x1 = objects(I, T, F, T)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = dedupe(x3)\n    x6 = size(x5)\n    x7 = equality(x6, ONE)\n    x8 = compose(leastcolor, merge)\n    x9 = colorfilter(x1, x4)\n    x10 = branch(x7, x8, x9)\n    x11 = branch(x7, vsplit, hsplit)\n    x12 = x11(I, TWO)\n    x13 = first(x12)\n    x14 = last(x12)\n    x15 = palette(x13)\n    x16 = other(x15, x4)\n    x17 = palette(x14)\n    x18 = other(x17, x4)\n    x19 = shape(x13)\n    x20 = canvas(x8, x19)\n    x21 = ofcolor(x13, x16)\n    x22 = ofcolor(x14, x18)\n    x23 = intersection(x21, x22)\n    O = fill(x20, TWO, x23)\n    return O"], [0.7946931652854432, "def solve_bec9c22f(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.7946931652854432, "def solve_f891c4a8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = objects(I, T, F, F)\n    x5 = totuple(x4)\n    x6 = apply(color, x5)\n    x7 = lbind(sfilter, x6)\n    x8 = lbind(matcher, identity)\n    x9 = chain(size, x7, x8)\n    x10 = valmax(x3, x9)\n    x11 = matcher(x9, x10)\n    x12 = sfilter(x3, x11)\n    x13 = lbind(colorcount, I)\n    x14 = argmin(x12, x13)\n    x15 = ofcolor(I, x14)\n    x16 = recolor(x14, x15)\n    x17 = apply(initset, x16)\n    x18 = remove(x16, x1)\n    x19 = lbind(argmin, x17)\n    x20 = lbind(rbind, manhattan)\n    x21 = compose(x19, x20)\n    x22 = fork(combine, identity, x21)\n    x23 = apply(x22, x18)\n    x24 = matcher(first, x14)\n    x25 = rbind(sfilter, x24)\n    x26 = chain(invert, ulcorner, x25)\n    x27 = fork(shift, identity, x26)\n    x28 = mapply(x27, x23)\n    x29 = normalize(x28)\n    x30 = shape(x29)\n    x31 = canvas(ZERO, x30)\n    O = paint(x31, x29)\n    return O"], [0.7946931652854432, "def solve_ee5d4af4(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.7946931652854432, "def solve_15e0cc19(I):\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    O = canvas(x1, x2)\n    return O"], [0.7946931652854432, "def solve_c5e68849(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1, ONE)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [0.8007924659719644, "def solve_6f902f4f(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = height(I)\n    x4 = decrement(x3)\n    x5 = toivec(x4)\n    x6 = branch(x2, x5, ORIGIN)\n    x7 = equality(x1, TWO)\n    x8 = shape(I)\n    x9 = decrement(x8)\n    x10 = width(I)\n    x11 = decrement(x10)\n    x12 = tojvec(x11)\n    x13 = branch(x7, x9, x12)\n    x14 = shape(I)\n    x15 = canvas(ZERO, x14)\n    x16 = connect(x6, x13)\n    O = fill(x15, FIVE, x16)\n    return O"], [0.8058042763965544, "def solve_57eacd28(I):\n    x1 = mostcolor(I)\n    x2 = matcher(first, x1)\n    x3 = compose(flip, x2)\n    x4 = width(I)\n    x5 = halve(x4)\n    x6 = compose(last, last)\n    x7 = matcher(x6, x5)\n    x8 = compose(flip, x7)\n    x9 = asobject(I)\n    x10 = fork(both, x3, x8)\n    x11 = sfilter(x9, x10)\n    O = fill(I, x1, x11)\n    return O"], [0.8141732132799135, "def solve_fc7a1cd2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8141732132799135, "def solve_a9ea423d(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8141732132799135, "def solve_a4ccf199(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x3, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x3, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x3, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8219390250871336, "def solve_f742d004(I):\n    x1 = switch(I, FOUR, EIGHT)\n    x2 = switch(x1, TWO, FOUR)\n    x3 = switch(x2, ONE, FOUR)\n    O = switch(x3, ONE, FIVE)\n    return O"], [0.8220447986833391, "def solve_2ef41eed(I):\n    x1 = switch(I, FIVE, EIGHT)\n    O = switch(x1, EIGHT, TWO)\n    return O"], [0.8277590843976249, "def solve_090595df(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_e1d87129(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_f1eccfa6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_952023cf(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_949e11ed(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_e631ca4e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_95e1f5bd(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_60dce097(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_995d0378(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_92cca2ad(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_4767b213(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_e57e3d16(I):\n    x1 = shape(I)\n    x2 = objects(I, T, F, F)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_7c821108(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_9020706d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_54bb6e26(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_093d45a4(I):\n    x1 = shape(I)\n    x2 = partition(I)\n    x3 = argmax(x2, size)\n    x4 = canvas(FIVE, x1)\n    O = paint(x4, x3)\n    return O"], [0.8277590843976249, "def solve_d9ab51fb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277590843976249, "def solve_0034d50a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = mapply(x13, x7)\n    O = paint(I, x14)\n    return O"], [0.8277652129751821, "def solve_1aa8aa90(I):\n    x1 = objects(I, T, F, F)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8277875214971026, "def solve_7e7a4dff(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8277875214971026, "def solve_a5917d87(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8277875214971026, "def solve_b35d6061(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8277875214971026, "def solve_818bb270(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8277875214971026, "def solve_57e90ff2(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = shift(x2, DOWN)\n    O = fill(x4, TWO, x5)\n    return O"], [0.8290364842464534, "def solve_fb2aaf40(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, EIGHT, x4)\n    return O"], [0.829564622162508, "def solve_ca25a111(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.829564622162508, "def solve_3ea6f7ae(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.829564622162508, "def solve_6f52b8e0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.829564622162508, "def solve_6b5ec5c6(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.829564622162508, "def solve_78f894b0(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [0.8296258545422006, "def solve_e3288b92(I):\n    O = trim(I)\n    return O"], [0.8302027575650787, "def solve_1c371af5(I):\n    x1 = trim(I)\n    x2 = objects(x1, F, T, T)\n    x3 = argmin(x2, numcolors)\n    x4 = normalize(x3)\n    x5 = toindices(x4)\n    x6 = prapply(connect, x5, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    O = underfill(x1, NEG_ONE, x8)\n    return O"], [0.830684761866442, "def solve_149172f1(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    O = fill(x3, EIGHT, x6)\n    return O"], [0.8309805019969229, "def solve_db2b3ef5(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.8309805019969229, "def solve_6368fafd(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.8309805019969229, "def solve_a928d1e8(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = lbind(recolor, EIGHT)\n    x4 = rbind(ofcolor, x1)\n    x5 = chain(x3, backdrop, x4)\n    x6 = fork(paint, identity, x5)\n    x7 = height(I)\n    x8 = vsplit(I, x7)\n    x9 = mapply(x6, x8)\n    x10 = ofcolor(x9, EIGHT)\n    x11 = dmirror(I)\n    x12 = width(I)\n    x13 = vsplit(x11, x12)\n    x14 = mapply(x6, x13)\n    x15 = dmirror(x14)\n    x16 = ofcolor(x15, EIGHT)\n    x17 = combine(x10, x16)\n    x18 = difference(x17, x2)\n    O = fill(I, EIGHT, x18)\n    return O"], [0.8336696758536934, "def solve_e2fd9a2f(I):\n    x1 = ofcolor(I, TWO)\n    x2 = ofcolor(I, THREE)\n    x3 = uppermost(x1)\n    x4 = leftmost(x1)\n    x5 = uppermost(x2)\n    x6 = leftmost(x2)\n    x7 = astuple(x3, x5)\n    x8 = minimum(x7)\n    x9 = maximum(x7)\n    x10 = astuple(x8, x6)\n    x11 = astuple(x9, x6)\n    x12 = connect(x10, x11)\n    x13 = astuple(x4, x6)\n    x14 = minimum(x13)\n    x15 = maximum(x13)\n    x16 = astuple(x3, x14)\n    x17 = astuple(x3, x15)\n    x18 = connect(x16, x17)\n    x19 = combine(x12, x18)\n    O = underfill(I, EIGHT, x19)\n    return O"], [0.8341973243152688, "def solve_a6c6d923(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = shift(x2, NEG_UNITY)\n    x4 = recolor(THREE, x3)\n    x5 = shift(x2, UNITY)\n    x6 = recolor(SEVEN, x5)\n    x7 = shift(x2, DOWN_LEFT)\n    x8 = recolor(EIGHT, x7)\n    x9 = shift(x2, UP_RIGHT)\n    x10 = recolor(SIX, x9)\n    x11 = mostcolor(I)\n    x12 = fill(I, x11, x2)\n    x13 = combine(x4, x6)\n    x14 = combine(x8, x10)\n    x15 = combine(x13, x14)\n    O = paint(x12, x15)\n    return O"], [0.8376932799217021, "def solve_eea4254d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8376932799217021, "def solve_a7c745de(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(combine, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [0.8413821632587991, "def solve_a1b6a9b4(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = shift(x3, DOWN)\n    x5 = fill(I, EIGHT, x4)\n    x6 = shift(x4, UP)\n    x7 = fill(x5, TWO, x6)\n    x8 = shift(x4, RIGHT)\n    x9 = fill(x7, SIX, x8)\n    x10 = shift(x4, LEFT)\n    O = fill(x9, SEVEN, x10)\n    return O"], [0.8527643475072834, "def solve_b21e7147(I):\n    x1 = replace(I, TWO, ZERO)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8530872511837071, "def solve_bb3654f7(I):\n    x1 = replace(I, FOUR, NEG_ONE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    x9 = hmirror(x8)\n    x10 = papply(pair, x8, x9)\n    x11 = apply(x4, x10)\n    x12 = vmirror(x11)\n    x13 = papply(pair, x12, x11)\n    O = apply(x4, x13)\n    return O"], [0.858414186390205, "def solve_c6314232(I):\n    x1 = replace(I, SEVEN, FIVE)\n    x2 = dmirror(x1)\n    x3 = papply(pair, x1, x2)\n    x4 = lbind(apply, maximum)\n    x5 = apply(x4, x3)\n    x6 = cmirror(x5)\n    x7 = papply(pair, x5, x6)\n    x8 = apply(x4, x7)\n    O = cmirror(x8)\n    return O"], [0.8616889960660732, "def solve_30cd65e1(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.8616889960660732, "def solve_5892fbd8(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.8621335034579425, "def solve_d35d909e(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8621335034579425, "def solve_d1c6a0d1(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8621335034579425, "def solve_8cef8041(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8621335034579425, "def solve_a3a308dc(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = argmax(x1, x2)\n    x5 = remove(x3, x1)\n    x6 = other(x5, x4)\n    x7 = subgrid(x6, I)\n    x8 = frontiers(x7)\n    x9 = sfilter(x8, hline)\n    x10 = size(x9)\n    x11 = positive(x10)\n    x12 = branch(x11, dmirror, identity)\n    x13 = x12(I)\n    x14 = color(x6)\n    x15 = ofcolor(x13, x14)\n    x16 = subgrid(x15, x13)\n    x17 = trim(x16)\n    x18 = lefthalf(x17)\n    x19 = vmirror(x18)\n    x20 = asobject(x19)\n    x21 = righthalf(x17)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x4)\n    x25 = inbox(x15)\n    x26 = backdrop(x25)\n    x27 = fill(x13, x24, x26)\n    x28 = urcorner(x15)\n    x29 = add(x28, UNITY)\n    x30 = shift(x23, x29)\n    x31 = ulcorner(x15)\n    x32 = width(x20)\n    x33 = invert(x32)\n    x34 = tojvec(x33)\n    x35 = add(DOWN, x34)\n    x36 = add(x31, x35)\n    x37 = shift(x20, x36)\n    x38 = combine(x30, x37)\n    x39 = paint(x27, x38)\n    O = x12(x39)\n    return O"], [0.8627265337429545, "def solve_2584638b(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = rbind(greater, ONE)\n    x5 = compose(x4, size)\n    x6 = sfilter(x3, x5)\n    x7 = fork(either, vline, hline)\n    x8 = mfilter(x6, x7)\n    x9 = fill(I, THREE, x8)\n    x10 = leastcolor(I)\n    O = fill(x9, x10, x2)\n    return O"], [0.8632184800688373, "def solve_fdb0acbe(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.8632184800688373, "def solve_e3338a93(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(matcher, first)\n    x10 = compose(x9, first)\n    x11 = lbind(matcher, last)\n    x12 = compose(x11, last)\n    x13 = fork(x8, x10, x12)\n    x14 = lbind(sfilter, x2)\n    x15 = chain(size, x14, x13)\n    x16 = asindices(I)\n    x17 = corners(x16)\n    x18 = argmax(x17, x15)\n    x19 = mostcolor(I)\n    x20 = initset(x18)\n    O = fill(x7, x19, x20)\n    return O"], [0.8634577218981633, "def solve_4331602b(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.8634577218981633, "def solve_bb497512(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.8634577218981633, "def solve_6866a66a(I):\n    x1 = mostcolor(I)\n    x2 = palette(I)\n    x3 = remove(x1, x2)\n    x4 = totuple(x3)\n    x5 = first(x4)\n    x6 = last(x4)\n    x7 = ofcolor(I, x5)\n    x8 = backdrop(x7)\n    x9 = ofcolor(I, x6)\n    x10 = backdrop(x9)\n    x11 = intersection(x8, x10)\n    x12 = outbox(x11)\n    O = fill(I, FOUR, x12)\n    return O"], [0.863678348633302, "def solve_b80839e3(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863678348633302, "def solve_8a97cf2f(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = delta(x3)\n    O = fill(I, THREE, x4)\n    return O"], [0.863706518437685, "def solve_b0bb12b6(I):\n    O = dmirror(I)\n    return O"], [0.863706518437685, "def solve_94df2242(I):\n    O = dmirror(I)\n    return O"], [0.8637867634430995, "def solve_ca2e63dc(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.8637867634430995, "def solve_c336986f(I):\n    x1 = mostcolor(I)\n    x2 = vsplit(I, TWO)\n    x3 = apply(numcolors, x2)\n    x4 = contained(ONE, x3)\n    x5 = branch(x4, hmirror, vmirror)\n    x6 = x5(I)\n    x7 = asobject(x6)\n    x8 = matcher(first, x1)\n    x9 = compose(flip, x8)\n    x10 = sfilter(x7, x9)\n    O = paint(I, x10)\n    return O"], [0.8637867634430995, "def solve_d25ff74b(I):\n    x1 = tophalf(I)\n    x2 = numcolors(x1)\n    x3 = equality(x2, ONE)\n    x4 = bottomhalf(I)\n    x5 = numcolors(x4)\n    x6 = equality(x5, ONE)\n    x7 = either(x3, x6)\n    x8 = branch(x7, identity, dmirror)\n    x9 = x8(I)\n    x10 = asobject(x9)\n    x11 = hmirror(x10)\n    x12 = mostcolor(I)\n    x13 = matcher(first, x12)\n    x14 = compose(flip, x13)\n    x15 = sfilter(x11, x14)\n    x16 = paint(x9, x15)\n    O = x8(x16)\n    return O"], [0.8638448240547932, "def solve_0a800fed(I):\n    x1 = objects(I, T, F, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = difference(x1, x2)\n    x4 = apply(color, x3)\n    x5 = rbind(contained, x4)\n    x6 = compose(x5, color)\n    x7 = sfilter(x2, x6)\n    x8 = lbind(colorfilter, x3)\n    x9 = chain(first, x8, color)\n    x10 = fork(gravitate, identity, x9)\n    x11 = fork(shift, identity, x10)\n    x12 = merge(x2)\n    x13 = mapply(x11, x7)\n    x14 = cover(I, x12)\n    O = paint(x14, x13)\n    return O"], [0.8638512990612682, "def solve_bd230512(I):\n    x1 = objects(I, T, T, T)\n    x2 = sizefilter(x1, ONE)\n    x3 = merge(x2)\n    O = move(I, x3, TWO_BY_ZERO)\n    return O"], [0.8638701955087361, "def solve_0c392024(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_d7635a44(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_716a174e(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_84df100f(I):\n    O = subgrid(I, I)\n    return O"], [0.8638701955087361, "def solve_bd397569(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.8638701955087361, "def solve_f4dc5c76(I):\n    x1 = asindices(I)\n    x2 = box(x1)\n    O = fill(I, ZERO, x2)\n    return O"], [0.8638701955087361, "def solve_8662fe6e(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_8f0b143a(I):\n    O = subgrid(I, I)\n    return O"], [0.8638701955087361, "def solve_1e890bf3(I):\n    x1 = initset(ORIGIN)\n    x2 = recolor( ZERO, x1)\n    x3 = upscale(x2, TWO)\n    x4 = occurrences(I, x3)\n    x5 = lbind(shift, x3)\n    x6 = mapply(x5, x4)\n    O = fill(I, ZERO, x6)\n    return O"], [0.8638701955087361, "def solve_4d895346(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_1e271162(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.8638701955087361, "def solve_50c95d2f(I):\n    x1 = portrait(I)\n    x2 = branch(x1, vsplit, hsplit)\n    x3 = shape(I)\n    x4 = maximum(x3)\n    x5 = minimum(x3)\n    x6 = divide(x4, x5)\n    x7 = x2(I, x6)\n    x8 = fork(equality, identity, dmirror)\n    x9 = compose(flip, x8)\n    O = extract(x7, x9)\n    return O"], [0.8638701955087361, "def solve_253b805d(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_e1663f1d(I):\n    O = replace(I, FIVE, ZERO)\n    return O"], [0.8638701955087361, "def solve_cc3913f6(I):\n    x1 = objects(I, T, F, F)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = rbind(greater, ONE)\n    x4 = chain(x3, minimum, shape)\n    x5 = fork(both, x2, x4)\n    x6 = sfilter(x1, x5)\n    x7 = compose(backdrop, inbox)\n    x8 = mapply(x7, x6)\n    O = fill(I, THREE, x8)\n    return O"], [0.8638701955087361, "def solve_d617735a(I):\n    x1 = lbind(equality, NINE)\n    x2 = compose(x1, size)\n    x3 = fork(equality, height, width)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, T, F, F)\n    x6 = sfilter(x5, x4)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = compose(x7, center)\n    x9 = mapply(x8, x6)\n    O = underfill(I, SIX, x9)\n    return O"], [0.8638701955087361, "def solve_c5ebf15c(I):\n    O = subgrid(I, I)\n    return O"], [0.8638701955087361, "def solve_ba808568(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.8638701955087361, "def solve_c306676f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = subgrid(x2, I)\n    return O"], [0.8638701955087361, "def solve_c3d61afd(I):\n    x1 = subgrid(I, I)\n    x2 = ofcolor(x1, ZERO)\n    x3 = asindices(x1)\n    x4 = difference(x3, x2)\n    x5 = normalize(x4)\n    x6 = objects(I, T, F, T)\n    x7 = compose(toindices, normalize)\n    x8 = matcher(x7, x5)\n    x9 = mfilter(x6, x8)\n    x10 = fill(x1, ONE, x9)\n    x11 = asobject(x1)\n    O = paint(x10, x11)\n    return O"], [0.8638701955087361, "def solve_47da62e8(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, EIGHT, x6)\n    return O"], [0.8638701955087361, "def solve_6826cc57(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = argmax(x2, size)\n    x4 = subgrid(x3, I)\n    x5 = normalize(x3)\n    x6 = toindices(x5)\n    x7 = subgrid(x3, x4)\n    x8 = lbind(shift, x6)\n    x9 = compose(x8, ulcorner)\n    x10 = argmax(x2, x9)\n    O = paint(x7, x10)\n    return O"], [0.8638701955087361, "def solve_3bcc10c4(I):\n    x1 = fgpartition(I)\n    x2 = rbind(other, FIVE)\n    x3 = compose(x2, palette)\n    x4 = fork(recolor, x3, identity)\n    x5 = apply(x4, x1)\n    x6 = mfilter(x5, x2)\n    O = paint(I, x6)\n    return O"], [0.8638701955087361, "def solve_dea0c6de(I):\n    x1 = objects(I, T, F, F)\n    x2 = sfilter(x1, square)\n    x3 = compose(even, height)\n    x4 = sfilter(x2, x3)\n    x5 = difference(x2, x4)\n    x6 = merge(x4)\n    x7 = merge(x5)\n    x8 = fill(I, TWO, x6)\n    O = fill(x8, SEVEN, x7)\n    return O"], [0.8638701955087361, "def solve_a676a927(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = lbind(multiply, x23)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = apply(x24, x26)\n    x28 = lbind(shift, x13)\n    x29 = mapply(x28, x27)\n    O = paint(I, x29)\n    return O"], [0.8638701955087361, "def solve_a4fcfad4(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = compose(increment, double)\n    x4 = shoot(ORIGIN, UNITY)\n    x5 = apply(x3, x4)\n    x6 = order(x5, identity)\n    x7 = lbind(contained, ZERO)\n    x8 = sfilter(x2, x7)\n    x9 = lbind(shift, x6)\n    x10 = mapply(x9, x8)\n    O = fill(I, FOUR, x10)\n    return O"], [0.8638701955087361, "def solve_1e80ad71(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.8638701955087361, "def solve_7aefc0d9(I):\n    x1 = objects(I, T, F, F)\n    x2 = mostcolor(I)\n    x3 = colorfilter(x1, x2)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    O = fill(I, SIX, x6)\n    return O"], [0.8638701955087361, "def solve_aa743878(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(last, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.8638701955087361, "def solve_87def718(I):\n    x1 = index(I, ORIGIN)\n    x2 = shape(I)\n    x3 = canvas(x1, x2)\n    x4 = hconcat(I, x3)\n    x5 = objects(x4, F, F, T)\n    x6 = compose(first, centerofmass)\n    x7 = order(x5, x6)\n    x8 = size(x7)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = rbind(multiply, THREE)\n    x12 = rbind(divide, THREE)\n    x13 = chain(x11, x12, last)\n    x14 = fork(equality, last, x13)\n    x15 = sfilter(x10, x14)\n    x16 = mapply(first, x15)\n    O = fill(I, FOUR, x16)\n    return O"], [0.8638701955087361, "def solve_6eab9749(I):\n    x1 = objects(I, T, F, T)\n    x2 = matcher(size, TWO)\n    x3 = mfilter(x1, x2)\n    x4 = matcher(size, THREE)\n    x5 = mfilter(x1, x4)\n    x6 = matcher(size, FOUR)\n    x7 = mfilter(x1, x6)\n    x8 = fill(I, THREE, x3)\n    x9 = fill(x8, TWO, x5)\n    O = fill(x9, ONE, x7)\n    return O"], [0.8638701955087361, "def solve_7b81549e(I):\n    x1 = frontiers(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = leastcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = sfilter(x1, x5)\n    x7 = merge(x6)\n    x8 = color(x7)\n    x9 = shape(I)\n    x10 = canvas(x8, x9)\n    x11 = hconcat(I, x10)\n    x12 = objects(x11, F, T, T)\n    x13 = first(x12)\n    x14 = box(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, last)\n    x17 = sfilter(x13, x16)\n    x18 = color(x17)\n    x19 = palette(I)\n    x20 = remove(x8, x19)\n    x21 = other(x20, x18)\n    x22 = rbind(colorcount, x18)\n    x23 = argmin(x12, x22)\n    x24 = apply(ulcorner, x12)\n    x25 = normalize(x23)\n    x26 = matcher(first, x21)\n    x27 = sfilter(x25, x26)\n    x28 = toindices(x27)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x24)\n    x31 = ofcolor(I, x21)\n    x32 = difference(x30, x31)\n    O = fill(I, x8, x32)\n    return O"], [0.8638701955087361, "def solve_fdd753a2(I):\n    x1 = palette(I)\n    x2 = remove(FIVE, x1)\n    x3 = first(x2)\n    x4 = ofcolor(I, x3)\n    x5 = fill(I, ZERO, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fill(x5, x3, x6)\n    return O"], [0.8638763240862932, "def solve_7a6bf329(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8638763240862932, "def solve_3a7ae0e6(I):\n    x1 = objects(I, T, F, T)\n    x2 = mapply(delta, x1)\n    O = fill(I, SEVEN, x2)\n    return O"], [0.8638878416543551, "def solve_eb35c029(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = partition(I)\n    x4 = colorfilter(x3, ZERO)\n    x5 = difference(x3, x4)\n    x6 = merge(x5)\n    x7 = astuple(x1, ONE)\n    x8 = astuple(ONE, x2)\n    x9 = decrement(x1)\n    x10 = decrement(x2)\n    x11 = toivec(x10)\n    x12 = tojvec(x9)\n    x13 = crop(I, x11, x8)\n    x14 = crop(I, x12, x7)\n    x15 = asobject(x14)\n    x16 = asobject(x13)\n    x17 = vperiod(x15)\n    x18 = hperiod(x16)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x6)\n    x25 = mapply(x24, x23)\n    O = paint(I, x25)\n    return O"], [0.8638891638983809, "def solve_20cfb589(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8638891638983809, "def solve_c4d662f6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8638891638983809, "def solve_c209138f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, TWO, x2)\n    return O"], [0.8638891638983809, "def solve_eafcc2cc(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    O = fill(I, FOUR, x2)\n    return O"], [0.8639438916538609, "def solve_f2096b1e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_c5de83a6(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_ca7c0ca7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_5ac41180(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_0116f63a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_c4e09e7a(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_635666e9(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_4d23bdfb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_48a20be5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_4e04410e(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_37640ca1(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_c47b744d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_b7ac1985(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_07802807(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_c7444194(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_34d02bd8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_7d9c0725(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmax(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_b4aed7d9(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = leastcolor(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, numcolors)\n    x9 = apply(ulcorner, x7)\n    x10 = normalize(x8)\n    x11 = lbind(shift, x10)\n    x12 = mapply(x11, x9)\n    O = paint(I, x12)\n    return O"], [0.8639438916538609, "def solve_77938cf3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_45579b98(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8639438916538609, "def solve_54f42531(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(center, x7)\n    x9 = normalize(x6)\n    x10 = shape(x6)\n    x11 = halve(x10)\n    x12 = invert(x11)\n    x13 = shift(x9, x12)\n    x14 = lbind(shift, x13)\n    x15 = mapply(x14, x8)\n    O = paint(I, x15)\n    return O"], [0.8640253338383225, "def solve_ea8e4685(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8640253338383225, "def solve_e0139862(I):\n    x1 = shape(I)\n    x2 = halve(x1)\n    x3 = rbind(shoot, UP_RIGHT)\n    x4 = rbind(shoot, DOWN_LEFT)\n    x5 = fork(combine, x3, x4)\n    x6 = rbind(shoot, UNITY)\n    x7 = rbind(shoot, NEG_UNITY)\n    x8 = fork(combine, x6, x7)\n    x9 = fork(combine, x5, x8)\n    x10 = index(I, x2)\n    x11 = x9(x2)\n    O = fill(I, x10, x11)\n    return O"], [0.8641376097298877, "def solve_4c92211f(I):\n    O = rot180(I)\n    return O"], [0.8641376097298877, "def solve_d9c1689d(I):\n    O = hmirror(I)\n    return O"], [0.8641376097298877, "def solve_61c15cb1(I):\n    O = rot180(I)\n    return O"], [0.8641376097298877, "def solve_cf3977c7(I):\n    x1 = dmirror(I)\n    x2 = ofcolor(x1, FIVE)\n    x3 = compose(even, last)\n    x4 = sfilter(x2, x3)\n    x5 = fill(x1, ZERO, x4)\n    O = cmirror(x5)\n    return O"], [0.8641376097298877, "def solve_1ed0f29e(I):\n    x1 = rot270(I)\n    x2 = rbind(order, identity)\n    x3 = apply(x2, x1)\n    O = rot90(x3)\n    return O"], [0.8641453134548085, "def solve_fe14b80d(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_07bc7bf8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_fc85e1e8(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_fe4f2046(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_f33b236f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_ab955f5f(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_bf9ff8c6(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_f587dd24(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641453134548085, "def solve_f56a5596(I):\n    x1 = palette(I)\n    x2 = remove(ZERO, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = lbind(prapply, connect)\n    x5 = fork(x4, x3, x3)\n    x6 = compose(merge, x5)\n    x7 = fork(recolor, identity, x6)\n    x8 = mapply(x7, x2)\n    O = paint(I, x8)\n    return O"], [0.8641474651177995, "def solve_ae731499(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.8641474651177995, "def solve_0dd0fea7(I):\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 = matcher(dedupe, x3)\n    x7 = rbind(branch, identity)\n    x8 = rbind(x7, x5)\n    x9 = compose(x8, x6)\n    x10 = compose(initset, x9)\n    x11 = fork(rapply, x10, identity)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = dmirror(x1)\n    x15 = apply(x12, x14)\n    x16 = dmirror(x15)\n    x17 = ofcolor(x13, THREE)\n    x18 = ofcolor(x16, THREE)\n    x19 = combine(x17, x18)\n    x20 = shift(x19, UNITY)\n    O = fill(I, THREE, x20)\n    return O"], [0.8641766243865936, "def solve_635ec628(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = height(x2)\n    x4 = height(I)\n    x5 = interval(ZERO, x4, x3)\n    x6 = lbind(shift, x2)\n    x7 = compose(x6, tojvec)\n    x8 = compose(x7, invert)\n    x9 = fork(combine, x7, x8)\n    x10 = mapply(x9, x5)\n    O = paint(I, x10)\n    return O"], [0.8644669437834643, "def solve_04afbd25(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_dd66d4d8(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.8644669437834643, "def solve_27604466(I):\n    x1 = lbind(compose, flip)\n    x2 = lbind(matcher, first)\n    x3 = compose(x1, x2)\n    x4 = rbind(compose, asobject)\n    x5 = lbind(rbind, sfilter)\n    x6 = chain(x4, x5, x3)\n    x7 = rbind(shift, ORIGIN)\n    x8 = compose(x7, dmirror)\n    x9 = rbind(shift, TWO_BY_TWO)\n    x10 = compose(x9, cmirror)\n    x11 = rbind(shift, TWO_BY_ZERO)\n    x12 = compose(x11, hmirror)\n    x13 = rbind(shift, ZERO_BY_TWO)\n    x14 = compose(x13, vmirror)\n    x15 = lbind(fork, paint)\n    x16 = lbind(x15, identity)\n    x17 = lbind(compose, x8)\n    x18 = chain(x16, x17, x6)\n    x19 = lbind(compose, x10)\n    x20 = chain(x16, x19, x6)\n    x21 = lbind(compose, x12)\n    x22 = chain(x16, x21, x6)\n    x23 = lbind(compose, x14)\n    x24 = chain(x16, x23, x6)\n    x25 = rbind(rapply, I)\n    x26 = chain(first, x25, initset)\n    x27 = fork(compose, x24, x22)\n    x28 = fork(compose, x20, x18)\n    x29 = fork(compose, x27, x28)\n    x30 = compose(x26, x29)\n    x31 = palette(I)\n    x32 = fork(equality, identity, dmirror)\n    x33 = compose(x32, x30)\n    x34 = argmax(x31, x33)\n    O = x30(x34)\n    return O"], [0.864487569023801, "def solve_c47b6abd(I):\n    x1 = asobject(I)\n    x2 = shape(I)\n    x3 = decrement(x2)\n    x4 = index(I, x3)\n    x5 = double(x2)\n    x6 = canvas(x4, x5)\n    x7 = paint(x6, x1)\n    x8 = objects(x7, F, F, T)\n    x9 = first(x8)\n    x10 = shift(x9, LEFT)\n    x11 = vperiod(x10)\n    x12 = hperiod(x10)\n    x13 = neighbors(ORIGIN)\n    x14 = lbind(mapply, neighbors)\n    x15 = power(x14, TWO)\n    x16 = x15(x13)\n    x17 = astuple(x11, x12)\n    x18 = lbind(multiply, x17)\n    x19 = apply(x18, x16)\n    x20 = lbind(shift, x10)\n    x21 = mapply(x20, x19)\n    O = paint(I, x21)\n    return O"], [0.8649127939257487, "def solve_5891b45d(I):\n    x1 = objects(I, T, F, T)\n    x2 = fork(combine, vfrontier, hfrontier)\n    x3 = compose(x2, center)\n    x4 = mapply(x3, x1)\n    O = underfill(I, FOUR, x4)\n    return O"], [0.8654574970960377, "def solve_6020cdb7(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind(multiply, THREE)\n    x6 = rbind(divide, THREE)\n    x7 = compose(x5, x6)\n    x8 = fork(equality, identity, x7)\n    x9 = toindices(x4)\n    x10 = compose(x8, last)\n    x11 = sfilter(x9, x10)\n    O = fill(I, SIX, x11)\n    return O"], [0.8655669058630684, "def solve_d9a5abeb(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, FOUR, x5)\n    return O"], [0.8656237858337551, "def solve_bc1daf90(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = mapply(neighbors, x2)\n    x4 = difference(x3, x2)\n    O = fill(I, ONE, x4)\n    return O"], [0.8659287967270011, "def solve_47ff83cc(I):\n    x1 = mostcolor(I)\n    x2 = asobject(I)\n    x3 = matcher(first, x1)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = apply(initset, x5)\n    x7 = apply(toindices, x6)\n    x8 = rbind(shoot, RIGHT)\n    x9 = compose(x8, center)\n    x10 = fork(recolor, color, x9)\n    x11 = mapply(x10, x6)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = apply(double, x14)\n    x16 = apply(increment, x15)\n    x17 = apply(tojvec, x16)\n    x18 = prapply(shift, x7, x17)\n    x19 = merge(x18)\n    O = fill(x12, FIVE, x19)\n    return O"], [0.8671518144939053, "def solve_662408df(I):\n    x1 = ofcolor(I, TWO)\n    x2 = urcorner(x1)\n    x3 = shoot(x2, UP_RIGHT)\n    x4 = shoot(x2, DOWN_LEFT)\n    x5 = underfill(I, THREE, x3)\n    x6 = underfill(x5, ONE, x4)\n    x7 = rbind(shoot, LEFT)\n    x8 = mapply(x7, x3)\n    x9 = mapply(x7, x4)\n    x10 = underfill(x6, ONE, x9)\n    O = underfill(x10, THREE, x8)\n    return O"], [0.8684204478249318, "def solve_641c4fad(I):\n    x1 = canvas(ZERO, TWO_BY_TWO)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_6def0516(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_5a0a1103(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_088f478e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_5b5cad0e(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_65f22565(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_66feb675(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8687415090376716, "def solve_12ea1016(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = occurrences(I, x2)\n    x4 = lbind(shift, x2)\n    x5 = mapply(x4, x3)\n    O = fill(I, ONE, x5)\n    return O"], [0.8708731711427667, "def solve_abf4e182(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = fill(x11, ZERO, x7)\n    x13 = ofcolor(x12, ZERO)\n    x14 = asindices(x12)\n    x15 = ofcolor(x12, TWO)\n    x16 = mapply(ineighbors, x15)\n    O = fill(x12, ZERO, x16)\n    return O"], [0.895840777338116, "def solve_1ffcec24(I):\n    x1 = index(I, ORIGIN)\n    x2 = objects(I, T, F, T)\n    x3 = fork(connect, ulcorner, centerofmass)\n    x4 = mapply(x3, x2)\n    x5 = fill(I, x1, x4)\n    O = replace(x5, ZERO, THREE)\n    return O"], [0.895840777338116, "def solve_b6d682da(I):\n    x1 = partition(I)\n    x2 = fork(equality, toindices, backdrop)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = matcher(color, x5)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x1, x7)\n    x9 = merge(x8)\n    x10 = fill(I, TWO, x9)\n    x11 = mapply(box, x8)\n    x12 = fill(x10, FOUR, x11)\n    x13 = mapply(corners, x8)\n    O = fill(x12, ONE, x13)\n    return O"], [0.895840777338116, "def solve_18cebbff(I):\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, size)\n    x6 = argmax(x4, size)\n    x7 = hmatching(x5, x6)\n    x8 = branch(x7, vmirror, hmirror)\n    x9 = x8(x6)\n    x10 = branch(x7, leftmost, uppermost)\n    x11 = branch(x7, tojvec, toivec)\n    x12 = x10(x5)\n    x13 = x10(x6)\n    x14 = greater(x12, x13)\n    x15 = double(x14)\n    x16 = decrement(x15)\n    x17 = x11(x16)\n    x18 = shape(x6)\n    x19 = multiply(x17, x18)\n    x20 = shift(x9, x19)\n    x21 = fill(I, THREE, x3)\n    O = paint(x21, x20)\n    return O"], [1.0, "def solve_e429b307(I):\n    x1 = lefthalf(I)\n    x2 = righthalf(I)\n    x3 = vmirror(x2)\n    x4 = width(O)\n    x5 = hsplit(I, x4)\n    x6 = first(x5)\n    x7 = mostcolor(x6)\n    x8 = objects(x3, T, F, F)\n    x9 = matcher(color, x7)\n    x10 = compose(flip, x9)\n    x11 = sfilter(x8, x10)\n    x12 = merge(x11)\n    O = paint(x1, x12)\n    return O"], [1.0, "def solve_2efc50dd(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_c75443ff(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = subgrid(x2, I)\n    x4 = shape(x3)\n    x5 = canvas(ZERO, x4)\n    x6 = hconcat(x3, x5)\n    x7 = palette(x6)\n    x8 = remove(ZERO, x7)\n    x9 = other(x8, FOUR)\n    x10 = ofcolor(x6, x9)\n    x11 = ofcolor(x6, FOUR)\n    x12 = fill(x5, NINE, x11)\n    x13 = mapply(vfrontier, x10)\n    x14 = mapply(hfrontier, x11)\n    x15 = fill(x12, NEG_ONE, x14)\n    x16 = fill(x15, FOUR, x13)\n    x17 = fill(x16, ZERO, x12)\n    O = fill(x17, FIVE, x16)\n    return O"], [1.0, "def solve_dc193ef5(I):\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = fork(equality, toindices, box)\n    x5 = sfilter(x3, x4)\n    x6 = fork(multiply, height, width)\n    x7 = argmax(x5, x6)\n    x8 = mostcolor(I)\n    x9 = inbox(x7)\n    x10 = backdrop(x9)\n    x11 = toobject(x10, I)\n    x12 = matcher(first, x8)\n    x13 = compose(flip, x12)\n    x14 = sfilter(x11, x13)\n    x15 = hfill(I, TWO, x14)\n    x16 = color(x7)\n    x17 =box(x7)\n    x18 = fill(x15, x16, x17)\n    x19 = subgrid(x15, x18)\n    x20 = asobject(x19)\n    x21 = matcher(first, x8)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x25, hsplit, vsplit)\n    x27 = x26(I, TWO)\n    x28 = shape(x27)\n    x29 = canvas(x8, x28)\n    x30 = multiply(x28, x29)\n    x31 = shift(x23, x30)\n    x32 = paint(x29, x31)\n    x33 = rbind(contained, x32)\n    x34 = sfilter(x17, x33)\n    x35 = compose(hline, vline)\n    x36 = sfilter(x14, x35)\n    x37 = subgrid(x36, x32)\n    O = paint(x37, x31)\n    return O"], [1.0, "def solve_2b697a73(I):\n    x1 = astuple(I, THREE)\n    x2 = astuple(x1, x1)\n    x3 = astuple(LEFT, UNITY)\n    x4 = astuple(NEG_UNITY, x3)\n    x5 = astuple(rot90, x4)\n    x6 = astuple(rot180, x4)\n    x7 = astuple(rot270, x4)\n    x8 = initset(x5)\n    x9 = insert(x6, x8)\n    x10 = insert(x7, x9)\n    x11 = mapply(x10, x6)\n    O = underfill(I, ZERO, x11)\n    return O"], [1.0, "def solve_2e99ed2b(I):\n    x1 = frontiers(I)\n    x2 = crop(I, ORIGIN, THREE_BY_THREE)\n    O = move(x2, x100, x2)\n    return O"], [1.0, "def solve_461a90fb(I):\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = astuple(x22, x18)\n    x24 = add(x23, x18)\n    x25 = neighbors(ORIGIN)\n    x26 = mapply(neighbors, x25)\n    x27 = paint(I, x26)\n    x28 = ofcolor(x27, x9)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x27)\n    O = paint(x27, x30)\n    return O"], [1.0, "def solve_f5ff553e(I):\n    x1 = objects(I, T, F, T)\n    x2 = Tizefilter(x1, ONE)\n    x3 = mapply(neighbors, x2)\n    O = underfill(I, ONE, x3)\n    return O"], [1.0, "def solve_c8bbd18c(I):\n    x1 = ofcolor(I, ZERO)\n    x2 = subgrid(x1, I)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = ulcorner(x1)\n    x6 = toindices(x5)\n    x7 = shape(x3)\n    x8 = add(x5, x7)\n    x9 = initset(x8)\n    x10 = shift(x3, x9)\n    x11 = toindices(x10)\n    x12 = fgpartition(x2)\n    x13 = merge(x12)\n    x14 = cover(I, x13)\n    x15 = fgpartition(x2)\n    x16 = merge(x15)\n    x17 = paint(x14, x16)\n    x18 = height(x11)\n    x19 = width(x11)\n    x20 = divide(x18, x19)\n    x21 = increment(x20)\n    x22 = interval(ZERO, x21, ONE)\n    x23 = Fgpartition(x17)\n    x24 = merge(x23)\n    x25 = mostcolor(I)\n    x26 = combine(x23, x24)\n    x27 = fill(x17, x25, x26)\n    x28 = astuple(x27, x920)\n    x29 = canvas(ZERO, x28)\n    x30 = asindices(x29)\n    x31 = recolor(x25, x30)\n    x32 = lbind(shift, x31)\n    x33 = occurrences(x27, x32)\n    x34 = mapply(x33, x22)\n    O = fill(x27, x25, x34)\n    return O"], [1.0, "def solve_7d5ac4ae(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_88cbc542(I):\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = argmin(x2, x3)\n    x5 = colorfilter(x1, x4)\n    x6 = rbind(vmatching, x4)\n    x7 = rbind(hmatching, x4)\n    x8 = fork(either, x6, x7)\n    x9 = extract(x5, x8)\n    x10 = rbind(gravitate, x4)\n    x11 = compose(center, x10)\n    x12 = fork(add, center, x11)\n    x13 = fork(connect, x12, backdrop)\n    x14 = shape(x9)\n    x15 = maximum(x14)\n    x16 = interval(ONE, x15, ONE)\n    x17 = rbind(multiply, x16)\n    x18 = apply(x17, x3)\n    x19 = lbind(shift, x9)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = canvas(ZERO, x4)\n    return O"], [1.0, "def solve_23d7a91f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x18)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_0f143e14(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_506ee0e1(I):\n    x1 = height(I)\n    x2 = rot90(I)\n    x3 = subtract(x1, TWO)\n    x4 = multiply(NEG_ONE, THREE)\n    x5 = tojvec(x3)\n    x6 = shift(x2, x5)\n    O = underfill(I, THREE, x6)\n    return O"], [1.0, "def solve_0f8aa01b(I):\n    x1 = initset(identity)\n    x2 = box(x1)\n    O = fill(I, EIGHT, x2)\n    return O"], [1.0, "def solve_03687d0a(I):\n    x1 = lbind(apply, maximum)\n    x2 = lbind(apply, downscale)\n    x3 = chain(x1, x2, frontiers)\n    x4 = fork(positive, size, dedupe)\n    x5 = lbind(apply, shape)\n    x6 = height(I)\n    x7 = lbind(pair, I)\n    x8 = chain(x4, x5, x7)\n    x9 = rbind(toobject, I)\n    x10 = compose(color, x8)\n    x11 = fork(both, x9, x10)\n    x12 = extract(x10, x11)\n    x13 = rbind(colorcount, x12)\n    x14 = argmin(x12, x13)\n    x15 = delta(x14)\n    x16 = astuple(x11, x10)\n    x17 = repeat(x16, ONE)\n    x18 = combine(x15, x17)\n    x19 = mpapply(recolor, x18, x13)\n    O = paint(I, x19)\n    return O"], [1.0, "def solve_b735f956(I):\n    x1 = objects(I, T, F, F)\n    x2 = replace(I, NINE, ZERO)\n    x3 = colorfilter(x1, NINE)\n    x4 = mapply(d4f5)\n    x5 = fill(x2,140, x4)\n    x6 = mapply(ff805, x5)\n    O = fill(x5, ONE, x6)\n    return O"], [1.0, "def solve_e3198cc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x39, x7)\n    x11 = remove(x8, x10)\n    x22 = merge(x11)\n    x23 = color(x12)\n    x24 = color(x8)\n    x25 = combine(x23, x24)\n    x26 = intersection(x22, x25)\n    O = fill(I, x13, x26)\n    return O"], [1.0, "def solve_d1cadab6(I):\n    x1 = mostcolor(I)\n    x2 = box(I)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = palette(I)\n    x6 = remove(x4, x5)\n    x7 = lbind(chain, size)\n    x8 = rbind(x7, dneighbors)\n    x9 = lbind(lbind, intersection)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(x8, x9, x10)\n    x12 = rbind(matcher, ZERO)\n    x13 = compose(x12, x11)\n    x14 = chain(flip, positive, size)\n    x15 = lbind(ofcolor, I)\n    x16 = fork(sfilter, x15, x13)\n    x17 = compose(x14, x16)\n    x18 = argmax(x6, x17)\n    x19 = other(x6, x18)\n    x20 = ofcolor(I, x18)\n    x21 = subgrid(x20, I)\n    x22 = switch(x21, x18, x19)\n    x23 = replace(x22, x18, x4)\n    x24 = lbind(downscale, x23)\n    x25 = fork(upscale, x24, identity)\n    x26 = matcher(x25, x23)\n    x27 = shape(x23)\n    x28 = maximum(x27)\n    x29 = interval(ONE, x28, ONE)\n    x30 = sfilter(x29, x26)\n    x31 = maximum(x30)\n    O = downscale(x23, x31)\n    return O"], [1.0, "def solve_25b615f2(I):\n    x1 = objects(I, T, F, T)\n    x2 = rbind(shoot, DOWN)\n    x3 = compose(x2, center)\n    x4 = fork(recolor, color, x3)\n    x5 = mapply(x4, x1)\n    x6 = paint(I, x5)\n    x7 = add(x26, THREE)\n    x8 = connect(x7, x7)\n    O = fork(recolor, color, x8)\n    return O"], [1.0, "def solve_52edf60f(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_97ffdbba(I):\n    x1 = rbind(greater, TWO)\n    x2 = chain(x1, minimum, shape)\n    x3 = fork(equality, toindices, box)\n    x4 = fork(both, x2, x3)\n    x5 = objects(I, F, F, T)\n    x6 = sfilter(x5, x4)\n    x7 = difference(x5, x6)\n    O = fill(I, FOUR, x7)\n    return O"], [1.0, "def solve_d46a2c69(I):\n    x1 = vmirror(I)\n    x2 = equality(x1, I)\n    x3 = hmirror(I)\n    x4 = equality(x3, I)\n    x5 = either(x2, x4)\n    x6 = branch(x5, lefthalf, tophalf)\n    x7 = branch(x5, righthalf, bottomhalf)\n    x8 = branch(x5, hconcat, x7)\n    x9 = x6(x8)\n    x10 = branch(x5, compress, vmirror)\n    x11 = x5(x10)\n    x12 = ofcolor(x11, ZERO)\n    O = fill(x9, ZERO, x12)\n    return O"], [1.0, "def solve_da77fe4c(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = rbind(bordering, I)\n    x5 = compose(flip, x4)\n    x6 = mfilter(x3, x5)\n    x7 = outbox(x6)\n    x8 = subgrid(x7, I)\n    x9 = trim(x8)\n    x10 = palette(x9)\n    x11 = matcher(identity, x1)\n    x12 = argmin(x10, x11)\n    x13 = trim(x8)\n    x14 =outbox(x13)\n    x15 = ulcorner(x14)\n    x16 = invert(x15)\n    x17 = shift(x16, UNITY)\n    x18 = shift(x16, LEFT)\n    x19 = interval(x17, x18, ONE)\n    x20 = apply(tojvec, x19)\n    x21 = apply(vfrontier, x20)\n    x22 = mapply(x21, x2)\n    x23 = combine(x17, x17)\n    x24 = fill(x8, x1, x23)\n    x25 = fill(x24, x2, x22)\n    O = fill(x25, x23, x24)\n    return O"], [1.0, "def solve_21f49bcf(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9be1488a(I):\n    x1 = lbind(adjacent, I)\n    x2 = compose(x1, size)\n    x3 = fork(both, x2, box)\n    x4 = fork(both, x3, height)\n    x5 = fork(both, x4, width)\n    x6 = fork(both, hline, vline)\n    x7 = fork(both, center, rot90)\n    x8 = fork(both, center, rot270)\n    x9 = fork(both, x5, x6)\n    x10 = fork(both, x6, x8)\n    x11 = fork(connect, lefthalf, tophalf)\n    x12 = fork(branch, x11, x10)\n    x13 = fork(x12, positive, branch)\n    x14 = branch(x13, size, x7)\n    x15 = maximum(x14)\n    x16 = rot90(I)\n    x17 = double(x16)\n    x18 = interval(ONE, x17, ONE)\n    x19 = center(I)\n    x20 = pair(x18, x19)\n    x21 = objects(x23, F, T, T)\n    x22 = rbind(add, RIGHT)\n    x23 = compose(x22, center)\n    x24 = color(x23)\n    x25 = interval(ZERO, x17, ONE)\n    x26 = rbind(add, DOWN)\n    x27 = compose(x26, x23)\n    x28 = astuple(x15, x17)\n    x29 = astuple(x24, x23)\n    x30 = combine(x28, x29)\n    x31 = rbind(shoot, UP)\n    x32 = mapply(x31, x30)\n    x33 = fill(x23, FOUR, x32)\n    x34 = subgrid(x33, x20)\n    O = trim(x34)\n    return O"], [1.0, "def solve_f85106ea(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_541837c3(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_73bd7ba7(I):\n    x1 = trim(I)\n    x2 = repeat(dedupe, x1)\n    x3 = repeat(x2, ONE)\n    x4 = compress(x3)\n    x5 = width(x4)\n    x6 = halve(x5)\n    x7 = upscale(x4, x6)\n    x8 = height(x4)\n    x9 = interval(ZERO, x8, ONE)\n    x10 = pair(x7, x9)\n    x11 = lbind(shift, x4)\n    x12 = mapply(x11, x10)\n    O = paint(x4, x12)\n    return O"], [1.0, "def solve_307cd6bd(I):\n    x1 = palette(I)\n    x2 = other(x1, ZERO)\n    x3 = shape(I)\n    x4 = multiply(x3, x3)\n    x5 = canvas(ZERO, x4)\n    x6 = ofcolor(I, x2)\n    x7 = lbind(shift, x6)\n    x8 = shape(I)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x6)\n    x11 = mapply(x7, x10)\n    O = fill(x5, x2, x11)\n    return O"], [1.0, "def solve_bb620a85(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_b8608c19(I):\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = partition(I)\n    x4 = fork(multiply, height, width)\n    x5 = argmin(x3, x4)\n    x6 = difference(x3, x5)\n    x7 = height(I)\n    x8 = divide(x7, THREE)\n    x9 = width(I)\n    x10 = interval(THREE, x9, ONE)\n    x11 = pair(x5, x10)\n    x12 = sfilter(x11, last)\n    x13 = fork(add, first, last)\n    x14 = rbind(multiply, x8)\n    x15 = apply(x14, x12)\n    x16 = mapply(x13, x15)\n    O = fill(I, x1, x16)\n    return O"], [1.0, "def solve_66791150(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_6b1bba2a(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_f5e7d35f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_748c71ab(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_9d01c831(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_d24d1a03(I):\n    x1 = astuple(TEN, TEN)\n    x2 = canvas(ZERO, x1)\n    x3 = argmin(x2, size)\n    x4 = last(x2)\n    x5 = remove(x3, x2)\n    x6 = recolor(FIVE, x5)\n    x7 = recolor(lrcorner, x5)\n    x8 = add(x7, UNITY)\n    x9 = initset(x8)\n    x10 = insert(x6, x9)\n    x11 = branch(x4, x10, x3)\n    O = canvas(ZERO, x1)\n    return O"], [1.0, "def solve_a31d55d6(I):\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = matcher(first, x22)\n    x24 =sfilter(x21, x23)\n    x25 = chain(size, dedupe, first)\n    x26 = argmax(x24, x25)\n    x27 = matcher(first, x22)\n    x28 = sfilter(x24, x27)\n    x29 = difference(x28, x26)\n    x30 =matcher(first, x22)\n    x31 = sfilter(x29, x30)\n    x32 = combine(x26, x31)\n    x33 = mapply(x15, x32)\n    x34 = fill(I, THREE, x33)\n    O = fill(x34, EIGHT, x22)\n    return O"], [1.0, "def solve_2e5054dc(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_eb863460(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_487cb3b2(I):\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = ofcolor(I, x15)\n    x32 = intersection(x31, x30)\n    x33 = ofcolor(I, x19)\n    x34 = intersection(x33, x30)\n    x35 = fill(I, x10, x32)\n    O = fill(x35, x11, x34)\n    return O"], [1.0, "def solve_920e8a37(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_bb563887(I):\n    x1 = matcher(first, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_6ba5084d(I):\n    x1 = astuple(TWO, ONE)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = hmirror(x2)\n    x4 = vconcat(x2, x3)\n    x5 = objects(x4, T, F, T)\n    x6 = merge(x5)\n    x7 = index(x4, DOWN)\n    x8 = shoot(ORIGIN, UNITY)\n    x9 = lrcorner(x6)\n    x10 = shoot(x9, NEG_UNITY)\n    x11 = llcorner(x6)\n    x12 = shoot(x11, DOWN_LEFT)\n    x13 = combine(x8, x12)\n    x14 =Rbind(shoot, xdelta)\n    x15 = mapply(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = fill(x4, THREE, x16)\n    x18 = replace(x17, FIVE, ZERO)\n    O = x5(x18)\n    return O"], [1.0, "def solve_77fc21b4(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = objects(x1, T, F, F)\n    x4 = merge(x3)\n    x5 = palette(x4)\n    x6 = lbind(colorfilter, x3)\n    x7 = compose(size, x6)\n    x8 = matcher(x7, TWO)\n    x9 = palette(x2)\n    x10 = sfilter(x9, x8)\n    x11 = fork(equality, toindices, box)\n    x12 = rbind(contained, x5)\n    x13 = compose(x12, first)\n    x14 = rbind(contained, x10)\n    x15 = compose(x14, first)\n    x16 = fork(either, x13, x15)\n    x17 = fork(both, x11, x16)\n    x18 = extract(x5, x17)\n    x19 = other(x5, x18)\n    x20 = ofcolor(x4, x19)\n    x21 = rightmost(x20)\n    x22 = manhattan(x21, x18)\n    x23 = uppermost(x20)\n    x24 = decrement(x23)\n    x25 = leftmost(x20)\n    x26 = rbind(add, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x40, x27)\n    x29 = rbind(vmatching, x20)\n    x30 = sfilter(x4, x29)\n    x31 = fork(either, vline, hline)\n    x32 = mfilter(x30, x31)\n    x33 = fill(x1, x19, x32)\n    x34 = replace(x33, x19, x5)\n    O = fill(x34, x10, x32)\n    return O"], [1.0, "def solve_56db1905(I):\n    x1 = mostcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = prapply(connect, x2, x2)\n    x4 = mfilter(x3, vline)\n    x5 = underfill(I, EIGHT, x4)\n    x6 = matcher(numcolors, ONE)\n    x7 = objects(x5, F, F, T)\n    x8 = difference(x7, x2)\n    x9 = fill(x5, TWO, x8)\n    x10 = colorfilter(x9, EIGHT)\n    x11 = rbind(adjacent, x2)\n    x12 = mfilter(x10, x11)\n    x13 = mfilter(x10, x12)\n    x14 = underfill(x9, THREE, x13)\n    x15 = rbind(adjacent, x2)\n    x16 = mfilter(x14, x15)\n    x17 = mfilter(x14, x16)\n    x18 = colorfilter(x17, TWO)\n    x19 = rbind(adjacent, x2)\n    x20 = mfilter(x18, x19)\n    x21 = mfilter(x18, x20)\n    x22 = fill(x9, THREE, x21)\n    O = replace(x22, EIGHT, ONE)\n    return O"], [1.0, "def solve_d7e0530a(I):\n    x1 = ofcolor(I, TWO)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = rbind(sfilter, x3)\n    x5 = rbind(sfilter, x4)\n    x6 = lbind(recolor, TWO)\n    x7 = chain(x6, x5, first)\n    x8 = chain(x5, x7, last)\n    x9 = fork(combine, first, x8)\n    x10 = compose(x5, x9)\n    x11 = fork(multiply, first, x10)\n    x12 = compose(x4, last)\n    x13 = chain(x12, x11, x41)\n    x14 = fork(apply, x13, x11)\n    x15 = power(x14, TWO)\n    x16 = fork(difference, x9, last)\n    x17 = fork(recolor, x15, x16)\n    x18 = apply(x17, x1)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_f29eedf7(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmin(x11, numcolors)\n    x13 = normalize(x12)\n    x14 = toindices(x13)\n    x15 = increment(x4)\n    x16 = increment(x15)\n    x17 = increment(x5)\n    x18 = increment(x17)\n    x19 = astuple(x16, x18)\n    x20 = lbind(shift, x14)\n    x21 = rbind(multiply, x19)\n    x22 = chain(x20, x21, last)\n    x23 = fork(recolor, first, x22)\n    x24 = normalize(x12)\n    x25 = mapply(x23, x24)\n    O = paint(x9, x25)\n    return O"], [1.0, "def solve_ab3062e4(I):\n    x1 = remove(ZERO, x1)\n    x2 = astuple(x1, x1)\n    x3 = crop(I, ORIGIN, x2)\n    x4 = hmirror(x3)\n    x5 = vconcat(x3, x4)\n    x6 = double(x1)\n    x7 = astuple(x6, x5)\n    x8 = crop(I, DOWN, x7)\n    O = vconcat(x5, x8)\n    return O"], [1.0, "def solve_0dd67c96(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_acc729c5(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_54417fbb(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_37c1dc45(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_a65d5fa7(I):\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = initset(x3)\n    x5 = cover(I, x4)\n    x6 = upscale(x5, TWO)\n    x7 = shape(x6)\n    x8 = add(x6, TWO_BY_ZERO)\n    x9 = canvas(ZERO, x8)\n    x10 = asobject(x9)\n    x11 = shift(x10, UNITY)\n    O = paint(x9, x11)\n    return O"], [1.0, "def solve_fccc23eb(I):\n    x1 = palette(I)\n    x2 = objects(I, F, F, T)\n    x3 = lbind(colorcount, I)\n    x4 = argmax(x2, x3)\n    x5 = remove(x4, x2)\n    x6 = normalize(x4)\n    x7 = lbind(shift, x6)\n    x8 = compose(x7, ulcorner)\n    x9 = rbind(argmin, x83750696)\n    x10 = compose(x9, subgrid)\n    x11 = apply(x10, x5)\n    x12 = mapply(x8, x11)\n    O = paint(I, x12)\n    return O"], [1.0, "def solve_76d76b54(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 =intersection(x2, x5)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = subgrid(x3, I)\n    x10 = increment(x4)\n    x11 = divide(x10, FOUR)\n    x12 = x11(x9)\n    x13 = hconcat(x9, x12)\n    x14 = hconcat(x13, x5)\n    x15 = vconcat(x13, x14)\n    x16 = vconcat(x15, x5)\n    O = cellwise(x16, x7, ZERO)\n    return O"], [1.0, "def solve_5a8b3933(I):\n    x1 = subgrid(I, I)\n    x2 = astuple(ONE, THREE)\n    x3 = astuple(TWO, FOUR)\n    x4 = initset(x2)\n    x5 = insert(x3, x4)\n    x6 = insert(x1, x5)\n    x7 = prapply(connect, x6, toindices)\n    x8 =8091409464\n    x9 = fork(combine, vfrontier, hfrontier)\n    x10 = x9(x7)\n    x11 = halve(x1)\n    x12 = astuple(x11, x11)\n    x13 = x9(x12)\n    x14 = height(x10)\n    x15 = decrement(x14)\n    x16 = lbind(astuple, x15)\n    x17 = apply(x16, x13)\n    x18 = ZERO(x17)\n    x19 = fill(x1, EIGHT, x18)\n    x20 = fill(x19, FOUR, x7)\n    O = fill(x20, FOUR, x10)\n    return O"], [1.0, "def solve_5f806a07(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_b8e6e30f(I):\n    x1 = astuple(287, dmirror)\n    x2 = astuple(cmirror, NEG_ONE, x1)\n    x3 = hsplit(I, x2)\n    x4 = rbind(ofcolor, ZERO)\n    x5 = compose(flip, x4)\n    x6 = sfilter(x3, x5)\n    x7 = merge(x6)\n    O = paint(I, x7)\n    return O"], [1.0, "def solve_6f0e02fa(I):\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    O = upscale(I, x2)\n    return O"], [1.0, "def solve_94a80115(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = equality(x1, x2)\n    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)\n    x5 = branch(x3, x2, x4)\n    x6 = vconcat(I, x5)\n    O = replace(x6, ONE, TWO)\n    return O"], [1.0, "def solve_52404df0(I):\n    x1 = portrait(I)\n    x2 = branch(x1, identity, identity)\n    x3 = branch(x1, decrement, height)\n    x4 = x3(I)\n    x5 = astuple(ONE, x4)\n    x6 = x2(I)\n    x7 = crop(x6, ORIGIN, x5)\n    x8 = branch(x7, decrement, width)\n    x9 = x8(x4)\n    x10 = astuple(ONE, x9)\n    x11 = canvas(ZERO, x10)\n    x12 = rot90(x11)\n    x13 = hconcat(x12, x1)\n    x14 = hsplit(x13, THREE)\n    x15 = first(x14)\n    x16 = last(x14)\n    x17 = objects(x11, F, T, T)\n    x18 = ofcolor(x11, ONE)\n    x19 = ofcolor(x11, TWO)\n    x20 = rbind(shoot, DOWN)\n    x21 = mapply(x20, x17)\n    x22 = rbind(shoot, UP_RIGHT)\n    x23 = mapply(x22, x19)\n    x24 = fill(x11, ONE, x21)\n    x25 = fill(x24, TWO, x23)\n    x26 = fill(x25, ONE, x25)\n    O = x2(x26)\n    return O"], [1.0, "def solve_b0001103(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = ulcorner(x9)\n    x19 = lrcorner(x9)\n    x20 = objects(x14, T, F, T)\n    x21 = other(x20, x13)\n    x22 = subgrid(x21, x15)\n    x23 = llcorner(x9)\n    x24 = urcorner(x9)\n    x25 = shoot(x28, UNITY)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = shoot(x24, UP_RIGHT)\n    x28 = combine(x26, x27)\n    O = fill(x10, x3, x28)\n    return O"], [1.0, "def solve_311956be(I):\n    x1 = mostcolor(I)\n    x2 = hconcat(I, I)\n    x3 = upscale(I, THREE)\n    x4 = asobject(x3)\n    x5 = hperiod(x4)\n    x6 = vperiod(x4)\n    x7 = hperiod(x6)\n    x8 = vperiod(x6)\n    x9 = hperiod(x8)\n    x10 = hperiod(x4)\n    x11 = hperiod(x5)\n    x12 = hperiod(x6)\n    x13 = hperiod(x5)\n    x14 = vperiod(x6)\n    x15 = hperiod(x5)\n    x16 = vperiod(x6)\n    x17 = hperiod(x5)\n    x18 = hperiod(x6)\n    x19 = astuple(x17, x18)\n    x20 = lbind(multiply, x19)\n    x21 = neighbors(ORIGIN)\n    x22 = mapply(neighbors, x21)\n    x23 = apply(x20, x22)\n    x24 = lbind(shift, x4)\n    x25 = mapply(x24, x23)\n    x26 = paint(I, x25)\n    x27 = occurrences(x26, x4)\n    x28 = mapply(toindices, x27)\n    O = fill(x26, x1, x28)\n    return O"], [1.0, "def solve_9cdca2ab(I):\n    x1 = asobject(I)\n    x2 = leastcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = canvas(ZERO, x11)\n    x13 = paint(x12, x10)\n    O = paint(x13, x12)\n    return O"], [1.0, "def solve_400acd80(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, T, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argtoindices(x14)\n    x26 = x24(x25)\n    x27 = ofcolor(x15, x13)\n    x28 = intersection(x26, x27)\n    x29 = rbind(contained, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x22, x30)\n    x32 = lbind(shift, x24)\n    x33 = height(x12)\n    x34 = rbind(multiply, x33)\n    x35 = chain(x32, x34, last)\n    x36 = mapply(x35, x31)\n    x37 = paint(x14, x36)\n    O = x15(x37)\n    return O"], [1.0, "def solve_4f251d09(I):\n    x1 = fgpartition(I)\n    x2 = matcher(size, FOUR)\n    x3 = fork(both, square, x2)\n    x4 = extract(x1, x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = compose(hmirror, vmirror)\n    x8 = initset(x7)\n    x9 = insert(vmirror, x8)\n    x10 = insert(hmirror, x9)\n    x11 = rapply(x10, x6)\n    x12 = ulcorner(x4)\n    x13 = lbind(subtract, x12)\n    x14 = matcher(first, x5)\n    x15 = rbind(sfilter, x14)\n    x16 = chain(x13, ulcorner, x15)\n    x17 = fork(shift, identity, x16)\n    x18 = mapply(x17, x11)\n    O = paint(I, x18)\n    return O"], [1.0, "def solve_6e640b67(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = toindices(x3)\n    x5 = combine(x4, x6)\n    x6 = shape(x2)\n    x7 = hfrontier(x6)\n    x8 = insert(x3, x7)\n    x9 = fill(I, x3, x8)\n    x10 = hmirror(x2)\n    x11 = objects(x10, F, F, T)\n    x12 = argmax(x11, numcolors)\n    x13 = shift(x12, x9)\n    x14 = paint(x9, x13)\n    x15 = normalize(x12)\n    x16 = lbind(shift, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x14, x17)\n    return O"], [1.0, "def solve_2c118383(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_cb4194cd(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x22 = combine(x8, x9)\n    x23 = intersection(x11, x12)\n    x24 = difference(x22, x23)\n    x25 = toobject(x24, I)\n    x26 = color(x25)\n    x27 = subgrid(x9, I)\n    x28 = solve(x27, x26)\n    x29 = replace(x28, x10, x264)\n    x30 = ofcolor(x29, x27)\n    x31 = subgrid(x30, x29)\n    x32 = numbercolors(x31)\n    x33 = first(x32)\n    x34 = normalize(x33)\n    x35 = last(x32)\n    x36 = remove(x34, x32)\n    x37 = remove(x35, x32)\n    x38 = combine(x36, x37)\n    x39 = fill(x29, x27, x38)\n    x40 = ofcolor(x39, x706)\n    x41 = replace(x39, x10, x04)\n    x42 = ofcolor(x41, x727)\n    x43 = rightmost(x40)\n    x44 = equality(x43, x82)\n    x45 = branch(x44, x41, x45)\n    x46 = rbind(shoot, DOWN)\n    x47 = mapply(x46, x34)\n    x48 = difference(x47, x41)\n    O = fill(x43, x27, x48)\n    return O"], [1.0, "def solve_7713104a(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = mapply(x22, x21)\n    O = fill(x7, x18, x23)\n    return O"], [1.0, "def solve_cbf7423c(I):\n    x1 = ofcolor(I, TWO)\n    x2 = shape(I)\n    x3 = halve(x2)\n    x4 = rbind(shoot, UP_RIGHT)\n    x5 = rbind(shoot, DOWN_LEFT)\n    x6 = fork(combine, x4, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = rbind(shoot, NEG_UNITY)\n    x9 = fork(combine, x7, x8)\n    x10 = fork(combine, x6, x9)\n    x11 = height(I)\n    x12 = rbind(valmax, x11)\n    x13 = hmatching(x12, x1)\n    x14 = branch(x13, x11, x10)\n    x15 = extract(x14, x14)\n    x16 = subgrid(x15, I)\n    O = trim(x16)\n    return O"], [1.0, "def solve_01da4f5f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x3, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = argmin(x11, size)\n    x13 = subgrid(x12, I)\n    x14 = llcorner(x12)\n    x15 = replace(x13, x4, ZERO)\n    x16 = replace(x15, x17, x13)\n    x17 = rot90(x16)\n    x18 = rot180(x16)\n    x19 = rot270(x16)\n    x20 = hconcat(x17, x14)\n    x21 = hconcat(x18, x15)\n    x22 = vconcat(x20, x21)\n    x23 = vconcat(x22, x17)\n    O = vconcat(x22, x18)\n    return O"], [1.0, "def solve_eaa6aa55(I):\n    x1 = objects(I, F, F, T)\n    x2 = neighbors(ORIGIN)\n    x3 = mapply(neighbors, x2)\n    x4 = lbind(shift, x3)\n    x5 = apply(x4, x1)\n    x6 = merge(x1)\n    x7 = lbind(shift, x6)\n    x8 = apply(x7, x5)\n    x9 = mapply(x4, x8)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_fdfcbe93(I):\n    x1 = height(I)\n    x2 = width(I)\n    x3 = ofcolor(I, ZERO)\n    x4 = astuple(x1,x2)\n    x5 = crop(I, ORIGIN, x4)\n    x6 = hupscale(x5, x2)\n    O = fill(x6, ZERO, x3)\n    return O"], [1.0, "def solve_57edebc0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_1c41ed9f(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_23f7d8ef(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_05befef2(I):\n    x1 = tophalf(I)\n    x2 = bottomhalf(I)\n    x3 = switch(x1, NEG_ONE, TWO)\n    x4 = switch(x2, EIGHT, x3)\n    x5 = combine(x4, x4)\n    x6 = intersection(x5, x4)\n    x7 = hmirror(x6)\n    x8 = vmirror(x6)\n    x9 = objects(x8, T, F, T)\n    x10 = insert(x7, x9)\n    x11 = mapply(dneighbors, x10)\n    x12 =dfmirror(x6)\n    x13 = toindices(x12)\n    x14 = rbind(first, x13)\n    x15 = toindices(x14)\n    x16 = mapply(x16, x9)\n    x17 = fill(x6, EIGHT, x13)\n    x18 = fill(x17, FOUR, x15)\n    O = fill(x18, ONE, x16)\n    return O"], [1.0, "def solve_5d13204b(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(fork, maximum)\n    x6 = lbind(lbind, subgrid)\n    x7 = lbind(compose, x5)\n    x8 = chain(x7, x6, x4)\n    x9 = lbind(colorcount, I)\n    x10 = compose(x9, x8)\n    x11 = fork(equality, x8, x10)\n    x12 = extract(x1, x11)\n    O = subgrid(x12, I)\n    return O"], [1.0, "def solve_4d0d0b26(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_4ea1adf2(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_663bbba3(I):\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, NEG_UNITY)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP_RIGHT)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = urcorner(x2)\n    x15 = ulcorner(x3)\n    x16 = shoot(x14, NEG_UNITY)\n    x17 = shoot(x12, UP_RIGHT)\n    x18 = shoot(x13, NEG_UNITY)\n    x19 = shoot(x11, UNITY)\n    x20 = shoot(x15, DOWN_LEFT)\n    x21 = shoot(x16, UP_RIGHT)\n    x22 = fork(combine, x14, x17)\n    x23 = fork( combine, x16, x18)\n    x24 = fork(combine, x22, x23)\n    x25 = x24(x2)\n    x26 = dmirror(x25)\n    x27 = invert(x26)\n    x28 = shape(x2)\n    x29 = canvas(ZERO, x28)\n    x30 = lbind(multiply, x28)\n    x31 = apply(x30, x29)\n    x32 = asindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = mapply(x33, x31)\n    O = paint(x39, x34)\n    return O"], [1.0, "def solve_613381a9(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_39f0038f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_9d184417(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_44e6e0c8(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_888867e7(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, T, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_8ecafcbd(I):\n    x1 = partition(I)\n    x2 = matcher(height, ONE)\n    x3 = matcher(width, ONE)\n    x4 = fork(either, x2, x3)\n    x5 = sfilter(x1, x4)\n    x6 = matcher(height, ONE)\n    x7 = sfilter(x5, x6)\n    x8 = size(x7)\n    x9 = matcher(width, ONE)\n    x10 = sfilter(x5, x9)\n    x11 = size(x10)\n    x12 = greater(x8, x11)\n    x13 = branch(x12, dmirror, identity)\n    x14 = branch(x12, uppermost, leftmost)\n    x15 = order(x5, x14)\n    x16 = apply(color, x15)\n    x17 = size(x5)\n    x18 = repeat(x16, x17)\n    O = x13(x18)\n    return O"], [1.0, "def solve_5cef4f22(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_37d3c75d(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_dca06431(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_37a67f0e(I):\n    x1 = lbind(matcher, first)\n    x2 = compose(x1, mostcolor)\n    x3 = fork(sfilter, identity, x2)\n    x4 = chain(invert, center, x3)\n    x5 = fork(shift, identity, x4)\n    x6 = astuple(identity, rot90)\n    x7 = astuple(rot180, rot270)\n    x8 = combine(x6, x7)\n    x9 = argmax(x8, x4)\n    x10 = urcorner(x9)\n    x11 = shoot(x10, UP_RIGHT)\n    x12 = combine(x4, x11)\n    x13 = urcorner(x12)\n    x14 = shoot(x13, DOWN_LEFT)\n    x15 = combine(x14, x13)\n    x16 = combine(x11, x15)\n    x17 = mapply(x6, x12)\n    x18 = combine(x6, x17)\n    x19 = fill(I, ONE, x18)\n    O = objects(x19, T, F, T)\n    return O"], [1.0, "def solve_22d10acb(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = x1(I, TWO)\n    x3 = first(x2)\n    x4 = last(x2)\n    x5 = palette(x3)\n    x6 = width(x3)\n    x7 = rbind(repeat, x6)\n    x8 = compose(x7, merge)\n    x9 = matcher(x8, ONE)\n    x10 = compose(flip, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(x11, first)\n    x13 = rbind(sfilter, x12)\n    x14 = compose(x13, first)\n    x15 = fork(combine, x12, x14)\n    x16 = fork(recolor, x12, x15)\n    x17 = mapply(x16, x5)\n    O = paint(x3, x17)\n    return O"], [1.0, "def solve_f4d7c72f(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = fork(multiply, height, width)\n    x5 = lbind(ofcolor, I)\n    x6 = compose(x4, x5)\n    x7 = argmin(x3, x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = lbind(colorcount, I)\n    x11 = argmin(x9, x10)\n    x12 = ofcolor(I, x7)\n    x13 = leftmost(x12)\n    x14 = positive(x13)\n    x15 = branch(x14, identity, dmirror)\n    x16 = x15(I)\n    x17 = ofcolor(x16, x7)\n    x18 = subgrid(x17, x16)\n    x19 = leftmost(x17)\n    x20 = rightmost(x17)\n    x21 = lbind(greater, x19)\n    x22 = compose(x21, last)\n    x23 = rbind(greater, x20)\n    x24 = compose(x23, last)\n    x25 = asindices(x16)\n    x26 = sfilter(x25, x22)\n    x27 = subgrid(x26, x16)\n    x28 = asindices(x16)\n    x29 = sfilter(x28, x24)\n    x30 = subgrid(x29, x16)\n    x31 = rbind(equality, x11)\n    x32 = rbind(order, x31)\n    x33 = apply(x32, x27)\n    x34 = vmirror(x30)\n    x35 = apply(x32, x34)\n    x36 = vmirror(x35)\n    x37 = hconcat(x33, x8)\n    x38 = hconcat(x37, x36)\n    x39 = x15(x38)\n    O = replace(x39, x11, x7)\n    return O"], [1.0, "def solve_bf67fac6(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, vsplit, hsplit)\n    x6 = x55(I, TWO)\n    x7 = first(x6)\n    x8 = last(x6)\n    x9 = palette(x7)\n    x10 = palette(x8)\n    x11 = intersection(x9, x10)\n    x12 = first(x11)\n    x13 = shape(x7)\n    x14 = canvas(x12, x13)\n    x15 = ofcolor(x7, x12)\n    x16 = ofcolor(x8, x12)\n    x17 = intersection(x15, x16)\n    O = fill(x14, THREE, x17)\n    return O"], [1.0, "def solve_fbe9c8e6(I):\n    x1 = hmirror(I)\n    O = vconcat(I, x1)\n    return O"], [1.0, "def solve_2c7776e6(I):\n    x1 = frontiers(I)\n    x2 = matcher(color, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = merge(x4)\n    x6 = color(x5)\n    x7 = palette(I)\n    x8 = remove(x6, x7)\n    x9 = lbind(colorcount, I)\n    x10 = argmin(x8, x9)\n    x11 = other(x8, x10)\n    x12 = objects(I, T, T, F)\n    x13 = colorfilter(x12, x11)\n    x14 = rbind(manhattan, x13)\n    x15 = chain(even, x14, initset)\n    x16 = sfilter(x13, x15)\n    x17 = compose(man, first)\n    x18 = apply(x17, x16)\n    x19 = branch(x6, x18, x111)\n    x20 = canvas(x11, THREE_BY_THREE)\n    x21 = matcher(first, x10)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x13, x22)\n    x24 = size(x23)\n    x25 = positive(x24)\n    x26 = branch(x5, x22, x25)\n    O = canvas(x26, UNITY)\n    return O"], [1.0, "def solve_1ed4b2d8(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices755(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_82ac6801(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = x25(x22)\n    O = fill(x14, THREE, x26)\n    return O"], [1.0, "def solve_bca5b96d(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_58ddfa13(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_5ce4c359(I):\n    x1 = frontiers(I)\n    x2 = rot98(I)\n    x3 = color(x2)\n    x4 = asobject(x2)\n    x5 = hperiod(x4)\n    x6 = apply(tojvec, x5)\n    x7 = increment(x6)\n    x8 = NEG_ONE(x7)\n    x9 = lbind(shift, x4)\n    x10 = height(I)\n    x11 = lbind(multiply, x10)\n    x12 = chain(x9, x11, last)\n    x13 = apply(x12, x7)\n    x14 = paint(I, x13)\n    x15 = mapply(x7, x1)\n    O = paint(x14, x15)\n    return O"], [1.0, "def solve_22ee5453(I):\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = tophalf(x2)\n    x4 = lefthalf(x3)\n    x5 = vmirror(x2)\n    x6 = hconcat(x44, x5)\n    O = hconcat(x6, x2)\n    return O"], [1.0, "def solve_14f20b2c(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_6f1a59c9(I):\n    x1 = canvas(ZERO, THREE_BY_THREE)\n    x2 = asobject(x1)\n    x3 = shape(I)\n    x4 = shift(x2, x3)\n    x5 = paint(x1, x4)\n    x6 = toindices(x4)\n    x7 = lbind(shift, x6)\n    x8 = mapply(x7, x5)\n    O = fill(x5, ONE, x8)\n    return O"], [1.0, "def solve_5847c710(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_7a7313cb(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x24, x27)\n    O = paint(x14, x28)\n    return O"], [1.0, "def solve_a7dd016d(I):\n    x1 = objects(I, T, F, F)\n    x2 = argmax(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = lbind(insert, DOWN)\n    x6 = compose(lrcorner, asindices)\n    x7 = chain(x5, initset, x6)\n    x8 = fork(subgrid, x7, identity)\n    x9 = matcher(identity, x3)\n    x10 = rbind(subtract, TWO)\n    x11 = rbind(sfilter, x9)\n    x12 = compose(x10, width)\n    x13 = chain(size, x11, first)\n    x14 = fork(greater, x12, x13)\n    x15 = rbind(branch, identity)\n    x16 = rbind(x15, x8)\n    x17 = chain(initset, x16, x14)\n    x18 = fork(rapply, x17, identity)\n    x19 = compose(first, x18)\n    x20 = compose(x19, rot90)\n    x21 = double(EIGHT)\n    x22 = double(x21)\n    x23 = power(x20, x22)\n    x24 = x23(x4)\n    x25 = leastcolor(x24)\n    x26 = ofcolor(x24, x25)\n    x27 = fork(comb28, vfrontier, hfrontier)\n    x28 = mapply(x27, x26)\n    O = fill(x24, x25, x28)\n    return O"], [1.0, "def solve_da21f6d1(I):\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4)\n    x21 = chain(x19, x20, x4)\n    x22 = compose(color, x21)\n    x23 = fork(recolor, x22, identity)\n    x24 = mapply(x21, x18)\n    x25 = cover(I, x24)\n    x26 = mapply(x23, x18)\n    O = paint(x25, x26)\n    return O"], [1.0, "def solve_78fb1eb8(I):\n    x1 = lbind(occurrences, I)\n    x2 = lbind(lbind, shift)\n    x3 = compose(x2, x1)\n    x4 = fork(apply, x3, x1)\n    x5 = compose(positive, size)\n    x6 = rbind(compose, x4)\n    x7 = lbind(lbind, occurrences)\n    x8 = compose(x6, x7)\n    x9 = fork(compose, x5, x8)\n    x10 = compose(x1, x9)\n    x11 = fork(ofcolor, x10, identity)\n    x12 = chain(x6, x3, x11)\n    x13 = fork(mapply, x12, x11)\n    x14 = product(x1, x1)\n    x15 = power(x13, TWO)\n    x16 = astuple(x15, x12)\n    x17 = astuple(x14, x12)\n    x18 = astuple(x16, x17)\n    x19 = hfrontier(x18)\n    O = underfill(I, SIX, x19)\n    return O"], [1.0, "def solve_b390b195(I):\n    x1 = asobject(I)\n    x2 = matcher(first, ZERO)\n    x3 = compose(flip, x2)\n    x4 = sfilter(x1, x3)\n    x5 = rbind( occurrences, TWO)\n    x6 = chain(first, x5, numcolors)\n    x7 = compose(x6, toindices)\n    x8 = fork(sfilter, identity, x7)\n    x9 = chain(x6, asobject, x8)\n    x10 = fork(shift, x9, ulcorner)\n    x11 = mapply(x10, x4)\n    x12 = paint(I, x11)\n    x13 = width(I)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = pair(x14, x14)\n    x16 = mapply(x9, x15)\n    O = paint(x12, x16)\n    return O"], [1.0, "def solve_04f035af(I):\n    x1 = astuple(vsplit, hsplit)\n    x2 = rbind(rbind, TWO)\n    x3 = rbind(rapply, I)\n    x4 = initset(x2)\n    x5 = lbind(rapply, x4)\n    x6 = chain(first, x3, x5)\n    x7 = lbind(apply, numcolors)\n    x8 = compose(x7, x6)\n    x9 = matcher(x8, TWO_BY_TWO)\n    x10 = extract(x1, x9)\n    x11 = x10(I, TWO)\n    x12 = first(x11)\n    x13 = last(x11)\n    x14 = palette(x12)\n    x15 = palette(x13)\n    x16 = intersection(x14, x15)\n    x17 = first(x16)\n    x18 = shape(x12)\n    x19 = canvas(x17, x18)\n    x20 = ofcolor(x12, x17)\n    x21 = ofcolor(x13, x17)\n    x22 = intersection(x20, x21)\n    O = fill(x19, TWO, x22)\n    return O"], [1.0, "def solve_adc28b62(I):\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(SIX)\n    x7 = toivec(THREE)\n    x8 = insert(x6, x7)\n    x9 = tojvec(THREE)\n    x10 = insert(x6, x9)\n    x11 = fork(combine, identity, hmirror)\n    x12 = fork(combine, identity, vmirror)\n    x13 = x11(x12)\n    x14 = x11(x12)\n    x15 = paint(x13, x14)\n    x16 = paint(x15, x13)\n    O = x10(x16)\n    return O"], [1.0, "def solve_29e8bfe4(I):\n    x1 = matcher(identity, ZERO)\n    x2 = compose(flip, x1)\n    x3 = rbind(sfilter, x2)\n    x4 = chain(positive, size, x3)\n    x5 = rbind(sfilter, hline)\n    x6 = compose(dmirror, x5)\n    x7 = power(x6, FOUR)\n    x8 = x7(I)\n    x9 = dedupe(x8)\n    x10 = dmirror(x9)\n    x11 = dedupe(x10)\n    O = dmirror(x11)\n    return O"], [1.0, "def solve_0494d546(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = apply(uppermost, x7)\n    x9 = order(x8, identity)\n    x10 = lbind(sfilter, x7)\n    x11 = lbind(matcher, uppermost)\n    x12 = compose(x10, x11)\n    x13 = lbind(apply, color)\n    x14 = rbind(order, leftmost)\n    x15 = chain(x13, x14, x12)\n    x16 = apply(x15, x9)\n    O = vmirror(x16)\n    return O"], [1.0, "def solve_a8f918ef(I):\n    x1 = astuple(SIX, FIVE)\n    x2 = repeat(I, x1)\n    x3 = astuple(TWO, FIVE)\n    x4 = interval(THREE, x3, ONE)\n    x5 = prapply(recolor, x2)\n    x6 = lbind(mapply, vfrontier)\n    x7 = compose(x6, toindices)\n    x8 = fork(combine, x7, x7)\n    x9 = mapply(x8, x4)\n    O = paint(I, x9)\n    return O"], [1.0, "def solve_161660c3(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_f3b3318a(I):\n    x1 = tophalf(I)\n    x2 = lefthalf(x1)\n    x3 = tophalf(I)\n    x4 = righthalf(x3)\n    x5 = bottomhalf(I)\n    x6 = righthalf(x5)\n    x7 = bottomhalf(I)\n    x8 = lefthalf(x7)\n    x9 = palette(x2)\n    x10 = palette(x4)\n    x11 = intersection(x9, x10)\n    x12 = palette(x6)\n    x13 = palette(x8)\n    x14 = intersection(x12, x13)\n    x15 = intersection(x11, x14)\n    x16 = first(x15)\n    x17 = shape(I)\n    x18 = halve(x17)\n    x19 = lbind(multiply, x18)\n    x20 = lbind(shift, x2)\n    x21 = compose(x19, x20)\n    x22 = compose(x11, x21)\n    x23 = fork(combine, x21, x22)\n    x24 = compose(flip, x23)\n    x25 = mapply(x24, x4)\n    O = paint(I, x25)\n    return O"], [1.0, "def solve_4916fa47(I):\n    x1 = hmirror(I)\n    O = vconcat(x1, I)\n    return O"], [1.0, "def solve_d4d355c3(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =e509e(x2)\n    x4 = mostcolor(I)\n    x5 = shape(I)\n    x6 = canvas(x4, x5)\n    x7 = hconcat(I, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = rbind(colorcount, TWO)\n    x10 = argmax(x8, x9)\n    O = subgrid(x10, I)\n    return O"], [1.0, "def solve_61a1ac03(I):\n    x1 = rbind(shoot, UNITY)\n    x2 = compose(x1, center)\n    x3 = fork(recolor, color, x2)\n    x4 = mapply(x3, x1)\n    x5 = paint(I, x4)\n    x6 = ofcolor(I, FIVE)\n    O = fork(equality, identity, vmirror)\n    x14 = mfilter(x6, x15)\n    O = underpaint(x5, x14)\n    return O"], [1.0, "def solve_06099666(I):\n    x1 = lbind(greater, THREE)\n    x2 = chain(x1, size, dedupe)\n    x3 = apply(x2, I)\n    x4 = contained(F, x3)\n    x5 = flip(x4)\n    x6 = branch(x5, identity, dmirror)\n    x7 = x6(I)\n    x8 = rbind(toobject, I)\n    x9 = chain(palette, x8, neighbors)\n    x10 = lbind(chain, flip)\n    x11 = rbind(x10, x9)\n    x12 = lbind(lbind, contained)\n    x13 = compose(x11, x12)\n    x14 = lbind(ofcolor, I)\n    x15 = fork(sfilter, x14, x13)\n    x16 = compose(size, x15)\n    x17 = palette(I)\n    x18 = argmax(x17, x16)\n    x19 = objects(x7, T, T, F)\n    x20 = colorfilter(x19, x18)\n    x21 = difference(x19, x20)\n    x22 = rbind(subgrid, x7)\n    x23 = order(x21, uppermost)\n    x24 = apply(x22, x23)\n    x25 = lbind(recolor, x18)\n    x26 = lbind(mapply, vfrontier)\n    x27 = rbind(ofcolor, x18)\n    x28 = chain(x25, x26, x27)\n    x29 = fork(paint, identity, x28)\n    x30 = mapply(x29, x24)\n    O = x6(x30)\n    return O"], [1.0, "def solve_9d6bfe8c(I):\n    x1 = rot180(I)\n    x2 = downscale(x1, TWO)\n    x3 = rot180(x2)\n    O = upscale(x3, FOUR)\n    return O"], [1.0, "def solve_0af416ba(I):\n    O = hconcat(I, I)\n    return O"], [1.0, "def solve_1ac28fec(I):\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, tophalf, lefthalf)\n    x6 = branch(x4, bottomhalf, righthalf)\n    x7 = x5(I)\n    x8 = x6(I)\n    x9 = objects(x7, T, F, F)\n    x10 = palette(x9)\n    x11 = palette(x8)\n    x12 = intersection(x10, x11)\n    x13 = first(x12)\n    x14 = ofcolor(x13, x13)\n    x15 = ofcolor(x8, x13)\n    x16 = intersection(x14, x15)\n    x17 = canvas(x13, x9)\n    O = fill(x17, THREE, x16)\n    return O"], [1.0, "def solve_7e6b9c4d(I):\n    x1 = vmirror(I)\n    x2 = hconcat(I, x1)\n    x3 = hmirror(x2)\n    O = vconcat(x2, x3)\n    return O"], [1.0, "def solve_6c71573c(I):\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = normalize(x2)\n    x4 = mostcolor(I)\n    x5 = shape(x3)\n    x6 = multiply(x5, x5)\n    x7 = canvas(x4, x6)\n    x8 = shape(x3)\n    x9 = rbind(multiply, x8)\n    x10 = toindices(x3)\n    x11 = apply(x9, x10)\n    x12 = lbind(shift, x3)\n    x13 = mapply(x12, x11)\n    O = paint(x7, x13)\n    return O"], [1.0, "def solve_0fe00193(I):\n    x1 = rot90(I)\n    x2 = rot180(I)\n    x3 = rot270(I)\n    x4 = hconcat(I, x1)\n    x5 = hconcat(x3, x2)\n    O = vconcat(x4, x5)\n    return O"], [1.0, "def solve_d05ed9d9(I):\n    x1 = asobject(I)\n    x2 = mostcolor(I)\n    x3 = matcher(first, x2)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x1, x4)\n    x6 = apply(initset, x5)\n    x7 = rbind(shoot, UNITY)\n    x8 = compose(x7, center)\n    x9 = fork(recolor, color, x8)\n    x10 = mapply(x9, x6)\n    x11 = shape(I)\n    x12 = double(x11)\n    x13 = mostcolor(I)\n    x14 = canvas(x13, x12)\n    O = paint(x14, x10)\n    return O"], [1.0, "def solve_379256b0(I):\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = difference(x23, x24)\n    x26 = rbind(contained, x25)\n    x27 = compose(x26, last)\n    x28 = sfilter(x22, x27)\n    O = paint(x14, x28)\n    return O"], [1.1, "def solve_e0527c88(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = mapply(x15, x13)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x21, x16)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x34)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x34)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x34)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x34)\n    x"], [1.1, "def solve_56d62acb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = fill(I, x3, x2)\n    x5 = objects(x4, F, F, T)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = x12(x7)\n    x9 = shape(x6)\n    x10 = increment(x9)\n    x11 = multiply(x10, x5)\n    x12 = canvas(x3, x11)\n    x13 = hconcat(x12, x12)\n    x14 = hconcat(x5, x13)\n    x15 = partition(x14)\n    x16 = apply(color, x15)\n    x17 = cover(I, x16)\n    x18 = argmax(x16, width)\n    x19 = astuple(x18, ulcorner)\n    x20 = canvas(x9, x19)\n    x21 = fill(x20, NEG_ONE, x19)\n    x22 = merge(x15)\n    x23 = cover(x21, x22)\n    x24 = asindices(x23)\n    x25 = ofcolor(x14, NINE)\n    x26 = difference(x24, x25)\n    x27 = fill(x14, NEG_ONE, x26)\n    x28 = ofcolor(x27, NINE)\n    x29 = subgrid(x28, x27)\n    x30 = asindices(x29)\n    x31 = rbind(mapply, x30)\n    x32 = lbind(lbind, shift)\n    x33 = compose(x31, x32)\n    x34 = fork(combine, x33, x31)\n    x35 = mapply(x34, x29)\n    x36 = fill(x27, NEG_ONE, x35)\n    x37 = shift(x31, x33)\n    x38 = toindices(x37)\n    x39 = rbind(mapply, x38)"], [1.1, "def solve_0b057963(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, colorcount)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, colorcount)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = canvas(ZERO, x34)\n    x36 = lbind(multiply, x33)\n    x377 = apply(x36, x3)\n    x38 = lbind(shift, x10)\n    x39 = mapply(x38, x37)\n    O = fill("], [1.1, "def solve_03f2bda7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(argmax, x38)\n    x40 = mapply(x39, x32)\n    x41 = ofcolor(I, x4)\n    x42 = rbind(adjacent, x41)"], [1.1, "def solve_7adda415(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =6954025dad(I):\n    x2 = asindices(I)\n    x3 = urcorner(x2)\n    x4 = index(I, ORIGIN)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = recolor(x4, x5)\n    x7 = index(I, x3)\n    x8 = shoot(x3, DOWN_LEFT)\n    x9 = recolor(x7, x8)\n    x10 = astuple(cmirror, dmirror)\n    x11 = astuple(hmirror, vmirror)\n    x12 = combine(x10, x11)\n    x13 = hmirror(x12)\n    x14 = astuple(NEG_TWO, rmirror)\n    x15 = astuple(fafffa47, x14)\n    x16 = combine(x13, x15)\n    x17 =173333(x16)\n    x18 = height(I)\n    x19 = astuple(x18, hsplit)\n    x20 = canvas(x4, x19)\n    x21 =6(I)\n    x22 = subgrid(x21, x20)\n    x23 = rot90(x22)\n    x24 = width(x23)\n    x25 = rbind(repeat, x24)\n    x26 = chain(rot90, x25, hmirror)\n    x27 = matcher(x26, x23)\n    x28 = objects(x22, F, F, T)\n    x29 = sfilter(x28, x27)\n    x30 = argmax(x29, size)\n    x31 = matcher(first, x4)\n    x32 = rbind(sfilter, x31)\n    x33 = lbind(recolor, x4)\n    x34 = rbind(sfilter, x33)\n    x35 = compose(x34, x31)\n    x36 = fork(combine, x30, x35)\n    x37 = lbind(recolor, x10)\n    x38 = rbind(sfilter, x36)\n    x"], [1.1, "def solve_6207143f(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = colorfilter(x35, x28)\n    x37 = lbind(shift, x24)\n    x38 = mapply(x37, x36)\n    x39 = fill(x23, TWO, x38)\n"], [1.1, "def solve_48ca015c(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = repeat(x13, ONE)\n    x15 = asobject(x14)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = fgpartition(x6)\n    x21 = merge(x20)\n    x22 = toindices(x21)\n    x23 = apply(first, x22)\n    x24 = lbind(sfilter, x21)\n    x25 = compose(first, last)\n    x26 = lbind(matcher, x25)\n    x27 = compose(x24, x26)\n    x28 = apply(x27, x23)\n    x29 = lbind(shift, x15)\n    x30 = chain(x29, toivec, uppermost)\n    x31 = matcher(first, x18)\n    x32 = rbind(sfilter, x31)\n    x33 = rbind(compose, last)\n    x34 = lbind(rbind, contained)\n    x35 = chain(toindices, x32, x30)\n    x36 = chain(x33, x34, x35)\n    x37 = fork(sfilter, identity, x36)\n    x38 = compose(color, x37)\n    x39 = compose(x32, x30)\n    x40 = fork(recolor, x38, x39)\n    x41 = fork(other, palette,"], [1.1, "def solve_2c8b5bcb(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_34c1043f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = astuple(rot180, rot180)\n    x21 = astuple(rot270, rot90)\n    x22 = astuple(x20, x21)\n    x23 = combine(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x31 = last(x28)\n    x32 = x29(I)\n    x33 = palette(I)\n    x34 = lbind(ofcolor, x33)\n    x35 = compose(normalize, x34)\n    x36 = matcher(x35, x12)\n    x37 = extract(x33, x36)\n    x38 = remove(x37, x33)\n    x39 = lbind(colorcount, x33)\n    x40 = argmin(x38, x39)\n    "], [1.1, "def solve_ab01fcf9(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_d7ecd998(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = matcher(x2, ZERO)\n    x4 = astuple(identity, dmirror)\n    x5 = astuple(cmirror, hmirror)\n    x6 = combine(x4, x5)\n    x7 = rbind(rapply, I)\n    x8 = compose(first, x7)\n    x9 = chain(x3, x8, initset)\n    x10 = x9(I)\n    x11 = index(x10, ORIGIN)\n    x12 = width(x10)\n    x13 = multiply(x12, x12)\n    x14 = bottomhalf(x10)\n    x15 = rbind(rapply, x14)\n    x16 = compose(first, x15)\n    x17 = chain(x13, x15, x16)\n    x18 = matcher(x17, ZERO)\n    x19 = sfilter(x11, x18)\n    x20 = merge(x19)\n    x21 = compose(last, last)\n    x22 = compose(first, last)\n    x23 = fork(astuple, x21, x22)\n    x24 = initset(x13)\n    x25 = matcher(x23, x24)\n    x26 = compose(flip, x25)\n    x27 = extract(x19, x26)\n    x28 = x27(x252)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 =586(x29, x30)\n    x32 = ofcolor(x31, x11)\n    x33 = x27(x32)\n    x34 = shift(x31, x33)\n    x35 = fill(x30, TWO, x34)\n    x36 = vmirror(x35)\n    x37 = lbind(shift, x35)\n    x38 = height(x36)\n    x39 = divide(x38, x36)\n    x40 = increment(x39)\n    x41"], [1.1, "def solve_62d51063(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = difference(x1, x3)\n    x5 = fill(I, NEG_ONE, x4)\n    x6 = lbind(shift, x3)\n    x7 = compose(x6, toivec)\n    x8 = interval(NEG_TWO, NEG_ONE, NEG_ONE)\n    x9 = mapply(x7, x8)\n    x10 = astuple(x9, x7)\n    x11 = x7(x10)\n    x12 = toindices(x11)\n    x13 = increment14(x12)\n    x14 = canvas(NEG_ONE, x13)\n    x15 = asobject(x14)\n    x16 = shift(x15, UNITY)\n    x17 = paint(x16, x16)\n    x18 = height(x1)\n    x19 = width(x1)\n    x20 = decrement(x18)\n    x21 = astuple(x19, x20)\n    x22 = ONE(x21)\n    x23 = width(x1)\n    x24 = halve(x23)\n    x25 = increment(x24)\n    x26 = interval(ZERO, x25, ONE)\n    x27 = apply(tojvec, x26)\n    x28 = apply(asobject, x27)\n    x29 = lbind(shift, x15)\n    x30 = mapply(x29, x28)\n    x31 = hmirror(x30)\n    x32 = vmirror(x31)\n    x33 = objects(x32, F, F, T)\n    x34 = merge(x33)\n    x35 = paint(x16, x34)\n    x36 = astuple(x1, x19)\n    x37 = canvas(ZERO, x36)\n    x38 = asobject(x37)\n    x39 = rbind(adjacent, x38)\n    x40 = apply(x39, x32)\n    x41 ="], [1.1, "def solve_1b9db546(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmax(x1, x2)\n    x4 = remove(x3, x1)\n    x5 = argmin(x4, x2)\n    x6 = argmax(x4, x2)\n    x7 = ulcorner(x6)\n    x8 = llcorner(x6)\n    x9 = connect(x7, x8)\n    x10 = urcorner(x6)\n    x11 = lrcorner(x6)\n    x12 = connect(x10, x11)\n    x13 = combine(x9, x12)\n    x14 = toindices(x6)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(x6)\n    x20 = x18(x5)\n    x21 = subtract(x19, x20)\n    x22 = decrement(x21)\n    x23 = color(x5)\n    x24 = color(x3)\n    x25 = repeat(x23, x22)\n    x26 = subtract(NINE, x22)\n    x27 = repeat(x24, x26)\n    x28 = combine(x25, x27)\n    x29 = repeat(x28, ONE)\n    x30 = hsplit(x29, THREE)\n    x31 = interval(ZERO, THREE, ONE)\n    x32 = pair(x31, x30)\n    x33 = matcher(first, ZERO)\n    x34 = extract(x32, x33)\n    x35 = last(x34)\n    x36 = matcher(first, ONE)\n    x37 = extract(x32, x36)\n    x38 = last(x37)\n    x39 = matcher(first, TWO)\n    x40 = extract(x32, x39)\n    x41 = last(x40)\n    x42 = vmirror("], [1.1, "def solve_bd9f53ce(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n    x3 = sfilter(x2, x2)\n    x4 = chain(positive, size, dedupe)\n    x5 = sfilter(x3, x4)\n    x6 = compose(hmirror, vmirror)\n    x7 = compose(vmirror, merge)\n    x8 = fork(equality, identity, x6)\n    x9 = fork(multiply, identity, height)\n    x10 = chain(x8, x9, first)\n    x11 = height(I)\n    x12 = width(I)\n    x13 = ZERO(x11)\n    x14 = multiply(x12, x13)\n    x15 = subtract(x14, TWO)\n    x16 = interval(ONE, x15, ONE)\n    x17 = colorcount(I, ZERO)\n    x18 = digitrepeat(x17, x16)\n    x19 = multiply(x18, x13)\n    x20 = subtract(x19, TWO)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = product(x16, x21)\n    x23 = multiply(x22, x13)\n    x24 = rbind(add, x23)\n    x25 = compose(invert, x24)\n    x26 = order(x22, x25)\n    x27 = apply(x25, x26)\n    x28 = size(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = mpapply(recolor, x27, x30)\n    x32 = mapply(decrement, x30)\n    x33 = decrement(x32)\n    x34 = ofcolor(I, ZERO)\n    x35 =\n    1611111466\n    6111111609\n    9111111623\n    9565159359\n    5150601141\n    6969911161\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = compose(x1, first)\n"], [1.1, "def solve_8684050e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = sizefilter(x1, FOUR)\n    x3 = power(first, TWO)\n    x4 = power(last, TWO)\n    x5 = fork(astuple, x3, x4)\n    x6 = fork(connect, ulcorner, x5)\n    x7 = fork(difference, toindices, x6)\n    x8 = compose(size, x7)\n    x9 = matcher(x8, ZERO)\n    x10 = fork(both, x7, x9)\n    x11 = sfilter(x2, x10)\n    x12 = argmax(x11, size)\n    x13 = color(x12)\n    x14 = toindices(x12)\n    x15 = fork(either, vline, hline)\n    x16 = x15(x14)\n    x17 = size(x16)\n    x18 = increment(x17)\n    x19 = interval(ZERO, x18, ONE)\n    x20 = product(x19, x19)\n    x21 = rbind(add, THREE)\n    x22 = rbind(interval, THREE)\n    x23 = fork(x22, x21, x44)\n    x24 = compose(x20, x23)\n    x25 = fork(connect, ulcorner, x24)\n    x26 = fork(recolor, color, x25)\n    x27 = mapply(x26, x12)\n    x28 = paint(I, x27)\n    x29 = interval(ZERO, x18, ONE)\n    x30 = pair(x29, x29)\n    x31 = apply(first, x30)\n    x32 = mapply(x27, x31)\n    x33 = paint(x28, x32)\n    x34 = interval(ZERO, x18, ONE)\n    x35 = pair(x34, x34)\n    x36 = apply(first, x35)\n    x37 = mapply(x27, x36)\n    x38 = paint(x33, x37)\n    x39 ="], [1.1, "def solve_65943cf0(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = fork(equality, toindices, x3)\n    x5 = compose(flip, x4)\n    x6 = extract(I, x5)\n    x7 = lbind(contained, THREE)\n    x8 = compose(minimum, shape)\n    x9 = matcher(x8, ONE)\n    x10 = lbind(apply, numcolors)\n    x11 = compose(x10, asobject)\n    x12 = fork(add, x3, x11)\n    x13 = compose(initset, x12)\n    x14 = fork(insert, ulcorner, toindices)\n    x15 = compose(first, x14)\n    x16 = apply(x15, x6)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, dmirror, identity)\n    x20 = x19(I)\n    x21 = objects(x20, T, F, F)\n    x22 = compose(toivec, leftmost)\n    x23 = rbind(compose, center)\n    x24 = lbind(apply, toindices)\n    x25 = chain(x23, x24, leftmost)\n    x26 = lbind(sfilter, x21)\n    x27 = chain(size, x26, x25)\n    x28 = increment(x27)\n    x29 = double(x38)\n    x30 = interval(x28, x29, ONE)\n    x31 = apply(x25, x30)\n    x32 = interval(x29, x27, ONE)\n    x33 = lbind(multiply, x31)\n    x34 = apply(x33, x32)\n    x35 = lbind(shift, x23)\n    x36 = mapply(x35, x34)\n    x37 = fill(x20, THREE, x36)\n    x38 = index(x37, x25)\n    x39 = replace"], [1.1, "def solve_eedc2bba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = rbind(SEVEN, x8)\n    x10 = lbind(compose, x9)\n    x11 = lbind(power, I)\n    x12 = chain(x11, x10, x9)\n    x13 = compose(x12, x10)\n    x14 = lbind(apply, last)\n    x15 = chain(x14, corners, last)\n    x16 = lbind(rbind, equality)\n    x17 = fork(sfilter, x15, x15)\n    x18 = fork(compose, x17, x13)\n    x19 = lbind(lbind, astuple)\n    x20 =\n    last(x12)\n    x21 = lbind(last, x12)\n    x22 = compose(x21, x18)\n    x23 = fork( subtract, x18, x22)\n    x24 = fork(insert, x18, x23)\n    x25 = compose(last, x24)\n    x26 = compose(x19, x25)\n    x27 = fork(equality, x26, x23)\n    x28 = fork(insert, x27, x1)\n    x29 = compose(x16, x28)\n    x30 = rbind(branch, x29)\n    x31 = compose(x30, x25)\n    x32 = rbind(branch, x269)\n    x33 = compose(x32, x25)\n    x34 = chain(x33, x31, x21)\n    x35 = fork(contained, x39, x22)\n    x36 = fork(contained, x28, x23)\n    x37 = fork(contained, x36, x31)\n    x38 = fork(both, x35, x37)\n    x39"], [1.1, "def solve_f6f9897f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(equality, toindices, box)\n    x2 = box(x1)\n    x3 = shape(I)\n    x4 = minimum(x3)\n    x5 = halve(x4)\n    x6 = interval(ONE, x5, ONE)\n    x7 = lbind(power, inbox)\n    x8 = rbind(rapply, x2)\n    x9 = compose(initset, x7)\n    x10 = chain(first, x8, x9)\n    x11 = apply(x10, x6)\n    x12 = repeat(x11, ONE)\n    x13 = combine(x12, x11)\n    x14 = compose(toindices, x11)\n    x15 = chain(first, x14, initset)\n    x16 = lbind(upscale, x13)\n    x17 = rbind(ofcolor, x1)\n    x18 = compose(x16, x17)\n    x19 = fork(combine, x18, x15)\n    x20 = x19(x1)\n    x21 = palette(x20)\n    x22 = lbind(rbind, subtract)\n    x23 = uppermost(x20)\n    x24 = rbind(colorcount, x23)\n    x25 = chain(toivec, x24, decrement)\n    x26 = matcher(x25, x21)\n    x27 = palette(I)\n    x28 = sfilter(x27, x26)\n    x29 = lbind(colorcount, I)\n    x30 = argmin(x28, x29)\n    x31 = ofcolor(I, x30)\n    x32 = ofcolor(I, x10)\n    x33 =, x31, x32)\n    x34 = ofcolor(I, x10)\n    x35 = leftmost(x34)\n    x36 = ofcolor(I, x30)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x3)\n    x39 = ofcolor(I, x30)\n    x40 = rightmost(x3)\n"], [1.1, "def solve_73f735b1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, T)\n    x3 = argmax(x2, size)\n    x4 = remove(x3, x2)\n    x5 = lbind(colorfilter, x2)\n    x6 = chain(x5, color, x4)\n    x7 = fork(paint, identity, x6)\n    x8 = rbind(contained, x1)\n    x9 = compose(x8, first)\n    x10 = rbind(sfilter, x9)\n    x11 = lbind(rbind, compose)\n    x12 = chain(x10, x11, x8)\n    x13 = lbind(apply, last)\n    x14 = chain(x13, toindices, x12)\n    x15 = fork(sfilter, x12, x14)\n    x16 = compose(x15, x12)\n    x17 = lbind(rot90, EIGHT)\n    x18 = power(x17, TWO)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = x18(x21)\n    x23 = argmin(x61, x22)\n    x24 = argmax(x23, x18)\n    x25 = partition(x24)\n    x26 = fork(combine, vfrontier, hfrontier)\n    x27 = compose(x25, x26)\n    x28 = extract(x25, x27)\n    x29 = x28(x26)\n    x30 = x27(x29)\n    x31 = color(x3)\n    x32 = palette(I)\n    x33 = remove(x31, x32)\n    x34 = lbind(colorcount, I)\n    x35 = argmin(x34, x33)\n    x36 = first(x35)\n    x37 = last(x35)\n    x38 = x369(x36)\n    x39 = matcher(first, x37)\n    x40 = compose(flip, x"], [1.1, "def solve_9bb9450f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_8db927dd(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_f0ad6b35(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x31 = compose(x29, x30)\n    x32 = fork(equality, identity, x31)\n    x33 = compose(x32, last)\n    x34 = lbind(apply, first)\n    x35 = rbind(sfilter, x28)\n    x36 = rbind(pair, x21)\n    x37 = chain(x34, x35, x36)\n    x38 = pair(x7, x23)\n    x39 = sfilter(x38, x33)\n    x40 = apply(first, x39"], [1.1, "def solve_b4fbb646(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = mostcolor(I)\n    x4 = width(I)\n    x5 = astuple(TEN, x4)\n    x6 = canvas(x3, x5)\n    x7 = interval(ONE, SIX, ONE)\n    x8 = invert(TEN)\n    x9 = interval(x8, TEN, ONE)\n    x10 = product(x7, x9)\n    x11 = remove(ORIGIN, x10)\n    x12 = lbind(intersection, x2)\n    x13 = lbind(shift, x2)\n    x14 = compose(x12, x13)\n    x15 = toindices(x2)\n    x16 = lbind(intersection, x15)\n    x17 = lbind(shift, x15)\n    x18 = compose(x16, x17)\n    x19 = compose(size, x14)\n    x20 = argmax(x17, x19)\n    x21 = shape(I)\n    x22 = canvas(x3, x21)\n    x23 = normalize(x2)\n    x24 = lbind(shift, x23)\n    x25 = height(I)\n    x26 = width(I)\n    x27 = divide(x25, x26)\n    x28 = downscale(x23, x27)\n    x29 = height(x28)\n    x30 = interval(ZERO, x29, ONE)\n    x31 = matcher(size, x30)\n    x32 = toindices(x2)\n    x33 = lbind(shift, x32)\n    x34 = rbind(multiply, x29)\n    x35 = compose(x33, x34)\n    x36 = lbind(apply, x35)\n    x37 = lbind(lbind, shift)\n    x38 = rbind(occurrences, x22)\n    x39 = compose(x36, x38)\n    x40 = fork(mapply, x39, x36)\n    x41 = compose(x32"], [1.1, "def solve_b2e83c53(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, shape, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_b0b531dc(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_daef5183(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = shape(I)\n    x3 = add(TWO, x2)\n    x4 = canvas(x1, x3)\n    x5 = asobject(I)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(x1, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, EIGHT, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x1, x30)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x1, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = toobject(x38, x22)\n    x40 =5779577(x39)\n    x"], [1.1, "def solve_bf2c3c87(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, identity, dmirror)\n    x4 = x3(I)\n    x5 = leftmost(x1)\n    x6 = equality(x5, ZERO)\n    x7 = branch(x6, identity, vmirror)\n    x8 = x7(x4)\n    x9 = ofcolor(x8, NEG_ONE)\n    x10 = uppermost(x1)\n    x11 = equality(x10, ZERO)\n    x12 = branch(x11, identity, hmirror)\n    x13 = x12(x8)\n    x14 = ofcolor(x13, NEG_ONE)\n    x15 = ofcolor(x13, TWO)\n    x16 = rbind(shoot, DOWN)\n    x17 = mapply(x16, x14)\n    x18 = height(x13)\n    x19 = apply(first, x15)\n    x20 = insert(ZERO, x19)\n    x21 = insert(x18, x19)\n    x22 = apply(decrement, x21)\n    x23 = order(x20, identity)\n    x24 = order(x22, identity)\n    x25 = size(x15)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, ONE)\n    x28 = apply(tojvec, x27)\n    x29 = pair(x23, x24)\n    x30 = lbind(sfilter, x17)\n    x31 = compose(first, last)\n    x32 = chain(decrement, first, first)\n    x33 = fork(greater, x31, x32)\n    x34 = chain(increment, last, first)\n    x35 = fork(greater, x34, x31)\n    x36 = fork(both, x33, x35)\n    x37 = lbind(lbind, astuple)\n    x38 = lbind(compose, x36)\n    x39 = chain(x30, x38, x37)"], [1.1, "def solve_31341663(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmin(x1, size)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = fgpartition(x4)\n    x6 = argmax(x5, size)\n    x7 = remove(x6, x5)\n    x8 = apply(manhattan, x7)\n    x9 = maximum(x8)\n    x10 = increment(x9)\n    x11 = interval(ONE, x10, invert)\n    x12 = lbind(shift, x6)\n    x13 = astuple(x2, x6)\n    x14 = canvas(x3, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = mapply(x12, x16)\n    x18 = fill(x14, x3, x17)\n    x19 = increment(x13)\n    x20 = width(x68)\n    x21 = increment(x20)\n    x22 = tojvec(x21)\n    x23 = tojvec(x22)\n    x24 = greater(x18, x23)\n    x25 = maximum(x24)\n    x26 = increment(x25)\n    x27 = subtract(x22, x26)\n    x28 = astuple(x27, x19)\n    x29 = canvas(x3, x28)\n    x30 = asindices(x29)\n    x31 = rbind(toobject, x19)\n    x32 = lbind(shift, x30)\n    x33 = compose(x31, x32)\n    x34 = rbind(colorcount, x3)\n    x35 = matcher(x34, TWO)\n    x36 =sfilter(x20, x35)\n    x37 = paint(x19, x36)\n    x38 = height(x37)\n    x39 = apply(first, x5)\n    x40 = increment(x39)\n    x41 = width(x37)\n    x42 = interval(ZERO, x41, x40"], [1.1, "def solve_b5521cea(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =375911021\n    x2 =7121750962\n     burned to62539\n    1807968069\n    6928222466\n    d51158662\n    \"\"\"\n    x1 =66666666(I, I)\n    x2 = palette(x1)\n    x3 = contained(x2, x1)\n    x4 = contained(x3, x2)\n    x5 = branch(x4, height, width)\n    x6 = x5(I)\n    x7 = partition(x1)\n    x8 = matcher(color, ZERO)\n    x9 = colorfilter(x7, x8)\n    x10 = difference(x7, x9)\n    x11 = extract(x10, x8)\n    x12 = other(x10, x11)\n    x13 = colorcount(x1, x12)\n    x14 = subtract(x13, TWO)\n    x15 = increment(x14)\n    x16 = canvas(ZERO, x15)\n    x17 = astuple(x13, x16)\n    x18 = canvas(ZERO, x17)\n    x19 = matcher(first, x12)\n    x20 = compose(flip, x19)\n    x21 = rbind(sfilter, x20)\n    x22 = compose(x21, asobject)\n    x23 = x22(x4)\n    x24 = x22(x4)\n    x25 = x22(x2)\n    x26 = x22(x62)\n    x27 = x22(x8)\n    x28 = fork(gravitate, first, last)\n    x29 = fork(shift, x24, x28)\n    x30 = fork(multiply, x29, x23)\n    x31 = fork(add, x30, x21)\n    x32 = multiply(x31, x5)\n    x33 = shift(x15, x32)\n    x34 = merge(x15)\n    x35 = cover(x16, x34)\n    x36 = mapply(x35, x33)\n    O = paint(x35, x36"], [1.1, "def solve_007f83d8(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = subgrid(I, I)\n    x2 = shape(x1)\n    x3 = add(TWO, x2)\n    x4 = canvas(ZERO, x3)\n    x5 = asobject(x1)\n    x6 = shift(x5, UNITY)\n    x7 = paint(x4, x6)\n    x8 = double(SIX)\n    x9 = astuple(ONE, x8)\n    x10 = connect(UNITY, x9)\n    x11 = outbox(x10)\n    x12 = backdrop(x11)\n    x13 = recolor(ZERO, x12)\n    x14 = recolor(THREE, x10)\n    x15 = lbind(shift, x14)\n    x16 = lbind(mapply, x15)\n    x17 = rbind(occurrences, x13)\n    x18 = compose(x16, x17)\n    x19 = fork(paint, identity, x18)\n    x20 = x19(x7)\n    x21 = ofcolor(x20, THREE)\n    x22 = dmirror(x7)\n    x23 = x19(x22)\n    x24 = dmirror(x23)\n    x25 = ofcolor(x24, THREE)\n    x26 = combine(x21, x25)\n    x27 = fill(x7, THREE, x26)\n    x28 = astuple(TWO, ONE)\n    x29 = dneighbors(UNITY)\n    x30 = remove(x28, x29)\n    x31 = recolor(x30, initset)\n    x32 = initset(UNITY)\n    x33 = recolor(THREE, x32)\n    x34 = combine(x31, x33)\n    x35 = recolor(x4, x34)\n    x36 = astuple(ONE, THREE)\n    x37 = initset(x36)\n    x38 = insert(ZERO_BY_TWO, x37)\n    x39 = insert(RIGHT, x38)\n    x40 = insert(DOWN, x39)"], [1.1, "def solve_25d4d5df(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, astuple)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_d0c7bbf2(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(matcher, x1)\n    x3 = compose(x2, frontiers)\n    x4 = fork(sfilter, mostcolor, x3)\n    x5 = fork(sfilter, identity, x4)\n    x6 = lbind(fork, recolor)\n    x7 = lbind(x6, x5)\n    x8 = compose(x7, x5)\n    x9 = lbind(occurrences, I)\n    x10 = compose(x9, x5)\n    x11 = fork(rapply, x8, x10)\n    x12 = compose(first, x11)\n    x13 = apply(x12, x1)\n    x14 = intersection(x13, x2)\n    x15 = cover(I, x14)\n    x16 = palette(x15)\n    x17 = other(x16, ZERO)\n    x18 = ofcolor(x15, x17)\n    x19 = ofcolor(x15, x8)\n    x20 = intersection(x18, x19)\n    x21 = fill(x15, x17, x20)\n    x22 = ofcolor(x15, x17)\n    x23 = shape(x22)\n    x24 = canvas(ZERO, x23)\n    x25 = lbind(hmirror, x24)\n    x26 = lbind(vconcat, x22)\n    x27 = chain(x25, x26, x25)\n    x28 = compose(x27, x6)\n    x29 = lbind(hmirror, x)\n    x30 = chain(size, x29, x27)\n    x31 = matcher(x30, ZERO)\n    x32 = lbind(fork, both)\n    x33 = lbind(x32, x28)\n    x34 = compose(x33, x31)\n    x35 = lbind(fork, difference)\n    x36 = compose(x35, x31)\n    x37 = fork(x36, x34, x31)\n    x38 = apply(x37,"], [1.1, "def solve_dc7abbeb(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = decrement(x1)\n    x3 = tojvec(x2)\n    x4 = connect(ORIGIN, x3)\n    x5 = height(I)\n    x6 = decrement(x5)\n    x7 = toivec(x6)\n    x8 = connect(ORIGIN, x7)\n    x9 = width(I)\n    x10 = decrement(x9)\n    x11 = tojvec(x10)\n    x12 = connect(ORIGIN, x11)\n    x13 = astuple(x5, x12)\n    x14 = canvas(ZERO, x13)\n    x15 = asindices(x14)\n    x16 = corners(x15)\n    x17 = astuple(tojvec, x12)\n    x18 = frontiers(I)\n    x19 = mfilter(x18, hline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = astuple(x21, x17)\n    x23 = astuple(x21, x22)\n    x24 = canvas(ZERO, x23)\n    x25 = asindices(x24)\n    x26 = astuple(x27, x22)\n    x27 = shift(x25, x26)\n    x28 =887788725977(x27)\n    x29 = height(I)\n    x30 = decrement(x29)\n    x31 = toivec(x30)\n    x32 = shift(x27, x31)\n    x33 = apply(toindices, x32)\n    x34 = rbind(shift, x30)\n    x35 = compose(x34, backdrop)\n    x36 = argmax(x33, x35)\n    x37 = other(x33, x36)\n    x38 = height(I)\n    x39 = increment(x38)\n    x40 = tojvec(x39)\n    x41 = rbind(multiply, x40)\n    x42 = height(I)\n    x43 = increment(x"], [1.1, "def solve_227c28d1(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = lbind(apply, last)\n    x9 = chain(x8, x5, first)\n    x10 = rbind(sfilter, x4)\n    x11 = fork(pair, x10, identity)\n    x12 = compose(x9, size)\n    x13 = chain(x12, x5, first)\n    x14 = rbind(sfilter, x4)\n    x15 = fork(pair, x14, identity)\n    x16 = compose(x15, x7)\n    x17 = fork(sfilter, x11, x16)\n    x18 = fork(argmax, x17, x13)\n    x19 = width(I)\n    x20 =58318935r normalize(I)\n    x21 =58318935(I)\n    x22 = width(x21)\n    x23 = rbind(repeat, x22)\n    x24 = chain(lowermost, x23, x18)\n    x25 = matcher(x24, ZERO)\n    x26 = sfilter(x20, x25)\n    x27 = dmirror(x26)\n    x28 = shape(x27)\n    x29 = add(x28, x29)\n    x30 = crop(x27,ORIN, x29)\n    x31 = apply(x30, x27)\n    x32 = crop(x27, DOWN, x29)\n    x33 = apply(x32, x31)\n    x34 = crop(x27,asobject, x33)\n    x35 =apply(x34, x32)\n    x36 = apply(increment, x35)\n    x37 = apply(tojvec, x36)\n    x38 = prapply(shift, x37, x)\n    x39"], [1.1, "def solve_d7dd5804(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = ofcolor(I, TWO)\n    x2 = portrait(x1)\n    x3 = branch(x2, ZERO, ORIGIN)\n    x4 = downscale(I, THREE)\n    x5 = x3(x4)\n    x6 = equality(x5, TWO)\n    x7 = branch(x6, width, height)\n    x8 = x7(I)\n    x9 = astuple(ONE, x8)\n    x10 = canvas(ZERO, x9)\n    x11 = connect(x10, x7)\n    x12 = fill(x10, EIGHT, x11)\n    x13 = rbind(ofcolor, TWO)\n    x14 = compose(lowermost, x13)\n    x15 = matcher(x14, ZERO)\n    x16 = compose(x15, x13)\n    x17 = fork(both, x13, x16)\n    x18 = extract(x11, x17)\n    x19 = x18(x18)\n    x20 = vmirror(x19)\n    x21 = objects(x20, T, F, F)\n    x22 = merge(x21)\n    x23 = cover(x20, x22)\n    x24 = apply( leftmost, x23)\n    x25 = size(x24)\n    x26 = width(x22)\n    x27 = subtract(x25, x26)\n    x28 = multiply(x27, TWO)\n    x29 = lbind(greater, x28)\n    x30 = compose(x29, last)\n    x31 = sfilter(x24, x30)\n    x32 = compose(decrement, last)\n    x33 = chain(x29, x31, x32)\n    x34 = fork(greater, x30, x33)\n    x35 = decrement(x28)\n    x36 = lbind(astuple, x35)\n    x37 = lbind(shift, x22)\n    x38 = compose(x36, x37)\n    x39 = fork( compose, x35, x38)\n    x40 = decrement(x29"], [1.1, "def solve_237ab065(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(I, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18, x"], [1.1, "def solve_421879a0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ONE)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirror(I)\n    x5 = lbind(contained, ONE)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x4, x6)\n    x8 = compose(hperiod, asobject)\n    x9 = height(x3)\n    x10 = vsplit(x3, x9)\n    x11 = apply(x8, x10)\n    x12 = maximum(x11)\n    x13 = compose(hperiod, asobject)\n    x14 = height(x7)\n    x15 = vsplit(x7, x14)\n    x16 = apply(x13, x15)\n    x17 = maximum(x16)\n    x18 = ofcolor(I, ZERO)\n    x19 = asobject(I)\n    x20 = matcher(first, ZERO)\n    x21 = compose(flip, x20)\n    x22 = sfilter(x19, x21)\n    x23 = lbind(shift, x22)\n    x24 = height(I)\n    x25 = divide(x24, x17)\n    x26 = increment(x25)\n    x27 = width(I)\n    x28 = divide(x27, x12)\n    x29 = increment(x28)\n    x30 = invert(x26)\n    x31 = increment(x26)\n    x32 = interval(x30, x31, ONE)\n    x33 = invert(x29)\n    x34 = increment(x29)\n    x35 = interval(x33, x34, ONE)\n    x36 = product(x32, x35)\n    x37 = astuple(x17, x12)\n    x38 = lbind(multiply, x37)\n    x39 = apply(x38, x36)\n    x40 = mapply(x23, x39)\n    x41 = paint(I, x40)\n    O = subgrid(x18,"], [1.1, "def solve_f0928a47(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x2)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_7cb7dc6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_70bac250(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = toindices(x2)\n    x4 = x1(x3)\n    x5 = ulcorner(x4)\n    x6 = urcorner(x4)\n    x7 = shoot(x5, NEG_UNITY)\n    x8 = shoot(x6, UP_RIGHT)\n    x9 = combine(x7, x8)\n    x10 = intersection(x4, x9)\n    x11 = fork(multiply, height, width)\n    x12 = fork(equality, size, x11)\n    x13 = extract(x10, x12)\n    x14 = mostcolor(I)\n    x15 = rbind(contained, x14)\n    x16 = compose(x15, color)\n    x17 = sfilter(x6, x16)\n    x18 = argmax(x17, size)\n    x19 = remove(x18, x17)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 = lbind(colorcount, x20)\n    x23 = argmin(x21, x22)\n    x24 = ofcolor(x20, x13)\n    x25 = ofcolor(x24, x23)\n    x26 = combine(x24, x25)\n    x27 = intersection(x24, x26)\n    x28 = mapply(neighbors, x27)\n    x29 = apply(neighbors, x28)\n    x30 = rbind(difference, x28)\n    x31 = compose(x30, toindices)\n    x32 = rbind(greater, ONE)\n    x33 = chain(x32, size, x31)\n    x34 = sfilter(x29, x33)\n    x35 = merge(x34)\n    x36 = palette(x35)\n    x37 = rbind(toobject, I)\n    x38 = apply(x37, x36)\n    x39 = rbind(colorcount, x38)\n    x40 = argmax(x38, x"], [1.1, "def solve_1034bd3e(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices27(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4"], [1.1, "def solve_cbc6ad31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = leastcolor(I)\n    x2 = ofcolor(I, x1)\n    x3 = apply(first, x2)\n    x4 = apply(last, x2)\n    x5 = product(x3, x4)\n    x6 = difference(x5, x2)\n    x7 = fill(I, TWO, x6)\n    x8 = lbind(fork, either)\n    x9 = lbind(x8, identity)\n    x10 = lbind(matcher, first)\n    x11 = chain(x9, x10, x9)\n    x12 = lbind(chain, difference)\n    x13 = rbind(x12, toobject)\n    x14 = lbind(rbind, intersection)\n    x15 = compose(x14, toindices)\n    x16 = chain(x11, x13, x15)\n    x17 = lbind(contained, x1)\n    x18 = compose(x17, x16)\n    x19 = lbind(contained, x2)\n    x20 = compose(x19, x16)\n    x21 = fork(both, x18, x20)\n    x22 = fork(both, x11, x21)\n    x23 = compose(flip, x2)\n    x24 = fork(both, x23, x22)\n    x25 = fork(both, x21, x24)\n    x26 = lbind(contained, x1)\n    x27 = compose(x26, x14)\n    x28 = lbind(rbind, difference)\n    x29 = compose(x28, toindices)\n    x30 = fork(sfilter, x25, x29)\n    x31 = fork(difference, x30, toindices)\n    x32 = lbind(rbind, ZERO)\n    x33 = compose(x32, x31)\n    x34 = lbind(rbind, colorcount)\n    x35 = chain(x34, x33, x37)\n    x36 = fork(sfilter, x35, x30)\n    x37 = fork(equality, identity, x36)\n    x38 = compose"], [1.1, "def solve_230bbcb3(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =1964(I)\n    x2 = totuple(x1)\n    x3 = apply(color, x2)\n    x4 = mostcommon(x3)\n    x5 = matcher(color, x4)\n    x6 = compose(flip, x5)\n    x7 = sfilter(x1, x6)\n    x8 = argmax(x7, size)\n    x9 = color(x8)\n    x10 = toindices(x8)\n    x11 = fork(either, hline, vline)\n    x12 = x11(x10)\n    x13 = sfilter(x10, x12)\n    x14 = rbind(gravitate, x13)\n    x15 = compose(x14, initset)\n    x16 = fork(add, identity, x15)\n    x17 = fork(connect, identity, x16)\n    x18 = shape(I)\n    x19 = maximum(x18)\n    x20 = lbind(multiply, x19)\n    x21 = lbind(gravitate, x17)\n    x22 = compose(x20, x21)\n    x23 = fork(add, identity, x22)\n    x24 = canvas(x9, x18)\n    x25 = palette(I)\n    x26 = remove(x4, x25)\n    x27 = lbind(colorcount, I)\n    x28 = argmin(x26, x27)\n    x29 = partition(I)\n    x30 = hascolor(I, x28)\n    x31 = palette(I)\n    x32 = remove(x8, x31)\n    x33 = lbind(ofcolor, I)\n    x34 = argmin(x32, x33)\n    x35 = ofcolor(I, x28)\n    x36 = ofcolor(I, x28)\n    x37 = intersection(x35, x36)\n    x38 = size(x37)\n    x39 = apply(first, x9)\n    x40 = apply(last, x9)\n    x41 = intersection(x39, x40)\n    x42"], [1.1, "def solve_2bee7eba(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_dd0245dc(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x5, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_48ac1d0b(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = remove(x7, x5)\n    x9 = height(I)\n    x10 = increment(x9)\n    x11 = frontiers(I)\n    x12 = sfilter(x11, hline)\n    x13 = size(x12)\n    x14 = increment(x13)\n    x15 = divide(x10, x14)\n    x16 = width(I)\n    x17 = increment(x16)\n    x18 = frontiers(I)\n    x19 = sfilter(x18, vline)\n    x20 = size(x19)\n    x21 = increment(x20)\n    x22 = divide(x17, x21)\n    x23 = rbind(multiply, x15)\n    x24 = rbind(divide, x15)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = rbind(multiply, x22)\n    x28 = rbind(divide, x22)\n    x29 = compose(x27, x28)\n    x30 = fork(equality, identity, x29)\n    x31 = lbind(fork, both)\n    x32 = rbind(compose, first)\n    x33 = lbind(compose, x26)\n    x34 = lbind(rbind, subtract)\n    x35 = compose(x34, uppermost)\n    x36 = chain(x32, x33, x35)\n    x37 = rbind(compose, last)\n    x38 = lbind(compose, x30)\n    x39 = lbind(rbind, subtract)\n    x40 = compose(x39, leftmost)\n    x41 = chain(x37, x38, x40)\n    x42 = fork(x"], [1.1, "def solve_d7ad4bab(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = lbind(colorfilter, x1)\n    x5 = compose(size, x4)\n    x6 = matcher(x5, TWO)\n    x7 = asindices(I)\n    x8 = box(x7)\n    x9 = rbind(difference, x8)\n    x10 = lbind(ofcolor, I)\n    x11 = chain(size, x9, x10)\n    x12 = matcher(x11, ZERO)\n    x13 = rbind(greater, ONE)\n    x14 = lbind(apply, size)\n    x15 = lbind(colorfilter, x1)\n    x16 = compose(x14, x15)\n    x17 = chain(x13, minimum, x16)\n    x18 = fork(both, x12, x17)\n    x19 = fork(both, x6, x18)\n    x20 = extract(x3, x19)\n    x21 = other(x3, x20)\n    x22 = ofcolor(I, x21)\n    x23 = colorfilter(x1, x20)\n    x24 = rbind(vmatching, x22)\n    x25 = rbind(hmatching, x22)\n    x26 = fork(either, x24, x25)\n    x27 = extract(x23, x26)\n    x28 = other(x23, x27)\n    x29 = rbind(gravitate, x27)\n    x30 = compose(x29, initset)\n    x31 = fork(add, identity, x30)\n    x32 = fork(connect, identity, x31)\n    x33 = mapply(x32, x22)\n    x34 = fill(I, x21, x33)\n    x35 = fill(x34, FOUR, x22)\n    x36 = ofcolor(I, x20)\n    x37 = apply(first, x36)\n    x38 = size(x37)\n    x39 = apply"], [1.1, "def solve_429c833a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = compose(x5, color)\n    x7 = compose(double, x4)\n    x8 = lbind(prapply, manhattan)\n    x9 = fork(x8, identity, identity)\n    x10 = lbind(remove, ZERO)\n    x11 = compose(x10, x9)\n    x12 = rbind(branch, NEG_TWO)\n    x13 = fork(x12, positive, decrement)\n    x14 = chain(x13, minimum, x11)\n    x15 = fork(add, x14, x7)\n    x16 = compose(x15, x6)\n    x17 = compose(invert, x16)\n    x18 = order(x2, x17)\n    x19 = rbind(argmin, centerofmass)\n    x20 = compose(initset, vmirror)\n    x21 = fork(insert, dmirror, x20)\n    x22 = fork(insert, cmirror, x21)\n    x23 = fork(insert, hmirror, x22)\n    x24 = compose(x19, x23)\n    x25 = apply(x24, x18)\n    x26 = size(x2)\n    x27 = apply(size, x2)\n    x28 = contained(ONE, x27)\n    x29 = increment(x26)\n    x30 = branch(x28, x26, x29)\n    x31 = double(x30)\n    x32 = decrement(x31)\n    x33 = apply(normalize, x25)\n    x34 = interval(ZERO, x30, ONE)\n    x35 = pair(x34, x34)\n    x36 = mpapply(shift, x33, x35)\n    x37 = astuple(x32, x32)\n    x38 = canvas(x1, x37)"], [1.1, "def solve_76a8d912(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = objects(I, F, T, T)\n    x2 = argmax(x1, mostcolor)\n    x3 = normalize(x2)\n    x4 = remove(x2, x1)\n    x5 = argmin(x4, size)\n    x6 = width(x5)\n    x7 = divide(x6, vline)\n    x8 = upscale(x3, x7)\n    x9 = shift(x8, UNITY)\n    x10 = paint(I, x9)\n    x11 = objects(x10, F, T, T)\n    x12 = argmax(x11, lrcorner)\n    x13 = paint(x10, x12)\n    x14 = normalize(x12)\n    x15 = objects(x6, T, T, T)\n    x16 = rbind(occurrences, x13)\n    x17 = compose(x16, toindices)\n    x18 = fork(laint, x17, x15)\n    x19 = normalize(x14)\n    x20 =rbind(multiply, x6)\n    x21 = apply(x20, x19)\n    x22 = rbind(apply, x21)\n    x23 = lbind(chain, x18)\n    x24 = lbind(x23, x22)\n    x25 = lbind(lbind, shift)\n    x26 = lbind(occurrences, x13)\n    x27 = fork(mapply, x26, x25)\n    x28 = compose(x27, last)\n    x29 = rbind(argmax, x28)\n    x30 = lbind(occurrences, x13)\n    x31 = fork(mapply, x30, x29)\n    x32 = compose(x31, x32)\n    x33 = fork(paint, identity, x323)\n    x34 = rbind(occurrences, x13)\n    x35 = fork(mapply, x33, x24)\n    x36 = compose(x34, x35)\n    x37 = fork(paint, x33, x36)\n    "], [1.1, "def solve_7b92f1ac(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, T, F, T)\n    x8 = colorfilter(x7, x3)\n    x9 = palette(x8)\n    x10 = lbind(remove, x8)\n    x11 = chain(x10, toindices, x8)\n    x12 = chain(x11, x9, x11)\n    x13 = argmax(x9, x12)\n    x14 = rbind(contained, x13)\n    x15 = argmin(x8, x14)\n    x16 = asindices(I)\n    x17 = matcher(first, x15)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x16, x18)\n    x20 = branch(x19, height, width)\n    x21 = informative24(x19)\n    x22 =\"\"\"\n    x23 = difference(x21, x19)\n    x24 = power(increment, TWO)\n    x25 = lbind(apply, x24)\n    x26 = lbind(fafffa47(x23)\n    x27 = lbind(fcc89999b\n    x28 = chain(x25, x26, x27)\n    x29 = x28(x4)\n    x30 = x28(x15)\n    x31 = x28(x14)\n    x32 = x29(x31)\n    x33 = x28(x20)\n    x34 = x28(x22)\n    x35 = combine(x29, x34)\n    x36 = x28(x30)\n    x37 = hconcat(x35, x36)\n    x38 = height(x27)\n    x39 =\n    x40 = divide(x38, x39)\n    x40 =fOUR(x27)\n    x41 = ofcolor(x77, x"], [1.1, "def solve_1813d2c7(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = lbind(mapply, neighbors)\n    x3 = compose(x2, x1)\n    x4 = fork(intersection, x1, x3)\n    x5 = compose(size, x4)\n    x6 = palette(I)\n    x7 = matcher(x5, ZERO)\n    x8 = sfilter(x6, x7)\n    x9 = totuple(x8)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = ofcolor(I, x10)\n    x13 = mapply(neighbors, x12)\n    x14 = toobject(x13, I)\n    x15 = mostcolor(x14)\n    x16 = ofcolor(I, x11)\n    x17 = mapply(neighbors, x16)\n    x18 = toobject(x17, I)\n    x19 = mostcolor(x18)\n    x20 = rbind(shoot, UNITY)\n    x21 = rbind(shoot, NEG_UNITY)\n    x22 = fork(combine, x20, x21)\n    x23 = rbind(shoot, UP_RIGHT)\n    x24 = rbind(shoot, DOWN_LEFT)\n    x25 = fork(combine, x23, x24)\n    x26 = fork(combine, x22, x25)\n    x27 = ofcolor(I, x11)\n    x28 = ofcolor(I, x10)\n    x29 = combine(x27, x28)\n    x30 = mapply(x26, x29)\n    x31 = urcorner(x30)\n    x32 =Rmirror(x31)\n    x33 = hmirror(x32)\n    x34 = NEG_UNITY(x33)\n    x35 = shoot(x31, UNITY)\n    x36 = recolor(x10, x34)\n    x37 = apply(x36, x35)\n    x38 = product(x37, x37)\n    x39 = power(x38, THREE)"], [1.1, "def solve_92e74302(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_2b8b79e7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(ORIGIN, x15)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x30)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 ="], [1.1, "def solve_a971a618(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = intersection(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_cb0d2368(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = index(I, ORIGIN)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = branch(x9, x6, x4)\n    x11 = fill(x10, FOUR, x4)\n    x12 = lbind(contained, x6)\n    x13 = compose(x12, toindices)\n    x14 = fork(sfilter, x13, x11)\n    x15 = size(x1)\n    x16 = height(I)\n    x17 = width(I)\n    x18 = increment(x16)\n    x19 = astuple(x17, x18)\n    x20 = crop(I, ORIGIN, x19)\n    x21 = hmirror(x20)\n    x22 = vmirror(x21)\n    x23 = asobject(x22)\n    x24 = color(x23)\n    x25 = asobject(x24)\n    x26 = vmirror(x25)\n    x27 = asobject(x26)\n    x28 = ulcorner(x27)\n    x29 = mostcolor(I)\n    x30 = lrcorner(x27)\n    x31 = index(I, x30)\n    x32 = subgrid(x31, x8)\n    x33 = asobject(x32)\n    x34 = hmirror(x33)\n    x35 = vmirror(x34)\n    x36 = asobject(x35)\n    x37 = astuple(x31, x36)\n    x38 = add(x37, x31)\n    x39 = width(I)\n    x40 = ulcorner(x36)\n    x41 = index(I, x40)\n    x42 = subtract(x40, x41)\n    x43 = add(x44, x42"], [1.1, "def solve_b5789320(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, T, F, T)\n    x2 = merge(x1)\n    x3 = cover(I, x2)\n    x4 = mapply(d687bc2c\n    x5 = chain(positive, size, dedupe)\n    x6 = apply(x5, x1)\n    x7 = equality(x6, SIX)\n    x8 = branch(x7, vsplit, hsplit)\n    x9 = x8(I, TWO)\n    x10 = argmin(x9, numcolors)\n    x11 = argmax(x9, numcolors)\n    x12 = width(x11)\n    x13 = hsplit(x11, x12)\n    x14 =\n    x15 = divide(xx, x13)\n    x16 = width(x11)\n    x17 = divide(x16, x10)\n    x18 = ZERO(x17)\n    x19 = lbind(multiply, x18)\n    x20 = compose(x19, shape)\n    x21 = lbind(canvas, ZERO)\n    x22 = compose(x21, x20)\n    x23 = fork(concat, x20, x22)\n    x24 = colorfilter(x1, x12)\n    x25 = argmax(x24, x23)\n    x26 = ulcorner(x25)\n    x27 = mostcolor(I)\n    x28 = fill(x23, x27, x26)\n    x29 = shift(x25, x28)\n    x30 = paint(x29, x29)\n    x31 = interval(ONE, x30, ONE)\n    x32 = matcher(first, x25)\n    x33 = hfilter(x31, x32)\n    x34 = rbind(contained, x33)\n    x35 = compose(x34, last)\n    x36 = sfilter(x22, x35)\n    x37 = fill(x30, x12, x36)\n    x38 = ofcolor(x37, x7)\n    x39 =\n    3723445279\n    x38(x"], [1.1, "def solve_9219208b(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9ef26332(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(first, last)\n    x37 = fork(equality, x35, x36)\n    x38 = sfilter(x31, x37)\n    x39 = matcher(first, ZERO)\n    x40 = compose(flip, x39)\n    x41 = fork(sfilter, x40, x39)\n    x46 = argmax(x"], [1.1, "def solve_b8b25c6f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(RIGHT, DOWN)\n    x2 = astuple(DOWN, LEFT)\n    x3 = astuple(x1, x2)\n    x4 = astuple(LEFT, UP)\n    x5 = astuple(UP, RIGHT)\n    x6 = astuple(x4, x5)\n    x7 = combine(x3, x6)\n    x8 = height(I)\n    x9 = astuple(x8, ONE)\n    x10 = canvas(THREE, x9)\n    x11 = hconcat(x10, I)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x13)\n    x15 = tojvec(x14)\n    x16 = identity(DOWN)\n    x17 = connect(x15, x16)\n    x18 = fill(x11, THREE, x17)\n    x19 = identity(x13)\n    x20 = identity(x12)\n    x21 = identity(x12)\n    x22 = identity(F)\n    x23 = identity(ZERO)\n    x24 = compose(first, first)\n    x25 = chain(first, last, x24)\n    x26 = compose(first, first)\n    x27 = chain(last, last, x26)\n    x28 = chain(first, first, first)\n    x29 = chain(first, last, last)\n    x30 = chain(first, first, last)\n    x31 = chain(last, first, last)\n    x32 = compose(decrement, x25)\n    x33 = compose(decrement, x27)\n    x34 = fork(astuple, x32, x33)\n    x35 = compose(decrement, x27)\n    x36 = fork(multiply, x30, x35)\n    x37 = fork(add, x29, x36)\n    x38 = compose(decrement, x28)\n    x39 = fork(multiply, x30, x38)\n    x40 = fork(add, x29, x39)\n    x41 = fork"], [1.1, "def solve_59cedf4e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(contained, F, T)\n    x14 = lbind(apply, urcorner)\n    x15 = compose(x14, x13)\n    x16 = fork(compose, x12, x15)\n    x17 = lbind(48, ZERO)\n    x18 = compose(x17, x16)\n    x19 = fork(sfilter, x15, x18)\n    x20 = fork(difference, x19, identity)\n    x21 = lbind(9chain, center)\n    x22 = lbind(x21, x20)\n    x23 = compose(x22, ulcorner)\n    x24 = chain(x2, x23, x20)\n    x25 = lbind(lbind, shift)\n    x26 = compose(x25, x23)\n    x27 = fork(mapply, x26, x24)\n    x28 = fork(mapply, x27, x26)\n    x29 = palette(I)\n    x30 =(x28, x29)\n    x31 = intersection(x40, x30)\n    x32 = first(x31)\n    x33 = other(x31, x32)\n    x34 = flip(x33)\n    x35 = dmirror(x34)\n    x36 = objects(x35, T, F, T)\n    x37 = apply(toindices, x36)\n    x38 = lbind(rbind,worldcorner)\n    x39 =666x38(x37"], [1.1, "def solve_57c319df(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = objects(I, T, F, F)\n    x2 = palette(I)\n    x3 = compose(maximum, shape)\n    x4 = lbind(apply, x3)\n    x5 = lbind(colorfilter, x1)\n    x6 = chain(maximum, x4, x5)\n    x7 = matcher(x6, ONE)\n    x8 = extract(x2, x7)\n    x9 = lbind(ofcolor, I)\n    x10 = compose(backdrop, x9)\n    x11 = fork(equality, x9, x10)\n    x12 = extract(x2, x11)\n    x13 = ofcolor(I, x12)\n    x14 = ofcolor(I, x8)\n    x15 = rbind(manhattan, x13)\n    x16 = compose(x15, initset)\n    x17 = argmin(x14, x16)\n    x18 = ulcorner(x14)\n    x19 = contained(x18, x14)\n    x20 = shoot(x17, UNITY)\n    x21 = shoot(x17, NEG_UNITY)\n    x22 = combine(x20, x21)\n    x23 = shoot(x17, UP_RIGHT)\n    x24 = shoot(x17, DOWN_LEFT)\n    x25 = combine(x23, x24)\n    x26 = branch(x19, x22, x25)\n    x27 = asindices(I)\n    x28 = outbox(x13)\n    x29 = intersection(x27, x28)\n    x30 = intersection(x29, x26)\n    x31 = initset(x17)\n    x32 = rbind(manhattan, x31)\n    x33 = compose(x32, initset)\n    x34 = argmin(x30, x33)\n    x35 = height(x13)\n    x36 = height(I)\n    x37 = equality(x35, x36)\n    x38 = leftmost(x14)\n    x39 = leftmost(x13)\n    x40 = greater("], [1.1, "def solve_c9e8b1db(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = astuple(ONE, THREE)\n    x2 = astuple(TWO, FOUR)\n    x3 = initset(x2)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = insert(x1, x4)\n    x6 = tojvec(THREE)\n    x7 = toivec(THREE)\n    x8 = connect(x6, x7)\n    x9 = astuple(THREE, SIX)\n    x10 = connect(x6, x9)\n    x11 = combine(x8, x10)\n    x12 = combine(x5, x11)\n    x13 = lbind(contained, x12)\n    x14 = compose(normalize, toindices)\n    x15 = lbind(apply, x14)\n    x16 = chain(x13, x15, partition)\n    x17 = astuple(identity, identity)\n    x18 = astuple(rot90, rot270)\n    x19 = astuple(x17, x18)\n    x20 = interval(rot180, rot180, ONE)\n    x21 = astuple(rot90, rot90)\n    x22 = astuple(x20, x21)\n    x23 = pair(x19, x22)\n    x24 = rbind(rapply, I)\n    x25 = compose(initset, first)\n    x26 = chain(first, x24, x25)\n    x27 = compose(x16, x26)\n    x28 = extract(x23, x27)\n    x29 = first(x28)\n    x30 = last(x28)\n    x31 = x29(I)\n    x32 = palette(I)\n    x33 = lbind(ofcolor, x31)\n    x34 = compose(normalize, x33)\n    x35 = matcher(x34, x12)\n    x36 = extract(x32, x35)\n    x37 = remove(x36, x32)\n    x38 = lbind(colorcount, x31)\n    x39 = argmin(x37, x38)\n"], [1.1, "def solve_f0ab5ef1(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_2b4dd363(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x20 = compose(x24, x25)\n    x21 = fork(equality, identity, x20)\n    x22 = compose(x21, last)\n    x23 = rbind(multiply, x19)\n    x24 = rbind(divide, x19)\n    x25 = compose(x23, x24)\n    x26 = fork(equality, identity, x25)\n    x27 = compose(x26, last)\n    x28 = lbind(apply, first)\n    x29 = lbind(phrase, x8)\n    x30 = rbind(rapply, x27)\n    x31 = compose(initset, first)\n    x32 = chain(first, x30, x31)\n    x33 = compose(x28, x32)\n    x34 = extract(x15, x33"], [1.1, "def solve_4cfa3341(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = mfilter(x1, hline)\n    x3 = mfilter(x1, vline)\n    x4 = uppermost(x2)\n    x5 = leftmost(x3)\n    x6 = astuple(x4, x5)\n    x7 = add(x6, size)\n    x8 = uppermost(x2)\n    x9 = rightmost(x3)\n    x10 = astuple(x8, x9)\n    x11 = add(x10, UP)\n    x12 = lowermost(x2)\n    x13 = leftmost(x3)\n    x14 = astuple(x12, x13)\n    x15 = add(x14, DOWN)\n    x16 = lowermost(x2)\n    x17 = rightmost(x3)\n    x18 = astuple(x16, x17)\n    x19 = add(x18, UNITY)\n    x20 = initset(ORIGIN)\n    x21 = insert(x7, x20)\n    x22 = width(I)\n    x23 = decrement(x22)\n    x24 = tojvec(x23)\n    x25 = initset(x24)\n    x26 = insert(x11, x25)\n    x27 = height(I)\n    x28 = decrement(x27)\n    x29 = toivec(x28)\n    x30 = initset(x29)\n    x31 = insert(x15, x30)\n    x32 = shape(I)\n    x33 = decrement(x32)\n    x34 = initset(x33)\n    x35 = insert(x19, x34)\n    x36 = astuple(x21, x26)\n    x37 = astuple(x31, x35)\n    x38 = combine(x36, x37)\n    x39 = rbind(toobject, I)\n    x40 = compose(x39, backdrop)\n    x41 = apply(x40, x38)\n    x42 = matcher(numcolors, ONE)\n    x43 ="], [1.1, "def solve_864531d4(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = asindices(I)\n    x2 = box(x1)\n    x3 = toobject(x2, I)\n    x4 = mostcolor(x3)\n    x5 = partition(I)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = extract(x5, x7)\n    x9 = color(x8)\n    x10 = palette(I)\n    x11 = remove(x4, x10)\n    x12 = other(x11, x9)\n    x13 = ofcolor(I, x12)\n    x14 = vmirror(x13)\n    x15 = hmirror(x13)\n    x16 = toindices(x8)\n    x17 = combine(x16, x13)\n    x18 = height(x17)\n    x19 = halve(x18)\n    x20 = increment(x19)\n    x21 = width(x17)\n    x22 = halve(x21)\n    x23 = increment(x22)\n    x24 = astuple(x20, x23)\n    x25 = maximum(x24)\n    x26 = invert(x25)\n    x27 = increment(x25)\n    x28 = interval(x26, x27, ONE)\n    x29 = product(x28, x28)\n    x30 = initset(x15)\n    x31 = insert(x14, x30)\n    x32 = product(x29, x31)\n    x33 = ofcolor(I, x4)\n    x34 = rbind(intersection, x33)\n    x35 = fork(shift, last, first)\n    x36 = chain(size, x34, x35)\n    x37 = matcher(x36, ZERO)\n    x38 = sfilter(x32, x37)\n    x39 = rbind(intersection, x13)\n    x40 = fork(shift, last, first)\n    x41 = chain(size, x39, x40)\n    x42 = argmax(x38, x41"], [1.1, "def solve_7b267f73(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = asobject(x21)\n    x23 = asindices(x14)\n    x24 = ofcolor(x14, x13)\n    x25 = argmin(x23, x24)\n    x26 = ulcorner(x25)\n    x27 =652(x25, x22)\n    x28 = add(x26, x27)\n    x29 = lrcorner(x25)\n    x30 = invert(x28)\n    x31 = shift(x29, x30)\n    x32 = lefthalf(x15)\n    x33 = righthalf(x15)\n    x34 = vmirror(x33)\n    x35 = vconcat(x32, x34)\n    x36 = width(x9)\n    x37 = subtract(x35, x36)\n    x38 = tojvec(x37)\n    x39 = shift(x31, x38)\n    x40 =7(x39)\n    x41 = width(x10)\n    x42 = righthalf(x41)\n    x43"], [1.1, "def solve_679f2728(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(apply, last)\n    x2 = compose(positive, first)\n    x3 = lbind(interval, ZERO)\n    x4 = rbind(x3, ONE)\n    x5 = rbind(sfilter, x2)\n    x6 = compose(x4, size)\n    x7 = fork(pair, x6, identity)\n    x8 = chain(x1, x13, x7)\n    x9 = rbind(branch, identity)\n    x10 = rbind(x9, x8)\n    x11 = chain(size, dedupe, first)\n    x12 = lbind(equality, ONE)\n    x13 = chain(x10, x12, x11)\n    x14 = compose(initset, x13)\n    x15 = fork(rapply, x14, identity)\n    x16 = compose(first, x15)\n    x17 = rbind(branch, identity)\n    x18 = rbind(x17, x16)\n    x19 = chain(x18, positive, size)\n    x20 = compose(initset, x19)\n    x21 = fork(rapply, x20, identity)\n    x22 = compose(first, x21)\n    x23 = multiply(TEN, THREE)\n    x24 = power(x22, x23)\n    x25 = compose(rot90, x24)\n    x26 = power(x25, FOUR)\n    x27 = x26(I)\n    x28 = width(x27)\n    x29 = divide(x28, THREE)\n    x30 = downscale(x27, x29)\n    x31 = objects(x30, T, F, F)\n    x32 = valmax(x31, size)\n    x33 = equality(x32, ONE)\n    x34 = equality(x32, FOUR)\n    x35 = equality(x32, FIVE)\n    x36 = branch(x33, TWO, ONE)\n    x37 = branch(x34, THREE, x36)\n    x38 = branch(x35, SIX, x37)\n    O = canvas"], [1.1, "def solve_f39bb665(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_2d646e4a(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = partition(I)\n    x2 = argmax(x1, size)\n    x3 = remove(x2, x1)\n    x4 = merge(x3)\n    x5 = color(x4)\n    x6 = merge(x1)\n    x7 = color(x6)\n    x8 = subgrid(x2, I)\n    x9 = frontiers(x8)\n    x10 = sfilter(x9, hline)\n    x11 = size(x10)\n    x12 = positive(x11)\n    x13 = size(x12)\n    x14 = repeat(x12, x13)\n    x15 = palette(x2)\n    x16 = remove(x12, x15)\n    x17 = lbind(colorcount, x16)\n    x18 = argmin(x12, x17)\n    x19 = ulcorner(x2)\n    x20 = shoot(x19, UNITY)\n    x21 = lrcorner(x2)\n    x22 = shoot(x21, NEG_UNITY)\n    x23 = urcorner(x2)\n    x24 = shoot(x23, UP_RIGHT)\n    x25 = llcorner(x2)\n    x26 = shoot(x25, DOWN_LEFT)\n    x27 = combine(x20, x22)\n    x28 = combine(x24, x26)\n    x29 = combine(x27, x28)\n    x30 = branch(x12, x22, x27)\n    x31 = asindices(x30)\n    x32 = rbind(adjacent, x31)\n    x33 = argmin(x29, x32)\n    x34 = rbind(adjacent, x13)\n    x35 = apply(x34, x32)\n    x36 = vmirror(x34)\n    x37 = invert(x35)\n    x38 = apply(invert, x36)\n    x39 = pair(x37, x38)\n    x40 = shift(x39, UNITY)\n    O = mapply(last, x40)\n    return"], [1.1, "def solve_585cf2fd(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = palette(I)\n    x2 = objects(I, T, F, F)\n    x3 = lbind(colorfilter, x2)\n    x4 = compose(size, x3)\n    x5 = valmin(x1, x4)\n    x6 = matcher(x4, x5)\n    x7 = sfilter(x1, x6)\n    x8 = lbind(colorcount, I)\n    x9 = argmin(x7, x8)\n    x10 = asobject(I)\n    x11 = matcher(first, x9)\n    x12 = compose(flip, x11)\n    x13 = sfilter(x10, x12)\n    x14 = lbind(contained, x9)\n    x15 = compose(flip, x14)\n    x16 = sfilter(I, x15)\n    x17 = asobject(x16)\n    x18 = hperiod(x17)\n    x19 = dmirror(I)\n    x20 = sfilter(x19, x15)\n    x21 = asobject(x20)\n    x22 = hperiod(x21)\n    x23 = cmirror(I)\n    x24 = h talk(x23, x22)\n    x25 = astuple(x24, x7)\n    x26 = dmirror(x25)\n    x27 = ulcorner(x25)\n    x28 = shoot(x27, UNITY)\n    x29 = shoot(x27, NEG_UNITY)\n    x30 = shoot(x27, UP_RIGHT)\n    x31 = shoot(x27, DOWN_LEFT)\n    x32 = combine(x28, x29)\n    x33 = combine(x30, x31)\n    x34 = combine(x32, x33)\n    x35 = astuple(x24, x7)\n    x36 = lbind(multiply, x35)\n    x37 = apply(x36, x34)\n    x38 = lbind(shift, x13)\n    x39 = mapply(x38, x37)\n    O = paint(I"], [1.1, "def solve_a4a81486(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(equality, toindices, box)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = merge(x5)\n    x7 = fill(I, TWO, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = argmin(x8, size)\n    x10 = argmax(x8, size)\n    x11 = ulcorner(x9)\n    x12 = ulcorner(x10)\n    x13 = subgrid(x9, x5)\n    x14 = subgrid(x10, x5)\n    x15 = hconcat(x13, x14)\n    x16 = hconcat(x15, x5)\n    x17 = vconcat(x16, x17)\n    x18 = vconcat(x16, x19)\n    x19 = fgpartition(x18)\n    x20 = merge(x19)\n    x21 = cover(x7, x20)\n    x22 = paint(x21, x9)\n    x23 = solve_0dfd97113(x11)\n    x24 = asindices(x23)\n    x25 = ofcolor(x23, x4)\n    x26 = difference(x24, x25)\n    x27 = fill(x22, NEG_ONE, x26)\n    x28 = initset(x15)\n    x29 = rbind(manhattan, x28)\n    x30 = chain(even, halve, x29)\n    x31 = sfilter(x27, x30)\n    x32 = difference(x27, x31)\n    x33 = fill(x24, ONE, x32)\n    x34 = initset(x25)\n    x35 = insert(x24, x34)\n    x36 = product(x33, x35)\n    x37 = fork(connect, first, last)\n    x38 = mapply(x37, x36)\n    O"], [1.1, "def solve_769c66cb(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = argmin(x7, size)\n    x9 = argmax(x7, size)\n    x10 = remove(x9, x7)\n    x11 = remove(x8, x10)\n    x12 = merge(x11)\n    x13 = color(x12)\n    x14 = subgrid(x9, I)\n    x15 = subgrid(x8, I)\n    x16 = width(x9)\n    x17 = halve(x16)\n    x18 = hupscale(x15, x17)\n    x19 = height(x9)\n    x20 = halve(x19)\n    x21 = vupscale(x18, x20)\n    x22 = rbind(hconcat, x9)\n    x23 = compose(flip, x22)\n    x24 = rbind(hconcat, x10)\n    x25 = compose(flip, x24)\n    x26 = fork(combine, x23, x25)\n    x27 = fork(combine, x28, x26)\n    x28 = fork(either, vline, hline)\n    x29 = rbind(sfilter, x28)\n    x30 = rbind(difference, x76)\n    x31 = chain(size, x29, x30)\n    x32 = matcher(x31, ZERO)\n    x33 = fork(both, x26, x32)\n    x34 = extract(x15, x33)\n    x35 = x24(x34)\n    x36 = power(x22, TWO)\n    x37 = multiply(x36, x35)\n    x38 = x25(x34)\n    x39 = shift(x38, UNITY)\n    x40 = paint(x39, x37)\n"], [1.1, "def solve_5fcc6587(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = objects(I, F, F, T)\n    x2 = rbind(upscale, TWO)\n    x3 = chain(toivec, x2, vmirror)\n    x4 = x3(I)\n    x5 = partition(x4)\n    x6 = lbind(remove, ONE)\n    x7 = chain(center, first, last)\n    x8 = fork(subtract, x7, x6)\n    x9 = fork(multiply, height, width)\n    x10 = fork(equality, size, x9)\n    x11 = sfilter(x5, x10)\n    x12 = argmax(x11, numcolors)\n    x13 = remove(x12, x11)\n    x14 = corners(x12)\n    x15 = toobject(x14, I)\n    x16 = colorfilter(x15, ONE)\n    x17 = rbind(sfilter, x16)\n    x18 = argmin(x13, x17)\n    x19 = frontiers(I)\n    x20 = sfilter(x19, x18)\n    x21 = apply(ulcorner, x20)\n    x22 = size(x21)\n    x23 = equality(x22, ZERO)\n    x24 = branch(x23, hmirror, vmirror)\n    x25 = asobject(x24)\n    x26 = color(x25)\n    x27 = decrement(x22)\n    x28 = toivec(x27)\n    x29 = invert(x28)\n    x30 = insert(x27, x30)\n    x31 = backdrop(x30)\n    x32 = tojvec(x22)\n    x33 = invert(x32)\n    x34 = insert(x33, x30)\n    x35 = order(x32, x34)\n    x36 = combine(x31, x35)\n    x37 = fill(x6, x25, x36)\n    x38 = apply(x29, x35)\n    x39 = fill(x37, x24, x38)\n    x40 = asobject"], [1.1, "def solve_f06ca8d7(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = argmax(x6, x10)\n    x12 = initset(x11)\n    x13 = matcher(x12, ZERO)\n    x14 = rbind(add, x6)\n    x15 = chain(flip, x13, x14)\n    x16 = fork(both, x13, x15)\n    x17 = fork(both, x15, x16)\n    x18 = sfilter(x12, x17)\n    x19 = fork(add, x6, x17)\n    x20 = canvas(ZERO, THREE_BY_THREE)\n    x21 = asindices(x20)\n    x22 = toobject(x21, I)\n    x23 = mostcolor(x22)\n    x24 = uppermost(x18)\n    x25 = lbind(min, x24)\n    x26 = lbind(rbind, add)\n    x27 = chain(x25, x26, x26)\n    x28 = matcher(x27, x11)\n    x29 = initset(x18)\n    x30 = prapply(insert, x29, x28)\n    x31 = rbind(remove, x30)\n    x32 = compose(x31, x7)\n    x33 = fork(subtract, x32, x17)\n    x34 = fork(upscale, x33, x24)\n    x35 = fork(recolor, x24, x34)\n    x36 = mapply(x35, x18)\n    x37 = paint(x20, x36)\n    x38"], [1.1, "def solve_9fa912a8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = objects(I, T, F, F)\n    x3 = colorfilter(x2, x1)\n    x4 = compose(normalize, toindices)\n    x5 = difference(x2, x3)\n    x6 = rbind(bordering, I)\n    x7 = compose(flip, x6)\n    x8 = sfilter(x3, x7)\n    x9 = rbind(toobject, I)\n    x10 = lbind(mapply, neighbors)\n    x11 = compose(x10, toindices)\n    x12 = fork(difference, x11, identity)\n    x13 = chain(mostcolor, x9, x12)\n    x14 = totuple(x8)\n    x15 = apply(x13, x14)\n    x16 = mostcommon(x15)\n    x17 = matcher(x13, x16)\n    x18 = sfilter(x8, x17)\n    x19 = lbind(argmax, x5)\n    x20 = lbind(matcher, x4, x5)\n    x21 = compose(x19, x20)\n    x22 = lbind(sfilter, x8)\n    x23 = fork(inderer, x21, x22)\n    x24 = lbind(rbind, subtract)\n    x25 = chain(x17, x24, x23)\n    x26 = lbind(colorcount, I)\n    x27 = fork(equality, x25, x26)\n    x28 = sfilter(x18, x27)\n    x29 = fork(equality, x27, x28)\n    x30 = sfilter(x26, x29)\n    x31 = fork(paint, identity, x30)\n    x32 = lbind(rbind, add)\n    x33 = compose(x32, box)\n    x34 = fork(37940, x33, x33)\n    x35 = compose(x32, x34)\n    x36 = fork(difference, x35, x31)\n    x37 = fork(77fdfe, x35, x"], [1.1, "def solve_6ce3bf01(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = branch(x1, ZERO, THREE)\n    x2 = asobject(x1)\n    x3 = matcher(first, ZERO)\n    x4 = compose(flip, x3)\n    x5 = sfilter(x2, x4)\n    x6 = fork(multiply, height, width)\n    x7 = fork(equality, size, x6)\n    x8 = compose(flip, x7)\n    x9 = sfilter(x5, x8)\n    x10 = argmax(x9, x7)\n    x11 = remove(x10, x9)\n    x12 = merge(x11)\n    x13 =32(x12)\n    x14 = apply(first, x11)\n    x15 = difference(x13, x14)\n    x16 = size(x15)\n    x17 = equality(x16, ZERO)\n    x18 = branch(x17, height, width)\n    x19 = x18(I)\n    x20 = lbind(colorfilter, x12)\n    x21 = chain(size, x19, x20)\n    x22 = matcher(x21, ZERO)\n    x23 = colorfilter(x15, ZERO)\n    x24 = rbind( noises, x39)\n    x25 = compose(x24, outbox)\n    x26 = fork(branch, x25, outbox)\n    x27 = apply(x26, x23)\n    x28 = initset(x10)\n    x29 = insert(x13, x28)\n    x30 = backdrop(x29)\n    x31 = cover(I, x30)\n    x32 = normalize(x10)\n    x33 = shift(x32, UNITY)\n    x34 = paint(x31, x33)\n    x35 = rot90(x34)\n    x36 =normalize(x10)\n    x37 = shift(x36, UP_RIGHT)\n    x38 = paint(x35, x37)\n    x39 = rot270(x38)\n    x40 = shape(x10)\n    x41 = canvas"], [1.1, "def solve_17638a9e(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = objects(I, T, F, T)\n    x4 = rbind(valmax, width)\n    x5 = lbind(colorfilter, x3)\n    x6 = chain(x4, x5, color)\n    x7 = compose(maximum, shape)\n    x8 = fork(add, x7, x6)\n    x9 = compose(invert, x8)\n    x10 = order(x2, x9)\n    x11 = rbind(add, DOWN)\n    x12 = compose(x11, ulcorner)\n    x13 = fork(contained, x12, toindices)\n    x14 = rbind(add, RIGHT)\n    x15 = compose(x14, ulcorner)\n    x16 = fork(contained, x15, toindices)\n    x17 = fork(add, x13, x16)\n    x18 = rbind(argmax, x17)\n    x19 = compose(initset, identity)\n    x20 = fork(insert, vmirror, x19)\n    x21 = fork(insert, cmirror, x20)\n    x22 = fork(insert, hmirror, x21)\n    x23 = compose(x18, x22)\n    x24 = apply(x23, x10)\n    x25 = size(x2)\n    x26 = apply(size, x2)\n    x27 = contained(ONE, x26)\n    x28 = increment(x25)\n    x29 = branch(x27, x25, x28)\n    x30 = double(x29)\n    x31 = decrement(x30)\n    x32 = apply(normalize, x24)\n    x33 = interval(ZERO, x29, ONE)\n    x34 = pair(x33, x33)\n    x35 = mpapply(shift, x32, x34)\n    x36 = astuple(x31, x31)\n    x37 = canvas(x1, x36)\n    x38 = paint(x37, x35)\n    x39 ="], [1.1, "def solve_c7bd5ed4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(lbind, contained)\n    x14 = compose(x12, x13)\n    x15 = lbind(chain, size)\n    x16 = rbind(x15, x14)\n    x17 = lbind(lbind, sfilter)\n    x18 = compose(x16, x17)\n    x19 = compose(positive, size)\n    x20 = lbind(sfilter, x9)\n    x21 = fork(matcher, x18, size)\n    x22 = chain(x19, x20, x21)\n    x23 = lbind(apply, shape)\n    x24 = chain(size, dedupe, x23)\n    x25 = matcher(x24, ONE)\n    x26 = lbind(apply, x11)\n    x27 = chain(size, dedupe, x26)\n    x28 = matcher(x27, TWO)\n    x29 = compose(size, dedupe)\n    x30 = fork(equality, size, x29)\n    x31 = fork(add, x22, x25)\n    x32 = fork(add, x28, x30)\n    x33 = fork(add, x31, x32)\n    x34 = multiply(TEN, TEN)\n    x35 = lbind(multiply, x34)\n    x36 = compose(x35, x33)\n    x37 = fork(add, x36, size)\n    x38 = lbind(vsplit, I)\n    x39 = apply(x38, x4)\n    x40 = lbind"], [1.1, "def solve_5d06f77c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = double(TEN)\n    x2 = interval(ZERO, x1, ONE)\n    x3 = connect(ORIGIN, DOWN)\n    x4 = connect(ORIGIN, ZERO_BY_TWO)\n    x5 = combine(x3, x4)\n    x6 = astuple(NEG_TWO, TWO)\n    x7 = lbind(multiply, x6)\n    x8 = toivec(NEG_TWO)\n    x9 = apply(x7, x2)\n    x10 = rbind(subtract, TWO_BY_ZERO)\n    x11 = fork(ofcolor, identity, leastcolor)\n    x12 = chain(x10, center, x11)\n    x13 = rbind(mapply, x9)\n    x14 = lbind(lbind, shift)\n    x15 = lbind(shift, x5)\n    x16 = compose(x15, x12)\n    x17 = chain(x13, x14, x16)\n    x18 = lbind(recolor, FIVE)\n    x19 = compose(x18, x17)\n    x20 = fork(paint, identity, x19)\n    x21 = compose(rot180, x20)\n    x22 = fork(ofcolor, x21, leastcolor)\n    x23 = compose(center, x22)\n    x24 = fork(subtract, x23, x12)\n    x25 = fork(shift, x17, x24)\n    x26 = lbind(recolor, FIVE)\n    x27 = rbind(shift, x8)\n    x28 = chain(x26, x27, x25)\n    x29 = fork(paint, x21, x28)\n    x30 = compose(rot180, x29)\n    x31 = rbind(ofcolor, FIVE)\n    x32 = compose(x31, x30)\n    x33 = leastcolor(I)\n    x34 = ofcolor(I, x33)\n    x35 = mostcolor(I)\n    x36 = shape(I)\n    x37 = canvas(x35, x"], [1.1, "def solve_651e0313(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 = compose(first, last)\n    x4 = totuple(x2)\n    x5 = apply(x3, x4)\n    x6 = mostcommon(x5)\n    x7 = compose(last, last)\n    x8 = totuple(x2)\n    x9 = apply(x7, x8)\n    x10 = mostcommon(x9)\n    x11 = compose(first, last)\n    x12 = matcher(x11, x6)\n    x13 = sfilter(x2, x12)\n    x14 = compose(last, last)\n    x15 = matcher(x14, x10)\n    x16 = sfilter(x2, x15)\n    x17 = objects(I, F, T, T)\n    x18 = size(x17)\n    x19 = equality(x18, TWO)\n    x20 = mfilter(x17, hline)\n    x21 = mfilter(x17, vline)\n    x22 = branch(x19, x20, x13)\n    x23 = branch(x19, x21, x16)\n    x24 = width(x22)\n    x25 = lbind(multiply, x24)\n    x26 = width(I)\n    x27 = divide(x26, x24)\n    x28 = increment(x27)\n    x29 = interval(ZERO, x28, ONE)\n    x30 = apply(x25, x29)\n    x31 = apply(invert, x30)\n    x32 = combine(x30, x31)\n    x33 = apply(tojvec, x32)\n    x34 = lbind(shift, x22)\n    x35 = mapply(x34, x33)\n    x36 = height(x23)\n    x37 = lbind(multiply, x36)\n    x38 = height(I)\n    x39 = height(x22)\n    x40 = divide(x38, x39)\n    x41 = increment(x40)\n    x42 = interval"], [1.1, "def solve_05d8af31(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = shape(I)\n    x2 = decrement(x1)\n    x3 = connect(ORIGIN, x2)\n    x4 = height(I)\n    x5 = decrement(x4)\n    x6 = toivec(x5)\n    x7 = width(I)\n    x8 = decrement(x7)\n    x9 = tojvec(x8)\n    x10 = connect(x6, x9)\n    x11 = height(I)\n    x12 = halve(x11)\n    x13 = toivec(x12)\n    x14 = width(I)\n    x15 = decrement(x14)\n    x16 = astuple(x12, x15)\n    x17 = connect(x13, x16)\n    x18 = width(I)\n    x19 = halve(x18)\n    x20 = tojvec(x19)\n    x21 = height(I)\n    x22 = decrement(x21)\n    x23 = astuple(x22, x19)\n    x24 = connect(x20, x23)\n    x25 = astuple(x3, dmirror)\n    x26 = astuple(x10, cmirror)\n    x27 = astuple(x25, x26)\n    x28 = astuple(x24, vmirror)\n    x29 = astuple(x17, hmirror)\n    x30 = astuple(x28, x29)\n    x31 = combine(x27, x30)\n    x32 = lbind(colorcount, I)\n    x33 = rbind(toobject, I)\n    x34 = compose(x33, first)\n    x35 = chain(x32, color, x34)\n    x36 = compose(size, first)\n    x37 = fork(equality, x35, x36)\n    x38 = rbind(toobject, I)\n    x39 = chain(numcolors, x38, first)\n    x40 = matcher(x39, ONE)\n    x41 = fork(both, x40, x37)\n    x42 = extract(x"], [1.1, "def solve_9b5ef738(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = increment(x19)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = mapply(x16, x21)\n    x23 = rbind(contained, x22)\n    x24 = sfilter(x4, x23)\n    x25 = asindices(I)\n    x26 = corners(x25)\n    x27 = difference(x25, x26)\n    x28 = toobject(x27, I)\n    x29 = mostcolor(x28)\n    x30 = palette(I)\n    x31 = other(x30, x29)\n    x32 = ulcorner(x4)\n    x33 = index(x3, x32)\n    x34 = equality(x33, x31)\n    x35 = urcorner(x4)\n    x36 = index(x3, x35)\n    x37 = equality(x36, x31)\n    x38 = llcorner(x4)\n    x39 = index(x3, x38)\n    x40 = equality(x39, x31)\n    x41 = lrcorner(x4)"], [1.1, "def solve_9a9553d8(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, TWO)\n    x2 = lbind(apply, numcolors)\n    x3 = compose(x1, x2)\n    x4 = lbind(apply, shape)\n    x5 = chain(size, dedupe, x4)\n    x6 = matcher(x5, ONE)\n    x7 = compose(palette, first)\n    x8 = compose(palette, last)\n    x9 = fork(intersection, x7, x8)\n    x10 = compose(size, x9)\n    x11 = matcher(x10, ONE)\n    x12 = lbind(contained, ONE)\n    x13 = compose(minimum, shape)\n    x14 = lbind(apply, x13)\n    x15 = chain(flip, x12, x14)\n    x16 = fork(add, x3, x6)\n    x17 = fork(add, x11, x15)\n    x18 = fork(add, x16, x17)\n    x19 = vsplit(I, TWO)\n    x20 = hsplit(I, TWO)\n    x21 = astuple(x19, x20)\n    x22 = argmax(x21, x18)\n    x23 = argmin(x22, numcolors)\n    x24 = argmax(x22, numcolors)\n    x25 = palette(x23)\n    x26 = palette(x24)\n    x27 = intersection(x25, x26)\n    x28 = first(x27)\n    x29 = asindices(x23)\n    x30 = ofcolor(x23, x28)\n    x31 = difference(x29, x30)\n    x32 = asobject(x24)\n    x33 = matcher(first, x28)\n    x34 = sfilter(x32, x33)\n    x35 = difference(x32, x34)\n    x36 = shape(x23)\n    x37 = multiply(x36, x36)\n    x38 = canvas(x28, x37)\n    x39 = lbind(shift, x31)\n    x40 = lbind("], [1.1, "def solve_38cb5881(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = partition(I)\n    x2 = fork(multiply, height, width)\n    x3 = argmin(x1, x2)\n    x4 = color(x3)\n    x5 = palette(I)\n    x6 = other(x5, x4)\n    x7 = subgrid(x3, I)\n    x8 = fork(multiply, identity, identity)\n    x9 = width(x7)\n    x10 = matcher(x8, x9)\n    x11 = fork(multiply, identity, identity)\n    x12 = height(x7)\n    x13 = matcher(x11, x12)\n    x14 = width(x7)\n    x15 = interval(ONE, x14, ONE)\n    x16 = extract(x15, x10)\n    x17 = height(x7)\n    x18 = interval(ONE, x17, ONE)\n    x19 = extract(x18, x13)\n    x20 = width(x7)\n    x21 = interval(ZERO, x20, ONE)\n    x22 = height(x7)\n    x23 = interval(ZERO, x22, ONE)\n    x24 = rbind(multiply, x16)\n    x25 = rbind(divide, x16)\n    x26 = compose(x24, x25)\n    x27 = fork(equality, identity, x26)\n    x28 = compose(x27, last)\n    x29 = rbind(multiply, x19)\n    x30 = rbind(divide, x19)\n    x32 = compose(x29, x30)\n    x33 = fork(equality, identity, x32)\n    x34 = compose(x33, last)\n    x35 = lbind(apply, first)\n    x36 = rbind(sfilter, x28)\n    x37 = rbind(pair, x21)\n    x38 = chain(x35, x36, x37)\n    x39 = compose(x32, x38)\n    x40 = extract(x1, x39)\n    x41 = last(x40)\n    "], [1.1, "def solve_ce671096(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = sfilter(x1, hline)\n    x3 = size(x2)\n    x4 = positive(x3)\n    x5 = branch(x4, identity, dmirror)\n    x6 = x5(I)\n    x7 = frontiers(I)\n    x8 = merge(x7)\n    x9 = mostcolor(x8)\n    x10 = matcher(identity, x9)\n    x11 = rbind(sfilter, x10)\n    x12 = compose(size, x11)\n    x13 = argmin(x6, x12)\n    x14 = ofcolor(x13, x9)\n    x15 = ofcolor(x13, x10)\n    x26 = subgrid(x14, x6)\n    x27 = subgrid(x15, x6)\n    x28 = palette(x16)\n    x29 = remove(x9, x28)\n    x30 = argmin(x29, x12)\n    x31 = rbind(colorcount, x30)\n    x32 = rbind(toobject, x31)\n    x33 = chain(x30, x32, initset)\n    x34 = apply(x33, x27)\n    x35 = ofcolor(x34, x10)\n    x36 = ofcolor(x34, x shoot)\n    x37 = apply(x35, x36)\n    x38 = fill(x6, x27, x37)\n    x39 = ofcolor(x38, x30)\n    x40 = ofcolor(x38, x356)\n    x41 = fill(x38, x39, x40)\n    x42 = mapply(x33, x34)\n    x43 = uppermost(x42)\n    x44 = lbind(10, x43)\n    x45 = shift(x44, NEG_UNITY)\n    x46 = lbind(greater, x43)\n    x47 = compose(x46, UP_RIGHT)\n    x48 = rbind(sfilter, x27)\n    x49 = chain(x47,"], [1.1, "def solve_57dc8aa7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = trim(I)\n    x2 =insert(ORIGIN, x1)\n    x3 = upscale(x2, TWO)\n    x4 = insert(TWO_BY_TWO, x3)\n    x5 = asobject(x4)\n    x6 = toindices(x5)\n    x7 = ZERO_BY_TWO)\n    x8 = ulcorner(x6)\n    x9 = add(x8, UNITY)\n    x10 = shift(x6, x9)\n    x11 = fill(I, ZERO, x10)\n    x12 = lbind(shift, x6)\n    x13 = apply(x12, x11)\n    x14 = mapply(x12, x13)\n    O = paint(x11, x14)\n    return O"], [1.1, "def solve_adfdbb72(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(SIX, x1)\n    x3 = lbind(ofcolor, I)\n    x4 = compose(x3, urcorner)\n    x5 = astuple(x2, x4)\n    x6 = ofcolor(I, TWO)\n    x7 = first(x6)\n    x8 = first(x7)\n    x9 = last(x7)\n    x10 = greater(x8, x9)\n    x11 = branch(x10, initset,548or487)\n    x12 = canvas(ZERO, x5)\n    x13 = compose(first, last)\n    x14 = chain(x13,951120, first)\n    x15 = lbind(contained, TWO)\n    x16 = compose(x15, first)\n    x17 = lbind(contained, THREE)\n    x18 = compose(x17, first)\n    x19 = fork(add, x16, x18)\n    x20 = fork(add, x14, x19)\n    x21 = compose(positive, size)\n    x22 = rbind(intersection, x7)\n    x23 = rbind(shoot, UP)\n    x24 = chain(x21, x22, x23)\n    x25 = sfilter(x15, x24)\n    x26 = chain(size, dedupe, first)\n    x27 = compose(positive, size)\n    x28 = lbind(compose, x27)\n    x29 = lbind(fork, intersection)\n    x30 = compose(x28, x29)\n    x31 = lbind(compose, x07)\n    x32 = compose(x31, x30)\n    x33 = fork(mapply, x26, x32)\n    x34 = fork(intersection, x33, x30)\n    x35 = mapply(x34, x25)\n    x36 = fill(I, THREE, x35)\n    O = fill(x36, EIGHT, x36)\n    return O"], [1.1, "def solve_10d54a56(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 =2dc187(x2)\n    x4 = shape(x3)\n    x5 = merge(x1)\n    x6 = cover(I, x5)\n    x7 = hconcat(x6, x4)\n    x8 = hconcat(x7, x4)\n    O = vconcat(x8, x4)\n    return O"], [1.1, "def solve_7b51646f(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    1 =64rot90(I)\n    x2 =64quire(x1, ONE)\n    O = replace(I, EIGHT, x2)\n    return O"], [1.1, "def solve_d377d2a7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =175(I)\n    x2 =7444(x1)\n    x3 =297(x2, box)\n    O = fill(I, FOUR, x3)\n    return O"], [1.1, "def solve_fae26e96(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, ONE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = palette(x6)\n    x9 = palette(x7)\n    x10 = intersection(x8, x9)\n    x11 = first(x10)\n    x12 = objects(x6, T, F, T)\n    x13 = merge(x12)\n    x14 = shift(x13, UNITY)\n    x15 = paint(x6, x14)\n    x16 = ofcolor(x15, x11)\n    x17 = size(x16)\n    x18 = positive(x17)\n    x19 = branch(x18, vmirror, hmirror)\n    x20 = x19(x16)\n    x21 = ofcolor(x20, x11)\n    x22 = ofcolor(x20, TWO)\n    x23 = pair(x21, x22)\n    x24 = mapply(first, x23)\n    x25 = mapply(last, x23)\n    x26 = fill(x15, SIX, x24)\n    O = fill(x26,060, x25)\n    return O"], [1.1, "def solve_fb5d5f60(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = compose(increment,\n    5510000000000000000\n    44709000000002b tojvec\n    0001000000001\n    2000000000000000030840\n    \"\"\"\n    x2 = increment(NINE)\n    x3 = interval(ZERO, x2, ONE)\n    x4 = fork(multiply, tojvec, box)\n    x5 = fork(multiply, center, x4)\n    x6 = fork(add, size, x5)\n    x7 = compose(x6, toivec)\n    x8 = lbind(add, DOWN)\n    x9 = compose(x8, tojvec)\n    x10 = initset(x9)\n    x11 = lbind(insert, x10)\n    x12 = compose(backdrop, x11)\n    x13 = mapply(x12, x3)\n    x14 = fill(I, ZERO, x13)\n    O = replace(x14, SEVEN, FIVE)\n    return O"], [1.1, "def solve_f127aba6(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = palette(x2)\n    x4 = shape(I)\n    x5 = canvas(NEG_ONE, x4)\n    x6 = hconcat(I, x5)\n    x7 = canvas(NEG_ONE, x6)\n    x8 = objects(x7, F, F, T)\n    x9 = matcher(color, ZERO)\n    x10 = extract(x8, x9)\n    x11 = lbind(sfilter, x8)\n    x12 = lbind(matcher, FOUR)\n    x13 = compose(x11, x12)\n    x14 = rbind(sfilter, x13)\n    x15 = merge(x8)\n    x16 = palette(x15)\n    x17 = totuple(x16)\n    x18 = first(x17)\n    x19 = last(x17)\n    x20 = palette(I)\n    x21 = remove(x8, x20)\n    x22 = repeat(x8, ONE)\n    x23 =263(x22)\n    x24 = ofcolor(x12, x23)\n    x25 = ofcolor(x12, x8)\n    x26 = ofcolor(x12, x1)\n    x27 = rbind(argmin, x27)\n    x28 = lbind(rbind, manhattan)\n    x29 = compose(x28, initset)\n    x30 = compose(x27, x29)\n    x31 = rbind(remove, x38)\n    x32 = compose(x31, x30)\n    x33 = fork(subtract, identity, x32)\n    x34 = fork(shift, identity, x33)\n    x35 = mapply(x34, x24)\n    x36 = ofcolor(x15, x23)\n    x37 = intersection(x36, x35)\n    x38 = mapply(neighbors, x37)\n    O = paint(x12, x38)\n    return O"], [1.1, "def solve_4a170175(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =if11(I)\n    x2 =077df224(x1)\n    x3 = equality(x2, I)\n    x4 = branch(x3, x1, SEVEN)\n    O = canvas(x4, TWO_BY_TWO)\n    return O"], [1.1, "def solve_a97522c1(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = merge(x1)\n    x3 =75dneighbors(x2)\n    x4 = insert(x2, x3)\n    O = fill(I, THREE, x4)\n    return O"], [1.1, "def solve_b4847676(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = astuple(SIX, TWO)\n    x2 = crop(I, ORIGIN, x1)\n    x3 = apply(x2, x2)\n    x4 = repeat(x3, ONE)\n    x5 = puts(x4, UNITY)\n    x6 = asobject(x5)\n    x7 = palette(I)\n    x8 = lbind(remove, NEG_ONE)\n    x9 = compose(x8, shape)\n    x10 = lbind(multiply, x1)\n    x11 = chain(x10, double, x9)\n    x12 = asindices(x5)\n    x13 = ofcolor(I, NEG_ONE)\n    x14 = difference(x13, x12)\n    x15 = partition(I)\n    x16 = rbind(contained, x15)\n    x17 = compose(x16, last)\n    x18 = sfilter(x17, x14)\n    x19 = argmax(x18, x11)\n    x20 = other(x19, x9)\n    x21 = palette(I)\n    x22 = remove(x3, x21)\n    x23 = other(x22, x10)\n    x24 = ofcolor(I, x23)\n    x25 =39eb branch(x24, positive, decrement)\n    x26 = shoot(x22, UNITY)\n    x27 = shoot(x25, UP_RIGHT)\n    x28 = combine(x26, x27)\n    x29 = rbind(shoot, LEFT)\n    x30 = mapply(x29, x28)\n    x31 = underfill(I, x23, x30)\n    x32 = other(x31, x9)\n    x33 = ofcolor(x31, x23)\n    x34 = initset(x33)\n    x35 = cover(x32, x34)\n    x36 = height(x35)\n    x37 = equality(x36, ONE)\n    x38 = intersection(x33, x34)\n    O = fill(x37, x23, x38)\n    return O"], [1.1, "def solve_3f5a7225(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = portrait(I)\n    x2 = branch(x1, identity, dmirror)\n    x3 = x2(I)\n    x4 = asindices(x3)\n    x5 = shoot(ORIGIN, UNITY)\n    x6 = intersection(x5, x4)\n    x7 = lrcorner(x6)\n    x8 = shoot(x7, DOWN_LEFT)\n    x9 = intersection(x8, x4)\n    x10 = combine(x6, x9)\n    x11 = llcorner(x10)\n    x12 = remove(x11, x10)\n    x13 = lbind(shift, x12)\n    x14 = height(x12)\n    x15 = lbind(multiply, x14)\n    x16 = chain(x13, toivec, x15)\n    x17 = height(x3)\n    x18 = height(x12)\n    x19 = divide(x17, x18)\n    x20 = mapply(x16, x4)\n    x21 = mapply(x12, x4)\n    x22 = combine(x20, x21)\n    x23 =0920(02)\n    x24 = lrcorner(x23)\n    x25 = height(x3)\n    x26 = increment(x25)\n    x27 = interval(ZERO, x26, x278)\n    x28 = apply(x27, x25)\n    x29 = apply(x33, x28)\n    x30 = lbind(shift, x22)\n    x31 = mapply(x30, x29)\n    x32 = paint(x3, x31)\n    O = x2(x32)\n    return O"], [1.1, "def solve_ce669156(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(greater, THREE)\n    x2 = compose(x1, size)\n    x3 = sfilter(x2, x2)\n    x4 = apply(merge, x3)\n    x5 = mapply(d12, x4)\n    x6 = portrait(x5)\n    x7 = branch(x6, vsplit, hsplit)\n    x8 = x7(I, TWO)\n    x9 = order(x8, numcolors)\n    x10 = first(x9)\n    x11 = last(x9)\n    x12 = objects(x11, F, F, T)\n    x13 = merge(x12)\n    x14 = toindices(x13)\n    x15 = rbind(contained, x14)\n    x16 = compose(flip, x15)\n    x17 = sfilter(x12, x16)\n    x18 = argmax(x17, lrcorner)\n    x19 = fgpartition(x88)\n    x20 = merge(x19)\n    x21 = palette(x20)\n    x22 =3906(x18, x21)\n    x23 = difference(x22, x18)\n    x24 = first(x23)\n    x25 = color(x18)\n    x26 =194(x24)\n    x27 = ofcolor(x88, x25)\n    x28 = leftmost(x27)\n    x29 = ofcolor(x88, x24)\n    x30 = leftmost(x29)\n    x31 = greater(x28, x30)\n    x32 = uppermost(x27)\n    x33 = neighbors(x32)\n    x34 = toobject(x33, x88)\n    x35 = hmirror(x34)\n    x36 = vmirror(x35)\n    x37 = shift(x35, x36)\n    x38 = paint(x88, x37)\n    x39 = trim(x38)\n    O = x7(x39)\n    return O"], [1.1, "def solve_19eefb3f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = mostcolor(I)\n    x2 = fgpartition(I)\n    x3 = matcher(color, x1)\n    x4 = compose(flip, x3)\n    x5 = extract(x2, x4)\n    x6 = fork(subtract, last, width)\n    x7 = fork(multiply, x6, x5)\n    x8 =987(ORIGIN)\n    x9 = mapply(x7, x8)\n    x10 = subtract(SIX, x9)\n    x11 = power(outbox, x10)\n    x12 = palette(I)\n    x13 = apply(x11, x12)\n    x14 = lbind(colorcount, I)\n    x15 = argmin(x13, x14)\n    x16 = matcher(first, x15)\n    x17 = mfilter(x19, x16)\n    x18 = replace(I, x15, x9)\n    x19 = lbind(difference, x8)\n    x20 = chain(positive, size, x19)\n    x21 = matcher(x20, ZERO)\n    x22 = compose(first, x21)\n    x23 = chain(positive, size, x22)\n    x24 = sfilter(x19, x23)\n    x25 = compose(maximum, x24)\n    x26 = matcher(x25, ONE)\n    x27 = sfilter(x24, x26)\n    x28 = apply(toindices, x27)\n    x29 = lbind(mapply, x28)\n    x30 = lbind(lbind, shift)\n    x31 = compose(x30, x29)\n    x32 = fork(difference, x31, x23)\n    x33 = fork(shift, x27, x32)\n    x34 = mapply(x33, x27)\n    O = paint(x16, x34)\n    return O"], [1.1, "def solve_494c6f33(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = hconcat(I, x9)\n    x11 = objects(x10, T, F, T)\n    x12 = apply(uppermost, x11)\n    x13 = order(x12, identity)\n    x14 = lbind(sfilter, x11)\n    x15 = lbind(matcher, uppermost)\n    x16 = compose(x14, x15)\n    x17 = chain(x16, x13, x16)\n    x18 = fork(85, x17, identity)\n    x19 = lbind(apply, color)\n    x20 = rbind(order, leftmost)\n    x21 = chain(x19, x20, x16)\n    x22 = fork(sfilter, x18, x21)\n    x23 = compose(x17, x22)\n    x24 = apply(x23, x13)\n    x25 = dmirror(x24)\n    x26 = papply(pair, x24, x25)\n    x27 = apply(x21, x26)\n    x28 = multiply(TEN, TEN)\n    x29 = rbind(subtract, x28)\n    x30 = chain(x29, x27, size)\n    x31 = fork(rapply, x30, identity)\n    x32 = mapply(x31, x branch)\n    O = paint(x9, x32)\n    return O"], [1.1, "def solve_9c06eca8(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = backdrop(x2)\n    x6 = cover(I, x5)\n    x7 = lrcorner(x2)\n    x8 = add(x7, ZERO)\n    x9 = rbind(multiply, x8)\n    x10 = apply(x9, x4)\n    x11 =353(x10)\n    x12 = palette(x11)\n    x13 = lbind(mfilter, x12)\n    x14 = rbind(toobject, x11)\n    x15 = lbind(ofcolor, x11)\n    x16 = chain(x13, x14, x15)\n    x17 = power(x16, TWO)\n    x18 = x17(x11)\n    O = fill(x6, x3, x18)\n    return O"], [1.1, "def solve_c91e11d0(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = height(I)\n    x2 = subgrid(x1, I)\n    x3 = partition(x2)\n    x4 =multiply(x1, THREE)\n    x5 = astuple(x4, x4)\n    x6 = crop(x2, ORIGIN, x5)\n    x7 =39a8645d83733683\n    x8 =86(x6,9318669\n    8484969944\n    9810smart3ed(x8)\n    x9 = add(x1, THREE)\n    x10 = tojvec(x9)\n    x11 = height(x7)\n    x12 = increment(x11)\n    x13 = interval(ZERO, x12, ONE)\n    x14 = height(x10)\n    x15 = interval(x14, THREE, x14)\n    x16 = apply(tojvec, x15)\n    x17 = apply(asobject, x16)\n    x18 =44(x17)\n    x19 = lbind(shift, x18)\n    x20 = mapply(x19, x11)\n    O = paint(x2, x20)\n    return O"], [1.1, "def solve_35bf20ed(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = input:\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    5555555555\n    \"\"\"\n    x2 = trim(I)\n    x3 = output(x2, ZERO)\n    x4 = order(x3, identity)\n    x5 = apply(color, x4)\n    x6 = astuple(ONE, THREE)\n    x7 = size(x5)\n    x8 = interval(ZERO, x6, ONE)\n    x9 = mpapply(recolor, x8, x7)\n    O = paint(x3, x9)\n    return O"], [1.1, "def solve_708751d7(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =73mirror(I)\n    x2 = objects(x1, T, F, T)\n    x3 = apply(normalize, x2)\n    x4 = astuple(NINE, NINE)\n    x5 = canvas(ZERO, x4)\n    x6 = asindices(x5)\n    x7 = box(x6)\n    x8 = center(x6)\n    x9 = lbind(contained, ZERO)\n    x10 = rbind(ofcolor, ZERO)\n    x11 = compose(x9, x10)\n    x12 = chain(x11, center, initset)\n    x13 = fork(gravitate, identity, x12)\n    x14 = compose(rot90, x13)\n    x15 = power(x14, FOUR)\n    x16 = fork(add, height, width)\n    x17 = fork(decrement, x16, x12)\n    x18 = fork(equality, toindices, x17)\n    x19 = fork(both, x15, x18)\n    x20 = mfilter(x3, x19)\n    O = fill(x5, FIVE, x20)\n    return O"], [1.1, "def solve_0397539c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(index, I)\n    x2 = lbind(extract, x1)\n    x3 = chain(x2, positive, size)\n    x4 = fork(shift, identity, x3)\n    x5 = compose(x4, urcorner)\n    x6 = compose(x4, DOWN)\n    x7 = fork(04, shape, x6)\n    x8 = chain(x5, x5, x7)\n    x9 = matcher(x8, ZERO)\n    x10 =\"\"\"\n    x11 = fork(indices, x8, identity)\n    x12 = apply(x11, x1)\n    x13 = rbind(shoot, UP)\n    x14 = mapply(x13, x12)\n    x15 = underfill(I, ONE, x14)\n    x16 = objects(x15, T, F, T)\n    x17 = colorfilter(x16, ONE)\n    x18 = rbind(bordering, I)\n    x19 = mfilter(x17, x18)\n    x20 = cover(x15, x19)\n    O = paint(x20, x19)\n    return O"], [1.1, "def solve_08a6c6fb(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =795(I)\n    x2 = lefthalf(x1)\n    x3 = righthalf(x1)\n    x4 = tophalf(x3)\n    x5 = bottomhalf(x3)\n    x6 = tophalf(x2)\n    x7 = bottomhalf(x2)\n    x8 = connect(x4, x5)\n    x9 = connect(x4, x6)\n    x10 = combine(x8, x9)\n    O = leastcommon(x10)\n    return O"], [1.1, "def solve_ec5f4ef7(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = fork(multiply, height, width)\n    x2 = decrement(x1)\n    x3 =86(x2, F76)\n    x4 = crop(I, ORIGIN, x3)\n    x5 = backdrop(x4)\n    x6 = toobject(x5, I)\n    x7 = mostcolor(x6)\n    x8 = palette(I)\n    x9 = remove(x7, x8)\n    x10 = insert(x7, x9)\n    x11 = first(x10)\n    x12 = last(x10)\n    x13 = ofcolor(I, x11)\n    x14 = crop(I, x13, x11)\n    x15 =41(x14)\n    x16 = subgrid(x15, x5)\n    x17 = asobject(x16)\n    x18 = matcher(first, x11)\n    x19 = compose(flip, x18)\n    x20 = sfilter(x17, x19)\n    x21 = trim(x20)\n    x22 = asobject(x21)\n    x23 = decrement(x22)\n    x24 =88 divide(x23, x12)\n    x25 = increment(x24)\n    x26 =777f25ff(I, x25)\n    x27 = asobject(x26)\n    x28 = decrement(x27)\n    x29 =88 divide(x28, x12)\n    x30 = increment(x29)\n    x31 = objects(x28, T, T, T)\n    x32 = colorfilter(x31, x11)\n    x33 = crop(x20, ORIGIN, x12)\n    x34 = valmin(x32, x33)\n    x35 = sizefilter(x32, x34)\n    x36 = recolor(x11, x34)\n    x37 = compose(flip, x28)\n    x38 = mfilter(x35, x37)\n    x39 = paint(I, x38)\n    O = subgrid(x39, x4)\n    return O"], [1.1, "def solve_cdb03031(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = subgrid(x2, I)\n    x5 = leastcolor(x4)\n    x6 = replace(x4, x5, ZERO)\n    x7 = replace(x6, x3, x5)\n    x8 = compress(x7)\n    x9 = width(x8)\n    x10 = divide(x9, THREE)\n    x11 = downscale(x8, x10)\n    x12 = height(x8)\n    x13 = crop(x interval, ZERO, x12)\n    x14 = rbind(ofcolor, x5)\n    x15 = compose(x14, last)\n    x16 = fork(recolor, first, x15)\n    x17 = mapply(x16, x13)\n    O = paint(x4, x17)\n    return O"], [1.1, "def solve_756ff3b4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = fgpartition(I)\n    x2 = matcher(toindices, F normalize)\n    x3 = compose(flip, x2)\n    x4 = extract(x1, x3)\n    x5 = remove(x4, x1)\n    x6 = lbind(intersection, x4)\n    x7 = compose(size, x6)\n    x8 = argmax(x5, x7)\n    x9 = height(x8)\n    x10 = positive(x9)\n    x11 = branch(x10, x7, x6)\n    x12 = subtract(x11, TWO)\n    x13 = size(x8)\n    x14 = interval(ZERO, x13, ONE)\n    x15 = output:\n    x12, x14)\n    x16 = interval(ONE, x12, ONE)\n    x17 = rbind(multiply, x15)\n    x18 = apply(x17, x16)\n    x19 = lbind(shift, x8)\n    x20 = mapply(x19, x18)\n    x21 = paint(I, x20)\n    O = subgrid(x4, x21)\n    return O"], [1.1, "def solve_ef7f753c(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = palette(I)\n    x5 = remove(x3, x4)\n    x6 = lbind(colorcount, I)\n    x7 = argmax(x5, x6)\n    x8 = shape(I)\n    x9 = canvas(x7, x8)\n    x10 = lbind(toobject, I)\n    x11 = apply(x10, x9)\n    x12 = colorfilter(x11, x3)\n    x13 = combine(x12, x11)\n    x14 = toobject(x13, I)\n    x15 = difference(x4, x12)\n    x16 = apply(x11, x15)\n    x17 = rbind(manhattan, x3)\n    x18 = argmin(x16, x17)\n    x19 = mostcolor(I)\n    x20 = shape(I)\n    x21 = increment(x20)\n    x22 = canvas(x19, x21)\n    x23 = asobject(I)\n    x24 = shift(x23, UNITY)\n    x25 = paint(x22, x24)\n    x26 = interval(ONE, FIVE, ONE)\n    x27 =\n    x28 = product(x26, x26)\n    x29 = totuple(x27)\n    x30 = apply(first, x29)\n    x31 = apply(last, x29)\n    x32 = combine(x30, x31)\n    x33 = lbind(shift, x28)\n    x34 = mapply(x33, x32)\n    O = paint(x19, x34)\n    return O"], [1.1, "def solve_fb0f0eff(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = height(I)\n    x2 = halve(x1)\n    x3 = increment(x2)\n    x4 = interval(THREE, x3, ONE)\n    x5 = width(I)\n    x6 = halve(x5)\n    x7 = increment(x6)\n    x8 = interval(THREE, x7, ONE)\n    x9 = palette(I)\n    x10 = lbind(apply, toindices)\n    x11 = compose(x10, partition)\n    x12 = rbind(compose, palette)\n    x13 = lbind(apply, x12)\n    x14 = compose(x13, palette)\n    x15 = product(x4, x4)\n    x16 = first(x15)\n    x17 = last(x15)\n    x18 =885f761969(x16)\n    x19 =bdad(x18, x17)\n    x20 = compose(positive, size)\n    x21 = rbind(sfilter, x20)\n    x22 = chain(toindices, x21, x22)\n    x23 = x22(x19)\n    x24 = fgpartition(I)\n    x25 = merge(x24)\n    x26 = cover(I, x25)\n    x27 = chain(x24, box, x22)\n    x28 = apply(x27, x28)\n    x29 = lbind(shift, x28)\n    x30 = mapply(x29, x29)\n    O = paint(x26, x30)\n    return O"], [1.1, "def solve_f5e72ac4(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = numcolors(I)\n    x2 = equality(x1, THREE)\n    x3 = mfilter(x2, hline)\n    x4 = height(x3)\n    x5 = vsplit(I, x4)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 =975e(x6)\n    x9 = ofcolor(x6, ZERO)\n    x10 = toindices(x6)\n    x11 = combine(x10, x9)\n    x12 = fill(x6, ZERO, x11)\n    x13 = partition(x12)\n    x14 = difference(x1, x13)\n    x15 = argmax(x14, identity)\n    x16 = apply(color, x15)\n    x17 = increment(x16)\n    x18 = x17(x15)\n    x19 = shift(x15, x18)\n    x20 = shift(x19, x17)\n    x21 = fill(x12, ZERO, x20)\n    x22 = fill(x21, x8, x19)\n    x23 = combine(x13, x22)\n    x24 = mapply(hfrontier, x23)\n    x25 = fill(x24, x8, x19)\n    x26 = ofcolor(x25, x12)\n    x27 = palette(x25)\n    x28 = remove(x8, x27)\n    x29 = remove(x25, x28)\n    x30 = product(x26, x29)\n    x31 = first(x30)\n    x32 = last(x30)\n    x33 = hfrontier(x31)\n    x34 = vfrontier(x32)\n    x35 = combine(x33, x34)\n    O = fill(x35, x8, x35)\n    return O"], [1.1, "def solve_51c75ade(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = frontiers(I)\n    x2 = merge(x1)\n    x3 = color(x2)\n    x4 = shape(I)\n    x5 = canvas(x3, x4)\n    x6 = hconcat(I, x5)\n    x7 = objects(x6, F, F, T)\n    x8 = power(increment, FIVE)\n    x9 = lbind(remove, FIVE)\n    x10 = lbind(remove, ZERO)\n    x11 = chain(x9, x10, palette)\n    x12 = chain(x8, first, x11)\n    x13 = fork(recolor, x12, toindices)\n    x14 = compose(decrement, width)\n    x15 =\n    x16 = vsplit(x6, TWO)\n    x17 = rbind(hsplit, TWO)\n    x18 = initset(x2)\n    x19 = lbind(insert, x18)\n    x20 = chain(insert, dedupe, x19)\n    x21 = x14(x16)\n    x22 = mapply(x21, x14)\n    O = paint(I, x22)\n    return O"], [1.1, "def solve_019c936c(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = lbind(contained, ZERO)\n    x2 = compose(flip, x1)\n    x3 = sfilter(x2, x2)\n    x4 = dmirrorbind(IFApply, I)\n    x5 = merge(x3)\n    x6 = cover(I, x5)\n    x7 = lbind(compose, flip)\n    x8 =000(x1, x7)\n    x9 = chain(x11, x4, x8)\n    x10 = fill(x6, EIGHT, x5)\n    O = fill(x10, TWO, x9)\n    return O"], [1.1, "def solve_01ac8d52(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = lbind(ofcolor, I)\n    x2 = compose(lowermost, x1)\n    x3 = chain(flip, x2, shape)\n    x4 =5555frontier(I)\n    x5 = x2(x4)\n    x6 = lbind(shift, x5)\n    x7 = fork(recolor, x2, x6)\n    x8 = mapply(x7, x3)\n    O = paint(I, x8)\n    return O"], [1.1, "def solve_af17d3ef(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 =589\n    58413\n    574698\n    569420\n    233400\n    \"\"\"\n    x2 = vmirror(I)\n    x3 = hconcat(I, x1)\n    x4 = hmirror(x2)\n    O = vconcat(x2, x4)\n    return O"], [1.1, "def solve_c71329f9(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 =875(I)\n    x2 =86(I, THREE, FOUR)\n    x3 =00(x1, TWO)\n    x4 = interval(ZERO, NINE, FOUR)\n    x5 = rbind(shift, x3)\n    x6 = totuple(x4)\n    x7 = apply(x5, x6)\n    x8 = lefthalf(x1)\n    x9 = righthalf(x1)\n    x10 = palette(x8)\n    x11 = lbind(shift, x9)\n    x12 = occurrences(x8, x10)\n    x13 = mapply(x11, x12)\n    O =7555(x13)\n    return O"], [1.1, "def solve_0125051f(I):\n    \"\"\"\n    Example input:\n    1857106217\n    5198785108\n    5640607826\n    3634589267\n    9046473855\n    7262686590\n    2370892339\n    0406137578\n    7556838375\n    4985826080\n    Example output:\n    9945345320\n    4389046368\n    0201966730\n    6545294473\n    4090001370\n    7396755652\n    1379577886\n    3203922300\n    8400628975\n    2303074024\n    \"\"\"\n    x1 = helpsitter(I, T)\n    x2 =2c,022)\n    x3 = dmirror(x2)\n    x4 = papply(pair, x2, x3)\n    x5 = lbind(apply, maximum)\n    x6 = apply(x5, x4)\n    x7 = cmirror(x6)\n    x8 = papply(pair, x6, x7)\n    x9 = apply(x5, x8)\n    O = subgrid(x9, I)\n    return O"], [1.1, "def solve_f9bce92e(I):\n    \"\"\"\n    Example input:\n    2748068654\n    2606289591\n    7188196758\n    7407864897\n    9735419832\n    4607669818\n    5797350530\n    9345791087\n    9351988399\n    2795145644\n    Example output:\n    0614392360\n    5610695466\n    7629415433\n    9833153036\n    8420352885\n    2114862682\n    2358225656\n    6898679632\n    4941915426\n    0958259519\n    \"\"\"\n    x1 = compress(I)\n    x2 = objects(x1, F, F, T)\n    x3 = argmax(x2, numcolors)\n    x4 = astuple(subgrid, x3)\n    x5 = remove(x3, x2)\n    x6 = apply(ulcorner, x5)\n    x7 = merge(x6)\n    x8 = size(x7)\n    x9 = positive(x8)\n    x10 = branch(x9, identity, dmirror)\n    x11 = x10(x1)\n    x12 = decrement(x8)\n    x13 = hsplit(x11, x12)\n    x14 = rbind(ofcolor, x ZERO)\n    x15 = apply(x14, x13)\n    x16 = leastcommon(x15)\n    x17 = matcher(first, x16)\n    x18 = compose(flip, x17)\n    x19 = sfilter(x15, x18)\n    x20 = fill(x6, TWO, x19)\n    O = x10(x20)\n    return O"], [1.1, "def solve_82ab6035(I):\n    \"\"\"\n    Example input:\n    0662307852\n    2557725904\n    5521909385\n    1838839771\n    4264719127\n    4647088411\n    2614443185\n    3258704097\n    8863884912\n    5783198401\n    Example output:\n    4330581896\n    2942104601\n    1428644304\n    1860393771\n    1579828868\n    2912340957\n    4998486645\n    4414146292\n    5045907421\n    2965028414\n    \"\"\"\n    x1 = trim(I)\n    x2 = mostcolor(x1)\n    x3 = repeat(x2, ONE)\n    x4 = lbind(repeat, THREE)\n    x5 = compose(x4, size)\n    x6 =555(dedupe, x3)\n    x7 = x5(x6)\n    x8 = replace(x1, THREE, x7)\n    x9 = x5(x8)\n    x10 = asobject(x9)\n    x11 = height(x10)\n    x12 = decrement(x11)\n    x13 = subtract(x12, ONE)\n    x14 = width(x10)\n    x15 = decrement(x14)\n    x16 = add(x15, THREE)\n    x17 = rbind(repeat, x9)\n    x18 = compose(x17, vmirror)\n    x19 = fork(combine, x17, x18)\n    x20 = asobject(x10)\n    x21 = matcher(first, THREE)\n    x22 = compose(flip, x21)\n    x23 = sfilter(x20, x22)\n    x24 = fill(x8, ONE, x23)\n    x25 = trim(x24)\n    x26 = width(x25)\n    x27 = subtract(x26, DOWN)\n    x28 = tojvec(x27)\n    x29 = shift(x25, x28)\n    x30 = paint(x24, x29)\n    x31 = height(x25)\n    x32 = subtract(x31, x31)\n    x33 = toivec(x32)\n    x34 = shift(x29, x33)\n    x35 = paint(x30, x34)\n    x36 = ofcolor(x10, x3)\n    x37 = fork(connect, x29, x30)\n    x38 = fork(combine, x37, x39)\n    x39 = mapply(x38, x36)\n    O = fill(x35, x2, x39)\n    return O"], [1.1, "def solve_93eee4d2(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = hsplit(I, THREE)\n    x2 = first(x1)\n    x3 = equality(x2, THREE)\n    x4 = branch(x3, hsplit, vsplit)\n    x5 = x4(I, TWO)\n    x6 = first(x5)\n    x7 = last(x5)\n    x8 = equality(x6, EIGHT)\n    x9 = switch(x6, vmirror, hmirror)\n    x10 = x9(x8)\n    x11 = x4(x10)\n    x12 = pair(x4, x11)\n    x13 = branch(x8, first, last)\n    x14 = extract(x12, x13)\n    x15 = first(x14)\n    x16 = ulcorner(x15)\n    x17 = rightmost(x15)\n    x18 = decrement(x17)\n    x19 = add(x16, x18)\n    x20 =57(x16, x19)\n    x21 = x6(x20)\n    x22 = pair(x21, x12)\n    x23 = apply(last, x22)\n    x24 = mpapply(recolor, x23, x20)\n    O = paint(x5, x24)\n    return O"], [1.1, "def solve_271bfdb6(I):\n    \"\"\"\n    Example input:\n    6734726187\n    8850504552\n    1726879869\n    5139598860\n    8180717227\n    4058011685\n    6277548476\n    0841826076\n    6825408880\n    2667046462\n    Example output:\n    3138685615\n    8017791056\n    5409447376\n    4203926886\n    0901116137\n    3138698958\n    8062602824\n    8020065088\n    0966527268\n    9390012556\n    \"\"\"\n    x1 = palette(I)\n    x2 = remove(O = lbind(multiply, THREE)\n    x3 = power(x2, FOUR)\n    x4 = x3(I)\n    x5 = ofcolor(x4, x1)\n    x6 = shift(x5, UNITY)\n    x7 = fork(combine, vfrontier, hfrontier)\n    x8 = x7(x6)\n    x9 = toindices(x8)\n    x10 = shoot(x4, x9)\n    x11 = underfill(x4, x1, x10)\n    x12 = objects(x11, T, F, T)\n    x13 = first(x12)\n    x14 = vfrontier(x13)\n    x15 = cover(x11, x5)\n    O = paint(x15, x13)\n    return O"]]}